//wctype.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_WCTYPE_H_3
#define QOR_WCTYPE_H_3

#include <ctype.h>
#include <stdarg.h>
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <wchar.h>
#include "SystemQOR.h"
#include QOR_SYS_PLATFORMTYPES(wctype)

#ifndef _WCTYPE_T_DEFINED
	typedef nsPlatform::wint_t wint_t;
	typedef nsPlatform::wctype_t wctype_t;
#	define _WCTYPE_T_DEFINED
#endif

typedef nsPlatform::wctrans_t wctrans_t;
typedef nsPlatform::locale_t locale_t;

#define WEOF			( nsPlatform::WEoF )

__QCMP_STARTLINKAGE_C

    __QOR_INTERFACE( __CQOR ) int iswascii( ::wint_t wc );
    __QOR_INTERFACE( __CQOR ) int iswalnum( ::wint_t wc );
	__QOR_INTERFACE( __CQOR ) int iswalnum_l( ::wint_t, ::locale_t );
    __QOR_INTERFACE( __CQOR ) int iswalpha( ::wint_t wc );
	__QOR_INTERFACE( __CQOR ) int iswalpha_l( ::wint_t, ::locale_t );
    __QOR_INTERFACE( __CQOR ) int iswblank( ::wint_t wc );
	__QOR_INTERFACE( __CQOR ) int iswblank_l( ::wint_t, ::locale_t );
    __QOR_INTERFACE( __CQOR ) int iswcntrl( ::wint_t wc );
	__QOR_INTERFACE( __CQOR ) int iswcntrl_l( ::wint_t, ::locale_t );
    __QOR_INTERFACE( __CQOR ) int iswdigit( ::wint_t wc );
	__QOR_INTERFACE( __CQOR ) int iswdigit_l( ::wint_t, ::locale_t );
    __QOR_INTERFACE( __CQOR ) int iswgraph( ::wint_t wc );
	__QOR_INTERFACE( __CQOR ) int iswgraph_l( ::wint_t, ::locale_t );
    __QOR_INTERFACE( __CQOR ) int iswlower( ::wint_t wc );
	__QOR_INTERFACE( __CQOR ) int iswlower_l( ::wint_t, ::locale_t );
    __QOR_INTERFACE( __CQOR ) int iswprint( ::wint_t wc );
	__QOR_INTERFACE( __CQOR ) int iswprint_l( ::wint_t, ::locale_t );
    __QOR_INTERFACE( __CQOR ) int iswpunct( ::wint_t wc );
	__QOR_INTERFACE( __CQOR ) int iswpunct_l( ::wint_t, ::locale_t );
    __QOR_INTERFACE( __CQOR ) int iswspace( ::wint_t wc );
	__QOR_INTERFACE( __CQOR ) int iswspace_l( ::wint_t, ::locale_t );
    __QOR_INTERFACE( __CQOR ) int iswupper( ::wint_t wc );
	__QOR_INTERFACE( __CQOR ) int iswupper_l( ::wint_t, ::locale_t );
    __QOR_INTERFACE( __CQOR ) int iswxdigit( ::wint_t wc );
	__QOR_INTERFACE( __CQOR ) int iswxdigit_l( ::wint_t, ::locale_t );
    __QOR_INTERFACE( __CQOR ) int iswctype( ::wint_t wc, ::wctype_t desc );
	__QOR_INTERFACE( __CQOR ) int iswctype_l( ::wint_t, ::wctype_t, ::locale_t );
    __QOR_INTERFACE( __CQOR ) ::wint_t towctrans( ::wint_t wc, ::wctrans_t desc );
	__QOR_INTERFACE( __CQOR ) ::wint_t towctrans_l( ::wint_t, ::wctrans_t, ::locale_t );
    __QOR_INTERFACE( __CQOR ) ::wint_t towlower( ::wint_t wc );
	__QOR_INTERFACE( __CQOR ) ::wint_t towlower_l( ::wint_t, ::locale_t );
    __QOR_INTERFACE( __CQOR ) ::wint_t towupper( ::wint_t wc );
	__QOR_INTERFACE( __CQOR ) ::wint_t towupper_l( ::wint_t, ::locale_t );
    __QOR_INTERFACE( __CQOR ) ::wctrans_t wctrans( const char* pProperty );
	__QOR_INTERFACE( __CQOR ) ::wctrans_t wctrans_l( const char*, ::locale_t );
    __QOR_INTERFACE( __CQOR ) ::wctype_t wctype( const char* pProperty );
	__QOR_INTERFACE( __CQOR ) ::wctype_t wctype_l( const char*, ::locale_t );

	__QOR_INTERFACE( __CQOR ) int wctob_l( ::wint_t c, ::locale_t loc );	//clang/libc++ extension
	__QOR_INTERFACE( __CQOR ) size_t wcrtomb_l( char *__QCMP_RESTRICT s, wchar_t wc, ::mbstate_t* __QCMP_RESTRICT ps, ::locale_t loc );	//clang/libc++ extension
	__QOR_INTERFACE( __CQOR ) ::wint_t btowc_l( int c, ::locale_t loc );	//clang/libc++ extension

__QCMP_ENDLINKAGE_C

#endif//QOR_WCTYPE_H_3
