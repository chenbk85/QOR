//float.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_FLOAT_H_3
#define QOR_FLOAT_H_3

#include "SystemQOR.h"
#include QOR_SYS_PLATFORMTYPES(float)

//typedef nsPlatform::_EXCEPTION_POINTERS _EXCEPTION_POINTERS;
typedef nsPlatform::_FPIEEE_RECORD _FPIEEE_RECORD;

#define FLT_RADIX			( nsPlatform::FloatRadix )				//Radix of exponent representation
#define FLT_MANT_DIG		( nsPlatform::FloatMantDigits )
#define DBL_MANT_DIG		( nsPlatform::DoubleMantDigits )
#define LDBL_MANT_DIG		( nsPlatform::LongDoubleMantDigits )	//Number of base-FLT_RADIX digits in the floating-point significand
#define DECIMAL_DIG			( nsPlatform::DecimalDigits )			//Number of decimal digits, n, such that any floating-point number in the widest supported floating type with pmax radix b digits can be rounded to a floating-point number with n decimal digits and back again without change to the value.
#define FLT_DIG				( nsPlatform::FloatDigits )
#define DBL_DIG				( nsPlatform::DoubleDigits )
#define LDBL_DIG			( nsPlatform::LongDoubleDigits )		//Number of decimal digits, q, such that any floating-point number with q decimal digits can be rounded into a floating-point number with p radix b digits and back again without change to the q decimal digits.
#define FLT_MIN_EXP			( nsPlatform::FloatMinExponent )		//Minimum negative integer such that FLT_RADIX raised to that power minus 1 is a normalized floating-point number, emin.
#define DBL_MIN_EXP			( nsPlatform::DoubleMinExponent )
#define LDBL_MIN_EXP		( nsPlatform::LongDoubleMinExponent )
#define FLT_MIN_10_EXP		( nsPlatform::FloatMin10Exponent )		//Minimum negative integer such that 10 raised to that power is in the range of normalized floating-point numbers.
#define DBL_MIN_10_EXP		( nsPlatform::DoubleMin10Exponent )
#define LDBL_MIN_10_EXP		( nsPlatform::LongDoubleMin10Exponent )
#define FLT_MAX_10_EXP		( nsPlatform::FloatMax10Exponent )		//Maximum integer such that 10 raised to that power is in the range of representable finite floating-point numbers.
#define DBL_MAX_10_EXP		( nsPlatform::DoubleMax10Exponent )
#define LDBL_MAX_10_EXP		( nsPlatform::LongDoubleMax10Exponent )
#define FLT_MAX				( nsPlatform::FloatMax )				//Maximum representable finite floating-point number.
#define DBL_MAX				( nsPlatform::DoubleMax )
#define LDBL_MAX			( nsPlatform::LongDoubleMax )
#define FLT_EPSILON			( nsPlatform::FloatEpsilon )			//The difference between 1 and the least value greater than 1 that is representable in the given floating-point type, b1-p.
#define DBL_EPSILON			( nsPlatform::DoubleEpsilon )
#define LDBL_EPSILON		( nsPlatform::LongDoubleEpsilon )
#define FLT_MIN				( nsPlatform::FloatMin )				//Minimum normalized positive floating-point number, bemin -1.
#define DBL_MIN				( nsPlatform::DoubleMin )
#define LDBL_MIN			( nsPlatform::LongDoubleMin )

__QCMP_STARTLINKAGE_C

	__QOR_INTERFACE( __CQOR ) unsigned int _statusfp( void );
	__QOR_INTERFACE( __CQOR ) void __cdecl _set_controlfp( unsigned int newControl, unsigned int mask );
	__QOR_INTERFACE( __CQOR ) double _nextafter( double x, double y );
	__QOR_INTERFACE( __CQOR ) double _logb( double x );
	__QOR_INTERFACE( __CQOR ) void _fpreset( void );
	__QOR_INTERFACE( __CQOR ) int _fpclass( double x );
	__QOR_INTERFACE( __CQOR ) int _fpieee_flt( unsigned long excCode, nsPlatform::_EXCEPTION_POINTERS* excInfo, int handler( ::_FPIEEE_RECORD* ) );
	__QOR_INTERFACE( __CQOR ) int _finite( double x );
	__QOR_INTERFACE( __CQOR ) double _copysign( double x, double y );

	__QOR_INTERFACE( __CQOR ) unsigned int _control87( unsigned int New, unsigned int mask );
	__QOR_INTERFACE( __CQOR ) unsigned int _controlfp( unsigned int New, unsigned int mask );
	__QOR_INTERFACE( __CQOR ) int __control87_2( unsigned int New, unsigned int mask, unsigned int* x86_cw, unsigned int* sse2_cw );
	__QOR_INTERFACE( __CQOR ) nsPlatform::errno_t _controlfp_s( unsigned int* currentControl, unsigned int newControl, unsigned int mask );
	__QOR_INTERFACE( __CQOR ) unsigned int _clear87( void );
	__QOR_INTERFACE( __CQOR ) unsigned int _clearfp( void );
	__QOR_INTERFACE( __CQOR ) double _chgsign( double x );


__QCMP_ENDLINKAGE_C

#endif //QOR_FLOAT_H_3
