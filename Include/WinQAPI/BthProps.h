//BthProps.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQAPI_MODULES_BTHPROPS_H_3
#define WINQAPI_MODULES_BTHPROPS_H_3

#include "../SystemQOR/MSWindows/WinQAPI/include/DynamicLibrary.h"
#include "WinQAPI/Kernel32.h"
#include <BluetoothAPIs.h>
#include <bthioctl.h>

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQAPI ) CBthProps : public CDll
	{
	public:

		//--------------------------------------------------------------------------------
		CBthProps() : CDll( TEXT("Bthprops.cpl") )
		{						
		}

		//--------------------------------------------------------------------------------
		static CBthProps& Instance( void )
		{
			static CBthProps _instance;
			return _instance;
		}

		//--------------------------------------------------------------------------------
		~CBthProps()
		{						
		}

		DWORD BluetoothAuthenticateDevice( HWND hwndParent, HANDLE hRadio, BLUETOOTH_DEVICE_INFO* pbtdi, PWCHAR pszPasskey, ULONG ulPasskeyLength );
		DWORD BluetoothAuthenticateDeviceEx( HWND hwndParentIn, HANDLE hRadioIn, BLUETOOTH_DEVICE_INFO* pbtdiInout, PBLUETOOTH_OOB_DATA_INFO pbtOobData, AUTHENTICATION_REQUIREMENTS authenticationRequirement );
		BOOL BluetoothDisplayDeviceProperties( HWND hwndParent, BLUETOOTH_DEVICE_INFO* pbtdi );
		BOOL BluetoothEnableDiscovery( HANDLE hRadio, BOOL fEnabled );
		BOOL BluetoothEnableIncomingConnections( HANDLE hRadio, BOOL fEnabled );
		DWORD BluetoothEnumerateInstalledServices( HANDLE hRadio, BLUETOOTH_DEVICE_INFO* pbtdi, DWORD* pcServices, GUID* pGuidServices );
		BOOL BluetoothFindDeviceClose( HBLUETOOTH_DEVICE_FIND hFind );
		HBLUETOOTH_DEVICE_FIND BluetoothFindFirstDevice( BLUETOOTH_DEVICE_SEARCH_PARAMS* pbtsp, BLUETOOTH_DEVICE_INFO* pbtdi );
		HBLUETOOTH_RADIO_FIND BluetoothFindFirstRadio( BLUETOOTH_FIND_RADIO_PARAMS* pbtfrp, HANDLE* phRadio );
		BOOL BluetoothFindNextDevice( HBLUETOOTH_DEVICE_FIND hFind, BLUETOOTH_DEVICE_INFO* pbtdi );
		BOOL BluetoothFindNextRadio( HBLUETOOTH_RADIO_FIND hFind, HANDLE* phRadio );
		BOOL BluetoothFindRadioClose( HBLUETOOTH_RADIO_FIND hFind );
		DWORD BluetoothGetDeviceInfo( HANDLE hRadio, BLUETOOTH_DEVICE_INFO* pbtdi );
		DWORD BluetoothGetRadioInfo( HANDLE hRadio, PBLUETOOTH_RADIO_INFO pRadioInfo );
		BOOL BluetoothIsConnectable( HANDLE hRadio );
		BOOL BluetoothIsDiscoverable( HANDLE hRadio );
		BOOL BluetoothIsVersionAvailable( UCHAR MajorVersion, UCHAR MinorVersion );
		DWORD BluetoothRegisterForAuthentication( BLUETOOTH_DEVICE_INFO* pbtdi, HBLUETOOTH_AUTHENTICATION_REGISTRATION* phRegHandle, PFN_AUTHENTICATION_CALLBACK pfnCallback, PVOID pvParam );
		DWORD BluetoothRegisterForAuthenticationEx( const BLUETOOTH_DEVICE_INFO* pbtdiln, HBLUETOOTH_AUTHENTICATION_REGISTRATION* phRegHandleOut, PFN_AUTHENTICATION_CALLBACK_EX pfnCallbackIn, PVOID pvParam );
		DWORD BluetoothRemoveDevice( BLUETOOTH_ADDRESS* pAddress );
		BOOL BluetoothSdpEnumAttributes( LPBYTE pSDPStream, ULONG cbStreamSize, PFN_BLUETOOTH_ENUM_ATTRIBUTES_CALLBACK pfnCallback, LPVOID pvParam );
		DWORD BluetoothSdpGetAttributeValue( LPBYTE pRecordStream, ULONG cbRecordLength, USHORT usAttributeId, PSDP_ELEMENT_DATA pAttributeData );
		DWORD BluetoothSdpGetContainerElementData( LPBYTE pContainerStream, ULONG cbContainerLength, HBLUETOOTH_CONTAINER_ELEMENT* pElement, PSDP_ELEMENT_DATA pData );
		DWORD BluetoothSdpGetElementData( LPBYTE pSdpStream, ULONG cbSpdStreamLength, PSDP_ELEMENT_DATA pData );
		DWORD BluetoothSdpGetString( LPBYTE pRecordStream, ULONG cbRecordLength, PSDP_STRING_TYPE_DATA pStringData, USHORT usStringOffset, PWCHAR pszString, PULONG pcchStringLength );
		BOOL BluetoothSelectDevices( BLUETOOTH_SELECT_DEVICE_PARAMS* pbtsdp );
		BOOL BluetoothSelectDevicesFree( BLUETOOTH_SELECT_DEVICE_PARAMS* pbtsdp );
		DWORD BluetoothSendAuthenticationResponse( HANDLE hRadio, BLUETOOTH_DEVICE_INFO* pbtdi, LPWSTR pszPasskey );
		HRESULT BluetoothSendAuthenticationResponseEx( HANDLE hRadioIn, PBLUETOOTH_AUTHENTICATE_RESPONSE pauthResponse );
		DWORD BluetoothSetLocalServiceInfo( HANDLE hRadioIn, const GUID *pClassGuid, ULONG ulInstance, const BLUETOOTH_LOCAL_SERVICE_INFO* pServiceInfoIn );
		DWORD BluetoothSetServiceState( HANDLE hRadio, BLUETOOTH_DEVICE_INFO* pbtdi, GUID* pGuidService, DWORD dwServiceFlags );
		BOOL BluetoothUnregisterAuthentication( HBLUETOOTH_AUTHENTICATION_REGISTRATION hRegHandle );
		DWORD BluetoothUpdateDeviceRecord( BLUETOOTH_DEVICE_INFO* pbtdi );
	};

}//nsWinQAPI

#endif//WINQAPI_MODULES_BTHPROPS_H_3
