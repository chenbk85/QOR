//UXTheme.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef _QSYS_API_WIN32_MODULES_UXTHEME_H_
#define _QSYS_API_WIN32_MODULES_UXTHEME_H_

#include "Kernel32.h"
#include "../SystemQOR/MSWindows/WinQAPI/include/DynamicLibrary.h"
#include <Uxtheme.h>

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//--------------------------------------------------------------------------------	
	class __QOR_INTERFACE( __WINQAPI ) CUXTheme : public CDll
	{
	public:

		//--------------------------------------------------------------------------------	
		CUXTheme() : CDll( TEXT( "UxTheme" ) )
		{
		}

		//--------------------------------------------------------------------------------
		static CUXTheme& Instance( void )
		{
			static CUXTheme _instance;
			return _instance;
		}

		//--------------------------------------------------------------------------------
		~CUXTheme()
		{
		}

		HANIMATIONBUFFER BeginBufferedAnimation( HWND hwnd, HDC hdcTarget, const RECT* rcTarget, BP_BUFFERFORMAT dwFormat, BP_PAINTPARAMS* pPaintParams, BP_ANIMATIONPARAMS* pAnimationParams, HDC* phdcFrom, HDC* phdcTo );
		HPAINTBUFFER BeginBufferedPaint( HDC hdcTarget, const RECT* prcTarget, BP_BUFFERFORMAT dwFormat, BP_PAINTPARAMS* pPaintParams, HDC* phdc );
		BOOL BeginPanningFeedback( HWND hwnd );
		HRESULT BufferedPaintClear( HPAINTBUFFER hBufferedPaint, const RECT* prc );
		HRESULT BufferedPaintInit( void );
		BOOL BufferedPaintRenderAnimation( HWND hwnd, HDC hdcTarget );
		HRESULT BufferedPaintSetAlpha( HPAINTBUFFER hBufferedPaint, const RECT* prc, BYTE alpha );
		HRESULT BufferedPaintStopAllAnimations( HWND hwnd );
		HRESULT BufferedPaintUnInit( void );
		HRESULT CloseThemeData( HTHEME hTheme );
		HRESULT DrawThemeBackground( HTHEME hTheme, HDC hdc, int iPartId, int iStateId, const RECT* pRect, const RECT* pClipRect );
		HRESULT DrawThemeBackgroundEx( HTHEME hTheme, HDC hdc, int iPartId, int iStateId, const RECT* pRect, const DTBGOPTS* pOptions );
		HRESULT DrawThemeEdge( HTHEME hTheme, HDC hdc, int iPartId, int iStateId, LPCRECT pDestRect, UINT uEdge, UINT uFlags, LPRECT pContentRect );
		HRESULT DrawThemeIcon( HTHEME hTheme, HDC hdc, int iPartId, int iStateId, LPCRECT pRect, HIMAGELIST himl, int iImageIndex );
		HRESULT DrawThemeParentBackground( HWND hwnd, HDC hdc, const RECT* prc );
		HRESULT DrawThemeParentBackgroundEx( HWND hwnd, HDC hdc, DWORD dwFlags, const RECT* prc );
		HRESULT DrawThemeText( HTHEME hTheme, HDC hdc, int iPartId, int iStateId, LPCWSTR pszText, int iCharCount, DWORD dwTextFlags, DWORD dwTextFlags2, LPCRECT pRect );
		HRESULT DrawThemeTextEx( HTHEME hTheme, HDC hdc, int iPartId, int iStateId, LPCWSTR pszText, int iCharCount, DWORD dwFlags, LPRECT pRect, const DTTOPTS* pOptions );
		HRESULT EnableThemeDialogTexture( HWND hwnd, DWORD dwFlags );
		HRESULT EnableTheming( BOOL fEnable );
		HRESULT EndBufferedAnimation( HANIMATIONBUFFER hbpAnimation, BOOL fUpdateTarget );
		HRESULT EndBufferedPaint( HPAINTBUFFER hBufferedPaint, BOOL fUpdateTarget );
		BOOL EndPanningFeedback( HWND hwnd, BOOL fAnimateBack );
		HRESULT GetBufferedPaintBits( HPAINTBUFFER hBufferedPaint, RGBQUAD** ppbBuffer, int* pcxRow );
		HDC GetBufferedPaintDC( HPAINTBUFFER hBufferedPaint );
		HDC GetBufferedPaintTargetDC( HPAINTBUFFER hBufferedPaint );
		HRESULT GetBufferedPaintTargetRect( HPAINTBUFFER hBufferedPaint, RECT* prc );
		HRESULT GetCurrentThemeName( LPWSTR pszThemeFileName, int dwMaxNameChars, LPWSTR pszColorBuff, int cchMaxColorChars, LPWSTR pszSizeBuff, int cchMaxSizeChars );
		DWORD GetThemeAppProperties(void);
		HRESULT GetThemeBackgroundContentRect( HTHEME hTheme, HDC hdc, int iPartId, int iStateId, LPCRECT pBoundingRect, LPRECT pContentRect );
		HRESULT GetThemeBackgroundExtent( HTHEME hTheme, HDC hdc, int iPartId, int iStateId, LPCRECT pContentRect, LPRECT pExtentRect );
		HRESULT GetThemeBackgroundRegion( HTHEME hTheme, HDC hdc, int iPartId, int iStateId, LPCRECT pRect, HRGN* pRegion );
		HRESULT GetThemeBitmap( HTHEME hTheme, int iPartId, int iStateId, int iPropId, ULONG dwFlags, HBITMAP * phBitmap );
		HRESULT GetThemeBool( HTHEME hTheme, int iPartId, int iStateId, int iPropId, BOOL* pfVal );
		HRESULT GetThemeColor( HTHEME hTheme, int iPartId, int iStateId, int iPropId, COLORREF* pColor );
		HRESULT GetThemeDocumentationProperty( LPCWSTR pszThemeName, LPCWSTR pszPropertyName, LPWSTR pszValueBuff, int cchMaxValChars );
		HRESULT GetThemeEnumValue( HTHEME hTheme, int iPartId, int iStateId, int iPropId, int* piVal );
		HRESULT GetThemeFilename( HTHEME hTheme, int iPartId, int iStateId, int iPropId, LPWSTR pszThemeFilename, int cchMaxBuffChars );
		HRESULT GetThemeFont( HTHEME hTheme, HDC hdc, int iPartId, int iStateId, int iPropId, LOGFONTW* pFont );
		HRESULT GetThemeInt( HTHEME hTheme, int iPartId, int iStateId, int iPropId, int* piVal );
		HRESULT GetThemeIntList( HTHEME hTheme, int iPartId, int iStateId, int iPropId, INTLIST* pIntList );
		HRESULT GetThemeMargins( HTHEME hTheme, HDC hdc, int iPartId, int iStateId, int iPropId, LPRECT prc, MARGINS* pMargins );
		HRESULT GetThemeMetric( HTHEME hTheme, HDC hdc, int iPartId, int iStateId, int iPropId, int* piVal );
		HRESULT GetThemePartSize( HTHEME hTheme, HDC hdc, int iPartId, int iStateId, LPCRECT prc, THEMESIZE eSize, SIZE* psz );
		HRESULT GetThemePosition( HTHEME hTheme, int iPartId, int iStateId, int iPropId, POINT* pPoint );
		HRESULT GetThemePropertyOrigin( HTHEME hTheme, int iPartId, int iStateId, int iPropId, PROPERTYORIGIN* pOrigin );
		HRESULT GetThemeRect( HTHEME hTheme, int iPartId, int iStateId, int iPropId, LPRECT pRect );
		HRESULT GetThemeStream( HTHEME hTheme, int iPartId, int iStateId, int iPropId, VOID** ppvStream, DWORD* pcbStream, HINSTANCE hInst );
		HRESULT GetThemeString( HTHEME hTheme, int iPartId, int iStateId, int iPropId, LPWSTR pszBuff, int cchMaxBuffChars );
		BOOL GetThemeSysBool( HTHEME hTheme, int iBoolID );
		COLORREF GetThemeSysColor( HTHEME hTheme, int iColorID );
		HBRUSH GetThemeSysColorBrush( HTHEME hTheme, int iColorID );
		HRESULT GetThemeSysFont( HTHEME hTheme, int iFontID, LOGFONTW* plf );
		HRESULT GetThemeSysInt( HTHEME hTheme, int iIntID, int* piValue );
		int GetThemeSysSize( HTHEME hTheme, int iSizeID );
		HRESULT GetThemeSysString( HTHEME hTheme, int iStringID, LPWSTR pszStringBuff, int cchMaxStringChars );
		HRESULT GetThemeTextExtent( HTHEME hTheme, HDC hdc, int iPartId, int iStateId, LPCWSTR pszText, int iCharCount, DWORD dwTextFlags, LPCRECT pBoundingRect, LPRECT pExtentRect );
		HRESULT GetThemeTextMetrics( HTHEME hTheme, HDC hdc, int iPartId, int iStateId, TEXTMETRIC* ptm );
		HRESULT GetThemeTransitionDuration( HTHEME hTheme, int iPartId, int iStateIdFrom, int iStateIdTo, int iPropId, DWORD* pdwDuration );
		HTHEME GetWindowTheme( HWND hWnd );
		HRESULT HitTestThemeBackground( HTHEME hTheme, HDC hdc, int iPartId, int iStateId, DWORD dwOptions, LPCRECT pRect, HRGN hrgn, POINT ptTest, WORD* pwHitTestCode );
		BOOL IsAppThemed( void );
		BOOL IsCompositionActive( void );
		BOOL IsThemeActive( void );
		BOOL IsThemeBackgroundPartiallyTransparent( HTHEME hTheme, int iPartId, int iStateId );
		BOOL IsThemeDialogTextureEnabled( HWND hwnd );
		BOOL IsThemePartDefined( HTHEME hTheme, int iPartId, int iStateId );
		HTHEME OpenThemeData( HWND hwnd, LPCWSTR pszClassList );
		HTHEME OpenThemeDataEx( HWND hwnd, LPCWSTR pszClassIdList, DWORD dwFlags );
		void SetThemeAppProperties( DWORD dwFlags );
		HRESULT SetWindowTheme( HWND hwnd, LPCWSTR pszSubAppName, LPCWSTR pszSubIdList );
		HRESULT SetWindowThemeAttribute( HWND hwnd, enum WINDOWTHEMEATTRIBUTETYPE eAttribute, PVOID pvAttribute, DWORD cbAttribute );
		HRESULT SetWindowThemeNonClientAttributes( HWND hwnd, DWORD dwMask, DWORD dwAttributes );
		BOOL UpdatePanningFeedback( HWND hwnd, LONG lTotalOverpanOffsetX, LONG lTotalOverpanOffsetY, BOOL fInInertia );
	};

}//nsWinQAPI

#endif//_QSYS_API_WIN32_MODULES_UXTHEME_H_

