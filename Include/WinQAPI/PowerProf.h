//PowerProf.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQAPI_MODULES_POWERPROF_H_3
#define WINQAPI_MODULES_POWERPROF_H_3

#include "../SystemQOR/MSWindows/WinQAPI/include/DynamicLibrary.h"
#include "WinQAPI/Kernel32.h"
#include <powrprof.h>

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQAPI ) CPowerProf : public CDll
	{
	public:

		//--------------------------------------------------------------------------------
		CPowerProf() : CDll( TEXT("powrprof.dll") )
		{						
		}

		//--------------------------------------------------------------------------------
		static CPowerProf& Instance( void )
		{
			static CPowerProf _instance;
			return _instance;
		}

		//--------------------------------------------------------------------------------
		~CPowerProf()
		{						
		}

		NTSTATUS CallNtPowerInformation( POWER_INFORMATION_LEVEL InformationLevel, PVOID lpInputBuffer, ULONG nInputBufferSize, PVOID lpOutputBuffer, ULONG nOutputBufferSize );
		BOOLEAN CanUserWritePwrScheme( void );
		BOOLEAN DeletePwrScheme( UINT uiIndex );
		BOOLEAN DevicePowerClose( void );
		BOOLEAN DevicePowerEnumDevices( ULONG QueryIndex, ULONG QueryInterpretationFlags, ULONG QueryFlags, PBYTE pReturnBuffer, PULONG pBufferSize );
		BOOLEAN DevicePowerOpen( ULONG Flags );
		DWORD DevicePowerSetDeviceState( LPCWSTR DeviceDescription, ULONG SetFlags, const void* SetData );
		BOOLEAN EnumPwrSchemes( PWRSCHEMESENUMPROC lpfnPwrSchemesEnumProc, LPARAM lParam );
		BOOLEAN GetActivePwrScheme( PUINT puiID );
		BOOLEAN GetCurrentPowerPolicies( PGLOBAL_POWER_POLICY pGlobalPowerPolicy, PPOWER_POLICY pPowerPolicy );
		BOOLEAN GetPwrCapabilities( PSYSTEM_POWER_CAPABILITIES lpSystemPowerCapabilities );
		BOOLEAN GetPwrDiskSpindownRange( PUINT RangeMax, PUINT RangeMin );
		BOOLEAN IsPwrHibernateAllowed( void );
		BOOLEAN IsPwrShutdownAllowed( void );
		BOOLEAN IsPwrSuspendAllowed( void );
		BOOL IsSystemResumeAutomatic( void );
		DWORD PowerCanRestoreIndividualDefaultPowerScheme( const GUID* SchemeGuid );
		BOOL PowerClearRequest( HANDLE PowerRequest, POWER_REQUEST_TYPE RequestType );
		DWORD PowerCreatePossibleSetting( HKEY RootSystemPowerKey, const GUID* SubGroupOfPowerSettingsGuid, const GUID* PowerSettingGuid, ULONG PossibleSettingIndex );
		HANDLE PowerCreateRequest( PREASON_CONTEXT Context );
		DWORD PowerCreateSetting( HKEY RootSystemPowerKey, const GUID* SubGroupOfPowerSettingsGuid, const GUID* PowerSettingGuid );
		DWORD PowerDeleteScheme( HKEY RootPowerKey, const GUID* SchemeGuid );
		POWER_PLATFORM_ROLE PowerDeterminePlatformRole( void );
		DWORD PowerDuplicateScheme( HKEY RootPowerKey, const GUID* SourceSchemeGuid, GUID** DestinationSchemeGuid );
		DWORD PowerEnumerate( HKEY RootPowerKey, const GUID* SchemeGuid, const GUID* SubGroupOfPowerSettingsGuid, POWER_DATA_ACCESSOR AccessFlags, ULONG Index, UCHAR* Buffer, DWORD* BufferSize );
		DWORD PowerGetActiveScheme( HKEY UserRootPowerKey, GUID** ActivePolicyGuid );
		DWORD PowerImportPowerScheme( HKEY RootPowerKey, LPCWSTR ImportFileNamePath, GUID** DestinationSchemeGuid );
		DWORD PowerReadACDefaultIndex( HKEY RootPowerKey, const GUID* SchemePersonalityGuid, const GUID* SubGroupOfPowerSettingsGuid, const GUID* PowerSettingGuid, LPDWORD AcDefaultIndex );
		DWORD PowerReadACValue( HKEY RootPowerKey, const GUID* SchemeGuid, const GUID* SubGroupOfPowerSettingsGuid, const GUID* PowerSettingGuid, PULONG Type, LPBYTE Buffer, LPDWORD BufferSize );
		DWORD PowerReadACValueIndex( HKEY RootPowerKey, const GUID* SchemeGuid, const GUID* SubGroupOfPowerSettingsGuid, const GUID* PowerSettingGuid, LPDWORD AcValueIndex );
		DWORD PowerReadDCDefaultIndex( HKEY RootPowerKey, const GUID* SchemePersonalityGuid, const GUID* SubGroupOfPowerSettingsGuid, const GUID* PowerSettingGuid, LPDWORD DcDefaultIndex );
		DWORD PowerReadDCValue( HKEY RootPowerKey, const GUID* SchemeGuid, const GUID* SubGroupOfPowerSettingsGuid, const GUID* PowerSettingGuid, PULONG Type, PUCHAR Buffer, LPDWORD BufferSize );
		DWORD PowerReadDCValueIndex( HKEY RootPowerKey, const GUID* SchemeGuid, const GUID* SubGroupOfPowerSettingsGuid, const GUID* PowerSettingGuid, LPDWORD DcValueIndex );
		DWORD PowerReadDescription( HKEY RootPowerKey, const GUID* SchemeGuid, const GUID* SubGroupOfPowerSettingsGuid, const GUID* PowerSettingGuid, PUCHAR Buffer, LPDWORD BufferSize );
		DWORD PowerReadFriendlyName( HKEY RootPowerKey, const GUID* SchemeGuid, const GUID* SubGroupOfPowerSettingsGuid, const GUID* PowerSettingGuid, PUCHAR Buffer, LPDWORD BufferSize );
		DWORD PowerReadIconResourceSpecifier( HKEY RootPowerKey, const GUID* SchemeGuid, const GUID* SubGroupOfPowerSettingsGuid, const GUID* PowerSettingGuid, PUCHAR Buffer, LPDWORD BufferSize );
		DWORD PowerReadPossibleDescription( HKEY RootPowerKey, const GUID* SubGroupOfPowerSettingsGuid, const GUID* PowerSettingGuid, ULONG PossibleSettingIndex, PUCHAR Buffer, LPDWORD BufferSize );
		DWORD PowerReadPossibleFriendlyName( HKEY RootPowerKey, const GUID* SubGroupOfPowerSettingsGuid, const GUID* PowerSettingGuid, ULONG PossibleSettingIndex, PUCHAR Buffer, LPDWORD BufferSize );

		//...TODO...
		
		DWORD PowerSetActiveScheme( HKEY UserRootPowerKey, const GUID* SchemeGuid );
		BOOL PowerSetRequest( HANDLE PowerRequest, POWER_REQUEST_TYPE RequestType );
		DWORD PowerSettingAccessCheck( POWER_DATA_ACCESSOR AccessFlags, const GUID* PowerGuid );

		//...TODO...

		BOOLEAN ReadGlobalPwrPolicy( PGLOBAL_POWER_POLICY pGlobalPowerPolicy );
		BOOLEAN ReadProcessorPwrScheme( UINT uiID, PMACHINE_PROCESSOR_POWER_POLICY pMachineProcessorPowerPolicy );
		BOOLEAN ReadPwrScheme( UINT uiID, PPOWER_POLICY pPowerPolicy );
		BOOLEAN SetActivePwrScheme( UINT uiID, PGLOBAL_POWER_POLICY lpGlobalPowerPolicy, PPOWER_POLICY lpPowerPolicy );
		BOOLEAN SetSuspendState( BOOLEAN Hibernate, BOOLEAN ForceCritical, BOOLEAN DisableWakeEvent );
		BOOL SetSystemPowerState( BOOL fSuspend, BOOL fForce );
		EXECUTION_STATE SetThreadExecutionState( EXECUTION_STATE esFlags );
		BOOLEAN WriteGlobalPwrPolicy( PGLOBAL_POWER_POLICY pGlobalPowerPolicy );
		BOOLEAN WriteProcessorPwrScheme( UINT ID, PMACHINE_PROCESSOR_POWER_POLICY pMachineProcessorPowerPolicy );
		BOOLEAN WritePwrScheme( PUINT puiID, LPWSTR lpszName, LPWSTR lpszDescription, PPOWER_POLICY pPowerPolicy );

	};

}//nsWinQAPI

#endif//WINQAPI_MODULES_POWERPROF_H_3
