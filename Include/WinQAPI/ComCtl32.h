//ComCtl32.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef _QSYS_API_WIN32_MODULES_COMCTL32_H_
#define _QSYS_API_WIN32_MODULES_COMCTL32_H_

#include "WinQAPI/User32.h"
#include <CommCtrl.h>
#include <OleIdl.h>

#ifndef LPSTREAM
#	define LPSTREAM void*
#endif

#if		( _WIN32_WINNT < 0x0501 )

typedef LRESULT (CALLBACK *SUBCLASSPROC)(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam, UINT_PTR uIdSubclass, DWORD_PTR dwRefData);

#endif//( _WIN32_WINNT < 0x0501 )

#if		( NTDDI_VERSION < NTDDI_VISTA )
	typedef struct tagDATETIMEPICKERINFO
	{
		DWORD cbSize;

		RECT rcCheck;
		DWORD stateCheck;

		RECT rcButton;
		DWORD stateButton;

		HWND hwndEdit;
		HWND hwndUD;
		HWND hwndDropDown;
	} DATETIMEPICKERINFO, *LPDATETIMEPICKERINFO;
#endif//( NTDDI_VERSION < NTDDI_VISTA )

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//Updated to match version 6.0.2900.5512

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQAPI ) CComCtl32 : public CDll
	{
	public:

		//--------------------------------------------------------------------------------
		CComCtl32() : CDll( TEXT("ComCtl32") )
		{						
		}

		//--------------------------------------------------------------------------------
		static CComCtl32& Instance( void )
		{
			static CComCtl32 _instance;
			return _instance;
		}

		//--------------------------------------------------------------------------------
		~CComCtl32()
		{						
		}

		/*
AddMRUStringW
CreateMappedBitmap
CreateMRUListW
*/
		HPROPSHEETPAGE CreatePropertySheetPage( LPCPROPSHEETPAGE lppsp );
			/*

CreateStatusWindow
CreateStatusWindowA
CreateStatusWindowW
CreateToolbar
CreateToolbarEx
CreateUpDownControl
DefSubclassProc
DestroyPropertySheetPage
DllGetVersion
DllInstall
DPA_DeleteAllPtrs
DPA_DeletePtr
DPA_DestroyCallback
DPA_EnumCallback
DPA_InsertPtr
DPA_Search
DPA_SetPtr
DPA_Sort
*/
		
		void DrawInsert( HWND hWndParent, HWND hLB, int nItem );
/*
DrawShadowText
DrawStatusText
DrawStatusTextA
DrawStatusTextW
DSA_Create
DSA_Destroy
DSA_DestroyCallback
DSA_GetItemPtr
DSA_InsertItem
EnumMRUListW
FlatSB_EnableScrollBar
FlatSB_GetScrollInfo
FlatSB_GetScrollPos
FlatSB_GetScrollProp
FlatSB_GetScrollRange
FlatSB_SetScrollInfo
FlatSB_SetScrollPos
FlatSB_SetScrollProp
FlatSB_SetScrollRange
FlatSB_ShowScrollBar
FreeMRUList
GetEffectiveClientRect
GetMUILanguage
GetWindowSubclass
*/

		HRESULT HIMAGELIST_QueryInterface( HIMAGELIST himl, REFIID riid, void** ppv );
		int ImageList_Add( HIMAGELIST himl, HBITMAP hbmImage, HBITMAP hbmMask );
		int ImageList_mxAddIcon( HIMAGELIST himl, HICON hicon );
		int ImageList_AddMasked( HIMAGELIST himl, HBITMAP hbmImage, COLORREF crMask );
		BOOL ImageList_BeginDrag( HIMAGELIST himlTrack, int iTrack, int dxHotspot, int dyHotspot );
		BOOL ImageList_Copy( HIMAGELIST himlDst, HIMAGELIST himlSrc, int iDst, int iSrc, UINT uFlags );
		HIMAGELIST ImageList_Create( int cx, int cy, UINT flags, int cInitial, int cGrow );
		BOOL ImageList_Destroy( HIMAGELIST himl );
		BOOL ImageList_DragEnter( HWND hwndLock, int x, int y );
		BOOL ImageList_DragLeave( HWND hwndLock );
		BOOL ImageList_DragMove( int x, int y );
		BOOL ImageList_DragShowNolock( BOOL fShow );
		BOOL ImageList_Draw( HIMAGELIST himl, int i, HDC hdcDst, int x, int y, UINT fStyle );
		BOOL ImageList_DrawEx( HIMAGELIST himl, int i, HDC hdcDst, int x, int y, int dx, int dy, COLORREF rgbBk, COLORREF rgbFg, UINT fStyle );
		BOOL ImageList_DrawIndirect( IMAGELISTDRAWPARAMS* pimldp );
		HIMAGELIST ImageList_Duplicate( HIMAGELIST himl );
		void ImageList_EndDrag();
		COLORREF ImageList_GetBkColor( HIMAGELIST himl );
		HIMAGELIST ImageList_GetDragImage( ::POINT* ppt, ::POINT* pptHotspot );
		HICON ImageList_GetIcon( HIMAGELIST himl, int i, UINT flags );
		BOOL ImageList_GetIconSize( HIMAGELIST himl, int* cx, int* cy );
		int ImageList_GetImageCount( HIMAGELIST himl );
		BOOL ImageList_GetImageInfo( HIMAGELIST himl, int i, IMAGEINFO* pImageInfo );
		HIMAGELIST ImageList_LoadImage( HINSTANCE hi, LPCTSTR lpbmp, int cx, int cGrow, COLORREF crMask, UINT uType, UINT uFlags );
		HIMAGELIST ImageList_Merge( HIMAGELIST himl1, int i1, HIMAGELIST himl2, int i2, int dx, int dy );
		HIMAGELIST ImageList_Read( LPSTREAM pstm );
		HRESULT ImageList_ReadEx( DWORD dwFlags, LPSTREAM pstm, REFIID riid, void** ppv );
		BOOL ImageList_Remove( HIMAGELIST himl, int i );
		BOOL ImageList_Replace( HIMAGELIST himl, int i, HBITMAP hbmImage, HBITMAP hbmMask );
		int ImageList_ReplaceIcon( HIMAGELIST himl, int i, HICON hicon );
		COLORREF ImageList_SetBkColor( HIMAGELIST himl, COLORREF clrBk );
		BOOL ImageList_SetDragCursorImage( HIMAGELIST himlDrag, int iDrag, int dxHotspot, int dyHotspot );
		BOOL ImageList_SetIconSize( HIMAGELIST himl, int cx, int cy );
		BOOL ImageList_SetImageCount( HIMAGELIST himl, UINT uNewCount );
		BOOL ImageList_SetOverlayImage( HIMAGELIST himl, int iImage, int iOverlay );
		BOOL ImageList_Write( HIMAGELIST himl, LPSTREAM pstm );
		HRESULT ImageList_WriteEx( HIMAGELIST himl, DWORD dwFlags, LPSTREAM pstm );
		void InitCommonControls();
		BOOL InitCommonControlsEx( const LPINITCOMMONCONTROLSEX lpInitCtrls );
		BOOL InitializeFlatSB( HWND hwnd );
		VOID InitMUILanguage( LANGID uiLang );
		int LBItemFromPt( HWND hLB, ::POINT pt, BOOL bAutoScroll );
		BOOL MakeDragList( HWND hLB );
		void MenuHelp( UINT uMsg, WPARAM wParam, LPARAM lParam, HMENU hMainMenu, HINSTANCE hInst, HWND hwndStatus, LPUINT lpwIDs );
		INT_PTR PropertySheet( LPCPROPSHEETHEADER lppsph );
		BOOL RemoveWindowSubclass( HWND hWnd, SUBCLASSPROC pfnSubclass, UINT_PTR uIdSubclass );
		BOOL SetWindowSubclass( HWND hWnd, SUBCLASSPROC pfnSubclass, UINT_PTR uIdSubclass, DWORD_PTR dwRefData );
		BOOL ShowHideMenuCtl( HWND hWnd, UINT_PTR uFlags, LPINT lpInfo );//NOTE: Deprecated
		BOOL __QCMP_STDCALLCONVENTION Str_SetPtrW( LPWSTR* ppszCurrent, LPCWSTR pszNew );
		BOOL _TrackMouseEvent( LPTRACKMOUSEEVENT lpEventTrack );
		HRESULT UninitializeFlatSB( HWND hwnd );

	};

}//nsWinQAPI

#endif//_QSYS_API_WIN32_MODULES_COMCTL32_H_
