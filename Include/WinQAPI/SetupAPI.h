//SetupAPI.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQAPI_SETUPAPI_H_3
#define WINQAPI_SETUPAPI_H_3

#include "../SystemQOR/MSWindows/WinQAPI/include/DynamicLibrary.h"
#include "WinQAPI/Kernel32.h"
#include <setupapi.h>
#include <cfgmgr32.h>

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQAPI ) CSetupAPI : public CDll
	{
	public:

		//--------------------------------------------------------------------------------
		CSetupAPI() : CDll( TEXT("setupapi.dll") )
		{						
		}

		//--------------------------------------------------------------------------------
		static CSetupAPI& Instance( void )
		{
			static CSetupAPI _instance;
			return _instance;
		}

		//--------------------------------------------------------------------------------
		~CSetupAPI()
		{						
		}

		unsigned long CM_Add_Empty_Log_Conf( PLOG_CONF plcLogConf, DEVINST dnDevInst, PRIORITY Priority, ULONG ulFlags );
		unsigned long CM_Add_Empty_Log_Conf_Ex( PLOG_CONF plcLogConf, DEVINST dnDevInst, PRIORITY Priority, ULONG ulFlags, HMACHINE hMachine );

		unsigned long CM_Connect_Machine( PCTSTR UNCServerName, PHMACHINE phMachine );
		unsigned long CM_Disconnect_Machine( HMACHINE hMachine );
		unsigned long CM_Enumerate_Enumerators( ULONG ulEnumIndex, PTSTR Buffer, PULONG pulLength, ULONG ulFlags );

		unsigned long CM_Get_Child( PDEVINST pdnDevInst, DEVINST dnDevInst, ULONG Flags );
		unsigned long CM_Get_Child_Ex( PDEVINST pdnDevInst, DEVINST dnDevInst, ULONG ulFlags, HMACHINE hMachine );

		unsigned long CM_Get_Device_ID_Ex( DEVINST dnDevInst, PTSTR Buffer, ULONG BufferLen, ULONG ulFlags, HMACHINE hMachine );
		unsigned long CM_Get_Device_ID_Size( PULONG pulLen, DEVINST dnDevInst, ULONG ulFlags );
		unsigned long CM_Get_Device_ID_Size_Ex( PULONG pulLen, DEVINST dnDevInst, ULONG ulFlags, HMACHINE hMachine );
		unsigned long CM_Get_DevNode_Property_Ex( DEVINST hDevInst, const DEVPROPKEY* PropertyKey, DEVPROPTYPE* PropertyType, PBYTE PropertyBuffer, PULONG PropertyBufferSize, ULONG ulFlags, HMACHINE hMachine );
		unsigned long CM_Get_DevNode_Registry_Property_Ex( DEVINST hDevInst, unsigned long ulProperty, unsigned long*, byte*, unsigned long*, unsigned long, HMACHINE hMachine );
		
		unsigned long CM_Get_Sibling( PDEVINST pdnDevInst, DEVINST DevInst, ULONG ulFlags );
		unsigned long CM_Get_Sibling_Ex( PDEVINST pdnDevInst, DEVINST DevInst, ULONG ulFlags, HMACHINE hMachine );

		unsigned long CM_Locate_DevNode( PDEVINST pdnDevInst, DEVINSTID_W pDeviceIS, unsigned long ulFlags );
		unsigned long CM_Locate_DevNode_Ex( PDEVINST pdnDevInst, DEVINSTID_W pDeviceID, unsigned long ulFlags, HMACHINE hMachine );

		BOOL SetupDiBuildClassInfoList( DWORD Flags, LPGUID ClassGuidList, DWORD ClassGuidListSize, PDWORD RequiredSize );
		BOOL SetupDiBuildClassInfoListEx( DWORD Flags, LPGUID ClassGuidList, DWORD ClassGuidListSize, PDWORD RequiredSize, PCTSTR MachineName, PVOID Reserved );
		BOOL SetupDiBuildDriverInfoList( HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, DWORD DriverType );

		//...

		BOOL SetupDiClassGuidsFromName( PCTSTR ClassName, LPGUID ClassGuidList, DWORD ClassGuidListSize, PDWORD RequiredSize );
		BOOL SetupDiClassGuidsFromNameEx( PCTSTR ClassName, LPGUID ClassGuidList, DWORD ClassGuidListSize, PDWORD RequiredSize, PCTSTR MachineName, PVOID Reserved );

		//...
		BOOL SetupDiClassNameFromGuidEx( const GUID* ClassGuid, PTSTR ClassName, DWORD ClassNameSize, PDWORD RequiredSize, PCTSTR MachineName, PVOID Reserved );
		BOOL SetupDiCreateDeviceInfo( HDEVINFO DeviceInfoSet, PCTSTR DeviceName, const GUID* ClassGuid, PCTSTR DeviceDescription, HWND hwndParent, DWORD CreationFlags, PSP_DEVINFO_DATA DeviceInfoData );
		HDEVINFO SetupDiCreateDeviceInfoList( const GUID *ClassGuid, HWND hwndParent );
		HDEVINFO SetupDiCreateDeviceInfoListEx( const GUID* ClassGuid, HWND hwndParent, PCTSTR MachineName, PVOID Reserved );

		//...

		BOOL SetupDiDestroyDeviceInfoList( HDEVINFO DeviceInfoSet );

		//...

		BOOL SetupDiEnumDeviceInfo( HDEVINFO DeviceInfoSet, DWORD MemberIndex, PSP_DEVINFO_DATA DeviceInfoData );
		BOOL SetupDiEnumDeviceInterfaces( HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, const GUID *InterfaceClassGuid, DWORD MemberIndex, PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData );
		BOOL SetupDiEnumDriverInfo( HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, DWORD DriverType, DWORD MemberIndex, PSP_DRVINFO_DATA_W DriverInfoData );

		//...
		BOOL SetupDiGetClassBitmapIndex( const GUID* ClassGuid, PINT MiniIconIndex );
		BOOL SetupDiGetClassDescription( const GUID* ClassGuid, PTSTR ClassDescription, DWORD ClassDescriptionSize, PDWORD RequiredSize );
		BOOL SetupDiGetClassDescriptionEx( const GUID* ClassGuid, PTSTR ClassDescription, DWORD ClassDescriptionSize, PDWORD RequiredSize, PCTSTR MachineName, PVOID Reserved );
		BOOL SetupDiGetClassDevPropertySheets( HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, LPPROPSHEETHEADER PropertySheetHeader, DWORD PropertySheetHeaderPageListSize, PDWORD RequiredSize, DWORD PropertySheetType );
		HDEVINFO SetupDiGetClassDevs( const GUID* ClassGuid, PCTSTR Enumerator, HWND hwndParent, DWORD Flags );
		HDEVINFO SetupDiGetClassDevsEx( const GUID* ClassGuid, PCTSTR Enumerator, HWND hwndParent, DWORD Flags, HDEVINFO DeviceInfoSet, PCTSTR MachineName );
		BOOL SetupDiGetClassImageIndex( PSP_CLASSIMAGELIST_DATA ClassImageListData, const GUID* ClassGuid, PINT ImageIndex );
		BOOL SetupDiGetClassImageList( PSP_CLASSIMAGELIST_DATA ClassImageListData );
		BOOL SetupDiGetClassImageListEx( PSP_CLASSIMAGELIST_DATA ClassImageListData, PCTSTR MachineName, PVOID Reserved );
		BOOL SetupDiGetClassInstallParams( HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, PSP_CLASSINSTALL_HEADER ClassInstallParams, DWORD ClassInstallParamsSize, PDWORD RequiredSize );
		BOOL SetupDiGetClassProperty( const GUID* ClassGuid, const DEVPROPKEY* PropertyKey, DEVPROPTYPE* PropertyType, PBYTE PropertyBuffer, DWORD PropertyBufferSize, PDWORD RequiredSize, DWORD Flags );
		BOOL SetupDiGetClassPropertyEx( const GUID* ClassGuid, const DEVPROPKEY* PropertyKey, DEVPROPTYPE* PropertyType, PBYTE PropertyBuffer, DWORD PropertyBufferSize, PDWORD RequiredSize, DWORD Flags, PCTSTR MachineName );
		BOOL SetupDiGetClassPropertyKeys( const GUID* ClassGuid, DEVPROPKEY* PropertyKeyArray, DWORD PropertyKeyCount, PDWORD RequiredPropertyKeyCount, DWORD Flags );
		BOOL SetupDiGetClassPropertyKeysEx( const GUID* ClassGuid, DEVPROPKEY* PropertyKeyArray, DWORD PropertyKeyCount, PDWORD RequiredPropertyKeyCount, DWORD Flags, PCTSTR MachineName );
		BOOL SetupDiGetClassRegistryProperty( const GUID* ClassGuid, DWORD Property, PDWORD PropertyRegDataType, PBYTE PropertyBuffer, DWORD PropertyBufferSize, PDWORD RequiredSize, PCTSTR MachineName );
		BOOL SetupDiGetCustomDeviceProperty( HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, PCTSTR CustomPropertyName, DWORD Flags, PDWORD PropertyRegDataType, PBYTE PropertyBuffer, DWORD PropertyBufferSize, PDWORD RequiredSize );
		BOOL SetupDiGetDeviceInfoListClass( HDEVINFO DeviceInfoSet, LPGUID ClassGuid );
		BOOL SetupDiGetDeviceInfoListDetail( HDEVINFO DeviceInfoSet, PSP_DEVINFO_LIST_DETAIL_DATA DeviceInfoSetDetailData );
		BOOL SetupDiGetDeviceInstallParams( HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, PSP_DEVINSTALL_PARAMS DeviceInstallParams );
		BOOL SetupDiGetDeviceInstanceId( HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, PTSTR DeviceInstanceId, DWORD DeviceInstanceIdSize, PDWORD RequiredSize );

		//...

		BOOL SetupDiGetDeviceInterfaceDetail( HDEVINFO DeviceInfoSet, PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData, PSP_DEVICE_INTERFACE_DETAIL_DATA DeviceInterfaceDetailData, DWORD DeviceInterfaceDetailDataSize, PDWORD RequiredSize, PSP_DEVINFO_DATA DeviceInfoData );

		//...

		BOOL SetupDiGetDeviceProperty( HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, const DEVPROPKEY *PropertyKey, DEVPROPTYPE *PropertyType, PBYTE PropertyBuffer, DWORD PropertyBufferSize, PDWORD RequiredSize, DWORD Flags );
		BOOL SetupDiGetDevicePropertyKeys( HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, DEVPROPKEY* PropertyKeyArray, DWORD PropertyKeyCount, PDWORD RequiredPropertyKeyCount, DWORD Flags );

		//...

		BOOL SetupDiGetDeviceRegistryProperty( HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, DWORD Property, PDWORD PropertyRegDataType, PBYTE PropertyBuffer, DWORD PropertyBufferSize, PDWORD RequiredSize );
	};

}//nsWinQAPI

#endif//WINQAPI_SETUPAPI_H_3
