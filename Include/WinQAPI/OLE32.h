//OLE32.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef _QSYS_API_WIN32_MODULES_OLE32_H_
#define _QSYS_API_WIN32_MODULES_OLE32_H_

#include "../SystemQOR/MSWindows/WinQAPI/include/DynamicLibrary.h"
#include <ObjBase.h>
#include <ObjIdl.h>
#ifndef __MINGW32__
#	include <Callobj.h>
#endif//__MINGW32__

#include "Kernel32.h"

//--------------------------------------------------------------------------------
#if		( _WIN32_WINNT < 0x0400 )
	typedef struct tagSOLE_AUTHENTICATION_SERVICE
	{
		DWORD dwAuthnSvc;
		DWORD dwAuthzSvc;
		OLECHAR *pPrincipalName;
		HRESULT hr;
	} 	SOLE_AUTHENTICATION_SERVICE;

	typedef SOLE_AUTHENTICATION_SERVICE *PSOLE_AUTHENTICATION_SERVICE;
#endif//( _WIN32_WINNT < 0x0400 )

#if		( _WIN32_WINNT < 0x0501 )
	typedef void* LPINITIALIZESPY;
#endif//( _WIN32_WINNT < 0x0501 )

#ifdef __MINGW32__
	typedef enum _APTTYPE
	{
	    APTTYPE_CURRENT         = -1,
	    APTTYPE_STA             = 0,
	    APTTYPE_MTA             = 1,
	    APTTYPE_NA              = 2,
	    APTTYPE_MAINSTA         = 3
	} APTTYPE;

	typedef enum _APTTYPEQUALIFIER
	{
	    APTTYPEQUALIFIER_NONE           =  0,
	    APTTYPEQUALIFIER_IMPLICIT_MTA   = 1,
	    APTTYPEQUALIFIER_NA_ON_MTA      = 2,
	    APTTYPEQUALIFIER_NA_ON_STA      = 3,
	    APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA     = 4,
	    APTTYPEQUALIFIER_NA_ON_MAINSTA          = 5
	 } APTTYPEQUALIFIER;

	typedef /* [public] */ struct __MIDL___MIDL_itf_wtypes_0000_0001_0001
	{
	DWORD tyspec;
	/* [switch_type] */ union __MIDL___MIDL_itf_wtypes_0000_0001_0005
		{
		CLSID clsid;
		LPOLESTR pFileExt;
		LPOLESTR pMimeType;
		LPOLESTR pProgId;
		LPOLESTR pFileName;
		struct
			{
			LPOLESTR pPackageName;
			GUID PolicyId;
			} 	ByName;
		struct
			{
			GUID ObjectId;
			GUID PolicyId;
			} 	ByObjectId;
		} 	tagged_union;
	} 	uCLSSPEC;

	typedef void* LPINITIALIZESPY;
	typedef void* LPSURROGATE;

	typedef struct tagCSPLATFORM
	{
		DWORD dwPlatformId;
		DWORD dwVersionHi;
		DWORD dwVersionLo;
		DWORD dwProcessorArch;
	} 	CSPLATFORM;

	typedef struct tagQUERYCONTEXT
	{
		DWORD dwContext;
		CSPLATFORM Platform;
		LCID Locale;
		DWORD dwVersionHi;
		DWORD dwVersionLo;
	} 	QUERYCONTEXT;

#endif//__MINGW32__

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//Updated to match Windows 7 64bit Pro Ole32.dll
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQAPI ) COLE32 : public CDll
	{
	public:

		//--------------------------------------------------------------------------------
		COLE32() : CDll( TEXT("OLE32") )
		{
		}

		//--------------------------------------------------------------------------------
		static COLE32& Instance( void )
		{
			static COLE32 _instance;
			return _instance;
		}

		//--------------------------------------------------------------------------------
		~COLE32()
		{
		}

		HRESULT BindMoniker( LPMONIKER pmk,	DWORD grfOpt, REFIID iidResult,	LPVOID* ppvResult );
		HRESULT CLSIDFromProgID( LPCOLESTR lpszProgID, LPCLSID lpclsid );
		HRESULT CLSIDFromProgIDEx( LPCOLESTR lpszProgID, LPCLSID lpclsid );
		HRESULT CLSIDFromString( LPCOLESTR lpsz, LPCLSID pclsid	);
		ULONG CoAddRefServerProcess(void);
		HRESULT CoAllowSetForegroundWindow( IUnknown* pUnk, LPVOID lpvReserved );
		HRESULT CoCancelCall( DWORD dwThreadId, ULONG ulTimeout );
		HRESULT CoCopyProxy( IUnknown* pProxy, IUnknown** ppCopy );
		HRESULT CoCreateFreeThreadedMarshaler( LPUNKNOWN punkOuter, LPUNKNOWN* ppunkMarshal );
		HRESULT CoCreateGuid( GUID* pguid );
		HRESULT CoCreateInstance( REFCLSID rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, REFIID riid, LPVOID* ppv );
		HRESULT CoCreateInstanceEx( REFCLSID rclsid, IUnknown* punkOuter, DWORD dwClsCtx, COSERVERINFO* pServerInfo, DWORD dwCount, MULTI_QI* pResults );
		HRESULT CoDisableCallCancellation( LPVOID pReserved	);
		HRESULT CoDisconnectContext( DWORD dwTimeout );
		HRESULT CoDisconnectObject( LPUNKNOWN pUnk, DWORD dwReserved );
		BOOL CoDosDateTimeToFileTime( WORD nDosDate, WORD nDosTime, ::FILETIME* lpFileTime );
		HRESULT CoEnableCallCancellation( LPVOID pReserved );
		HRESULT CoFileTimeNow( ::FILETIME* lpFileTime	);
		BOOL CoFileTimeToDosDateTime( ::FILETIME* lpFileTime, LPWORD lpDosDate, LPWORD lpDosTime );
		void CoFreeAllLibraries( void );
		void CoFreeLibrary( HINSTANCE hInst	);
		void CoFreeUnusedLibraries( void );
		void CoFreeUnusedLibrariesEx( DWORD dwUnloadDelay, DWORD dwReserved );
		HRESULT CoGetApartmentType( APTTYPE* pAptType, APTTYPEQUALIFIER* pAptQualifier );
		HRESULT CoGetCallContext( REFIID riid, void** ppInterface );
		HRESULT CoGetCallerTID( LPDWORD lpdwTID );
		HRESULT CoGetCancelObject( DWORD dwThreadId, REFIID iid, void** ppUnk );
		HRESULT CoGetClassObject( REFCLSID rclsid, DWORD dwClsContext, COSERVERINFO* pServerInfo, REFIID riid, LPVOID* ppv );
		HRESULT CoGetContextToken( ULONG_PTR* pToken );
		HRESULT CoGetCurrentLogicalThreadId( GUID* pguid );
		DWORD CoGetCurrentProcess( void );
		HRESULT CoGetDefaultContext( APTTYPE aptType, REFIID riid, void** ppv );
		HRESULT CoGetInstanceFromFile( COSERVERINFO* pServerInfo, CLSID* pClsid, IUnknown* punkOuter, DWORD dwClsCtx, DWORD grfMode, OLECHAR* pwszName, DWORD dwCount, MULTI_QI* pResults );
		HRESULT CoGetInstanceFromIStorage( COSERVERINFO* pServerInfo, CLSID* pClsid, IUnknown* punkOuter, DWORD dwClsCtx, IStorage* pstg, DWORD dwCount, MULTI_QI* pResults	);
		HRESULT CoGetInterceptor( REFIID iidIntercepted, IUnknown* punkOuter, REFIID iid, void** ppv );
		HRESULT CoGetInterfaceAndReleaseStream( LPSTREAM pStm, REFIID iid, LPVOID* ppv );
		HRESULT CoGetMalloc( DWORD dwMemContext, LPMALLOC* ppMalloc );
		HRESULT CoGetMarshalSizeMax( ULONG* pulSize, REFIID riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags );
		HRESULT CoGetObject( LPCWSTR pszName, BIND_OPTS* pBindOptions, REFIID riid, void** ppv );
		HRESULT CoGetObjectContext( REFIID riid, LPVOID* ppv );
		HRESULT CoGetPSClsid( REFIID riid, CLSID* pClsid );
		HRESULT CoGetStandardMarshal( REFIID riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags, LPMARSHAL* ppMarshal );
		HRESULT CoGetStdMarshalEx( LPUNKNOWN pUnkOuter, DWORD smexflags, LPUNKNOWN* ppUnkInner );
		HRESULT CoGetTreatAsClass( REFCLSID clsidOld, LPCLSID pClsidNew );
		HRESULT CoImpersonateClient( void );
		HRESULT CoInitialize( LPVOID pvReserved );
		HRESULT CoInitializeEx( LPVOID pvReserved, DWORD dwCoInit );
		HRESULT CoInitializeSecurity( PSECURITY_DESCRIPTOR pSecDesc, LONG cAuthSvc, SOLE_AUTHENTICATION_SERVICE* asAuthSvc, void* pReserved1, DWORD dwAuthnLevel, DWORD dwImpLevel, void* pAuthList, DWORD dwCapabilities, void* pReserved3 );
		HRESULT CoInstall( IBindCtx* pbc, DWORD dwFlags, uCLSSPEC* pClassSpec, QUERYCONTEXT* pQuery, LPWSTR pszCodeBase );
		HRESULT CoInvalidateRemoteMachineBindings( LPOLESTR pszMachineName );
		BOOL CoIsHandlerConnected( LPUNKNOWN pUnk );
		BOOL CoIsOle1Class( REFCLSID rclsid );
		HINSTANCE CoLoadLibrary( LPOLESTR lpszLibName, BOOL bAutoFree );
		HRESULT CoLockObjectExternal( LPUNKNOWN pUnk, BOOL fLock, BOOL fLastUnlockReleases );
		HRESULT CoMarshalHresult( LPSTREAM pstm, HRESULT hresult );
		HRESULT CoMarshalInterThreadInterfaceInStream( REFIID riid, LPUNKNOWN pUnk,	LPSTREAM* ppStm	);
		HRESULT CoMarshalInterface( LPSTREAM pStm, REFIID riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags );
		HRESULT CoQueryAuthenticationServices( DWORD* pcAuthSvc, SOLE_AUTHENTICATION_SERVICE** asAuthSvc );
		HRESULT CoQueryClientBlanket( DWORD* pAuthnSvc, DWORD* pAuthzSvc, OLECHAR** pServerPrincName, DWORD* pAuthnLevel, DWORD* pImpLevel, RPC_AUTHZ_HANDLE* pPrivs, DWORD* pCapabilities );
		HRESULT CoQueryProxyBlanket( IUnknown* pProxy, DWORD* pwAuthnSvc, DWORD* pAuthzSvc, OLECHAR** pServerPrincName, DWORD* pAuthnLevel, DWORD* pImpLevel, RPC_AUTH_IDENTITY_HANDLE* pAuthInfo, DWORD* pCapabilites );
		HRESULT CoRegisterClassObject( REFCLSID rclsid, LPUNKNOWN pUnk, DWORD dwClsContext, DWORD flags, LPDWORD lpdwRegister );
		HRESULT CoRegisterInitializeSpy( LPINITIALIZESPY pSpy, ULARGE_INTEGER* puliCookie );
		HRESULT CoRegisterMallocSpy( LPMALLOCSPY pMallocSpy );
		HRESULT CoRegisterMessageFilter( LPMESSAGEFILTER lpMessageFilter, LPMESSAGEFILTER* lplpMessageFilter );
		HRESULT CoRegisterPSClsid( REFIID riid, REFCLSID rclsid );
		HRESULT CoRegisterSurrogate( LPSURROGATE pSurrogate );
		HRESULT CoReleaseMarshalData( LPSTREAM pStm );
		ULONG CoReleaseServerProcess( void );
		HRESULT CoResumeClassObjects( void );
		HRESULT CoRevertToSelf( void );
		HRESULT CoRevokeClassObject( DWORD dwRegister );
		HRESULT CoRevokeInitializeSpy( ULARGE_INTEGER uliCookie );
		HRESULT CoRevokeMallocSpy( void );
		HRESULT CoSetCancelObject( IUnknown* pUnk );
		HRESULT CoSetProxyBlanket( IUnknown* pProxy, DWORD dwAuthnSvc, DWORD dwAuthzSvc, OLECHAR* pServerPrincName, DWORD dwAuthnLevel, DWORD dwImpLevel, RPC_AUTH_IDENTITY_HANDLE pAuthInfo, DWORD dwCapabilities );
		HRESULT CoSuspendClassObjects( void );
		HRESULT CoSwitchCallContext( IUnknown* pNewObject, IUnknown** ppOldObject );
		LPVOID CoTaskMemAlloc( SIZE_T cb );
		void CoTaskMemFree( LPVOID pv );
		LPVOID CoTaskMemRealloc( LPVOID pv, SIZE_T cb );
		HRESULT CoTestCancel( void );
		HRESULT CoTreatAsClass( REFCLSID clsidOld, REFCLSID clsidNew );
		void CoUninitialize( void );
		HRESULT CoUnmarshalHresult( LPSTREAM pstm, HRESULT* phresult );
		HRESULT CoUnmarshalInterface( LPSTREAM pStm, REFIID riid, LPVOID* ppv );
		HRESULT CoWaitForMultipleHandles( DWORD dwFlags, DWORD dwTimeout, ULONG cHandles, LPHANDLE pHandles, LPDWORD lpdwindex );
		HRESULT CreateAntiMoniker( LPMONIKER* ppmk );
		HRESULT CreateBindCtx( DWORD reserved, LPBC* ppbc );
		HRESULT CreateClassMoniker( REFCLSID rclsid, LPMONIKER* ppmk );
		HRESULT CreateDataAdviseHolder( LPDATAADVISEHOLDER* ppDAHolder );
		HRESULT CreateDataCache( LPUNKNOWN pUnkOuter, REFCLSID rclsid, REFIID iid, LPVOID* ppv );
		HRESULT CreateErrorInfo( ICreateErrorInfo** pperrinfo );
		HRESULT CreateFileMoniker( LPCOLESTR lpszPathName, LPMONIKER* ppmk );
		HRESULT CreateGenericComposite( LPMONIKER pmkFirst, LPMONIKER pmkRest, LPMONIKER* ppmkComposite );
		HRESULT CreateILockBytesOnHGlobal( HGLOBAL hGlobal, BOOL fDeleteOnRelease, ILockBytes** ppLkbyt );
		HRESULT CreateItemMoniker( LPCOLESTR lpszDelim, LPCOLESTR lpszItem, LPMONIKER* ppmk );
		HRESULT CreateObjrefMoniker( LPUNKNOWN punk, LPMONIKER* ppmk );
		HRESULT CreateOleAdviseHolder( LPOLEADVISEHOLDER* ppOAHolder );
		HRESULT CreatePointerMoniker( LPUNKNOWN punk, LPMONIKER* ppmk );
		HRESULT CreateStreamOnHGlobal( HGLOBAL hGlobal, BOOL fDeleteOnRelease, LPSTREAM* ppstm );
		HRESULT FmtIdToPropStgName( const FMTID* pfmtid, LPOLESTR oszName );
		HRESULT FreePropVariantArray( ULONG cVariants, PROPVARIANT* rgvars );
		HRESULT GetClassFile( LPCOLESTR szFilename, CLSID* pclsid );
		HRESULT GetConvertStg( IStorage* pStg );
		HRESULT GetErrorInfo( DWORD dwReserved, IErrorInfo** pperrinfo );
		HRESULT GetHGlobalFromILockBytes( ILockBytes* pLkbyt, HGLOBAL* phglobal );
		HRESULT GetHGlobalFromStream( IStream* pstm, HGLOBAL* phglobal );
		HRESULT GetRunningObjectTable( DWORD reserved, LPRUNNINGOBJECTTABLE* pprot );
		HRESULT IIDFromString( LPCOLESTR lpsz, LPIID lpiid );
		BOOL IsAccelerator( HACCEL hAccel, int cAccelEntries, LPMSG lpMsg, WORD* lpwCmd );
		BOOL IsEqualGUID( REFGUID rguid1, REFGUID rguid2 );
		HRESULT MkParseDisplayName( LPBC pbc, LPCOLESTR szUserName, ULONG* pchEaten, LPMONIKER* ppmk );
		HRESULT MonikerCommonPrefixWith( LPMONIKER pmkThis, LPMONIKER pmkOther, LPMONIKER* ppmkCommon );
		HRESULT MonikerRelativePathTo( LPMONIKER pmkSrc, LPMONIKER pmkDest, LPMONIKER* ppmkRelPath, BOOL dwReserved );
		HRESULT OleConvertIStorageToOLESTREAM( IStorage* pStg, LPOLESTREAM lpolestream );
		HRESULT OleConvertIStorageToOLESTREAMEx( IStorage* pStg, CLIPFORMAT cfFormat, LONG lWidth, LONG lHeight, DWORD dwSize, STGMEDIUM* pmedium, LPOLESTREAM lpolestm );
		HRESULT OleConvertOLESTREAMToIStorage( LPOLESTREAM lpolestream, IStorage* pstg, const DVTARGETDEVICE* ptd );
		HRESULT OleConvertOLESTREAMToIStorageEx( LPOLESTREAM lpolestm, IStorage* pstg, CLIPFORMAT* pcfFormat, LONG* plWidth, LONG* plHeight, DWORD* pdwSize, STGMEDIUM* pmedium );
		HRESULT OleCreate( REFCLSID rclsid, REFIID riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj );
		HRESULT OleCreateDefaultHandler( REFCLSID clsid, LPUNKNOWN pUnkOuter, REFIID riid, LPVOID* lplpObj );
		HRESULT OleCreateEmbeddingHelper( REFCLSID clsid, LPUNKNOWN pUnkOuter, DWORD flags, LPCLASSFACTORY pCF, REFIID riid, LPVOID* lplpObj );
		HRESULT OleCreateEx( REFCLSID rclsid, REFIID riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink* lpAdviseSink, DWORD* rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj );
		HRESULT OleCreateFromData( LPDATAOBJECT pSrcDataObj, REFIID riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj );
		HRESULT OleCreateFromDataEx( LPDATAOBJECT pSrcDataObj, REFIID riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink* lpAdviseSink, DWORD* rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj );
		HRESULT OleCreateFromFile( REFCLSID rclsid, LPCOLESTR lpszFileName, REFIID riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj );
		HRESULT OleCreateFromFileEx( REFCLSID rclsid, LPCOLESTR lpszFileName, REFIID riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink* lpAdviseSink, DWORD* rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj );
		HRESULT OleCreateLink( LPMONIKER pmkLinkSrc, REFIID riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj	);
		HRESULT OleCreateLinkEx( LPMONIKER pmkLinkSrc, REFIID riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink* lpAdviseSink, DWORD* rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj );
		HRESULT OleCreateLinkFromData( LPDATAOBJECT pSrcDataObj, REFIID riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg,	LPVOID* ppvObj );
		HRESULT OleCreateLinkFromDataEx( LPDATAOBJECT pSrcDataObj, REFIID riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink* lpAdviseSink, DWORD* rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj );
		HRESULT OleCreateLinkToFile( LPCOLESTR lpszFileName, REFIID riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj );
		HRESULT OleCreateLinkToFileEx( LPCOLESTR lpszFileName, REFIID riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink* lpAdviseSink, DWORD* rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj );
		HOLEMENU OleCreateMenuDescriptor( HMENU hmenuCombined, LPOLEMENUGROUPWIDTHS lpMenuWidths );
		HRESULT OleCreateStaticFromData( LPDATAOBJECT pSrcDataObj, REFIID iid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj );
		void OleDestroyMenuDescriptor( HOLEMENU holemenu );
		HRESULT OleDoAutoConvert( LPSTORAGE pStg, LPCLSID pClsidNew );
		HRESULT OleDraw( LPUNKNOWN pUnknown, DWORD dwAspect, HDC hdcDraw, LPCRECT lprcBounds );
		HANDLE OleDuplicateData( HANDLE hSrc, CLIPFORMAT cfFormat, UINT uiFlags );
		HRESULT OleFlushClipboard( void );
		HRESULT OleGetAutoConvert( REFCLSID clsidOld, LPCLSID pClsidNew );
		HRESULT OleGetClipboard( LPDATAOBJECT* ppDataObj );
		HGLOBAL OleGetIconOfClass( REFCLSID rclsid, LPOLESTR lpszLabel, BOOL fUseTypeAsLabel );
		HGLOBAL OleGetIconOfFile( LPOLESTR lpszPath, BOOL fUseFileAsLabel );
		HRESULT OleInitialize( LPVOID pvReserved );
		HRESULT OleIsCurrentClipboard( LPDATAOBJECT pDataObj );
		BOOL OleIsRunning( LPOLEOBJECT pObject );
		HRESULT OleLoad( LPSTORAGE pStg, REFIID riid, LPOLECLIENTSITE pClientSite, LPVOID* ppvObj );
		HRESULT OleLoadFromStream( LPSTREAM pStm, REFIID iidInterface, LPVOID* ppvObj );
		HRESULT OleLockRunning( LPUNKNOWN pUnknown, BOOL fLock, BOOL fLastUnlockCloses );
		HGLOBAL OleMetafilePictFromIconAndLabel( HICON hIcon, LPOLESTR lpszLabel, LPOLESTR lpszSourceFile, UINT iIconIndex );
		HRESULT OleNoteObjectVisible( LPUNKNOWN pUnknown, BOOL fVisible );
		HRESULT OleQueryCreateFromData( LPDATAOBJECT pSrcDataObject );
		HRESULT OleQueryLinkFromData( LPDATAOBJECT pSrcDataObject );
		HRESULT OleRegEnumFormatEtc( REFCLSID clsid, DWORD dwDirection, LPENUMFORMATETC* ppenum );//
		HRESULT OleRegEnumVerbs( REFCLSID clsid, LPENUMOLEVERB* ppenum );//
		HRESULT OleRegGetMiscStatus( REFCLSID clsid, DWORD dwAspect, DWORD* pdwStatus );//
		HRESULT OleRegGetUserType( REFCLSID clsid, DWORD dwFormOfType, LPOLESTR* pszUserType );//
		HRESULT OleRun( LPUNKNOWN pUnknown );
		HRESULT OleSave( LPPERSISTSTORAGE pPS, LPSTORAGE pStg, BOOL fSameAsLoad );
		HRESULT OleSaveToStream( LPPERSISTSTREAM pPStm, LPSTREAM pStm );
		HRESULT OleSetAutoConvert( REFCLSID clsidOld, REFCLSID clsidNew );
		HRESULT OleSetClipboard( LPDATAOBJECT pDataObj );
		HRESULT OleSetContainedObject( LPUNKNOWN pUnknown, BOOL fContained );
		HRESULT OleSetMenuDescriptor( HOLEMENU holemenu, HWND hwndFrame, HWND hwndActiveObject, LPOLEINPLACEFRAME lpFrame, LPOLEINPLACEACTIVEOBJECT lpActiveObj );//
		HRESULT OleTranslateAccelerator( LPOLEINPLACEFRAME lpFrame, LPOLEINPLACEFRAMEINFO lpFrameInfo, LPMSG lpmsg );//
		void OleUninitialize( void );
		HRESULT ProgIDFromCLSID( REFCLSID clsid, LPOLESTR* lplpszProgID );
		HRESULT PropStgNameToFmtId( const LPOLESTR oszName, FMTID *pfmtid );//
		HRESULT PropVariantClear( PROPVARIANT* pvar );//
		HRESULT PropVariantCopy( PROPVARIANT* pvarDest, const PROPVARIANT* pvarSrc );//
		HRESULT ReadClassStg( IStorage* pStg, CLSID* pclsid );
		HRESULT ReadClassStm( IStream* pStm, CLSID* pclsid );
		HRESULT ReadFmtUserTypeStg( IStorage* pStg, CLIPFORMAT* pcf, LPWSTR* lplpszUserType );
		HRESULT RegisterDragDrop( HWND hwnd, LPDROPTARGET pDropTarget );
		void ReleaseStgMedium( LPSTGMEDIUM pMedium );//
		HRESULT RevokeDragDrop( HWND hwnd );
		HRESULT SetConvertStg( IStorage* pStg, BOOL fConvert );
		SERIALIZEDPROPERTYVALUE* StgConvertPropertyToVariant( const PROPVARIANT* pvar, USHORT CodePage, SERIALIZEDPROPERTYVALUE* pprop, ULONG* pcb,	PROPID pid,	BOOLEAN fReserved, ULONG* pcIndirect );//
		HRESULT StgCreateDocfile( const WCHAR* pwcsName, DWORD grfMode, DWORD reserved, IStorage** ppstgOpen );
		HRESULT StgCreateDocfileOnILockBytes( ILockBytes* plkbyt, DWORD grfMode, DWORD reserved, IStorage** ppstgOpen );
		HRESULT StgCreatePropSetStg( IStorage* pStorage, DWORD dwReserved, IPropertySetStorage** ppPropSetStg );
		HRESULT StgCreatePropStg( IUnknown* pUnk, REFFMTID fmtid, const CLSID* pclsid, DWORD grfFlags, DWORD dwReserved, IPropertyStorage** ppPropStg );
		HRESULT StgCreateStorageEx( const WCHAR* pwcsName, DWORD grfMode, STGFMT stgfmt, DWORD grfAttrs, STGOPTIONS* pStgOptions, PSECURITY_DESCRIPTOR* pSecurityDescriptor, REFIID riid, void** ppObjectOpen );
		HRESULT StgGetIFillLockBytesOnFile( OLECHAR* pwcsName, IFillLockBytes** ppflb );
		HRESULT StgGetIFillLockBytesOnILockBytes( ILockBytes* pilb, IFillLockBytes** ppflb );
		HRESULT StgIsStorageFile( const WCHAR* pwcsName );
		HRESULT StgIsStorageILockBytes( ILockBytes* plkbyt );
		HRESULT StgOpenAsyncDocfileOnIFillLockBytes( IFillLockBytes* ppflb, DWORD grfmode, DWORD asyncFlags, IStorage** ppstgOpen );
		HRESULT StgOpenPropStg( IUnknown* pUnk, REFFMTID fmtid, DWORD grfFlags, DWORD dwReserved, IPropertyStorage** ppPropStg );
		HRESULT StgOpenStorage( const WCHAR* pwcsName, IStorage* pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage** ppstgOpen );
		HRESULT StgOpenStorageEx( const WCHAR* pwcsName, DWORD grfMode, STGFMT stgfmt, DWORD grfAttrs, STGOPTIONS* pStgOptions, void* reserved2, REFIID riid, void** ppObjectOpen );
		HRESULT StgOpenStorageOnILockBytes(	ILockBytes* plkbyt,	IStorage* pStgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage** ppstgOpen	);
		ULONG StgPropertyLengthAsVariant( const SERIALIZEDPROPERTYVALUE* pProp, ULONG cbProp, USHORT CodePage, BYTE bReserved );
		HRESULT StgSetTimes( WCHAR const* lpszName, FILETIME const* pctime, FILETIME const* patime, FILETIME const* pmtime );
		HRESULT StringFromCLSID( REFCLSID rclsid, LPOLESTR* lplpsz );
		int StringFromGUID2( REFGUID rguid, LPOLESTR lpsz, int cchMax );
		HRESULT StringFromIID( REFIID rclsid, LPOLESTR* lplpsz );
		HRESULT WriteClassStg( IStorage* pStg, REFCLSID rclsid );
		HRESULT WriteClassStm( IStream* pStm, REFCLSID rclsid );
		HRESULT WriteFmtUserTypeStg( IStorage* pStg, CLIPFORMAT cf, LPWSTR* lpszUserType );
		HRESULT DoDragDrop( LPDATAOBJECT pDataObj, LPDROPSOURCE pDropSource, DWORD dwOKEffects, LPDWORD pdwEffect );

		//--------------------------------------------------------------------
/*
		//--------------------------------------------------------------------
		BOOL WINAPI DllDebugObjectRPCHook( BOOL fTrace, ORPC_INIT_ARGS* lpOrpcInitArgs )
		{
			_WINQ_FCONTEXT( "COLE32::DllDebugObjectRPCHook" );
			BOOL bResult = FALSE;
			__QOR_PROTECT
			{
#if		( _WIN32_WINNT >= 0x0500 )
				_WINQ_USESAPI( DllDebugObjectRPCHook );
				bResult = Call< BOOL, BOOL, ORPC_INIT_ARGS* >( pFunc, fTrace, lpOrpcInitArgs );
				if( bResult == FALSE )
				{
					__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "DllDebugObjectRPCHook" ), 0 ));
				}
#else
				QOR_PP_UNREF( fTrace );
				QOR_PP_UNREF( lpOrpcInitArgs );
				__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "DllDebugObjectRPCHook" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
			}__QOR_ENDPROTECT
			return bResult;
		}
*/
/*
		//--------------------------------------------------------------------
		HRESULT DllGetClassObject( REFCLSID rclsid, REFIID riid, LPVOID* ppv )
		{
			_WINQ_FCONTEXT( "COLE32::DllGetClassObject" );
			HRESULT hResult = E_FAIL;
			__QOR_PROTECT
			{
#if		( _WIN32_WINNT >= 0x0500 )
				_WINQ_USESAPI( DllGetClassObject );
				hResult = Call< HRESULT, REFCLSID, REFIID, LPVOID* >( pFunc, rclsid, riid, ppv );
				if( FAILED( hResult ) )
				{
					__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "DllGetClassObject" ), 0 ));
				}
#else
				QOR_PP_UNREF( rclsid );
				QOR_PP_UNREF( riid );
				QOR_PP_UNREF( ppv )
				__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "DllGetClassObject" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
			}__QOR_ENDPROTECT
			return hResult;
		}

		//--------------------------------------------------------------------
		HRESULT DllRegisterServer( void )
		{
			_WINQ_FCONTEXT( "COLE32::DllRegisterServer" );
			HRESULT hResult = E_FAIL;
			__QOR_PROTECT
			{
#if		( _WIN32_WINNT >= 0x0500 )
				_WINQ_USESAPI( DllRegisterServer );
				hResult = Call< HRESULT >( pFunc );
				if( FAILED( hResult ) )
				{
					__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "DllRegisterServer" ), 0 ));
				}
#else
				__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "DllRegisterServer" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
			}__QOR_ENDPROTECT
			return hResult;
		}
*/
//CoVrfCheckThreadState
//CoVrfGetThreadState
//CoVrfReleaseThreadState
//HRGN_UserFree
//HRGN_UserMarshal
//HRGN_UserSize
//HRGN_UserUnmarshal
//NdrOleInitializeExtension
//PropVariantChangeType
//CLIPFORMAT_UserFree
//CLIPFORMAT_UserMarshal
//CLIPFORMAT_UserSize
//CLIPFORMAT_UserUnmarshal
//CLSIDFromOle1Class
//CoBuildVersion
//CoCreateObjectInContext
//CoDeactivateObject
//CoGetActivationState
//CoGetApartmentID
//CoGetCallState
//CoGetClassVersion
//CoGetComCatalog
//CoGetInterceptorFromTypeInfo
//CoGetModuleType
//CoGetProcessIdentifier
//CoGetSystemSecurityPermissions
//CoInitializeWOW
//CoPopServiceDomain
//CoPushServiceDomain
//CoQueryReleaseObject
//CoReactivateObject
//CoRegisterChannelHook
//CoRegisterSurrogateEx
//CoRetireServer
//CoSetState
//CoUnloadingWOW
//ComPs_NdrDllCanUnloadNow
//ComPs_NdrDllGetClassObject
//ComPs_NdrDllRegisterProxy
//ComPs_NdrDllUnregisterProxy
//CreateStdProgressIndicator
//DcomChannelSetHResult
//DllDebugObjectRPCHook
//DllGetClassObjectWOW
//EnableHookObject
//GetDocumentBitStg
//GetHookInterface
//HACCEL_UserFree
//HACCEL_UserMarshal
//HACCEL_UserSize
//HACCEL_UserUnmarshal
//HBITMAP_UserFree
//HBITMAP_UserMarshal
//HBITMAP_UserSize
//HBITMAP_UserUnmarshal
//HBRUSH_UserFree
//HBRUSH_UserMarshal
//HBRUSH_UserSize
//HBRUSH_UserUnmarshal
//HDC_UserFree
//HDC_UserMarshal
//HDC_UserSize
//HDC_UserUnmarshal
//HENHMETAFILE_UserFree
//HENHMETAFILE_UserMarshal
//HENHMETAFILE_UserSize
//HENHMETAFILE_UserUnmarshal
//HGLOBAL_UserFree
//HGLOBAL_UserMarshal
//HGLOBAL_UserSize
//HGLOBAL_UserUnmarshal
//HICON_UserFree
//HICON_UserMarshal
//HICON_UserSize
//HICON_UserUnmarshal
//HMENU_UserFree
//HMENU_UserMarshal
//HMENU_UserSize
//HMENU_UserUnmarshal
//HMETAFILEPICT_UserFree
//HMETAFILEPICT_UserMarshal
//HMETAFILEPICT_UserSize
//HMETAFILEPICT_UserUnmarshal
//HMETAFILE_UserFree
//HMETAFILE_UserMarshal
//HMETAFILE_UserSize
//HMETAFILE_UserUnmarshal
//HPALETTE_UserFree
//HPALETTE_UserMarshal
//HPALETTE_UserSize
//HPALETTE_UserUnmarshal
//HWND_UserFree
//HWND_UserMarshal
//HWND_UserSize
//HWND_UserUnmarshal
//HkOleRegisterObject
//IsValidIid
//IsValidInterface
//IsValidPtrIn
//IsValidPtrOut
//NdrProxyForwardingFunction10
//NdrProxyForwardingFunction11
//NdrProxyForwardingFunction12
//NdrProxyForwardingFunction13
//NdrProxyForwardingFunction14
//NdrProxyForwardingFunction15
//NdrProxyForwardingFunction16
//NdrProxyForwardingFunction17
//NdrProxyForwardingFunction18
//NdrProxyForwardingFunction19
//NdrProxyForwardingFunction20
//NdrProxyForwardingFunction21
//NdrProxyForwardingFunction22
//NdrProxyForwardingFunction23
//NdrProxyForwardingFunction24
//NdrProxyForwardingFunction25
//NdrProxyForwardingFunction26
//NdrProxyForwardingFunction27
//NdrProxyForwardingFunction28
//NdrProxyForwardingFunction29
//NdrProxyForwardingFunction30
//NdrProxyForwardingFunction31
//NdrProxyForwardingFunction32
//NdrProxyForwardingFunction3
//NdrProxyForwardingFunction4
//NdrProxyForwardingFunction5
//NdrProxyForwardingFunction6
//NdrProxyForwardingFunction7
//NdrProxyForwardingFunction8
//NdrProxyForwardingFunction9
//ObjectStublessClient10
//ObjectStublessClient11
//ObjectStublessClient12
//ObjectStublessClient13
//ObjectStublessClient14
//ObjectStublessClient15
//ObjectStublessClient16
//ObjectStublessClient17
//ObjectStublessClient18
//ObjectStublessClient19
//ObjectStublessClient20
//ObjectStublessClient21
//ObjectStublessClient22
//ObjectStublessClient23
//ObjectStublessClient24
//ObjectStublessClient25
//ObjectStublessClient26
//ObjectStublessClient27
//ObjectStublessClient28
//ObjectStublessClient29
//ObjectStublessClient30
//ObjectStublessClient31
//ObjectStublessClient32
//ObjectStublessClient3
//ObjectStublessClient4
//ObjectStublessClient5
//ObjectStublessClient6
//ObjectStublessClient7
//ObjectStublessClient8
//ObjectStublessClient9
//OleBuildVersion
//OleInitializeWOW
//OpenOrCreateStream
//PropSysAllocString
//PropSysFreeString
//PropVariantClear
//ReadOleStg
//ReadStringStream
//SNB_UserFree
//SNB_UserMarshal
//SNB_UserSize
//SNB_UserUnmarshal
//STGMEDIUM_UserFree
//STGMEDIUM_UserMarshal
//STGMEDIUM_UserSize
//STGMEDIUM_UserUnmarshal
//SetDocumentBitStg
//SetErrorInfo
//StgConvertVariantToProperty
//StgOpenStorageOnHandle
//UpdateDCOMSettings
//UpdateProcessTracing
//UtConvertDvtd16toDvtd32
//UtConvertDvtd32toDvtd16
//UtGetDvtd16Info
//UtGetDvtd32Info
//WdtpInterfacePointer_UserFree
//WdtpInterfacePointer_UserMarshal
//WdtpInterfacePointer_UserSize
//WdtpInterfacePointer_UserUnmarshal
//WriteOleStg
//WriteStringStream
	};

}//nsWinQAPI

#endif//_QSYS_API_WIN32_MODULES_OLE32_H_

