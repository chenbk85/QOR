//Operand.h

// Copyright (c) 2008-2010, Petr Kobalicek <kobalicek.petr@gmail.com>
// Copyright (c) Querysoft Limited 2012
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Low level assembly operand base class and register set declaration

#ifndef ARCHQOR_X86PC_ASSEMBLEROPERAND_H_2
#define ARCHQOR_X86PC_ASSEMBLEROPERAND_H_2

#include "CodeQOR/Utils/Utils.h"
#include "../Defs.h"

//------------------------------------------------------------------------------
namespace nsArch
{
namespace nsx86
{
	class __QOR_INTERFACE( __ARCHQOR ) CImm;
	class __QOR_INTERFACE( __ARCHQOR ) CLabel;
	class __QOR_INTERFACE( __ARCHQOR ) CMem;
	class __QOR_INTERFACE( __ARCHQOR ) CBaseReg;
	class __QOR_INTERFACE( __ARCHQOR ) CGPReg;
	class __QOR_INTERFACE( __ARCHQOR ) CMMReg;
	class __QOR_INTERFACE( __ARCHQOR ) CX87Reg;
	class __QOR_INTERFACE( __ARCHQOR ) CXMMReg;
	class __QOR_INTERFACE( __ARCHQOR ) CSegmentReg;
	class __QCMP_LOCAL CBaseVar;
	class __QCMP_LOCAL CGPVar;
	class __QCMP_LOCAL CMMVar;
	class __QCMP_LOCAL CX87Var;
	class __QCMP_LOCAL CXMMVar;

	//------------------------------------------------------------------------------
	//Operand
	class __QOR_INTERFACE( __ARCHQOR ) COperand
	{
	public:

		COperand() __QCMP_THROW;
		COperand( const COperand& other ) __QCMP_THROW;
		COperand( const nsCodeQOR::_DontInitialize& ) __QCMP_THROW;
		virtual ~COperand() __QCMP_THROW;
		Cmp_unsigned__int32 getType() const __QCMP_THROW;       // Get type of operand, see OPERAND_TYPE.
		bool isNone() const __QCMP_THROW;       // Get whether operand is none (OPERAND_NONE).
		bool isReg() const __QCMP_THROW;      // Get whether operand is any (general purpose, mmx or sse) register (OPERAND_REG).
		bool isMem() const __QCMP_THROW;     // Get whether operand is memory address (OPERAND_MEM).
		bool isImm() const __QCMP_THROW;     // Get whether operand is immediate (OPERAND_IMM).
		bool isLabel() const __QCMP_THROW;      // Get whether operand is label (OPERAND_LABEL).
		bool isVar() const __QCMP_THROW;        // Get whether operand is variable (OPERAND_VAR).
		bool isVarMem() const __QCMP_THROW;// Get whether operand is variable or memory.
		virtual bool isRegType( Cmp_unsigned__int32 regType ) const __QCMP_THROW;       // Get whether operand is register and type of register is regType.
		virtual bool isRegCode( Cmp_unsigned__int32 regCode ) const __QCMP_THROW;       // Get whether operand is register and code of register is regCode.
		virtual bool isRegIndex( Cmp_unsigned__int32 regIndex ) const __QCMP_THROW;     // Get whether operand is register and index of register is regIndex.
		bool isRegMem() const __QCMP_THROW;     // Get whether operand is any register or memory.
		virtual bool isRegTypeMem( Cmp_unsigned__int32 regType ) const __QCMP_THROW;        // Get whether operand is register of regType type or memory.
		Cmp_unsigned__int32 getSize() const __QCMP_THROW;       // Return size of operand in bytes.
		void setSize( Cmp_unsigned__int32 uiSize ) __QCMP_THROW;
		Cmp_unsigned__int32 getId() const __QCMP_THROW;     // Return operand Id (Operand Id's are used internally by Assembler and HLAssembler classes).
		void setId( Cmp_unsigned__int32 uiId ) __QCMP_THROW;
		virtual bool isExtendedRegisterUsed() const __QCMP_THROW;       // Get whether the extended register (additional eight registers introduced by 64-bit mode) is used.
		virtual COperand* Clone( CZone& zone ) const;

	protected:

		Cmp_unsigned__int8 m_Op;					// Type of operand, see OPERAND_TYPE.
		Cmp_unsigned__int8 m_Size;					// Size of operand (register, address, immediate or variable).
		Cmp_unsigned__int32 m_Id;					// Operand id (for Assembler and HLA classes). Uninitialized operands has id equal to zero.

		virtual void Init( const COperand& other ) __QCMP_THROW;

	};

	// Create Shuffle Constant for MMX/SSE shuffle instrutions.
	// z First component position, number at interval [0, 3] inclusive.
	// x Second component position, number at interval [0, 3] inclusive.
	// y Third component position, number at interval [0, 3] inclusive.
	// w Fourth component position, number at interval [0, 3] inclusive.

	//Shuffle constants can be used to make immediate value for these intrinsics:
	//- pshufw()
	//- pshufd()
	//- pshufhw()
	//- pshuflw()
	//- shufps()
	static inline Cmp_unsigned__int8 mm_shuffle( Cmp_unsigned__int8 z, Cmp_unsigned__int8 y, Cmp_unsigned__int8 x, Cmp_unsigned__int8 w ) __QCMP_THROW
	{
		return (z << 6) | (y << 4) | (x << 2) | w;
	}

}//nsx86
}//nsArch

#endif//ARCHQOR_X86PC_ASSEMBLEROPERAND_H_2

