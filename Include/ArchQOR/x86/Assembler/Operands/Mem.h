//Mem.h

// Copyright (c) 2008-2010, Petr Kobalicek <kobalicek.petr@gmail.com>
// Copyright (c) Querysoft Limited 2012
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

// Memory operand for x86 assembler

#ifndef ARCHQOR_X86PC_ASSEMBLERMEM_H_2
#define ARCHQOR_X86PC_ASSEMBLERMEM_H_2

#include "Operand.h"
#include "Registers/GPReg.h"

//------------------------------------------------------------------------------
namespace nsArch
{
//------------------------------------------------------------------------------
namespace nsx86
{
	//------------------------------------------------------------------------------
	class __QOR_INTERFACE( __ARCHQOR ) CMem : public COperand
	{
	public:

        virtual ~CMem() __QCMP_THROW;

		CMem() __QCMP_THROW;
		CMem( const CLabel& label, Cmp_int_ptr displacement, Cmp_unsigned__int32 size = 0) __QCMP_THROW;
		CMem( const CGPReg& base, Cmp_int_ptr displacement, Cmp_unsigned__int32 size = 0 ) __QCMP_THROW;
		CMem( const CGPVar& base, Cmp_int_ptr displacement, Cmp_unsigned__int32 size = 0 ) __QCMP_THROW;
		CMem( const CGPReg& base, const CGPReg& index, Cmp_unsigned__int32 shift, Cmp_int_ptr displacement, Cmp_unsigned__int32 size = 0 ) __QCMP_THROW;
		CMem( const CGPVar& base, const CGPVar& index, Cmp_unsigned__int32 shift, Cmp_int_ptr displacement, Cmp_unsigned__int32 size = 0 ) __QCMP_THROW;
		CMem( const CMem& other ) __QCMP_THROW;
		CMem( const nsCodeQOR::_DontInitialize& dontInitialize ) __QCMP_THROW;

		Cmp_unsigned__int32 getMemType() const __QCMP_THROW;        // Get type of memory operand, see OPERAND_MEM_TYPE enum.
		void setMemType( Cmp_unsigned__int32 uiType ) __QCMP_THROW;
		Cmp_unsigned__int32 getSegmentPrefix() const __QCMP_THROW;      // Get memory operand segment prefix, see SEGMENT_PREFIX enum.
		void setSegmentPrefix( Cmp_unsigned__int32 uiSegmentPrefix ) __QCMP_THROW;
		bool hasBase() const __QCMP_THROW;
		bool hasIndex() const __QCMP_THROW;
		bool hasShift() const __QCMP_THROW;     // Get whether the memory operand has shift used.
		Cmp_unsigned__int32 getBase() const __QCMP_THROW;        // Get memory operand base register or INVALID_VALUE.
		void setBase( Cmp_unsigned__int32 uiBase ) __QCMP_THROW;
		Cmp_unsigned__int32 getIndex() const __QCMP_THROW;       // Get memory operand index register or INVALID_VALUE.
		Cmp_unsigned__int32 getShift() const __QCMP_THROW;      // Get memory operand index scale (0, 1, 2 or 3).
		void setShift( Cmp_unsigned__int8 uiShift ) __QCMP_THROW;       // Get memory operand index scale (0, 1, 2 or 3).
		bool getSizePrefix() const __QCMP_THROW;
		void setSizePrefix( bool b ) __QCMP_THROW;      //Set whether to use size-override prefix.
		void* getTarget() const __QCMP_THROW;       // Get absolute target address. Note You should always check if operand contains address by getMemType().
		void setSize( Cmp_unsigned__int32 size ) __QCMP_THROW;      // Set memory operand size.
		void setTarget( void* target ) __QCMP_THROW;        // Set absolute target address.
		Cmp_int_ptr getDisplacement() const __QCMP_THROW;        // Get memory operand relative displacement.
		void setDisplacement( Cmp_int_ptr displacement ) __QCMP_THROW;      // Set memory operand relative displacement.
		void adjust( Cmp_int_ptr displacement ) __QCMP_THROW;       // Adjust memory operand relative displacement by displacement.
		CMem adjusted( Cmp_int_ptr displacement ) const __QCMP_THROW;        // Return new memory operand adjusted by displacement.
		void setIndex( Cmp_unsigned__int32 uiIndex ) __QCMP_THROW;
		CMem& operator = ( const CMem& other ) __QCMP_THROW;
		bool operator == ( const CMem& other ) const __QCMP_THROW;
		bool operator != ( const CMem& other ) const __QCMP_THROW;
		virtual COperand* Clone( CZone& zone ) const;

	protected:

		virtual void Init( const COperand& other ) __QCMP_THROW;

		Cmp_unsigned__int8 m_Type;					// Memory operand type, see @c OPERAND_MEM_TYPE.
		Cmp_unsigned__int8 m_SegmentPrefix : 4;		// Segment override prefix, see @c SEGMENT_PREFIX.
		Cmp_unsigned__int8 m_SizePrefix : 1;		// Emit MOV/LEA instruction using 16-bit form of base/index registers.
		Cmp_unsigned__int8 m_Shift : 3;				// Index register shift (0 to 3 inclusive).
		Cmp_unsigned__int32 m_Base;					// Base register index, variable or label id.
		Cmp_unsigned__int32 m_Index;				// Index register index or variable.
		void* m_pTarget;							// Target (for 32-bit, absolute address).
		Cmp_int_ptr m_Displacement;					// Displacement.
	};

	__QOR_INTERFACE( __ARCHQOR ) CMem _BaseVarMem( const CBaseVar& var, Cmp_unsigned__int32 ptrSize ) __QCMP_THROW;
	__QOR_INTERFACE( __ARCHQOR ) CMem _BaseVarMem( const CBaseVar& var, Cmp_unsigned__int32 ptrSize, Cmp_int_ptr disp ) __QCMP_THROW;
	__QOR_INTERFACE( __ARCHQOR ) CMem _BaseVarMem( const CBaseVar& var, Cmp_unsigned__int32 ptrSize, const CGPVar& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp ) __QCMP_THROW;
	__QOR_INTERFACE( __ARCHQOR ) CMem _MemPtrBuild( const CLabel& label, Cmp_int_ptr disp, Cmp_unsigned__int32 ptrSize ) __QCMP_THROW;
	__QOR_INTERFACE( __ARCHQOR ) CMem _MemPtrBuild( const CLabel& label, const CGPReg& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp, Cmp_unsigned__int32 ptrSize ) __QCMP_THROW;
	__QOR_INTERFACE( __ARCHQOR ) CMem _MemPtrBuild( const CLabel& label, const CGPVar& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp, Cmp_unsigned__int32 ptrSize ) __QCMP_THROW;

	//------------------------------------------------------------------------------
	// Create pointer operand without specified size.
	static inline CMem ptr( const CLabel& label, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( label, disp, 0 );
	}

	//------------------------------------------------------------------------------
	// Create byte pointer operand.
	static inline CMem byte_ptr( const CLabel& label, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( label, disp, SIZE_BYTE );
	}

	//------------------------------------------------------------------------------
	// Create word (2 Bytes) pointer operand.
	static inline CMem word_ptr( const CLabel& label, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( label, disp, SIZE_WORD );
	}

	//------------------------------------------------------------------------------
	// Create dword (4 Bytes) pointer operand.
	static inline CMem dword_ptr( const CLabel& label, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( label, disp, SIZE_DWORD );
	}

	//------------------------------------------------------------------------------
	// Create qword (8 Bytes) pointer operand.
	static inline CMem qword_ptr( const CLabel& label, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( label, disp, SIZE_QWORD );
	}

	//------------------------------------------------------------------------------
	// Create tword (10 Bytes) pointer operand (used for 80-bit floating points).
	static inline CMem tword_ptr( const CLabel& label, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( label, disp, SIZE_TWORD );
	}

	//------------------------------------------------------------------------------
	// Create dqword (16 Bytes) pointer operand.
	static inline CMem dqword_ptr( const CLabel& label, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( label, disp, SIZE_DQWORD );
	}

	//------------------------------------------------------------------------------
	// Create mmword (8 bytes) pointer operand

	// Note This constructor is provided only for convenience for mmx programming.
	static inline CMem mmword_ptr( const CLabel& label, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( label, disp, SIZE_QWORD );
	}

	//------------------------------------------------------------------------------
	// Create xmmword (16 bytes) pointer operand

	// Note This constructor is provided only for convenience for sse programming.
	static inline CMem xmmword_ptr( const CLabel& label, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( label, disp, SIZE_DQWORD );
	}

	//------------------------------------------------------------------------------
	// Create system dependent pointer operand (32-bit or 64-bit).
	static inline CMem sysint_ptr( const CLabel& label, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( label, disp, sizeof( Cmp_int_ptr ) );
	}


	//------------------------------------------------------------------------------
	// Create pointer operand with not specified size.
	static inline CMem ptr( const CLabel& label, const CGPReg& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( label, index, shift, disp, 0 );
	}

	//------------------------------------------------------------------------------
	// Create byte pointer operand.
	static inline CMem byte_ptr( const CLabel& label, const CGPReg& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( label, index, shift, disp, SIZE_BYTE );
	}

	//------------------------------------------------------------------------------
	// Create word (2 Bytes) pointer operand.
	static inline CMem word_ptr( const CLabel& label, const CGPReg& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( label, index, shift, disp, SIZE_WORD );
	}

	//------------------------------------------------------------------------------
	// Create dword (4 Bytes) pointer operand.
	static inline CMem dword_ptr( const CLabel& label, const CGPReg& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( label, index, shift, disp, SIZE_DWORD );
	}

	//------------------------------------------------------------------------------
	// Create qword (8 Bytes) pointer operand.
	static inline CMem qword_ptr( const CLabel& label, const CGPReg& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( label, index, shift, disp, SIZE_QWORD );
	}

	//------------------------------------------------------------------------------
	// Create tword (10 Bytes) pointer operand (used for 80-bit floating points).
	static inline CMem tword_ptr( const CLabel& label, const CGPReg& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( label, index, shift, disp, SIZE_TWORD );
	}

	//------------------------------------------------------------------------------
	// Create dqword (16 Bytes) pointer operand.
	static inline CMem dqword_ptr( const CLabel& label, const CGPReg& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( label, index, shift, disp, SIZE_DQWORD );
	}

	//------------------------------------------------------------------------------
	// Create mmword (8 bytes) pointer operand
	// Note This constructor is provided only for convenience for MMX programming.
	static inline CMem mmword_ptr( const CLabel& label, const CGPReg& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( label, index, shift, disp, SIZE_QWORD );
	}

	//------------------------------------------------------------------------------
	// Create xmmword (16 bytes) pointer operand
	// Note This constructor is provided only for convenience for SSE programming.
	static inline CMem xmmword_ptr( const CLabel& label, const CGPReg& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( label, index, shift, disp, SIZE_DQWORD );
	}

	//------------------------------------------------------------------------------
	// Create system dependent pointer operand (32-bit or 64-bit).
	static inline CMem sysint_ptr( const CLabel& label, const CGPReg& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( label, index, shift, disp, sizeof( Cmp_int_ptr ) );
	}

	//------------------------------------------------------------------------------
	// Create pointer operand with not specified size.
	static inline CMem ptr( const CLabel& label, const CGPVar& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( label, index, shift, disp, 0 );
	}

	//------------------------------------------------------------------------------
	// Create byte pointer operand.
	static inline CMem byte_ptr( const CLabel& label, const CGPVar& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( label, index, shift, disp, SIZE_BYTE );
	}

	//------------------------------------------------------------------------------
	// Create word (2 Bytes) pointer operand.
	static inline CMem word_ptr( const CLabel& label, const CGPVar& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( label, index, shift, disp, SIZE_WORD );
	}

	//------------------------------------------------------------------------------
	// Create dword (4 Bytes) pointer operand.
	static inline CMem dword_ptr( const CLabel& label, const CGPVar& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( label, index, shift, disp, SIZE_DWORD );
	}

	//------------------------------------------------------------------------------
	// Create qword (8 Bytes) pointer operand.
	static inline CMem qword_ptr( const CLabel& label, const CGPVar& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( label, index, shift, disp, SIZE_QWORD );
	}

	//------------------------------------------------------------------------------
	// Create tword (10 Bytes) pointer operand (used for 80-bit floating points).
	static inline CMem tword_ptr( const CLabel& label, const CGPVar& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( label, index, shift, disp, SIZE_TWORD );
	}

	//------------------------------------------------------------------------------
	// Create dqword (16 Bytes) pointer operand.
	static inline CMem dqword_ptr( const CLabel& label, const CGPVar& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( label, index, shift, disp, SIZE_DQWORD );
	}

	//------------------------------------------------------------------------------
	// Create mmword (8 bytes) pointer operand
	// Note This constructor is provided only for convenience for mmx programming.
	static inline CMem mmword_ptr( const CLabel& label, const CGPVar& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( label, index, shift, disp, SIZE_QWORD );
	}

	//------------------------------------------------------------------------------
	// Create xmmword (16 bytes) pointer operand
	// Note This constructor is provided only for convenience for sse programming.
	static inline CMem xmmword_ptr( const CLabel& label, const CGPVar& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( label, index, shift, disp, SIZE_DQWORD );
	}

	//------------------------------------------------------------------------------
	// Create system dependent pointer operand (32-bit or 64-bit).
	static inline CMem sysint_ptr( const CLabel& label, const CGPVar& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( label, index, shift, disp, sizeof( Cmp_int_ptr ) );
	}

	//------------------------------------------------------------------------------
	// Mem - Absolute Addressing
	__QOR_INTERFACE( __ARCHQOR ) CMem _MemPtrAbs( void* target, Cmp_int_ptr disp, Cmp_unsigned__int32 segmentPrefix, Cmp_unsigned__int32 ptrSize ) __QCMP_THROW;
	__QOR_INTERFACE( __ARCHQOR ) CMem _MemPtrAbs( void* target, const CGPReg& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp, Cmp_unsigned__int32 segmentPrefix, Cmp_unsigned__int32 ptrSize) __QCMP_THROW;
	__QOR_INTERFACE( __ARCHQOR ) CMem _MemPtrAbs( void* target, const CGPVar& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp, Cmp_unsigned__int32 segmentPrefix, Cmp_unsigned__int32 ptrSize) __QCMP_THROW;

	//------------------------------------------------------------------------------
	// Create pointer operand with not specified size.
	static inline CMem ptr_abs( void* target, Cmp_int_ptr disp = 0, Cmp_unsigned__int32 segmentPrefix = SEGMENT_NONE ) __QCMP_THROW
	{
		return _MemPtrAbs( target, disp, segmentPrefix, 0 );
	}

	//------------------------------------------------------------------------------
	// Create byte pointer operand.
	static inline CMem byte_ptr_abs( void* target, Cmp_int_ptr disp = 0, Cmp_unsigned__int32 segmentPrefix = SEGMENT_NONE ) __QCMP_THROW
	{
		return _MemPtrAbs( target, disp, segmentPrefix, SIZE_BYTE );
	}

	//------------------------------------------------------------------------------
	// Create word (2 Bytes) pointer operand.
	static inline CMem word_ptr_abs( void* target, Cmp_int_ptr disp = 0, Cmp_unsigned__int32 segmentPrefix = SEGMENT_NONE ) __QCMP_THROW
	{
		return _MemPtrAbs( target, disp, segmentPrefix, SIZE_WORD );
	}

	//------------------------------------------------------------------------------
	// Create dword (4 Bytes) pointer operand.
	static inline CMem dword_ptr_abs( void* target, Cmp_int_ptr disp = 0, Cmp_unsigned__int32 segmentPrefix = SEGMENT_NONE ) __QCMP_THROW
	{
		return _MemPtrAbs( target, disp, segmentPrefix, SIZE_DWORD );
	}

	//------------------------------------------------------------------------------
	// Create qword (8 Bytes) pointer operand.
	static inline CMem qword_ptr_abs( void* target, Cmp_int_ptr disp = 0, Cmp_unsigned__int32 segmentPrefix = SEGMENT_NONE ) __QCMP_THROW
	{
		return _MemPtrAbs( target, disp, segmentPrefix, SIZE_QWORD );
	}

	//------------------------------------------------------------------------------
	// Create tword (10 Bytes) pointer operand (used for 80-bit floating points).
	static inline CMem tword_ptr_abs( void* target, Cmp_int_ptr disp = 0, Cmp_unsigned__int32 segmentPrefix = SEGMENT_NONE ) __QCMP_THROW
	{
		return _MemPtrAbs( target, disp, segmentPrefix, SIZE_TWORD );
	}

	//------------------------------------------------------------------------------
	// Create dqword (16 Bytes) pointer operand.
	static inline CMem dqword_ptr_abs( void* target, Cmp_int_ptr disp = 0, Cmp_unsigned__int32 segmentPrefix = SEGMENT_NONE ) __QCMP_THROW
	{
		return _MemPtrAbs( target, disp, segmentPrefix, SIZE_DQWORD );
	}

	//------------------------------------------------------------------------------
	// Create mmword (8 bytes) pointer operand
	// Note This constructor is provided only for convenience for mmx programming.
	static inline CMem mmword_ptr_abs( void* target, Cmp_int_ptr disp = 0, Cmp_unsigned__int32 segmentPrefix = SEGMENT_NONE ) __QCMP_THROW
	{
		return _MemPtrAbs( target, disp, segmentPrefix, SIZE_QWORD );
	}

	//------------------------------------------------------------------------------
	// Create xmmword (16 bytes) pointer operand
	// Note This constructor is provided only for convenience for sse programming.
	static inline CMem xmmword_ptr_abs( void* target, Cmp_int_ptr disp = 0, Cmp_unsigned__int32 segmentPrefix = SEGMENT_NONE ) __QCMP_THROW
	{
		return _MemPtrAbs( target, disp, segmentPrefix, SIZE_DQWORD );
	}

	//------------------------------------------------------------------------------
	// Create system dependent pointer operand (32-bit or 64-bit).
	static inline CMem sysint_ptr_abs( void* target, Cmp_int_ptr disp = 0, Cmp_unsigned__int32 segmentPrefix = SEGMENT_NONE ) __QCMP_THROW
	{
		return _MemPtrAbs( target, disp, segmentPrefix, sizeof( Cmp_int_ptr ) );
	}

	//------------------------------------------------------------------------------
	// Create pointer operand with not specified size.
	static inline CMem ptr_abs( void* target, const CGPReg& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp = 0, Cmp_unsigned__int32 segmentPrefix = SEGMENT_NONE ) __QCMP_THROW
	{
		return _MemPtrAbs( target, index, shift, disp, segmentPrefix, 0 );
	}

	//------------------------------------------------------------------------------
	// Create byte pointer operand.
	static inline CMem byte_ptr_abs( void* target, const CGPReg& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp = 0, Cmp_unsigned__int32 segmentPrefix = SEGMENT_NONE ) __QCMP_THROW
	{
		return _MemPtrAbs( target, index, shift, disp, segmentPrefix, SIZE_BYTE );
	}

	//------------------------------------------------------------------------------
	// Create word (2 Bytes) pointer operand.
	static inline CMem word_ptr_abs( void* target, const CGPReg& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp = 0, Cmp_unsigned__int32 segmentPrefix = SEGMENT_NONE ) __QCMP_THROW
	{
		return _MemPtrAbs( target, index, shift, disp, segmentPrefix, SIZE_WORD );
	}

	//------------------------------------------------------------------------------
	// Create dword (4 Bytes) pointer operand.
	static inline CMem dword_ptr_abs( void* target, const CGPReg& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp = 0, Cmp_unsigned__int32 segmentPrefix = SEGMENT_NONE ) __QCMP_THROW
	{
		return _MemPtrAbs( target, index, shift, disp, segmentPrefix, SIZE_DWORD );
	}

	//------------------------------------------------------------------------------
	// Create qword (8 Bytes) pointer operand.
	static inline CMem qword_ptr_abs( void* target, const CGPReg& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp = 0, Cmp_unsigned__int32 segmentPrefix = SEGMENT_NONE ) __QCMP_THROW
	{
		return _MemPtrAbs( target, index, shift, disp, segmentPrefix, SIZE_QWORD );
	}

	//------------------------------------------------------------------------------
	// Create tword (10 Bytes) pointer operand (used for 80-bit floating points).
	static inline CMem tword_ptr_abs( void* target, const CGPReg& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp = 0, Cmp_unsigned__int32 segmentPrefix = SEGMENT_NONE ) __QCMP_THROW
	{
		return _MemPtrAbs( target, index, shift, disp, segmentPrefix, SIZE_TWORD );
	}

	//------------------------------------------------------------------------------
	// Create dqword (16 Bytes) pointer operand.
	static inline CMem dqword_ptr_abs( void* target, const CGPReg& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp = 0, Cmp_unsigned__int32 segmentPrefix = SEGMENT_NONE ) __QCMP_THROW
	{
		return _MemPtrAbs( target, index, shift, disp, segmentPrefix, SIZE_DQWORD );
	}

	//------------------------------------------------------------------------------
	// Create mmword (8 bytes) pointer operand
	// Note This constructor is provided only for convenience for mmx programming.
	static inline CMem mmword_ptr_abs( void* target, const CGPReg& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp = 0, Cmp_unsigned__int32 segmentPrefix = SEGMENT_NONE ) __QCMP_THROW
	{
		return _MemPtrAbs( target, index, shift, disp, segmentPrefix, SIZE_QWORD );
	}

	//------------------------------------------------------------------------------
	// Create xmmword (16 bytes) pointer operand
	// Note This constructor is provided only for convenience for sse programming.
	static inline CMem xmmword_ptr_abs( void* target, const CGPReg& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp = 0, Cmp_unsigned__int32 segmentPrefix = SEGMENT_NONE ) __QCMP_THROW
	{
		return _MemPtrAbs( target, index, shift, disp, segmentPrefix, SIZE_DQWORD );
	}

	//------------------------------------------------------------------------------
	// Create system dependent pointer operand (32-bit or 64-bit).
	static inline CMem sysint_ptr_abs( void* target, const CGPReg& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp = 0, Cmp_unsigned__int32 segmentPrefix = SEGMENT_NONE ) __QCMP_THROW
	{
		return _MemPtrAbs( target, index, shift, disp, segmentPrefix, sizeof( Cmp_int_ptr ) );
	}

	//------------------------------------------------------------------------------
	// Create pointer operand with not specified size.
	static inline CMem ptr_abs( void* target, const CGPVar& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp = 0, Cmp_unsigned__int32 segmentPrefix = SEGMENT_NONE ) __QCMP_THROW
	{
		return _MemPtrAbs( target, index, shift, disp, segmentPrefix, 0 );
	}

	//------------------------------------------------------------------------------
	// Create byte pointer operand.
	static inline CMem byte_ptr_abs( void* target, const CGPVar& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp = 0, Cmp_unsigned__int32 segmentPrefix = SEGMENT_NONE ) __QCMP_THROW
	{
		return _MemPtrAbs( target, index, shift, disp, segmentPrefix, SIZE_BYTE );
	}

	//------------------------------------------------------------------------------
	// Create word (2 Bytes) pointer operand.
	static inline CMem word_ptr_abs( void* target, const CGPVar& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp = 0, Cmp_unsigned__int32 segmentPrefix = SEGMENT_NONE ) __QCMP_THROW
	{
		return _MemPtrAbs( target, index, shift, disp, segmentPrefix, SIZE_WORD );
	}

	//------------------------------------------------------------------------------
	// Create dword (4 Bytes) pointer operand.
	static inline CMem dword_ptr_abs( void* target, const CGPVar& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp = 0, Cmp_unsigned__int32 segmentPrefix = SEGMENT_NONE ) __QCMP_THROW
	{
		return _MemPtrAbs( target, index, shift, disp, segmentPrefix, SIZE_DWORD );
	}

	//------------------------------------------------------------------------------
	// Create qword (8 Bytes) pointer operand.
	static inline CMem qword_ptr_abs( void* target, const CGPVar& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp = 0, Cmp_unsigned__int32 segmentPrefix = SEGMENT_NONE ) __QCMP_THROW
	{
		return _MemPtrAbs( target, index, shift, disp, segmentPrefix, SIZE_QWORD );
	}

	//------------------------------------------------------------------------------
	// Create tword (10 Bytes) pointer operand (used for 80-bit floating points).
	static inline CMem tword_ptr_abs( void* target, const CGPVar& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp = 0, Cmp_unsigned__int32 segmentPrefix = SEGMENT_NONE ) __QCMP_THROW
	{
		return _MemPtrAbs( target, index, shift, disp, segmentPrefix, SIZE_TWORD );
	}

	//------------------------------------------------------------------------------
	// Create dqword (16 Bytes) pointer operand.
	static inline CMem dqword_ptr_abs( void* target, const CGPVar& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp = 0, Cmp_unsigned__int32 segmentPrefix = SEGMENT_NONE ) __QCMP_THROW
	{
		return _MemPtrAbs( target, index, shift, disp, segmentPrefix, SIZE_DQWORD );
	}

	//------------------------------------------------------------------------------
	// Create mmword (8 bytes) pointer operand
	// Note This constructor is provided only for convenience for mmx programming.
	static inline CMem mmword_ptr_abs( void* target, const CGPVar& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp = 0, Cmp_unsigned__int32 segmentPrefix = SEGMENT_NONE ) __QCMP_THROW
	{
		return _MemPtrAbs( target, index, shift, disp, segmentPrefix, SIZE_QWORD );
	}

	//------------------------------------------------------------------------------
	// Create xmmword (16 bytes) pointer operand
	// Note This constructor is provided only for convenience for sse programming.
	static inline CMem xmmword_ptr_abs( void* target, const CGPVar& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp = 0, Cmp_unsigned__int32 segmentPrefix = SEGMENT_NONE ) __QCMP_THROW
	{
		return _MemPtrAbs( target, index, shift, disp, segmentPrefix, SIZE_DQWORD );
	}

	//------------------------------------------------------------------------------
	// Create system dependent pointer operand (32-bit or 64-bit).
	static inline CMem sysint_ptr_abs( void* target, const CGPVar& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp = 0, Cmp_unsigned__int32 segmentPrefix = SEGMENT_NONE ) __QCMP_THROW
	{
		return _MemPtrAbs( target, index, shift, disp, segmentPrefix, sizeof( Cmp_int_ptr ) );
	}


	// Mem - ptr[base + displacement]

	__QOR_INTERFACE( __ARCHQOR ) CMem _MemPtrBuild( const CGPReg& base, Cmp_int_ptr disp, Cmp_unsigned__int32 ptrSize ) __QCMP_THROW;
	__QOR_INTERFACE( __ARCHQOR ) CMem _MemPtrBuild( const CGPVar& base, Cmp_int_ptr disp, Cmp_unsigned__int32 ptrSize ) __QCMP_THROW;

	//------------------------------------------------------------------------------
	// Create pointer operand with not specified size.
	static inline CMem ptr( const CGPReg& base, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( base, disp, 0 );
	}

	//------------------------------------------------------------------------------
	// Create byte pointer operand.
	static inline CMem byte_ptr( const CGPReg& base, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( base, disp, SIZE_BYTE );
	}

	//------------------------------------------------------------------------------
	// Create word (2 Bytes) pointer operand.
	static inline CMem word_ptr( const CGPReg& base, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( base, disp, SIZE_WORD );
	}

	//------------------------------------------------------------------------------
	// Create dword (4 Bytes) pointer operand.
	static inline CMem dword_ptr( const CGPReg& base, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( base, disp, SIZE_DWORD );
	}

	//------------------------------------------------------------------------------
	// Create qword (8 Bytes) pointer operand.
	static inline CMem qword_ptr( const CGPReg& base, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( base, disp, SIZE_QWORD );
	}

	//------------------------------------------------------------------------------
	// Create tword (10 Bytes) pointer operand (used for 80-bit floating points).
	static inline CMem tword_ptr( const CGPReg& base, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( base, disp, SIZE_TWORD );
	}

	//------------------------------------------------------------------------------
	// Create dqword (16 Bytes) pointer operand.
	static inline CMem dqword_ptr( const CGPReg& base, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( base, disp, SIZE_DQWORD );
	}

	//------------------------------------------------------------------------------
	// Create mmword (8 bytes) pointer operand
	// Note This constructor is provided only for convenience for mmx programming.
	static inline CMem mmword_ptr( const CGPReg& base, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( base, disp, SIZE_QWORD );
	}

	//------------------------------------------------------------------------------
	// Create xmmword (16 bytes) pointer operand
	// Note This constructor is provided only for convenience for sse programming.
	static inline CMem xmmword_ptr( const CGPReg& base, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( base, disp, SIZE_DQWORD );
	}

	//------------------------------------------------------------------------------
	// Create system dependent pointer operand (32-bit or 64-bit).
	static inline CMem sysint_ptr( const CGPReg& base, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( base, disp, sizeof( Cmp_int_ptr ) );
	}


	//------------------------------------------------------------------------------
	// Create pointer operand with not specified size.
	static inline CMem ptr( const CGPVar& base, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( base, disp, 0 );
	}

	//------------------------------------------------------------------------------
	// Create byte pointer operand.
	static inline CMem byte_ptr( const CGPVar& base, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( base, disp, SIZE_BYTE );
	}

	//------------------------------------------------------------------------------
	// Create word (2 Bytes) pointer operand.
	static inline CMem word_ptr( const CGPVar& base, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( base, disp, SIZE_WORD );
	}

	//------------------------------------------------------------------------------
	// Create dword (4 Bytes) pointer operand.
	static inline CMem dword_ptr( const CGPVar& base, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( base, disp, SIZE_DWORD );
	}

	//------------------------------------------------------------------------------
	// Create qword (8 Bytes) pointer operand.
	static inline CMem qword_ptr( const CGPVar& base, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( base, disp, SIZE_QWORD );
	}

	//------------------------------------------------------------------------------
	// Create tword (10 Bytes) pointer operand (used for 80-bit floating points).
	static inline CMem tword_ptr( const CGPVar& base, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( base, disp, SIZE_TWORD );
	}

	//------------------------------------------------------------------------------
	// Create dqword (16 Bytes) pointer operand.
	static inline CMem dqword_ptr( const CGPVar& base, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( base, disp, SIZE_DQWORD );
	}

	//------------------------------------------------------------------------------
	// Create mmword (8 bytes) pointer operand
	// Note This constructor is provided only for convenience for mmx programming.
	static inline CMem mmword_ptr( const CGPVar& base, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( base, disp, SIZE_QWORD );
	}

	//------------------------------------------------------------------------------
	// Create xmmword (16 bytes) pointer operand
	// Note This constructor is provided only for convenience for sse programming.
	static inline CMem xmmword_ptr( const CGPVar& base, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( base, disp, SIZE_DQWORD );
	}

	//------------------------------------------------------------------------------
	// Create system dependent pointer operand (32-bit or 64-bit).
	static inline CMem sysint_ptr( const CGPVar& base, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( base, disp, sizeof( Cmp_int_ptr ) );
	}

	// Mem - ptr[base + (index << shift) + displacement]

	__QOR_INTERFACE( __ARCHQOR ) CMem _MemPtrBuild( const CGPReg& base, const CGPReg& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp, Cmp_unsigned__int32 ptrSize ) __QCMP_THROW;
	__QOR_INTERFACE( __ARCHQOR ) CMem _MemPtrBuild( const CGPVar& base, const CGPVar& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp, Cmp_unsigned__int32 ptrSize ) __QCMP_THROW;

	//------------------------------------------------------------------------------
	// Create pointer operand with not specified size.
	static inline CMem ptr( const CGPReg& base, const CGPReg& index, Cmp_unsigned__int32 shift = 0, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( base, index, shift, disp, 0 );
	}

	//------------------------------------------------------------------------------
	// Create byte pointer operand.
	static inline CMem byte_ptr( const CGPReg& base, const CGPReg& index, Cmp_unsigned__int32 shift = 0, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( base, index, shift, disp, SIZE_BYTE );
	}

	//------------------------------------------------------------------------------
	// Create word (2 Bytes) pointer operand.
	static inline CMem word_ptr( const CGPReg& base, const CGPReg& index, Cmp_unsigned__int32 shift = 0, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( base, index, shift, disp, SIZE_WORD );
	}

	//------------------------------------------------------------------------------
	// Create dword (4 Bytes) pointer operand.
	static inline CMem dword_ptr( const CGPReg& base, const CGPReg& index, Cmp_unsigned__int32 shift = 0, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( base, index, shift, disp, SIZE_DWORD );
	}

	//------------------------------------------------------------------------------
	// Create qword (8 Bytes) pointer operand.
	static inline CMem qword_ptr( const CGPReg& base, const CGPReg& index, Cmp_unsigned__int32 shift = 0, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( base, index, shift, disp, SIZE_QWORD );
	}

	//------------------------------------------------------------------------------
	// Create tword (10 Bytes) pointer operand (used for 80-bit floating points).
	static inline CMem tword_ptr( const CGPReg& base, const CGPReg& index, Cmp_unsigned__int32 shift = 0, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( base, index, shift, disp, SIZE_TWORD );
	}

	//------------------------------------------------------------------------------
	// Create dqword (16 Bytes) pointer operand.
	static inline CMem dqword_ptr( const CGPReg& base, const CGPReg& index, Cmp_unsigned__int32 shift = 0, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( base, index, shift, disp, SIZE_DQWORD );
	}

	//------------------------------------------------------------------------------
	// Create mmword (8 Bytes) pointer operand).
	// Note This constructor is provided only for convenience for mmx programming.
	static inline CMem mmword_ptr( const CGPReg& base, const CGPReg& index, Cmp_unsigned__int32 shift = 0, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( base, index, shift, disp, SIZE_QWORD );
	}

	//------------------------------------------------------------------------------
	// Create xmmword (16 Bytes) pointer operand.
	// Note This constructor is provided only for convenience for sse programming.
	static inline CMem xmmword_ptr( const CGPReg& base, const CGPReg& index, Cmp_unsigned__int32 shift = 0, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( base, index, shift, disp, SIZE_DQWORD );
	}

	//------------------------------------------------------------------------------
	// Create system dependent pointer operand (32-bit or 64-bit).
	static inline CMem sysint_ptr( const CGPReg& base, const CGPReg& index, Cmp_unsigned__int32 shift = 0, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( base, index, shift, disp, sizeof(Cmp_int_ptr) );
	}

	//------------------------------------------------------------------------------
	// Create pointer operand with not specified size.
	static inline CMem ptr(const CGPVar& base, const CGPVar& index, Cmp_unsigned__int32 shift = 0, Cmp_int_ptr disp = 0) __QCMP_THROW
	{
		return _MemPtrBuild(base, index, shift, disp, 0);
	}

	//------------------------------------------------------------------------------
	// Create byte pointer operand.
	static inline CMem byte_ptr(const CGPVar& base, const CGPVar& index, Cmp_unsigned__int32 shift = 0, Cmp_int_ptr disp = 0) __QCMP_THROW
	{
		return _MemPtrBuild(base, index, shift, disp, SIZE_BYTE);
	}

	//------------------------------------------------------------------------------
	// Create word (2 Bytes) pointer operand.
	static inline CMem word_ptr(const CGPVar& base, const CGPVar& index, Cmp_unsigned__int32 shift = 0, Cmp_int_ptr disp = 0) __QCMP_THROW
	{
		return _MemPtrBuild( base, index, shift, disp, SIZE_WORD );
	}

	//------------------------------------------------------------------------------
	// Create dword (4 Bytes) pointer operand.
	static inline CMem dword_ptr(const CGPVar& base, const CGPVar& index, Cmp_unsigned__int32 shift = 0, Cmp_int_ptr disp = 0) __QCMP_THROW
	{
		return _MemPtrBuild( base, index, shift, disp, SIZE_DWORD );
	}

	//------------------------------------------------------------------------------
	// Create qword (8 Bytes) pointer operand.
	static inline CMem qword_ptr( const CGPVar& base, const CGPVar& index, Cmp_unsigned__int32 shift = 0, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( base, index, shift, disp, SIZE_QWORD );
	}

	//------------------------------------------------------------------------------
	// Create tword (10 Bytes) pointer operand (used for 80-bit floating points).
	static inline CMem tword_ptr( const CGPVar& base, const CGPVar& index, Cmp_unsigned__int32 shift = 0, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( base, index, shift, disp, SIZE_TWORD );
	}

	//------------------------------------------------------------------------------
	// Create dqword (16 Bytes) pointer operand.
	static inline CMem dqword_ptr( const CGPVar& base, const CGPVar& index, Cmp_unsigned__int32 shift = 0, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( base, index, shift, disp, SIZE_DQWORD );
	}

	//------------------------------------------------------------------------------
	// Create mmword (8 Bytes) pointer operand).
	// Note This constructor is provided only for convenience for mmx programming.
	static inline CMem mmword_ptr( const CGPVar& base, const CGPVar& index, Cmp_unsigned__int32 shift = 0, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( base, index, shift, disp, SIZE_QWORD );
	}

	//------------------------------------------------------------------------------
	// Create xmmword (16 Bytes) pointer operand.
	// Note This constructor is provided only for convenience for sse programming.
	static inline CMem xmmword_ptr( const CGPVar& base, const CGPVar& index, Cmp_unsigned__int32 shift = 0, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( base, index, shift, disp, SIZE_DQWORD );
	}

	//------------------------------------------------------------------------------
	// Create system dependent pointer operand (32-bit or 64-bit).
	static inline CMem sysint_ptr( const CGPVar& base, const CGPVar& index, Cmp_unsigned__int32 shift = 0, Cmp_int_ptr disp = 0 ) __QCMP_THROW
	{
		return _MemPtrBuild( base, index, shift, disp, sizeof( Cmp_int_ptr ) );
	}

}//nsx86
}//nsArch

#endif//ARCHQOR_X86PC_ASSEMBLERMEM_H_2
