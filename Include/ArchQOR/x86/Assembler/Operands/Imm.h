//Imm.h

// Copyright (c) 2008-2010, Petr Kobalicek <kobalicek.petr@gmail.com>
// Copyright (c) Querysoft Limited 2012
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

// Immediate operand for x86 assembler

#ifndef ARCHQOR_X86PC_ASSEMBLERIMM_H_2
#define ARCHQOR_X86PC_ASSEMBLERIMM_H_2

#include "Operand.h"

//------------------------------------------------------------------------------
namespace nsArch
{
//------------------------------------------------------------------------------
namespace nsx86
{
	//------------------------------------------------------------------------------
	//Immediate operand is part of instruction (it's inlined after it).
	//To create immediate operand, use imm() and uimm() constructors
	//or constructors provided by Immediate class itself.
	class __QOR_INTERFACE( __ARCHQOR ) CImm : public COperand
	{
	public:

		bool m_bIsUnsigned;				// true if immediate is unsigned.
		Cmp_int_ptr m_Value;			// Immediate value.

        virtual ~CImm() __QCMP_THROW;

		CImm() __QCMP_THROW;
		CImm( Cmp_int_ptr i ) __QCMP_THROW;
		CImm( Cmp_int_ptr i, bool isUnsigned ) __QCMP_THROW;
		CImm( const CImm& other ) __QCMP_THROW;
		bool isUnsigned() const __QCMP_THROW;
		Cmp_int_ptr getValue() const __QCMP_THROW;
		Cmp_uint_ptr getUValue() const __QCMP_THROW;
		void setValue( Cmp_int_ptr val, bool isUnsigned = false ) __QCMP_THROW;
		void setUValue( Cmp_uint_ptr val ) __QCMP_THROW;
		CImm& operator = ( Cmp_int_ptr val ) __QCMP_THROW;
		CImm& operator = ( const CImm& other ) __QCMP_THROW;

		virtual COperand* Clone( CZone& zone ) const;

	protected:

		virtual void Init( const COperand& other ) __QCMP_THROW;

	};


	__QOR_INTERFACE( ARCHQOR ) CImm imm( Cmp_int_ptr i ) __QCMP_THROW;			// Create signed immediate value operand.
	__QOR_INTERFACE( ARCHQOR ) CImm uimm( Cmp_uint_ptr i ) __QCMP_THROW;		// Create unsigned immediate value operand.

}//nsx86
}//nsArch

#endif//ARCHQOR_X86PC_ASSEMBLERIMM_H_2
