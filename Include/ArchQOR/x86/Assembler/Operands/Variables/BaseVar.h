//BaseVar.h

// Copyright (c) 2008-2010, Petr Kobalicek <kobalicek.petr@gmail.com>
// Copyright (c) Querysoft Limited 2012
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Base class for x86 assembler variables

#ifndef ARCHQOR_X86PC_ASSEMBLERBASEVAR_H_2
#define ARCHQOR_X86PC_ASSEMBLERBASEVAR_H_2

#include "../Operand.h"
#include "../Mem.h"

//------------------------------------------------------------------------------
namespace nsArch
{
//------------------------------------------------------------------------------
namespace nsx86
{
	//------------------------------------------------------------------------------
	class __QOR_INTERFACE( __ARCHQOR ) CBaseVar : public COperand
	{

	public:

		CBaseVar( const nsCodeQOR::_DontInitialize& dontInitialize ) __QCMP_THROW;
		CBaseVar() __QCMP_THROW;
		CBaseVar( const CBaseVar& other ) __QCMP_THROW;
		virtual ~CBaseVar() __QCMP_THROW;

		Cmp_unsigned__int32 getVariableType() const __QCMP_THROW;
		void setVariableType( Cmp_unsigned__int32 uiVarType ) __QCMP_THROW;
		Cmp_unsigned__int32 getRegisterCode( void ) const __QCMP_THROW;
		void setRegisterCode( Cmp_unsigned__int32 uiRegCode ) __QCMP_THROW;
		bool isGPVar() const __QCMP_THROW;
		bool isX87Var() const __QCMP_THROW;
		bool isMMVar() const __QCMP_THROW;
		bool isXMMVar() const __QCMP_THROW;
		bool isGPB() const __QCMP_THROW;     // Get whether this variable is general purpose BYTE register.
		bool isGPBLo() const __QCMP_THROW;      // Get whether this variable is general purpose BYTE.LO register.
		bool isGPBHi() const __QCMP_THROW;      // Get whether this variable is general purpose BYTE.HI register.
		bool isGPW() const __QCMP_THROW;        // Get whether this variable is general purpose WORD register.
		bool isGPD() const __QCMP_THROW;     // Get whether this variable is general purpose DWORD register.
		bool isGPQ() const __QCMP_THROW;        // Get whether this variable is general purpose QWORD (only 64-bit) register.
		CMem m() const __QCMP_THROW;
		CMem m( Cmp_int_ptr disp ) const __QCMP_THROW;
		CMem m( const CGPVar& index, Cmp_unsigned__int32 shift = 0, Cmp_int_ptr disp = 0 ) const __QCMP_THROW;
		CMem m8() const __QCMP_THROW;
		CMem m8( Cmp_int_ptr disp ) const __QCMP_THROW;
		CMem m8( const CGPVar& index, Cmp_unsigned__int32 shift = 0, Cmp_int_ptr disp = 0 ) const __QCMP_THROW;
		CMem m16() const __QCMP_THROW;
		CMem m16( Cmp_int_ptr disp ) const __QCMP_THROW;
		CMem m16( const CGPVar& index, Cmp_unsigned__int32 shift = 0, Cmp_int_ptr disp = 0 ) const __QCMP_THROW;
		CMem m32() const __QCMP_THROW;
		CMem m32( Cmp_int_ptr disp ) const __QCMP_THROW;
		CMem m32( const CGPVar& index, Cmp_unsigned__int32 shift = 0, Cmp_int_ptr disp = 0 ) const __QCMP_THROW;
		CMem m64() const __QCMP_THROW;
		CMem m64( Cmp_int_ptr disp ) const __QCMP_THROW;
		CMem m64( const CGPVar& index, Cmp_unsigned__int32 shift = 0, Cmp_int_ptr disp = 0 ) const __QCMP_THROW;
		CMem m80() const __QCMP_THROW;
		CMem m80( Cmp_int_ptr disp ) const __QCMP_THROW;
		CMem m80( const CGPVar& index, Cmp_unsigned__int32 shift = 0, Cmp_int_ptr disp = 0 ) const __QCMP_THROW;
		CMem m128() const __QCMP_THROW;
		CMem m128( Cmp_int_ptr disp ) const __QCMP_THROW;
		CMem m128( const CGPVar& index, Cmp_unsigned__int32 shift = 0, Cmp_int_ptr disp = 0 ) const __QCMP_THROW;
		CBaseVar& operator = ( const CBaseVar& other ) __QCMP_THROW;
		bool operator == ( const CBaseVar& other ) const __QCMP_THROW;
		bool operator != ( const CBaseVar& other ) const __QCMP_THROW;

		virtual COperand* Clone( CZone& zone ) const;

	protected:

		CBaseVar( const CBaseVar& other, Cmp_unsigned__int32 registerCode, Cmp_unsigned__int32 size ) __QCMP_THROW;

		virtual void Init( const COperand& other ) __QCMP_THROW;

		// Type (and later also code) of register, see REG_TYPE, REG_CODE.
		// Note Register code and variable code are two different things. In most
		//cases registerCode is very related to variableType, but general purpose
		//registers are divided to 64-bit, 32-bit, 16-bit and 8-bit entities so
		//the registerCode can be used to access these, variableType remains
		//unchanged from the initialization state. Variable type describes mainly
		//variable type and home memory size.
		Cmp_unsigned__int32 m_RegisterCode;
		Cmp_unsigned__int32 m_VariableType;			// Type of variable. See VARIABLE_TYPE enum.

	};

}//nsx86
}//nsArch

#endif//ARCHQOR_X86PC_ASSEMBLERBASEVAR_H_2
