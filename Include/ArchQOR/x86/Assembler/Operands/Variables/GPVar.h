//GPVar.h

// Copyright (c) 2008-2010, Petr Kobalicek <kobalicek.petr@gmail.com>
// Copyright (c) Querysoft Limited 2012
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//General Purpose Variable for x86 assembler

#ifndef ARCHQOR_X86PC_ASSEMBLERGPVAR_H_2
#define ARCHQOR_X86PC_ASSEMBLERGPVAR_H_2

#include "../Operand.h"
#include "BaseVar.h"

//------------------------------------------------------------------------------
namespace nsArch
{
//------------------------------------------------------------------------------
namespace nsx86
{
	//------------------------------------------------------------------------------
	// GP variable operand.
	class __QOR_INTERFACE( __ARCHQOR ) CGPVar : public CBaseVar
	{
	public:

		CGPVar( const nsCodeQOR::_DontInitialize& dontInitialize ) __QCMP_THROW;     // Create new uninitialized GPVar instance
		CGPVar() __QCMP_THROW;       // Create new uninitialized GPVar instance.
		virtual ~CGPVar() __QCMP_THROW;

		// Create new GPVar instance using other.
		//Note this will not create a different variable, use newGP()
		//if you want to do so. This is only copy-constructor that allows to store
		//the same variable in different places.
		CGPVar( const CGPVar& other ) __QCMP_THROW;
		CGPVar r8() const __QCMP_THROW;      // Cast this variable to 8-bit (LO) part of variable
		CGPVar r8Lo() const __QCMP_THROW;        // Cast this variable to 8-bit (LO) part of variable
		CGPVar r8Hi() const __QCMP_THROW;        // Cast this variable to 8-bit (HI) part of variable
		CGPVar r16() const __QCMP_THROW;     // Cast this variable to 16-bit part of variable
		CGPVar r32() const __QCMP_THROW;     // Cast this variable to 32-bit part of variable

#if ( QOR_ARCH_WORDSIZE == 64 )

		CGPVar r64() const __QCMP_THROW;     // Cast this variable to 64-bit part of variable

#endif // ASMJIT_X64

		//Overloaded Operators

		CGPVar& operator = ( const CGPVar& other ) __QCMP_THROW;
		bool operator == ( const CGPVar& other ) const __QCMP_THROW;
		bool operator != ( const CGPVar& other ) const __QCMP_THROW;

		virtual COperand* Clone( CZone& zone ) const;

	protected:

		CGPVar( const CGPVar& other, Cmp_unsigned__int32 registerCode, Cmp_unsigned__int32 size ) __QCMP_THROW;
	};

}//nsx86
}//nsArch

#endif//ARCHQOR_X86PC_ASSEMBLERGPVAR_H_2
