//i686.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef ARCHQOR_ISET_I686_H_2
#define ARCHQOR_ISET_I686_H_2

#include "i586CPU.h"

//------------------------------------------------------------------------------
namespace nsArch
{
	//------------------------------------------------------------------------------
	namespace nsx86
	{
		//------------------------------------------------------------------------------
		class __QOR_INTERFACE( __ARCHQOR ) Ci686CPU : public Ci586CPU
		{
		public:

			Ci686CPU( CCodeGeneratorBase* codeGenerator );
			virtual ~Ci686CPU() __QCMP_THROW;
			void ud2();
			void cmov( CONDITION cc, const CGPReg& dst, const CGPReg& src );
			void cmov( CONDITION cc, const CGPReg& dst, const CMem& src );
			void cmova( const CGPReg& dst, const CGPReg& src );
			void cmova( const CGPReg& dst, const CMem& src );
			void cmovae( const CGPReg& dst, const CGPReg& src );
			void cmovae( const CGPReg& dst, const CMem& src );
			void cmovb( const CGPReg& dst, const CGPReg& src );
			void cmovb( const CGPReg& dst, const CMem& src );
			void cmovbe( const CGPReg& dst, const CGPReg& src );
			void cmovbe( const CGPReg& dst, const CMem& src );
			void cmovc( const CGPReg& dst, const CGPReg& src );
			void cmovc( const CGPReg& dst, const CMem& src );
			void cmove( const CGPReg& dst, const CGPReg& src );
			void cmove( const CGPReg& dst, const CMem& src );
			void cmovg( const CGPReg& dst, const CGPReg& src );
			void cmovg( const CGPReg& dst, const CMem& src );
			void cmovge( const CGPReg& dst, const CGPReg& src );
			void cmovge( const CGPReg& dst, const CMem& src );
			void cmovl( const CGPReg& dst, const CGPReg& src );
			void cmovl( const CGPReg& dst, const CMem& src );
			void cmovle( const CGPReg& dst, const CGPReg& src );
			void cmovle( const CGPReg& dst, const CMem& src );
			void cmovna( const CGPReg& dst, const CGPReg& src );
			void cmovna( const CGPReg& dst, const CMem& src );
			void cmovnae( const CGPReg& dst, const CGPReg& src );
			void cmovnae( const CGPReg& dst, const CMem& src );
			void cmovnb( const CGPReg& dst, const CGPReg& src );
			void cmovnb( const CGPReg& dst, const CMem& src );
			void cmovnbe( const CGPReg& dst, const CGPReg& src );
			void cmovnbe( const CGPReg& dst, const CMem& src );
			void cmovnc( const CGPReg& dst, const CGPReg& src );
			void cmovnc( const CGPReg& dst, const CMem& src );
			void cmovne( const CGPReg& dst, const CGPReg& src );
			void cmovne( const CGPReg& dst, const CMem& src );
			void cmovng( const CGPReg& dst, const CGPReg& src );
			void cmovng( const CGPReg& dst, const CMem& src );
			void cmovnge( const CGPReg& dst, const CGPReg& src );
			void cmovnge( const CGPReg& dst, const CMem& src );
			void cmovnl( const CGPReg& dst, const CGPReg& src );
			void cmovnl( const CGPReg& dst, const CMem& src );
			void cmovnle( const CGPReg& dst, const CGPReg& src );
			void cmovnle( const CGPReg& dst, const CMem& src );
			void cmovno( const CGPReg& dst, const CGPReg& src );
			void cmovno( const CGPReg& dst, const CMem& src );
			void cmovnp( const CGPReg& dst, const CGPReg& src );
			void cmovnp( const CGPReg& dst, const CMem& src );
			void cmovns( const CGPReg& dst, const CGPReg& src );
			void cmovns( const CGPReg& dst, const CMem& src );
			void cmovnz( const CGPReg& dst, const CGPReg& src );
			void cmovnz( const CGPReg& dst, const CMem& src );
			void cmovo( const CGPReg& dst, const CGPReg& src );
			void cmovo( const CGPReg& dst, const CMem& src );
			void cmovp( const CGPReg& dst, const CGPReg& src );
			void cmovp( const CGPReg& dst, const CMem& src );
			void cmovpe( const CGPReg& dst, const CGPReg& src );
			void cmovpe( const CGPReg& dst, const CMem& src );
			void cmovpo( const CGPReg& dst, const CGPReg& src );
			void cmovpo( const CGPReg& dst, const CMem& src );
			void cmovs( const CGPReg& dst, const CGPReg& src );
			void cmovs( const CGPReg& dst, const CMem& src );
			void cmovz( const CGPReg& dst, const CGPReg& src );
			void cmovz( const CGPReg& dst, const CMem& src );

		protected:

			__QCS_DECLARE_NONCOPYABLE( Ci686CPU );
		};

		//------------------------------------------------------------------------------
		class __QOR_INTERFACE( __ARCHQOR ) CP6FPU : public CPentiumFPU
		{
		public:

			CP6FPU( Cx86CPUCore& refCPU );
			virtual ~CP6FPU();

			__QCS_DECLARE_NONCOPYABLE( CP6FPU );
		};

	}//nsx86

}//nsArch

#endif//ARCHQOR_ISET_I686_H_2
