//i686.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef ARCHQOR_ISET_I686_H_2
#define ARCHQOR_ISET_I686_H_2

#include "i586CPU.h"

//------------------------------------------------------------------------------
namespace nsArch
{
	//------------------------------------------------------------------------------
	namespace nsx86
	{
		//------------------------------------------------------------------------------
		class __QOR_INTERFACE( __ARCHQOR ) Ci686CPU : public Ci586CPU
		{
		public:

			//------------------------------------------------------------------------------
			Ci686CPU( CCodeGeneratorBase* codeGenerator ) : Ci586CPU( codeGenerator )
			{
			}

			//------------------------------------------------------------------------------
			inline virtual ~Ci686CPU() __QCMP_THROW
			{
			}

			//------------------------------------------------------------------------------
			//Undefined instruction - Raise invalid opcode exception.
			inline void ud2()
			{
				_emitInstruction( INST_UD2 );
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmov( CONDITION cc, const CGPReg& dst, const CGPReg& src )
			{
				_emitInstruction( ConditionToInstruction::toCMovCC( cc ), &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmov( CONDITION cc, const CGPReg& dst, const CMem& src )
			{
				_emitInstruction( ConditionToInstruction::toCMovCC( cc ), &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmova( const CGPReg& dst, const CGPReg& src ) 
			{ 
				_emitInstruction( INST_CMOVA, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmova( const CGPReg& dst, const CMem& src )   
			{ 
				_emitInstruction(INST_CMOVA  , &dst, &src); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovae( const CGPReg& dst, const CGPReg& src ) 
			{ 
				_emitInstruction( INST_CMOVAE , &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovae( const CGPReg& dst, const CMem& src )   
			{ 
				_emitInstruction( INST_CMOVAE , &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovb( const CGPReg& dst, const CGPReg& src ) 
			{ 
				_emitInstruction( INST_CMOVB, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovb( const CGPReg& dst, const CMem& src )   
			{ 
				_emitInstruction( INST_CMOVB, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovbe( const CGPReg& dst, const CGPReg& src ) 
			{ 
				_emitInstruction( INST_CMOVBE, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovbe( const CGPReg& dst, const CMem& src )   
			{ 
				_emitInstruction( INST_CMOVBE , &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovc( const CGPReg& dst, const CGPReg& src ) 
			{ 
				_emitInstruction( INST_CMOVC, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovc( const CGPReg& dst, const CMem& src )   
			{ 
				_emitInstruction( INST_CMOVC, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmove( const CGPReg& dst, const CGPReg& src ) 
			{ 
				_emitInstruction( INST_CMOVE, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmove( const CGPReg& dst, const CMem& src )   
			{ 
				_emitInstruction( INST_CMOVE, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovg( const CGPReg& dst, const CGPReg& src ) 
			{ 
				_emitInstruction( INST_CMOVG  , &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovg( const CGPReg& dst, const CMem& src )   
			{ 
				_emitInstruction( INST_CMOVG, &dst, &src );  
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovge( const CGPReg& dst, const CGPReg& src ) 
			{ 
				_emitInstruction( INST_CMOVGE, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovge( const CGPReg& dst, const CMem& src )   
			{ 
				_emitInstruction( INST_CMOVGE, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovl( const CGPReg& dst, const CGPReg& src ) 
			{ 
				_emitInstruction( INST_CMOVL, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovl( const CGPReg& dst, const CMem& src )   
			{ 
				_emitInstruction( INST_CMOVL, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovle( const CGPReg& dst, const CGPReg& src ) 
			{ 
				_emitInstruction( INST_CMOVLE, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovle( const CGPReg& dst, const CMem& src )
			{ 
				_emitInstruction( INST_CMOVLE , &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovna( const CGPReg& dst, const CGPReg& src ) 
			{ 
				_emitInstruction( INST_CMOVNA , &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovna( const CGPReg& dst, const CMem& src )   
			{ 
				_emitInstruction( INST_CMOVNA , &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovnae( const CGPReg& dst, const CGPReg& src ) 
			{ 
				_emitInstruction( INST_CMOVNAE, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovnae( const CGPReg& dst, const CMem& src )   
			{ 
				_emitInstruction( INST_CMOVNAE, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovnb( const CGPReg& dst, const CGPReg& src ) 
			{
				_emitInstruction( INST_CMOVNB, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovnb( const CGPReg& dst, const CMem& src )   
			{ 
				_emitInstruction( INST_CMOVNB, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovnbe( const CGPReg& dst, const CGPReg& src ) 
			{ 
				_emitInstruction( INST_CMOVNBE, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovnbe( const CGPReg& dst, const CMem& src )   
			{ 
				_emitInstruction( INST_CMOVNBE, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovnc( const CGPReg& dst, const CGPReg& src ) 
			{ 
				_emitInstruction( INST_CMOVNC, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovnc( const CGPReg& dst, const CMem& src )   
			{ 
				_emitInstruction( INST_CMOVNC, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovne( const CGPReg& dst, const CGPReg& src ) 
			{ 
				_emitInstruction( INST_CMOVNE, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovne( const CGPReg& dst, const CMem& src )   
			{ 
				_emitInstruction( INST_CMOVNE, &dst, &src );  
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovng( const CGPReg& dst, const CGPReg& src ) 
			{ 
				_emitInstruction( INST_CMOVNG , &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovng( const CGPReg& dst, const CMem& src )   
			{ 
				_emitInstruction( INST_CMOVNG , &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovnge( const CGPReg& dst, const CGPReg& src ) 
			{ 
				_emitInstruction( INST_CMOVNGE, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovnge( const CGPReg& dst, const CMem& src )   
			{ 
				_emitInstruction( INST_CMOVNGE, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovnl( const CGPReg& dst, const CGPReg& src ) 
			{ 
				_emitInstruction( INST_CMOVNL, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovnl( const CGPReg& dst, const CMem& src )   
			{ 
				_emitInstruction( INST_CMOVNL, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovnle( const CGPReg& dst, const CGPReg& src ) 
			{  
				_emitInstruction( INST_CMOVNLE, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovnle( const CGPReg& dst, const CMem& src )
			{ 
				_emitInstruction( INST_CMOVNLE, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovno( const CGPReg& dst, const CGPReg& src ) 
			{ 
				_emitInstruction( INST_CMOVNO , &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovno( const CGPReg& dst, const CMem& src )   
			{ 
				_emitInstruction( INST_CMOVNO, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovnp( const CGPReg& dst, const CGPReg& src ) 
			{ 
				_emitInstruction( INST_CMOVNP, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovnp( const CGPReg& dst, const CMem& src )   
			{ 
				_emitInstruction( INST_CMOVNP, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovns( const CGPReg& dst, const CGPReg& src ) 
			{ 
				_emitInstruction( INST_CMOVNS, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovns( const CGPReg& dst, const CMem& src )   
			{ 
				_emitInstruction( INST_CMOVNS, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovnz( const CGPReg& dst, const CGPReg& src ) 
			{ 
				_emitInstruction( INST_CMOVNZ, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovnz( const CGPReg& dst, const CMem& src )   
			{ 
				_emitInstruction( INST_CMOVNZ, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovo( const CGPReg& dst, const CGPReg& src ) 
			{ 
				_emitInstruction( INST_CMOVO, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovo( const CGPReg& dst, const CMem& src )   
			{ 
				_emitInstruction( INST_CMOVO, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovp( const CGPReg& dst, const CGPReg& src ) 
			{ 
				_emitInstruction( INST_CMOVP, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovp( const CGPReg& dst, const CMem& src )   
			{ 
				_emitInstruction( INST_CMOVP, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovpe( const CGPReg& dst, const CGPReg& src ) 
			{ 
				_emitInstruction( INST_CMOVPE, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovpe( const CGPReg& dst, const CMem& src )   
			{ 
				_emitInstruction( INST_CMOVPE, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovpo( const CGPReg& dst, const CGPReg& src ) 
			{ 
				_emitInstruction( INST_CMOVPO, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovpo( const CGPReg& dst, const CMem& src )   
			{ 
				_emitInstruction( INST_CMOVPO , &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovs( const CGPReg& dst, const CGPReg& src ) 
			{ 
				_emitInstruction( INST_CMOVS, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovs( const CGPReg& dst, const CMem& src )   
			{ 
				_emitInstruction( INST_CMOVS, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovz( const CGPReg& dst, const CGPReg& src ) 
			{ 
				_emitInstruction( INST_CMOVZ, &dst, &src ); 
			}

			//------------------------------------------------------------------------------
			//Conditional Move.
			inline void cmovz( const CGPReg& dst, const CMem& src )   
			{ 
				_emitInstruction( INST_CMOVZ, &dst, &src ); 
			}

		protected:

			__QCS_DECLARE_NONCOPYABLE( Ci686CPU );
		};

		//------------------------------------------------------------------------------
		class __QOR_INTERFACE( __ARCHQOR ) CP6FPU : public CPentiumFPU
		{
		public:

			//------------------------------------------------------------------------------
			CP6FPU( Cx86CPUCore& refCPU ) : CPentiumFPU( refCPU )
			{
			}

			//------------------------------------------------------------------------------
			virtual ~CP6FPU()
			{
			}

			__QCS_DECLARE_NONCOPYABLE( CP6FPU );
		};

	}//nsx86

}//nsArch

#endif//ARCHQOR_ISET_I686_H_2
