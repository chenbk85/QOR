//InstEmitter.h

// Copyright (c) 2008-2010, Petr Kobalicek <kobalicek.petr@gmail.com>
// Copyright (c) Querysoft Limited 2012
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Low level instruction emitter for x86 assembler

#ifndef ARCHQOR_X86PC_INSTEMITTER_H_2
#define ARCHQOR_X86PC_INSTEMITTER_H_2

#include "CompilerQOR.h"
#include "../Operands/Operand.h"
#include "ArchQOR/x86/Assembler/Defs.h"

//------------------------------------------------------------------------------
namespace nsArch
{
//------------------------------------------------------------------------------
namespace nsx86
{
	class __QOR_INTERFACE( __ARCHQOR ) Cx86CPUCore;

	//------------------------------------------------------------------------------
	class CInstEmitter
	{

	public:

		CInstEmitter( Cx86CPUCore& CPUParam, Cmp_unsigned__int32 codeParam, const COperand* o0Param, const COperand* o1Param, const COperand* o2Param ) __QCMP_THROW;

		bool BeginInstruction( void ) __QCMP_THROW;
		bool PrepareInstruction( void ) __QCMP_THROW;
		void FinishImmediate( const COperand* pOperand, Cmp_unsigned__int32 immSize ) __QCMP_THROW;
		void EndInstruction( void ) __QCMP_THROW;
		void CleanupInstruction( void ) __QCMP_THROW;
		bool LockInstruction( void ) __QCMP_THROW;
		void InstructionImmediate( void ) __QCMP_THROW;
		void InstructionIllegal( void ) __QCMP_THROW;

		void InstructionG_EMIT( void ) __QCMP_THROW;
		void InstructionG_ALU( void ) __QCMP_THROW;
		void InstructionG_BSWAP( void ) __QCMP_THROW;
		void InstructionG_BT( void ) __QCMP_THROW;
		void InstructionG_CALL( void ) __QCMP_THROW;
		void InstructionG_CRC32( void ) __QCMP_THROW;
		void InstructionG_ENTER( void ) __QCMP_THROW;
		void InstructionG_IMUL( void ) __QCMP_THROW;
		void InstructionG_INC_DEC( void ) __QCMP_THROW;
		void InstructionG_J( void ) __QCMP_THROW;
		void InstructionG_JMP( void ) __QCMP_THROW;
		void InstructionG_LEA( void ) __QCMP_THROW;
		void InstructionG_M( void ) __QCMP_THROW;
		void InstructionG_MOV( void ) __QCMP_THROW;
		void InstructionG_MOV_PTR( void ) __QCMP_THROW;
		void InstructionG_MOVSX_MOVZX( void ) __QCMP_THROW;
#		if ( QOR_ARCH_WORDSIZE == 64 )
		void InstructionG_MOVSXD( void ) __QCMP_THROW;
#		endif
		void InstructionG_PUSH( void ) __QCMP_THROW;
		void InstructionG_POP( void ) __QCMP_THROW;
		void InstructionG_R_RM( void ) __QCMP_THROW;
		void InstructionG_RM_B( void ) __QCMP_THROW;
		void InstructionG_RM( void ) __QCMP_THROW;
		void InstructionG_RM_R( void ) __QCMP_THROW;
		void InstructionG_REP( void ) __QCMP_THROW;
		void InstructionG_RET( void ) __QCMP_THROW;
		void InstructionG_ROT( void ) __QCMP_THROW;
		void InstructionG_SHLD_SHRD( void ) __QCMP_THROW;
		void InstructionG_TEST( void ) __QCMP_THROW;
		void InstructionG_XCHG( void ) __QCMP_THROW;
		void InstructionG_MOVBE( void ) __QCMP_THROW;
		void InstructionG_X87_FPU( void ) __QCMP_THROW;
		void InstructionG_X87_STI( void ) __QCMP_THROW;
		void InstructionG_X87_FSTSW( void ) __QCMP_THROW;
		void InstructionG_X87_MEM_STI( void ) __QCMP_THROW;
		void InstructionG_X87_MEM( void ) __QCMP_THROW;
		void InstructionG_MMU_MOV( void ) __QCMP_THROW;
		void InstructionG_MMU_MOVD( void ) __QCMP_THROW;
		void InstructionG_MMU_MOVQ( void ) __QCMP_THROW;
		void InstructionG_MMU_PREFETCH( void ) __QCMP_THROW;
		void InstructionG_MMU_PEXTR( void ) __QCMP_THROW;
		void InstructionG_MMU_RMI( void ) __QCMP_THROW;
		void InstructionG_MMU_RM_IMM8( void ) __QCMP_THROW;
		void InstructionG_MMU_RM_3DNOW( void ) __QCMP_THROW;

	protected:

		Cx86CPUCore& m_CPU;
		Cmp_unsigned__int32 m_uiCode;
		const COperand* m_pO0;
		const COperand* m_pO1;
		const COperand* m_pO2;
		Cmp_unsigned__int32 m_bLoHiUsed; 
		bool m_bAssertIllegal;
		const COperand* m_aLoggerOperands[ 3 ];
		const CImm* m_pImmOperand;
		Cmp_unsigned__int32 m_uiImmSize;
		Cmp_uint_ptr m_uiBeginOffset;
		const InstructionDescription* m_pId;
		Cmp_unsigned__int32 m_uiForceRexPrefix;
		Cmp_unsigned__int32 m_uiMemRegType;	

	private:

		__QCS_DECLARE_NONASSIGNABLE( CInstEmitter );
	};


}//nsx86
}//nsArch

#endif//ARCHQOR_X86PC_INSTEMITTER_H_2

