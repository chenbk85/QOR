//SSE2.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef ARCHQOR_ISET_X86_SSE2_H_2
#define ARCHQOR_ISET_X86_SSE2_H_2

#include "CompilerQOR.h"
#include "SSE.h"

//------------------------------------------------------------------------------
namespace nsArch
{
	//------------------------------------------------------------------------------
	namespace nsx86
	{
		//------------------------------------------------------------------------------
		class __QOR_INTERFACE( __ARCHQOR ) CSSE2 : public CSSE
		{
		public:

			CSSE2( Cx86CPUCore& refCPU );
			virtual ~CSSE2();
			void psrldq( const CXMMReg& dst, const CImm& src );
			void addpd( const CXMMReg& dst, const CXMMReg& src );
			void addpd( const CXMMReg& dst, const CMem& src );
			void addsd( const CXMMReg& dst, const CXMMReg& src );
			void addsd( const CXMMReg& dst, const CMem& src );
			void andnpd( const CXMMReg& dst, const CXMMReg& src );
			void andnpd( const CXMMReg& dst, const CMem& src );
			void andpd( const CXMMReg& dst, const CXMMReg& src );
			void andpd( const CXMMReg& dst, const CMem& src );
			void clflush( const CMem& mem );
			void cmppd( const CXMMReg& dst, const CXMMReg& src, const CImm& imm8 );
			void cmppd( const CXMMReg& dst, const CMem& src, const CImm& imm8 );
			void cmpsd( const CXMMReg& dst, const CXMMReg& src, const CImm& imm8 );
			void cmpsd( const CXMMReg& dst, const CMem& src, const CImm& imm8 );
			void comisd( const CXMMReg& dst, const CXMMReg& src );
			void comisd( const CXMMReg& dst, const CMem& src );
			void cvtdq2pd( const CXMMReg& dst, const CXMMReg& src );
			void cvtdq2pd( const CXMMReg& dst, const CMem& src );
			void cvtdq2ps( const CXMMReg& dst, const CXMMReg& src );
			void cvtdq2ps( const CXMMReg& dst, const CMem& src );
			void cvtpd2dq( const CXMMReg& dst, const CXMMReg& src );
			void cvtpd2dq( const CXMMReg& dst, const CMem& src );
			void cvtpd2pi( const CMMReg& dst, const CXMMReg& src );
			void cvtpd2pi( const CMMReg& dst, const CMem& src );
			void cvtpd2ps( const CXMMReg& dst, const CXMMReg& src );
			void cvtpd2ps( const CXMMReg& dst, const CMem& src );
			void cvtpi2pd( const CXMMReg& dst, const CMMReg& src );
			void cvtpi2pd( const CXMMReg& dst, const CMem& src );
			void cvtps2dq( const CXMMReg& dst, const CXMMReg& src );
			void cvtps2dq( const CXMMReg& dst, const CMem& src );
			void cvtps2pd( const CXMMReg& dst, const CXMMReg& src );
			void cvtps2pd( const CXMMReg& dst, const CMem& src );
			void cvtsd2si( const CGPReg& dst, const CXMMReg& src );
			void cvtsd2si( const CGPReg& dst, const CMem& src );
			void cvtsd2ss( const CXMMReg& dst, const CXMMReg& src );
			void cvtsd2ss( const CXMMReg& dst, const CMem& src );
			void cvtsi2sd( const CXMMReg& dst, const CGPReg& src );
			void cvtsi2sd( const CXMMReg& dst, const CMem& src );
			void cvtss2sd( const CXMMReg& dst, const CXMMReg& src );
			void cvtss2sd( const CXMMReg& dst, const CMem& src );
			void cvttpd2pi( const CMMReg& dst, const CXMMReg& src );
			void cvttpd2pi( const CMMReg& dst, const CMem& src );
			void cvttpd2dq( const CXMMReg& dst, const CXMMReg& src );
			void cvttpd2dq( const CXMMReg& dst, const CMem& src );
			void cvttps2dq( const CXMMReg& dst, const CXMMReg& src );
			void cvttps2dq( const CXMMReg& dst, const CMem& src );
			void cvttsd2si( const CGPReg& dst, const CXMMReg& src );
			void cvttsd2si( const CGPReg& dst, const CMem& src );
			void divpd( const CXMMReg& dst, const CXMMReg& src );
			void divpd( const CXMMReg& dst, const CMem& src );
			void divsd( const CXMMReg& dst, const CXMMReg& src );
			void divsd( const CXMMReg& dst, const CMem& src );
			void lfence();
			void maskmovdqu( const CXMMReg& src, const CXMMReg& mask );
			void maxpd( const CXMMReg& dst, const CXMMReg& src );
			void maxpd( const CXMMReg& dst, const CMem& src );
			void maxsd( const CXMMReg& dst, const CXMMReg& src );
			void maxsd( const CXMMReg& dst, const CMem& src );
			void mfence();
			void minpd( const CXMMReg& dst, const CXMMReg& src );
			void minpd( const CXMMReg& dst, const CMem& src );
			void minsd( const CXMMReg& dst, const CXMMReg& src );
			void minsd( const CXMMReg& dst, const CMem& src );
			void movdqa( const CXMMReg& dst, const CXMMReg& src );
			void movdqa( const CXMMReg& dst, const CMem& src );
			void movdqa( const CMem& dst, const CXMMReg& src );
			void movdqu( const CXMMReg& dst, const CXMMReg& src );
			void movdqu( const CXMMReg& dst, const CMem& src );
			void movdqu( const CMem& dst, const CXMMReg& src );
			void movmskps( const CGPReg& dst, const CXMMReg& src );
			void movmskpd( const CGPReg& dst, const CXMMReg& src );
			void movsd( const CXMMReg& dst, const CXMMReg& src );
			void movsd( const CXMMReg& dst, const CMem& src );
			void movsd( const CMem& dst, const CXMMReg& src );
			void movapd( const CXMMReg& dst, const CXMMReg& src );
			void movapd( const CXMMReg& dst, const CMem& src );
			void movapd( const CMem& dst, const CXMMReg& src );
			void movdq2q( const CMMReg& dst, const CXMMReg& src );
			void movq2dq( const CXMMReg& dst, const CMMReg& src );
			void movhpd( const CXMMReg& dst, const CMem& src );
			void movhpd( const CMem& dst, const CXMMReg& src );
			void movlpd( const CXMMReg& dst, const CMem& src );
			void movlpd( const CMem& dst, const CXMMReg& src );
			void movntdq( const CMem& dst, const CXMMReg& src );
			void movnti( const CMem& dst, const CGPReg& src );
			void movntpd( const CMem& dst, const CXMMReg& src );
			void movupd( const CXMMReg& dst, const CXMMReg& src );
			void movupd( const CXMMReg& dst, const CMem& src );
			void movupd( const CMem& dst, const CXMMReg& src );
			void mulpd( const CXMMReg& dst, const CXMMReg& src );
			void mulpd( const CXMMReg& dst, const CMem& src );
			void mulsd( const CXMMReg& dst, const CXMMReg& src );
			void mulsd( const CXMMReg& dst, const CMem& src );
			void orpd( const CXMMReg& dst, const CXMMReg& src );
			void orpd( const CXMMReg& dst, const CMem& src );
			void packsswb( const CXMMReg& dst, const CXMMReg& src );
			void packsswb( const CXMMReg& dst, const CMem& src );
			void packssdw( const CXMMReg& dst, const CXMMReg& src );
			void packssdw( const CXMMReg& dst, const CMem& src );
			void packuswb( const CXMMReg& dst, const CXMMReg& src );
			void packuswb( const CXMMReg& dst, const CMem& src );
			void paddb( const CXMMReg& dst, const CXMMReg& src );
			void paddb( const CXMMReg& dst, const CMem& src );
			void paddw( const CXMMReg& dst, const CXMMReg& src );
			void paddw( const CXMMReg& dst, const CMem& src );
			void paddd( const CXMMReg& dst, const CXMMReg& src );
			void paddd( const CXMMReg& dst, const CMem& src );
			void paddq( const CMMReg& dst, const CMMReg& src );
			void paddq( const CMMReg& dst, const CMem& src );
			void paddq( const CXMMReg& dst, const CXMMReg& src );
			void paddq( const CXMMReg& dst, const CMem& src );
			void paddsb( const CXMMReg& dst, const CXMMReg& src );
			void paddsb( const CXMMReg& dst, const CMem& src );
			void paddsw( const CXMMReg& dst, const CXMMReg& src );
			void paddsw( const CXMMReg& dst, const CMem& src );
			void paddusb( const CXMMReg& dst, const CXMMReg& src );
			void paddusb( const CXMMReg& dst, const CMem& src );
			void paddusw( const CXMMReg& dst, const CXMMReg& src );
			void paddusw( const CXMMReg& dst, const CMem& src );
			void pand( const CXMMReg& dst, const CXMMReg& src );
			void pand( const CXMMReg& dst, const CMem& src );
			void pandn( const CXMMReg& dst, const CXMMReg& src );
			void pandn( const CXMMReg& dst, const CMem& src );
			void pause();
			void pavgb( const CXMMReg& dst, const CXMMReg& src );
			void pavgb( const CXMMReg& dst, const CMem& src );
			void pavgw( const CXMMReg& dst, const CXMMReg& src );
			void pavgw( const CXMMReg& dst, const CMem& src );
			void pcmpeqb( const CXMMReg& dst, const CXMMReg& src );
			void pcmpeqb( const CXMMReg& dst, const CMem& src );
			void pcmpeqw( const CXMMReg& dst, const CXMMReg& src );
			void pcmpeqw( const CXMMReg& dst, const CMem& src );
			void pcmpeqd( const CXMMReg& dst, const CXMMReg& src );
			void pcmpeqd( const CXMMReg& dst, const CMem& src );
			void pcmpgtb( const CXMMReg& dst, const CXMMReg& src );
			void pcmpgtb( const CXMMReg& dst, const CMem& src );
			void pcmpgtw( const CXMMReg& dst, const CXMMReg& src );
			void pcmpgtw( const CXMMReg& dst, const CMem& src );
			void pcmpgtd( const CXMMReg& dst, const CXMMReg& src );
			void pcmpgtd( const CXMMReg& dst, const CMem& src );
			void pmaxsw( const CXMMReg& dst, const CXMMReg& src );
			void pmaxsw( const CXMMReg& dst, const CMem& src );
			void pmaxub( const CXMMReg& dst, const CXMMReg& src );
			void pmaxub( const CXMMReg& dst, const CMem& src );
			void pminsw( const CXMMReg& dst, const CXMMReg& src );
			void pminsw( const CXMMReg& dst, const CMem& src );
			void pminub( const CXMMReg& dst, const CXMMReg& src );
			void pminub( const CXMMReg& dst, const CMem& src );
			void pmovmskb( const CGPReg& dst, const CXMMReg& src );
			void pmulhw( const CXMMReg& dst, const CXMMReg& src );
			void pmulhw( const CXMMReg& dst, const CMem& src );
			void pmulhuw( const CXMMReg& dst, const CXMMReg& src );
			void pmulhuw( const CXMMReg& dst, const CMem& src );
			void pmullw( const CXMMReg& dst, const CXMMReg& src );
			void pmullw( const CXMMReg& dst, const CMem& src );
			void pmuludq( const CMMReg& dst, const CMMReg& src );
			void pmuludq( const CMMReg& dst, const CMem& src );
			void pmuludq( const CXMMReg& dst, const CXMMReg& src );
			void pmuludq( const CXMMReg& dst, const CMem& src );
			void por( const CXMMReg& dst, const CXMMReg& src );
			void por( const CXMMReg& dst, const CMem& src);
			void pslld( const CXMMReg& dst, const CXMMReg& src );
			void pslld( const CXMMReg& dst, const CMem& src );
			void pslld( const CXMMReg& dst, const CImm& src );
			void psllq( const CXMMReg& dst, const CXMMReg& src );
			void psllq( const CXMMReg& dst, const CMem& src );
			void psllq( const CXMMReg& dst, const CImm& src );
			void psllw( const CXMMReg& dst, const CXMMReg& src );
			void psllw( const CXMMReg& dst, const CMem& src );
			void psllw( const CXMMReg& dst, const CImm& src );
			void pslldq( const CXMMReg& dst, const CImm& src );
			void psrad( const CXMMReg& dst, const CXMMReg& src );
			void psrad( const CXMMReg& dst, const CMem& src );
			void psrad( const CXMMReg& dst, const CImm& src );
			void psraw( const CXMMReg& dst, const CXMMReg& src );
			void psraw( const CXMMReg& dst, const CMem& src );
			void psraw( const CXMMReg& dst, const CImm& src );
			void psubb( const CXMMReg& dst, const CXMMReg& src );
			void psubb( const CXMMReg& dst, const CMem& src );
			void psubw( const CXMMReg& dst, const CXMMReg& src );
			void psubw( const CXMMReg& dst, const CMem& src );
			void psubd( const CXMMReg& dst, const CXMMReg& src );
			void psubd( const CXMMReg& dst, const CMem& src );
			void psubq( const CMMReg& dst, const CMMReg& src );
			void psubq( const CMMReg& dst, const CMem& src );
			void psubq( const CXMMReg& dst, const CXMMReg& src );
			void psubq( const CXMMReg& dst, const CMem& src );
			void pmaddwd( const CXMMReg& dst, const CXMMReg& src );
			void pmaddwd( const CXMMReg& dst, const CMem& src );
			void pshufd( const CXMMReg& dst, const CXMMReg& src, const CImm& imm8 );
			void pshufd( const CXMMReg& dst, const CMem& src, const CImm& imm8 );
			void pshufhw( const CXMMReg& dst, const CXMMReg& src, const CImm& imm8 );
			void pshufhw( const CXMMReg& dst, const CMem& src, const CImm& imm8 );
			void pshuflw( const CXMMReg& dst, const CXMMReg& src, const CImm& imm8 );
			void pshuflw( const CXMMReg& dst, const CMem& src, const CImm& imm8 );
			void psrld( const CXMMReg& dst, const CXMMReg& src );
			void psrld( const CXMMReg& dst, const CMem& src );
			void psrld( const CXMMReg& dst, const CImm& src );
			void psrlq( const CXMMReg& dst, const CXMMReg& src );
			void psrlq( const CXMMReg& dst, const CMem& src );
			void psrlq( const CXMMReg& dst, const CImm& src );
			void psrlw( const CXMMReg& dst, const CXMMReg& src );
			void psrlw( const CXMMReg& dst, const CMem& src );
			void psrlw( const CXMMReg& dst, const CImm& src );
			void psubsb( const CXMMReg& dst, const CXMMReg& src );
			void psubsb( const CXMMReg& dst, const CMem& src );
			void psubsw( const CXMMReg& dst, const CXMMReg& src );
			void psubsw( const CXMMReg& dst, const CMem& src);
			void psubusb( const CXMMReg& dst, const CXMMReg& src );
			void psubusb( const CXMMReg& dst, const CMem& src );
			void psubusw( const CXMMReg& dst, const CXMMReg& src );
			void psubusw( const CXMMReg& dst, const CMem& src );
			void punpckhbw( const CXMMReg& dst, const CXMMReg& src );
			void punpckhbw( const CXMMReg& dst, const CMem& src );
			void punpckhwd( const CXMMReg& dst, const CXMMReg& src );
			void punpckhwd( const CXMMReg& dst, const CMem& src );
			void punpckhdq( const CXMMReg& dst, const CXMMReg& src );
			void punpckhdq( const CXMMReg& dst, const CMem& src );
			void punpckhqdq( const CXMMReg& dst, const CXMMReg& src );
			void punpckhqdq( const CXMMReg& dst, const CMem& src );
			void punpcklbw( const CXMMReg& dst, const CXMMReg& src );
			void punpcklbw( const CXMMReg& dst, const CMem& src );
			void punpcklwd( const CXMMReg& dst, const CXMMReg& src );
			void punpcklwd( const CXMMReg& dst, const CMem& src );
			void punpckldq( const CXMMReg& dst, const CXMMReg& src );
			void punpckldq( const CXMMReg& dst, const CMem& src );
			void punpcklqdq(const CXMMReg& dst, const CXMMReg& src );
			void punpcklqdq( const CXMMReg& dst, const CMem& src );
			void pxor( const CXMMReg& dst, const CXMMReg& src );
			void pxor( const CXMMReg& dst, const CMem& src );
			void shufpd( const CXMMReg& dst, const CXMMReg& src, const CImm& imm8 );
			void shufpd( const CXMMReg& dst, const CMem& src, const CImm& imm8 );
			void sqrtpd( const CXMMReg& dst, const CXMMReg& src );
			void sqrtpd( const CXMMReg& dst, const CMem& src );
			void sqrtsd( const CXMMReg& dst, const CXMMReg& src );
			void sqrtsd( const CXMMReg& dst, const CMem& src );
			void subpd( const CXMMReg& dst, const CXMMReg& src );
			void subpd( const CXMMReg& dst, const CMem& src );
			void subsd( const CXMMReg& dst, const CXMMReg& src );
			void subsd( const CXMMReg& dst, const CMem& src );
			void ucomisd( const CXMMReg& dst, const CXMMReg& src );
			void ucomisd( const CXMMReg& dst, const CMem& src );
			void unpckhpd( const CXMMReg& dst, const CXMMReg& src );
			void unpckhpd( const CXMMReg& dst, const CMem& src );
			void unpcklpd( const CXMMReg& dst, const CXMMReg& src );
			void unpcklpd( const CXMMReg& dst, const CMem& src );
			void xorpd( const CXMMReg& dst, const CXMMReg& src );
			void xorpd( const CXMMReg& dst, const CMem& src );
			void pinsrw( const CXMMReg& dst, const CGPReg& src, const CImm& imm8 );
			void pinsrw( const CXMMReg& dst, const CMem& src, const CImm& imm8 );

			__QCS_DECLARE_NONCOPYABLE( CSSE2 );
		};
	}
}

#endif//ARCHQOR_ISET_X86_SSE2_H_2

