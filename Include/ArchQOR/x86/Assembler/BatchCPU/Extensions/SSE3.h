//SSE3.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef ARCHQOR_ISET_X86_SSE3_H_2
#define ARCHQOR_ISET_X86_SSE3_H_2

#include "CompilerQOR.h"
#include "SSE2.h"

//------------------------------------------------------------------------------
namespace nsArch
{
	//------------------------------------------------------------------------------
	namespace nsx86
	{
		//------------------------------------------------------------------------------
		class __QOR_INTERFACE( __ARCHQOR ) CSSE3 : public CSSE2
		{
		public:

			CSSE3( Cx86CPUCore& refCPU );
			virtual ~CSSE3();
			void addsubpd( const CXMMReg& dst, const CXMMReg& src );
			void addsubpd( const CXMMReg& dst, const CMem& src );
			void addsubps( const CXMMReg& dst, const CXMMReg& src );
			void addsubps( const CXMMReg& dst, const CMem& src );
			void fisttp( const CMem& dst );
			void haddpd( const CXMMReg& dst, const CXMMReg& src );
			void haddpd( const CXMMReg& dst, const CMem& src );
			void haddps( const CXMMReg& dst, const CXMMReg& src );
			void haddps( const CXMMReg& dst, const CMem& src );
			void hsubpd( const CXMMReg& dst, const CXMMReg& src );
			void hsubpd( const CXMMReg& dst, const CMem& src );
			void hsubps( const CXMMReg& dst, const CXMMReg& src );
			void hsubps( const CXMMReg& dst, const CMem& src );
			void lddqu( const CXMMReg& dst, const CMem& src );
			void monitor();
			void movddup( const CXMMReg& dst, const CXMMReg& src );
			void movddup( const CXMMReg& dst, const CMem& src );
			void movshdup( const CXMMReg& dst, const CXMMReg& src );
			void movshdup( const CXMMReg& dst, const CMem& src );
			void movsldup( const CXMMReg& dst, const CXMMReg& src );
			void movsldup( const CXMMReg& dst, const CMem& src );
			void mwait();

			__QCS_DECLARE_NONCOPYABLE( CSSE3 );
		};

		//------------------------------------------------------------------------------
		class CSSSE3 : public CSSE3
		{
		public:

			//------------------------------------------------------------------------------
			CSSSE3( Cx86CPUCore& refCPU );
			virtual ~CSSSE3();
			void psignb( const CMMReg& dst, const CMMReg& src );
			void psignb( const CMMReg& dst, const CMem& src );
			void psignb( const CXMMReg& dst, const CXMMReg& src );
			void psignb( const CXMMReg& dst, const CMem& src );
			void psignw( const CMMReg& dst, const CMMReg& src );
			void psignw( const CMMReg& dst, const CMem& src );
			void psignw( const CXMMReg& dst, const CXMMReg& src );
			void psignw( const CXMMReg& dst, const CMem& src );
			void psignd( const CMMReg& dst, const CMMReg& src );
			void psignd( const CMMReg& dst, const CMem& src );
			void psignd( const CXMMReg& dst, const CXMMReg& src );
			void psignd( const CXMMReg& dst, const CMem& src );
			void phaddw( const CMMReg& dst, const CMMReg& src );
			void phaddw( const CMMReg& dst, const CMem& src );
			void phaddw( const CXMMReg& dst, const CXMMReg& src );
			void phaddw( const CXMMReg& dst, const CMem& src );
			void phaddd( const CMMReg& dst, const CMMReg& src );
			void phaddd( const CMMReg& dst, const CMem& src );
			void phaddd( const CXMMReg& dst, const CXMMReg& src );
			void phaddd( const CXMMReg& dst, const CMem& src );
			void phaddsw( const CMMReg& dst, const CMMReg& src );
			void phaddsw( const CMMReg& dst, const CMem& src );
			void phaddsw( const CXMMReg& dst, const CXMMReg& src );
			void phaddsw( const CXMMReg& dst, const CMem& src );
			void phsubw( const CMMReg& dst, const CMMReg& src );
			void phsubw( const CMMReg& dst, const CMem& src );
			void phsubw( const CXMMReg& dst, const CXMMReg& src );
			void phsubw( const CXMMReg& dst, const CMem& src );
			void phsubd( const CMMReg& dst, const CMMReg& src );
			void phsubd( const CMMReg& dst, const CMem& src );
			void phsubd( const CXMMReg& dst, const CXMMReg& src );
			void phsubd( const CXMMReg& dst, const CMem& src );
			void phsubsw( const CMMReg& dst, const CMMReg& src );
			void phsubsw( const CMMReg& dst, const CMem& src );
			void phsubsw( const CXMMReg& dst, const CXMMReg& src );
			void phsubsw( const CXMMReg& dst, const CMem& src );
			void pmaddubsw( const CMMReg& dst, const CMMReg& src );
			void pmaddubsw( const CMMReg& dst, const CMem& src );
			void pmaddubsw( const CXMMReg& dst, const CXMMReg& src );
			void pmaddubsw( const CXMMReg& dst, const CMem& src );
			void pabsb( const CMMReg& dst, const CMMReg& src );
			void pabsb( const CMMReg& dst, const CMem& src );
			void pabsb( const CXMMReg& dst, const CXMMReg& src );
			void pabsb( const CXMMReg& dst, const CMem& src );
			void pabsw( const CMMReg& dst, const CMMReg& src );
			void pabsw( const CMMReg& dst, const CMem& src );
			void pabsw( const CXMMReg& dst, const CXMMReg& src );
			void pabsw( const CXMMReg& dst, const CMem& src );
			void pabsd( const CMMReg& dst, const CMMReg& src );
			void pabsd( const CMMReg& dst, const CMem& src );
			void pabsd( const CXMMReg& dst, const CXMMReg& src );
			void pabsd( const CXMMReg& dst, const CMem& src );
			void pmulhrsw( const CMMReg& dst, const CMMReg& src );
			void pmulhrsw( const CMMReg& dst, const CMem& src );
			void pmulhrsw( const CXMMReg& dst, const CXMMReg& src );
			void pmulhrsw( const CXMMReg& dst, const CMem& src );
			void pshufb( const CMMReg& dst, const CMMReg& src );
			void pshufb( const CMMReg& dst, const CMem& src );
			void pshufb( const CXMMReg& dst, const CXMMReg& src );
			void pshufb( const CXMMReg& dst, const CMem& src );
			void palignr( const CMMReg& dst, const CMMReg& src, const CImm& imm8 );
			void palignr( const CMMReg& dst, const CMem& src, const CImm& imm8 );
			void palignr( const CXMMReg& dst, const CXMMReg& src, const CImm& imm8 );
			void palignr( const CXMMReg& dst, const CMem& src, const CImm& imm8 );
			void movbe( const CGPReg& dst, const CMem& src );
			void movbe( const CMem& dst, const CGPReg& src );

			__QCS_DECLARE_NONCOPYABLE( CSSSE3 );
		};

	}//nsx86
}//nsArch

#endif//ARCHQOR_ISET_X86_SSE3_H_2
