//SSE.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef ARCHQOR_ISET_X86_SSE_H_2
#define ARCHQOR_ISET_X86_SSE_H_2

#include "CompilerQOR.h"
#include "MMX.h"

//------------------------------------------------------------------------------
namespace nsArch
{
	//------------------------------------------------------------------------------
	namespace nsx86
	{
		//------------------------------------------------------------------------------
		class __QOR_INTERFACE( __ARCHQOR ) CSSE : public CMMXExt
		{
		public:

			CSSE( Cx86CPUCore& refCPU );
			virtual ~CSSE();
			void addps( const CXMMReg& dst, const CXMMReg& src );
			void addps( const CXMMReg& dst, const CMem& src );
			void addss( const CXMMReg& dst, const CXMMReg& src );
			void addss( const CXMMReg& dst, const CMem& src );
			void andnps( const CXMMReg& dst, const CXMMReg& src );
			void andnps( const CXMMReg& dst, const CMem& src );
			void andps( const CXMMReg& dst, const CXMMReg& src );
			void andps( const CXMMReg& dst, const CMem& src );
			void cmpps( const CXMMReg& dst, const CXMMReg& src, const CImm& imm8 );
			void cmpps( const CXMMReg& dst, const CMem& src, const CImm& imm8 );
			void cmpss( const CXMMReg& dst, const CXMMReg& src, const CImm& imm8 );
			void cmpss( const CXMMReg& dst, const CMem& src, const CImm& imm8 );
			void comiss( const CXMMReg& dst, const CXMMReg& src );
			void comiss( const CXMMReg& dst, const CMem& src );
			void cvtpi2ps( const CXMMReg& dst, const CMMReg& src );
			void cvtpi2ps( const CXMMReg& dst, const CMem& src );
			void cvtps2pi( const CMMReg& dst, const CXMMReg& src );
			void cvtps2pi( const CMMReg& dst, const CMem& src );
			void cvtsi2ss( const CXMMReg& dst, const CGPReg& src );
			void cvtsi2ss( const CXMMReg& dst, const CMem& src );
			void cvtss2si( const CGPReg& dst, const CXMMReg& src );
			void cvtss2si( const CGPReg& dst, const CMem& src );
			void cvttps2pi( const CMMReg& dst, const CXMMReg& src );
			void cvttps2pi( const CMMReg& dst, const CMem& src );
			void cvttss2si( const CGPReg& dst, const CXMMReg& src );
			void cvttss2si( const CGPReg& dst, const CMem& src );
			void divps( const CXMMReg& dst, const CXMMReg& src );
			void divps( const CXMMReg& dst, const CMem& src );
			void divss( const CXMMReg& dst, const CXMMReg& src );
			void divss( const CXMMReg& dst, const CMem& src );
			void ldmxcsr( const CMem& src );
			void maskmovq( const CMMReg& data, const CMMReg& mask );
			void maxps( const CXMMReg& dst, const CXMMReg& src );
			void maxps( const CXMMReg& dst, const CMem& src );
			void maxss( const CXMMReg& dst, const CXMMReg& src );
			void maxss( const CXMMReg& dst, const CMem& src );
			void minps( const CXMMReg& dst, const CXMMReg& src );
			void minps( const CXMMReg& dst, const CMem& src );
			void minss( const CXMMReg& dst, const CXMMReg& src );
			void minss( const CXMMReg& dst, const CMem& src );
			void movaps( const CXMMReg& dst, const CXMMReg& src );
			void movaps( const CXMMReg& dst, const CMem& src );
			void movaps( const CMem& dst, const CXMMReg& src );
			void movd( const CMem& dst, const CXMMReg& src );
			void movd( const CGPReg& dst, const CXMMReg& src );
			void movd( const CXMMReg& dst, const CMem& src );
			void movd( const CXMMReg& dst, const CGPReg& src );
			void movq( const CXMMReg& dst, const CXMMReg& src );
			void movq( const CMem& dst, const CXMMReg& src );

#	if ( QOR_ARCH_WORDSIZE == 64 )
			void movq( const CGPReg& dst, const CXMMReg& src );
#	endif
			void movq( const CXMMReg& dst, const CMem& src );

#	if ( QOR_ARCH_WORDSIZE == 64 )
			void movq( const CXMMReg& dst, const CGPReg& src );
#	endif // ASMJIT_X64

			void movntq( const CMem& dst, const CMMReg& src );
			void movhlps( const CXMMReg& dst, const CXMMReg& src );
			void movhps( const CXMMReg& dst, const CMem& src );
			void movhps( const CMem& dst, const CXMMReg& src );
			void movlhps( const CXMMReg& dst, const CXMMReg& src );
			void movlps( const CXMMReg& dst, const CMem& src );
			void movlps( const CMem& dst, const CXMMReg& src );
			void movntps( const CMem& dst, const CXMMReg& src );
			void movss( const CXMMReg& dst, const CXMMReg& src );
			void movss( const CXMMReg& dst, const CMem& src );
			void movss( const CMem& dst, const CXMMReg& src );
			void movups( const CXMMReg& dst, const CXMMReg& src );
			void movups( const CXMMReg& dst, const CMem& src );
			void movups( const CMem& dst, const CXMMReg& src );
			void mulps( const CXMMReg& dst, const CXMMReg& src );
			void mulps( const CXMMReg& dst, const CMem& src );
			void mulss( const CXMMReg& dst, const CXMMReg& src );
			void mulss( const CXMMReg& dst, const CMem& src );
			void orps( const CXMMReg& dst, const CXMMReg& src );
			void orps( const CXMMReg& dst, const CMem& src );
			void pavgb( const CMMReg& dst, const CMMReg& src );
			void pavgb( const CMMReg& dst, const CMem& src );
			void pavgw( const CMMReg& dst, const CMMReg& src );
			void pavgw( const CMMReg& dst, const CMem& src );
			void pextrw( const CGPReg& dst, const CMMReg& src, const CImm& imm8 );
			void pinsrw( const CMMReg& dst, const CGPReg& src, const CImm& imm8 );
			void pinsrw( const CMMReg& dst, const CMem& src, const CImm& imm8 );
			void pmaxsw( const CMMReg& dst, const CMMReg& src );
			void pmaxsw( const CMMReg& dst, const CMem& src );
			void pmaxub( const CMMReg& dst, const CMMReg& src );
			void pmaxub( const CMMReg& dst, const CMem& src );
			void pminsw( const CMMReg& dst, const CMMReg& src );
			void pminsw( const CMMReg& dst, const CMem& src );
			void pminub( const CMMReg& dst, const CMMReg& src );
			void pminub( const CMMReg& dst, const CMem& src );
			void pmovmskb( const CGPReg& dst, const CMMReg& src );
			void pmulhuw( const CMMReg& dst, const CMMReg& src );
			void pmulhuw( const CMMReg& dst, const CMem& src );
			void psadbw( const CMMReg& dst, const CMMReg& src );
			void psadbw( const CMMReg& dst, const CMem& src );
			void pshufw( const CMMReg& dst, const CMMReg& src, const CImm& imm8 );;
			void pshufw( const CMMReg& dst, const CMem& src, const CImm& imm8 );;
			void rcpps( const CXMMReg& dst, const CXMMReg& src );
			void rcpps( const CXMMReg& dst, const CMem& src );
			void rcpss( const CXMMReg& dst, const CXMMReg& src );
			void rcpss( const CXMMReg& dst, const CMem& src );
			void prefetch( const CMem& mem, const CImm& hint );
			void psadbw( const CXMMReg& dst, const CXMMReg& src );
			void psadbw( const CXMMReg& dst, const CMem& src );
			void rsqrtps( const CXMMReg& dst, const CXMMReg& src );
			void rsqrtps( const CXMMReg& dst, const CMem& src );
			void rsqrtss( const CXMMReg& dst, const CXMMReg& src );
			void rsqrtss( const CXMMReg& dst, const CMem& src );
			void sfence();
			void shufps( const CXMMReg& dst, const CXMMReg& src, const CImm& imm8 );
			void shufps( const CXMMReg& dst, const CMem& src, const CImm& imm8 );
			void sqrtps( const CXMMReg& dst, const CXMMReg& src );
			void sqrtps( const CXMMReg& dst, const CMem& src );
			void sqrtss( const CXMMReg& dst, const CXMMReg& src );
			void sqrtss( const CXMMReg& dst, const CMem& src );
			void stmxcsr( const CMem& dst );
			void subps( const CXMMReg& dst, const CXMMReg& src );
			void subps( const CXMMReg& dst, const CMem& src );
			void subss( const CXMMReg& dst, const CXMMReg& src );
			void subss( const CXMMReg& dst, const CMem& src );
			void ucomiss( const CXMMReg& dst, const CXMMReg& src );
			void ucomiss( const CXMMReg& dst, const CMem& src );
			void unpckhps( const CXMMReg& dst, const CXMMReg& src );
			void unpckhps( const CXMMReg& dst, const CMem& src );
			void unpcklps( const CXMMReg& dst, const CXMMReg& src );
			void unpcklps( const CXMMReg& dst, const CMem& src );
			void xorps( const CXMMReg& dst, const CXMMReg& src );
			void xorps( const CXMMReg& dst, const CMem& src );

			__QCS_DECLARE_NONCOPYABLE( CSSE );

		};

	}//nsx86

}//nsArch

#endif//ARCHQOR_ISET_X86_SSE_H_2

