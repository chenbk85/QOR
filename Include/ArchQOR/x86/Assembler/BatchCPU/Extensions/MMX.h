//MMX.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef ARCHQOR_ISET_X86_MMX_H_2
#define ARCHQOR_ISET_X86_MMX_H_2

#include "CompilerQOR.h"
#include "../x86ISetExtension.h"

//------------------------------------------------------------------------------
namespace nsArch
{
	//------------------------------------------------------------------------------
	namespace nsx86
	{
		//------------------------------------------------------------------------------
		class __QOR_INTERFACE( __ARCHQOR ) CMMX : public Cx86ISetExtension
		{
		public:

			//------------------------------------------------------------------------------
			CMMX( Cx86CPUCore& refCPU ) : Cx86ISetExtension( refCPU )
			{
			}

			//------------------------------------------------------------------------------
			virtual ~CMMX()
			{
			}

			//------------------------------------------------------------------------------
			//Empty MMX state.
			inline void emms()
			{
				m_PU._emitInstruction( INST_EMMS );
			}

			//------------------------------------------------------------------------------
			//Move DWord (MMX).
			inline void movd( const CMem& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_MOVD, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Move DWord (MMX).
			inline void movd( const CGPReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_MOVD, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Move DWord (MMX).
			inline void movd( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_MOVD, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Move DWord (MMX).
			inline void movd( const CMMReg& dst, const CGPReg& src )
			{
				m_PU._emitInstruction( INST_MOVD, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Move QWord (MMX).
			inline void movq( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_MOVQ, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Move QWord (MMX).
			inline void movq( const CMem& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_MOVQ, &dst, &src );
			}

#	if ( QOR_ARCH_WORDSIZE == 64 )
			//------------------------------------------------------------------------------
			//Move QWord (MMX).
			inline void movq( const CGPReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_MOVQ, &dst, &src );
			}
#	endif

			//------------------------------------------------------------------------------
			//Move QWord (MMX).
			inline void movq( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_MOVQ, &dst, &src );
			}

#	if ( QOR_ARCH_WORDSIZE == 64 )
			//------------------------------------------------------------------------------
			//Move QWord (MMX).
			inline void movq( const CMMReg& dst, const CGPReg& src )
			{
				m_PU._emitInstruction( INST_MOVQ, &dst, &src );
			}
#	endif
			//------------------------------------------------------------------------------
			//Pack with Signed Saturation (MMX).
			inline void packsswb( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PACKSSWB, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Pack with Signed Saturation (MMX).
			inline void packsswb( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PACKSSWB, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Pack with Signed Saturation (MMX).
			inline void packssdw( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PACKSSDW, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Pack with Signed Saturation (MMX).
			inline void packssdw( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PACKSSDW, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Pack with Unsigned Saturation (MMX).
			inline void packuswb( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PACKUSWB, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Pack with Unsigned Saturation (MMX).
			inline void packuswb( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PACKUSWB, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed BYTE Add (MMX).
			inline void paddb( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PADDB, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed BYTE Add (MMX).
			inline void paddb( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PADDB, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed WORD Add (MMX).
			inline void paddw( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PADDW, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed WORD Add (MMX).
			inline void paddw( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PADDW, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed DWORD Add (MMX).
			inline void paddd( const CMMReg& dst, const CMMReg& src)
			{
				m_PU._emitInstruction( INST_PADDD, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed DWORD Add (MMX).
			inline void paddd( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PADDD, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Add with Saturation (MMX).
			inline void paddsb( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PADDSB, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Add with Saturation (MMX).
			inline void paddsb( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PADDSB, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Add with Saturation (MMX).
			inline void paddsw( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PADDSW, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Add with Saturation (MMX).
			inline void paddsw( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PADDSW, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Add Unsigned with Saturation (MMX).
			inline void paddusb( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PADDUSB, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Add Unsigned with Saturation (MMX).
			inline void paddusb( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PADDUSB, &dst, &src );
			}
			//------------------------------------------------------------------------------
			//Packed Add Unsigned with Saturation (MMX).
			inline void paddusw( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PADDUSW, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Add Unsigned with Saturation (MMX).
			inline void paddusw( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PADDUSW, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Logical AND (MMX).
			inline void pand( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PAND, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Logical AND (MMX).
			inline void pand( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PAND, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Logical AND Not (MMX).
			inline void pandn( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PANDN, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Logical AND Not (MMX).
			inline void pandn( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PANDN, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Compare for Equal (BYTES) (MMX).
			inline void pcmpeqb( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PCMPEQB, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Compare for Equal (BYTES) (MMX).
			inline void pcmpeqb( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PCMPEQB, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Compare for Equal (WORDS) (MMX).
			inline void pcmpeqw( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PCMPEQW, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Compare for Equal (WORDS) (MMX).
			inline void pcmpeqw( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PCMPEQW, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Compare for Equal (DWORDS) (MMX).
			inline void pcmpeqd( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PCMPEQD, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Compare for Equal (DWORDS) (MMX).
			inline void pcmpeqd( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PCMPEQD, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Compare for Greater Than (BYTES) (MMX).
			inline void pcmpgtb( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PCMPGTB, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Compare for Greater Than (BYTES) (MMX).
			inline void pcmpgtb( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PCMPGTB, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Compare for Greater Than (WORDS) (MMX).
			inline void pcmpgtw( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PCMPGTW, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Compare for Greater Than (WORDS) (MMX).
			inline void pcmpgtw( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PCMPGTW, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Compare for Greater Than (DWORDS) (MMX).
			inline void pcmpgtd( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PCMPGTD, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Compare for Greater Than (DWORDS) (MMX).
			inline void pcmpgtd( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PCMPGTD, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Multiply High (MMX).
			inline void pmulhw( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PMULHW, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Multiply High (MMX).
			inline void pmulhw( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PMULHW, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Multiply Low (MMX).
			inline void pmullw( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PMULLW, &dst, &src );
			}
	
			//------------------------------------------------------------------------------
			//Packed Multiply Low (MMX).
			inline void pmullw( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PMULLW, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Bitwise Logical OR (MMX).
			inline void por( const CMMReg& dst, const CMMReg& src)
			{
				m_PU._emitInstruction( INST_POR, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Bitwise Logical OR (MMX).
			inline void por( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_POR, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Multiply and Add (MMX).
			inline void pmaddwd( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PMADDWD, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Multiply and Add (MMX).
			inline void pmaddwd( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PMADDWD, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Shift Left Logical (MMX).
			inline void pslld( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PSLLD, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Shift Left Logical (MMX).
			inline void pslld( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PSLLD, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Shift Left Logical (MMX).
			inline void pslld( const CMMReg& dst, const CImm& src )
			{
				m_PU._emitInstruction( INST_PSLLD, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Shift Left Logical (MMX).
			inline void psllq( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PSLLQ, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Shift Left Logical (MMX).
			inline void psllq( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PSLLQ, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Shift Left Logical (MMX).
			inline void psllq( const CMMReg& dst, const CImm& src )
			{
				m_PU._emitInstruction( INST_PSLLQ, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Shift Left Logical (MMX).
			inline void psllw( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PSLLW, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Shift Left Logical (MMX).
			inline void psllw( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PSLLW, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Shift Left Logical (MMX).
			inline void psllw( const CMMReg& dst, const CImm& src )
			{
				m_PU._emitInstruction( INST_PSLLW, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Shift Right Arithmetic (MMX).
			inline void psrad( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PSRAD, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Shift Right Arithmetic (MMX).
			inline void psrad( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PSRAD, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Shift Right Arithmetic (MMX).
			inline void psrad( const CMMReg& dst, const CImm& src )
			{
				m_PU._emitInstruction( INST_PSRAD, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Shift Right Arithmetic (MMX).
			inline void psraw( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PSRAW, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Shift Right Arithmetic (MMX).
			inline void psraw( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PSRAW, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Shift Right Arithmetic (MMX).
			inline void psraw( const CMMReg& dst, const CImm& src )
			{
				m_PU._emitInstruction( INST_PSRAW, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Shift Right Logical (MMX).
			inline void psrld( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PSRLD, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Shift Right Logical (MMX).
			inline void psrld( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PSRLD, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Shift Right Logical (MMX).
			inline void psrld( const CMMReg& dst, const CImm& src )
			{
				m_PU._emitInstruction( INST_PSRLD, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Shift Right Logical (MMX).
			inline void psrlq( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PSRLQ, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Shift Right Logical (MMX).
			inline void psrlq( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PSRLQ, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Shift Right Logical (MMX).
			inline void psrlq( const CMMReg& dst, const CImm& src )
			{
				m_PU._emitInstruction( INST_PSRLQ, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Shift Right Logical (MMX).
			inline void psrlw( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PSRLW, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Shift Right Logical (MMX).
			inline void psrlw( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PSRLW, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Shift Right Logical (MMX).
			inline void psrlw( const CMMReg& dst, const CImm& src )
			{
				m_PU._emitInstruction( INST_PSRLW, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Subtract (MMX).
			inline void psubb( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PSUBB, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Subtract (MMX).
			inline void psubb( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PSUBB, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Subtract (MMX).
			inline void psubw( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PSUBW, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Subtract (MMX).
			inline void psubw( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PSUBW, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Subtract (MMX).
			inline void psubd( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PSUBD, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Subtract (MMX).
			inline void psubd( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PSUBD, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Subtract with Saturation (MMX).
			inline void psubsb( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PSUBSB, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Subtract with Saturation (MMX).
			inline void psubsb( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PSUBSB, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Subtract with Saturation (MMX).
			inline void psubsw( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PSUBSW, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Subtract with Saturation (MMX).
			inline void psubsw( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PSUBSW, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Subtract with Unsigned Saturation (MMX).
			inline void psubusb( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PSUBUSB, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Subtract with Unsigned Saturation (MMX).
			inline void psubusb( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PSUBUSB, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Packed Subtract with Unsigned Saturation (MMX).
			inline void psubusw( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction(INST_PSUBUSW, &dst, &src);
			}

			//------------------------------------------------------------------------------
			//Packed Subtract with Unsigned Saturation (MMX).
			inline void psubusw( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PSUBUSW, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Unpack High Packed Data (MMX).
			inline void punpckhbw( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PUNPCKHBW, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Unpack High Packed Data (MMX).
			inline void punpckhbw( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PUNPCKHBW, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Unpack High Packed Data (MMX).
			inline void punpckhwd( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PUNPCKHWD, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Unpack High Packed Data (MMX).
			inline void punpckhwd( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PUNPCKHWD, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Unpack High Packed Data (MMX).
			inline void punpckhdq( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PUNPCKHDQ, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Unpack High Packed Data (MMX).
			inline void punpckhdq( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PUNPCKHDQ, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Unpack High Packed Data (MMX).
			inline void punpcklbw( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PUNPCKLBW, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Unpack High Packed Data (MMX).
			inline void punpcklbw( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PUNPCKLBW, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Unpack High Packed Data (MMX).
			inline void punpcklwd( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PUNPCKLWD, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Unpack High Packed Data (MMX).
			inline void punpcklwd( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PUNPCKLWD, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Unpack High Packed Data (MMX).
			inline void punpckldq( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PUNPCKLDQ, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Unpack High Packed Data (MMX).
			inline void punpckldq( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PUNPCKLDQ, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Bitwise Exclusive OR (MMX).
			inline void pxor( const CMMReg& dst, const CMMReg& src )
			{
				m_PU._emitInstruction( INST_PXOR, &dst, &src );
			}

			//------------------------------------------------------------------------------
			//Bitwise Exclusive OR (MMX).
			inline void pxor( const CMMReg& dst, const CMem& src )
			{
				m_PU._emitInstruction( INST_PXOR, &dst, &src );
			}

			__QCS_DECLARE_NONCOPYABLE( CMMX );
		};

		//------------------------------------------------------------------------------
		class __QOR_INTERFACE( __ARCHQOR ) CMMXExt : public CMMX
		{
		public:

			//------------------------------------------------------------------------------
			CMMXExt( Cx86CPUCore& refCPU ) : CMMX( refCPU )
			{
			}

			//------------------------------------------------------------------------------
			virtual ~CMMXExt()
			{
			}

			__QCS_DECLARE_NONCOPYABLE( CMMXExt );
		};

	}//nsx86

}//nsArch

#endif//ARCHQOR_ISET_X86_MMX_H_2

