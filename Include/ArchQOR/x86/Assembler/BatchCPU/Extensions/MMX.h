//MMX.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef ARCHQOR_ISET_X86_MMX_H_2
#define ARCHQOR_ISET_X86_MMX_H_2

#include "CompilerQOR.h"
#include "../x86ISetExtension.h"

//------------------------------------------------------------------------------
namespace nsArch
{
	//------------------------------------------------------------------------------
	namespace nsx86
	{
		//------------------------------------------------------------------------------
		class __QOR_INTERFACE( __ARCHQOR ) CMMX : public Cx86ISetExtension
		{
		public:

			CMMX( Cx86CPUCore& refCPU );
			virtual ~CMMX();
			void emms();
			void movd( const CMem& dst, const CMMReg& src );
			void movd( const CGPReg& dst, const CMMReg& src );
			void movd( const CMMReg& dst, const CMem& src );
			void movd( const CMMReg& dst, const CGPReg& src );
			void movq( const CMMReg& dst, const CMMReg& src );
			void movq( const CMem& dst, const CMMReg& src );

#	if ( QOR_ARCH_WORDSIZE == 64 )
			void movq( const CGPReg& dst, const CMMReg& src );
#	endif

			void movq( const CMMReg& dst, const CMem& src );

#	if ( QOR_ARCH_WORDSIZE == 64 )
			void movq( const CMMReg& dst, const CGPReg& src );
#	endif
			void packsswb( const CMMReg& dst, const CMMReg& src );
			void packsswb( const CMMReg& dst, const CMem& src );
			void packssdw( const CMMReg& dst, const CMMReg& src );
			void packssdw( const CMMReg& dst, const CMem& src );
			void packuswb( const CMMReg& dst, const CMMReg& src );
			void packuswb( const CMMReg& dst, const CMem& src );
			void paddb( const CMMReg& dst, const CMMReg& src );
			void paddb( const CMMReg& dst, const CMem& src );
			void paddw( const CMMReg& dst, const CMMReg& src );
			void paddw( const CMMReg& dst, const CMem& src );
			void paddd( const CMMReg& dst, const CMMReg& src );
			void paddd( const CMMReg& dst, const CMem& src );
			void paddsb( const CMMReg& dst, const CMMReg& src );
			void paddsb( const CMMReg& dst, const CMem& src );
			void paddsw( const CMMReg& dst, const CMMReg& src );
			void paddsw( const CMMReg& dst, const CMem& src );
			void paddusb( const CMMReg& dst, const CMMReg& src );
			void paddusb( const CMMReg& dst, const CMem& src );
			void paddusw( const CMMReg& dst, const CMMReg& src );
			void paddusw( const CMMReg& dst, const CMem& src );
			void pand( const CMMReg& dst, const CMMReg& src );
			void pand( const CMMReg& dst, const CMem& src );
			void pandn( const CMMReg& dst, const CMMReg& src );
			void pandn( const CMMReg& dst, const CMem& src );
			void pcmpeqb( const CMMReg& dst, const CMMReg& src );
			void pcmpeqb( const CMMReg& dst, const CMem& src );
			void pcmpeqw( const CMMReg& dst, const CMMReg& src );
			void pcmpeqw( const CMMReg& dst, const CMem& src );
			void pcmpeqd( const CMMReg& dst, const CMMReg& src );
			void pcmpeqd( const CMMReg& dst, const CMem& src );
			void pcmpgtb( const CMMReg& dst, const CMMReg& src );
			void pcmpgtb( const CMMReg& dst, const CMem& src );
			void pcmpgtw( const CMMReg& dst, const CMMReg& src );
			void pcmpgtw( const CMMReg& dst, const CMem& src );
			void pcmpgtd( const CMMReg& dst, const CMMReg& src );
			void pcmpgtd( const CMMReg& dst, const CMem& src );
			void pmulhw( const CMMReg& dst, const CMMReg& src );
			void pmulhw( const CMMReg& dst, const CMem& src );
			void pmullw( const CMMReg& dst, const CMMReg& src );
			void pmullw( const CMMReg& dst, const CMem& src );
			void por( const CMMReg& dst, const CMMReg& src );
			void por( const CMMReg& dst, const CMem& src );
			void pmaddwd( const CMMReg& dst, const CMMReg& src );
			void pmaddwd( const CMMReg& dst, const CMem& src );
			void pslld( const CMMReg& dst, const CMMReg& src );
			void pslld( const CMMReg& dst, const CMem& src );
			void pslld( const CMMReg& dst, const CImm& src );
			void psllq( const CMMReg& dst, const CMMReg& src );
			void psllq( const CMMReg& dst, const CMem& src );
			void psllq( const CMMReg& dst, const CImm& src );
			void psllw( const CMMReg& dst, const CMMReg& src );
			void psllw( const CMMReg& dst, const CMem& src );
			void psllw( const CMMReg& dst, const CImm& src );
			void psrad( const CMMReg& dst, const CMMReg& src );
			void psrad( const CMMReg& dst, const CMem& src );
			void psrad( const CMMReg& dst, const CImm& src );
			void psraw( const CMMReg& dst, const CMMReg& src );
			void psraw( const CMMReg& dst, const CMem& src );
			void psraw( const CMMReg& dst, const CImm& src );
			void psrld( const CMMReg& dst, const CMMReg& src );
			void psrld( const CMMReg& dst, const CMem& src );
			void psrld( const CMMReg& dst, const CImm& src );
			void psrlq( const CMMReg& dst, const CMMReg& src );
			void psrlq( const CMMReg& dst, const CMem& src );
			void psrlq( const CMMReg& dst, const CImm& src );
			void psrlw( const CMMReg& dst, const CMMReg& src );
			void psrlw( const CMMReg& dst, const CMem& src );
			void psrlw( const CMMReg& dst, const CImm& src );
			void psubb( const CMMReg& dst, const CMMReg& src );
			void psubb( const CMMReg& dst, const CMem& src );
			void psubw( const CMMReg& dst, const CMMReg& src );
			void psubw( const CMMReg& dst, const CMem& src );
			void psubd( const CMMReg& dst, const CMMReg& src );
			void psubd( const CMMReg& dst, const CMem& src );
			void psubsb( const CMMReg& dst, const CMMReg& src );
			void psubsb( const CMMReg& dst, const CMem& src );
			void psubsw( const CMMReg& dst, const CMMReg& src );
			void psubsw( const CMMReg& dst, const CMem& src );
			void psubusb( const CMMReg& dst, const CMMReg& src );
			void psubusb( const CMMReg& dst, const CMem& src );
			void psubusw( const CMMReg& dst, const CMMReg& src );
			void psubusw( const CMMReg& dst, const CMem& src );
			void punpckhbw( const CMMReg& dst, const CMMReg& src );
			void punpckhbw( const CMMReg& dst, const CMem& src );
			void punpckhwd( const CMMReg& dst, const CMMReg& src );
			void punpckhwd( const CMMReg& dst, const CMem& src );
			void punpckhdq( const CMMReg& dst, const CMMReg& src );
			void punpckhdq( const CMMReg& dst, const CMem& src );
			void punpcklbw( const CMMReg& dst, const CMMReg& src );
			void punpcklbw( const CMMReg& dst, const CMem& src );
			void punpcklwd( const CMMReg& dst, const CMMReg& src );
			void punpcklwd( const CMMReg& dst, const CMem& src );
			void punpckldq( const CMMReg& dst, const CMMReg& src );
			void punpckldq( const CMMReg& dst, const CMem& src );
			void pxor( const CMMReg& dst, const CMMReg& src );
			void pxor( const CMMReg& dst, const CMem& src );

			__QCS_DECLARE_NONCOPYABLE( CMMX );
		};

		//------------------------------------------------------------------------------
		class __QOR_INTERFACE( __ARCHQOR ) CMMXExt : public CMMX
		{
		public:

			CMMXExt( Cx86CPUCore& refCPU );
			virtual ~CMMXExt();

			__QCS_DECLARE_NONCOPYABLE( CMMXExt );
		};

	}//nsx86

}//nsArch

#endif//ARCHQOR_ISET_X86_MMX_H_2

