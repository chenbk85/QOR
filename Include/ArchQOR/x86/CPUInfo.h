//CPUInfo.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef ARCHQOR_X86_CPUINFO_H_2
#define ARCHQOR_X86_CPUINFO_H_2

//------------------------------------------------------------------------------
namespace nsArch
{
	//------------------------------------------------------------------------------
	namespace nsx86
	{
		//------------------------------------------------------------------------------
		union CpuId
		{
			Cmp_unsigned__int32 i[ 4 ];//cpuid results array( eax, ebx, ecx and edx registers ).

			//------------------------------------------------------------------------------
			struct CpuIdResult
			{
				Cmp_unsigned__int32 eax;//cpuid result in eax register.
				Cmp_unsigned__int32 ebx;//cpuid result in ebx register.
				Cmp_unsigned__int32 ecx;//cpuid result in ecx register.
				Cmp_unsigned__int32 edx;//cpuid result in edx register.
			}result;
		};

		//------------------------------------------------------------------------------
		//Informations about host cpu.
		struct CpuInfo
		{
			char vendor[ 16 ];//Cpu short vendor string.
			char brand[64];

			Cmp_unsigned__int32 vendorId;//Cpu vendor id (see CpuInfo::VendorId enum).
			Cmp_unsigned__int32 family;//Cpu family ID.
			Cmp_unsigned__int32 model;//Cpu model ID.
			Cmp_unsigned__int32 stepping;//Cpu stepping.
			Cmp_unsigned__int32 numberOfProcessors;//Number of processors or cores.
			Cmp_unsigned__int32 features;//Cpu features bitfield, see CpuInfo::Feature enum.
			Cmp_unsigned__int32 bugs;//Cpu bugs bitfield, see CpuInfo::Bug enum).

			//------------------------------------------------------------------------------
			//Cpu vendor IDs.
			//values have only local meaning
			//------------------------------------------------------------------------------
			enum x86CPU_Vendor
			{
				CPU_Vendor_Unknown = 0,
				CPU_Vendor_INTEL = 1,
				CPU_Vendor_AMD = 2,
				CPU_Vendor_NSM = 3,				//National Semiconductor CPU vendor (applies also to Cyrix processors).
				CPU_Vendor_TRANSMETA = 4,
				CPU_Vendor_VIA = 5
			};

			//------------------------------------------------------------------------------
			//Extended informations for x86/x64 compatible processors.
			struct X86ExtendedInfo
			{
				Cmp_unsigned__int32 processorType;
				Cmp_unsigned__int32 brandIndex;
				Cmp_unsigned__int32 clFlushCacheLineSize;
				Cmp_unsigned__int32 logicalProcessors;
				Cmp_unsigned__int32 apicPhysicalId;
			};
			X86ExtendedInfo x86ExtendedInfo;

			//------------------------------------------------------------------------------
			//X86/X64 CPU features.
			enum Feature
			{
				Feature_RDTSC = 1U << 0,//Cpu has RDTSC instruction.
				Feature_RDTSCP = 1U << 1,//Cpu has RDTSCP instruction.
				Feature_CMOV = 1U << 2,//Cpu has CMOV instruction (conditional move)
				Feature_CMPXCHG8B = 1U << 3,//Cpu has CMPXCHG8B instruction
				Feature_CMPXCHG16B = 1U << 4,//Cpu has CMPXCHG16B instruction (64 bit processors)
				Feature_CLFLUSH = 1U << 5,//Cpu has CLFUSH instruction
				Feature_PREFETCH = 1U << 6,//Cpu has PREFETCH instruction
				Feature_LAHF_SAHF = 1U << 7,//Cpu supports LAHF and SAHF instrictions.
				Feature_FXSR = 1U << 8,//Cpu supports FXSAVE and FXRSTOR instructions.
				Feature_FFXSR = 1U << 9,//Cpu supports FXSAVE and FXRSTOR instruction optimizations (FFXSR).
				Feature_MMX = 1U << 10,//Cpu has MMX.
				Feature_MMXExt = 1U << 11,//Cpu has extended MMX.
				Feature_3dNow = 1U << 12,//Cpu has 3dNow!
				Feature_3dNowExt = 1U << 13,//Cpu has enchanced 3dNow!
				Feature_SSE = 1U << 14,//Cpu has SSE.
				
				Feature_SSE2 = 1U << 15,//Cpu has SSE2.
				Feature_SSE3 = 1U << 16,//Cpu has SSE3.
				Feature_SSSE3 = 1U << 17,//Cpu has Supplemental SSE3 (SSSE3).
				Feature_SSE4_A = 1U << 18,//Cpu has SSE4.A.
				Feature_SSE4_1 = 1U << 19,//Cpu has SSE4.1.
				Feature_SSE4_2 = 1U << 20,//Cpu has SSE4.2.
				//Feature_SSE5 = 1U << 22,//Cpu has SSE5.
				Feature_AVX = 1U << 22,//Cpu has AVX.
				Feature_MSSE = 1U << 23,//Cpu has Misaligned SSE (MSSE).
				Feature_MonitorMWait = 1U << 24,//Cpu supports MONITOR and MWAIT instructions.
				Feature_MOVBE = 1U << 25,//Cpu supports MOVBE instruction.
				Feature_POPCNT = 1U << 26,//Cpu supports POPCNT instruction.
				Feature_LZCNT  = 1U << 27,//Cpu supports LZCNT instruction.
				Feature_PCLMULDQ = 1U << 28,// Cpu supports PCLMULDQ set of instructions.
				Feature_MultiThreading = 1U << 29,//Cpu supports multithreading.
				Feature_ExecuteDisableBit = 1U << 30,//Cpu supports execute disable bit (execute protection).
				Feature_64Bit = 1U << 31//Cpu supports 64 bits.
			};

			//------------------------------------------------------------------------------
			//X86/X64 CPU bugs.
			enum Bug
			{
				Bug_AMDLockMB = 1U << 0
			};
		};

		//------------------------------------------------------------------------------
		class __QCMP_LOCAL CpuInfoStatic
		{
		public:

			//------------------------------------------------------------------------------
			struct CpuVendorInfo
			{
				Cmp_unsigned__int32 id;
				char text[ 12 ];
			};

			//------------------------------------------------------------------------------
			CpuInfoStatic() __QCMP_THROW
			{ 
				detectCpuInfo( &i ); 
			}

			void detectCpuInfo(CpuInfo* i) __QCMP_THROW;
			void simplifyBrandString( char* s );
			bool cpuVendorEq( const CpuVendorInfo& info, const char* vendorString );
			Cmp_unsigned__int32 detectNumberOfProcessors( void );
			void cpuid( Cmp_unsigned__int32 in, CpuId* out ) __QCMP_THROW;

			CpuInfo i;
		};

	}//nsx86

}//nsArch

#endif//ARCHQOR_X86_CPUINFO_H_2
