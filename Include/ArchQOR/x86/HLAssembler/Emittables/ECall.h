//ECall.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//

#ifndef ARCHQOR_X86PC_HLASSEMBLER_ECALL_H_2
#define ARCHQOR_X86PC_HLASSEMBLER_ECALL_H_2

#include "CompilerQOR.h"
#include "ArchQOR/Common/HLAssembler/Emittables/Emittable.h"
#include "../FunctionPrototype.h"
#include "ArchQOR/x86/Assembler/Operands/Variables/BaseVar.h"
#include "ArchQOR/x86/Assembler/Operands/Imm.h"
#include "ArchQOR/x86/Assembler/Operands/Operand.h"

//------------------------------------------------------------------------------
namespace nsArch
{
//------------------------------------------------------------------------------
namespace nsx86
{
	class __QOR_INTERFACE( __ARCHQOR ) Cx86HLAIntrinsics;
	class __QOR_INTERFACE( __ARCHQOR ) Cx86HLAContext;
	class __QOR_INTERFACE( __ARCHQOR ) CEFunction;
	class __QOR_INTERFACE( __ARCHQOR ) COperand;
	struct VarCallRecord;

	//------------------------------------------------------------------------------
	// Function call.
	class __QOR_INTERFACE( __ARCHQOR ) CECall : public nsArch::CEmittable
	{
	public:

		CECall( nsArch::CHighLevelAssemblerBase* c, CEFunction* caller, const COperand* target ) __QCMP_THROW;
		virtual ~CECall() __QCMP_THROW;
		virtual void prepare( CHLAssemblerContextBase& cc ) __QCMP_THROW;
		virtual nsArch::CEmittable* translate( CHLAssemblerContextBase& cc ) __QCMP_THROW;
		virtual int getMaxSize() const __QCMP_THROW;
		virtual bool tryUnuseVar( nsArch::CommonVarData* v ) __QCMP_THROW;

	protected:

		Cmp_unsigned__int32 _findTemporaryGpRegister( Cx86HLAContext& cc ) __QCMP_THROW;
		Cmp_unsigned__int32 _findTemporaryXmmRegister( Cx86HLAContext& cc ) __QCMP_THROW;
		VarData* _getOverlappingVariable( Cx86HLAContext& cc, const CFunctionPrototype::Argument& argType ) const __QCMP_THROW;
		void _moveAllocatedVariableToStack( Cx86HLAContext& cc, VarData* vdata, const CFunctionPrototype::Argument& argType ) __QCMP_THROW;
		void _moveSpilledVariableToStack( Cx86HLAContext& cc, VarData* vdata, const CFunctionPrototype::Argument& argType, Cmp_unsigned__int32 temporaryGpReg, Cmp_unsigned__int32 temporaryXmmReg ) __QCMP_THROW;
		void _moveSrcVariableToRegister( Cx86HLAContext& cc, VarData* vdata, const CFunctionPrototype::Argument& argType ) __QCMP_THROW;

	public:

		//------------------------------------------------------------------------------
		// Get function prototype.
		inline const CFunctionPrototype& getPrototype() const __QCMP_THROW
		{
			return m_FunctionPrototype;
		}

		//------------------------------------------------------------------------------
		// Set function prototype.
		inline void setPrototype( Cmp_unsigned__int32 cconv, const CFunctionDefinition& def ) __QCMP_THROW
		{
			_setPrototype( cconv, def.getArguments(), def.getArgumentsCount(), def.getReturnValue() );
		}

		// Set function prototype (internal).
		void _setPrototype( Cmp_unsigned__int32 callingConvention, const Cmp_unsigned__int32* arguments, Cmp_unsigned__int32 argumentsCount, Cmp_unsigned__int32 returnValue ) __QCMP_THROW;
		bool setArgument( Cmp_unsigned__int32 i, const COperand* pArg ) __QCMP_THROW;
		//bool setArgument( Cmp_unsigned__int32 i, const CBaseVar& var ) __QCMP_THROW;
		//bool setArgument( Cmp_unsigned__int32 i, const CImm& imm ) __QCMP_THROW;
		bool setReturn( const COperand& first, const COperand& second = COperand() ) __QCMP_THROW;

		//------------------------------------------------------------------------------
		// Get caller.
		inline CEFunction* getCaller() const __QCMP_THROW
		{
			return m_pCaller;
		}

		//------------------------------------------------------------------------------
		// Get operand (function address).
		inline COperand* getTarget() __QCMP_THROW
		{
			return m_pTarget;
		}

		//------------------------------------------------------------------------------
		inline const COperand* getTarget() const __QCMP_THROW
		{
			return m_pTarget;
		}

	protected:

		CFunctionPrototype m_FunctionPrototype;					// Function prototype.
		CEFunction* m_pCaller;									// Callee (the function that calls me).
		COperand** m_paArgs;									// Arguments (operands).
		COperand* m_pTarget;									// Operand (address of function, register, label, ...)
		COperand* m_apRet[ 2 ];									// Return value (operands)

		Cmp_unsigned__int32 m_GPParams;							// Mask of GP registers used as function arguments.
		Cmp_unsigned__int32 m_MMParams;							// Mask of MM registers used as function arguments.
		Cmp_unsigned__int32 m_XmmParams;						// Mask of XMM registers used as function arguments.
		Cmp_unsigned__int32 m_uiVariablesCount;					// Variables count.

		VarCallRecord* m_pVariables;							// Variables (extracted from operands).
		VarCallRecord* m_aArgumentToVarRecord[ FUNC_MAX_ARGS ];	// Argument index to VarCallRecord.

	private:

		CECall();
		CECall( const CECall& );

		friend class Cx86HLAssembler;
	};

}//nsx86
}//nsArch

#endif//ARCHQOR_X86PC_HLASSEMBLER_ECALL_H_2
