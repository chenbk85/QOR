//EInstruction.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

// Emittable that represents single instruction and its operands.

#ifndef ARCHQOR_X86PC_HLASSEMBLER_EINSTRUCTION_H_2
#define ARCHQOR_X86PC_HLASSEMBLER_EINSTRUCTION_H_2

#include "CompilerQOR.h"
#include "ArchQOR/Common/HLAssembler/Emittables/Emittable.h"
#include "ArchQOR/x86/Assembler/Operands/Operand.h"

//------------------------------------------------------------------------------
namespace nsArch
{
//------------------------------------------------------------------------------
namespace nsx86
{		
	class __QOR_INTERFACE( __ARCHQOR ) Cx86HLAIntrinsics;
	class __QOR_INTERFACE( __ARCHQOR ) Cx86HLAContext;
	struct VarAllocRecord;
	struct VarData;

	//------------------------------------------------------------------------------
	class __QOR_INTERFACE( __ARCHQOR ) CEInstruction : public nsArch::CEmittable
	{
	public:

		CEInstruction( Cx86HLAIntrinsics* c, Cmp_unsigned__int32 code, COperand** operandsData, Cmp_unsigned__int32 operandsCount ) __QCMP_THROW;
		virtual ~CEInstruction() __QCMP_THROW;

		virtual void prepare( CHLAssemblerContextBase& cc ) __QCMP_THROW;
		virtual nsArch::CEmittable* translate( CHLAssemblerContextBase& cc ) __QCMP_THROW;
		virtual void emit( CHighLevelAssemblerBase& a ) __QCMP_THROW;

		virtual int getMaxSize() const __QCMP_THROW;		

		//------------------------------------------------------------------------------
		// Get whether the instruction is special.
		inline bool isSpecial() const __QCMP_THROW 
		{ 
			return m_bIsSpecial; 
		}

		//------------------------------------------------------------------------------
		// Get whether the instruction is FPU.
		inline bool isFPU() const __QCMP_THROW 
		{ 
			return m_bIsFPU; 
		}

		//------------------------------------------------------------------------------
		// Get instruction code, see INST_CODE.
		inline Cmp_unsigned__int32 getCode() const __QCMP_THROW 
		{ 
			return m_uiCode; 
		}

		//------------------------------------------------------------------------------
		// Set instruction code to code.
		// Please do not modify instruction code if you are not know what you are
		// doing. Incorrect instruction code or operands can raise assertion() at
		// runtime.
		inline void setCode( Cmp_unsigned__int32 code ) __QCMP_THROW 
		{ 
			m_uiCode = code; 
		}

		//------------------------------------------------------------------------------
		// Get count of operands in operands array (number between 0 to 2 inclusive).
		inline Cmp_unsigned__int32 getOperandsCount() const __QCMP_THROW 
		{ 
			return m_uiOperandsCount; 
		}

		//------------------------------------------------------------------------------
		// Get operands array (3 operands total).
		inline COperand** getOperands() __QCMP_THROW 
		{ 
			return m_pOperands; 
		}
		
		//------------------------------------------------------------------------------
		// Get operands array (3 operands total).
		inline const COperand* const* getOperands() const __QCMP_THROW 
		{ 
			return m_pOperands; 
		}

		//------------------------------------------------------------------------------
		// Get memory operand.
		inline CMem* getMemOp() __QCMP_THROW 
		{
			return m_pMemOp; 
		}
		
		//------------------------------------------------------------------------------
		// Set memory operand.
		inline void setMemOp( CMem* op ) __QCMP_THROW 
		{ 
			m_pMemOp = op; 
		}

		// Variables

		//------------------------------------------------------------------------------
		// Get count of variables in instruction operands (and in variables array).
		inline Cmp_unsigned__int32 getVariablesCount() const __QCMP_THROW 
		{ 
			return m_uiVariablesCount; 
		}

		//------------------------------------------------------------------------------
		// Get operands array (3 operands total).
		inline VarAllocRecord* getVariables() __QCMP_THROW 
		{ 
			return m_pVariables; 
		}
		
		//------------------------------------------------------------------------------
		// Get operands array (3 operands total).
		inline const VarAllocRecord* getVariables() const __QCMP_THROW 
		{ 
			return m_pVariables; 
		}	

		//------------------------------------------------------------------------------
		// Jump
		// Get possible jump target.
		// If this instruction is conditional or normal jump then return value is label location (ETarget instance), otherwise return value is NULL.
		virtual CETarget* getJumpTarget() const __QCMP_THROW;
		virtual bool tryUnuseVar( nsArch::CommonVarData* v ) __QCMP_THROW;

	protected:
				
		void getVariable( VarData* _candidate, VarAllocRecord*& cur, VarAllocRecord*& var );

		Cmp_unsigned__int32 m_uiCode;				// Instruction code, see INST_CODE.
		Cmp_unsigned__int32 m_uiEmitOptions;		// Emit options, see EMIT_OPTIONS.
		Cmp_unsigned__int32 m_uiOperandsCount;		// Operands count.
		Cmp_unsigned__int32 m_uiVariablesCount;		// Variables count.
		COperand** m_pOperands;						// Operands.
		CMem* m_pMemOp;								// Memory operand (if instruction contains any).
		VarAllocRecord* m_pVariables;				// Variables (extracted from operands).
		bool m_bIsSpecial;							// Whether the instruction is special.
		bool m_bIsFPU;								// Whether the instruction is FPU.
		bool m_bIsGPBLoUsed;						// Whether the one of the operands is GPB.Lo register.
		bool m_bIsGPBHiUsed;						// Whether the one of the operands is GPB.Hi register.

	private:

		__QCS_DECLARE_NONCOPYABLE( CEInstruction );
	};

}//nsx86
}//nsArch

#endif//ARCHQOR_X86PC_HLASSEMBLER_EINSTRUCTION_H_2
