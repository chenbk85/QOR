//Cx86HLAIntrinsics.h

// Copyright (c) 2008-2010, Petr Kobalicek <kobalicek.petr@gmail.com>
// Copyright (c) Querysoft Limited 2012
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

// 

#ifndef ARCHQOR_X86PC_HLASSEMBLER_INTRINSICS_H_2
#define ARCHQOR_X86PC_HLASSEMBLER_INTRINSICS_H_2

#include "CompilerQOR.h"
#include "x86HLAssembler.h"
#include "ArchQOR/x86/Assembler/Operands/Registers/MMReg.h"
#include "ArchQOR/x86/Assembler/Operands/Registers/XMMReg.h"
#include "ArchQOR/x86/Assembler/Operands/Registers/SegmentReg.h"
#include "ArchQOR/x86/Assembler/Operands/Mem.h"
#include "ArchQOR/x86/Assembler/Operands/Variables/GPVar.h"
#include "ArchQOR/x86/Assembler/Operands/Variables/MMVar.h"
#include "ArchQOR/x86/Assembler/Operands/Variables/XMMVar.h"
#include "ArchQOR/x86/Assembler/Operands/Imm.h"
#include "ArchQOR/x86/Assembler/Operands/Operand.h"


// Mark methods not supported by Compiler. These methods are
// usually used only in function prologs/epilogs or to manage stack.
#define ASMJIT_NOT_SUPPORTED_BY_COMPILER 0

//------------------------------------------------------------------------------
namespace nsArch
{
//------------------------------------------------------------------------------
namespace nsx86
{		
	//------------------------------------------------------------------------------
	// Implementation of Compiler intrinsics.
	class __QOR_INTERFACE( __ARCHOR ) Cx86HLAIntrinsics : public Cx86HLAssembler
	{

	public:

		// Special X86 instructions:
		// - cpuid,
		// - cbw, cwde, cdqe,
		// - cmpxchg
		// - cmpxchg8b, cmpxchg16b,
		// - daa, das,
		// - imul, mul, idiv, div,
		// - mov_ptr
		// - lahf, sahf
		// - maskmovq, maskmovdqu
		// - enter, leave
		// - ret
		// - monitor, mwait
		// - pop, popad, popfd, popfq,
		// - push, pushad, pushfd, pushfq
		// - rcl, rcr, rol, ror, sal, sar, shl, shr
		// - shld, shrd
		// - rdtsc. rdtscp
		// - lodsb, lodsd, lodsq, lodsw
		// - movsb, movsd, movsq, movsw
		// - stosb, stosd, stosq, stosw
		// - cmpsb, cmpsd, cmpsq, cmpsw
		// - scasb, scasd, scasq, scasw
		//
		// Special X87 instructions:
		// - fisttp

		//------------------------------------------------------------------------------		
		inline Cx86HLAIntrinsics( nsArch::CCodeGeneratorBase* codeGenerator ) __QCMP_THROW :  Cx86HLAssembler( codeGenerator )
		{
		}

		inline void db( Cmp_unsigned__int8 x )__QCMP_THROW;
		inline void dw( Cmp_unsigned__int16 x )__QCMP_THROW;
		inline void dd( Cmp_unsigned__int32 x )__QCMP_THROW;
		inline void dq( Cmp_unsigned__int64 x )__QCMP_THROW;
		inline void dint8( Cmp__int8 x )__QCMP_THROW;
		inline void duint8( Cmp_unsigned__int8 x )__QCMP_THROW;
		inline void dint16( Cmp__int16 x )__QCMP_THROW;
		inline void duint16( Cmp_unsigned__int16 x )__QCMP_THROW;
		inline void dint32( Cmp__int32 x )__QCMP_THROW;
		inline void duint32( Cmp_unsigned__int32 x )__QCMP_THROW;
		inline void dint64( Cmp__int64 x )__QCMP_THROW;
		inline void duint64( Cmp_unsigned__int64 x )__QCMP_THROW;
		inline void dsysint( Cmp_int_ptr x )__QCMP_THROW;
		inline void dsysuint( Cmp_uint_ptr x ) __QCMP_THROW;
		inline void dfloat( float x ) __QCMP_THROW;
		inline void ddouble( double x ) __QCMP_THROW;
		inline void dptr( void* x ) __QCMP_THROW; 
		inline void dmm( const MMData& x ) __QCMP_THROW; 
		inline void dxmm( const XMMData& x ) __QCMP_THROW; 
		inline void data( const void* data, Cmp_uint_ptr size ) __QCMP_THROW ;

		//------------------------------------------------------------------------------
		// Add data in a given structure instance to the instuction stream.
		template< typename T >
		inline void dstruct( const T& x ) __QCMP_THROW 
		{ 
			embed( &x, sizeof(T) ); 
		}

		// These emitters are used by custom HLA code (register alloc / spill, prolog / epilog generator, ...).

		inline void emit( Cmp_unsigned__int32 code ) __QCMP_THROW;
		inline void emit( Cmp_unsigned__int32 code, const COperand* po0 ) __QCMP_THROW;
		inline void emit( Cmp_unsigned__int32 code, const COperand* po0, const COperand* po1 ) __QCMP_THROW;
		inline void emit( Cmp_unsigned__int32 code, const COperand* po0, const COperand* po1, const COperand* po2 ) __QCMP_THROW;

		// X86 Instructions

		inline void adc( const CGPVar& dst, const CGPVar& src );
		inline void adc( const CGPVar& dst, const CMem& src );
		inline void adc( const CGPVar& dst, const CImm& src );
		inline void adc( const CMem& dst, const CGPVar& src );
		inline void adc( const CMem& dst, const CImm& src );
		inline void add( const CGPVar& dst, const CGPVar& src );
		inline void add( const CGPVar& dst, const CMem& src );
		inline void add( const CGPVar& dst, const CImm& src );
		inline void add( const CMem& dst, const CGPVar& src );
		inline void add( const CMem& dst, const CImm& src );
		inline void and_(const CGPVar& dst, const CGPVar& src);
		inline void and_(const CGPVar& dst, const CMem& src);
		inline void and_( const CGPVar& dst, const CImm& src );
		inline void and_( const CMem& dst, const CGPVar& src );
		inline void and_( const CMem& dst, const CImm& src );
		inline void bsf( const CGPVar& dst, const CGPVar& src );
		inline void bsf( const CGPVar& dst, const CMem& src );
		inline void bsr( const CGPVar& dst, const CGPVar& src );
		inline void bsr( const CGPVar& dst, const CMem& src );
		inline void bswap( const CGPVar& dst );
		inline void bt( const CGPVar& dst, const CGPVar& src );
		inline void bt( const CGPVar& dst, const CImm& src );
		inline void bt( const CMem& dst, const CGPVar& src );
		inline void bt( const CMem& dst, const CImm& src );
		inline void btc( const CGPVar& dst, const CGPVar& src );
		inline void btc( const CGPVar& dst, const CImm& src );
		inline void btc( const CMem& dst, const CGPVar& src );
		inline void btc( const CMem& dst, const CImm& src );
		inline void btr( const CGPVar& dst, const CGPVar& src );
		inline void btr( const CGPVar& dst, const CImm& src );
		inline void btr( const CMem& dst, const CGPVar& src );
		inline void btr( const CMem& dst, const CImm& src );
		inline void bts( const CGPVar& dst, const CGPVar& src );
		inline void bts( const CGPVar& dst, const CImm& src );
		inline void bts( const CMem& dst, const CGPVar& src );
		inline void bts( const CMem& dst, const CImm& src );
		inline CECall* call( const CGPVar& dst );
		inline CECall* call( const CMem& dst );
		inline CECall* call( const CImm& dst );
		inline CECall* call( void* dst );
		inline CECall* call( const CLabel& label );
		inline void cbw( const CGPVar& dst );
		inline void cwde( const CGPVar& dst );
#if ( QOR_ARCH_WORDSIZE == 64 )
		inline void cdqe( const CGPVar& dst );
#endif
		inline void clc();
		inline void cld();
		inline void cmc();
		inline void cmov( CONDITION cc, const CGPVar& dst, const CGPVar& src );
		inline void cmov( CONDITION cc, const CGPVar& dst, const CMem& src );
		inline void cmova( const CGPVar& dst, const CGPVar& src ); 
		inline void cmova( const CGPVar& dst, const CMem& src );   
		inline void cmovae ( const CGPVar& dst, const CGPVar& src ); 
		inline void cmovae ( const CGPVar& dst, const CMem& src );   
		inline void cmovb( const CGPVar& dst, const CGPVar& src ); 
		inline void cmovb( const CGPVar& dst, const CMem& src );   
		inline void cmovbe( const CGPVar& dst, const CGPVar& src ); 
		inline void cmovbe( const CGPVar& dst, const CMem& src );   
		inline void cmovc( const CGPVar& dst, const CGPVar& src ); 
		inline void cmovc( const CGPVar& dst, const CMem& src );   
		inline void cmove( const CGPVar& dst, const CGPVar& src ); 
		inline void cmove( const CGPVar& dst, const CMem& src );   
		inline void cmovg( const CGPVar& dst, const CGPVar& src ); 
		inline void cmovg( const CGPVar& dst, const CMem& src );   
		inline void cmovge( const CGPVar& dst, const CGPVar& src ); 
		inline void cmovge( const CGPVar& dst, const CMem& src );   
		inline void cmovl( const CGPVar& dst, const CGPVar& src ); 
		inline void cmovl( const CGPVar& dst, const CMem& src );   
		inline void cmovle( const CGPVar& dst, const CGPVar& src ); 
		inline void cmovle( const CGPVar& dst, const CMem& src );   
		inline void cmovna( const CGPVar& dst, const CGPVar& src ); 
		inline void cmovna( const CGPVar& dst, const CMem& src );   
		inline void cmovnae( const CGPVar& dst, const CGPVar& src ); 
		inline void cmovnae( const CGPVar& dst, const CMem& src );   
		inline void cmovnb( const CGPVar& dst, const CGPVar& src ); 
		inline void cmovnb( const CGPVar& dst, const CMem& src );   
		inline void cmovnbe( const CGPVar& dst, const CGPVar& src ); 
		inline void cmovnbe( const CGPVar& dst, const CMem& src );   
		inline void cmovnc( const CGPVar& dst, const CGPVar& src ); 
		inline void cmovnc( const CGPVar& dst, const CMem& src );   
		inline void cmovne( const CGPVar& dst, const CGPVar& src ); 
		inline void cmovne( const CGPVar& dst, const CMem& src );   
		inline void cmovng( const CGPVar& dst, const CGPVar& src ); 
		inline void cmovng( const CGPVar& dst, const CMem& src );   
		inline void cmovnge( const CGPVar& dst, const CGPVar& src ); 
		inline void cmovnge( const CGPVar& dst, const CMem& src );   
		inline void cmovnl( const CGPVar& dst, const CGPVar& src ); 
		inline void cmovnl( const CGPVar& dst, const CMem& src );   
		inline void cmovnle( const CGPVar& dst, const CGPVar& src ); 
		inline void cmovnle( const CGPVar& dst, const CMem& src );   
		inline void cmovno( const CGPVar& dst, const CGPVar& src ); 
		inline void cmovno( const CGPVar& dst, const CMem& src );   
		inline void cmovnp( const CGPVar& dst, const CGPVar& src ); 
		inline void cmovnp( const CGPVar& dst, const CMem& src );   
		inline void cmovns( const CGPVar& dst, const CGPVar& src ); 
		inline void cmovns( const CGPVar& dst, const CMem& src );   
		inline void cmovnz( const CGPVar& dst, const CGPVar& src ); 
		inline void cmovnz( const CGPVar& dst, const CMem& src );   
		inline void cmovo( const CGPVar& dst, const CGPVar& src ); 
		inline void cmovo( const CGPVar& dst, const CMem& src );   
		inline void cmovp( const CGPVar& dst, const CGPVar& src ); 
		inline void cmovp( const CGPVar& dst, const CMem& src );   
		inline void cmovpe( const CGPVar& dst, const CGPVar& src ); 
		inline void cmovpe( const CGPVar& dst, const CMem& src );   
		inline void cmovpo( const CGPVar& dst, const CGPVar& src ); 
		inline void cmovpo( const CGPVar& dst, const CMem& src );   
		inline void cmovs( const CGPVar& dst, const CGPVar& src); 
		inline void cmovs  (const CGPVar& dst, const CMem& src);   
		inline void cmovz  (const CGPVar& dst, const CGPVar& src); 
		inline void cmovz  (const CGPVar& dst, const CMem& src);   
		inline void cmp(const CGPVar& dst, const CGPVar& src);
		inline void cmp(const CGPVar& dst, const CMem& src);
		inline void cmp(const CGPVar& dst, const CImm& src);
		inline void cmp(const CMem& dst, const CGPVar& src);
		inline void cmp(const CMem& dst, const CImm& src);

		inline void cmpxchg( const CGPVar cmp_1_eax, const CGPVar& cmp_2, const CGPVar& src );
		inline void cmpxchg( const CGPVar cmp_1_eax, const CMem& cmp_2, const CGPVar& src );

		inline void cmpxchg8b( const CGPVar& cmp_edx, const CGPVar& cmp_eax, const CGPVar& cmp_ecx, const CGPVar& cmp_ebx, const CMem& dst );

#if ( QOR_ARCH_WORDSIZE == 64 )
		inline void cmpxchg16b( const CGPVar& cmp_edx, const CGPVar& cmp_eax, const CGPVar& cmp_ecx, const CGPVar& cmp_ebx, const CMem& dst );
#endif // ASMJIT_X64

		// CPU Identification (i486).
		inline void cpuid( const CGPVar& inout_eax, const CGPVar& out_ebx, const CGPVar& out_ecx, const CGPVar& out_edx);

#if	( QOR_ARCH_WORDSIZE == 32 )
		inline void daa( const CGPVar& dst );
#endif

#if	( QOR_ARCH_WORDSIZE == 32 )
		inline void das( const CGPVar& dst );
#endif // ( QOR_ARCH_WORDSIZE == 32 )

		inline void dec( const CGPVar& dst );
		inline void dec( const CMem& dst );
		inline void div( const CGPVar& dst_rem, const CGPVar& dst_quot, const CGPVar& src );
		inline void div( const CGPVar& dst_rem, const CGPVar& dst_quot, const CMem& src );

#if ASMJIT_NOT_SUPPORTED_BY_COMPILER
		inline void enter( const CImm& imm16, const CImm& imm8 );
#endif // ASMJIT_NOT_SUPPORTED_BY_COMPILER

		inline void idiv( const CGPVar& dst_rem, const CGPVar& dst_quot, const CGPVar& src );
		inline void idiv( const CGPVar& dst_rem, const CGPVar& dst_quot, const CMem& src );
		inline void imul( const CGPVar& dst_hi, const CGPVar& dst_lo, const CGPVar& src );
		inline void imul( const CGPVar& dst_hi, const CGPVar& dst_lo, const CMem& src );
		inline void imul(const CGPVar& dst, const CGPVar& src);
		inline void imul(const CGPVar& dst, const CMem& src);
		inline void imul(const CGPVar& dst, const CImm& src);
		inline void imul(const CGPVar& dst, const CGPVar& src, const CImm& imm);
		inline void imul(const CGPVar& dst, const CMem& src, const CImm& imm);
		inline void inc(const CGPVar& dst);
		inline void inc(const CMem& dst);
		inline void int3();
		inline void j( CONDITION cc, const CLabel& label, Cmp_unsigned__int32 hint = HINT_NONE );
		inline void ja( const CLabel& label, Cmp_unsigned__int32 hint = HINT_NONE ); 
		inline void jae( const CLabel& label, Cmp_unsigned__int32 hint = HINT_NONE ); 
		inline void jb( const CLabel& label, Cmp_unsigned__int32 hint = HINT_NONE ); 
		inline void jbe( const CLabel& label, Cmp_unsigned__int32 hint = HINT_NONE ); 
		inline void jc( const CLabel& label, Cmp_unsigned__int32 hint = HINT_NONE ); 
		inline void je( const CLabel& label, Cmp_unsigned__int32 hint = HINT_NONE ); 
		inline void jg( const CLabel& label, Cmp_unsigned__int32 hint = HINT_NONE ); 
		inline void jge( const CLabel& label, Cmp_unsigned__int32 hint = HINT_NONE ); 
		inline void jl( const CLabel& label, Cmp_unsigned__int32 hint = HINT_NONE ); 
		inline void jle( const CLabel& label, Cmp_unsigned__int32 hint = HINT_NONE ); 
		inline void jna( const CLabel& label, Cmp_unsigned__int32 hint = HINT_NONE ); 
		inline void jnae( const CLabel& label, Cmp_unsigned__int32 hint = HINT_NONE ); 
		inline void jnb( const CLabel& label, Cmp_unsigned__int32 hint = HINT_NONE ); 
		inline void jnbe( const CLabel& label, Cmp_unsigned__int32 hint = HINT_NONE ); 
		inline void jnc( const CLabel& label, Cmp_unsigned__int32 hint = HINT_NONE ); 
		inline void jne( const CLabel& label, Cmp_unsigned__int32 hint = HINT_NONE ); 
		inline void jng( const CLabel& label, Cmp_unsigned__int32 hint = HINT_NONE ); 
		inline void jnge( const CLabel& label, Cmp_unsigned__int32 hint = HINT_NONE ); 
		inline void jnl( const CLabel& label, Cmp_unsigned__int32 hint = HINT_NONE ); 
		inline void jnle( const CLabel& label, Cmp_unsigned__int32 hint = HINT_NONE ); 
		inline void jno( const CLabel& label, Cmp_unsigned__int32 hint = HINT_NONE ); 
		inline void jnp( const CLabel& label, Cmp_unsigned__int32 hint = HINT_NONE ); 
		inline void jns( const CLabel& label, Cmp_unsigned__int32 hint = HINT_NONE ); 
		inline void jnz( const CLabel& label, Cmp_unsigned__int32 hint = HINT_NONE ); 
		inline void jo( const CLabel& label, Cmp_unsigned__int32 hint = HINT_NONE ); 
		inline void jp( const CLabel& label, Cmp_unsigned__int32 hint = HINT_NONE ); 
		inline void jpe( const CLabel& label, Cmp_unsigned__int32 hint = HINT_NONE ); 
		inline void jpo( const CLabel& label, Cmp_unsigned__int32 hint = HINT_NONE ); 
		inline void js( const CLabel& label, Cmp_unsigned__int32 hint = HINT_NONE ); 
		inline void jz( const CLabel& label, Cmp_unsigned__int32 hint = HINT_NONE ); 
		inline void jmp( const CGPVar& dst );
		inline void jmp( const CMem& dst );
		inline void jmp( const CImm& dst );
		inline void jmp( void* dst );
		inline void jmp( const CLabel& label );
		inline void lea( const CGPVar& dst, const CMem& src );
//#if ASMJIT_NOT_SUPPORTED_BY_COMPILER
		inline void leave();
//#endif // ASMJIT_NOT_SUPPORTED_BY_COMPILER

		inline void mov( const CGPVar& dst, const CGPVar& src );
		inline void mov( const CGPVar& dst, const CMem& src );
		inline void mov( const CGPVar& dst, const CImm& src );
		inline void mov( const CMem& dst, const CGPVar& src );
		inline void mov( const CMem& dst, const CImm& src );
		inline void mov( const CGPVar& dst, const CSegmentReg& src );
		inline void mov( const CMem& dst, const CSegmentReg& src );
		inline void mov( const CSegmentReg& dst, const CGPVar& src );
		inline void mov( const CSegmentReg& dst, const CMem& src );
		inline void mov_ptr( const CGPVar& dst, void* src );
		inline void mov_ptr( void* dst, const CGPVar& src );
		void movsx( const CGPVar& dst, const CGPVar& src );
		void movsx( const CGPVar& dst, const CMem& src );

#if ( QOR_ARCH_WORDSIZE == 64 )
		inline void movsxd( const CGPVar& dst, const CGPVar& src );
		inline void movsxd( const CGPVar& dst, const CMem& src );
#endif // ASMJIT_X64

		inline void movzx( const CGPVar& dst, const CGPVar& src );
		inline void movzx( const CGPVar& dst, const CMem& src );
		inline void mul( const CGPVar& dst_hi, const CGPVar& dst_lo, const CGPVar& src );
		inline void mul( const CGPVar& dst_hi, const CGPVar& dst_lo, const CMem& src );
		inline void neg( const CGPVar& dst );
		inline void neg( const CMem& dst );
		inline void nop();
		inline void not_( const CGPVar& dst );
		inline void not_( const CMem& dst );
		inline void or_( const CGPVar& dst, const CGPVar& src );
		inline void or_( const CGPVar& dst, const CMem& src );
		inline void or_( const CGPVar& dst, const CImm& src );
		inline void or_( const CMem& dst, const CGPVar& src );
		inline void or_( const CMem& dst, const CImm& src );
		inline void pop( const CGPVar& dst );
		inline void pop( const CMem& dst );

#if	( QOR_ARCH_WORDSIZE == 32 )
		inline void popad();
#endif // ( QOR_ARCH_WORDSIZE == 32 )

		inline void popf();
		
#if	( QOR_ARCH_WORDSIZE == 32 )

		inline void popfd(); 
#else

		inline void popfq(); 
#endif

		inline void push( const CGPVar& src );
		inline void push( const CMem& src );
		inline void push( const CImm& src );

#if	( QOR_ARCH_WORDSIZE == 32 )
		inline void pushad();
#endif // ( QOR_ARCH_WORDSIZE == 32 )

		inline void pushf();

#if	( QOR_ARCH_WORDSIZE == 32 )
		inline void pushfd(); 
#else
		inline void pushfq() ;
#endif // ( QOR_ARCH_WORDSIZE == 32 )

		inline void rcl( const CGPVar& dst, const CGPVar& src );
		inline void rcl( const CGPVar& dst, const CImm& src );
		inline void rcl( const CMem& dst, const CGPVar& src );
		inline void rcl( const CMem& dst, const CImm& src );
		inline void rcr( const CGPVar& dst, const CGPVar& src );
		inline void rcr( const CGPVar& dst, const CImm& src );
		inline void rcr( const CMem& dst, const CGPVar& src );
		inline void rcr( const CMem& dst, const CImm& src );
		inline void rdtsc( const CGPVar& dst_edx, const CGPVar& dst_eax );
		inline void rdtscp( const CGPVar& dst_edx, const CGPVar& dst_eax, const CGPVar& dst_ecx );
		inline void rep_lodsb( const CGPVar& dst_val, const CGPVar& src_addr, const CGPVar& cnt_ecx );
		inline void rep_lodsd( const CGPVar& dst_val, const CGPVar& src_addr, const CGPVar& cnt_ecx );
		
#if ( QOR_ARCH_WORDSIZE == 64 )

		inline void rep_lodsq( const CGPVar& dst_val, const CGPVar& src_addr, const CGPVar& cnt_ecx );
#endif // ASMJIT_X64

		inline void rep_lodsw( const CGPVar& dst_val, const CGPVar& src_addr, const CGPVar& cnt_ecx );
		inline void rep_movsb( const CGPVar& dst_addr, const CGPVar& src_addr, const CGPVar& cnt_ecx );
		inline void rep_movsd( const CGPVar& dst_addr, const CGPVar& src_addr, const CGPVar& cnt_ecx );

#if ( QOR_ARCH_WORDSIZE == 64 )

		inline void rep_movsq( const CGPVar& dst_addr, const CGPVar& src_addr, const CGPVar& cnt_ecx );
#endif // ASMJIT_X64

		inline void rep_movsw( const CGPVar& dst_addr, const CGPVar& src_addr, const CGPVar& cnt_ecx );
		inline void rep_stosb( const CGPVar& dst_addr, const CGPVar& src_val, const CGPVar& cnt_ecx );
		inline void rep_stosd( const CGPVar& dst_addr, const CGPVar& src_val, const CGPVar& cnt_ecx );

#if ( QOR_ARCH_WORDSIZE == 64 )

		inline void rep_stosq( const CGPVar& dst_addr, const CGPVar& src_val, const CGPVar& cnt_ecx );

#endif // ASMJIT_X64

		inline void rep_stosw( const CGPVar& dst_addr, const CGPVar& src_val, const CGPVar& cnt_ecx );
		inline void repe_cmpsb( const CGPVar& cmp1_addr, const CGPVar& cmp2_addr, const CGPVar& cnt_ecx );
		inline void repe_cmpsd( const CGPVar& cmp1_addr, const CGPVar& cmp2_addr, const CGPVar& cnt_ecx );

#if ( QOR_ARCH_WORDSIZE == 64 )

		inline void repe_cmpsq( const CGPVar& cmp1_addr, const CGPVar& cmp2_addr, const CGPVar& cnt_ecx );
#endif // ASMJIT_X64

		inline void repe_cmpsw( const CGPVar& cmp1_addr, const CGPVar& cmp2_addr, const CGPVar& cnt_ecx );
		inline void repe_scasb( const CGPVar& cmp1_addr, const CGPVar& cmp2_val, const CGPVar& cnt_ecx );
		inline void repe_scasd( const CGPVar& cmp1_addr, const CGPVar& cmp2_val, const CGPVar& cnt_ecx );

#if ( QOR_ARCH_WORDSIZE == 64 )

		inline void repe_scasq( const CGPVar& cmp1_addr, const CGPVar& cmp2_val, const CGPVar& cnt_ecx );

#endif // ASMJIT_X64

		inline void repe_scasw( const CGPVar& cmp1_addr, const CGPVar& cmp2_val, const CGPVar& cnt_ecx );
		inline void repne_cmpsb( const CGPVar& cmp1_addr, const CGPVar& cmp2_addr, const CGPVar& cnt_ecx );
		inline void repne_cmpsd( const CGPVar& cmp1_addr, const CGPVar& cmp2_addr, const CGPVar& cnt_ecx );

#if ( QOR_ARCH_WORDSIZE == 64 )

		inline void repne_cmpsq( const CGPVar& cmp1_addr, const CGPVar& cmp2_addr, const CGPVar& cnt_ecx );

#endif // ASMJIT_X64

		inline void repne_cmpsw( const CGPVar& cmp1_addr, const CGPVar& cmp2_addr, const CGPVar& cnt_ecx );
		inline void repne_scasb( const CGPVar& cmp1_addr, const CGPVar& cmp2_val, const CGPVar& cnt_ecx );
		inline void repne_scasd( const CGPVar& cmp1_addr, const CGPVar& cmp2_val, const CGPVar& cnt_ecx );

#if ( QOR_ARCH_WORDSIZE == 64 )

		inline void repne_scasq( const CGPVar& cmp1_addr, const CGPVar& cmp2_val, const CGPVar& cnt_ecx );

#endif // ASMJIT_X64

		inline void repne_scasw( const CGPVar& cmp1_addr, const CGPVar& cmp2_val, const CGPVar& cnt_ecx );
		inline void ret();
		inline void ret( const CGPVar& first );
		inline void ret( const CGPVar& first, const CGPVar& second );
		inline void ret( const CXMMVar& first );
		inline void ret( const CXMMVar& first, const CXMMVar& second );
		inline void rol( const CGPVar& dst, const CGPVar& src );
		inline void rol( const CGPVar& dst, const CImm& src );
		inline void rol( const CMem& dst, const CGPVar& src );
		inline void rol( const CMem& dst, const CImm& src );
		inline void ror( const CGPVar& dst, const CGPVar& src );
		inline void ror( const CGPVar& dst, const CImm& src );
		inline void ror( const CMem& dst, const CGPVar& src );
		inline void ror( const CMem& dst, const CImm& src );

#if ( QOR_ARCH_WORDSIZE == 32 )

		inline void sahf( const CGPVar& var );

#endif // ( QOR_ARCH_WORDSIZE == 32 )

		inline void sbb( const CGPVar& dst, const CGPVar& src );
		inline void sbb( const CGPVar& dst, const CMem& src );
		inline void sbb( const CGPVar& dst, const CImm& src );
		inline void sbb( const CMem& dst, const CGPVar& src );
		inline void sbb( const CMem& dst, const CImm& src );
		inline void sal( const CGPVar& dst, const CGPVar& src );
		inline void sal( const CGPVar& dst, const CImm& src );
		inline void sal( const CMem& dst, const CGPVar& src );
		inline void sal( const CMem& dst, const CImm& src );
		inline void sar( const CGPVar& dst, const CGPVar& src );
		inline void sar( const CGPVar& dst, const CImm& src );
		inline void sar( const CMem& dst, const CGPVar& src );
		inline void sar( const CMem& dst, const CImm& src );
		inline void set( CONDITION cc, const CGPVar& dst );
		inline void set( CONDITION cc, const CMem& dst );
		inline void seta( const CGPVar& dst ); 
		inline void seta( const CMem& dst );   
		inline void setae( const CGPVar& dst ); 
		inline void setae( const CMem& dst );   
		inline void setb( const CGPVar& dst ); 
		inline void setb( const CMem& dst );   
		inline void setbe( const CGPVar& dst ); 
		inline void setbe( const CMem& dst );   
		inline void setc( const CGPVar& dst ); 
		inline void setc( const CMem& dst );   
		inline void sete( const CGPVar& dst ); 
		inline void sete( const CMem& dst );   
		inline void setg( const CGPVar& dst ); 
		inline void setg( const CMem& dst );   
		inline void setge( const CGPVar& dst ); 
		inline void setge( const CMem& dst );   
		inline void setl( const CGPVar& dst ); 
		inline void setl( const CMem& dst );   
		inline void setle( const CGPVar& dst ); 
		inline void setle( const CMem& dst );   
		inline void setna( const CGPVar& dst ); 
		inline void setna( const CMem& dst );   
		inline void setnae( const CGPVar& dst ); 
		inline void setnae( const CMem& dst );   
		inline void setnb( const CGPVar& dst ); 
		inline void setnb( const CMem& dst );   
		inline void setnbe( const CGPVar& dst ); 
		inline void setnbe( const CMem& dst );   
		inline void setnc( const CGPVar& dst ); 
		inline void setnc( const CMem& dst );   
		inline void setne( const CGPVar& dst ); 
		inline void setne( const CMem& dst );   
		inline void setng( const CGPVar& dst ); 
		inline void setng( const CMem& dst );   
		inline void setnge( const CGPVar& dst ); 
		inline void setnge( const CMem& dst );   
		inline void setnl( const CGPVar& dst ); 
		inline void setnl( const CMem& dst );   
		inline void setnle( const CGPVar& dst ); 
		inline void setnle( const CMem& dst );   
		inline void setno( const CGPVar& dst ); 
		inline void setno( const CMem& dst );   
		inline void setnp( const CGPVar& dst ); 
		inline void setnp( const CMem& dst );   
		inline void setns( const CGPVar& dst ); 
		inline void setns( const CMem& dst );   
		inline void setnz( const CGPVar& dst ); 
		inline void setnz( const CMem& dst );   
		inline void seto( const CGPVar& dst ); 
		inline void seto( const CMem& dst );   
		inline void setp( const CGPVar& dst ); 
		inline void setp( const CMem& dst );   
		inline void setpe( const CGPVar& dst ); 
		inline void setpe( const CMem& dst );   
		inline void setpo( const CGPVar& dst ); 
		inline void setpo( const CMem& dst );   
		inline void sets( const CGPVar& dst ); 
		inline void sets( const CMem& dst );   
		inline void setz( const CGPVar& dst ); 
		inline void setz( const CMem& dst );   
		inline void shl( const CGPVar& dst, const CGPVar& src );
		inline void shl( const CGPVar& dst, const CImm& src );
		inline void shl( const CMem& dst, const CGPVar& src );
		inline void shl( const CMem& dst, const CImm& src );
		inline void shr( const CGPVar& dst, const CGPVar& src );
		inline void shr( const CGPVar& dst, const CImm& src );
		inline void shr( const CMem& dst, const CGPVar& src );
		inline void shr( const CMem& dst, const CImm& src );
		inline void shld( const CGPVar& dst, const CGPVar& src1, const CGPVar& src2 );
		inline void shld( const CGPVar& dst, const CGPVar& src1, const CImm& src2 );
		inline void shld( const CMem& dst, const CGPVar& src1, const CGPVar& src2 );
		inline void shld( const CMem& dst, const CGPVar& src1, const CImm& src2 );
		inline void shrd( const CGPVar& dst, const CGPVar& src1, const CGPVar& src2 );
		inline void shrd( const CGPVar& dst, const CGPVar& src1, const CImm& src2 );
		inline void shrd( const CMem& dst, const CGPVar& src1, const CGPVar& src2 );
		inline void shrd( const CMem& dst, const CGPVar& src1, const CImm& src2 );
		inline void stc();
		inline void std();
		inline void sub( const CGPVar& dst, const CGPVar& src );
		inline void sub( const CGPVar& dst, const CMem& src );
		inline void sub( const CGPVar& dst, const CImm& src );
		inline void sub( const CMem& dst, const CGPVar& src );
		inline void sub( const CMem& dst, const CImm& src );
		inline void test( const CGPVar& op1, const CGPVar& op2 );
		inline void test( const CGPVar& op1, const CImm& op2 );
		inline void test( const CMem& op1, const CGPVar& op2 );
		inline void test( const CMem& op1, const CImm& op2 );
		inline void ud2();
		inline void xadd( const CGPVar& dst, const CGPVar& src );
		inline void xadd( const CMem& dst, const CGPVar& src );
		inline void xchg( const CGPVar& dst, const CGPVar& src );
		inline void xchg( const CMem& dst, const CGPVar& src );
		inline void xchg( const CGPVar& dst, const CMem& src );
		inline void xor_( const CGPVar& dst, const CGPVar& src );
		inline void xor_( const CGPVar& dst, const CMem& src );
		inline void xor_( const CGPVar& dst, const CImm& src );
		inline void xor_( const CMem& dst, const CGPVar& src );
		inline void xor_( const CMem& dst, const CImm& src );

		// [MMX]

		inline void emms();
		inline void movd( const CMem& dst, const CMMVar& src );
		inline void movd( const CGPVar& dst, const CMMVar& src );
		inline void movd( const CMMVar& dst, const CMem& src );
		inline void movd( const CMMVar& dst, const CGPVar& src );
		inline void movq( const CMMVar& dst, const CMMVar& src );
		inline void movq( const CMem& dst, const CMMVar& src );

#if ( QOR_ARCH_WORDSIZE == 64 )

		inline void movq( const CGPVar& dst, const CMMVar& src );

#endif

		inline void movq( const CMMVar& dst, const CMem& src );

#if ( QOR_ARCH_WORDSIZE == 64 )

		inline void movq( const CMMVar& dst, const CGPVar& src );

#endif

		inline void packsswb( const CMMVar& dst, const CMMVar& src );
		inline void packsswb( const CMMVar& dst, const CMem& src );
		inline void packssdw( const CMMVar& dst, const CMMVar& src );
		inline void packssdw( const CMMVar& dst, const CMem& src );
		inline void packuswb( const CMMVar& dst, const CMMVar& src );
		inline void packuswb( const CMMVar& dst, const CMem& src );
		inline void paddb( const CMMVar& dst, const CMMVar& src );
		inline void paddb( const CMMVar& dst, const CMem& src );
		inline void paddw( const CMMVar& dst, const CMMVar& src );
		inline void paddw( const CMMVar& dst, const CMem& src );
		inline void paddd( const CMMVar& dst, const CMMVar& src );
		inline void paddd( const CMMVar& dst, const CMem& src );
		inline void paddsb( const CMMVar& dst, const CMMVar& src );
		inline void paddsb( const CMMVar& dst, const CMem& src );
		inline void paddsw( const CMMVar& dst, const CMMVar& src );
		inline void paddsw( const CMMVar& dst, const CMem& src );
		inline void paddusb( const CMMVar& dst, const CMMVar& src );
		inline void paddusb( const CMMVar& dst, const CMem& src );
		inline void paddusw( const CMMVar& dst, const CMMVar& src );
		inline void paddusw( const CMMVar& dst, const CMem& src );
		inline void pand( const CMMVar& dst, const CMMVar& src );
		inline void pand( const CMMVar& dst, const CMem& src );
		inline void pandn( const CMMVar& dst, const CMMVar& src );
		inline void pandn( const CMMVar& dst, const CMem& src );
		inline void pcmpeqb( const CMMVar& dst, const CMMVar& src );
		inline void pcmpeqb( const CMMVar& dst, const CMem& src );
		inline void pcmpeqw( const CMMVar& dst, const CMMVar& src );
		inline void pcmpeqw( const CMMVar& dst, const CMem& src );
		inline void pcmpeqd( const CMMVar& dst, const CMMVar& src );
		inline void pcmpeqd( const CMMVar& dst, const CMem& src );
		inline void pcmpgtb( const CMMVar& dst, const CMMVar& src );
		inline void pcmpgtb( const CMMVar& dst, const CMem& src );
		inline void pcmpgtw( const CMMVar& dst, const CMMVar& src );
		inline void pcmpgtw( const CMMVar& dst, const CMem& src );
		inline void pcmpgtd( const CMMVar& dst, const CMMVar& src );
		inline void pcmpgtd( const CMMVar& dst, const CMem& src );
		inline void pmulhw( const CMMVar& dst, const CMMVar& src );
		inline void pmulhw( const CMMVar& dst, const CMem& src );
		inline void pmullw( const CMMVar& dst, const CMMVar& src );
		inline void pmullw( const CMMVar& dst, const CMem& src );
		inline void por( const CMMVar& dst, const CMMVar& src );
		inline void por( const CMMVar& dst, const CMem& src );
		inline void pmaddwd( const CMMVar& dst, const CMMVar& src );
		inline void pmaddwd( const CMMVar& dst, const CMem& src );
		inline void pslld( const CMMVar& dst, const CMMVar& src );
		inline void pslld( const CMMVar& dst, const CMem& src );
		inline void pslld( const CMMVar& dst, const CImm& src );
		inline void psllq( const CMMVar& dst, const CMMVar& src );
		inline void psllq( const CMMVar& dst, const CMem& src );
		inline void psllq( const CMMVar& dst, const CImm& src );
		inline void psllw( const CMMVar& dst, const CMMVar& src );
		inline void psllw( const CMMVar& dst, const CMem& src );
		inline void psllw( const CMMVar& dst, const CImm& src );
		inline void psrad( const CMMVar& dst, const CMMVar& src );
		inline void psrad( const CMMVar& dst, const CMem& src );
		inline void psrad( const CMMVar& dst, const CImm& src );
		inline void psraw( const CMMVar& dst, const CMMVar& src );
		inline void psraw( const CMMVar& dst, const CMem& src );
		inline void psraw( const CMMVar& dst, const CImm& src );
		inline void psrld( const CMMVar& dst, const CMMVar& src );
		inline void psrld( const CMMVar& dst, const CMem& src );
		inline void psrld( const CMMVar& dst, const CImm& src );
		inline void psrlq( const CMMVar& dst, const CMMVar& src );
		inline void psrlq( const CMMVar& dst, const CMem& src );
		inline void psrlq( const CMMVar& dst, const CImm& src );
		inline void psrlw( const CMMVar& dst, const CMMVar& src );
		inline void psrlw( const CMMVar& dst, const CMem& src );
		inline void psrlw( const CMMVar& dst, const CImm& src );
		inline void psubb( const CMMVar& dst, const CMMVar& src );
		inline void psubb( const CMMVar& dst, const CMem& src );
		inline void psubw( const CMMVar& dst, const CMMVar& src );
		inline void psubw( const CMMVar& dst, const CMem& src );
		inline void psubd( const CMMVar& dst, const CMMVar& src );
		inline void psubd( const CMMVar& dst, const CMem& src );
		inline void psubsb( const CMMVar& dst, const CMMVar& src );
		inline void psubsb( const CMMVar& dst, const CMem& src );
		inline void psubsw( const CMMVar& dst, const CMMVar& src );
		inline void psubsw( const CMMVar& dst, const CMem& src );
		inline void psubusb( const CMMVar& dst, const CMMVar& src );
		inline void psubusb( const CMMVar& dst, const CMem& src );
		inline void psubusw( const CMMVar& dst, const CMMVar& src );
		inline void psubusw( const CMMVar& dst, const CMem& src );
		inline void punpckhbw( const CMMVar& dst, const CMMVar& src );
		inline void punpckhbw( const CMMVar& dst, const CMem& src );
		inline void punpckhwd( const CMMVar& dst, const CMMVar& src );
		inline void punpckhwd( const CMMVar& dst, const CMem& src );
		inline void punpckhdq( const CMMVar& dst, const CMMVar& src );
		inline void punpckhdq( const CMMVar& dst, const CMem& src );
		inline void punpcklbw( const CMMVar& dst, const CMMVar& src );
		inline void punpcklbw( const CMMVar& dst, const CMem& src );
		inline void punpcklwd( const CMMVar& dst, const CMMVar& src );
		inline void punpcklwd( const CMMVar& dst, const CMem& src );
		inline void punpckldq( const CMMVar& dst, const CMMVar& src );
		inline void punpckldq( const CMMVar& dst, const CMem& src );
		inline void pxor( const CMMVar& dst, const CMMVar& src );
		inline void pxor( const CMMVar& dst, const CMem& src );

		// 3dNow
		inline void femms();
		inline void pf2id( const CMMVar& dst, const CMMVar& src );
		inline void pf2id( const CMMVar& dst, const CMem& src );
		inline void pf2iw( const CMMVar& dst, const CMMVar& src );
		inline void pf2iw( const CMMVar& dst, const CMem& src );
		inline void pfacc( const CMMVar& dst, const CMMVar& src );
		inline void pfacc( const CMMVar& dst, const CMem& src );
		inline void pfadd( const CMMVar& dst, const CMMVar& src );
		inline void pfadd( const CMMVar& dst, const CMem& src );
		inline void pfcmpeq( const CMMVar& dst, const CMMVar& src );
		inline void pfcmpeq( const CMMVar& dst, const CMem& src );
		inline void pfcmpge( const CMMVar& dst, const CMMVar& src );
		inline void pfcmpge( const CMMVar& dst, const CMem& src );
		inline void pfcmpgt( const CMMVar& dst, const CMMVar& src );
		inline void pfcmpgt( const CMMVar& dst, const CMem& src );
		inline void pfmax( const CMMVar& dst, const CMMVar& src );
		inline void pfmax( const CMMVar& dst, const CMem& src );
		inline void pfmin( const CMMVar& dst, const CMMVar& src );
		inline void pfmin( const CMMVar& dst, const CMem& src );
		inline void pfmul( const CMMVar& dst, const CMMVar& src );
		inline void pfmul( const CMMVar& dst, const CMem& src );
		inline void pfnacc( const CMMVar& dst, const CMMVar& src );
		inline void pfnacc( const CMMVar& dst, const CMem& src );
		inline void pfpnaxx( const CMMVar& dst, const CMMVar& src );
		inline void pfpnacc( const CMMVar& dst, const CMem& src );
		inline void pfrcp( const CMMVar& dst, const CMMVar& src );
		inline void pfrcp( const CMMVar& dst, const CMem& src );
		inline void pfrcpit1( const CMMVar& dst, const CMMVar& src );
		inline void pfrcpit1( const CMMVar& dst, const CMem& src );
		inline void pfrcpit2( const CMMVar& dst, const CMMVar& src );
		inline void pfrcpit2( const CMMVar& dst, const CMem& src );
		inline void pfrsqit1( const CMMVar& dst, const CMMVar& src );
		inline void pfrsqit1( const CMMVar& dst, const CMem& src );
		inline void pfrsqrt( const CMMVar& dst, const CMMVar& src );
		inline void pfrsqrt( const CMMVar& dst, const CMem& src );
		inline void pfsub( const CMMVar& dst, const CMMVar& src );
		inline void pfsub( const CMMVar& dst, const CMem& src );
		inline void pfsubr( const CMMVar& dst, const CMMVar& src );
		inline void pfsubr( const CMMVar& dst, const CMem& src );
		inline void pi2fd( const CMMVar& dst, const CMMVar& src );
		inline void pi2fd( const CMMVar& dst, const CMem& src );
		inline void pi2fw( const CMMVar& dst, const CMMVar& src );
		inline void pi2fw( const CMMVar& dst, const CMem& src );
		inline void pswapd( const CMMVar& dst, const CMMVar& src );
		inline void pswapd( const CMMVar& dst, const CMem& src );

		// SSE

		inline void addps( const CXMMVar& dst, const CXMMVar& src );
		inline void addps( const CXMMVar& dst, const CMem& src );
		inline void addss( const CXMMVar& dst, const CXMMVar& src );
		inline void addss( const CXMMVar& dst, const CMem& src );
		inline void andnps( const CXMMVar& dst, const CXMMVar& src );
		inline void andnps( const CXMMVar& dst, const CMem& src );
		inline void andps( const CXMMVar& dst, const CXMMVar& src );
		inline void andps( const CXMMVar& dst, const CMem& src );
		inline void cmpps( const CXMMVar& dst, const CXMMVar& src, const CImm& imm8 );
		inline void cmpps( const CXMMVar& dst, const CMem& src, const CImm& imm8 );
		inline void cmpss( const CXMMVar& dst, const CXMMVar& src, const CImm& imm8 );
		inline void cmpss( const CXMMVar& dst, const CMem& src, const CImm& imm8 );
		inline void comiss( const CXMMVar& dst, const CXMMVar& src );
		inline void comiss( const CXMMVar& dst, const CMem& src );
		inline void cvtpi2ps( const CXMMVar& dst, const CMMVar& src );
		inline void cvtpi2ps( const CXMMVar& dst, const CMem& src );
		inline void cvtps2pi( const CMMVar& dst, const CXMMVar& src );
		inline void cvtps2pi( const CMMVar& dst, const CMem& src );
		inline void cvtsi2ss( const CXMMVar& dst, const CGPVar& src );
		inline void cvtsi2ss( const CXMMVar& dst, const CMem& src );
		inline void cvtss2si( const CGPVar& dst, const CXMMVar& src );
		inline void cvtss2si( const CGPVar& dst, const CMem& src );
		inline void cvttps2pi( const CMMVar& dst, const CXMMVar& src );
		inline void cvttps2pi( const CMMVar& dst, const CMem& src );
		inline void cvttss2si( const CGPVar& dst, const CXMMVar& src );
		inline void cvttss2si( const CGPVar& dst, const CMem& src );
		inline void divps( const CXMMVar& dst, const CXMMVar& src );
		inline void divps( const CXMMVar& dst, const CMem& src );
		inline void divss( const CXMMVar& dst, const CXMMVar& src );
		inline void divss( const CXMMVar& dst, const CMem& src );
		inline void ldmxcsr( const CMem& src );
		inline void maskmovq( const CGPVar& dst_ptr, const CMMVar& data, const CMMVar& mask );
		inline void maxps( const CXMMVar& dst, const CXMMVar& src );
		inline void maxps( const CXMMVar& dst, const CMem& src );
		inline void maxss( const CXMMVar& dst, const CXMMVar& src );
		inline void maxss( const CXMMVar& dst, const CMem& src );
		inline void minps( const CXMMVar& dst, const CXMMVar& src );
		inline void minps( const CXMMVar& dst, const CMem& src );
		inline void minss( const CXMMVar& dst, const CXMMVar& src );
		inline void minss( const CXMMVar& dst, const CMem& src );
		inline void movaps( const CXMMVar& dst, const CXMMVar& src );
		inline void movaps( const CXMMVar& dst, const CMem& src );
		inline void movaps( const CMem& dst, const CXMMVar& src );
		inline void movd( const CMem& dst, const CXMMVar& src );
		inline void movd( const CGPVar& dst, const CXMMVar& src );
		inline void movd( const CXMMVar& dst, const CMem& src );
		inline void movd( const CXMMVar& dst, const CGPVar& src );
		inline void movq( const CXMMVar& dst, const CXMMVar& src );
		inline void movq( const CMem& dst, const CXMMVar& src );

#if ( QOR_ARCH_WORDSIZE == 64 )

		inline void movq( const CGPVar& dst, const CXMMVar& src );

#endif // ASMJIT_X64

		inline void movq( const CXMMVar& dst, const CMem& src );

#if ( QOR_ARCH_WORDSIZE == 64 )

		inline void movq( const CXMMVar& dst, const CGPVar& src );

#endif // ASMJIT_X64

		inline void movntq( const CMem& dst, const CMMVar& src );
		inline void movhlps( const CXMMVar& dst, const CXMMVar& src );
		inline void movhps( const CXMMVar& dst, const CMem& src );
		inline void movhps( const CMem& dst, const CXMMVar& src );
		inline void movlhps( const CXMMVar& dst, const CXMMVar& src );
		inline void movlps( const CXMMVar& dst, const CMem& src );
		inline void movlps( const CMem& dst, const CXMMVar& src );
		inline void movntps( const CMem& dst, const CXMMVar& src );
		inline void movss( const CXMMVar& dst, const CXMMVar& src );
		inline void movss( const CXMMVar& dst, const CMem& src );
		inline void movss( const CMem& dst, const CXMMVar& src );
		inline void movups( const CXMMVar& dst, const CXMMVar& src );
		inline void movups( const CXMMVar& dst, const CMem& src );
		inline void movups( const CMem& dst, const CXMMVar& src );
		inline void mulps( const CXMMVar& dst, const CXMMVar& src );
		inline void mulps( const CXMMVar& dst, const CMem& src );
		inline void mulss( const CXMMVar& dst, const CXMMVar& src );
		inline void mulss( const CXMMVar& dst, const CMem& src );
		inline void orps( const CXMMVar& dst, const CXMMVar& src );
		inline void orps( const CXMMVar& dst, const CMem& src );
		inline void pavgb( const CMMVar& dst, const CMMVar& src );
		inline void pavgb( const CMMVar& dst, const CMem& src );
		inline void pavgw( const CMMVar& dst, const CMMVar& src );
		inline void pavgw( const CMMVar& dst, const CMem& src );
		inline void pextrw( const CGPVar& dst, const CMMVar& src, const CImm& imm8 );
		inline void pinsrw( const CMMVar& dst, const CGPVar& src, const CImm& imm8 );
		inline void pinsrw( const CMMVar& dst, const CMem& src, const CImm& imm8 );
		inline void pmaxsw( const CMMVar& dst, const CMMVar& src );
		inline void pmaxsw( const CMMVar& dst, const CMem& src );
		inline void pmaxub( const CMMVar& dst, const CMMVar& src );
		inline void pmaxub( const CMMVar& dst, const CMem& src );
		inline void pminsw( const CMMVar& dst, const CMMVar& src );
		inline void pminsw( const CMMVar& dst, const CMem& src );
		inline void pminub( const CMMVar& dst, const CMMVar& src );
		inline void pminub( const CMMVar& dst, const CMem& src );
		inline void pmovmskb( const CGPVar& dst, const CMMVar& src );
		inline void pmulhuw( const CMMVar& dst, const CMMVar& src );
		inline void pmulhuw( const CMMVar& dst, const CMem& src );
		inline void psadbw( const CMMVar& dst, const CMMVar& src );
		inline void psadbw( const CMMVar& dst, const CMem& src );
		inline void pshufw( const CMMVar& dst, const CMMVar& src, const CImm& imm8 );
		inline void pshufw( const CMMVar& dst, const CMem& src, const CImm& imm8 );
		inline void rcpps( const CXMMVar& dst, const CXMMVar& src );
		inline void rcpps( const CXMMVar& dst, const CMem& src );
		inline void rcpss( const CXMMVar& dst, const CXMMVar& src );
		inline void rcpss( const CXMMVar& dst, const CMem& src );
		inline void prefetch( const CMem& mem, const CImm& hint );
		inline void psadbw( const CXMMVar& dst, const CXMMVar& src );
		inline void psadbw( const CXMMVar& dst, const CMem& src );
		inline void rsqrtps( const CXMMVar& dst, const CXMMVar& src );
		inline void rsqrtps( const CXMMVar& dst, const CMem& src );
		inline void rsqrtss( const CXMMVar& dst, const CXMMVar& src );
		inline void rsqrtss( const CXMMVar& dst, const CMem& src );
		inline void sfence();
		inline void shufps( const CXMMVar& dst, const CXMMVar& src, const CImm& imm8 );
		inline void shufps( const CXMMVar& dst, const CMem& src, const CImm& imm8 );
		inline void sqrtps( const CXMMVar& dst, const CXMMVar& src );
		inline void sqrtps( const CXMMVar& dst, const CMem& src );
		inline void sqrtss( const CXMMVar& dst, const CXMMVar& src );
		inline void sqrtss( const CXMMVar& dst, const CMem& src );
		inline void stmxcsr( const CMem& dst );
		inline void subps( const CXMMVar& dst, const CXMMVar& src );
		inline void subps( const CXMMVar& dst, const CMem& src );
		inline void subss( const CXMMVar& dst, const CXMMVar& src );
		inline void subss( const CXMMVar& dst, const CMem& src );
		inline void ucomiss( const CXMMVar& dst, const CXMMVar& src );
		inline void ucomiss( const CXMMVar& dst, const CMem& src );
		inline void unpckhps( const CXMMVar& dst, const CXMMVar& src );
		inline void unpckhps( const CXMMVar& dst, const CMem& src );
		inline void unpcklps( const CXMMVar& dst, const CXMMVar& src );
		inline void unpcklps( const CXMMVar& dst, const CMem& src );
		inline void xorps( const CXMMVar& dst, const CXMMVar& src );
		inline void xorps( const CXMMVar& dst, const CMem& src );
		inline void addpd( const CXMMVar& dst, const CXMMVar& src );
		inline void addpd( const CXMMVar& dst, const CMem& src );
		inline void addsd( const CXMMVar& dst, const CXMMVar& src );
		inline void addsd( const CXMMVar& dst, const CMem& src );
		inline void andnpd( const CXMMVar& dst, const CXMMVar& src );
		inline void andnpd( const CXMMVar& dst, const CMem& src );
		inline void andpd( const CXMMVar& dst, const CXMMVar& src );
		inline void andpd( const CXMMVar& dst, const CMem& src );
		inline void clflush( const CMem& mem );
		inline void cmppd( const CXMMVar& dst, const CXMMVar& src, const CImm& imm8 );
		inline void cmppd( const CXMMVar& dst, const CMem& src, const CImm& imm8 );
		inline void cmpsd( const CXMMVar& dst, const CXMMVar& src, const CImm& imm8 );
		inline void cmpsd( const CXMMVar& dst, const CMem& src, const CImm& imm8 );
		inline void comisd( const CXMMVar& dst, const CXMMVar& src );
		inline void comisd( const CXMMVar& dst, const CMem& src );
		inline void cvtdq2pd( const CXMMVar& dst, const CXMMVar& src );
		inline void cvtdq2pd( const CXMMVar& dst, const CMem& src );
		inline void cvtdq2ps( const CXMMVar& dst, const CXMMVar& src );
		inline void cvtdq2ps( const CXMMVar& dst, const CMem& src );
		inline void cvtpd2dq( const CXMMVar& dst, const CXMMVar& src );
		inline void cvtpd2dq( const CXMMVar& dst, const CMem& src );
		inline void cvtpd2pi( const CMMVar& dst, const CXMMVar& src );
		inline void cvtpd2pi( const CMMVar& dst, const CMem& src );
		inline void cvtpd2ps( const CXMMVar& dst, const CXMMVar& src );
		inline void cvtpd2ps( const CXMMVar& dst, const CMem& src );
		inline void cvtpi2pd( const CXMMVar& dst, const CMMVar& src );
		inline void cvtpi2pd( const CXMMVar& dst, const CMem& src );
		inline void cvtps2dq( const CXMMVar& dst, const CXMMVar& src );
		inline void cvtps2dq( const CXMMVar& dst, const CMem& src );
		inline void cvtps2pd( const CXMMVar& dst, const CXMMVar& src );
		inline void cvtps2pd( const CXMMVar& dst, const CMem& src );
		inline void cvtsd2si( const CGPVar& dst, const CXMMVar& src );
		inline void cvtsd2si( const CGPVar& dst, const CMem& src );
		inline void cvtsd2ss( const CXMMVar& dst, const CXMMVar& src );
		inline void cvtsd2ss( const CXMMVar& dst, const CMem& src );
		inline void cvtsi2sd( const CXMMVar& dst, const CGPVar& src );
		inline void cvtsi2sd( const CXMMVar& dst, const CMem& src );
		inline void cvtss2sd( const CXMMVar& dst, const CXMMVar& src );
		inline void cvtss2sd( const CXMMVar& dst, const CMem& src );
		inline void cvttpd2pi( const CMMVar& dst, const CXMMVar& src );
		inline void cvttpd2pi( const CMMVar& dst, const CMem& src );
		inline void cvttpd2dq( const CXMMVar& dst, const CXMMVar& src );
		inline void cvttpd2dq( const CXMMVar& dst, const CMem& src );
		inline void cvttps2dq( const CXMMVar& dst, const CXMMVar& src );
		inline void cvttps2dq( const CXMMVar& dst, const CMem& src );
		inline void cvttsd2si( const CGPVar& dst, const CXMMVar& src );
		inline void cvttsd2si( const CGPVar& dst, const CMem& src );
		inline void divpd( const CXMMVar& dst, const CXMMVar& src );
		inline void divpd( const CXMMVar& dst, const CMem& src );
		inline void divsd( const CXMMVar& dst, const CXMMVar& src );
		inline void divsd( const CXMMVar& dst, const CMem& src );
		inline void lfence();
		inline void maskmovdqu( const CGPVar& dst_ptr, const CXMMVar& src, const CXMMVar& mask );
		inline void maxpd( const CXMMVar& dst, const CXMMVar& src );
		inline void maxpd( const CXMMVar& dst, const CMem& src );
		inline void maxsd( const CXMMVar& dst, const CXMMVar& src );
		inline void maxsd( const CXMMVar& dst, const CMem& src );
		inline void mfence();
		inline void minpd( const CXMMVar& dst, const CXMMVar& src );
		inline void minpd( const CXMMVar& dst, const CMem& src );
		inline void minsd( const CXMMVar& dst, const CXMMVar& src );
		inline void minsd( const CXMMVar& dst, const CMem& src );
		inline void movdqa( const CXMMVar& dst, const CXMMVar& src );
		inline void movdqa( const CXMMVar& dst, const CMem& src );
		inline void movdqa( const CMem& dst, const CXMMVar& src );
		inline void movdqu( const CXMMVar& dst, const CXMMVar& src );
		inline void movdqu( const CXMMVar& dst, const CMem& src );
		inline void movdqu( const CMem& dst, const CXMMVar& src );
		inline void movmskps( const CGPVar& dst, const CXMMVar& src );
		inline void movmskpd( const CGPVar& dst, const CXMMVar& src );
		inline void movsd( const CXMMVar& dst, const CXMMVar& src );
		inline void movsd( const CXMMVar& dst, const CMem& src );
		inline void movsd( const CMem& dst, const CXMMVar& src );
		inline void movapd( const CXMMVar& dst, const CXMMVar& src );
		inline void movapd( const CXMMVar& dst, const CMem& src );
		inline void movapd( const CMem& dst, const CXMMVar& src );
		inline void movdq2q( const CMMVar& dst, const CXMMVar& src );
		inline void movq2dq( const CXMMVar& dst, const CMMVar& src );
		inline void movhpd( const CXMMVar& dst, const CMem& src );
		inline void movhpd( const CMem& dst, const CXMMVar& src );
		inline void movlpd( const CXMMVar& dst, const CMem& src );
		inline void movlpd( const CMem& dst, const CXMMVar& src );
		inline void movntdq( const CMem& dst, const CXMMVar& src );
		inline void movnti( const CMem& dst, const CGPVar& src );
		inline void movntpd( const CMem& dst, const CXMMVar& src );
		inline void movupd( const CXMMVar& dst, const CXMMVar& src );
		inline void movupd( const CXMMVar& dst, const CMem& src );
		inline void movupd( const CMem& dst, const CXMMVar& src );
		inline void mulpd( const CXMMVar& dst, const CXMMVar& src );
		inline void mulpd( const CXMMVar& dst, const CMem& src );
		inline void mulsd( const CXMMVar& dst, const CXMMVar& src );
		inline void mulsd( const CXMMVar& dst, const CMem& src );
		inline void orpd( const CXMMVar& dst, const CXMMVar& src );
		inline void orpd( const CXMMVar& dst, const CMem& src );
		inline void packsswb( const CXMMVar& dst, const CXMMVar& src );
		inline void packsswb( const CXMMVar& dst, const CMem& src );
		inline void packssdw( const CXMMVar& dst, const CXMMVar& src );
		inline void packssdw( const CXMMVar& dst, const CMem& src );
		inline void packuswb( const CXMMVar& dst, const CXMMVar& src );
		inline void packuswb( const CXMMVar& dst, const CMem& src );
		inline void paddb( const CXMMVar& dst, const CXMMVar& src );
		inline void paddb( const CXMMVar& dst, const CMem& src );
		inline void paddw( const CXMMVar& dst, const CXMMVar& src );
		inline void paddw( const CXMMVar& dst, const CMem& src );
		inline void paddd( const CXMMVar& dst, const CXMMVar& src );
		inline void paddd( const CXMMVar& dst, const CMem& src );
		inline void paddq( const CMMVar& dst, const CMMVar& src );
		inline void paddq( const CMMVar& dst, const CMem& src );
		inline void paddq( const CXMMVar& dst, const CXMMVar& src );
		inline void paddq( const CXMMVar& dst, const CMem& src );
		inline void paddsb( const CXMMVar& dst, const CXMMVar& src );
		inline void paddsb( const CXMMVar& dst, const CMem& src );
		inline void paddsw( const CXMMVar& dst, const CXMMVar& src );
		inline void paddsw( const CXMMVar& dst, const CMem& src );
		inline void paddusb( const CXMMVar& dst, const CXMMVar& src );
		inline void paddusb( const CXMMVar& dst, const CMem& src );
		inline void paddusw( const CXMMVar& dst, const CXMMVar& src );
		inline void paddusw( const CXMMVar& dst, const CMem& src );
		inline void pand( const CXMMVar& dst, const CXMMVar& src );
		inline void pand( const CXMMVar& dst, const CMem& src );
		inline void pandn( const CXMMVar& dst, const CXMMVar& src );
		inline void pandn( const CXMMVar& dst, const CMem& src );
		inline void pause();
		inline void pavgb( const CXMMVar& dst, const CXMMVar& src );
		inline void pavgb( const CXMMVar& dst, const CMem& src );
		inline void pavgw( const CXMMVar& dst, const CXMMVar& src );
		inline void pavgw( const CXMMVar& dst, const CMem& src );
		inline void pcmpeqb( const CXMMVar& dst, const CXMMVar& src );
		inline void pcmpeqb( const CXMMVar& dst, const CMem& src );
		inline void pcmpeqw( const CXMMVar& dst, const CXMMVar& src );
		inline void pcmpeqw( const CXMMVar& dst, const CMem& src );
		inline void pcmpeqd( const CXMMVar& dst, const CXMMVar& src );
		inline void pcmpeqd( const CXMMVar& dst, const CMem& src );
		inline void pcmpgtb( const CXMMVar& dst, const CXMMVar& src );
		inline void pcmpgtb( const CXMMVar& dst, const CMem& src );
		inline void pcmpgtw( const CXMMVar& dst, const CXMMVar& src );
		inline void pcmpgtw( const CXMMVar& dst, const CMem& src );
		inline void pcmpgtd( const CXMMVar& dst, const CXMMVar& src );
		inline void pcmpgtd( const CXMMVar& dst, const CMem& src );
		inline void pextrw( const CGPVar& dst, const CXMMVar& src, const CImm& imm8 );
		inline void pextrw( const CMem& dst, const CXMMVar& src, const CImm& imm8 );
		inline void pmaxsw( const CXMMVar& dst, const CXMMVar& src );
		inline void pmaxsw( const CXMMVar& dst, const CMem& src );
		inline void pmaxub( const CXMMVar& dst, const CXMMVar& src );
		inline void pmaxub( const CXMMVar& dst, const CMem& src );
		inline void pminsw( const CXMMVar& dst, const CXMMVar& src );
		inline void pminsw( const CXMMVar& dst, const CMem& src );
		inline void pminub( const CXMMVar& dst, const CXMMVar& src );
		inline void pminub( const CXMMVar& dst, const CMem& src );
		inline void pmovmskb( const CGPVar& dst, const CXMMVar& src );
		inline void pmulhw( const CXMMVar& dst, const CXMMVar& src );
		inline void pmulhw( const CXMMVar& dst, const CMem& src );
		inline void pmulhuw( const CXMMVar& dst, const CXMMVar& src );
		inline void pmulhuw( const CXMMVar& dst, const CMem& src );
		inline void pmullw( const CXMMVar& dst, const CXMMVar& src );
		inline void pmullw( const CXMMVar& dst, const CMem& src );
		inline void pmuludq( const CMMVar& dst, const CMMVar& src );
		inline void pmuludq( const CMMVar& dst, const CMem& src );
		inline void pmuludq( const CXMMVar& dst, const CXMMVar& src );
		inline void pmuludq( const CXMMVar& dst, const CMem& src );
		inline void por( const CXMMVar& dst, const CXMMVar& src );
		inline void por( const CXMMVar& dst, const CMem& src );
		inline void pslld( const CXMMVar& dst, const CXMMVar& src );
		inline void pslld( const CXMMVar& dst, const CMem& src );
		inline void pslld( const CXMMVar& dst, const CImm& src );
		inline void psllq( const CXMMVar& dst, const CXMMVar& src );
		inline void psllq( const CXMMVar& dst, const CMem& src );
		inline void psllq( const CXMMVar& dst, const CImm& src );
		inline void psllw( const CXMMVar& dst, const CXMMVar& src );
		inline void psllw( const CXMMVar& dst, const CMem& src );
		inline void psllw( const CXMMVar& dst, const CImm& src );
		inline void pslldq( const CXMMVar& dst, const CImm& src );
		inline void psrad( const CXMMVar& dst, const CXMMVar& src );
		inline void psrad( const CXMMVar& dst, const CMem& src );
		inline void psrad( const CXMMVar& dst, const CImm& src );
		inline void psraw( const CXMMVar& dst, const CXMMVar& src );
		inline void psraw( const CXMMVar& dst, const CMem& src );
		inline void psraw( const CXMMVar& dst, const CImm& src );
		inline void psubb( const CXMMVar& dst, const CXMMVar& src );
		inline void psubb( const CXMMVar& dst, const CMem& src );
		inline void psubw( const CXMMVar& dst, const CXMMVar& src );
		inline void psubw( const CXMMVar& dst, const CMem& src );
		inline void psubd( const CXMMVar& dst, const CXMMVar& src );
		inline void psubd( const CXMMVar& dst, const CMem& src );
		inline void psubq( const CMMVar& dst, const CMMVar& src );
		inline void psubq( const CMMVar& dst, const CMem& src );
		inline void psubq( const CXMMVar& dst, const CXMMVar& src );
		inline void psubq( const CXMMVar& dst, const CMem& src );
		inline void pmaddwd( const CXMMVar& dst, const CXMMVar& src );
		inline void pmaddwd( const CXMMVar& dst, const CMem& src );
		inline void pshufd( const CXMMVar& dst, const CXMMVar& src, const CImm& imm8 );
		inline void pshufd( const CXMMVar& dst, const CMem& src, const CImm& imm8 );
		inline void pshufhw( const CXMMVar& dst, const CXMMVar& src, const CImm& imm8 );
		inline void pshufhw( const CXMMVar& dst, const CMem& src, const CImm& imm8 );
		inline void pshuflw( const CXMMVar& dst, const CXMMVar& src, const CImm& imm8 );
		inline void pshuflw( const CXMMVar& dst, const CMem& src, const CImm& imm8 );
		inline void psrld( const CXMMVar& dst, const CXMMVar& src );
		inline void psrld( const CXMMVar& dst, const CMem& src );
		inline void psrld( const CXMMVar& dst, const CImm& src );
		inline void psrlq( const CXMMVar& dst, const CXMMVar& src );
		inline void psrlq( const CXMMVar& dst, const CMem& src );
		inline void psrlq( const CXMMVar& dst, const CImm& src );
		inline void psrldq( const CXMMVar& dst, const CImm& src );
		inline void psrlw( const CXMMVar& dst, const CXMMVar& src );
		inline void psrlw( const CXMMVar& dst, const CMem& src );
		inline void psrlw( const CXMMVar& dst, const CImm& src );
		inline void psubsb( const CXMMVar& dst, const CXMMVar& src );
		inline void psubsb( const CXMMVar& dst, const CMem& src );
		inline void psubsw( const CXMMVar& dst, const CXMMVar& src );
		inline void psubsw( const CXMMVar& dst, const CMem& src );
		inline void psubusb( const CXMMVar& dst, const CXMMVar& src );
		inline void psubusb( const CXMMVar& dst, const CMem& src );
		inline void psubusw( const CXMMVar& dst, const CXMMVar& src );
		inline void psubusw( const CXMMVar& dst, const CMem& src );
		inline void punpckhbw( const CXMMVar& dst, const CXMMVar& src );
		inline void punpckhbw( const CXMMVar& dst, const CMem& src );
		inline void punpckhwd( const CXMMVar& dst, const CXMMVar& src );
		inline void punpckhwd( const CXMMVar& dst, const CMem& src );
		inline void punpckhdq( const CXMMVar& dst, const CXMMVar& src );
		inline void punpckhdq( const CXMMVar& dst, const CMem& src );
		inline void punpckhqdq( const CXMMVar& dst, const CXMMVar& src );
		inline void punpckhqdq( const CXMMVar& dst, const CMem& src );
		inline void punpcklbw( const CXMMVar& dst, const CXMMVar& src );
		inline void punpcklbw( const CXMMVar& dst, const CMem& src );
		inline void punpcklwd( const CXMMVar& dst, const CXMMVar& src );
		inline void punpcklwd( const CXMMVar& dst, const CMem& src );
		inline void punpckldq( const CXMMVar& dst, const CXMMVar& src );
		inline void punpckldq( const CXMMVar& dst, const CMem& src );
		inline void punpcklqdq( const CXMMVar& dst, const CXMMVar& src );
		inline void punpcklqdq( const CXMMVar& dst, const CMem& src );
		inline void pxor( const CXMMVar& dst, const CXMMVar& src );
		inline void pxor( const CXMMVar& dst, const CMem& src );
		inline void shufpd( const CXMMVar& dst, const CXMMVar& src, const CImm& imm8 );
		inline void shufpd( const CXMMVar& dst, const CMem& src, const CImm& imm8 );
		inline void sqrtpd( const CXMMVar& dst, const CXMMVar& src );
		inline void sqrtpd( const CXMMVar& dst, const CMem& src );
		inline void sqrtsd( const CXMMVar& dst, const CXMMVar& src );
		inline void sqrtsd( const CXMMVar& dst, const CMem& src );
		inline void subpd( const CXMMVar& dst, const CXMMVar& src );
		inline void subpd( const CXMMVar& dst, const CMem& src );
		inline void subsd( const CXMMVar& dst, const CXMMVar& src );
		inline void subsd( const CXMMVar& dst, const CMem& src );
		inline void ucomisd( const CXMMVar& dst, const CXMMVar& src );
		inline void ucomisd( const CXMMVar& dst, const CMem& src );
		inline void unpckhpd( const CXMMVar& dst, const CXMMVar& src );
		inline void unpckhpd( const CXMMVar& dst, const CMem& src );
		inline void unpcklpd( const CXMMVar& dst, const CXMMVar& src );
		inline void unpcklpd( const CXMMVar& dst, const CMem& src );
		inline void xorpd( const CXMMVar& dst, const CXMMVar& src );
		inline void xorpd( const CXMMVar& dst, const CMem& src );

		// [SSE3]

		inline void addsubpd( const CXMMVar& dst, const CXMMVar& src );
		inline void addsubpd( const CXMMVar& dst, const CMem& src );
		inline void addsubps( const CXMMVar& dst, const CXMMVar& src );
		inline void addsubps( const CXMMVar& dst, const CMem& src );

#if ASMJIT_NOT_SUPPORTED_BY_COMPILER
		inline void fisttp(const CMem& dst);
#endif // ASMJIT_NOT_SUPPORTED_BY_COMPILER

		inline void haddpd( const CXMMVar& dst, const CXMMVar& src );
		inline void haddpd( const CXMMVar& dst, const CMem& src );
		inline void haddps( const CXMMVar& dst, const CXMMVar& src );
		inline void haddps( const CXMMVar& dst, const CMem& src );
		inline void hsubpd( const CXMMVar& dst, const CXMMVar& src );
		inline void hsubpd( const CXMMVar& dst, const CMem& src );
		inline void hsubps( const CXMMVar& dst, const CXMMVar& src );
		inline void hsubps( const CXMMVar& dst, const CMem& src );
		inline void lddqu( const CXMMVar& dst, const CMem& src );

#if ASMJIT_NOT_SUPPORTED_BY_COMPILER
		inline void monitor();
#endif // ASMJIT_NOT_SUPPORTED_BY_COMPILER

		inline void movddup( const CXMMVar& dst, const CXMMVar& src );
		inline void movddup( const CXMMVar& dst, const CMem& src );
		inline void movshdup( const CXMMVar& dst, const CXMMVar& src );
		inline void movshdup( const CXMMVar& dst, const CMem& src );
		inline void movsldup( const CXMMVar& dst, const CXMMVar& src );
		inline void movsldup( const CXMMVar& dst, const CMem& src );

#if ASMJIT_NOT_SUPPORTED_BY_COMPILER
		inline void mwait();
#endif // ASMJIT_NOT_SUPPORTED_BY_COMPILER

		// [SSSE3]

		inline void psignb( const CMMVar& dst, const CMMVar& src );
		inline void psignb( const CMMVar& dst, const CMem& src );
		inline void psignb( const CXMMVar& dst, const CXMMVar& src );
		inline void psignb( const CXMMVar& dst, const CMem& src );
		inline void psignw( const CMMVar& dst, const CMMVar& src );
		inline void psignw( const CMMVar& dst, const CMem& src );
		inline void psignw( const CXMMVar& dst, const CXMMVar& src );
		inline void psignw( const CXMMVar& dst, const CMem& src );
		inline void psignd( const CMMVar& dst, const CMMVar& src );
		inline void psignd( const CMMVar& dst, const CMem& src );
		inline void psignd( const CXMMVar& dst, const CXMMVar& src );
		inline void psignd( const CXMMVar& dst, const CMem& src );
		inline void phaddw( const CMMVar& dst, const CMMVar& src );
		inline void phaddw( const CMMVar& dst, const CMem& src );
		inline void phaddw( const CXMMVar& dst, const CXMMVar& src );
		inline void phaddw( const CXMMVar& dst, const CMem& src );
		inline void phaddd( const CMMVar& dst, const CMMVar& src );
		inline void phaddd( const CMMVar& dst, const CMem& src );
		inline void phaddd( const CXMMVar& dst, const CXMMVar& src );
		inline void phaddd( const CXMMVar& dst, const CMem& src );
		inline void phaddsw( const CMMVar& dst, const CMMVar& src );
		inline void phaddsw( const CMMVar& dst, const CMem& src );
		inline void phaddsw( const CXMMVar& dst, const CXMMVar& src );
		inline void phaddsw( const CXMMVar& dst, const CMem& src );
		inline void phsubw( const CMMVar& dst, const CMMVar& src );
		inline void phsubw( const CMMVar& dst, const CMem& src );
		inline void phsubw( const CXMMVar& dst, const CXMMVar& src );
		inline void phsubw( const CXMMVar& dst, const CMem& src );
		inline void phsubd( const CMMVar& dst, const CMMVar& src );
		inline void phsubd( const CMMVar& dst, const CMem& src );
		inline void phsubd( const CXMMVar& dst, const CXMMVar& src );
		inline void phsubd( const CXMMVar& dst, const CMem& src );
		inline void phsubsw( const CMMVar& dst, const CMMVar& src );
		inline void phsubsw( const CMMVar& dst, const CMem& src );
		inline void phsubsw( const CXMMVar& dst, const CXMMVar& src );
		inline void phsubsw( const CXMMVar& dst, const CMem& src );
		inline void pmaddubsw( const CMMVar& dst, const CMMVar& src );
		inline void pmaddubsw( const CMMVar& dst, const CMem& src );
		inline void pmaddubsw( const CXMMVar& dst, const CXMMVar& src );
		inline void pmaddubsw( const CXMMVar& dst, const CMem& src );
		inline void pabsb( const CMMVar& dst, const CMMVar& src );
		inline void pabsb( const CMMVar& dst, const CMem& src );
		inline void pabsb( const CXMMVar& dst, const CXMMVar& src );
		inline void pabsb( const CXMMVar& dst, const CMem& src );
		inline void pabsw( const CMMVar& dst, const CMMVar& src );
		inline void pabsw( const CMMVar& dst, const CMem& src );
		inline void pabsw( const CXMMVar& dst, const CXMMVar& src );
		inline void pabsw( const CXMMVar& dst, const CMem& src );
		inline void pabsd( const CMMVar& dst, const CMMVar& src );
		inline void pabsd( const CMMVar& dst, const CMem& src );
		inline void pabsd( const CXMMVar& dst, const CXMMVar& src );
		inline void pabsd( const CXMMVar& dst, const CMem& src );
		inline void pmulhrsw( const CMMVar& dst, const CMMVar& src );
		inline void pmulhrsw( const CMMVar& dst, const CMem& src );
		inline void pmulhrsw( const CXMMVar& dst, const CXMMVar& src );
		inline void pmulhrsw( const CXMMVar& dst, const CMem& src );
		inline void pshufb( const CMMVar& dst, const CMMVar& src );
		inline void pshufb( const CMMVar& dst, const CMem& src );
		inline void pshufb( const CXMMVar& dst, const CXMMVar& src );
		inline void pshufb( const CXMMVar& dst, const CMem& src );
		inline void palignr( const CMMVar& dst, const CMMVar& src, const CImm& imm8 );
		inline void palignr( const CMMVar& dst, const CMem& src, const CImm& imm8 );
		inline void palignr( const CXMMVar& dst, const CXMMVar& src, const CImm& imm8 );
		inline void palignr( const CXMMVar& dst, const CMem& src, const CImm& imm8 );

		// [SSE4.1]
		inline void blendpd( const CXMMVar& dst, const CXMMVar& src, const CImm& imm8 );
		inline void blendpd( const CXMMVar& dst, const CMem& src, const CImm& imm8 );
		inline void blendps( const CXMMVar& dst, const CXMMVar& src, const CImm& imm8 );
		inline void blendps( const CXMMVar& dst, const CMem& src, const CImm& imm8 );
		inline void blendvpd( const CXMMVar& dst, const CXMMVar& src );
		inline void blendvpd( const CXMMVar& dst, const CMem& src );
		inline void blendvps( const CXMMVar& dst, const CXMMVar& src );
		inline void blendvps( const CXMMVar& dst, const CMem& src );
		inline void dppd( const CXMMVar& dst, const CXMMVar& src, const CImm& imm8 );
		inline void dppd( const CXMMVar& dst, const CMem& src, const CImm& imm8 );
		inline void dpps( const CXMMVar& dst, const CXMMVar& src, const CImm& imm8 );
		inline void dpps( const CXMMVar& dst, const CMem& src, const CImm& imm8 );
		inline void extractps( const CXMMVar& dst, const CXMMVar& src, const CImm& imm8 );
		inline void extractps( const CXMMVar& dst, const CMem& src, const CImm& imm8 );
		inline void movntdqa( const CXMMVar& dst, const CMem& src );
		inline void mpsadbw( const CXMMVar& dst, const CXMMVar& src, const CImm& imm8 );
		inline void mpsadbw( const CXMMVar& dst, const CMem& src, const CImm& imm8 );
		inline void packusdw( const CXMMVar& dst, const CXMMVar& src );
		inline void packusdw( const CXMMVar& dst, const CMem& src );
		inline void pblendvb( const CXMMVar& dst, const CXMMVar& src );
		inline void pblendvb( const CXMMVar& dst, const CMem& src );
		inline void pblendw( const CXMMVar& dst, const CXMMVar& src, const CImm& imm8 );
		inline void pblendw( const CXMMVar& dst, const CMem& src, const CImm& imm8 );
		inline void pcmpeqq( const CXMMVar& dst, const CXMMVar& src );
		inline void pcmpeqq( const CXMMVar& dst, const CMem& src );
		inline void pextrb( const CGPVar& dst, const CXMMVar& src, const CImm& imm8 );
		inline void pextrb( const CMem& dst, const CXMMVar& src, const CImm& imm8 );
		inline void pextrd( const CGPVar& dst, const CXMMVar& src, const CImm& imm8 );
		inline void pextrd( const CMem& dst, const CXMMVar& src, const CImm& imm8 );
		inline void pextrq( const CGPVar& dst, const CXMMVar& src, const CImm& imm8 );
		inline void pextrq( const CMem& dst, const CXMMVar& src, const CImm& imm8 );
		inline void phminposuw( const CXMMVar& dst, const CXMMVar& src );
		inline void phminposuw( const CXMMVar& dst, const CMem& src );
		inline void pinsrb( const CXMMVar& dst, const CGPVar& src, const CImm& imm8 );
		inline void pinsrb( const CXMMVar& dst, const CMem& src, const CImm& imm8 );
		inline void pinsrd( const CXMMVar& dst, const CGPVar& src, const CImm& imm8 );
		inline void pinsrd( const CXMMVar& dst, const CMem& src, const CImm& imm8 );
		inline void pinsrq( const CXMMVar& dst, const CGPVar& src, const CImm& imm8 );
		inline void pinsrq( const CXMMVar& dst, const CMem& src, const CImm& imm8 );
		inline void pinsrw( const CXMMVar& dst, const CGPVar& src, const CImm& imm8 );
		inline void pinsrw( const CXMMVar& dst, const CMem& src, const CImm& imm8 );
		inline void pmaxuw( const CXMMVar& dst, const CXMMVar& src );
		inline void pmaxuw( const CXMMVar& dst, const CMem& src );
		inline void pmaxsb( const CXMMVar& dst, const CXMMVar& src );
		inline void pmaxsb( const CXMMVar& dst, const CMem& src );
		inline void pmaxsd( const CXMMVar& dst, const CXMMVar& src );
		inline void pmaxsd( const CXMMVar& dst, const CMem& src );
		inline void pmaxud( const CXMMVar& dst, const CXMMVar& src );
		inline void pmaxud( const CXMMVar& dst, const CMem& src );
		inline void pminsb( const CXMMVar& dst, const CXMMVar& src );
		inline void pminsb( const CXMMVar& dst, const CMem& src );
		inline void pminuw( const CXMMVar& dst, const CXMMVar& src );
		inline void pminuw( const CXMMVar& dst, const CMem& src );
		inline void pminud( const CXMMVar& dst, const CXMMVar& src );
		inline void pminud( const CXMMVar& dst, const CMem& src );
		inline void pminsd( const CXMMVar& dst, const CXMMVar& src );
		inline void pminsd( const CXMMVar& dst, const CMem& src );
		inline void pmovsxbw( const CXMMVar& dst, const CXMMVar& src );
		inline void pmovsxbw( const CXMMVar& dst, const CMem& src );
		inline void pmovsxbd( const CXMMVar& dst, const CXMMVar& src );
		inline void pmovsxbd( const CXMMVar& dst, const CMem& src );
		inline void pmovsxbq( const CXMMVar& dst, const CXMMVar& src );
		inline void pmovsxbq( const CXMMVar& dst, const CMem& src );
		inline void pmovsxwd( const CXMMVar& dst, const CXMMVar& src );
		inline void pmovsxwd( const CXMMVar& dst, const CMem& src );
		inline void pmovsxwq( const CXMMVar& dst, const CXMMVar& src );
		inline void pmovsxwq( const CXMMVar& dst, const CMem& src );
		inline void pmovsxdq( const CXMMVar& dst, const CXMMVar& src );
		inline void pmovsxdq( const CXMMVar& dst, const CMem& src );
		inline void pmovzxbw( const CXMMVar& dst, const CXMMVar& src );
		inline void pmovzxbw( const CXMMVar& dst, const CMem& src );
		inline void pmovzxbd( const CXMMVar& dst, const CXMMVar& src );
		inline void pmovzxbd( const CXMMVar& dst, const CMem& src );
		inline void pmovzxbq( const CXMMVar& dst, const CXMMVar& src );
		inline void pmovzxbq( const CXMMVar& dst, const CMem& src );
		inline void pmovzxwd( const CXMMVar& dst, const CXMMVar& src );
		inline void pmovzxwd( const CXMMVar& dst, const CMem& src );
		inline void pmovzxwq( const CXMMVar& dst, const CXMMVar& src );
		inline void pmovzxwq( const CXMMVar& dst, const CMem& src );
		inline void pmovzxdq( const CXMMVar& dst, const CXMMVar& src );
		inline void pmovzxdq( const CXMMVar& dst, const CMem& src );
		inline void pmuldq( const CXMMVar& dst, const CXMMVar& src );
		inline void pmuldq( const CXMMVar& dst, const CMem& src );
		inline void pmulld( const CXMMVar& dst, const CXMMVar& src );
		inline void pmulld( const CXMMVar& dst, const CMem& src );
		inline void ptest( const CXMMVar& op1, const CXMMVar& op2 );
		inline void ptest( const CXMMVar& op1, const CMem& op2 );
		inline void roundps( const CXMMVar& dst, const CXMMVar& src, const CImm& imm8 );
		inline void roundps( const CXMMVar& dst, const CMem& src, const CImm& imm8 );
		inline void roundss( const CXMMVar& dst, const CXMMVar& src, const CImm& imm8 );
		inline void roundss( const CXMMVar& dst, const CMem& src, const CImm& imm8 );
		inline void roundpd( const CXMMVar& dst, const CXMMVar& src, const CImm& imm8 );
		inline void roundpd( const CXMMVar& dst, const CMem& src, const CImm& imm8 );
		inline void roundsd( const CXMMVar& dst, const CXMMVar& src, const CImm& imm8 );
		inline void roundsd( const CXMMVar& dst, const CMem& src, const CImm& imm8 );
		inline void crc32( const CGPVar& dst, const CGPVar& src );
		inline void crc32( const CGPVar& dst, const CMem& src );
		inline void pcmpestri( const CXMMVar& dst, const CXMMVar& src, const CImm& imm8 );
		inline void pcmpestri( const CXMMVar& dst, const CMem& src, const CImm& imm8 );
		inline void pcmpestrm( const CXMMVar& dst, const CXMMVar& src, const CImm& imm8 );
		inline void pcmpestrm( const CXMMVar& dst, const CMem& src, const CImm& imm8 );
		inline void pcmpistri( const CXMMVar& dst, const CXMMVar& src, const CImm& imm8 );
		inline void pcmpistri( const CXMMVar& dst, const CMem& src, const CImm& imm8 );
		inline void pcmpistrm( const CXMMVar& dst, const CXMMVar& src, const CImm& imm8 );
		inline void pcmpistrm( const CXMMVar& dst, const CMem& src, const CImm& imm8 );
		inline void pcmpgtq( const CXMMVar& dst, const CXMMVar& src );
		inline void pcmpgtq( const CXMMVar& dst, const CMem& src );
		inline void popcnt( const CGPVar& dst, const CGPVar& src );
		inline void popcnt( const CGPVar& dst, const CMem& src );
		inline void amd_prefetch( const CMem& mem );
		inline void amd_prefetchw( const CMem& mem );

		// [Intel only]
		inline void movbe( const CGPVar& dst, const CMem& src );
		inline void movbe( const CMem& dst, const CGPVar& src );

		// [Emit Options]
		inline void lock();
		inline void rex();
		inline void fstp( const CMem& dst );

	private:

		__QCS_DECLARE_NONCOPYABLE( Cx86HLAIntrinsics );
	};

#undef ASMJIT_NOT_SUPPORTED_BY_COMPILER

}//nsx86
}//nsArch

#endif//ARCHQOR_X86PC_HLASSEMBLER_INTRINSICS_H_2
