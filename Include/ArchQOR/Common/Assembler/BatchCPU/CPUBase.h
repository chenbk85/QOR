//CPUBase.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//A base for virtual CPUs

#ifndef ARCHQOR_CPUBASE_H_2
#define ARCHQOR_CPUBASE_H_2

#include "CompilerQOR.h"
#include "CodeQOR/DataStructures/PODVector.h"
#include "ArchQOR/Common/Assembler/AsmBuffer.h"
#include "ArchQOR/Common/Assembler/CodeGenerator.h"
#include "ArchQOR/Common/Assembler/Logger.h"
#include "ArchQOR/Common/Assembler/Assembler.h"
#include "ArchQOR/Common/Assembler/Zone.h"

//--------------------------------------------------------------------------------
namespace nsArch
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __ARCHQOR ) CCPUBase : public CAbstractAssembler
	{
	public:

		__QOR_DECLARE_OCLASS_ID(CCPUase);

		CCPUBase( CCodeGeneratorBase* pCodeGenerator );
		virtual ~CCPUBase();

		inline CCodeGeneratorBase* getCodeGenerator() const __QCMP_THROW;
		inline CZone& getZone() __QCMP_THROW;
		inline CLogger* getLogger() const __QCMP_THROW;
		inline virtual void setLogger(CLogger* pLogger) __QCMP_THROW;
		inline Cmp_unsigned__int32 getError() const __QCMP_THROW;
		virtual void setError( Cmp_unsigned__int32 error ) __QCMP_THROW;			//Set error code.
		inline void SetComment(const char* szComment) __QCMP_THROW;
		inline Cmp_unsigned__int8* getCode() const __QCMP_THROW;
		inline bool ensureSpace() __QCMP_THROW;
		inline Cmp_int_ptr getOffset() const __QCMP_THROW;
		inline Cmp_int_ptr toOffset(Cmp_int_ptr o) __QCMP_THROW;
		inline Cmp_int_ptr getCapacity() const __QCMP_THROW;
		inline Cmp_unsigned__int8 getByteAt(Cmp_int_ptr pos) const __QCMP_THROW;
		inline Cmp_unsigned__int16 getWordAt(Cmp_int_ptr pos) const __QCMP_THROW;
		inline Cmp_unsigned__int32 getDWordAt(Cmp_int_ptr pos) const __QCMP_THROW;
		inline Cmp_unsigned__int64 getQWordAt(Cmp_int_ptr pos) const __QCMP_THROW;
		inline void setByteAt(Cmp_int_ptr pos, Cmp_unsigned__int8 x) __QCMP_THROW;
		inline void setWordAt(Cmp_int_ptr pos, Cmp_unsigned__int16 x) __QCMP_THROW;
		inline void setDWordAt(Cmp_int_ptr pos, Cmp_unsigned__int32 x) __QCMP_THROW;
		inline void setQWordAt(Cmp_int_ptr pos, Cmp_unsigned__int64 x) __QCMP_THROW;
		inline Cmp__int32 getInt32At(Cmp_int_ptr pos) const __QCMP_THROW;
		inline void setInt32At(Cmp_int_ptr pos, Cmp__int32 x) __QCMP_THROW;
		inline void _emitByte(Cmp_unsigned__int8 x) __QCMP_THROW;
		inline void _emitWord(Cmp_unsigned__int16 x) __QCMP_THROW;
		inline void _emitDWord(Cmp_unsigned__int32 x) __QCMP_THROW;
		inline void _emitQWord(Cmp_unsigned__int64 x) __QCMP_THROW;
		inline void _emitInt32(Cmp__int32 x) __QCMP_THROW;
		inline void _emitSysInt( Cmp_int_ptr x ) __QCMP_THROW;
		inline void _emitSysUInt( Cmp_uint_ptr x ) __QCMP_THROW;

		bool canEmit() __QCMP_THROW;
		void embed( const void* data, Cmp_uint_ptr size ) __QCMP_THROW;

		static const char* getErrorCodeAsString( Cmp_unsigned__int32 error ) __QCMP_THROW;

	protected:

		Cmp_unsigned__int32 m_uiError;						//Last error code.
		CZone m_Zone;										//Zone memory management.
		CCodeGeneratorBase* m_pCodeGenerator;				//Code generator instance.		
		CLogger* m_pLogger;									//Logger.
		CAsmBuffer m_Buffer;								//Binary code buffer.
		const char* m_szComment;							//Comment that will be logged by next emitted instruction. After instruction is logged m_szComment is set to NULL.

		__QCS_DECLARE_NONCOPYABLE( CCPUBase );
	};

}//nsArch

#endif//ARCHQOR_CPUBASE_H_2
