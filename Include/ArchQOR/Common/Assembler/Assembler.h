//Assembler.h

// Copyright (c) 2008-2010, Petr Kobalicek <kobalicek.petr@gmail.com>
// Copyright (c) Querysoft Limited 2012
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//A base class for low level JIT assemblers

#ifndef ARCHQOR_ASSEMBLER_H_2
#define ARCHQOR_ASSEMBLER_H_2

#include "CompilerQOR.h"
#include "CodeQOR/Macros/ClassIdentityMacros.h"
#include "CodeQOR/DataTypes/GUID.h"

//------------------------------------------------------------------------------
namespace nsArch
{
	//------------------------------------------------------------------------------
	// Operand types that can be encoded.
	enum EOPERAND_TYPE
	{
		EOPERAND_NONE = 0x00,		// Operand is none, used only internally (not initialized Operand). This operand is not valid.
		EOPERAND_REG = 0x01,		// Operand is register.
		EOPERAND_MEM = 0x02,		// Operand is memory.
		EOPERAND_IMM = 0x04,		// Operand is immediate.
		EOPERAND_LABEL = 0x08,		// Operand is label.
		EOPERAND_VAR = 0x10			// Operand is variable.
	};

	//------------------------------------------------------------------------------
	class __QOR_INTERFACE( __ARCHQOR ) CAbstractAssembler
	{
	public:

		__QOR_DECLARE_OCLASS_ID(CAbstractAssembler);

		CAbstractAssembler();
		virtual ~CAbstractAssembler();
		CAbstractAssembler( const CAbstractAssembler& );
		CAbstractAssembler& operator = ( const CAbstractAssembler& );

		virtual Cmp_int_ptr getCodeSize() const __QCMP_THROW = 0;
		virtual Cmp_uint_ptr relocCode( void* dst ) const __QCMP_THROW = 0;
	};

}//nsArch

#endif//ARCHQOR_ASSEMBLER_H_2
