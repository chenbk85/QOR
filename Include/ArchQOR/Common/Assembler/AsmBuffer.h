//AsmBuffer.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//A specialist buffer for the JIT Assembler

#ifndef ARCHQOR_ASMBUFFER_H_2
#define ARCHQOR_ASMBUFFER_H_2

#include "CompilerQOR.h"
#include "CodeQOR/Macros/ClassIdentityMacros.h"
#include "CodeQOR/DataTypes/GUID.h"

//--------------------------------------------------------------------------------
namespace nsArch
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __ARCHQOR ) CAsmBuffer
	{

	public:

		__QOR_DECLARE_OCLASS_ID(CAsmBuffer);

		CAsmBuffer( Cmp_int_ptr growThreshold = 16 ) __QCMP_THROW;
		~CAsmBuffer() __QCMP_THROW;
		CAsmBuffer( const CAsmBuffer& src ) __QCMP_THROW;
		CAsmBuffer& operator = ( const CAsmBuffer& src ) __QCMP_THROW;

		inline Cmp_unsigned__int8* getData() const __QCMP_THROW;
		inline Cmp_unsigned__int8* getCur() const __QCMP_THROW;
		inline Cmp_unsigned__int8* getMax() const __QCMP_THROW;
		inline Cmp_int_ptr getOffset() const __QCMP_THROW;
		inline Cmp_int_ptr getCapacity() const __QCMP_THROW;
		inline Cmp_int_ptr getGrowThreshold() const __QCMP_THROW;
		inline bool ensureSpace() __QCMP_THROW;
		Cmp_int_ptr toOffset( Cmp_int_ptr o ) __QCMP_THROW;		
		bool realloc( Cmp_int_ptr to ) __QCMP_THROW;	//It's only used for growing, buffer is never reallocated to smaller number than current capacity() is.
		bool grow() __QCMP_THROW;						//Used to grow the buffer. It will typically realloc to twice size of capacity(), but if capacity() is large, it will use smaller steps.
		void clear() __QCMP_THROW;						//Clear everything, but not deallocate buffer.
		void free() __QCMP_THROW;						//Free buffer and 0 all pointers.
		Cmp_unsigned__int8* take() __QCMP_THROW;		//Take ownership of the buffer data and purge CAsmBuffer instance.
		inline void emitByte(Cmp_unsigned__int8 x) __QCMP_THROW;
		inline void emitWord(Cmp_unsigned__int16 x) __QCMP_THROW;
		inline void emitDWord(Cmp_unsigned__int32 x) __QCMP_THROW;
		inline void emitQWord(Cmp_unsigned__int64 x) __QCMP_THROW;
		inline void emitSysInt(Cmp_int_ptr x) __QCMP_THROW;
		inline void emitSysUInt(Cmp_uint_ptr x) __QCMP_THROW;
		void emitData( const void* ptr, Cmp_uint_ptr len ) __QCMP_THROW;	//Emit custom data. 

		// Get Set

		inline Cmp_unsigned__int8 getByteAt(Cmp_int_ptr pos) const __QCMP_THROW;
		inline Cmp_unsigned__int16 getWordAt(Cmp_int_ptr pos) const __QCMP_THROW;
		inline Cmp_unsigned__int32 getDWordAt(Cmp_int_ptr pos) const __QCMP_THROW;
		inline Cmp_unsigned__int64 getQWordAt(Cmp_int_ptr pos) const __QCMP_THROW;
		inline void setByteAt(Cmp_int_ptr pos, Cmp_unsigned__int8 x) __QCMP_THROW;
		inline void setWordAt(Cmp_int_ptr pos, Cmp_unsigned__int16 x) __QCMP_THROW;
		inline void setDWordAt(Cmp_int_ptr pos, Cmp_unsigned__int32 x) __QCMP_THROW;
		inline void setQWordAt(Cmp_int_ptr pos, Cmp_unsigned__int64 x) __QCMP_THROW;

	protected:		

		Cmp_unsigned__int8* m_pData;	//Beginning position of buffer.
		Cmp_unsigned__int8* m_pCur;		//Current position in buffer.		
		Cmp_unsigned__int8* m_pMax;		//Maximum position in buffer for realloc.		
		Cmp_int_ptr m_iCapacity;		//Buffer capacity (in bytes).		
		Cmp_int_ptr m_iGrowThreshold;	//Grow threshold
	};

}//nsArch

#endif//ARCHQOR_ASMBUFFER_H_2
