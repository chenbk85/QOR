//CodeGenerator.h

// Copyright (c) 2008-2010, Petr Kobalicek <kobalicek.petr@gmail.com>
// Copyright (c) Querysoft Limited 2012
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//The generic parts of the Just In Time Code Generator

#ifndef ARCHQOR_CODEGENERATOR_H_2
#define ARCHQOR_CODEGENERATOR_H_2

#include "CompilerQOR.h"
#include "Assembler.h"
#include "CodeQOR/Macros/codingmacros.h"
#include "CodeQOR/Macros/ClassIdentityMacros.h"
#include "CodeQOR/DataTypes/GUID.h"

//------------------------------------------------------------------------------
namespace nsArch
{
	class __QOR_INTERFACE(__ARCHQOR) CMemoryManager;
	class __QOR_INTERFACE(__ARCHQOR) CMemoryMarker;

	//------------------------------------------------------------------------------
	// Code generator is core class for changing behavior of code generated by Assembler or HighLevelAssembler.
	class __QOR_INTERFACE( __ARCHQOR ) CCodeGeneratorBase
	{
	public:

		__QOR_DECLARE_OCLASS_ID(CCodeGeneratorBase);

		CCodeGeneratorBase();
		virtual ~CCodeGeneratorBase();

		// Allocate memory for code generated in assembler and reloc it to target location.
		//
		// This method is universal allowing any pre-process / post-process work
		// with code generated by Assembler or Compiler. Because Compiler
		// always uses Assembler it's allowed to access only the Assembler instance.
		//
		// This method is always last step when using code generation. You can use it to allocate memory for JIT code,
		// saving code to remote process or a shared library.
		//
		// retrurns Error value, see ERROR_CODE.
		virtual Cmp_unsigned__int32 generate( void** dest, CAbstractAssembler* assembler ) = 0;

		static CCodeGeneratorBase* getGlobal();

	private:

		__QCS_DECLARE_NONCOPYABLE( CCodeGeneratorBase );
	};


	//------------------------------------------------------------------------------
	class __QOR_INTERFACE( __ARCHQOR ) CJitCodeGenerator : public CCodeGeneratorBase
	{
	public:

		__QOR_DECLARE_OCLASS_ID(CJitCodeGenerator);

		CJitCodeGenerator();

		//------------------------------------------------------------------------------
		virtual ~CJitCodeGenerator();

		//------------------------------------------------------------------------------
		// Memory Manager and Alloc Type

		// Note: These members can be ignored by all derived classes. They are here
		// only to privide default implementation. All other implementations (remote
		// code patching or making dynamic loadable libraries/executables) ignore
		// members accessed by these accessors.

		//------------------------------------------------------------------------------
		// Get the MemoryManager instance.
		inline CMemoryManager* getMemoryManager() const
		{
			return m_pMemoryManager;
		}

		//------------------------------------------------------------------------------
		// Set the MemoryManager instance.
		inline void setMemoryManager( CMemoryManager* pMemoryManager )
		{
			m_pMemoryManager = pMemoryManager;
		}

		//------------------------------------------------------------------------------
		// Get the type of allocation.
		inline Cmp_unsigned__int32 getAllocType() const
		{
			return m_uiallocType;
		}

		//------------------------------------------------------------------------------
		// Set the type of allocation.
		inline void setAllocType( Cmp_unsigned__int32 allocType )
		{
			m_uiallocType = allocType;
		}

		//------------------------------------------------------------------------------
		//Get the MemoryMarker instance.
		inline CMemoryMarker* getMemoryMarker() const
		{
			return m_pMemoryMarker;
		}

		//------------------------------------------------------------------------------
		//Set the MemoryMarker instance.
		inline void setMemoryMarker( CMemoryMarker* memoryMarker )
		{
			m_pMemoryMarker = memoryMarker;
		}

		virtual Cmp_unsigned__int32 generate( void** dest, CAbstractAssembler* assembler );

	protected:

		CMemoryManager* m_pMemoryManager;				// Memory manager.
		CMemoryMarker* m_pMemoryMarker;					// Memory Marker
		Cmp_unsigned__int32 m_uiallocType;				// Type of allocation.

	private:

		__QCS_DECLARE_NONCOPYABLE( CJitCodeGenerator );
	};

}//nsArch

#endif//ARCHQOR_CODEGENERATOR_H_2
