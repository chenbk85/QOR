//MemoryManager.h

// Copyright (c) 2008-2010, Petr Kobalicek <kobalicek.petr@gmail.com>
// Copyright (c) Querysoft Limited 2012
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following
// conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.

#ifndef ARCHQOR_VIRTUALMEMORY_H_2
#define ARCHQOR_VIRTUALMEMORY_H_2

#include "SystemQOR.h"
//#include "ArchQOR/Defs.h"
#include "SystemQOR/ExePageAllocator.h"
#include "CodeQOR/DataTypes/GUID.h"
#include "CodeQOR/Macros/ClassIdentityMacros.h"

//------------------------------------------------------------------------------
namespace nsArch
{
	// Class that helps with allocating memory for executing code
	// generated by JIT compiler.
	//
	// There are defined functions that provides facility to allocate and free
	// memory where can be executed code. If processor and operating system
	// supports execution protection then you can't run code from normally
	// malloc()'ed memory.
	//
	// Functions are internally implemented by operating system dependent way.
	// VirtualAlloc() function is used for Windows operating system and mmap()
	// for posix ones. If you want to study or create your own functions, look
	// at VirtualAlloc() or mmap() documentation (depends on you target OS).
	//
	// Under posix operating systems is also useable mprotect() function, that
	// can enable execution protection to malloc()'ed memory block.
	class __QOR_INTERFACE( __ARCHQOR ) CVirtualMemory
	{
	public:

		__QOR_DECLARE_OCLASS_ID(CVirtualMemory);

		// Allocate virtual memory.
		//
		// Pages are readable/writeable, but they are not guaranteed to be
		// executable unless 'canExecute' is true. Returns the address of
		// allocated memory, or NULL if failed.
		static void* alloc( Cmp_uint_ptr length, Cmp_uint_ptr* allocated, bool canExecute ) __QCMP_THROW;

		// Free memory allocated by alloc()
		static void free( void* addr, Cmp_uint_ptr length ) __QCMP_THROW;
		static CExePageAllocator s_OSPageAllocator;
	};

}//nsArch

#endif//ARCHQOR_VIRTUALMEMORY_H_2
