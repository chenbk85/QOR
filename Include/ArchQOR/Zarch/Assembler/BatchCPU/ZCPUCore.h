//ZCPUCore.h

// Copyright (c) 2008-2010, Petr Kobalicek <kobalicek.petr@gmail.com>
// Copyright (c) Querysoft Limited 2012, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef ARCHQOR_Z_ASSEMBLERCORE_H_1
#define ARCHQOR_Z_ASSEMBLERCORE_H_1

#include "CompilerQOR.h"
#include "ArchQOR/Zarch/Assembler/Operands/ZOperand.h"
#include "ArchQOR/Common/Assembler/BatchCPU/CPUBase.h"
#include "ArchQOR/Zarch/Assembler/ZDefs.h"
#include "TrampolineWriter.h"

//------------------------------------------------------------------------------
namespace nsArch
{
//------------------------------------------------------------------------------
namespace nsZ
{
	class __QOR_INTERFACE( __ARCHQOR ) CZCPUCore;

	//--------------------------------------------------------------------------
	//Data structure used to link linked-labels.
	struct LabelLink
	{
		LabelLink* prev;			//Previous link.
		Cmp_int_ptr offset;			//Offset.
		Cmp_int_ptr displacement;	//Inlined displacement.
		Cmp_int_ptr relocId;		//RelocId if link must be absolute when relocated.
	};

	//--------------------------------------------------------------------------
	// Label data.
	struct LabelData
	{
		Cmp_int_ptr offset;		//Label offset.
		LabelLink* links;		//Label links chain.
	};

	// --------------------------------------------------------------------------
	// RelocData

	// X86 architecture uses 32-bit absolute addressing model by memory operands,
	// but 64-bit mode uses relative addressing model (RIP + displacement). In
	// code we are always using relative addressing model for referencing labels
	// and embedded data. In 32-bit mode we must patch all references to absolute
	// address before we can call generated function. We are patching only memory
	// operands.

	//------------------------------------------------------------------------------
	//Code relocation data (relative vs absolute addresses).
	struct RelocData
	{
		//------------------------------------------------------------------------------
		enum Type
		{
			ABSOLUTE_TO_ABSOLUTE = 0,
			RELATIVE_TO_ABSOLUTE = 1,
			ABSOLUTE_TO_RELATIVE = 2,
			ABSOLUTE_TO_RELATIVE_TRAMPOLINE = 3
		};

		Cmp_unsigned__int32 type;			//Type of relocation.
		Cmp_unsigned__int32 size;			//Size of relocation (4 or 8 bytes).
		Cmp_int_ptr offset;					//Offset from code begin address.

		//------------------------------------------------------------------------------
		union							//Relative displacement or absolute address.
		{
			Cmp_int_ptr destination;	//Relative displacement from code begin address (not to @c offset).
			void* address;				//Absolute address where to jump;
		};
	};

	//------------------------------------------------------------------------------
	class __QOR_INTERFACE( __ARCHQOR ) CZCPUCore : public CCPUBase
	{
		friend class CInstEmitter;

	public:

		CZCPUCore( nsArch::CCodeGeneratorBase* codeGenerator ) __QCMP_THROW;
		virtual ~CZCPUCore() __QCMP_THROW;

		//Properties
		Cmp_unsigned__int32 getProperty( Cmp_unsigned__int32 propertyId );					//Get assembler property.
		void setProperty( Cmp_unsigned__int32 propertyId, Cmp_unsigned__int32 value );		//Set assembler property.


		//------------------------------------------------------------------------------
		//Return current offset in buffer (same as getOffset() + getTramplineSize()).
		inline Cmp_int_ptr getCodeSize() const __QCMP_THROW
		{ 
			return m_Buffer.getOffset() + getTrampolineSize(); 
		}

		//------------------------------------------------------------------------------
		//Get size of all possible trampolines needed to successfuly generate
		//relative jumps to absolute addresses. This value is only non-zero if jmp
		//of call instructions were used with immediate operand (this means jump or
		//call absolute address directly).
		//Currently only _emitJmpOrCallReloc() method can increase trampoline size
		//value.
		inline Cmp_int_ptr getTrampolineSize() const __QCMP_THROW
		{ 
			return m_iTrampolineSize; 
		}

		
		void clear() __QCMP_THROW;							//Clear everything, but not deallocate buffers.
		void free() __QCMP_THROW;							//Free internal buffer and NULL all pointers.
		Cmp_unsigned__int8* takeCode() __QCMP_THROW;		//Take internal code buffer and NULL all pointers (you take the ownership).

		//------------------------------------------------------------------------------
		//Emit single opCode without operands.
		inline void _emitOpCode( Cmp_unsigned__int32 opCode ) __QCMP_THROW
		{
		}


	protected:

		Cmp_unsigned__int32 m_uiProperties;		//Properties.
		Cmp_unsigned__int32 m_uiEmitOptions;	//Emit flags for next instruction (cleared after emit).

		Cmp_int_ptr m_iTrampolineSize;			//Size of possible trampolines.
		LabelLink* m_pUnusedLinks;				//Linked list of unused links (LabelLink* structures)


	public:

		nsCodeQOR::PodVector< LabelData > m_LabelData;		//Labels data.
		nsCodeQOR::PodVector< RelocData > m_RelocData;		//Relocations data.

	private:

		CZCPUCore( const CZCPUCore& src );//no copy constructor
		CZCPUCore& operator = ( const CZCPUCore& src );//no assignment

	};

}//nsZ
}//nsArch

#endif//ARCHQOR_Z_ASSEMBLERCORE_H_1
