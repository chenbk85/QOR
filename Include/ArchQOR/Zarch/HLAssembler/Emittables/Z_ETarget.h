//Z_ETarget.h

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

// 

#ifndef ARCHQOR_Z_ETARGET_H_1
#define ARCHQOR_Z_ETARGET_H_1

#include "CompilerQOR.h"
#include "ArchQOR/Common/HLAssembler/Emittables/Emittable.h"

//------------------------------------------------------------------------------
namespace nsArch
{
namespace nsZ
{
	class __QOR_INTERFACE( __ARCHQOR ) CLabel;
	class __QOR_INTERFACE( __ARCHQOR ) CZHLAIntrinsics;
	class __QOR_INTERFACE( __ARCHQOR ) CZHLAContext;
	class __QOR_INTERFACE( __ARCHQOR ) CEJmp;
	class StateData;

	//------------------------------------------------------------------------------
	// Target - the bound label.
	class __QOR_INTERFACE( __ARCHQOR ) CETarget : public nsArch::CEmittable
	{
	public:

		CETarget( nsArch::CHighLevelAssemblerBase* c, const CLabel& target ) __QCMP_THROW;
		virtual ~CETarget() __QCMP_THROW;

		virtual void prepare( CHLAssemblerContextBase& cc ) __QCMP_THROW;
		virtual CEmittable* translate( CHLAssemblerContextBase& cc ) __QCMP_THROW;
		virtual void emit( CHighLevelAssemblerBase& a ) __QCMP_THROW;

		virtual int getMaxSize() const __QCMP_THROW;

		//------------------------------------------------------------------------------
		// Get first jmp instruction.
		inline CEJmp* getFrom() const __QCMP_THROW 
		{ 
			return m_pFrom; 
		}

		//------------------------------------------------------------------------------
		inline void setFrom( CEJmp* pFrom ) __QCMP_THROW
		{
			m_pFrom = pFrom;
		}

		//------------------------------------------------------------------------------
		// Get register allocator state for this target.
		inline StateData* getState() const __QCMP_THROW 
		{ 
			return m_pState; 
		}

		//------------------------------------------------------------------------------
		// Set register allocator state for this target.
		inline void setState( StateData* pState ) __QCMP_THROW 
		{ 
			m_pState = pState; 
		}

		//------------------------------------------------------------------------------
		// Get number of jumps to this target.
		inline Cmp_unsigned__int32 getJumpsCount() const __QCMP_THROW 
		{ 
			return m_uiJumpsCount; 
		}

		//------------------------------------------------------------------------------
		// Increment number of jumps to this target.
		inline Cmp_unsigned__int32 IncrementJumpsCount() __QCMP_THROW 
		{ 
			return m_uiJumpsCount++; 
		}

	protected:
		
		CEJmp* m_pFrom;							// First jump instruction that points to this target (label).
		StateData* m_pState;					// State at this location.
		Cmp_unsigned__int32 m_uiJumpsCount;		// Count of jumps to this target (label).

	private:

		__QCS_DECLARE_NONCOPYABLE( CETarget );
	};

}//nsZ
}//nsArch

#endif//ARCHQOR_Z_ETARGET_H_1
