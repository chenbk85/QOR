//WinQLProcessBootStrap.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Defines a Windows specific bootstrap object for executable process modules

#ifndef WINQL_PROCESS_BOOTSTRAP_H_1
#define WINQL_PROCESS_BOOTSTRAP_H_1

#include "WinQL/WinQL.h"
#include "WinQL/Application/Process/WinQLProcess.h"
#include "WinQL/Application/Threading/WinQLThread.h"
#include "WinQL/Bootstrap/WinQLModuleBootstrap.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	typedef void (__cdecl* unexpected_handler)();

	//--------------------------------------------------------------------------------
	typedef struct __vcrt_ptd
	{
		// C++ Exception Handling (EH) state
		unsigned long      _NLG_dwCode;      // Required by NLG routines
		unexpected_handler _unexpected;      // unexpected() routine
		void*              _translator;      // S.E. translator
		void*              _purecall;        // called when pure virtual happens
		void*              _curexception;    // current exception
		void*              _curcontext;      // current exception context
		int                _ProcessingThrow; // for uncaught_exception
		void*              _curexcspec;      // for handling exceptions thrown from std::unexpected
		int                _cxxReThrow;      // true if it's a rethrown C++ exception

#if defined _M_X64 || defined _M_ARM || defined _M_ARM64
		void*              _pExitContext;
		void*              _pUnwindContext;
		void*              _pFrameInfoChain;
		uintptr_t          _ImageBase;
		uintptr_t          _ThrowImageBase;
		void*              _pForeignException;
#elif defined _M_IX86
		void*              _pFrameInfoChain;
#endif

	} __vcrt_ptd;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CProcessBootStrap : public CModuleBootStrap
	{

	public:

		CProcessBootStrap();
		virtual ~CProcessBootStrap();
		
		virtual void InitStatic( void );
		void ParseCommandLine( void );

	public:

		nsWin32::STARTUPINFO m_StartupInfo;
		TCHAR* m_szCommandLine;
		int m_iArgCount;
		TCHAR** m_pArgsList;
		TCHAR** m_pEnvList;

	protected:

		nsCodeQOR::CTLinkedList< nsWin32::CDll > GetModuleList( void );

	private:

		void* GetEnvironmentA( void );
		static void parse_cmdline( TCHAR* cmdstart, TCHAR** argv, TCHAR* args, int* numargs, int* numchars );
		int _setargv( void );
		int GetMainArgs( int dowildcard );
		int setenvp( void );

		CProcessBootStrap( const CProcessBootStrap& );
		CProcessBootStrap& operator = ( const CProcessBootStrap& );
	};

}//nsWin32

#endif//WINQL_PROCESS_BOOTSTRAP_H_1

