//AcceleratorTable.h

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_GUI_ACCELTABLE_H_3
#define WINQL_GUI_ACCELTABLE_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "CodeQOR/Macros/CodingMacros.h"
#include "WinQL/Application/User/WinQLUserObject.h"
#include "WinQL/Definitions/Handles.h"
#include "WinQL/GUI/GUI.h"
#include "WinQL/CodeServices/Handles/WinQLHandleMap.h"
#include "WinQL/CodeServices/Handles/WinQLRAIISessionHandle.h"
#include "WinQL/GUI/Window.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	class __QOR_INTERFACE( __WINQAPI ) CUser32;
}

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	struct Accel 
	{
		#ifndef _MAC
			unsigned char fVirt;               
			unsigned short key;
			unsigned short cmd;
		#else
			unsigned short fVirt;
			unsigned short key;
			unsigned long cmd;
		#endif
	};

	class __QOR_INTERFACE( __WINQL ) CAcceleratorTable;

	typedef CRAIISessionHandle CAccelHandle;
	typedef nsWin32::CTHandleMap< CAccelHandle::refType, CAcceleratorTable > CAcceleratorHandleMap;

	extern __QCMP_DECLARE_PERTHREAD CAcceleratorHandleMap* p_tAcceleratorTableHandleMap;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CAcceleratorTable
	{
	public:

		typedef nsCodeQOR::CTLRef< CAcceleratorTable > refType;

		__QOR_DECLARE_OCLASS_ID( CAcceleratorTable );
			
		CAcceleratorTable( nsWin32::Accel* lpaccl, int cEntries );
		CAcceleratorTable( nsWin32::InstanceHandle hInstance, const TCHAR* lpTableName );
		virtual ~CAcceleratorTable();
		static refType Create( nsCodeQOR::CTArray< nsWin32::Accel >& aAccel );
		static refType Load( nsWin32::InstanceHandle hInstance, const TCHAR* lpTableName );		
		int Copy( nsWin32::Accel* lpAccelDst, int cAccelEntries );
		int Translate( COSWindow::refType Wnd, nsWin32::MSG* lpMsg );
		CUserObject Security();
		int Status( void );

		static refType FromHandle( CAccelHandle::refType hAccel );
		CAccelHandle::refType Handle( void );		

	protected:

		CAccelHandle m_Handle;
		int m_iStatus;

		void Init( void );
		void Uninit( void );

		CAcceleratorTable( CAccelHandle::refType src );

	private:			

		CAcceleratorTable();
		nsWinQAPI::CUser32& m_User32Library;

		__QCS_DECLARE_NONCOPYABLE( CAcceleratorTable );

	};

}//nsWin32

#endif//WINQL_GUI_ACCELTABLE_H_3
