//ImageList.h

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_GUI_IMAGELIST_H_3
#define WINQL_GUI_IMAGELIST_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/Definitions/Handles.h"
#include "WinQL/Definitions/Security.h"
#include "WinQL/GUI/GUI.h"
#include "WinQL/GUI/Icon.h"
#include "WinQL/GUI/Window.h"
#include "WinQL/Application/Graphics/WinQLBitmap.h"
#include "WinQL/Application/Graphics/WinQLDeviceContext.h"
#include "WinQL/CodeServices/Handles/WinQLHandleMap.h"
#include "WinQL/CodeServices/Handles/WinQLRAIISessionHandle.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	class __QOR_INTERFACE( __WINQAPI ) CComCtl32;
}

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	typedef struct _IMAGELISTDRAWPARAMS
	{
		unsigned long cbSize;
		CImageListHandle::refType himl;
		int i;
		CDCHandle::refType hdcDst;
		int x;
		int y;
		int cx;
		int cy;
		int xBitmap;        // x offest from the upperleft of bitmap
		int yBitmap;        // y offset from the upperleft of bitmap
		unsigned long rgbBk;
		unsigned long rgbFg;
		unsigned int fStyle;
		unsigned long dwRop;
#	if (_WIN32_IE >= 0x0501)
		unsigned long fState;
		unsigned long Frame;
		unsigned long crEffect;
#	endif
	} IMAGELISTDRAWPARAMS, *LPIMAGELISTDRAWPARAMS;

#ifndef CCSIZEOF_STRUCT
#	define CCSIZEOF_STRUCT(structname, member)  (((int)((LPBYTE)(&((structname*)0)->member) - ((LPBYTE)((structname*)0)))) + sizeof(((structname*)0)->member))
#endif

#define IMAGELISTDRAWPARAMS_V3_SIZE CCSIZEOF_STRUCT(IMAGELISTDRAWPARAMS, dwRop)

	//--------------------------------------------------------------------------------
	typedef struct _IMAGEINFO
	{
		CBitmapHandle::refType hbmImage;
		CBitmapHandle::refType hbmMask;
		int     Unused1;
		int     Unused2;
		nsWin32::RECT    rcImage;
	} IMAGEINFO, *LPIMAGEINFO;

	class __QOR_INTERFACE( __WINQL ) CImageList;

	typedef CRAIISessionHandle CImageListHandle;
	typedef CTHandleMap< CImageListHandle::refType, CImageList > CImageListHandleMap;

	extern __QCMP_DECLARE_PERTHREAD CImageListHandleMap* p_tImageListHandleMap;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CImageList
	{
	public:

		typedef nsCodeQOR::CTLRef< CImageList > refType;

		__QOR_DECLARE_OCLASS_ID( CImageList );
			
		CImageList( int cx, int cy, unsigned int flags, int cInitial, int cGrow );
		CImageList( const CImageList& Src );
		CImageList( InstanceHandle hi, const TCHAR* lpbmp, int cx, int cGrow, unsigned long crMask, unsigned int uType, unsigned int uFlags );
		CImageList( CImageList& Im1, int i1, CImageList& Im2, int i2, int dx, int dy );			
		CImageList( void* pstm );
		CImageList( long& hr, unsigned long dwFlags, void* pstm, const nsWin32::GUID& riid, void** ppv );
		static refType Load( InstanceHandle hi, const TCHAR* lpbmp, int cx, int cGrow, unsigned long crMask, unsigned int uType, unsigned int uFlags );
		static refType Create( int cx, int cy, unsigned int uiFlags, int cInitial, int cGrow );
		static refType Merger( CImageList& Im1, int i1, CImageList& Im2, int i2, int dx, int dy );
		static refType Read( void* pstm );
		static refType ReadEx( long& hr, unsigned long dwFlags, void* pstm, const nsWin32::GUID& riid, void** ppv );
		virtual ~CImageList();
		long QueryInterface( const nsWin32::GUID& riid, void** ppv );
		int Add( CBitmap::refType bmImage, CBitmap::refType bmMask );
		int AddIcon( CIcon::refType Icon );
		int AddMasked( CBitmap::refType bmImage, unsigned long crMask );
		bool BeginDrag( int iTrack, int dxHotspot, int dyHotspot );
		bool Copy( CImageList& IlSrc, int iDst, int iSrc, unsigned int uFlags );
		bool DragEnter( COSWindow::refType hwndLock, int x, int y );
		bool DragLeave( COSWindow::refType hwndLock );
		bool DragMove( int x, int y );
		bool DragShowNolock( bool fShow );
		bool Draw( int i, CDeviceContext::refType hdcDst, int x, int y, unsigned int fStyle );
		bool DrawEx( int i, CDeviceContext::refType hdcDst, int x, int y, int dx, int dy, unsigned long rgbBk, unsigned long rgbFg, unsigned int fStyle );
		bool DrawIndirect( nsWin32::IMAGELISTDRAWPARAMS* pimldp );
		void EndDrag( void );
		unsigned long GetBkColor( void );
		CImageList::refType GetDragImage( nsWin32::POINT* ppt, nsWin32::POINT* pptHotspot );
		CIcon::refType GetIcon( int i, unsigned int flags );
		bool GetIconSize( int* cx, int* cy );
		int GetImageCount( void );
		bool GetImageInfo( int i, nsWin32::IMAGEINFO* pImageInfo );
		bool Remove( int i );
		bool Replace( int i, CBitmap::refType bmImage, CBitmap::refType bmMask );
		int ReplaceIcon( int i, CIcon::refType Icon );
		unsigned long SetBkColor( unsigned long clrBk );
		bool SetDragCursorImage( int iDrag, int dxHotspot, int dyHotspot );
		bool SetIconSize( int cx, int cy );
		bool SetImageCount( unsigned int uNewCount );
		bool SetOverlayImage( int iImage, int iOverlay );
		bool Write( void* pstm );
		long WriteEx( unsigned long dwFlags, void* pstm );
		refType Ref( void );

		CImageListHandle::refType Handle( void );
		static refType FromHandle( CImageListHandle::refType hImageList );

	protected:

		CImageListHandle m_Handle;

		CImageList( CImageListHandle::refType hSrc );
		void Init( void );
		void Uninit( void );

	private:			

		nsWinQAPI::CComCtl32& m_ComCtl32Library;

		__QCS_DECLARE_NONASSIGNABLE( CImageList );
	};


}//nsWin32

#endif//WINQL_GUI_IMAGELIST_H_3
