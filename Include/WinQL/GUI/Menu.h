//Menu.h

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_GUI_MENU_H_3
#define WINQL_GUI_MENU_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/Definitions/Handles.h"
#include "WinQL/Application/Graphics/WinQLRectangle.h"
#include "WinQL/GUI/GUI.h"
#include "WinQL/Application/User/WinQLUserObject.h"
#include "WinQL/CodeServices/Handles/WinQLHandleMap.h"
#include "WinQL/CodeServices/Handles/WinQLRAIISessionHandle.h"
#include "WinQL/CodeServices/Text/WinString.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	class __QOR_INTERFACE( __WINQAPI ) CUser32;
}

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	typedef struct tagMENUINFO
	{
		unsigned long cbSize;
		unsigned long fMask;
		unsigned long dwStyle;
		unsigned int cyMax;
		void* hbrBack;
		unsigned long dwContextHelpID;
		Cmp_ulong_ptr dwMenuData;
	}   MENUINFO, *LPMENUINFO;
	typedef MENUINFO const *LPCMENUINFO;

	//--------------------------------------------------------------------------------
	typedef struct tagMENUITEMINFO
	{
		unsigned int cbSize;
		unsigned int fMask;
		unsigned int fType;         // used if MIIM_TYPE (4.0) or MIIM_FTYPE (>4.0)
		unsigned int fState;        // used if MIIM_STATE
		unsigned int wID;           // used if MIIM_ID
		void* hSubMenu;		// used if MIIM_SUBMENU
		void* hbmpChecked;   // used if MIIM_CHECKMARKS
		void* hbmpUnchecked; // used if MIIM_CHECKMARKS
		Cmp_ulong_ptr dwItemData;   // used if MIIM_DATA
		TCHAR* dwTypeData;			// used if MIIM_TYPE (4.0) or MIIM_STRING (>4.0)
		unsigned int cch;           // used if MIIM_TYPE (4.0) or MIIM_STRING (>4.0)
#if( WINVER >= 0x0500 )
		void*  hbmpItem;      // used if MIIM_BITMAP
#endif//WINVER >= 0x0500
	}   MENUITEMINFO, *LPMENUITEMINFO;

	//--------------------------------------------------------------------------------
	typedef struct tagTPMPARAMS
	{
		unsigned int cbSize;		// Size of structure
		nsWin32::RECT rcExclude;	// Screen coordinates of rectangle to exclude when positioning
	}   TPMPARAMS;
	typedef TPMPARAMS *LPTPMPARAMS;

	//--------------------------------------------------------------------------------
	//forward declare these variant menu classes so they can be declared friends
	class __QOR_INTERFACE( __WINQL_GUI ) CPopupMenu;
	class __QOR_INTERFACE( __WINQL_GUI ) CSystemMenu;
	class __QOR_INTERFACE( __WINQL_GUI ) CMenu;
	class __QOR_INTERFACE( __WINQL_GUI ) COSWindow;

	typedef CRAIISessionHandle CMenuHandle;
	typedef nsWin32::CTHandleMap< CMenuHandle::refType, CMenu > CMenuHandleMap;

	extern __QCMP_DECLARE_PERTHREAD CMenuHandleMap* p_tMenuHandleMap;


	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CMenu
	{
		//Declare these variants as friends to enable them to access the private API wrapper
		friend class CPopupMenu;
		friend class CSystemMenu;

	public:

		typedef nsCodeQOR::CTLRef< CMenu > refType;

		__QCMP_STATIC_CONSTANT( int, _MIIM_STATE			= 0x00000001 );
		__QCMP_STATIC_CONSTANT( int, _MIIM_ID				= 0x00000002 );
		__QCMP_STATIC_CONSTANT( int, _MIIM_SUBMENU			= 0x00000004 );
		__QCMP_STATIC_CONSTANT( int, _MIIM_CHECKMARKS		= 0x00000008 );
		__QCMP_STATIC_CONSTANT( int, _MIIM_TYPE				= 0x00000010 );
		__QCMP_STATIC_CONSTANT( int, _MIIM_DATA				= 0x00000020 );
		__QCMP_STATIC_CONSTANT( int, _MIIM_STRING			= 0x00000040 );
		__QCMP_STATIC_CONSTANT( int, _MIIM_BITMAP			= 0x00000080 );
		__QCMP_STATIC_CONSTANT( int, _MIIM_FTYPE			= 0x00000100 );

		//Flags
		__QCMP_STATIC_CONSTANT( int, _MF_INSERT           = 0x00000000L	  );
		__QCMP_STATIC_CONSTANT( int, _MF_CHANGE           = 0x00000080L	  );
		__QCMP_STATIC_CONSTANT( int, _MF_APPEND           = 0x00000100L	  );
		__QCMP_STATIC_CONSTANT( int, _MF_DELETE           = 0x00000200L	  );
		__QCMP_STATIC_CONSTANT( int, _MF_REMOVE           = 0x00001000L	  );
		__QCMP_STATIC_CONSTANT( int, _MF_BYCOMMAND        = 0x00000000L	  );
		__QCMP_STATIC_CONSTANT( int, _MF_BYPOSITION       = 0x00000400L	  );
		__QCMP_STATIC_CONSTANT( int, _MF_SEPARATOR        = 0x00000800L	  );
		__QCMP_STATIC_CONSTANT( int, _MF_ENABLED          = 0x00000000L	  );
		__QCMP_STATIC_CONSTANT( int, _MF_GRAYED           = 0x00000001L	  );
		__QCMP_STATIC_CONSTANT( int, _MF_DISABLED         = 0x00000002L	  );
		__QCMP_STATIC_CONSTANT( int, _MF_UNCHECKED        = 0x00000000L	  );
		__QCMP_STATIC_CONSTANT( int, _MF_CHECKED          = 0x00000008L	  );
		__QCMP_STATIC_CONSTANT( int, _MF_USECHECKBITMAPS  = 0x00000200L	  );
		__QCMP_STATIC_CONSTANT( int, _MF_STRING           = 0x00000000L	  );
		__QCMP_STATIC_CONSTANT( int, _MF_BITMAP           = 0x00000004L	  );
		__QCMP_STATIC_CONSTANT( int, _MF_OWNERDRAW        = 0x00000100L	  );
		__QCMP_STATIC_CONSTANT( int, _MF_POPUP            = 0x00000010L	  );
		__QCMP_STATIC_CONSTANT( int, _MF_MENUBARBREAK     = 0x00000020L	  );
		__QCMP_STATIC_CONSTANT( int, _MF_MENUBREAK        = 0x00000040L	  );
		__QCMP_STATIC_CONSTANT( int, _MF_UNHILITE         = 0x00000000L	  );
		__QCMP_STATIC_CONSTANT( int, _MF_HILITE           = 0x00000080L	  );
		__QCMP_STATIC_CONSTANT( int, _MF_DEFAULT          = 0x00001000L	  );
		__QCMP_STATIC_CONSTANT( int, _MF_SYSMENU          = 0x00002000L	  );
		__QCMP_STATIC_CONSTANT( int, _MF_HELP             = 0x00004000L	  );
		__QCMP_STATIC_CONSTANT( int, _MF_RIGHTJUSTIFY     = 0x00004000L	  );
		__QCMP_STATIC_CONSTANT( int, _MF_MOUSESELECT      = 0x00008000L	  );
		__QCMP_STATIC_CONSTANT( int, _MF_END              = 0x00000080L  	  );
		__QCMP_STATIC_CONSTANT( int, _MFT_STRING          = _MF_STRING		  );
		__QCMP_STATIC_CONSTANT( int, _MFT_BITMAP          = _MF_BITMAP		  );
		__QCMP_STATIC_CONSTANT( int, _MFT_MENUBARBREAK    = _MF_MENUBARBREAK );
		__QCMP_STATIC_CONSTANT( int, _MFT_MENUBREAK       = _MF_MENUBREAK	  );
		__QCMP_STATIC_CONSTANT( int, _MFT_OWNERDRAW       = _MF_OWNERDRAW	  );
		__QCMP_STATIC_CONSTANT( int, _MFT_RADIOCHECK      = 0x00000200L	  );
		__QCMP_STATIC_CONSTANT( int, _MFT_SEPARATOR       = _MF_SEPARATOR	  );
		__QCMP_STATIC_CONSTANT( int, _MFT_RIGHTORDER      = 0x00002000L	  );
		__QCMP_STATIC_CONSTANT( int, _MFT_RIGHTJUSTIFY    = _MF_RIGHTJUSTIFY );
		__QCMP_STATIC_CONSTANT( int, _MFS_GRAYED          = 0x00000003L	  );
		__QCMP_STATIC_CONSTANT( int, _MFS_DISABLED        = _MFS_GRAYED	  );
		__QCMP_STATIC_CONSTANT( int, _MFS_CHECKED         = _MF_CHECKED	  );
		__QCMP_STATIC_CONSTANT( int, _MFS_HILITE          = _MF_HILITE		  );
		__QCMP_STATIC_CONSTANT( int, _MFS_ENABLED         = _MF_ENABLED	  );
		__QCMP_STATIC_CONSTANT( int, _MFS_UNCHECKED       = _MF_UNCHECKED	  );
		__QCMP_STATIC_CONSTANT( int, _MFS_UNHILITE        = _MF_UNHILITE	  );
		__QCMP_STATIC_CONSTANT( int, _MFS_DEFAULT         = _MF_DEFAULT	  );

		//Menu Drag return codes
		__QCMP_STATIC_CONSTANT( int, _MND_CONTINUE        = 0 );
		__QCMP_STATIC_CONSTANT( int, _MND_ENDMENU         = 1 );

		//Menu Char return codes
		__QCMP_STATIC_CONSTANT( int, _MNC_IGNORE			= 0 );
		__QCMP_STATIC_CONSTANT( int, _MNC_CLOSE				= 1 );
		__QCMP_STATIC_CONSTANT( int, _MNC_EXECUTE			= 2 );
		__QCMP_STATIC_CONSTANT( int, _MNC_SELECT			= 3 );

		__QOR_DECLARE_OCLASS_ID( CMenu );

		CMenu( );
		CMenu( COSWindow& Window );
		CMenu( CWinModule* pModule, const TCHAR* lpMenuName );
		CMenu( const void* lpMenuTemplate );
		virtual ~CMenu();

		bool Destroy( void );
		bool Append( unsigned int uFlags, Cmp_uint_ptr uIDNewItem, const TCHAR* lpNewItem );
		bool Delete( unsigned int uPosition, unsigned int uFlags );
		unsigned long CheckItem( unsigned int uIDCheckItem, unsigned int uCheck );
		bool CheckRadioItem( unsigned int idFirst, unsigned int idLast, unsigned int idCheck, unsigned int uFlags );
		bool DrawBar( COSWindow& Window );
		bool EnableItem( unsigned int uIDEnableItem, unsigned int uEnable );
		bool End( void );
		long GetCheckMarkDimensions( void );
		unsigned int GetDefaultItem( unsigned int fByPos, unsigned int gmdiFlags );
		bool GetInfo( const nsWin32::MENUINFO* lpcmi );
		int GetItemCount( void );
		unsigned int GetItemID( int nPos );
		bool GetItemInfo( unsigned int uItem, bool fByPosition, nsWin32::LPMENUITEMINFO lpmii );
		bool GetItemRect( COSWindow& Wnd, unsigned int uItem, nsWin32::LPRECT lprcItem );
		unsigned int GetState( unsigned int uId, unsigned int uFlags );
		int GetString( unsigned int uIDItem, CTString& String, int nMaxCount, unsigned int uFlag );
		refType GetSubMenu( int nPos );
		bool HiliteItem( COSWindow& Wnd, unsigned int uItemHilite, unsigned int uHilite );
		bool Insert( unsigned int uPosition, unsigned int uFlags, void* uIDNewItem, const TCHAR* lpNewItem );
		bool InsertItem( unsigned int uItem, bool fByPosition, nsWin32::MENUITEMINFO const* lpmii );
		bool IsMenu( void );
		int ItemFromPoint( COSWindow& Wnd, nsWin32::POINT ptScreen );
		bool Modify( unsigned int uPosition, unsigned int uFlags, void* uIDNewItem, const TCHAR* lpNewItem );
		bool Remove( unsigned int uPosition, unsigned int uFlags );
		bool Set( COSWindow& Wnd );
		bool SetDefaultItem( unsigned int uItem, unsigned int fByPos );
		bool SetInfo( const nsWin32::MENUINFO* lpcmi );
		bool SetItemBitmaps( unsigned int uPosition, unsigned int uFlags, CBitmap& BitmapUnchecked, CBitmap& BitmapChecked );
		bool SetItemInfo( unsigned int uItem, bool fByPosition, nsWin32::LPMENUITEMINFO lpmii );
		bool SetContextHelpId( unsigned long dwContextHelpId );
		unsigned long GetContextHelpId( void );
		CUserObject Security( void);		
		int Status( void );
		refType Ref( void );
		static CMenu::refType FromWindow( COSWindow& Window );

		CMenuHandle::refType Handle();
		static CMenu::refType FromHandle( CMenuHandle::refType hMenu );        

	protected:

		CMenu( CMenuHandle::refType hMenu );			
		void Init( void );
		void Uninit( void );

		bool m_bOwnsHandle;
		int m_iStatus;
		CMenuHandle m_Handle;

	private:

		nsWinQAPI::CUser32& m_User32Library;

		CMenu( CMenu const& src );
		CMenu& operator = ( const CMenu& src );
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CPopupMenu : public CMenu
	{
	public:

		//--------------------------------------------------------------------------------
		CPopupMenu();
		virtual ~CPopupMenu();
		bool Track( unsigned int uFlags, int x, int y, int nReserved, COSWindow& Wnd, COSWindow& prcRect );
		bool Track( unsigned int fuFlags, int x, int y, COSWindow& Wnd, nsWin32::LPTPMPARAMS lptpm );

	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CSystemMenu : public CMenu
	{
	public:
			
		CSystemMenu( COSWindow& Wnd, bool bRevert );
		virtual ~CSystemMenu();

	};

}//nsWin32

#endif//WINQL_GUI_MENU_H_3
