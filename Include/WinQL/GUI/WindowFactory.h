//WindowFactory.h

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Win32 Window Factory

#ifndef WINQL_GUI_WINDOWFACTORY_H_3
#define WINQL_GUI_WINDOWFACTORY_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/Application/Process/WinQLProcess.h"
#include "WinQL/GUI/WindowClass.h"
#include "WinQL/GUI/Controllers/BaseWindowController.h"
#include "WinQL/GUI/Menu.h"
#include "WinQL/GUI/VisualModels/WindowModel.h"
#include "WinQL/GUI/VisualModels/FrameWindowModel.h"
#include "WinQL/GUI/GUIFactory.h"
#include "WinQL/GUI/Views/MenuFactory.h"

//--------------------------------------------------------------------------------
namespace nsAppocrita
{
	class __QOR_INTERFACE( __APPOCRITA ) CController;
}

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	template< class TVisualModel, class TProduct >
	class CTWindowFactory : public CTGUIClassFactory< TVisualModel, TProduct >
	{
	public:

		//--------------------------------------------------------------------------------
		CTWindowFactory() : CTGUIClassFactory< TVisualModel, TProduct >()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::CTWindowFactory" );
			m_pUserParam = 0;
			m_Style = 0; //TODO: Set Window defaults
			m_StyleEx = 0;//TODO: Set Window defaults
		}

		//--------------------------------------------------------------------------------
		virtual ~CTWindowFactory()
		{
			_WINQ_SFCONTEXT( "CWindowFactory::~CWindowFactory" );
		}
		
		virtual TProduct* Create( CWindowClass*, CMenu* ) = 0;

		//--------------------------------------------------------------------------------
		virtual void* Instance( void )
		{
			CWindowClass* pWndClass = GetWindowClass();
			CMenu* pMenu = GetMenu();
			SetupStyle();

			void* pResult = Create( pWndClass, pMenu );
			return pResult;
		}

		//--------------------------------------------------------------------------------
		void SetStyle( unsigned long dwStyle )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetStyle" );
			m_Style = dwStyle;
		}

		//--------------------------------------------------------------------------------
		unsigned long GetStyle()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetStyle" );
			return m_Style;
		}

		//--------------------------------------------------------------------------------
		bool GetStyleBits( unsigned long dwStyle )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetStyleBits" );
			return ( ( m_Style & dwStyle ) == dwStyle );
		}

		//--------------------------------------------------------------------------------
		bool GetStyleExBits( unsigned long dwStyleEx )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetStyleBitsEx" );
			return ( ( m_StyleEx & dwStyleEx ) == dwStyleEx );
		}

		//--------------------------------------------------------------------------------
		void SetStyleBits( unsigned long dwStyle, bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetStyleBits" );
			if( bFlag )
			{
				m_Style |= dwStyle;
			}
			else
			{
				m_Style &= (~dwStyle);
			}
		}

		//--------------------------------------------------------------------------------
		void SetStyleExBits( unsigned long dwStyleEx, bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetStyleExBits" );
			if( bFlag )
			{
				m_StyleEx |= dwStyleEx;
			}
			else
			{
				m_StyleEx &= (~dwStyleEx);
			}
		}

		//--------------------------------------------------------------------------------
		bool GetBorder()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetBorder" );
			return ( m_Style & COSWindow::eWSBorder ) ? true : false;
		}

		//--------------------------------------------------------------------------------
		void SetBorder( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetBorder" );
			SetStyleBits( COSWindow::eWSBorder, bFlag );
		}

		//--------------------------------------------------------------------------------
		bool GetCaption()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetCaption" );
			return GetStyleBits( COSWindow::eWSCaption );
		}

		//--------------------------------------------------------------------------------
		void SetCaption( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetCaption" );
			SetStyleBits( COSWindow::eWSCaption, bFlag );
		}

		//--------------------------------------------------------------------------------
		bool GetChild()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetChild" );
			return GetStyleBits( COSWindow::eWSChild );
		}

		//--------------------------------------------------------------------------------
		void SetChild( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetChild" );
			SetStyleBits( COSWindow::eWSChild, bFlag );
		}

		//--------------------------------------------------------------------------------
		bool GetClipChildren()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetClipChildren" );
			return GetStyleBits( COSWindow::eWSClipChildren );
		}

		//--------------------------------------------------------------------------------
		void SetClipChildren( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetClipChildren" );
			SetStyleBits( COSWindow::eWSClipChildren, bFlag );
		}

		//--------------------------------------------------------------------------------
		bool GetClipSiblings()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetClipSiblings" );
			return GetStyleBits( COSWindow::eWSClipSiblings );
		}

		//--------------------------------------------------------------------------------
		void SetClipSiblings( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetClipSiblings" );
			SetStyleBits( COSWindow::eWSClipSiblings, bFlag );
		}

		//--------------------------------------------------------------------------------
		bool GetDisabled()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetDisabled" );
			return GetStyleBits( COSWindow::eWSDisabled );
		}

		//--------------------------------------------------------------------------------
		void SetDisabled( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetDisabled" );
			SetStyleBits( COSWindow::eWSDisabled, bFlag );
		}

		//--------------------------------------------------------------------------------
		bool GetDlgFrame()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetDlgFrame" );
			return GetStyleBits( COSWindow::eWSDlgFrame );
		}

		//--------------------------------------------------------------------------------
		void SetDlgFrame( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetDlgFrame" );
			SetStyleBits( COSWindow::eWSDlgFrame, bFlag );
		}

		//--------------------------------------------------------------------------------
		bool GetGroup()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetGroup" );
			return GetStyleBits( COSWindow::eWSGroup );
		}

		//--------------------------------------------------------------------------------
		void SetGroup( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetGroup" );
			SetStyleBits( COSWindow::eWSGroup, bFlag );
		}

		//--------------------------------------------------------------------------------
		bool GetHScroll()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetHScroll" );
			return GetStyleBits( COSWindow::eWSHScroll );
		}

		//--------------------------------------------------------------------------------
		void SetHScroll( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetHScroll" );
			SetStyleBits( COSWindow::eWSHScroll, bFlag );
		}

		//--------------------------------------------------------------------------------
		bool GetVScroll()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetVScroll" );
			return GetStyleBits( COSWindow::eWSVScroll );
		}

		//--------------------------------------------------------------------------------
		void SetVScroll( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetVScroll" );
			SetStyleBits( COSWindow::eWSVScroll, bFlag );
		}

		//--------------------------------------------------------------------------------
		bool GetIconic()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetIconic" );
			return GetStyleBits( COSWindow::eWSIconic );
		}

		//--------------------------------------------------------------------------------
		void SetIconic( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetIconic" );
			SetStyleBits( COSWindow::eWSIconic, bFlag );
		}

		//--------------------------------------------------------------------------------
		bool GetMaximized()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetMaximized" );
			return GetStyleBits( COSWindow::eWSMaximize );
		}

		//--------------------------------------------------------------------------------
		void SetMaximized( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetMaximized" );
			SetStyleBits( COSWindow::eWSMaximize, bFlag );
		}

		//--------------------------------------------------------------------------------
		bool GetMaximizeBox()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetMaximizeBox" );
			return GetStyleBits( COSWindow::eWSMaximizeBox );
		}

		//--------------------------------------------------------------------------------
		void SetMaximizeBox( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetMaxmizeBox" );
			SetStyleBits( COSWindow::eWSMaximizeBox, bFlag );
		}

		//--------------------------------------------------------------------------------
		bool GetMinimizeBox()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetMinimizeBox" );
			return GetStyleBits( COSWindow::eWSMinimizeBox );
		}

		//--------------------------------------------------------------------------------
		void SetMinimizeBox( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetMinimizeBox" );
			SetStyleBits( COSWindow::eWSMinimizeBox, bFlag );
		}

		//--------------------------------------------------------------------------------
		bool GetOverlapped()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetOverlapped" );
			return GetStyleBits( COSWindow::eWSOverlapped );
		}

		//--------------------------------------------------------------------------------
		void SetOverlapped( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetOverlapped" );
			SetStyleBits( COSWindow::eWSOverlapped, bFlag );
		}

		//--------------------------------------------------------------------------------
		bool GetTiledWindow()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetTiledWindow" );
			return GetStyleBits( COSWindow::eWSOverlappedWindow );
		}

		//--------------------------------------------------------------------------------
		void SetTiledWindow( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetTiledWindow" );
			SetStyleBits( COSWindow::eWSOverlappedWindow, bFlag );
		}

		//--------------------------------------------------------------------------------
		bool GetPopup()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetPopup" );
			return GetStyleBits( static_cast< unsigned long >( COSWindow::eWSPopup ) );
		}

		//--------------------------------------------------------------------------------
		void SetPopup( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetPopup" );
			SetStyleBits( static_cast< unsigned long >( COSWindow::eWSPopup ), bFlag );
		}

		//--------------------------------------------------------------------------------
		bool GetPopupWindow()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetPopupWindow" );
			return GetStyleBits( static_cast< unsigned long >( COSWindow::eWSPopupWindow ) );
		}

		//--------------------------------------------------------------------------------
		void SetPopupWindow( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetPopupWindow" );
			SetStyleBits( static_cast< unsigned long >( COSWindow::eWSPopupWindow ), bFlag );
		}

		//--------------------------------------------------------------------------------
		bool GetSizeBox()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetSizeBox" );
			return GetStyleBits( COSWindow::eWSSizeBox );
		}

		//--------------------------------------------------------------------------------
		void SetSizeBox( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetSizeBox" );
			SetStyleBits( COSWindow::eWSSizeBox, bFlag );
		}

		//--------------------------------------------------------------------------------
		bool GetSysMenu()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetSysMenu" );
			return GetStyleBits( COSWindow::eWSSysMenu );
		}

		//--------------------------------------------------------------------------------
		void SetSysMenu( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetSysMenu" );
			SetStyleBits( COSWindow::eWSSysMenu, bFlag );
		}

		//--------------------------------------------------------------------------------
		bool GetTabStop()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetTabStop" );
			return GetStyleBits( COSWindow::eWSTabStop );
		}

		//--------------------------------------------------------------------------------
		void SetTabStop( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetTabStop" );
			SetStyleBits( COSWindow::eWSTabStop, bFlag );
		}

		//--------------------------------------------------------------------------------
		bool GetVisible()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetVisible" );
			return GetStyleBits( COSWindow::eWSVisible );
		}

		//--------------------------------------------------------------------------------
		void SetVisible( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetVisible" );
			SetStyleBits( COSWindow::eWSVisible, bFlag );
		}

		//--------------------------------------------------------------------------------
		void SetStyleEx( unsigned long dwStyleEx )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetStyleEx" );
			m_StyleEx = dwStyleEx;
		}

		//--------------------------------------------------------------------------------
		bool GetDialogModalFrame()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetDialogModalFrame" );
			return GetStyleExBits( COSWindow::eWSExDlgModalFrame );
		}

		//--------------------------------------------------------------------------------
		void SetDialogModalFrame( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetDialogModalFrame" );
			SetStyleExBits( COSWindow::eWSExDlgModalFrame, bFlag );
		}

		//--------------------------------------------------------------------------------
		bool GetNoParentNotify()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetNoParentNotify" );
			return GetStyleExBits( COSWindow::eWSExNoParentNotify );
		}

		//--------------------------------------------------------------------------------
		void SetNoParentNotify( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetNoParentNotify" );
			SetStyleExBits( COSWindow::eWSExNoParentNotify, bFlag );
		}

		//--------------------------------------------------------------------------------
		bool GetTopmost()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetTopmost" );
			return GetStyleBits( COSWindow::eWSExTopmost );
		}

		//--------------------------------------------------------------------------------
		void SetTopmost( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetTopmost" );
			SetStyleExBits( COSWindow::eWSExTopmost, bFlag );
		}

		//--------------------------------------------------------------------------------
		bool GetAcceptFiles()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetAcceptFiles" );
			return GetStyleExBits( COSWindow::eWSExAcceptFiles );
		}

		//--------------------------------------------------------------------------------
		void SetAcceptFiles( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetAcceptFiles" );
			SetStyleExBits( COSWindow::eWSExAcceptFiles, bFlag );
		}

		//--------------------------------------------------------------------------------
		bool GetTransparent()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetTransparent" );
			return GetStyleExBits( COSWindow::eWSExTransparent );
		}

		//--------------------------------------------------------------------------------
		void SetTransparent( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetTransparent" );
			SetStyleExBits( COSWindow::eWSExTransparent, bFlag );
		}

		//--------------------------------------------------------------------------------
		bool GetMDIChild()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetMDIChild" );
			return GetStyleExBits( COSWindow::eWSExMDIChild );
		}

		//--------------------------------------------------------------------------------
		void SetMDIChild( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetMDIChild" );
			SetStyleExBits( COSWindow::eWSExMDIChild, bFlag );
		}

		//--------------------------------------------------------------------------------
		bool GetToolWindow()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetToolWindow" );
			return GetStyleExBits( COSWindow::eWSExToolWindow );
		}

		//--------------------------------------------------------------------------------
		void SetToolWindow( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetToolWindow" );
			SetStyleExBits( COSWindow::eWSExToolWindow, bFlag );
		}

		//--------------------------------------------------------------------------------
		bool GetWindowEdge()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetWindowEdge" );
			return GetStyleExBits( COSWindow::eWSExWindowEdge );
		}

		//--------------------------------------------------------------------------------
		void SetWindowEdge( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetWindowEdge" );
			SetStyleExBits( COSWindow::eWSExWindowEdge, bFlag );
		}

		//--------------------------------------------------------------------------------
		bool GetClientEdge()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetClientEdge" );
			return GetStyleExBits( COSWindow::eWSExClientEdge );
		}

		//--------------------------------------------------------------------------------
		void SetClientEdge( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetClientEdge" );
			SetStyleExBits( COSWindow::eWSExClientEdge, bFlag );
		}

		//--------------------------------------------------------------------------------
		bool GetContextHelp()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetContextHelp" );
			return GetStyleExBits( COSWindow::eWSExContextHelp );
		}

		//--------------------------------------------------------------------------------
		void SetContextHelp( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetContextHelp" );
			SetStyleExBits( COSWindow::eWSExContextHelp, bFlag );
		}

		//--------------------------------------------------------------------------------
		bool GetRight()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetRight" );
			return GetStyleExBits( COSWindow::eWSExRight );
		}

		//--------------------------------------------------------------------------------
		void SetRight( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetRight" );
			SetStyleExBits( COSWindow::eWSExRight, bFlag );
		}

		//--------------------------------------------------------------------------------
		bool GetLeft()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetLeft" );
			return GetStyleExBits( COSWindow::eWSExLeft );
		}

		//--------------------------------------------------------------------------------
		void SetLeft( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetLeft" );
			SetStyleExBits( COSWindow::eWSExLeft, bFlag );
		}

		//--------------------------------------------------------------------------------
		bool GetRTLReading()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetRTLReading" );
			return GetStyleExBits( COSWindow::eWSExRTLReading );
		}

		//-------------------------------------------------------------------------------
		bool GetLTRReading()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetLTRReading" );
			return !GetRTLReading();
		}

		//--------------------------------------------------------------------------------
		void SetRTLReading( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetRTLReading" );
			SetStyleExBits( COSWindow::eWSExRTLReading, bFlag );
		}

		//--------------------------------------------------------------------------------
		void SetLTRReading( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetLTRReading" );
			SetStyleExBits( COSWindow::eWSExRTLReading, !bFlag );
		}

		//--------------------------------------------------------------------------------
		bool GetLeftScrollbar()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetLeftScrollbar" );
			return GetStyleBits( COSWindow::eWSExLeftScrollBar );
		}

		//--------------------------------------------------------------------------------
		bool GetRightScrollbar()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetRightScrollbar" );
			return !GetStyleBits( COSWindow::eWSExRightScrollBar );
		}

		//--------------------------------------------------------------------------------
		void SetLeftScrollbar( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetLeftScrollbar" );
			SetStyleExBits( COSWindow::eWSExLeftScrollBar, bFlag );
		}

		//--------------------------------------------------------------------------------
		void SetRightScrollbar( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetRightScrollbar" );
			SetStyleExBits( COSWindow::eWSExRightScrollBar, !bFlag );
		}

		//--------------------------------------------------------------------------------
		bool GetControlParent()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetControlParent" );
			return !GetStyleExBits( COSWindow::eWSExControlParent );
		}

		//--------------------------------------------------------------------------------
		void SetControlParent( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetControlParent" );
			SetStyleExBits( COSWindow::eWSExControlParent, bFlag );
		}

		//--------------------------------------------------------------------------------
		bool GetStaticEdge()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetStaticEdge" );
			return GetStyleExBits( COSWindow::eWSExStaticEdge );
		}

		//--------------------------------------------------------------------------------
		void SetStaticEdge( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetStaticEdge" );
			SetStyleExBits( COSWindow::eWSExStaticEdge, bFlag );
		}

		//--------------------------------------------------------------------------------
		bool GetAppWindow()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetAppWindow" );
			return GetStyleExBits( COSWindow::eWSExAppWindow );
		}

		//--------------------------------------------------------------------------------
		void SetAppWindow( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetAppWindow" );
			SetStyleExBits( COSWindow::eWSExAppWindow, bFlag );
		}

		//--------------------------------------------------------------------------------
		bool GetOverlappedWindow()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetOverlappedWindow" );
			return GetStyleExBits( COSWindow::eWSExOverlappedWindow );
		}

		//--------------------------------------------------------------------------------
		void SetOverlappedWindow( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetOverlappedWindow" );
			SetStyleExBits( COSWindow::eWSExOverlappedWindow, bFlag );
		}

		//--------------------------------------------------------------------------------
		bool GetPaletteWindow()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetPaletteWindow" );
			return GetStyleExBits( COSWindow::eWSExPaletteWindow );
		}

		//--------------------------------------------------------------------------------
		void SetPaletteWindow( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetPaletteWindow" );
			SetStyleExBits( COSWindow::eWSExPaletteWindow, bFlag );
		}

		//--------------------------------------------------------------------------------
		bool GetLayered()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetLayered" );
	#if		( _WIN32_WINNT >= 0x0500 )
			return GetStyleExBits( COSWindow::eWSExLayered );
	#else
			return false;
	#endif//( _WIN32_WINNT >= 0x0500 )
		}

		//--------------------------------------------------------------------------------
		void SetLayered( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetLayered" );
	#if		( _WIN32_WINNT >= 0x0500 )
			SetStyleExBits( COSWindow::eWSExLayered, bFlag );
	#else
			__QCMP_UNREF( bFlag );
	#endif//( _WIN32_WINNT >= 0x0500 )
		}

		//--------------------------------------------------------------------------------
		bool GetNoInheritLayout()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetNoInheritLayout" );
	#if		( WINVER >= 0x0500 )
			return GetStyleExBits( COSWindow::eWSExNoInheritLayout );
	#else
			return false;
	#endif//( WINVER >= 0x0500 )
		}

		//--------------------------------------------------------------------------------
		void SetNoInheritLayout( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetNoInheritLayout" );
	#if		( WINVER >= 0x0500 )
			SetStyleExBits( COSWindow::eWSExNoInheritLayout, bFlag );
	#else
			__QCMP_UNREF( bFlag );
	#endif//( WINVER >= 0x0500 )
		}

		//--------------------------------------------------------------------------------
		bool GetLayoutRTL()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetLayoutRTL" );
	#if		( WINVER >= 0x0500 )
			return GetStyleExBits( COSWindow::eWSExLayoutRTL );
	#else
			return false;
	#endif//( WINVER >= 0x0500 )
		}

		//--------------------------------------------------------------------------------
		void SetLayoutRTL( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetLayoutRTL" );
	#if		( WINVER >= 0x0500 )
			SetStyleExBits( COSWindow::eWSExLayoutRTL, bFlag );
	#else
			__QCMP_UNREF( bFlag );
	#endif//( WINVER >= 0x0500 )
		}

		//--------------------------------------------------------------------------------
		bool GetComposited()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetComposited" );
	#if		( _WIN32_WINNT >= 0x0501 )
			return GetStyleExBits( COSWindow::eWSExComposited );
	#else
			return false;
	#endif//( _WIN32_WINNT >= 0x0501 )
		}

		//--------------------------------------------------------------------------------
		void SetComposited( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetComposited" );
	#if		( _WIN32_WINNT >= 0x0501 )
			SetStyleExBits( COSWindow::eWSExComposited, bFlag );
	#else
			__QCMP_UNREF( bFlag );
	#endif//( _WIN32_WINNT >= 0x0501 )
		}

		//--------------------------------------------------------------------------------
		bool GetNoActivate()
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::GetNoActivate" );
	#if		( _WIN32_WINNT >= 0x0500 )
			return GetStyleExBits( COSWindow::eWSExNoActivate );
	#else
			return false;
	#endif//( _WIN32_WINNT >= 0x0500 )
		}

		//--------------------------------------------------------------------------------
		void SetNoActivate( bool bFlag )
		{
			_WINQ_SFCONTEXT( "CTWindowFactory::SetNoActivate" );
	#if		( _WIN32_WINNT >= 0x0500 )
			SetStyleExBits( COSWindow::eWSExNoActivate, bFlag );
	#else
			__QCMP_UNREF( bFlag );
	#endif//( _WIN32_WINNT >= 0x0500 )
		}

	protected:

		//--------------------------------------------------------------------------------
		virtual CMenu* GetMenu( void )
		{
			CMenuFactory MenuFactory;
			CMenu* pMenu = m_Model().m_Menu.Value() ? reinterpret_cast< CMenu* >( MenuFactory.Instance( *m_Model().m_Menu.Value() ) ) : 0;
			return pMenu;
		}

		//--------------------------------------------------------------------------------
		virtual CWindowClass* GetWindowClass( void )
		{
			//Get a Window Class Factory to get a WndClass from the WindowClassModel
			CWindowClassFactory* pWndClassFactory = dynamic_cast< CWindowClassFactory* >( ThisModule().ClassReg().GetFactory( m_Model().m_Class.Value()->m_WndClassID ) );
			CWindowClass* pWndClass = 0;
			if( pWndClassFactory )
			{
				pWndClass = reinterpret_cast< CWindowClass* >( pWndClassFactory->Instance( *(m_Model().m_Class.Value() ) ) );
			}
			return pWndClass;
		}

		//--------------------------------------------------------------------------------
		virtual void SetupStyle( void )
		{

			SetPopup( m_Model().m_Style.Value()->m_Popup.Value() );
			SetChild( m_Model().m_Style.Value()->m_Child.Value() );
			SetIconic( m_Model().m_Style.Value()->m_Minimize.Value() );
			SetVisible( m_Model().m_Style.Value()->m_Visisble.Value() );
			SetDisabled( m_Model().m_Style.Value()->m_Disabled.Value() );
			SetClipSiblings( m_Model().m_Style.Value()->m_ClipSiblings.Value() );
			SetClipChildren( m_Model().m_Style.Value()->m_ClipChildren.Value() );
			SetMaximized( m_Model().m_Style.Value()->m_Maximize.Value() );
			SetCaption( m_Model().m_Style.Value()->m_Caption.Value() );
			SetBorder( m_Model().m_Style.Value()->m_Border.Value() );
			SetDlgFrame( m_Model().m_Style.Value()->m_DlgFrame.Value() );
			SetVScroll( m_Model().m_Style.Value()->m_VScroll.Value() );
			SetHScroll( m_Model().m_Style.Value()->m_HScroll.Value() );
			SetSysMenu( m_Model().m_Style.Value()->m_SysMenu.Value() );
			SetGroup( m_Model().m_Style.Value()->m_Group.Value() );
			SetTabStop( m_Model().m_Style.Value()->m_TabStop.Value() );
			SetMinimizeBox( m_Model().m_Style.Value()->m_Minimize.Value() );
			SetMaximizeBox( m_Model().m_Style.Value()->m_MaximizeBox.Value() );
			SetOverlapped( m_Model().m_Style.Value()->m_OverlappedWindow.Value() );
			SetLeft( m_Model().m_Style.Value()->m_Left.Value() );
			SetDialogModalFrame( m_Model().m_Style.Value()->m_DlgModalFrame.Value() );
			SetNoParentNotify( m_Model().m_Style.Value()->m_NoParentNotify.Value() );
			SetTopmost( m_Model().m_Style.Value()->m_Topmost.Value() );
			SetAcceptFiles( m_Model().m_Style.Value()->m_AcceptFiles.Value() );
			SetTransparent( m_Model().m_Style.Value()->m_Transparent.Value() );
			SetMDIChild( m_Model().m_Style.Value()->m_MDIChild.Value() );
			SetToolWindow( m_Model().m_Style.Value()->m_ToolWindow.Value() );
			SetWindowEdge( m_Model().m_Style.Value()->m_WindowEdge.Value() );
			SetClientEdge( m_Model().m_Style.Value()->m_ClientEdge.Value() );
			SetContextHelp( m_Model().m_Style.Value()->m_ContextHelp.Value() );
			SetRight( m_Model().m_Style.Value()->m_Right.Value() );
			SetRTLReading( m_Model().m_Style.Value()->m_RTLReading.Value() );
			SetLeftScrollbar( m_Model().m_Style.Value()->m_LeftSrollBar.Value() );
			SetRightScrollbar( m_Model().m_Style.Value()->m_RightScrollBar.Value() );
			SetControlParent( m_Model().m_Style.Value()->m_ControlParent.Value() );
			SetStaticEdge( m_Model().m_Style.Value()->m_StaticEdge.Value() );
			SetAppWindow( m_Model().m_Style.Value()->m_AppWindow.Value() );
			SetLayered( m_Model().m_Style.Value()->m_Layered.Value() );
			SetNoInheritLayout( m_Model().m_Style.Value()->m_NoInheritLayout.Value() );
			SetLayoutRTL( m_Model().m_Style.Value()->m_LayoutRTL.Value() );
			SetComposited( m_Model().m_Style.Value()->m_Composited.Value() );
			SetNoActivate( m_Model().m_Style.Value()->m_NoActivate.Value() );
		}

		void* m_pUserParam;
		unsigned long m_Style;
		unsigned long m_StyleEx;

	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CWindowFactory : public CTWindowFactory< CWindowModel, COSWindow >
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CWindowFactory );

		CWindowFactory();
		virtual ~CWindowFactory();

		virtual COSWindow* Create( CWindowClass*, CMenu* );

	protected:

		nsCodeQOR::CSTMember< CBaseWindowController > m_Controller;

		//virtual void SetupStyle( void );
		//virtual CWindowClass* GetWindowClass( void );
		//virtual CMenu* GetMenu( void );

	public:

        void SetController( CBaseWindowController* pController );

		/*
		void SetStyle( unsigned long dwStyle );
		unsigned long GetStyle();
		bool GetStyleBits( unsigned long dwStyle );
		bool GetStyleExBits( unsigned long dwStyleEx );
		void SetStyleBits( unsigned long dwStyle, bool bFlag );
		void SetStyleExBits( unsigned long dwStyleEx, bool bFlag );

		bool GetBorder();
		void SetBorder( bool bFlag );
		bool GetCaption();
		void SetCaption( bool bFlag );
		bool GetChild();
		void SetChild( bool bFlag );
		bool GetClipChildren();
		void SetClipChildren( bool bFlag );
		bool GetClipSiblings();
		void SetClipSiblings( bool bFlag );
		bool GetDisabled();
		void SetDisabled( bool bFlag );
		bool GetDlgFrame();
		void SetDlgFrame( bool bFlag );
		bool GetGroup();
		void SetGroup( bool bFlag );
		bool GetHScroll();
		void SetHScroll( bool bFlag );
		bool GetVScroll();
		void SetVScroll( bool bFlag );
		bool GetIconic();
		void SetIconic( bool bFlag );
		bool GetMaximized();
		void SetMaximized( bool bFlag );
		bool GetMaximizeBox();
		void SetMaximizeBox( bool bFlag );
		bool GetMinimizeBox();
		void SetMinimizeBox( bool bFlag );
		bool GetOverlapped();
		void SetOverlapped( bool bFlag );
		bool GetTiledWindow();
		void SetTiledWindow( bool bFlag );
		bool GetPopup();
		void SetPopup( bool bFlag );
		bool GetPopupWindow();
		void SetPopupWindow( bool bFlag );
		bool GetSizeBox();
		void SetSizeBox( bool bFlag );
		bool GetSysMenu();
		void SetSysMenu( bool bFlag );
		bool GetTabStop();
		void SetTabStop( bool bFlag );
		bool GetVisible();
		void SetVisible( bool bFlag );
		void SetStyleEx( unsigned long dwStyleEx );
		bool GetDialogModalFrame();
		void SetDialogModalFrame( bool bFlag );
		bool GetNoParentNotify();
		void SetNoParentNotify( bool bFlag );
		bool GetTopmost();
		void SetTopmost( bool bFlag );
		bool GetAcceptFiles();
		void SetAcceptFiles( bool bFlag );
		bool GetTransparent();
		void SetTransparent( bool bFlag );
		bool GetMDIChild();
		void SetMDIChild( bool bFlag );
		bool GetToolWindow();
		void SetToolWindow( bool bFlag );
		bool GetWindowEdge();
		void SetWindowEdge( bool bFlag );
		bool GetClientEdge();
		void SetClientEdge( bool bFlag );
		bool GetContextHelp();
		void SetContextHelp( bool bFlag );
		bool GetRight();
		void SetRight( bool bFlag );
		bool GetLeft();
		void SetLeft( bool bFlag );
		bool GetRTLReading();
		bool GetLTRReading();
		void SetRTLReading( bool bFlag );
		void SetLTRReading( bool bFlag );
		bool GetLeftScrollbar();
		bool GetRightScrollbar();
		void SetLeftScrollbar( bool bFlag );
		void SetRightScrollbar( bool bFlag );
		bool GetControlParent();
		void SetControlParent( bool bFlag );
		bool GetStaticEdge();
		void SetStaticEdge( bool bFlag );
		bool GetAppWindow();
		void SetAppWindow( bool bFlag );
		bool GetOverlappedWindow();
		void SetOverlappedWindow( bool bFlag );
		bool GetPaletteWindow();
		void SetPaletteWindow( bool bFlag );
		bool GetLayered();
		void SetLayered( bool bFlag );
		bool GetNoInheritLayout();
		void SetNoInheritLayout( bool bFlag );
		bool GetLayoutRTL();
		void SetLayoutRTL( bool bFlag );
		bool GetComposited();
		void SetComposited( bool bFlag );
		bool GetNoActivate();
		void SetNoActivate( bool bFlag );

		//--------------------------------------------------------------------------------
		template< class TWindow, class TWindowClass >
		TWindow* PreCreateWindow()
		{
			TWindow* pWindow = 0;

			if( m_pWindowClass != 0 )
			{
				//pWindow = new TWindow( dynamic_cast< TWindowClass* >( m_pWindowClass ), m_pUserParam );
                //pWindow->Controller( m_pController );
				//m_pWindow = pWindow;
			}

			return pWindow;
		}
			
		void Create( const TCHAR* lpWindowName, CWindowHandle::refType hWndParent = 0 );
		*/
		//CRectangle WindowRect;

	};

	/*
    //--------------------------------------------------------------------------------
    template< class TWndClass, class TWnd >
    class __QOR_INTERFACE( __WINQL ) CTStandardWindowFactory : public CWindowFactory
    {
    public:

	    //--------------------------------------------------------------------------------
	    CTStandardWindowFactory( TWndClass* pClass = 0, unsigned long dwStyle = 0, unsigned long dwStyleEx = 0, void* pParameter = 0, CBaseWindowController* pController = 0 ) 
	    : nsWin32::nsGUI::CWindowFactory( pClass, 0, pParameter, dwStyle, dwStyleEx, pController )
	    {
	    }

	    //--------------------------------------------------------------------------------
	    virtual TWnd* Instance( CBaseWindowController* pController, const TCHAR* lpWindowName, nsAppocrita::CController* pParentController = 0 )
	    {
		    WindowHandle hWndParent = 0;

			return 0;
	    }

    };
	*/

}//nsWin32

#endif//WINQL_GUI_WINDOWFACTORY_H_3

