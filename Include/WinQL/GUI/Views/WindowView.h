//WindowView.h

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//View for window

#ifndef WINQL_GUI_VIEWS_WINDOW_H_3
#define WINQL_GUI_VIEWS_WINDOW_H_3

#include "MammutQOR/Model.h"
#include "MonkiQOR/View.h"
#include "AppocritaQOR/Controller.h"
#include "CodeQOR/Instancing/STMember.h"
#include "WinQL/GUI/GUI.h"
#include "WinQL/GUI/WindowFactory.h"
#include "WinQL/GUI/Views/WindowClassFactory.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{

	class __QOR_INTERFACE( __WINQL_GUI ) COSWindow;
    class __QOR_INTERFACE( __WINQL_GUI ) CWindowClass;
    class __QOR_INTERFACE( __WINQL_GUI ) CWindowFactory;
	class __QOR_INTERFACE( __WINQL_GUI ) CBaseWindowController;

	//--------------------------------------------------------------------------------
	struct __QOR_INTERFACE( __WINQL ) CreateStruct
	{
		void* lpCreateParams;
		void* hInstance;
		void* phMenu;
		void* phwndParent;
		int cy;
		int cx;
		int y;
		int x;
		long style;
		const char* lpszName;
		const char* lpszClass;
		unsigned long dwExStyle;
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CWindowView : public nsMonki::CView
	{
	public:

		//static const nsWin32::GUID IID_IBaseWindowView;// {4330AFBC-B840-4f46-B013-9BB5A94B494A}

		//wmMouseActivate Return Codes
		__QCMP_STATIC_CONSTANT( int, maActivate         = 1 );
		__QCMP_STATIC_CONSTANT( int, maActivateAndEat   = 2 );
		__QCMP_STATIC_CONSTANT( int, maNoActivate       = 3 );
		__QCMP_STATIC_CONSTANT( int, maNoActivateAndEat = 4 );
		/*
		//--------------------------------------------------------------------------------
		static nsWin32::GUID DefaultInterfaceID()
		{
			return IID_IBaseWindowView;
		}
		*/
		CWindowView();
		virtual ~CWindowView();

		virtual long QueryInterface( const nsWin32::GUID& riid, void** ppInterface );
		virtual bool Animate();
        virtual void DestroyWindow( void );
 
        virtual void Update( CWindowModel& WindowModel );

		virtual void CreateWindow( CWindowModel& WindowModel );
		virtual void Enable( bool bEnable );
		COSWindow& Window();
        virtual CWindowClass& GetWindowClass();
        virtual CWindowFactory& GetWindowFactory();
		virtual long OnCreate( CreateStruct* pCreateStruct );
			
		virtual long OnDestroy( COSWindow& Window, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam );
		virtual long OnActivate( COSWindow& Window, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam );
		virtual long OnMouseActivate( COSWindow& Window, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam );
		virtual void OnClose( COSWindow& Window );
		virtual void OnSystemError( COSWindow& Window, Cmp_long_ptr& lResult, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam );
		virtual void OnSysCommand( COSWindow& Window, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam );

	protected:

		nsCodeQOR::CSTMember< CWindowClass > WndClass;
		CWindowClassFactory m_WindowClassFactory;
		nsCodeQOR::CProxyObserver< CWindowClassModel, CWindowClassFactory > m_ClassFactoryProxy;
		nsCodeQOR::CSTMember< CWindowFactory > Factory;
		nsCodeQOR::CProxyObserver< CWindowModel, CWindowView > m_ViewProxy;

		COSWindow* m_pWindow;			
	    //CBaseWindowController* m_pController;
	};

}//nsWin32

#endif//WINQL_GUI_VIEWS_WINDOW_H_3
