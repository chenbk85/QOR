//WinCtrlViews.h

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//WinQL Windows Control View classes

#ifndef WINQL_GUI_VIEW_WINCTRLS_H_3
#define WINQL_GUI_VIEW_WINCTRLS_H_3

#include "WinQL/CodeServices/WinQLPolicy.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQL/GUI/Windows/MDIChildFrame.h"
#include "WinQL/GUI/Views/InteractiveWindowView.h"
#include "WinQL/GUI/Controllers/InteractiveWindowController.h"
#include "WinQL/GUI/Controllers/FrameWindowController.h"
#include "WinQL/GUI/Windows/Static.h"
#include "WinQL/GUI/Windows/ScrollBar.h"
#include "WinQL/GUI/Windows/MDIClient.h"
#include "WinQL/GUI/Windows/ListBox.h"
#include "WinQL/GUI/Windows/Edit.h"
#include "WinQL/GUI/Windows/ComboBox.h"
#include "WinQL/GUI/Windows/Button.h"
#include "WinQL/GUI/Windows/Animate.h"
#include "WinQL/GUI/Windows/ComboBoxEx.h"
#include "WinQL/GUI/Windows/DateTimePicker.h"
#include "WinQL/GUI/Windows/Header.h"
#include "WinQL/GUI/Windows/HotKey.h"
#include "WinQL/GUI/Windows/IPAddress.h"
#include "WinQL/GUI/Windows/ListCtrl.h"
#include "WinQL/GUI/Windows/MonthCalendar.h"
#include "WinQL/GUI/Windows/Pager.h"
#include "WinQL/GUI/Windows/ProgressBar.h"
#include "WinQL/GUI/Windows/Rebar.h"
#include "WinQL/GUI/Windows/SysLink.h"
#include "WinQL/GUI/Windows/StatusBar.h"
#include "WinQL/GUI/Windows/MDIChildFrame.h"
#include "WinQL/GUI/Windows/FrameWindow.h"
#include "WinQL/GUI/Windows/UpDown.h"
#include "WinQL/GUI/Windows/TreeView.h"
#include "WinQL/GUI/Windows/Trackbar.h"
#include "WinQL/GUI/Windows/ToolTip.h"
#include "WinQL/GUI/Windows/Toolbar.h"
#include "WinQL/GUI/Windows/Tab.h"

#include "WinQL/GUI/Views/StandardCtrlView.h"
#include "WinQL/GUI/Icon.h"
//#include "../Models/MenuModel.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
    typedef CStandardCtrlView< CStaticClass, CStaticFactory > CStaticView;
    typedef CStandardCtrlView< CScrollBarClass, CScrollBarFactory > CScrollBarView;
    typedef CStandardCtrlView< CListBoxClass, CListBoxFactory > CListBoxView;
    typedef CStandardCtrlView< CEditClass, CEditFactory > CEditView;
    typedef CStandardCtrlView< CComboBoxClass, CComboBoxFactory > CComboBoxView;
    typedef CStandardCtrlView< CAnimateClass, CAnimateFactory > CAnimateView;
    typedef CStandardCtrlView< CComboBoxExClass, CComboBoxExFactory > CComboBoxExView;
    typedef CStandardCtrlView< CDateTimePickerClass, CDateTimePickerFactory > CDateTimePickerView;
    typedef CStandardCtrlView< CHotKeyClass, CHotKeyFactory > CHotKeyView;
#if		( _WIN32_IE >= 0x0400 )
    typedef CStandardCtrlView< CIPAddressClass, CIPAddressFactory > CIPAddressView;
    typedef CStandardCtrlView< CPagerClass, CPagerFactory > CPagerView;
#endif//( _WIN32_IE >= 0x0400 )
    typedef CStandardCtrlView< CListCtrlClass, CListCtrlFactory > CListCtrlView;
    typedef CStandardCtrlView< CMonthCalendarClass, CMonthCalendarFactory > CMonthCalendarView;
    typedef CStandardCtrlView< CProgressBarClass, CProgressBarFactory > CProgressBarView;
    typedef CStandardCtrlView< CRebarClass, CRebarFactory > CRebarView;
    typedef CStandardCtrlView< CUpDown::TWndClass, CUpDownFactory > CUpDownView;
    typedef CStandardCtrlView< CTreeView::TWndClass, CTreeViewFactory > CTreeViewView;
    typedef CStandardCtrlView< CTrackbar::TWndClass, CTrackbarFactory > CTrackbarView;
    typedef CStandardCtrlView< CToolTip::TWndClass, CToolTipFactory > CToolTipView;
    typedef CStandardCtrlView< CToolbar::TWndClass, CToolbarFactory > CToolbarView;
    typedef CStandardCtrlView< CTabClass, CTabFactory > CTabView;
#if		( _WIN32_WINNT >= 0x0501 )
    typedef CStandardCtrlView< CSysLinkClass, CSysLinkFactory > CSysLinkView;
#endif//( _WIN32_WINNT >= 0x0501 )

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CStatusBarView : public CInteractiveWindowView
	{
	public:

		//--------------------------------------------------------------------------------
		class CStatusPart
		{
		public:

			//--------------------------------------------------------------------------------
			CStatusPart()
			{
				m_uiMinHeight = 1;
				m_uiSize = 0;
				m_uiType = 0;
				m_pIcon = 0;
			}

			//--------------------------------------------------------------------------------
			virtual ~CStatusPart()
			{
			}

			__QCMP_STATIC_CONSTANT( int, SP_SIMPLEID = 0 );

			//--------------------------------------------------------------------------------
			void SetNoTabParsing( bool bFlag )
			{
#if		( _WIN32_IE >= 0x0500 )
				bFlag ? ( m_uiType |= CStatusBar::SBT_NOTABPARSING ) : ( m_uiType &= ~CStatusBar::SBT_NOTABPARSING );
#else
				__QCMP_UNREF( bFlag );
#endif//( _WIN32_IE >= 0x0500 )			
			}

			//--------------------------------------------------------------------------------
			void SetRightToLeft( bool bFlag )
			{
				if( bFlag )
				{
					m_uiType |= CStatusBar::SBT_RTLREADING;
				}
				else
				{
					m_uiType &= ~CStatusBar::SBT_RTLREADING;
				}
			}

			//--------------------------------------------------------------------------------
			void SetPopOut( bool bFlag )
			{
				if( bFlag )
				{
					m_uiType |= CStatusBar::SBT_POPOUT;
				}
				else
				{
					m_uiType &= ~CStatusBar::SBT_POPOUT;
				}
			}

			//--------------------------------------------------------------------------------
			void SetNoBorders( bool bFlag )
			{
				if( bFlag )
				{
					m_uiType |= CStatusBar::SBT_NOBORDERS;
				}
				else
				{
					m_uiType &= ~CStatusBar::SBT_NOBORDERS;
				}
			}

			//--------------------------------------------------------------------------------
			void SetOwnerDraw( bool bFlag )
			{
				bFlag ? ( m_uiType |= CStatusBar::SBT_OWNERDRAW ) : ( m_uiType &= ~CStatusBar::SBT_OWNERDRAW );					
			}

			//--------------------------------------------------------------------------------
			unsigned int GetType()
			{
				return m_uiType;
			}

			//--------------------------------------------------------------------------------
			const TCHAR* GetText()
			{
				return m_Text;
			}

			//--------------------------------------------------------------------------------
			void SetTipText( TCHAR* strTipText )
			{
				m_TipText = CTString( strTipText );
			}

			//--------------------------------------------------------------------------------
			const TCHAR* GetTipText()
			{
				return m_TipText;
			}

			//--------------------------------------------------------------------------------
            void SetIcon( CIcon* pIcon )
			{
				m_pIcon = pIcon;
			}

			//--------------------------------------------------------------------------------
			CIcon* GetIcon()
			{
				return m_pIcon;
			}

			//--------------------------------------------------------------------------------
			unsigned int GetSize()
			{
				return m_uiSize;
			}

		protected:

			unsigned int m_uiMinHeight;
			unsigned int m_uiSize;
			CTString m_Text;
			unsigned int m_uiType;
			CTString m_TipText;
			CIcon* m_pIcon;
		};

		//--------------------------------------------------------------------------------
		CStatusBarView() : m_WindowClass(), m_WindowFactory()
		{
			m_WindowClass.Preinitialise();
			m_bSetBorders = false;
#ifdef	UNICODE
			m_bUnicodeFormat = true;
#else
			m_bUnicodeFormat = false;
#endif//UNICODE
			m_bSimpleMode = true;
			m_BackgroundColour = CWinCtrlWindow::CLR_DEFAULT;
		}

		//--------------------------------------------------------------------------------
		virtual ~CStatusBarView()
		{
		}

		//--------------------------------------------------------------------------------
		virtual bool Animate();

		//--------------------------------------------------------------------------------
		void SetHorizontalBorder( unsigned int uiBorder )
		{
			m_bSetBorders = true;
			m_uiHorizontalBorder = uiBorder;
		}

		//--------------------------------------------------------------------------------
		void SetVerticalBorder( unsigned int uiBorder )
		{
			m_bSetBorders = true;
			m_uiVerticalBorder = uiBorder;
		}

		//--------------------------------------------------------------------------------
		void SetPartGapBorder( unsigned int uiBorder )
		{
			m_bSetBorders = true;
			m_uiPartGapBorder = uiBorder;
		}

		//--------------------------------------------------------------------------------
		void SetUnicodeFormat( bool bUnicode )
		{
			m_bUnicodeFormat = bUnicode;
		}

		//--------------------------------------------------------------------------------
		void SetSimpleMode( bool bSimple )
		{
			m_bSimpleMode = bSimple;
		}

		//--------------------------------------------------------------------------------
		void SetBackgroundColour( unsigned long clrBk )
		{
			m_BackgroundColour = clrBk;
		}

		//--------------------------------------------------------------------------------
		void AddPart( CStatusPart* pPart )
		{
			m_apParts.Append( pPart );
		}

		//--------------------------------------------------------------------------------
		CStatusPart* Part( unsigned int uiPart )
		{
			return m_apParts[ uiPart ];
		}

		//--------------------------------------------------------------------------------
		CStatusPart& SimpleModePart()
		{
			return m_SimpleModePart;
		}

	protected:

		CStatusBarClass m_WindowClass;
		CStatusBarFactory m_WindowFactory;

		bool m_bSetBorders;
		unsigned int m_uiHorizontalBorder;
		unsigned int m_uiVerticalBorder;
		unsigned int m_uiPartGapBorder;
		bool m_bUnicodeFormat;
		bool m_bSimpleMode;			
		unsigned long m_BackgroundColour;
		CStatusPart m_SimpleModePart;
		nsCodeQOR::CTArray< CStatusPart*, CWinQLPolicy > m_apParts;
		bool m_bToolTips;

	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CFrameWindowView : public CInteractiveWindowView
	{
	public:

		//--------------------------------------------------------------------------------
		bool Animate();

		//--------------------------------------------------------------------------------

		nsCodeQOR::CSTMember< CMenu > m_Menu;	
		nsCodeQOR::CSTMember< CInteractiveWindowView > FrameClient;
		nsCodeQOR::CSTMember< CStatusBarView > StatusBar;

		nsCodeQOR::CSTMember< CFrameWindowClass > m_WindowClass;
		nsCodeQOR::CSTMember< CFrameWindowFactory > m_WindowFactory;

	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CMDIChildFrameView : public CFrameWindowView
	{
	public:

		CMDIChildFrameView();
		virtual ~CMDIChildFrameView();			
		bool Animate();

		//--------------------------------------------------------------------------------
			
		nsCodeQOR::CSTMember< CMDIChildFrameFactory > m_MDIChildFrameFactory;			

	protected:

		nsWin32::MDICREATESTRUCT m_MCS;

	};

    //--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CHeaderView : public CStandardCtrlView< CHeaderClass, CHeaderFactory >
	{
	public:
        virtual bool Animate();
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CButtonView : public CInteractiveWindowView
	{
	public:

		//--------------------------------------------------------------------------------
		CButtonView() : m_WindowClass(), m_WindowFactory()
		{
			m_WindowClass.Preinitialise();
		}

		//--------------------------------------------------------------------------------
		virtual ~CButtonView()
		{
		}

		//Attach View to Model
		//Read Style Model to set up Factory
		//Animate to produce a Button instance relative to a parent
        virtual bool Animate();

	protected:

		CButtonClass m_WindowClass;
		CButtonFactory m_WindowFactory;

	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CMDIClientView : public CInteractiveWindowView
	{
	public:

		//--------------------------------------------------------------------------------
		CMDIClientView() : m_WindowClass(), m_WindowFactory()
		{
			m_ClientCreateStruct.hWindowMenu = 0;
			m_ClientCreateStruct.idFirstChild = 0;
		}

		//--------------------------------------------------------------------------------
		~CMDIClientView()
		{
		}

		//--------------------------------------------------------------------------------
		virtual bool Animate();
        virtual bool AddChildFrame( CInteractiveWindowView* pView );

    protected:

	    nsCodeQOR::CTLinkedList< CMDIChildFrameView > m_ListChildFrames;

		CLIENTCREATESTRUCT m_ClientCreateStruct;
		CMDIClientClass m_WindowClass;
		CMDIClientFactory m_WindowFactory;

	};

	typedef CListBoxView CDragListBoxView;

}//nsWin32

#endif//WINQL_GUI_VIEW_WINCTRLS_H_3
