//RenderedWindowView.h

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//WINQL View for Rendered windows

#ifndef WINQL_GUI_VIEWS_WINDOWRENDERED_H_3
#define WINQL_GUI_VIEWS_WINDOWRENDERED_H_3

#include "WinQL/GUI/Views/WindowView.h"
#include "WinQL/GUI/Window.h"
#include "WinQL/Application/Graphics/WinQLDeviceContext.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CRenderedWindowView : public CWindowView
	{
	public:
		/*
		static const GUID IID_IRenderedWindowView;// {DAD4C37A-5BF8-403b-884C-6AFCE23A4B6B}

		//--------------------------------------------------------------------------------
		static GUID DefaultInterfaceID()
		{
			return IID_IRenderedWindowView;
		}
		*/
		//--------------------------------------------------------------------------------
		CRenderedWindowView()
		{
		}

		//--------------------------------------------------------------------------------
		virtual ~CRenderedWindowView()
		{
		}

		//--------------------------------------------------------------------------------
		virtual long QueryInterface( const GUID& riid, void** ppInterface )
		{
			long hr = nsWin32::E_NoInterface;
			/*
			if( riid.operator==( IID_IRenderedWindowView ) )
			{
				*ppInterface = this;
				hr = OK;
			}
			else
			{
				//Try parts and then base
				//hr = RenderingModel().QueryInterface( riid, ppInterface );
				if( hr == nsWin32::E_NoInterface )
				{
					hr = CWindowView::QueryInterface( riid, ppInterface );
				}
			}
			*/
			return hr;
		}

		//--------------------------------------------------------------------------------
		virtual bool Animate()
		{
			return CWindowView::Animate();
		}

        //--------------------------------------------------------------------------------
        virtual void OnGetMinMaxInfo( COSWindow::refType Window, MINMAXINFO& MinMaxInfo )
        {
			Window->DefProc( COSWindow::wmGetMinMaxInfo, 0, (Cmp_long_ptr)(&MinMaxInfo ) );			
        }

        //--------------------------------------------------------------------------------
		virtual long OnEraseBackground( COSWindow::refType Window, CDeviceContext& refDC )
        {
			long lResult = Window->DefProc( reinterpret_cast< Cmp_uint_ptr >( refDC.Handle()->Use() ), COSWindow::wmEraseBackground, 0 );
			return lResult;
        }

        //--------------------------------------------------------------------------------
        virtual void OnSetRedraw( COSWindow* pWindow, bool bRedraw )
        {
			pWindow->DefProc( COSWindow::wmSetRedraw, static_cast< Cmp_uint_ptr >( bRedraw ), 0 );
        }

        //--------------------------------------------------------------------------------
        virtual void OnPaint( COSWindow* pWindow )
        {
			pWindow->DefProc( COSWindow::wmPaint, 0, 0 );
        }

        //--------------------------------------------------------------------------------
        virtual void OnSize( COSWindow* pWindow, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
        {
            pWindow->DefProc( COSWindow::wmSize, wParam, lParam );
        }

        //--------------------------------------------------------------------------------
        virtual void OnMove( COSWindow* pWindow, unsigned short wXPos, unsigned short wYPos )
        {
            pWindow->DefProc( COSWindow::wmMove, 0, MakeLong( wXPos, wYPos ) );
        }

		//CTMember< CRenderingModel > RenderingModel;
			
	};

}//nsWin32

#endif//WINQL_GUI_VIEWS_WINDOWRENDERED_H_3
