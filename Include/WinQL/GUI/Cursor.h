//Cursor.h

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_GUI_CURSOR_H_3
#define WINQL_GUI_CURSOR_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/CodeServices/Handles/WinQLHandleMap.h"
#include "WinQL/Definitions/Handles.h"
#include "WinQL/Application/Process/Module/WinQLModule.h"
#include "WinQL/Application/Graphics/WinQLRectangle.h"
#include "WinQL/Application/User/WinQLUserObject.h"
#include "WinQL/GUI/GUI.h"
#include "WinQL/CodeServices/Handles/WinQLRAIISessionHandle.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	class __QOR_INTERFACE( __WINQAPI ) CUSer32;
}

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	struct CursorInfo
	{
		unsigned long cbSize;
		unsigned long flags;
		CCursorHandle::refType hCursor;
		POINT ptScreenPos;
	};

	class __QOR_INTERFACE( __WINQL_GUI ) CCursor;

	typedef nsWin32::CTHandleMap< CCursorHandle::refType, CCursor > CCursorHandleMap;

	extern __QCMP_DECLARE_PERTHREAD CCursorHandleMap* p_tCursorHandleMap;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CCursor
	{
		friend class nsCodeQOR::CDefaultInstancer< nsCodeQOR::CDefaultSource, CCursor >;
		friend class nsCodeQOR::CDefaultAllocator< nsCodeQOR::CDefaultInstancer< nsCodeQOR::CDefaultSource, CCursor >, CCursor >;
		friend class nsCodeQOR::CTClassRegEntry< CCursor >;

	public:

		__QOR_DECLARE_OCLASS_ID( CCursor );

		//--------------------------------------------------------------------------------
		enum eStandardCursors
		{
			eArrow = 32512,
			eIBeam = 32513,
			eWait = 32514,
			eCross = 32515,
			eUpArrow = 32516,
			eSize = 32640,	// OBSOLETE: use IDC_SIZEALL
			eIcon = 32641,	// OBSOLETE: use IDC_ARROW
			eSizeNWSE = 32642,
			eSizeNESW = 32643,
			eSizeWE = 32644,
			eSizeNS = 32645,
			eSizeAll = 32646,
			eNo	= 32648,
#if( WINVER >= 0x0500 )
			eHand = 32649,
#endif // WINVER >= 0x0500
			eAppStarting = 32650,
#if( WINVER >= 0x0400 )
			eHelp = 32651,
#endif // WINVER >= 0x0400
		};

		typedef nsCodeQOR::CTLRef< CCursor > refType;

		CCursor( CWinModule& Module, const TCHAR* lpCursorName );
		CCursor( const TCHAR* lpFileName );
		CCursor( CWinModule& Module, int xHotSpot, int yHotSpot, int nWidth, int nHeight, const void* pvANDPlane, const void* pvXORPlane );
		CCursor( const CCursor& src );		
		static refType Load( CWinModule& Module, const TCHAR* lpCursorName );
		static refType LoadFromFile( const TCHAR* lpFileName );
		static refType Create( CWinModule& Module, int xHotSpot, int yHotSpot, int nWidth, int nHeight, const void* pvANDPlane, const void* pvXORPlane );
		static refType FromHandle( CCursorHandle::refType hCursor );
		virtual ~CCursor();
		bool Clip( const CRectangle& Rect );
		bool GetClipRect( CRectangle& Rect );
		bool GetInfo( nsWin32::CursorInfo& ci );
		bool GetPos( nsWin32::POINT& Point );
		bool SetPos( int X, int Y );
		bool GetPhysicalPos( nsWin32::POINT& Point );
		bool SetPhysicalPos( int X, int Y );
		int Show( bool bShow );		
		refType Use();
		bool SetAsSystemCursor( unsigned long id );

		CUserObject Security();
		CCursorHandle::refType Handle();
		int Status( void );

		virtual void OnUnuse( refType NewCursor );	//Called on a cursor which has been replaced as THE cursor

	protected:

		CCursorHandle m_Handle;
		int m_iStatus;

		refType Copy() const;
		void Init( void );
		void Uninit( void );
			
		CCursor( CCursorHandle& Handle );		

	private:			

		nsWinQAPI::CUser32& m_User32Library;

		CCursor();
		__QCS_DECLARE_NONASSIGNABLE( CCursor );

	};

}//nsWin32

#endif//WINQL_GUI_CURSOR_H_3
