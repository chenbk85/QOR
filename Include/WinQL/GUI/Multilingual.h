//Multilingual.h

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_GUI_MULTILINGUAL_H_3
#define WINQL_GUI_MULTILINGUAL_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	typedef int ( __QCMP_STDCALLCONVENTION *fpUILanguageEnumProc )( TCHAR*, Cmp_long_ptr );

	//--------------------------------------------------------------------------------
	typedef struct _FILEMUIINFO 
	{
		unsigned long dwSize;                 // Size of the structure including buffer size [in]
		unsigned long dwVersion;              // Version of the structure [in]
		unsigned long dwFileType;             // Type of the file [out]
		unsigned char pChecksum[16];          // Checksum of the file [out]
		unsigned char pServiceChecksum[16];   // Checksum of the file [out]
		unsigned long dwLanguageNameOffset;   // Language name of the file [out]
		unsigned long dwTypeIDMainSize;       // Number of TypeIDs in main module [out]
		unsigned long dwTypeIDMainOffset;     // Array of TypeIDs (DWORD) in main module [out]
		unsigned long dwTypeNameMainOffset;   // Multistring array of TypeNames in main module [out]
		unsigned long dwTypeIDMUISize;        // Number of TypeIDs in MUI module [out]
		unsigned long dwTypeIDMUIOffset;      // Array of TypeIDs (DWORD) in MUI module [out]
		unsigned long dwTypeNameMUIOffset;    // Multistring array of TypeNames in MUI module [out]
		unsigned char abBuffer[ 8 ];          // Buffer for extra data [in] (Size 4 is for padding)
	} FILEMUIINFO, *PFILEMUIINFO;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CMUIHelper
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CMUIHelper );

		CMUIHelper();
		~CMUIHelper();
		bool EnumLanguages( nsWin32::fpUILanguageEnumProc pUILangEnumProc, unsigned long dwFlags, Cmp_long_ptr lParam );
		bool GetFileInfo( unsigned long dwFlags, const wchar_t* pcwszFilePath, nsWin32::PFILEMUIINFO pFileMUIInfo, unsigned long* pcbFileMUIInfo );
		bool GetFileMUIPath( unsigned long dwFlags, const wchar_t* pcwszFilePath, wchar_t* pwszLanguage, unsigned long* pcchLanguage, wchar_t* pwszFileMUIPath, unsigned long* pcchFileMUIPath, Cmp_unsigned_long_long* pululEnumerator );
		unsigned short GetSystemDefaultLanguage( void );
		bool GetSystemPreferredLanguages( unsigned long dwFlags, unsigned long* pulNumLanguages, wchar_t* pwszLanguagesBuffer, unsigned long* pcchLanguagesBuffer );
		bool GetCurrentThreadPreferredLanguages( unsigned long dwFlags, unsigned long* pulNumLanguages, wchar_t* pwszLanguagesBuffer, unsigned long* pcchLanguagesBuffer );
		unsigned short GetCurrentThreadLanguage();
		bool GetLanguageInfo( unsigned long dwFlags, const wchar_t* pwmszLanguage, wchar_t* pwszFallbackLanguages, unsigned long* pcchFallbackLanguages, unsigned long* pdwAttributes );
		unsigned short GetUserDefaultLanguage( void );
		bool GetUserPreferredLanguages( unsigned long dwFlags, unsigned long* pulNumLanguages, wchar_t* pwszLanguagesBuffer, unsigned long* pcchLanguagesBuffer );
		bool SetCurrentThreadPreferredLanguages( unsigned long dwFlags, const wchar_t* pwszLanguagesBuffer, unsigned long* pulNumLanguages );
		unsigned short SetThreadLanguage( unsigned short LangId );

	private:

		CMUIHelper( const CMUIHelper& );
		CMUIHelper& operator = ( const CMUIHelper& );
	};

}//nsWin32

#endif//WINQL_GUI_MULTILINGUAL_H_3
