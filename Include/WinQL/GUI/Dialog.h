//Dialog.h

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

/*Portions derived from: 
XMessageBox - A reverse-engineered MessageBox()
By Hans Dietrich | 29 Nov 2008 
www.codeproject.com
under: Code Project Open License
*/

#ifndef WINQL_GUI_DIALOG_H_3
#define WINQL_GUI_DIALOG_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "CodeQOR/DataStructures/TLinkedList.h"
#include "WinQL/Definitions/Handles.h"
#include "WinQL/Application/Graphics/WinQLRectangle.h"
#include "WinQL/GUI/GUI.h"
#include "WinQL/GUI/CommonCtrl.h"
#include "WinQL/GUI/Window.h"
#include "WinQL/CodeServices/Handles/WinQLHandleMap.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	class __QOR_INTERFACE( __WINQAPI ) CUser32;
	class __QOR_INTERFACE( __WINQAPI ) CUXTheme;
}

//--------------------------------------------------------------------------------
namespace nsWin32
{

	class __QOR_INTERFACE( __WINQL_GUI ) CDialog;

	typedef Cmp_int_ptr ( __QCMP_STDCALLCONVENTION *DLGPROC )( CDialog*, unsigned int , Cmp_uint_ptr, Cmp_long_ptr );

	//--------------------------------------------------------------------------------
	typedef struct 
	{
		unsigned long style;
		unsigned long dwExtendedStyle;
		unsigned short cdit;
		short x;
		short y;
		short cx;
		short cy;
	} DLGTEMPLATE;

	//--------------------------------------------------------------------------------
	typedef struct 
	{
		unsigned long style;
		unsigned long dwExtendedStyle;
		short x;
		short y;
		short cx;
		short cy;
		unsigned short id;
	} DLGITEMTEMPLATE;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CDlgItem
	{
	public:

		//--------------------------------------------------------------------------------
		enum eCtrlType
		{
			eCustom		= 0x0001,
			eButton		= 0x0080,
			eEdit		= 0x0081,
			eStatic		= 0x0082,
			eListBox	= 0x0083,
			eScrollBar	= 0x0084,
			eComboBox	= 0x0085
		};

		CDlgItem();
		virtual ~CDlgItem(){}

		void SetStyle( unsigned long ulStyle );
		void SetExtendedStyle( unsigned long ulExtendedStyle );
		void SetPosition( short x, short y );
		void SetSize( short cx, short cy );
		void SetId( unsigned short usId );

		//--------------------------------------------------------------------------------
		DLGITEMTEMPLATE* GetTemplate( void )
		{
			return &m_ItemTemplate;
		}

		void SetControlType( eCtrlType ctrlType, const wchar_t* wszClass = 0 );
		CDlgItem::eCtrlType GetControlType();
		virtual unsigned long GetExtraDataLen();

		CTString m_CaptionBuffer;
		CWString m_ClassNameBuffer;

	private:

		DLGITEMTEMPLATE m_ItemTemplate;
		eCtrlType m_CtrlType;
			 
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CDialogInitializer
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CDialogInitializer );

		//--------------------------------------------------------------------------------
		CDialogInitializer() : m_CommonCtrl( CCommonCtrl::CCSTANDARD_CLASSES )
		{
			memset( &m_RootTemplate, 0, sizeof( DLGTEMPLATE ) );
			m_usMenu = 0;
			m_usClass = 0;
		}

		//--------------------------------------------------------------------------------
		virtual ~CDialogInitializer(){}

		bool AddItem( CDlgItem* pItem );
		DLGTEMPLATE* GenerateTemplate( void );
		CTString m_TitleBuffer;

		void SetStyle( unsigned long ulStyle );
		void SetExtendedStyle( unsigned long ulExtendedStyle );
		void SetPosition( short x, short y );
		void SetSize( short cx, short cy );
		void SetMenu( unsigned short usMenu );
		void SetClass( unsigned short usClass );

	private:

		DLGTEMPLATE m_RootTemplate;
		unsigned short m_usMenu;
		unsigned short m_usClass;
		nsCodeQOR::CTLinkedList< CDlgItem > m_ItemList;
		CCommonCtrl m_CommonCtrl;
	};

	class __QOR_INTERFACE( __WINQL_GUI ) CDialog;

	typedef CWindowHandle CDialogHandle;
	typedef nsWin32::CTHandleMap< CDialogHandle::refType, CDialog > CDialogHandleMap;

	extern __QCMP_DECLARE_PERTHREAD CDialogHandleMap* p_tDialogHandleMap;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CDialog
	{
	public:

		typedef nsCodeQOR::CTLRef< CDialog > refType;

		__QOR_DECLARE_OCLASS_ID( CDialog );

		__QCMP_STATIC_CONSTANT( unsigned long, DS_AbsAlign			= 0x01 );
		__QCMP_STATIC_CONSTANT( unsigned long, DS_SysModal			= 0x02 );
		__QCMP_STATIC_CONSTANT( unsigned long, DS_LocalEdit			= 0x20 );   // Edit items get Local storage.
		__QCMP_STATIC_CONSTANT( unsigned long, DS_SetFont			= 0x40 );   // User specified font for Dlg controls
		__QCMP_STATIC_CONSTANT( unsigned long, DS_ModalFrame		= 0x80 );   // Can be combined with WS_CAPTION
		__QCMP_STATIC_CONSTANT( unsigned long, DS_NoIdleMsg			= 0x100 );  // WM_ENTERIDLE message will not be sent
		__QCMP_STATIC_CONSTANT( unsigned long, DS_SetForeground		= 0x200 );  // not in win3.1

#if( WINVER >= 0x0400 )
		__QCMP_STATIC_CONSTANT( unsigned long, DS_3DLook			= 0x0004 );
		__QCMP_STATIC_CONSTANT( unsigned long, DS_FixedSys			= 0x0008 );
		__QCMP_STATIC_CONSTANT( unsigned long, DS_NoFailCreate		= 0x0010 );
		__QCMP_STATIC_CONSTANT( unsigned long, DS_Control			= 0x0400 );
		__QCMP_STATIC_CONSTANT( unsigned long, DS_Center			= 0x0800 );
		__QCMP_STATIC_CONSTANT( unsigned long, DS_CenterMouse		= 0x1000 );
		__QCMP_STATIC_CONSTANT( unsigned long, DS_ContextHelp		= 0x2000 );
		__QCMP_STATIC_CONSTANT( unsigned long, DS_ShellFont			= ( DS_SetFont | DS_FixedSys ) );
#endif //WINVER >= 0x0400

#if(_WIN32_WCE >= 0x0500)
		__QCMP_STATIC_CONSTANT( unsigned long, DS_UsePixels			= 0x8000 );
#endif
		//--------------------------------------------------------------------------------
		enum eCommandID
		{
			eOK = 1,
			eCancel = 2,
			eAbort = 3,
			eRetry = 4,
			eIgnore = 5,
			eYes = 6,
			eNo = 7,
#if( WINVER >= 0x0400 )
			eClose = 8,
			eHelp = 9,
#endif//WINVER >= 0x0400

#if( WINVER >= 0x0500 )
			eTryAgain = 10,
			eContinue = 11,
#endif//WINVER >= 0x0500

#if(WINVER >= 0x0501)
			eTimeout = 32000
#endif//WINVER >= 0x0501
		};

		CDialog();
		//CDialog( InstanceHandle hInstance, const TCHAR* lpTemplateName, COSWindow::refType hWndParent, nsWin32::DLGPROC lpDialogFunc, Cmp_long_ptr dwInitParam );
		CDialog( InstanceHandle hInstance, const nsWin32::DLGTEMPLATE* lpTemplate, COSWindow::refType hWndParent, nsWin32::DLGPROC lpDialogFunc, Cmp_long_ptr lParamInit );
		Cmp_long_ptr DefaultProc( unsigned int Msg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam );
		static Cmp_int_ptr __QCMP_STDCALLCONVENTION StaticCallback( void *phwndDlg, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam );
		virtual Cmp_int_ptr InstanceCallback( unsigned int uMsg, Cmp_uint_ptr wParam );
		Cmp_int_ptr Run( InstanceHandle hInstance, const nsWin32::DLGTEMPLATE* hDialogTemplate, COSWindow::refType WndParent, nsWin32::DLGPROC lpDialogFunc, Cmp_long_ptr dwInitParam );
		Cmp_int_ptr Run( InstanceHandle hInstance, const TCHAR* lpTemplateName, COSWindow::refType WndParent, nsWin32::DLGPROC lpDialogFunc, Cmp_long_ptr dwInitParam );
		long GetBaseUnits( void );
		int GetCtrlID( COSWindow::refType WndCtl );
		COSWindow::refType GetItem( int nIDDlgItem );
		unsigned int GetItemInt( int nIDDlgItem, int* lpTranslated, bool bSigned );
		unsigned int GetItemText( int nIDDlgItem, TCHAR* lpString, int nMaxCount );
		COSWindow::refType GetNextGroupItem( COSWindow::refType Ctl, bool bPrevious );
		COSWindow::refType GetNextTabItem( COSWindow::refType Ctl, bool bPrevious );
		bool IsDialogMessageT( nsWin32::LPMSG lpMsg );
		bool MapRect( CRectangle* pRect );
		Cmp_long_ptr SendItemMessage( int nIDDlgItem, unsigned int Msg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam );
		bool SetItemInt( int nIDDlgItem, unsigned int uValue, bool bSigned );
		int DirList( TCHAR* lpPathSpec, int nIDListBox, int nIDStaticPath, unsigned int uFileType );
		bool DirSelect( TCHAR* lpString, int nCount, int nIDListBox );
		int DirListComboBox( TCHAR* lpPathSpec, int nIDComboBox, int nIDStaticPath, unsigned int uFiletype );
		bool DirSelectComboBox( TCHAR* lpString, int nCount, int nIDComboBox );
		bool CheckButton( int nIDButton, unsigned int uCheck );
		bool CheckRadioButton( int nIDFirstButton, int nIDLastButton, int nIDCheckButton );
		unsigned int IsButtonChecked( int nIDButton );		
		bool End( Cmp_int_ptr nResult );
		bool IsEnded( void );
		long EnableThemeTexture( unsigned long dwFlags );
		bool IsThemeTextureEnabled( void );
		refType Ref( void );
		virtual ~CDialog();

		CWindowHandle::refType Handle( void );
		static refType FromHandle( CWindowHandle::refType );

	protected:

		void Init( void );
		void Uninit( void );

		CDialogHandle m_DlgHandle;
		nsWin32::DLGPROC m_pDialogFunc;
		Cmp_long_ptr m_dwInitParam;

		CDialog( CDialogHandle::refType hDlg );

	private:			

		bool m_bEnded;
		nsWinQAPI::CUser32& m_User32Library;
		nsWinQAPI::CUXTheme& m_UxTheme;

		__QCS_DECLARE_NONCOPYABLE( CDialog );
	};

}//nsWin32

#endif//WINQL_GUI_DIALOG_H_3
