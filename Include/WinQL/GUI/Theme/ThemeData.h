//ThemeData.h

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_OSGUI_THEME_DATA_H_3
#define WINQL_OSGUI_THEME_DATA_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/Definitions/Data.h"
#include "WinQL/Application/Graphics/WinQLDeviceContext.h"
#include "WinQL/Application/Graphics/WinQLRegion.h"
#include "WinQL/GUI/Window.h"
#include "WinQL/GUI/ImageList.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	class __QOR_INTERFACE( __WINQAPI ) CUXTheme;
}

//--------------------------------------------------------------------------------
namespace nsWin32
{

	class __QOR_INTERFACE( __WINQL_GUI ) CThemeData;

	typedef nsWin32::CTHandleMap< CThemeHandle::refType, CThemeData > CThemeHandleMap;

	extern __QCMP_DECLARE_PERTHREAD CThemeHandleMap* p_tThemeHandleMap;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CThemeData
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CThemeData );

		typedef nsCodeQOR::CTLRef< CThemeData > refType;

		CThemeData( COSWindow::refType Wnd, const wchar_t* pszClassList );
		CThemeData( COSWindow::refType Wnd, const wchar_t* pszClassIdList, unsigned long dwFlags );
		CThemeData( const CThemeData& src );
		~CThemeData();
		CThemeData& operator = ( CThemeData& src );

		long DrawBackground( CDeviceContext::refType hdc, int iPartId, int iStateId, const nsWin32::RECT* pRect, const nsWin32::RECT* pClipRect );
		long DrawBackgroundEx( CDeviceContext::refType hdc, int iPartId, int iStateId, const nsWin32::RECT* pRect, const nsWin32::DTBGOPTS* pOptions );
		long DrawEdge( CDeviceContext::refType hdc, int iPartId, int iStateId, const nsWin32::RECT* pDestRect, unsigned int uEdge, unsigned int uFlags, nsWin32::RECT* pContentRect );
		long DrawIcon( CDeviceContext::refType hdc, int iPartId, int iStateId, const nsWin32::RECT* pRect, CImageList::refType iml, int iImageIndex );
		long DrawParentBackground( COSWindow::refType Wnd, CDeviceContext::refType dc, const nsWin32::RECT* prc );
		long DrawParentBackgroundEx( COSWindow::refType Wnd, CDeviceContext::refType dc, unsigned long dwFlags, const nsWin32::RECT* prc );
		long DrawTextW( CDeviceContext::refType hdc, int iPartId, int iStateId, const wchar_t* pszText, int iCharCount, unsigned long dwTextFlags, unsigned long dwTextFlags2, const nsWin32::RECT* pRect );
		long DrawTextExW( CDeviceContext::refType hdc, int iPartId, int iStateId, const wchar_t* pszText, int iCharCount, unsigned long dwFlags, nsWin32::RECT* pRect, const DTTOPTS* pOptions );
		long GetBackgroundContentRect( CDeviceContext::refType hdc, int iPartId, int iStateId, const nsWin32::RECT* pBoundingRect, nsWin32::RECT* pContentRect );
		long GetBackgroundExtent( CDeviceContext::refType dc, int iPartId, int iStateId, const nsWin32::RECT* pContentRect, nsWin32::RECT* pExtentRect );
		long GetBackgroundRegion( CDeviceContext::refType dc, int iPartId, int iStateId, const nsWin32::RECT* pRect, CRegion::refType Region );
		long GetBitmap( int iPartId, int iStateId, int iPropId, unsigned long dwFlags, CBitmap::refType phBitmap );
		long GetBool( int iPartId, int iStateId, int iPropId, int* pfVal );
		long GetColour( int iPartId, int iStateId, int iPropId, unsigned long* pColor );
		long GetEnumValue( int iPartId, int iStateId, int iPropId, int* piVal );
		long GetFileName( int iPartId, int iStateId, int iPropId, wchar_t* pszThemeFilename, int cchMaxBuffChars );
		long GetFont( CDeviceContext::refType dc, int iPartId, int iStateId, int iPropId, nsWin32::LOGFONTW* pFont );
		long GetInt( int iPartId, int iStateId, int iPropId, int* piVal );
		long GetIntList( int iPartId, int iStateId, int iPropId, nsWin32::INTLIST* pIntList );
		long GetMargins( CDeviceContext::refType hdc, int iPartId, int iStateId, int iPropId, nsWin32::RECT* prc, nsWin32::MARGINS* pMargins );
		long GetMetric( CDeviceContext::refType hdc, int iPartId, int iStateId, int iPropId, int* piVal );
		long GetPartSize( CDeviceContext::refType hdc, int iPartId, int iStateId, nsWin32::RECT* prc, nsWin32::THEMESIZE eSize, nsWin32::SIZE* psz );
		long GetPosition( int iPartId, int iStateId, int iPropId, nsWin32::POINT* pPoint );
		long GetPropertyOrigin( int iPartId, int iStateId, int iPropId, PROPERTYORIGIN* pOrigin );
		long GetRect( int iPartId, int iStateId, int iPropId, nsWin32::RECT* pRect );
		long GetStream( int iPartId, int iStateId, int iPropId, void** ppvStream, unsigned long* pcbStream, InstanceHandle hInst );
		long GetString( int iPartId, int iStateId, int iPropId, wchar_t* pszBuff, int cchMaxBuffChars );
		bool GetSysBool( int iBoolID );
		unsigned long GetSysColour( int iColourID );
		CBrush::refType GetSysColourBrush( int iColourID );
		long GetSysFont( int iFontID, nsWin32::LOGFONTW* plf );
		long GetSysInt( int iIntID, int* piValue );
		int GetSysSize( int iSizeID );
		long GetSysString( int iStringID, wchar_t* pszStringBuff, int cchMaxStringChars );
		long GetTextExtent( CDeviceContext::refType hdc, int iPartId, int iStateId, const wchar_t* pszText, int iCharCount, unsigned long dwTextFlags, const nsWin32::RECT* pBoundingRect, nsWin32::RECT* pExtentRect );
		long GetTextMetricsT( CDeviceContext::refType hdc, int iPartId, int iStateId, nsWin32::TEXTMETRIC* );
		long GetTransitionDuration( int iPartId, int iStateIdFrom, int iStateIdTo, int iPropId, unsigned long* pdwDuration );
		long HitTestBackground( CDeviceContext::refType hdc, int iPartId, int iStateId, unsigned long dwOptions, const nsWin32::RECT* pRect, CRegion::refType hrgn, nsWin32::POINT ptTest, unsigned short* pwHitTestCode );
		bool IsBackgroundPartiallyTransparent( int iPartId, int iStateId ) ;
		bool IsPartDefined( int iPartId, int iStateId );
		refType Ref( void );

		static refType FromHandle( CThemeHandle::refType hThemeData );
		CThemeHandle::refType Handle( void );

	protected:

		void Init( void );
		void Uninit( void );

		CThemeData( CThemeHandle::refType hThemeData );

		CThemeHandle m_Handle;
		nsWinQAPI::CUXTheme& m_UXTheme;

	private:

		CThemeData();
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CThemeAPI
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CThemeAPI );

		CThemeAPI();
		CThemeAPI( const CThemeAPI& );
		~CThemeAPI();

		CThemeAPI& operator = ( CThemeAPI& src );

		long Enable( bool bEnable );
		long GetCurrentName( wchar_t* pszThemeFileName, int dwMaxNameChars, wchar_t* pszColorBuff, int cchMaxColorChars, wchar_t* pszSizeBuff, int cchMaxSizeChars );
		unsigned long GetAppProperties( void );
		void SetAppProperties( unsigned long ulFlags );
		long GetDocumentationProperty( const wchar_t* pszThemeName, const wchar_t* pszPropertyName, wchar_t* pszValueBuff, int cchMaxValChars );
		CThemeData::refType GetWindowTheme( COSWindow::refType Wnd );
		bool IsAppThemed( void );
		bool IsCompositionActive( void );
		bool IsThemeActive( void );
		bool IsDialogTextureEnabled( COSWindow::refType wnd );
		long SetWindowTheme( COSWindow::refType wnd, const wchar_t* pszSubAppName, const wchar_t* pszSubIdList );
		long SetWindowAttribute( COSWindow::refType hwnd, nsWin32::WINDOWTHEMEATTRIBUTETYPE eAttribute, void* pvAttribute, unsigned long cbAttribute );
		long SetWindowNonClientAttributes( COSWindow::refType wnd, unsigned long dwMask, unsigned long dwAttributes );

	protected:

		nsWinQAPI::CUXTheme& m_UXTheme;
	};

}//nsWin32

#endif//WINQL_OSGUI_THEME_DATA_H_3
