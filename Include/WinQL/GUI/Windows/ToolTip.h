//ToolTip.h

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Tool Tip Common Control Window

#ifndef WINQL_GUI_WND_CCTRL_TOOLTIP_H_3
#define WINQL_GUI_WND_CCTRL_TOOLTIP_H_3

#include "WinQL/GUI/Views/WindowView.h"
#include "WinQL/GUI/Windows/WinCtrlWindow.h"
#include "WinQL/GUI/Windows/CommonCtrlClass.h"
#include "WinQL/GUI/Windows/CommonCtrlFactory.h"
#include "MammutQOR/Model.h"
#include "WinQL/Application/Graphics/WinQLRectangle.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	class __QOR_INTERFACE( __WINQL_GUI ) CToolTipFactory;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CToolTipClass : public CCommonCtrlClass
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CToolTipClass );

		CToolTipClass();
		virtual ~CToolTipClass();

	private:

		CToolTipClass( const CToolTipClass& );
		CToolTipClass& operator = ( const CToolTipClass& );
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CToolTip : public CWinCtrlWindow
	{
	public:

		typedef CToolTipClass TWndClass;
		typedef CToolTipFactory TFactory;

		//--------------------------------------------------------------------------------
		typedef struct tagNMTTCUSTOMDRAW
		{
			NMCustomDraw nmcd;
			unsigned int uDrawFlags;
		} NMTTCUSTOMDRAW, *LPNMTTCUSTOMDRAW;

		//--------------------------------------------------------------------------------
		struct NMTTDISPINFO : public NotificationMessageHeader
		{
			//NMHDR hdr;
			TCHAR* lpszText;
			TCHAR szText[80];
			InstanceHandle hinst;
			unsigned int uFlags;
#if (_WIN32_IE >= 0x0300)
			Cmp_long_ptr lParam;
#endif
		};

		//--------------------------------------------------------------------------------
		struct ToolInfo		//TOOLINFO
		{
			unsigned int cbSize;
			unsigned int uFlags;
			CWindowHandle::refType hwnd;
			Cmp_uint_ptr uId;
			RECT rect;
			InstanceHandle hinst;
			wchar_t* lpszText;
#if (_WIN32_IE >= 0x0300)
			Cmp_long_ptr lParam;
#endif
#if (_WIN32_WINNT >= 0x0501)
			void *lpReserved;
#endif
		};

		//--------------------------------------------------------------------------------
		struct TTHitTestInfo		//TTHITTESTINFO
		{
			CWindowHandle::refType hwnd;
			POINT pt;
			ToolInfo ti;
		};

		//--------------------------------------------------------------------------------
		typedef struct _TTGETTITLE
		{
			unsigned long dwSize;
			unsigned int uTitleBitmap;
			unsigned int cch;
			wchar_t* pszTitle;
		} TTGETTITLE, *PTTGETTITLE;

		__QCMP_STATIC_CONSTANT( int, TTN_FIRST               = (0U-520U) );       // tooltips
		__QCMP_STATIC_CONSTANT( int, TTN_LAST                = (0U-549U) );

		//Notifications
		__QCMP_STATIC_CONSTANT( int, TTN_GETDISPINFOA        = (TTN_FIRST - 0)  );
		__QCMP_STATIC_CONSTANT( int, TTN_GETDISPINFOW        = (TTN_FIRST - 10) );
		__QCMP_STATIC_CONSTANT( int, TTN_SHOW                = (TTN_FIRST - 1)  );
		__QCMP_STATIC_CONSTANT( int, TTN_POP                 = (TTN_FIRST - 2)  );
		__QCMP_STATIC_CONSTANT( int, TTN_LINKCLICK           = (TTN_FIRST - 3)  );

#ifdef UNICODE
#define TTN_GETDISPINFO         TTN_GETDISPINFOW
#else
#define TTN_GETDISPINFO         TTN_GETDISPINFOA
#endif

		//Messages
		__QCMP_STATIC_CONSTANT( int, TTM_ACTIVATE            = ( COSWindow::wmUser + 1 ) );
		__QCMP_STATIC_CONSTANT( int, TTM_SETDELAYTIME        = ( COSWindow::wmUser + 3 ) );
		__QCMP_STATIC_CONSTANT( int, TTM_ADDTOOLA            = ( COSWindow::wmUser + 4 ) );
		__QCMP_STATIC_CONSTANT( int, TTM_ADDTOOLW            = ( COSWindow::wmUser + 50 ) );
		__QCMP_STATIC_CONSTANT( int, TTM_DELTOOLA            = ( COSWindow::wmUser + 5 ) );
		__QCMP_STATIC_CONSTANT( int, TTM_DELTOOLW            = ( COSWindow::wmUser + 51 ) );
		__QCMP_STATIC_CONSTANT( int, TTM_NEWTOOLRECTA        = ( COSWindow::wmUser + 6 ) );
		__QCMP_STATIC_CONSTANT( int, TTM_NEWTOOLRECTW        = ( COSWindow::wmUser + 52 ) );
		__QCMP_STATIC_CONSTANT( int, TTM_RELAYEVENT          = ( COSWindow::wmUser + 7 ) ); // Win7: wParam = GetMessageExtraInfo() when relaying WM_MOUSEMOVE

		__QCMP_STATIC_CONSTANT( int, TTM_GETTOOLINFOA        = ( COSWindow::wmUser + 8 ) );
		__QCMP_STATIC_CONSTANT( int, TTM_GETTOOLINFOW        = ( COSWindow::wmUser + 53 ) );

		__QCMP_STATIC_CONSTANT( int, TTM_SETTOOLINFOA        = ( COSWindow::wmUser + 9 ) );
		__QCMP_STATIC_CONSTANT( int, TTM_SETTOOLINFOW        = ( COSWindow::wmUser + 54 ) );

		__QCMP_STATIC_CONSTANT( int, TTM_HITTESTA            = ( COSWindow::wmUser +10 ) );
		__QCMP_STATIC_CONSTANT( int, TTM_HITTESTW            = ( COSWindow::wmUser +55 ) );
		__QCMP_STATIC_CONSTANT( int, TTM_GETTEXTA            = ( COSWindow::wmUser +11 ) );
		__QCMP_STATIC_CONSTANT( int, TTM_GETTEXTW            = ( COSWindow::wmUser +56 ) );
		__QCMP_STATIC_CONSTANT( int, TTM_UPDATETIPTEXTA      = ( COSWindow::wmUser +12 ) );
		__QCMP_STATIC_CONSTANT( int, TTM_UPDATETIPTEXTW      = ( COSWindow::wmUser +57 ) );
		__QCMP_STATIC_CONSTANT( int, TTM_GETTOOLCOUNT        = ( COSWindow::wmUser +13 ) );
		__QCMP_STATIC_CONSTANT( int, TTM_ENUMTOOLSA          = ( COSWindow::wmUser +14 ) );
		__QCMP_STATIC_CONSTANT( int, TTM_ENUMTOOLSW          = ( COSWindow::wmUser +58 ) );
		__QCMP_STATIC_CONSTANT( int, TTM_GETCURRENTTOOLA     = ( COSWindow::wmUser + 15 ) );
		__QCMP_STATIC_CONSTANT( int, TTM_GETCURRENTTOOLW     = ( COSWindow::wmUser + 59 ) );
		__QCMP_STATIC_CONSTANT( int, TTM_WINDOWFROMPOINT     = ( COSWindow::wmUser + 16 ) );
#if (_WIN32_IE >= 0x0300)
		__QCMP_STATIC_CONSTANT( int, TTM_TRACKACTIVATE       = ( COSWindow::wmUser + 17 ) );  // wParam = TRUE/FALSE start end  lparam = LPTOOLINFO
		__QCMP_STATIC_CONSTANT( int, TTM_TRACKPOSITION       = ( COSWindow::wmUser + 18 ) );  // lParam = dwPos
		__QCMP_STATIC_CONSTANT( int, TTM_SETTIPBKCOLOR       = ( COSWindow::wmUser + 19 ) );
		__QCMP_STATIC_CONSTANT( int, TTM_SETTIPTEXTCOLOR     = ( COSWindow::wmUser + 20 ) );
		__QCMP_STATIC_CONSTANT( int, TTM_GETDELAYTIME        = ( COSWindow::wmUser + 21 ) );
		__QCMP_STATIC_CONSTANT( int, TTM_GETTIPBKCOLOR       = ( COSWindow::wmUser + 22 ) );
		__QCMP_STATIC_CONSTANT( int, TTM_GETTIPTEXTCOLOR     = ( COSWindow::wmUser + 23 ) );
		__QCMP_STATIC_CONSTANT( int, TTM_SETMAXTIPWIDTH      = ( COSWindow::wmUser + 24 ) );
		__QCMP_STATIC_CONSTANT( int, TTM_GETMAXTIPWIDTH      = ( COSWindow::wmUser + 25 ) );
		__QCMP_STATIC_CONSTANT( int, TTM_SETMARGIN           = ( COSWindow::wmUser + 26 ) );  // lParam = lprc
		__QCMP_STATIC_CONSTANT( int, TTM_GETMARGIN           = ( COSWindow::wmUser + 27 ) );  // lParam = lprc
		__QCMP_STATIC_CONSTANT( int, TTM_POP                 = ( COSWindow::wmUser + 28 ) );
#endif
#if (_WIN32_IE >= 0x0400)
		__QCMP_STATIC_CONSTANT( int, TTM_UPDATE              = ( COSWindow::wmUser + 29 ) );
#endif
#if (_WIN32_IE >= 0x0500)
		__QCMP_STATIC_CONSTANT( int, TTM_GETBUBBLESIZE       = ( COSWindow::wmUser + 30 ) );
		__QCMP_STATIC_CONSTANT( int, TTM_ADJUSTRECT          = ( COSWindow::wmUser + 31 ) );
		__QCMP_STATIC_CONSTANT( int, TTM_SETTITLEA           = ( COSWindow::wmUser + 32 ) );  // wParam = TTI_*, lParam = char* szTitle
		__QCMP_STATIC_CONSTANT( int, TTM_SETTITLEW           = ( COSWindow::wmUser + 33 ) );  // wParam = TTI_*, lParam = wchar* szTitle
#endif

#if (_WIN32_WINNT >= 0x0501)
		__QCMP_STATIC_CONSTANT( int, TTM_POPUP               = ( COSWindow::wmUser + 34 ) );
		__QCMP_STATIC_CONSTANT( int, TTM_GETTITLE            = ( COSWindow::wmUser + 35 ) ); // wParam = 0, lParam = TTGETTITLE*
#endif

#ifdef UNICODE
#	define TTM_ADDTOOL             TTM_ADDTOOLW
#	define TTM_DELTOOL             TTM_DELTOOLW
#	define TTM_NEWTOOLRECT         TTM_NEWTOOLRECTW
#	define TTM_GETTOOLINFO         TTM_GETTOOLINFOW
#	define TTM_SETTOOLINFO         TTM_SETTOOLINFOW
#	define TTM_HITTEST             TTM_HITTESTW
#	define TTM_GETTEXT             TTM_GETTEXTW
#	define TTM_UPDATETIPTEXT       TTM_UPDATETIPTEXTW
#	define TTM_ENUMTOOLS           TTM_ENUMTOOLSW
#	define TTM_GETCURRENTTOOL      TTM_GETCURRENTTOOLW
#	if (_WIN32_IE >= 0x0500)
#		define TTM_SETTITLE            TTM_SETTITLEW
#	endif
#else
#	define TTM_ADDTOOL             TTM_ADDTOOLA
#	define TTM_DELTOOL             TTM_DELTOOLA
#	define TTM_NEWTOOLRECT         TTM_NEWTOOLRECTA
#	define TTM_GETTOOLINFO         TTM_GETTOOLINFOA
#	define TTM_SETTOOLINFO         TTM_SETTOOLINFOA
#	define TTM_HITTEST             TTM_HITTESTA
#	define TTM_GETTEXT             TTM_GETTEXTA
#	define TTM_UPDATETIPTEXT       TTM_UPDATETIPTEXTA
#	define TTM_ENUMTOOLS           TTM_ENUMTOOLSA
#	define TTM_GETCURRENTTOOL      TTM_GETCURRENTTOOLA
#	if (_WIN32_IE >= 0x0500)
#		define TTM_SETTITLE            TTM_SETTITLEA
#	endif
#endif

#define TTM_SETWINDOWTHEME      CCM_SETWINDOWTHEME


		__QOR_DECLARE_OCLASS_ID( CToolTip );

		CToolTip();
		virtual ~CToolTip();
		virtual long OnNotify( NotificationMessageHeader* pHdr );
		virtual long OnCustomDraw( NMTTCUSTOMDRAW* pHdr );
		virtual void OnLinkClick( NotificationMessageHeader* pHdr );
		virtual void OnGetDispInfo( NMTTDISPINFO* pHdr );
		virtual void OnPop( NotificationMessageHeader* pHdr );
		virtual bool OnShow( NotificationMessageHeader* pHdr );
		virtual long OnUnknownNotification( NotificationMessageHeader* pHdr );

		void Activate( bool bActivate );
		bool AddTool( ToolInfo& ToolInfo );
		bool AdjustRect( bool bLarger, CRectangle& rcToolTip );
		void DeleteTool( ToolInfo& ToolInfo );
		bool EnumTools( unsigned int uiTool, ToolInfo& ToolInfo );
		long GetBubbleSize( ToolInfo& ToolInfo );
		bool GetCurrentTool( ToolInfo& ToolInfo );
		long GetDelayTime( unsigned long dwDuration );
		void GetMargin( CRectangle& rcMargin );
		long GetMaxTipWidth();
		void GetText( Cmp_uint_ptr cch, ToolInfo& ToolInfo );
		unsigned long GetBkColour();
		unsigned long GetTextColour();
		void GetTitle( TTGETTITLE& GetTitleData );
		long GetToolCount();
		bool GetToolInfo( ToolInfo& ToolInfo );
		bool HitTest( TTHitTestInfo& HitTestInfo );
		void NewToolRect( ToolInfo& ToolInfo );
		void Pop();
		void Popup();
		void RelayEvent( MSG* pMsg );
		void SetDelayTime( unsigned long dwDuration, unsigned short wDelay );
		void SetMargin( CRectangle& rcMargin );
		long SetMaxTipWidth( unsigned int uiWidth );
		void SetBkColour( unsigned long clrBk );
		void SetTextColour( unsigned long clrText );
		bool SetTitle( int iIcon, const TCHAR* strTitle );
		void SetToolInfo( ToolInfo& ToolInfo );
		void SetWindowTheme( wchar_t* strTheme );
		void TrackActivate( bool bActivate, ToolInfo& ToolInfo );
		void TrackPosition( unsigned short xPos, unsigned short yPos );
		void Update();
		void UpdateText( ToolInfo& ToolInfo );
		COSWindow::refType WindowFromPoint( POINT& Point );

	};

	//--------------------------------------------------------------------------------		
	class __QOR_INTERFACE( __WINQL_GUI ) CToolTipFactory : public CCommonCtrlFactory< CToolTip >
	{
	public:

		__QCMP_STATIC_CONSTANT( int, TTS_ALWAYSTIP           = 0x01 );
		__QCMP_STATIC_CONSTANT( int, TTS_NOPREFIX            = 0x02 );
#if (_WIN32_IE >= 0x0500)
		__QCMP_STATIC_CONSTANT( int, TTS_NOANIMATE           = 0x10 );
		__QCMP_STATIC_CONSTANT( int, TTS_NOFADE              = 0x20 );
		__QCMP_STATIC_CONSTANT( int, TTS_BALLOON             = 0x40 );
		__QCMP_STATIC_CONSTANT( int, TTS_CLOSE               = 0x80 );
#endif
#if _WIN32_WINNT >= 0x0600
		__QCMP_STATIC_CONSTANT( int, TTS_USEVISUALSTYLE      = 0x100 );  // Use themed hyperlinks
#endif

		__QOR_DECLARE_OCLASS_ID( CToolTipFactory );

		CToolTipFactory();
		virtual ~CToolTipFactory();
		bool GetAlwaysTip();
		void SetAlwaysTip( bool bFlag );
		bool GetBalloon();
		void SetBalloon( bool bFlag );
		bool GetNoAnimate();
		void SetNoAnimate( bool bFlag );
		bool GetNoFade();
		void SetNoFade( bool bFlag );
		bool GetNoPrefix();
		void SetNoPrefix( bool bFlag );
		bool GetClose();
		void SetClose( bool bFlag );
		bool GetUseVisualStyle();
		void SetUseVisualStyle( bool bFlag );

	private:

		CToolTipFactory( const CToolTipFactory& );
		CToolTipFactory& operator = ( const CToolTipFactory& );
	};

}//nsWin32

#endif//WINQL_GUI_WND_CCTRL_TOOLTIP_H_3
