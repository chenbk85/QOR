//Trackbar.h

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Trackbar Common Control Window

#ifndef WINQL_GUI_WND_CCTRL_TRACKBAR_H_3
#define WINQL_GUI_WND_CCTRL_TRACKBAR_H_3

#include "WinQL/GUI/Views/WindowView.h"
#include "WinQL/GUI/Windows/WinCtrlWindow.h"
#include "WinQL/GUI/Windows/CommonCtrlClass.h"
#include "WinQL/GUI/Windows/CommonCtrlFactory.h"
#include "MammutQOR/Model.h"
#include "WinQL/Application/Graphics/WinQLRectangle.h"


#if		( _WIN32_WINNT < 0x0600 )

	typedef struct tagTRBTHUMBPOSCHANGING : public NotificationMessageHeader
	{
		//NMHDR hdr;
		unsigned long dwPos;
		int nReason;
	} NMTRBTHUMBPOSCHANGING;

#endif//( _WIN32_WINNT < 0x0600 )


//--------------------------------------------------------------------------------
namespace nsWin32
{
	class __QOR_INTERFACE( __WINQL_GUI ) CTrackbarFactory;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CTrackbarClass : public CCommonCtrlClass
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CTrackbarClass );

		CTrackbarClass();
		virtual ~CTrackbarClass();

	private:

		CTrackbarClass( const CTrackbarClass& );
		CTrackbarClass& operator = ( const CTrackbarClass& );
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CTrackbar : public CWinCtrlWindow
	{
	public:

		typedef CTrackbarClass TWndClass;
		typedef CTrackbarFactory TFactory;

		//--------------------------------------------------------------------------------
		typedef struct tagTRBTHUMBPOSCHANGING : public NotificationMessageHeader
		{
			//NMHDR hdr;
			unsigned long dwPos;
			int nReason;
		} NMTRBTHUMBPOSCHANGING;

		__QCMP_STATIC_CONSTANT( int, TRBN_FIRST              = ( 0U - 1501U ) );       // trackbar
		__QCMP_STATIC_CONSTANT( int, TRBN_LAST               = ( 0U - 1519U ) );

		__QCMP_STATIC_CONSTANT( int, TRBN_THUMBPOSCHANGING   = ( TRBN_FIRST - 1 ) );

		__QCMP_STATIC_CONSTANT( int, TBM_GETPOS              = (COSWindow::wmUser)	 );
		__QCMP_STATIC_CONSTANT( int, TBM_GETRANGEMIN         = (COSWindow::wmUser+1)  );
		__QCMP_STATIC_CONSTANT( int, TBM_GETRANGEMAX         = (COSWindow::wmUser+2)  );
		__QCMP_STATIC_CONSTANT( int, TBM_GETTIC              = (COSWindow::wmUser+3)  );
		__QCMP_STATIC_CONSTANT( int, TBM_SETTIC              = (COSWindow::wmUser+4)  );
		__QCMP_STATIC_CONSTANT( int, TBM_SETPOS              = (COSWindow::wmUser+5)  );
		__QCMP_STATIC_CONSTANT( int, TBM_SETRANGE            = (COSWindow::wmUser+6)  );
		__QCMP_STATIC_CONSTANT( int, TBM_SETRANGEMIN         = (COSWindow::wmUser+7)  );
		__QCMP_STATIC_CONSTANT( int, TBM_SETRANGEMAX         = (COSWindow::wmUser+8)  );
		__QCMP_STATIC_CONSTANT( int, TBM_CLEARTICS           = (COSWindow::wmUser+9)  );
		__QCMP_STATIC_CONSTANT( int, TBM_SETSEL              = (COSWindow::wmUser+10) );
		__QCMP_STATIC_CONSTANT( int, TBM_SETSELSTART         = (COSWindow::wmUser+11) );
		__QCMP_STATIC_CONSTANT( int, TBM_SETSELEND           = (COSWindow::wmUser+12) );
		__QCMP_STATIC_CONSTANT( int, TBM_GETPTICS            = (COSWindow::wmUser+14) );
		__QCMP_STATIC_CONSTANT( int, TBM_GETTICPOS           = (COSWindow::wmUser+15) );
		__QCMP_STATIC_CONSTANT( int, TBM_GETNUMTICS          = (COSWindow::wmUser+16) );
		__QCMP_STATIC_CONSTANT( int, TBM_GETSELSTART         = (COSWindow::wmUser+17) );
		__QCMP_STATIC_CONSTANT( int, TBM_GETSELEND           = (COSWindow::wmUser+18) );
		__QCMP_STATIC_CONSTANT( int, TBM_CLEARSEL            = (COSWindow::wmUser+19) );
		__QCMP_STATIC_CONSTANT( int, TBM_SETTICFREQ          = (COSWindow::wmUser+20) );
		__QCMP_STATIC_CONSTANT( int, TBM_SETPAGESIZE         = (COSWindow::wmUser+21) );
		__QCMP_STATIC_CONSTANT( int, TBM_GETPAGESIZE         = (COSWindow::wmUser+22) );
		__QCMP_STATIC_CONSTANT( int, TBM_SETLINESIZE         = (COSWindow::wmUser+23) );
		__QCMP_STATIC_CONSTANT( int, TBM_GETLINESIZE         = (COSWindow::wmUser+24) );
		__QCMP_STATIC_CONSTANT( int, TBM_GETTHUMBRECT        = (COSWindow::wmUser+25) );
		__QCMP_STATIC_CONSTANT( int, TBM_GETCHANNELRECT      = (COSWindow::wmUser+26) );
		__QCMP_STATIC_CONSTANT( int, TBM_SETTHUMBLENGTH      = (COSWindow::wmUser+27) );
		__QCMP_STATIC_CONSTANT( int, TBM_GETTHUMBLENGTH      = (COSWindow::wmUser+28) );
		__QCMP_STATIC_CONSTANT( int, TBM_SETTOOLTIPS         = (COSWindow::wmUser+29) );
		__QCMP_STATIC_CONSTANT( int, TBM_GETTOOLTIPS         = (COSWindow::wmUser+30) );
		__QCMP_STATIC_CONSTANT( int, TBM_SETTIPSIDE          = (COSWindow::wmUser+31) );
		__QCMP_STATIC_CONSTANT( int, TBM_SETBUDDY            = (COSWindow::wmUser+32) ); // wparam = BOOL fLeft; (or right)
		__QCMP_STATIC_CONSTANT( int, TBM_GETBUDDY            = (COSWindow::wmUser+33) ); // wparam = BOOL fLeft; (or right)
		__QCMP_STATIC_CONSTANT( int, TBM_SETPOSNOTIFY        = (COSWindow::wmUser+34) );

#define TBM_SETUNICODEFORMAT    CCM_SETUNICODEFORMAT
#define TBM_GETUNICODEFORMAT    CCM_GETUNICODEFORMAT

		__QOR_DECLARE_OCLASS_ID( CTrackbar );

		CTrackbar();
		~CTrackbar();
		virtual long OnNotify( NotificationMessageHeader* pHdr );
		virtual long OnCustomDraw( NMCustomDraw* pHdr );
		virtual void OnReleasedCapture( NotificationMessageHeader* pHdr );
		virtual void OnThumbPosChanging( NMTRBTHUMBPOSCHANGING* pHdr );
		virtual long OnUnknownNotification( NotificationMessageHeader* pHdr );

		void ClearSel( bool bRedraw );
		void ClearTicks( bool bRedraw );
		COSWindow::refType GetBuddy( bool bLocation );
		void GetChannelRect( CRectangle& rcChannel );
		long GetLineSize();
		long GetNumTicks();
		long GetPageSize();
		long GetPos();
		unsigned long* GetPosTicks();
		long GetRangeMax();
		long GetRangeMin();
		long GetSelEnd();
		long GetSelStart();
		long GetThumbLength();
		long GetThumbRect( CRectangle& rcThumb );
		long GetTick( unsigned short wTick );
		long GetTickPos( unsigned short wTick );
		COSWindow::refType GetToolTips();
		bool GetUnicodeFormat();
		COSWindow::refType SetBuddy( bool bLocation, COSWindow::refType hBuddy );
		long SetLineSize( long lLineSize );
		long SetPageSize( long lPageSize );
		void SetPos( bool bRedraw, long lPos );
		void SetRange( bool bRedraw, unsigned short wMin, unsigned short wMax );
		void SetRangeMax( bool bRedraw, long lMax );
		void SetRangeMin( bool bRedraw, long lMin );
		void SetSel( bool bRedraw, unsigned short wMin, unsigned short wMax );
		void SetSelEnd( bool bRedraw, long lEnd );
		void SetSelStart( bool bRedraw, long lStart );
		void SetThumbLength( unsigned int uiLength );
		bool SetTic( long lPosition );
		void SetTicFrequency( unsigned short wFreq );
		long SetTipSide( int iLocation );
		void SetToolTips( COSWindow::refType hToolTips );
		bool SetUnicodeFormat( bool bUnicode );

	private:

		CTrackbar( const CTrackbar& );
		CTrackbar& operator = ( const CTrackbar& );

	};

	//--------------------------------------------------------------------------------		
	class __QOR_INTERFACE( __WINQL_GUI ) CTrackbarFactory : public CCommonCtrlFactory< CTrackbar >
	{
	public:

		__QCMP_STATIC_CONSTANT( int, TBS_AUTOTICKS           = 0x0001 );
		__QCMP_STATIC_CONSTANT( int, TBS_VERT                = 0x0002 );
		__QCMP_STATIC_CONSTANT( int, TBS_HORZ                = 0x0000 );
		__QCMP_STATIC_CONSTANT( int, TBS_TOP                 = 0x0004 );
		__QCMP_STATIC_CONSTANT( int, TBS_BOTTOM              = 0x0000 );
		__QCMP_STATIC_CONSTANT( int, TBS_LEFT                = 0x0004 );
		__QCMP_STATIC_CONSTANT( int, TBS_RIGHT               = 0x0000 );
		__QCMP_STATIC_CONSTANT( int, TBS_BOTH                = 0x0008 );
		__QCMP_STATIC_CONSTANT( int, TBS_NOTICKS             = 0x0010 );
		__QCMP_STATIC_CONSTANT( int, TBS_ENABLESELRANGE      = 0x0020 );
		__QCMP_STATIC_CONSTANT( int, TBS_FIXEDLENGTH         = 0x0040 );
		__QCMP_STATIC_CONSTANT( int, TBS_NOTHUMB             = 0x0080 );
#if (_WIN32_IE >= 0x0300)
		__QCMP_STATIC_CONSTANT( int, TBS_TOOLTIPS            = 0x0100 );
#endif
#if (_WIN32_IE >= 0x0500)
		__QCMP_STATIC_CONSTANT( int, TBS_REVERSED            = 0x0200 ); // Accessibility hint: the smaller number (usually the min value) means "high" and the larger number (usually the max value) means "low"
#endif

#if (_WIN32_IE >= 0x0501)
		__QCMP_STATIC_CONSTANT( int, TBS_DOWNISLEFT          = 0x0400 ); // Down=Left and Up=Right (default is Down=Right and Up=Left)
#endif

#if (_WIN32_IE >= 0x0600)
		__QCMP_STATIC_CONSTANT( int, TBS_NOTIFYBEFOREMOVE    = 0x0800 ); // Trackbar should notify parent before repositioning the slider due to user action (enables snapping)
#endif

#if (NTDDI_VERSION >= NTDDI_VISTA)
		__QCMP_STATIC_CONSTANT( int, TBS_TRANSPARENTBKGND    = 0x1000 ); // Background is painted by the parent via WM_PRINTCLIENT
#endif

		__QOR_DECLARE_OCLASS_ID( CTrackbarFactory );

		CTrackbarFactory();
		bool GetAutoTicks();
		void SetAutoTicks( bool bFlag );
		bool GetVertical();
		void SetVertical( bool bFlag );
		bool GetHorizontal();
		void SetHorizontal( bool bFlag );
		bool GetTop();
		void SetTop( bool bFlag );
		bool GetBottom();
		void SetBottom( bool bFlag );
		bool GetLeft();
		void SetLeft( bool bFlag );
		bool GetRight();
		void SetRight( bool bFlag );
		bool GetBoth();
		void SetBoth( bool bFlag );
		bool GetNoTicks();
		void SetNoTicks( bool bFlag );
		bool GetEnableSelRange();
		void SetEnableSelRange( bool bFlag );
		bool GetFixedLength();
		void SetFixedLength( bool bFlag );
		bool GetNoThumb();
		void SetNoThumb( bool bFlag );
		bool GetToolTips();
		void SetToolTips( bool bFlag );
		bool GetReversed();
		void SetReversed( bool bFlag );
		bool GetDownIsLeft();
		void SetDownIsLeft( bool bFlag );
		bool GetNotifyBeforeMove();
		void SetNotifyBeforeMove( bool bFlag );
		bool GetTransparentBackground();
		void SetTransparentBackground( bool bFlag );

	private:

		CTrackbarFactory( const CTrackbarFactory& );
		CTrackbarFactory& operator = ( const CTrackbarFactory& );
	};

}//nsWin32

#endif//WINQL_GUI_WND_CCTRL_TRACKBAR_H_3
