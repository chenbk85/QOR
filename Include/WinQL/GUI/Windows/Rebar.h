//Rebar.h

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Rebar Common Control Window

#ifndef WINQL_GUI_WND_CCTRL_REBAR_H_3
#define WINQL_GUI_WND_CCTRL_REBAR_H_3

#include "WinQL/GUI/Views/WindowView.h"
#include "WinQL/GUI/WindowFactory.h"
#include "WinQL/GUI/Windows/WinCtrlWindow.h"
#include "WinQL/GUI/CommonCtrl.h"
#include "MammutQOR/Model.h"
#include "WinQL/Application/Graphics/WinQLRectangle.h"
#include "WinQL/Definitions/Interfaces.h"
#include "WinQL/GUI/ImageList.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CRebarClass : public CWindowClass
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CRebarClass );

		CRebarClass();
		virtual ~CRebarClass();
		virtual bool Preregistered();
		const TCHAR* Name();

	private:

		CCommonCtrl m_ComCtrl32;

		CRebarClass( const CRebarClass& );
		CRebarClass& operator = ( const CRebarClass& );
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CRebar : public CWinCtrlWindow
	{
	public:

		//--------------------------------------------------------------------------------
		typedef struct tagNMREBAR : public NotificationMessageHeader
		{
			//NMHDR   hdr;
			unsigned long   dwMask;           // RBNM_*
			unsigned int    uBand;
			unsigned int    fStyle;
			unsigned int    wID;
			Cmp_long_ptr  lParam;
		} NMREBAR, *LPNMREBAR;

		//--------------------------------------------------------------------------------
		typedef struct tagNMREBARAUTOBREAK : public NotificationMessageHeader
		{
			//NMHDR hdr;
			unsigned int uBand;
			unsigned int wID;
			Cmp_long_ptr lParam;
			unsigned int uMsg;
			unsigned int fStyleCurrent;
			int fAutoBreak;
		} NMREBARAUTOBREAK, *LPNMREBARAUTOBREAK;

		//--------------------------------------------------------------------------------
		typedef struct _RB_HITTESTINFO
		{
			POINT pt;
			unsigned int flags;
			int iBand;
		} RBHITTESTINFO, *LPRBHITTESTINFO;

		//--------------------------------------------------------------------------------
		typedef struct tagNMREBARCHEVRON : public NotificationMessageHeader
		{
			//NMHDR hdr;
			unsigned int uBand;
			unsigned int wID;
			Cmp_long_ptr lParam;
			RECT rc;
			Cmp_long_ptr lParamNM;
		} NMREBARCHEVRON, *LPNMREBARCHEVRON;

		//--------------------------------------------------------------------------------
		typedef struct tagNMMOUSE : public NotificationMessageHeader
		{
			//NMHDR   hdr;
			Cmp_ulong_ptr dwItemSpec;
			Cmp_ulong_ptr dwItemData;
			POINT   pt;
			Cmp_long_ptr  dwHitInfo; // any specifics about where on the item or control the mouse is
		} NMMOUSE, *LPNMMOUSE;

		//--------------------------------------------------------------------------------
		typedef struct tagNMOBJECTNOTIFY  : public NotificationMessageHeader
		{
			//NMHDR   hdr;
			int     iItem;
#ifdef __IID_DEFINED__
			const IID *piid;
#else
			const void *piid;
#endif
			void *pObject;
			long hResult;
			unsigned long dwFlags;    // control specific flags (hints as to where in iItem it hit)
		} NMOBJECTNOTIFY, *LPNMOBJECTNOTIFY;

		//--------------------------------------------------------------------------------
		typedef struct tagNMRBAUTOSIZE : public NotificationMessageHeader
		{
			//NMHDR hdr;
			int fChanged;
			RECT rcTarget;
			RECT rcActual;
		} NMRBAUTOSIZE, *LPNMRBAUTOSIZE;

		//--------------------------------------------------------------------------------
		typedef struct tagNMREBARCHILDSIZE : public NotificationMessageHeader
		{
			//NMHDR hdr;
			unsigned int uBand;
			unsigned int wID;
			RECT rcChild;
			RECT rcBand;
		} NMREBARCHILDSIZE, *LPNMREBARCHILDSIZE;

		//--------------------------------------------------------------------------------
		struct ReBarBandInfo		//REBARBANDINFO
		{
			unsigned int        cbSize;
			unsigned int        fMask;
			unsigned int        fStyle;
			unsigned long    clrFore;
			unsigned long    clrBack;
			TCHAR*      lpText;
			unsigned int        cch;
			int         iImage;
			COSWindow*        hwndChild;
			unsigned int        cxMinChild;
			unsigned int        cyMinChild;
			unsigned int        cx;
			CBitmap*	     hbmBack;
			unsigned int        wID;
#if (_WIN32_IE >= 0x0400)
			unsigned int        cyChild;
			unsigned int        cyMaxChild;
			unsigned int        cyIntegral;
			unsigned int        cxIdeal;
			Cmp_long_ptr      lParam;
			unsigned int        cxHeader;
#endif
#if (_WIN32_WINNT >= 0x0600)
			RECT        rcChevronLocation;    // the rect is in client co-ord wrt hwndChild
			unsigned int        uChevronState; // STATE_SYSTEM_*
#endif
		};

		//--------------------------------------------------------------------------------
		struct ReBarInfo		//REBARINFO
		{
			unsigned int        cbSize;
			unsigned int        fMask;
#ifndef NOIMAGEAPIS
			CImageList*		  himl;
#else
			void*      himl;
#endif
		};

		//Notifications
		__QCMP_STATIC_CONSTANT( int, RBN_FIRST           = (0U-831U) );
		__QCMP_STATIC_CONSTANT( int, RBN_LAST            = (0U-859U) );

		__QCMP_STATIC_CONSTANT( int, RBN_HEIGHTCHANGE    = ( RBN_FIRST - 0)  );
		__QCMP_STATIC_CONSTANT( int, RBN_GETOBJECT       = ( RBN_FIRST - 1)  );
		__QCMP_STATIC_CONSTANT( int, RBN_LAYOUTCHANGED   = ( RBN_FIRST - 2)  );
		__QCMP_STATIC_CONSTANT( int, RBN_AUTOSIZE        = ( RBN_FIRST - 3)  );
		__QCMP_STATIC_CONSTANT( int, RBN_BEGINDRAG       = ( RBN_FIRST - 4)  );
		__QCMP_STATIC_CONSTANT( int, RBN_ENDDRAG         = ( RBN_FIRST - 5)  );
		__QCMP_STATIC_CONSTANT( int, RBN_DELETINGBAND    = ( RBN_FIRST - 6)  );
		__QCMP_STATIC_CONSTANT( int, RBN_DELETEDBAND     = ( RBN_FIRST - 7)  );
		__QCMP_STATIC_CONSTANT( int, RBN_CHILDSIZE       = ( RBN_FIRST - 8)  );
		__QCMP_STATIC_CONSTANT( int, RBN_CHEVRONPUSHED   = ( RBN_FIRST - 10) );
		__QCMP_STATIC_CONSTANT( int, RBN_SPLITTERDRAG    = ( RBN_FIRST - 11) );
		__QCMP_STATIC_CONSTANT( int, RBN_MINMAX          = ( RBN_FIRST - 21) );
		__QCMP_STATIC_CONSTANT( int, RBN_AUTOBREAK       = ( RBN_FIRST - 22) );
			
		//Messages

		__QCMP_STATIC_CONSTANT( int, RB_INSERTBANDA		= (COSWindow::wmUser +  1) );
		__QCMP_STATIC_CONSTANT( int, RB_DELETEBAND		= (COSWindow::wmUser +  2) );
		__QCMP_STATIC_CONSTANT( int, RB_GETBARINFO		= (COSWindow::wmUser +  3) );
		__QCMP_STATIC_CONSTANT( int, RB_SETBARINFO		= (COSWindow::wmUser +  4) );
		__QCMP_STATIC_CONSTANT( int, RB_GETBANDINFO		= (COSWindow::wmUser +  5) );
		__QCMP_STATIC_CONSTANT( int, RB_SETBANDINFOA		= (COSWindow::wmUser +  6) );
		__QCMP_STATIC_CONSTANT( int, RB_SETPARENT		= (COSWindow::wmUser +  7) );
		__QCMP_STATIC_CONSTANT( int, RB_HITTEST			= (COSWindow::wmUser +  8) );
		__QCMP_STATIC_CONSTANT( int, RB_GETRECT			= (COSWindow::wmUser +  9) );
		__QCMP_STATIC_CONSTANT( int, RB_INSERTBANDW		= (COSWindow::wmUser +  10));
		__QCMP_STATIC_CONSTANT( int, RB_SETBANDINFOW		= (COSWindow::wmUser +  11));
		__QCMP_STATIC_CONSTANT( int, RB_GETBANDCOUNT		= (COSWindow::wmUser +  12));
		__QCMP_STATIC_CONSTANT( int, RB_GETROWCOUNT		= (COSWindow::wmUser +  13));
		__QCMP_STATIC_CONSTANT( int, RB_GETROWHEIGHT		= (COSWindow::wmUser +  14));
		__QCMP_STATIC_CONSTANT( int, RB_IDTOINDEX		= (COSWindow::wmUser +  16));// wParam == id
		__QCMP_STATIC_CONSTANT( int, RB_GETTOOLTIPS		= (COSWindow::wmUser +  17));
		__QCMP_STATIC_CONSTANT( int, RB_SETTOOLTIPS		= (COSWindow::wmUser +  18));
		__QCMP_STATIC_CONSTANT( int, RB_SETBKCOLOR		= (COSWindow::wmUser +  19));// sets the default BK color
		__QCMP_STATIC_CONSTANT( int, RB_GETBKCOLOR		= (COSWindow::wmUser +  20));// defaults to CLR_NONE
		__QCMP_STATIC_CONSTANT( int, RB_SETTEXTCOLOR		= (COSWindow::wmUser +  21));
		__QCMP_STATIC_CONSTANT( int, RB_GETTEXTCOLOR		= (COSWindow::wmUser +  22));// defaults to 0x00000000
		__QCMP_STATIC_CONSTANT( int, RB_SIZETORECT		= (COSWindow::wmUser +  23));// resize the rebar/break bands and such to this rect (lparam)
		__QCMP_STATIC_CONSTANT( int, RB_BEGINDRAG		= (COSWindow::wmUser + 24) );
		__QCMP_STATIC_CONSTANT( int, RB_ENDDRAG			= (COSWindow::wmUser + 25) );
		__QCMP_STATIC_CONSTANT( int, RB_DRAGMOVE			= (COSWindow::wmUser + 26) );
		__QCMP_STATIC_CONSTANT( int, RB_GETBARHEIGHT		= (COSWindow::wmUser + 27) );
		__QCMP_STATIC_CONSTANT( int, RB_GETBANDINFOW		= (COSWindow::wmUser + 28) );
		__QCMP_STATIC_CONSTANT( int, RB_GETBANDINFOA		= (COSWindow::wmUser + 29) );
		__QCMP_STATIC_CONSTANT( int, RB_MINIMIZEBAND		= (COSWindow::wmUser + 30) );
		__QCMP_STATIC_CONSTANT( int, RB_MAXIMIZEBAND		= (COSWindow::wmUser + 31) );
		__QCMP_STATIC_CONSTANT( int, RB_GETBANDBORDERS	= (COSWindow::wmUser + 34) );// returns in lparam = lprc the amount of edges added to band wparam
		__QCMP_STATIC_CONSTANT( int, RB_SHOWBAND			= (COSWindow::wmUser + 35) );    // show/hide band
		__QCMP_STATIC_CONSTANT( int, RB_SETPALETTE		= (COSWindow::wmUser + 37) );
		__QCMP_STATIC_CONSTANT( int, RB_GETPALETTE		= (COSWindow::wmUser + 38) );
		__QCMP_STATIC_CONSTANT( int, RB_MOVEBAND			= (COSWindow::wmUser + 39) );
		__QCMP_STATIC_CONSTANT( int, RB_GETBANDMARGINS   = (COSWindow::wmUser + 40) );
		__QCMP_STATIC_CONSTANT( int, RB_SETEXTENDEDSTYLE = (COSWindow::wmUser + 41) );
		__QCMP_STATIC_CONSTANT( int, RB_GETEXTENDEDSTYLE = (COSWindow::wmUser + 42) );
		__QCMP_STATIC_CONSTANT( int, RB_PUSHCHEVRON      = (COSWindow::wmUser + 43) );
		__QCMP_STATIC_CONSTANT( int, RB_SETBANDWIDTH     = (COSWindow::wmUser + 44) ); // set width for docked band

#ifdef UNICODE
#	define RB_INSERTBAND   RB_INSERTBANDW
#	define RB_SETBANDINFO   RB_SETBANDINFOW
#else
#	define RB_INSERTBAND   RB_INSERTBANDA
#	define RB_SETBANDINFO   RB_SETBANDINFOA
#endif

#define RB_SETWINDOWTHEME       CCM_SETWINDOWTHEME
#define RB_SETUNICODEFORMAT     CCM_SETUNICODEFORMAT
#define RB_GETUNICODEFORMAT     CCM_GETUNICODEFORMAT
#define RB_GETDROPTARGET (CCM_GETDROPTARGET)
#define RB_SETCOLORSCHEME   CCM_SETCOLORSCHEME  // lParam is color scheme
#define RB_GETCOLORSCHEME   CCM_GETCOLORSCHEME  // fills in COLORSCHEME pointed to by lParam

		__QOR_DECLARE_OCLASS_ID( CRebar );

		CRebar();
		virtual ~CRebar();
		long OnNotify( NotificationMessageHeader* pHdr );

		virtual long OnCustomDraw( NMCustomDraw* pHdr );
		virtual long OnNCHitTest( NMMOUSE* pHdr );
		virtual void OnReleasedCapture( NotificationMessageHeader* pHdr );
		virtual void OnAutoBreak( NMREBARAUTOBREAK* pHdr );
		virtual void OnAutoSize( NMRBAUTOSIZE* pHdr );
		virtual bool OnBeginDrag( NMREBAR* pHdr );
		virtual void OnChevronPushed( NMREBARCHEVRON* pHdr );
		virtual void OnChildSize( NMREBARCHILDSIZE* pHdr );
		virtual void OnDeleteBand( NMREBAR* pHdr );
		virtual void OnDeletingBand( NMREBAR* pHdr );
		virtual void OnEndDrag( NMREBAR* pHdr );
		virtual void OnGetObject( NMOBJECTNOTIFY* pHdr );
		virtual void OnHeightChange( NotificationMessageHeader* pHdr );
		virtual void OnLayoutChanged( NotificationMessageHeader* pHdr );
		virtual bool OnMinMax( NotificationMessageHeader* pHdr );
		virtual void OnSplitterDrag( NMREBAR* pHdr );
		virtual long OnUnknownNotification( NotificationMessageHeader* pHdr );

		void BeginDrag( unsigned int uiBand, unsigned long dwPos );
		bool DeleteBand( unsigned int uiBand );
		void DragMove( unsigned long dwPos );
		void EndDrag();
		void GetBandBorders( unsigned int uiBand, CRectangle& rcBorders );
		long GetBandCount();
		bool GetBandInfo( unsigned int uiBand, ReBarBandInfo& BandInfo );
		long GetBandMargins( MARGINS& Margins );
		long GetBarHeight();
		bool GetBarInfo( ReBarInfo& Info );
		unsigned long GetBkColour();
		bool GetColourScheme( COLORSCHEME& ColourScheme );
		void GetDropTarget( IDropTarget** ppDropTarget );
		long GetExtendedStyle();
		CPaletteHandle::refType GetPalette();
		bool GetRect( unsigned int uiBand, CRectangle& rcBand );
		long GetRowCount();
		long GetRowHeight( unsigned int uiBand );
		unsigned long GetTextColour();
		CWindowHandle::refType GetToolTips();
		bool GetUnicodeFormat();
		long HitTest( RBHITTESTINFO& HitTestInfo );
		long IdToIndex( unsigned int uiBand );
		bool InsertBand( unsigned int uiIndex, ReBarBandInfo& BandInfo );
		void MaximizeBand( unsigned int uiBand, bool bUseIdealSize );
		void MinimizeBand( unsigned int uiBand );
		bool MinimizeBand( unsigned int uiFrom, unsigned int uiTo );
		void PushChevron( unsigned int uiBand, long lAppValue );
		bool SetBandInfo( unsigned int uiBand, ReBarBandInfo& BandInfo );
		bool SetBandWidth( unsigned int uiBand, Cmp_long_ptr PixelWidth );
		bool SetBarInfo( ReBarInfo& BarInfo );
		unsigned long SetBkColour( unsigned long clrBk );
		void SetColourScheme( COLORSCHEME& ColourScheme );
		long SetExtendedStyle( Cmp_uint_ptr wParam, Cmp_long_ptr lParam );
		CPaletteHandle::refType SetPalette( CPaletteHandle::refType hNewPalette );
		CWindowHandle::refType SetParent( CWindowHandle::refType hParent );
		unsigned long SetTextColour( unsigned long clrText );
		void SetToolTips( CWindowHandle::refType hToolTips );
		bool SetUnicodeFormat( bool bUnicode );
		void SetWindowTheme( wchar_t* strStyle );
		bool ShowBand( unsigned int uiBand, bool bShow );
		bool SizeToRect( CRectangle& rcSize );
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CRebarFactory : public CWindowFactory
	{
	public:

		__QCMP_STATIC_CONSTANT( int, RBS_TOOLTIPS                  = 0x00000100 );
		__QCMP_STATIC_CONSTANT( int, RBS_VARHEIGHT                 = 0x00000200 );
		__QCMP_STATIC_CONSTANT( int, RBS_BANDBORDERS               = 0x00000400 );
		__QCMP_STATIC_CONSTANT( int, RBS_FIXEDORDER                = 0x00000800 );
#if (_WIN32_IE >= 0x0400)											  			   
		__QCMP_STATIC_CONSTANT( int, RBS_REGISTERDROP              = 0x00001000 );
		__QCMP_STATIC_CONSTANT( int, RBS_AUTOSIZE                  = 0x00002000 );
		__QCMP_STATIC_CONSTANT( int, RBS_VERTICALGRIPPER           = 0x00004000 ); // this always has the vertical gripper (default for horizontal mode)
		__QCMP_STATIC_CONSTANT( int, RBS_DBLCLKTOGGLE              = 0x00008000 );
#endif      // _WIN32_IE >= 0x0400

		__QOR_DECLARE_OCLASS_ID( CRebarFactory );

		CRebarFactory();

		virtual ~CRebarFactory();

		virtual CRebar* Create();
			
		bool GetToolTips();
		void SetToolTips( bool bFlag );
		bool GetVariableHeight();
		void SetVariableHeight( bool bFlag );
		bool GetBandBorders();
		void SetBandBorders( bool bFlag );
		bool GetFixedOrder();
		void SetFixedOrder( bool bFlag );
		bool GetRegisterDrop();
		void SetRegisterDrop( bool bFlag );
		bool GetAutoSize();
		void SetAutoSize( bool bFlag );
		bool GetVerticalGripper();
		void SetVerticalGripper( bool bFlag );
		bool GetDblClickToggle();
		void SetDblClickToggle( bool bFlag );

	};

}//nsWin32

#endif//WINQL_GUI_WND_CCTRL_REBAR_H_3
