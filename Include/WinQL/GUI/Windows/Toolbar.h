//Toolbar.h

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Toolbar Common Control Window

#ifndef WINQL_GUI_WND_CCTRL_TOOLBAR_H_3
#define WINQL_GUI_WND_CCTRL_TOOLBAR_H_3

#include "WinQL/GUI/Views/WindowView.h"
#include "WinQL/GUI/Windows/WinCtrlWindow.h"
#include "WinQL/GUI/Windows/CommonCtrlClass.h"
#include "WinQL/GUI/Windows/CommonCtrlFactory.h"
#include "MammutQOR/Model.h"
#include "WinQL/Application/Graphics/WinQLRectangle.h"
#include "WinQL/GUI/ImageList.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	class __QOR_INTERFACE( __WINQL_GUI ) CToolbarFactory;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CToolbarClass : public CCommonCtrlClass
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CToolbarClass );

		CToolbarClass();
		virtual ~CToolbarClass();

	private:

		CToolbarClass( const CToolbarClass& );
		CToolbarClass& operator = ( const CToolbarClass& );
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CToolbar : public CWinCtrlWindow
	{
	public:

		typedef CToolbarClass TWndClass;
		typedef CToolbarFactory TFactory;

		//--------------------------------------------------------------------------------
		typedef struct _TBBUTTON 
		{
			int iBitmap;
			int idCommand;
			unsigned char fsState;
			unsigned char fsStyle;
#ifdef _WIN64
			unsigned char bReserved[ 6 ];          // padding for alignment
#elif defined(_WIN32)
			unsigned char bReserved[ 2 ];          // padding for alignment
#endif
			Cmp_ulong_ptr dwData;
			Cmp_int_ptr iString;
		} TBBUTTON, *PTBBUTTON, *LPTBBUTTON;

		//--------------------------------------------------------------------------------
		struct NMTOOLBAR : public NotificationMessageHeader
		{
			//NMHDR   hdr;
			int     iItem;
			TBBUTTON tbButton;
			int     cchText;
			wchar_t*   pszText;
#if (_WIN32_IE >= 0x500)
			RECT    rcButton;
#endif
		};

		//--------------------------------------------------------------------------------
		typedef struct 
		{
			int   iButton;
			unsigned long dwFlags;
		} TBINSERTMARK, * LPTBINSERTMARK;

		//--------------------------------------------------------------------------------
		typedef struct 
		{
			unsigned int cbSize;
			unsigned long dwMask;
			int idCommand;
			int iImage;
			unsigned char fsState;
			unsigned char fsStyle;
			unsigned short cx;
			Cmp_ulong_ptr lParam;
			TCHAR* pszText;
			int cchText;
		} TBBUTTONINFO, *LPTBBUTTONINFO;

		//--------------------------------------------------------------------------------
		typedef struct tagCOLORSCHEME 
		{
			unsigned long            dwSize;
			unsigned long         clrBtnHighlight;       // highlight color
			unsigned long         clrBtnShadow;          // shadow color
		} COLORSCHEME, *LPCOLORSCHEME;

		//--------------------------------------------------------------------------------
		typedef struct tagNMCHAR : public NotificationMessageHeader
		{
			//NMHDR   hdr;
			unsigned int    ch;
			unsigned long   dwItemPrev;     // Item previously selected
			unsigned long   dwItemNext;     // Item to be selected
		} NMCHAR, *LPNMCHAR;

		//--------------------------------------------------------------------------------
		typedef struct tagNMMOUSE : public NotificationMessageHeader
		{
			//NMHDR   hdr;
			Cmp_ulong_ptr dwItemSpec;
			Cmp_ulong_ptr dwItemData;
			POINT   pt;
			Cmp_long_ptr  dwHitInfo; // any specifics about where on the item or control the mouse is
		} NMMOUSE, *LPNMMOUSE;

		//--------------------------------------------------------------------------------
		typedef struct tagNMKEY : public NotificationMessageHeader
		{
			//NMHDR hdr;
			unsigned int  nVKey;
			unsigned int  uFlags;
		} NMKEY, *LPNMKEY;

		//--------------------------------------------------------------------------------
		typedef struct : public NotificationMessageHeader
		{
			//NMHDR  hdr;
			unsigned long dwMask;     // [in] Specifies the values requested .[out] Client ask the data to be set for future use
			int idCommand;    // [in] id of button we're requesting info for
			Cmp_ulong_ptr lParam;  // [in] lParam of button
			int iImage;       // [out] image index
			TCHAR* pszText;    // [out] new text for item
			int cchText;      // [in] size of buffer pointed to by pszText
		} NMTBDISPINFO, *LPNMTBDISPINFO;

		//--------------------------------------------------------------------------------
		typedef struct tagNMOBJECTNOTIFY : public NotificationMessageHeader
		{
			//NMHDR   hdr;
			int     iItem;
#ifdef __IID_DEFINED__
			const IID *piid;
#else
			const void *piid;
#endif
			void *pObject;
			long hResult;
			unsigned long dwFlags;    // control specific flags (hints as to where in iItem it hit)
		} NMOBJECTNOTIFY, *LPNMOBJECTNOTIFY;

		//--------------------------------------------------------------------------------
		typedef struct tagNMTBHOTITEM : public NotificationMessageHeader
		{
			//NMHDR   hdr;
			int     idOld;
			int     idNew;
			unsigned long   dwFlags;           // HICF_*
		} NMTBHOTITEM, * LPNMTBHOTITEM;

		//--------------------------------------------------------------------------------
		typedef struct tagNMTBGETINFOTIP : public NotificationMessageHeader
		{
			//NMHDR hdr;
			TCHAR* pszText;
			int cchTextMax;
			int iItem;
			Cmp_long_ptr lParam;
		} NMTBGETINFOTIP, *LPNMTBGETINFOTIP;

		//--------------------------------------------------------------------------------
		typedef struct tagNMTOOLTIPSCREATED : public NotificationMessageHeader
		{
			//NMHDR hdr;
			COSWindow* hwndToolTips;
		} NMTOOLTIPSCREATED, * LPNMTOOLTIPSCREATED;

		//--------------------------------------------------------------------------------
		typedef struct tagNMTBSAVE : public NotificationMessageHeader
		{
			//NMHDR hdr;
			unsigned long* pData;
			unsigned long* pCurrent;
			unsigned int cbData;
			int iItem;
			int cButtons;
			TBBUTTON tbButton;
		} NMTBSAVE, *LPNMTBSAVE;

		//--------------------------------------------------------------------------------
		typedef struct tagNMTBRESTORE : public NotificationMessageHeader
		{
			//NMHDR hdr;
			unsigned long* pData;
			unsigned long* pCurrent;
			unsigned int cbData;
			int iItem;
			int cButtons;
			int cbBytesPerRecord;
			TBBUTTON tbButton;
		} NMTBRESTORE, *LPNMTBRESTORE;

		//--------------------------------------------------------------------------------
		typedef struct 
		{
			unsigned int cbSize;
			unsigned long dwMask;

			int cxPad;        // PAD
			int cyPad;
			int cxBarPad;     // BARPAD
			int cyBarPad;
			int cxButtonSpacing;   // BUTTONSPACING
			int cyButtonSpacing;
		} TBMETRICS, * LPTBMETRICS;

		//--------------------------------------------------------------------------------
		typedef struct tagTBADDBITMAP 
		{
			InstanceHandle       hInst;
			Cmp_uint_ptr        nID;
		} TBADDBITMAP, *LPTBADDBITMAP;

		//--------------------------------------------------------------------------------
		typedef struct 
		{
			InstanceHandle       hInstOld;
			Cmp_uint_ptr        nIDOld;
			InstanceHandle       hInstNew;
			Cmp_uint_ptr        nIDNew;
			int					nButtons;
		} TBREPLACEBITMAP, *LPTBREPLACEBITMAP;

		//--------------------------------------------------------------------------------
		struct TBSaveParams		//TBSAVEPARAMS
		{
			KeyHandle hkr;
			const TCHAR* pszSubKey;
			const TCHAR* pszValueName;
		};

		__QCMP_STATIC_CONSTANT( int, TBN_FIRST               = (0U-700U) );
		__QCMP_STATIC_CONSTANT( int, TBN_LAST                = (0U-720U) );

		//Notifications
		__QCMP_STATIC_CONSTANT( int, TBN_GETBUTTONINFOA      = (TBN_FIRST-0)	   );
		__QCMP_STATIC_CONSTANT( int, TBN_BEGINDRAG           = (TBN_FIRST-1)	   );
		__QCMP_STATIC_CONSTANT( int, TBN_ENDDRAG             = (TBN_FIRST-2)	   );
		__QCMP_STATIC_CONSTANT( int, TBN_BEGINADJUST         = (TBN_FIRST-3)	   );
		__QCMP_STATIC_CONSTANT( int, TBN_ENDADJUST           = (TBN_FIRST-4)	   );
		__QCMP_STATIC_CONSTANT( int, TBN_RESET               = (TBN_FIRST-5)	   );
		__QCMP_STATIC_CONSTANT( int, TBN_QUERYINSERT         = (TBN_FIRST-6)	   );
		__QCMP_STATIC_CONSTANT( int, TBN_QUERYDELETE         = (TBN_FIRST-7)	   );
		__QCMP_STATIC_CONSTANT( int, TBN_TOOLBARCHANGE       = (TBN_FIRST-8)	   );
		__QCMP_STATIC_CONSTANT( int, TBN_CUSTHELP            = (TBN_FIRST-9)	   );
		__QCMP_STATIC_CONSTANT( int, TBN_DROPDOWN            = (TBN_FIRST - 10) );
		__QCMP_STATIC_CONSTANT( int, TBN_GETOBJECT           = (TBN_FIRST - 12) );
		__QCMP_STATIC_CONSTANT( int, TBN_HOTITEMCHANGE       = (TBN_FIRST - 13) );
		__QCMP_STATIC_CONSTANT( int, TBN_DRAGOUT             = (TBN_FIRST - 14) );
		__QCMP_STATIC_CONSTANT( int, TBN_DELETINGBUTTON      = (TBN_FIRST - 15) );
		__QCMP_STATIC_CONSTANT( int, TBN_GETDISPINFOA        = (TBN_FIRST - 16) );
		__QCMP_STATIC_CONSTANT( int, TBN_GETDISPINFOW        = (TBN_FIRST - 17) );
		__QCMP_STATIC_CONSTANT( int, TBN_GETINFOTIPA         = (TBN_FIRST - 18) );
		__QCMP_STATIC_CONSTANT( int, TBN_GETINFOTIPW         = (TBN_FIRST - 19) );
		__QCMP_STATIC_CONSTANT( int, TBN_GETBUTTONINFOW      = (TBN_FIRST - 20) );
		__QCMP_STATIC_CONSTANT( int, TBN_RESTORE             = (TBN_FIRST - 21) );
		__QCMP_STATIC_CONSTANT( int, TBN_SAVE                = (TBN_FIRST - 22) );
		__QCMP_STATIC_CONSTANT( int, TBN_INITCUSTOMIZE       = (TBN_FIRST - 23) );
		__QCMP_STATIC_CONSTANT( int, TBN_WRAPHOTITEM         = (TBN_FIRST - 24) );
		__QCMP_STATIC_CONSTANT( int, TBN_DUPACCELERATOR      = (TBN_FIRST - 25) );
		__QCMP_STATIC_CONSTANT( int, TBN_WRAPACCELERATOR     = (TBN_FIRST - 26) );
		__QCMP_STATIC_CONSTANT( int, TBN_DRAGOVER            = (TBN_FIRST - 27) );
		__QCMP_STATIC_CONSTANT( int, TBN_MAPACCELERATOR      = (TBN_FIRST - 28) );

#ifdef UNICODE
#	define TBN_GETINFOTIP          TBN_GETINFOTIPW
#	define TBN_GETDISPINFO       TBN_GETDISPINFOW
#	define TBN_GETBUTTONINFO       TBN_GETBUTTONINFOW
#else
#	define TBN_GETINFOTIP          TBN_GETINFOTIPA
#	define TBN_GETDISPINFO       TBN_GETDISPINFOA
#	define TBN_GETBUTTONINFO       TBN_GETBUTTONINFOA
#endif


		//Messages
		__QCMP_STATIC_CONSTANT( int, TB_ENABLEBUTTON         = ( COSWindow::wmUser + 1 ) );
		__QCMP_STATIC_CONSTANT( int, TB_CHECKBUTTON          = ( COSWindow::wmUser + 2 ) );
		__QCMP_STATIC_CONSTANT( int, TB_PRESSBUTTON          = ( COSWindow::wmUser + 3 ) );
		__QCMP_STATIC_CONSTANT( int, TB_HIDEBUTTON           = ( COSWindow::wmUser + 4 ) );
		__QCMP_STATIC_CONSTANT( int, TB_INDETERMINATE        = ( COSWindow::wmUser + 5 ) );
#if (_WIN32_IE >= 0x0400 )
		__QCMP_STATIC_CONSTANT( int, TB_MARKBUTTON           = ( COSWindow::wmUser + 6 ) );
#endif
		__QCMP_STATIC_CONSTANT( int, TB_ISBUTTONENABLED      = ( COSWindow::wmUser + 9 ) );
		__QCMP_STATIC_CONSTANT( int, TB_ISBUTTONCHECKED      = ( COSWindow::wmUser + 10 ) );
		__QCMP_STATIC_CONSTANT( int, TB_ISBUTTONPRESSED      = ( COSWindow::wmUser + 11 ) );
		__QCMP_STATIC_CONSTANT( int, TB_ISBUTTONHIDDEN       = ( COSWindow::wmUser + 12 ) );
		__QCMP_STATIC_CONSTANT( int, TB_ISBUTTONINDETERMINATE = ( COSWindow::wmUser + 13 ) );
#if (_WIN32_IE >= 0x0400 ) 
		__QCMP_STATIC_CONSTANT( int, TB_ISBUTTONHIGHLIGHTED  = ( COSWindow::wmUser + 14 ) );
#endif
		__QCMP_STATIC_CONSTANT( int, TB_SETSTATE             = ( COSWindow::wmUser + 17 ) );
		__QCMP_STATIC_CONSTANT( int, TB_GETSTATE             = ( COSWindow::wmUser + 18 ) );
		__QCMP_STATIC_CONSTANT( int, TB_ADDBITMAP            = ( COSWindow::wmUser + 19 ) );
#if (_WIN32_IE >= 0x0400 ) 
		__QCMP_STATIC_CONSTANT( int, TB_ADDBUTTONSA          = ( COSWindow::wmUser + 20 ) );
		__QCMP_STATIC_CONSTANT( int, TB_INSERTBUTTONA        = ( COSWindow::wmUser + 21 ) );
#else
		__QCMP_STATIC_CONSTANT( int, TB_ADDBUTTONS           = ( COSWindow::wmUser + 20 ) );
		__QCMP_STATIC_CONSTANT( int, TB_INSERTBUTTON         = ( COSWindow::wmUser + 21 ) );
#endif

		__QCMP_STATIC_CONSTANT( int, TB_DELETEBUTTON         = ( COSWindow::wmUser + 22 ) );
		__QCMP_STATIC_CONSTANT( int, TB_GETBUTTON            = ( COSWindow::wmUser + 23 ) );
		__QCMP_STATIC_CONSTANT( int, TB_BUTTONCOUNT          = ( COSWindow::wmUser + 24 ) );
		__QCMP_STATIC_CONSTANT( int, TB_COMMANDTOINDEX       = ( COSWindow::wmUser + 25 ) );
		__QCMP_STATIC_CONSTANT( int, TB_SAVERESTOREA         = ( COSWindow::wmUser + 26 ) );
		__QCMP_STATIC_CONSTANT( int, TB_SAVERESTOREW         = ( COSWindow::wmUser + 76 ) );
		__QCMP_STATIC_CONSTANT( int, TB_CUSTOMIZE            = ( COSWindow::wmUser + 27 ) );
		__QCMP_STATIC_CONSTANT( int, TB_ADDSTRINGA           = ( COSWindow::wmUser + 28 ) );
		__QCMP_STATIC_CONSTANT( int, TB_ADDSTRINGW           = ( COSWindow::wmUser + 77 ) );
		__QCMP_STATIC_CONSTANT( int, TB_GETITEMRECT          = ( COSWindow::wmUser + 29 ) );
		__QCMP_STATIC_CONSTANT( int, TB_BUTTONSTRUCTSIZE     = ( COSWindow::wmUser + 30 ) );
		__QCMP_STATIC_CONSTANT( int, TB_SETBUTTONSIZE        = ( COSWindow::wmUser + 31 ) );
		__QCMP_STATIC_CONSTANT( int, TB_SETBITMAPSIZE        = ( COSWindow::wmUser + 32 ) );
		__QCMP_STATIC_CONSTANT( int, TB_AUTOSIZE             = ( COSWindow::wmUser + 33 ) );
		__QCMP_STATIC_CONSTANT( int, TB_GETTOOLTIPS          = ( COSWindow::wmUser + 35 ) );
		__QCMP_STATIC_CONSTANT( int, TB_SETTOOLTIPS          = ( COSWindow::wmUser + 36 ) );
		__QCMP_STATIC_CONSTANT( int, TB_SETPARENT            = ( COSWindow::wmUser + 37 ) );
		__QCMP_STATIC_CONSTANT( int, TB_SETROWS              = ( COSWindow::wmUser + 39 ) );
		__QCMP_STATIC_CONSTANT( int, TB_GETROWS              = ( COSWindow::wmUser + 40 ) );
		__QCMP_STATIC_CONSTANT( int, TB_SETCMDID             = ( COSWindow::wmUser + 42 ) );
		__QCMP_STATIC_CONSTANT( int, TB_CHANGEBITMAP         = ( COSWindow::wmUser + 43 ) );
		__QCMP_STATIC_CONSTANT( int, TB_GETBITMAP            = ( COSWindow::wmUser + 44 ) );
		__QCMP_STATIC_CONSTANT( int, TB_GETBUTTONTEXTA       = ( COSWindow::wmUser + 45 ) );
		__QCMP_STATIC_CONSTANT( int, TB_GETBUTTONTEXTW       = ( COSWindow::wmUser + 75 ) );
		__QCMP_STATIC_CONSTANT( int, TB_REPLACEBITMAP        = ( COSWindow::wmUser + 46 ) );
 
		__QCMP_STATIC_CONSTANT( int, TB_SETINDENT            = ( COSWindow::wmUser + 47 ) );
		__QCMP_STATIC_CONSTANT( int, TB_SETIMAGELIST         = ( COSWindow::wmUser + 48 ) );
		__QCMP_STATIC_CONSTANT( int, TB_GETIMAGELIST         = ( COSWindow::wmUser + 49 ) );
		__QCMP_STATIC_CONSTANT( int, TB_LOADIMAGES           = ( COSWindow::wmUser + 50 ) );
		__QCMP_STATIC_CONSTANT( int, TB_GETRECT              = ( COSWindow::wmUser + 51 ) ); // wParam is the Cmd instead of index
		__QCMP_STATIC_CONSTANT( int, TB_SETHOTIMAGELIST      = ( COSWindow::wmUser + 52 ) );
		__QCMP_STATIC_CONSTANT( int, TB_GETHOTIMAGELIST      = ( COSWindow::wmUser + 53 ) );
		__QCMP_STATIC_CONSTANT( int, TB_SETDISABLEDIMAGELIST = ( COSWindow::wmUser + 54 ) );
		__QCMP_STATIC_CONSTANT( int, TB_GETDISABLEDIMAGELIST = ( COSWindow::wmUser + 55 ) );
		__QCMP_STATIC_CONSTANT( int, TB_SETSTYLE             = ( COSWindow::wmUser + 56 ) );
		__QCMP_STATIC_CONSTANT( int, TB_GETSTYLE             = ( COSWindow::wmUser + 57 ) );
		__QCMP_STATIC_CONSTANT( int, TB_GETBUTTONSIZE        = ( COSWindow::wmUser + 58 ) );
		__QCMP_STATIC_CONSTANT( int, TB_SETBUTTONWIDTH       = ( COSWindow::wmUser + 59 ) );
		__QCMP_STATIC_CONSTANT( int, TB_SETMAXTEXTROWS       = ( COSWindow::wmUser + 60 ) );
		__QCMP_STATIC_CONSTANT( int, TB_GETTEXTROWS          = ( COSWindow::wmUser + 61 ) );
		__QCMP_STATIC_CONSTANT( int, TB_GETOBJECT            = ( COSWindow::wmUser + 62 ) );  // wParam == IID, lParam void **ppv
		__QCMP_STATIC_CONSTANT( int, TB_GETHOTITEM           = ( COSWindow::wmUser + 71 ) );
		__QCMP_STATIC_CONSTANT( int, TB_SETHOTITEM           = ( COSWindow::wmUser + 72 ) );  // wParam == iHotItem
		__QCMP_STATIC_CONSTANT( int, TB_SETANCHORHIGHLIGHT   = ( COSWindow::wmUser + 73 ) );  // wParam == TRUE/FALSE
		__QCMP_STATIC_CONSTANT( int, TB_GETANCHORHIGHLIGHT   = ( COSWindow::wmUser + 74 ) );
		__QCMP_STATIC_CONSTANT( int, TB_MAPACCELERATORA      = ( COSWindow::wmUser + 78 ) );  // wParam == ch, lParam int * pidBtn
		__QCMP_STATIC_CONSTANT( int, TB_GETINSERTMARK        = ( COSWindow::wmUser + 79 ) );  // lParam == LPTBINSERTMARK
		__QCMP_STATIC_CONSTANT( int, TB_SETINSERTMARK        = ( COSWindow::wmUser + 80 ) );  // lParam == LPTBINSERTMARK
		__QCMP_STATIC_CONSTANT( int, TB_INSERTMARKHITTEST    = ( COSWindow::wmUser + 81 ) );  // wParam == LPPOINT lParam == LPTBINSERTMARK
		__QCMP_STATIC_CONSTANT( int, TB_MOVEBUTTON           = ( COSWindow::wmUser + 82 ) );
		__QCMP_STATIC_CONSTANT( int, TB_GETMAXSIZE           = ( COSWindow::wmUser + 83 ) );  // lParam == LPSIZE
		__QCMP_STATIC_CONSTANT( int, TB_SETEXTENDEDSTYLE     = ( COSWindow::wmUser + 84 ) );  // For TBSTYLE_EX_*
		__QCMP_STATIC_CONSTANT( int, TB_GETEXTENDEDSTYLE     = ( COSWindow::wmUser + 85 ) );  // For TBSTYLE_EX_*
		__QCMP_STATIC_CONSTANT( int, TB_GETPADDING           = ( COSWindow::wmUser + 86 ) );
		__QCMP_STATIC_CONSTANT( int, TB_SETPADDING           = ( COSWindow::wmUser + 87 ) );
		__QCMP_STATIC_CONSTANT( int, TB_SETINSERTMARKCOLOR   = ( COSWindow::wmUser + 88 ) );
		__QCMP_STATIC_CONSTANT( int, TB_GETINSERTMARKCOLOR   = ( COSWindow::wmUser + 89 ) );

#	define TB_SETCOLORSCHEME       CCM_SETCOLORSCHEME  // lParam is color scheme
#	define TB_GETCOLORSCHEME       CCM_GETCOLORSCHEME      // fills in COLORSCHEME pointed to by lParam

#	define TB_SETUNICODEFORMAT     CCM_SETUNICODEFORMAT
#	define TB_GETUNICODEFORMAT     CCM_GETUNICODEFORMAT

		__QCMP_STATIC_CONSTANT( int, TB_MAPACCELERATORW      = ( COSWindow::wmUser + 90 ) );  // wParam == ch, lParam int * pidBtn
		__QCMP_STATIC_CONSTANT( int, TB_GETBITMAPFLAGS       = ( COSWindow::wmUser + 41 ) );
		__QCMP_STATIC_CONSTANT( int, TB_GETBUTTONINFOW        = ( COSWindow::wmUser + 63 ) );
		__QCMP_STATIC_CONSTANT( int, TB_SETBUTTONINFOW        = ( COSWindow::wmUser + 64 ) );
		__QCMP_STATIC_CONSTANT( int, TB_GETBUTTONINFOA        = ( COSWindow::wmUser + 65 ) );
		__QCMP_STATIC_CONSTANT( int, TB_SETBUTTONINFOA        = ( COSWindow::wmUser + 66 ) );
#ifdef UNICODE
#	define TB_GETBUTTONINFO        TB_GETBUTTONINFOW
#	define TB_SETBUTTONINFO        TB_SETBUTTONINFOW
#else
#	define TB_GETBUTTONINFO        TB_GETBUTTONINFOA
#	define TB_SETBUTTONINFO        TB_SETBUTTONINFOA
#endif
		__QCMP_STATIC_CONSTANT( int, TB_INSERTBUTTONW        = ( COSWindow::wmUser + 67 ) );
		__QCMP_STATIC_CONSTANT( int, TB_ADDBUTTONSW          = ( COSWindow::wmUser + 68 ) );

		__QCMP_STATIC_CONSTANT( int, TB_HITTEST              = ( COSWindow::wmUser + 69 ) );
#ifdef UNICODE
#define TB_INSERTBUTTON         TB_INSERTBUTTONW
#define TB_ADDBUTTONS           TB_ADDBUTTONSW
#else
#define TB_INSERTBUTTON         TB_INSERTBUTTONA
#define TB_ADDBUTTONS           TB_ADDBUTTONSA
#endif

		__QCMP_STATIC_CONSTANT( int, TB_SETDRAWTEXTFLAGS     = ( COSWindow::wmUser + 70 ) );  // wParam == mask lParam == bit values
		__QCMP_STATIC_CONSTANT( int, TB_GETSTRINGW           = ( COSWindow::wmUser + 91 ) );
		__QCMP_STATIC_CONSTANT( int, TB_GETSTRINGA           = ( COSWindow::wmUser + 92 ) );
#ifdef UNICODE
#	define TB_GETSTRING            TB_GETSTRINGW
#else
#	define TB_GETSTRING            TB_GETSTRINGA
#endif

		__QCMP_STATIC_CONSTANT( int, TB_SETHOTITEM2          = ( COSWindow::wmUser + 94 ) );  // wParam == iHotItem,  lParam = dwFlags
		__QCMP_STATIC_CONSTANT( int, TB_SETLISTGAP           = ( COSWindow::wmUser + 96 ) );
		__QCMP_STATIC_CONSTANT( int, TB_GETIMAGELISTCOUNT    = ( COSWindow::wmUser + 98 ) );
		__QCMP_STATIC_CONSTANT( int, TB_GETIDEALSIZE         = ( COSWindow::wmUser + 99 ) );  // wParam == fHeight, lParam = psize
// before using WM_USER + 103, recycle old space above = ( COSWindow::wmUser + 97 ) );
#define TB_TRANSLATEACCELERATOR     CCM_TRANSLATEACCELERATOR
		__QCMP_STATIC_CONSTANT( int, TB_GETMETRICS           = ( COSWindow::wmUser + 101 ) );
		__QCMP_STATIC_CONSTANT( int, TB_SETMETRICS           = ( COSWindow::wmUser + 102 ) );
		__QCMP_STATIC_CONSTANT( int, TB_GETITEMDROPDOWNRECT  = ( COSWindow::wmUser + 103 ) );  // Rect of item's drop down button
		__QCMP_STATIC_CONSTANT( int, TB_SETPRESSEDIMAGELIST  = ( COSWindow::wmUser + 104 ) );
		__QCMP_STATIC_CONSTANT( int, TB_GETPRESSEDIMAGELIST  = ( COSWindow::wmUser + 105 ) );

#ifdef UNICODE
#	define TB_GETBUTTONTEXT        TB_GETBUTTONTEXTW
#	define TB_SAVERESTORE          TB_SAVERESTOREW
#	define TB_ADDSTRING            TB_ADDSTRINGW
#	define TB_MAPACCELERATOR       TB_MAPACCELERATORW
#else
#	define TB_GETBUTTONTEXT        TB_GETBUTTONTEXTA
#	define TB_SAVERESTORE          TB_SAVERESTOREA
#	define TB_ADDSTRING            TB_ADDSTRINGA
#	define TB_MAPACCELERATOR       TB_MAPACCELERATORA
#endif

#define TB_SETWINDOWTHEME       CCM_SETWINDOWTHEME

		__QOR_DECLARE_OCLASS_ID( CToolbar );

		CToolbar();
		virtual ~CToolbar();
		virtual long OnNotify( NotificationMessageHeader* pHdr );

		virtual bool OnChar( NMCHAR* pHdr );
		virtual bool OnClick( NMMOUSE* pHdr );
		virtual long OnCustomDraw( NotificationMessageHeader* pHdr );
		virtual bool OnDblClick( NMMOUSE* pHdr );
		virtual bool OnKeyDown( NMKEY* pHdr );
		virtual void OnLBtnDown( NotificationMessageHeader* pHdr );
		virtual bool OnRClick( NMMOUSE* pHdr );
		virtual bool OnRDblClick( NMMOUSE* pHdr );
		virtual void OnReleasedCapture( NotificationMessageHeader* pHdr );
		virtual void OnToolTipsCreated( NMTOOLTIPSCREATED* pHdr );
		virtual void OnBeginAdjust( NotificationMessageHeader* pHdr );
		virtual void OnBeginDrag( NMTOOLBAR* pHdr );
		virtual void OnCustomiseHelp( NotificationMessageHeader* pHdr );
		virtual void OnDeletingButton( NMTOOLBAR* pHdr );
		virtual void OnDragOut( NMTOOLBAR* pHdr );
		virtual long OnDropDown( NMTOOLBAR* pHdr );
		virtual void OnEndAdjust( NotificationMessageHeader* pHdr );
		virtual void OnEndDrag( NMTOOLBAR* pHdr );
		virtual bool OnGetButtonInfo( NMTOOLBAR* pHdr );
		virtual void OnGetDispInfo( NMTBDISPINFO* pHdr );
		virtual void OnGetInfoTip( NMTBGETINFOTIP* pHdr );
		virtual void OnGetObject( NMOBJECTNOTIFY* pHdr );
		virtual bool OnHotItemChange( NMTBHOTITEM* pHdr );
		virtual long OnInitCustomize( NotificationMessageHeader* pHdr );
		virtual bool OnQueryDelete( NMTOOLBAR* pHdr );
		virtual bool OnQueryInsert( NMTOOLBAR* pHdr );
		virtual void OnReset( NotificationMessageHeader* pHdr );
		virtual bool OnRestore( NMTBRESTORE* pHdr );
		virtual void OnSave( NMTBSAVE* pHdr );
		virtual void OnToolbarChange( NotificationMessageHeader* pHdr );
		virtual long OnUnknownNotification( NotificationMessageHeader* pHdr );
			
		long AddBitmap( int nButtons, TBADDBITMAP& TBBitmap );
		bool AddButtons( unsigned int uiNumButtons, TBBUTTON* paButtons );
		long AddString( InstanceHandle hInst, Cmp_long_ptr idString );
		void AutoSize();
		long ButtonCount();
		void ButtonStructSize( int cbSize );
		bool ChangeBitmap( int idButton, unsigned short wBitmap );
		bool CheckButton( int idButton, bool bCheckFlag );
		long CommandToIndex( int idButton );
		void Customize();
		bool DeleteButton( int iButton );
		bool EnableButton( int idButton, bool bEnable );
		bool GetAnchorHighlight();
		long GetBitmap( int idButton );
		long GetBitmapFlags();
		bool GetButton( int iButton, TBBUTTON& TBButton );
		long GetButtonInfo ( int idButton, TBBUTTONINFO& ButtonInfo );
		long GetButtonSize ();
		long GetButtonText ( int idButton, TCHAR* strText );
		bool GetColourScheme ( COLORSCHEME& ColourScheme );
		long GetDisabledImageList();
		long GetExtendedStyle();
		long GetHotImageList();
		long GetHotItem();
		long GetImageList();
		void GetInsertMark( TBINSERTMARK InsertMark );
		unsigned long GetInsertMarkColour();
		bool GetItemRect ( int iButton, CRectangle& rcItem );
		bool GetMaxSize ( SIZE& szTotal );
		void GetMetrics ( TBMETRICS& Metrics );
		long GetObject( const GUID& iid, void** ppvObject );
		long GetPadding();
		long GetPressedImageList();
		bool GetRect( int iID, CRectangle& rcButton );
		long GetRows();
		long GetState( int idButton );
		long GetString( unsigned short cchMax, unsigned short wString, TCHAR* strBuffer );
		long GetStyle();
		long GetTextRows();
		COSWindow::refType GetToolTips();
		bool GetUnicodeFormat();
		bool HideButton( int idButton, bool bHide );
		long HitTest( POINT& HitPoint );
		bool Indeterminate( int idButton, bool bIndeterminate );
		bool InsertButton( int iButton, TBBUTTON& NewButton );
		bool InsertMarkHitTest( POINT& HitPoint, TBINSERTMARK& InsertMark );
		bool IsButtonChecked( int idButton );
		bool IsButtonEnabled( int idButton );
		bool IsButtonHidden( int idButton );
		bool IsButtonHighlighted( int idButton );
		bool IsButtonIndeterminate( int idButton );
		bool IsButtonPressed( int idButton );
		long LoadImages( int iBitmapID );
		bool MapAccelerator( TCHAR chAccel, unsigned int* puiBtnId );
		bool MarkButton( int idButton, bool bHighlight );
		bool MoveButton( unsigned int uiOldPos, unsigned int uiNewPos );
		bool PressButton( int idButton, bool bPress );
		bool ReplaceBitmap( TBREPLACEBITMAP& ReplaceBitmap );
		void SaveRestore( bool bSave, TBSaveParams& SaveParams );
		bool SetAnchorHighlight( bool bAnchor );
		bool SetBitmapSize( unsigned short wWidth, unsigned short wHeight );
		bool SetButtonInfo( int iID, TBBUTTONINFO& ButtonInfo );
		bool SetButtonSize( unsigned short wWidth, unsigned short wHeight );
		bool SetButtonWidth( unsigned short wMin, unsigned short wMax );
		bool SetCommandID( unsigned int uiIndex, unsigned int uiCmdID );
		void SetColourScheme( COLORSCHEME& ColourScheme );
		long SetDisabledImageList( CImageList::refType hImageList );
		long SetDrawTextFlags( unsigned long dwFlags, unsigned long dwMask );
		long SetExtendedStyle( unsigned long dwExStyle );
		long SetHotImageList( CImageList::refType hImageList );
		long SetHotItem( int iIndex );
		long SetImageList( CImageList::refType hImageList, int iImageId = 0 );
		bool SetIndent( int iIndent );
		void SetInsertMark( TBINSERTMARK& InsertMark );
		unsigned long SetInsertMarkColour( unsigned long clrInsertMark );
		void SetListGap( Cmp_uint_ptr PixelGap );
		bool SetMaxTextRows( int iMax );
		void SetMetrics( TBMETRICS& Metrics );
		long SetPadding( unsigned short wX, unsigned short wY );
		COSWindow::refType SetParent( COSWindow::refType hParent );
		long SetPressedImageList( CImageList::refType hImageList, int iImageID );
		void SetRows( unsigned short wRows, bool bMore, CRectangle& rcToolbar );
		bool SetState( int idButton, unsigned short wState );
		long SetStyle( unsigned long dwStyle );
		void SetToolTips( COSWindow::refType hToolTip );
		bool SetUnicodeFormat( bool bUnicode );
		void SetWindowTheme( wchar_t* strTheme );
	
	private:

		CToolbar( const CToolbar& );
		CToolbar& operator = ( const CToolbar& );
	};

	//--------------------------------------------------------------------------------		
	class __QOR_INTERFACE( __WINQL_GUI ) CToolbarFactory : public CCommonCtrlFactory< CToolbar >
	{
	public:
		
		__QCMP_STATIC_CONSTANT( int, TBSTYLE_BUTTON          = 0x0000 );  // obsolete; use BTNS_BUTTON instead
		__QCMP_STATIC_CONSTANT( int, TBSTYLE_SEP             = 0x0001 );  // obsolete; use BTNS_SEP instead
		__QCMP_STATIC_CONSTANT( int, TBSTYLE_CHECK           = 0x0002 );  // obsolete; use BTNS_CHECK instead
		__QCMP_STATIC_CONSTANT( int, TBSTYLE_GROUP           = 0x0004 );  // obsolete; use BTNS_GROUP instead
		__QCMP_STATIC_CONSTANT( int, TBSTYLE_CHECKGROUP      = (TBSTYLE_GROUP | TBSTYLE_CHECK) );     // obsolete; use BTNS_CHECKGROUP instead
#if (_WIN32_IE >= 0x0300)
		__QCMP_STATIC_CONSTANT( int, TBSTYLE_DROPDOWN        = 0x0008 );  // obsolete; use BTNS_DROPDOWN instead
#endif
#if (_WIN32_IE >= 0x0400)
		__QCMP_STATIC_CONSTANT( int, TBSTYLE_AUTOSIZE        = 0x0010 );  // obsolete; use BTNS_AUTOSIZE instead
		__QCMP_STATIC_CONSTANT( int, TBSTYLE_NOPREFIX        = 0x0020 );  // obsolete; use BTNS_NOPREFIX instead
#endif

		__QCMP_STATIC_CONSTANT( int, TBSTYLE_TOOLTIPS        = 0x0100 );
		__QCMP_STATIC_CONSTANT( int, TBSTYLE_WRAPABLE        = 0x0200 );
		__QCMP_STATIC_CONSTANT( int, TBSTYLE_ALTDRAG         = 0x0400 );
#if (_WIN32_IE >= 0x0300)
		__QCMP_STATIC_CONSTANT( int, TBSTYLE_FLAT            = 0x0800 );
		__QCMP_STATIC_CONSTANT( int, TBSTYLE_LIST            = 0x1000 );
		__QCMP_STATIC_CONSTANT( int, TBSTYLE_CUSTOMERASE     = 0x2000 );
#endif
		__QCMP_STATIC_CONSTANT( int, TBSTYLE_REGISTERDROP    = 0x4000 );
		__QCMP_STATIC_CONSTANT( int, TBSTYLE_TRANSPARENT     = 0x8000 );

		__QOR_DECLARE_OCLASS_ID( CToolbarFactory );

		CToolbarFactory( CToolbar::TWndClass* pClass, unsigned long dwStyle, unsigned long dwStyleEx );
		bool GetTooltips();
		void SetTooltips( bool bFlag );
		bool GetWrapable();
		void SetWrapable( bool bFlag );
		bool GetAltDrag();
		void SetAltDrag( bool bFlag );
		bool GetFlat();
		void SetFlat( bool bFlag );
		bool GetList();
		void SetList( bool bFlag );
		bool GetCustomErase();
		void SetCustomErase( bool bFlag );
		bool GetRegisterDrop();
		void SetRegisterDrop( bool bFlag );
		bool GetTransparent();
		void SetTransparent( bool bFlag );

	private:

		CToolbarFactory();
		CToolbarFactory( const CToolbarFactory& );
		CToolbarFactory& operator = ( const CToolbarFactory& );
	};

}//nsWin32

#endif//WINQL_GUI_WND_CCTRL_TOOLBAR_H_3
