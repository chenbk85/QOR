//StatusBar.h

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Status Bar Common Control Window

#ifndef WINQL_GUI_WND_CCTRL_STATUSBAR_H_3
#define WINQL_GUI_WND_CCTRL_STATUSBAR_H_3

#include "WinQL/GUI/Views/WindowView.h"
#include "WinQL/GUI/Windows/WinCtrlWindow.h"
#include "WinQL/GUI/Windows/CommonCtrlClass.h"
#include "MammutQOR/Model.h"
#include "WinQL/Application/Graphics/WinQLRectangle.h"
#include "WinQL/GUI/Windows/CommonCtrlFactory.h"

#if		( _WIN32_IE < 0x0400 )
	typedef struct tagNMMOUSE 
	{
		NMHDR   hdr;
		DWORD_PTR dwItemSpec;
		DWORD_PTR dwItemData;
		POINT   pt;
		Cmp_long_ptr  dwHitInfo; // any specifics about where on the item or control the mouse is
	} NMMOUSE, *LPNMMOUSE;
#endif//( _WIN32_IE < 0x0400 )

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CStatusBarClass : public CCommonCtrlClass
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CStatusBarClass );

		CStatusBarClass();
		virtual ~CStatusBarClass();

	private:

		CStatusBarClass( const CStatusBarClass& );
		CStatusBarClass& operator = ( const CStatusBarClass& );
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CStatusBar : public CWinCtrlWindow
	{
	public:

		typedef CStatusBarClass TWndClass;

		//--------------------------------------------------------------------------------
		typedef struct tagNMMOUSE : public NotificationMessageHeader
		{
			//NMHDR   hdr;
			Cmp_ulong_ptr dwItemSpec;
			Cmp_ulong_ptr dwItemData;
			POINT   pt;
			Cmp_long_ptr  dwHitInfo; // any specifics about where on the item or control the mouse is
		} NMMOUSE, *LPNMMOUSE;

		//Flags
		__QCMP_STATIC_CONSTANT( unsigned int, SBT_OWNERDRAW            = 0x1000 );
		__QCMP_STATIC_CONSTANT( unsigned int, SBT_NOBORDERS            = 0x0100 );
		__QCMP_STATIC_CONSTANT( unsigned int, SBT_POPOUT               = 0x0200 );
		__QCMP_STATIC_CONSTANT( unsigned int, SBT_RTLREADING           = 0x0400 );
#if (_WIN32_IE >= 0x0500)
		__QCMP_STATIC_CONSTANT( unsigned int, SBT_NOTABPARSING         = 0x0800 );
#endif

		__QCMP_STATIC_CONSTANT( int, SBN_FIRST               = (0U-880U) );       // status bar
		__QCMP_STATIC_CONSTANT( int, SBN_LAST                = (0U-899U) );

		//Notifications
#if		(_WIN32_IE >= 0x0400)
		__QCMP_STATIC_CONSTANT( int, SBN_SIMPLEMODECHANGE    = (SBN_FIRST - 0) );
#endif//(_WIN32_IE >= 0x0400)

		//Messages
		__QCMP_STATIC_CONSTANT( int, SB_SETTEXTA             = ( COSWindow::wmUser+1) );
		__QCMP_STATIC_CONSTANT( int, SB_SETTEXTW             = ( COSWindow::wmUser+11) );
		__QCMP_STATIC_CONSTANT( int, SB_GETTEXTA             = ( COSWindow::wmUser+2) );
		__QCMP_STATIC_CONSTANT( int, SB_GETTEXTW             = ( COSWindow::wmUser+13) );
		__QCMP_STATIC_CONSTANT( int, SB_GETTEXTLENGTHA       = ( COSWindow::wmUser+3) );
		__QCMP_STATIC_CONSTANT( int, SB_GETTEXTLENGTHW       = ( COSWindow::wmUser+12) );

#ifdef UNICODE
#	define SB_GETTEXT              SB_GETTEXTW
#	define SB_SETTEXT              SB_SETTEXTW
#	define SB_GETTEXTLENGTH        SB_GETTEXTLENGTHW
#	if (_WIN32_IE >= 0x0400)
#		define SB_SETTIPTEXT           SB_SETTIPTEXTW
#		define SB_GETTIPTEXT           SB_GETTIPTEXTW
#	endif
#else
#	define SB_GETTEXT              SB_GETTEXTA
#	define SB_SETTEXT              SB_SETTEXTA
#	define SB_GETTEXTLENGTH        SB_GETTEXTLENGTHA
#	if (_WIN32_IE >= 0x0400)
#		define SB_SETTIPTEXT           SB_SETTIPTEXTA
#		define SB_GETTIPTEXT           SB_GETTIPTEXTA
#	endif
#endif

		__QCMP_STATIC_CONSTANT( int, SB_SETPARTS             = ( COSWindow::wmUser+4) );
		__QCMP_STATIC_CONSTANT( int, SB_GETPARTS             = ( COSWindow::wmUser+6) );
		__QCMP_STATIC_CONSTANT( int, SB_GETBORDERS           = ( COSWindow::wmUser+7) );
		__QCMP_STATIC_CONSTANT( int, SB_SETMINHEIGHT         = ( COSWindow::wmUser+8) );
		__QCMP_STATIC_CONSTANT( int, SB_SIMPLE               = ( COSWindow::wmUser+9) );
		__QCMP_STATIC_CONSTANT( int, SB_GETRECT              = ( COSWindow::wmUser+10) );
#if (_WIN32_IE >= 0x0300)
		__QCMP_STATIC_CONSTANT( int, SB_ISSIMPLE             = ( COSWindow::wmUser+14) );
#endif

#if (_WIN32_IE >= 0x0400)

		__QCMP_STATIC_CONSTANT( int, SB_SETICON              = ( COSWindow::wmUser+15) );
		__QCMP_STATIC_CONSTANT( int, SB_SETTIPTEXTA          = ( COSWindow::wmUser+16) );
		__QCMP_STATIC_CONSTANT( int, SB_SETTIPTEXTW          = ( COSWindow::wmUser+17) );
		__QCMP_STATIC_CONSTANT( int, SB_GETTIPTEXTA          = ( COSWindow::wmUser+18) );
		__QCMP_STATIC_CONSTANT( int, SB_GETTIPTEXTW          = ( COSWindow::wmUser+19) );
		__QCMP_STATIC_CONSTANT( int, SB_GETICON              = ( COSWindow::wmUser+20) );
#endif

#	define SB_SETUNICODEFORMAT     CCM_SETUNICODEFORMAT
#	define SB_GETUNICODEFORMAT     CCM_GETUNICODEFORMAT
#	define SB_SETBKCOLOR           CCM_SETBKCOLOR      // lParam = bkColor

		__QOR_DECLARE_OCLASS_ID( CStatusBar );

		CStatusBar();
		virtual ~CStatusBar();
		virtual long OnNotify( NotificationMessageHeader* pHdr );
		virtual bool OnClick( NMMOUSE* pHdr );
		virtual bool OnDblClick( NMMOUSE* pHdr );
		virtual bool OnRClick( NMMOUSE* pHdr );
		virtual bool OnRDblClick( NMMOUSE* pHdr );
		virtual void OnSimpleModeChange( NotificationMessageHeader* pHdr );
		virtual long OnUnknownNotification( NotificationMessageHeader* pHdr );

		bool GetBorders( int* paBorders );
		CIcon::refType GetIcon( int iPart );
		long GetParts( int nParts, int* paRightCoords );
		bool GetRect( int iPart, CRectangle& rcPart);
		long GetText( int iPart, char* szText );
		long GetTextLength( int iPart );
		void GetTipText( unsigned short wPart, unsigned short wSize, const TCHAR* szTipText );
		bool GetUnicodeFormat();
		bool IsSimple();
		unsigned long SetBkColour( unsigned long clrBk );
		bool SetIcon( int iPart, CIconHandle::refType hIcon );
		void SetMinHeight( int iMinHeight );
		bool SetParts( int nParts, int* paWidths );
		bool SetText( int iPart, unsigned int uiType, TCHAR* szText );
		void SetTipText( int iPart, const TCHAR* strText );
		bool SetUnicodeFormat( bool bUnicode );
		void SetSimple( bool bSimple );
		virtual void OnDrawItem( DrawItemStruct* pItemStruct );
		void Resize();

	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CStatusBarFactory : public CCommonCtrlFactory< CStatusBar >
	{
	public:

		__QCMP_STATIC_CONSTANT( int, SBARS_SIZEGRIP          = 0x0100 );
#if (_WIN32_IE >= 0x0500)
		__QCMP_STATIC_CONSTANT( int, SBARS_TOOLTIPS          = 0x0800 );
#endif

#if (_WIN32_IE >= 0x0400)
// this is a status bar flag, preference to SBARS_TOOLTIPS
		__QCMP_STATIC_CONSTANT( int, SBT_TOOLTIPS            = 0x0800 );
#endif

		__QOR_DECLARE_OCLASS_ID( CStatusBarFactory );

		CStatusBarFactory();
		virtual ~CStatusBarFactory();

		virtual CStatusBar* Create( void );

		bool GetToolTips();
		void SetToolTips( bool bFlag );
		bool GetSizeGrip();
		void SetSizeGrip( bool bFlag );

	private:

		CStatusBarFactory( const CStatusBarFactory& );
		CStatusBarFactory& operator = ( const CStatusBarFactory&  );
	};

}//nsWin32

#endif//WINQL_GUI_WND_CCTRL_STATUSBAR_H_3
