//Static.h

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Static

#ifndef WINQL_GUI_WND_STATIC_H_3
#define WINQL_GUI_WND_STATIC_H_3

#include "WinQL/GUI/Views/WindowView.h"
#include "WINQL/GUI/WindowFactory.h"
#include "WinQL/GUI/Windows/WinCtrlWindow.h"
#include "MammutQOR/Model.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CStaticClass : public CWindowClass
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CStaticClass );

		CStaticClass();
		~CStaticClass();
		virtual bool Preregistered();
		const TCHAR* Name();

	private:

		CStaticClass( const CStaticClass& );
		CStaticClass& operator = ( const CStaticClass& );

	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CStatic : public CWinCtrlWindow
	{
	public:

		//Notifications
		__QCMP_STATIC_CONSTANT( int, STN_CLICKED         = 0 );
		__QCMP_STATIC_CONSTANT( int, STN_DBLCLK          = 1 );
		__QCMP_STATIC_CONSTANT( int, STN_ENABLE          = 2 );
		__QCMP_STATIC_CONSTANT( int, STN_DISABLE         = 3 );

		//Messages
		__QCMP_STATIC_CONSTANT( int, STM_SETICON         = 0x0170 );
		__QCMP_STATIC_CONSTANT( int, STM_GETICON         = 0x0171 );
		__QCMP_STATIC_CONSTANT( int, STM_SETIMAGE        = 0x0172 );
		__QCMP_STATIC_CONSTANT( int, STM_GETIMAGE        = 0x0173 );

		__QOR_DECLARE_OCLASS_ID( CStatic );

		CStatic();
		virtual ~CStatic();
		virtual void OnCommand( unsigned short wCtrlID, unsigned short wCode );

		virtual void OnClicked();
		virtual void OnDblClick();
		virtual void OnEnable();
		virtual void OnDisable();
		long GetIcon();
		long GetImage( Cmp_uint_ptr ImageType );
		long SetIcon( CIconHandle::refType hIcon );
		long SetImage( Cmp_uint_ptr ImageType, Cmp_long_ptr ImageHandle );

	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CStaticFactory : public CWindowFactory
	{
	public:

		// Static Control Constants

		__QCMP_STATIC_CONSTANT( long, SS_LEFT            = 0x00000000L );
		__QCMP_STATIC_CONSTANT( long, SS_CENTER          = 0x00000001L );
		__QCMP_STATIC_CONSTANT( long, SS_RIGHT           = 0x00000002L );
		__QCMP_STATIC_CONSTANT( long, SS_ICON            = 0x00000003L );
		__QCMP_STATIC_CONSTANT( long, SS_BLACKRECT       = 0x00000004L );
		__QCMP_STATIC_CONSTANT( long, SS_GRAYRECT        = 0x00000005L );
		__QCMP_STATIC_CONSTANT( long, SS_WHITERECT       = 0x00000006L );
		__QCMP_STATIC_CONSTANT( long, SS_BLACKFRAME      = 0x00000007L );
		__QCMP_STATIC_CONSTANT( long, SS_GRAYFRAME       = 0x00000008L );
		__QCMP_STATIC_CONSTANT( long, SS_WHITEFRAME      = 0x00000009L );
		__QCMP_STATIC_CONSTANT( long, SS_USERITEM        = 0x0000000AL );
		__QCMP_STATIC_CONSTANT( long, SS_SIMPLE          = 0x0000000BL );
		__QCMP_STATIC_CONSTANT( long, SS_LEFTNOWORDWRAP  = 0x0000000CL );
		__QCMP_STATIC_CONSTANT( long, SS_OWNERDRAW       = 0x0000000DL );
		__QCMP_STATIC_CONSTANT( long, SS_BITMAP          = 0x0000000EL );
		__QCMP_STATIC_CONSTANT( long, SS_ENHMETAFILE     = 0x0000000FL );
		__QCMP_STATIC_CONSTANT( long, SS_ETCHEDHORZ      = 0x00000010L );
		__QCMP_STATIC_CONSTANT( long, SS_ETCHEDVERT      = 0x00000011L );
		__QCMP_STATIC_CONSTANT( long, SS_ETCHEDFRAME     = 0x00000012L );
		__QCMP_STATIC_CONSTANT( long, SS_TYPEMASK        = 0x0000001FL );
		__QCMP_STATIC_CONSTANT( long, SS_REALSIZECONTROL = 0x00000040L );
		__QCMP_STATIC_CONSTANT( long, SS_NOPREFIX        = 0x00000080L ); /* Don't do "&" character translation */
		__QCMP_STATIC_CONSTANT( long, SS_NOTIFY          = 0x00000100L );
		__QCMP_STATIC_CONSTANT( long, SS_CENTERIMAGE     = 0x00000200L );
		__QCMP_STATIC_CONSTANT( long, SS_RIGHTJUST       = 0x00000400L );
		__QCMP_STATIC_CONSTANT( long, SS_REALSIZEIMAGE   = 0x00000800L );
		__QCMP_STATIC_CONSTANT( long, SS_SUNKEN          = 0x00001000L );
		__QCMP_STATIC_CONSTANT( long, SS_EDITCONTROL     = 0x00002000L );
		__QCMP_STATIC_CONSTANT( long, SS_ENDELLIPSIS     = 0x00004000L );
		__QCMP_STATIC_CONSTANT( long, SS_PATHELLIPSIS    = 0x00008000L );
		__QCMP_STATIC_CONSTANT( long, SS_WORDELLIPSIS    = 0x0000C000L );
		__QCMP_STATIC_CONSTANT( long, SS_ELLIPSISMASK    = 0x0000C000L );

		__QOR_DECLARE_OCLASS_ID( CStaticFactory );

		CStaticFactory();
		virtual ~CStaticFactory();
		virtual CStatic* Create( void );

		bool GetLeft();
		void SetLeft( bool bFlag );
		bool GetCenter();
		void SetCenter( bool bFlag );
		bool GetRight();
		void SetRight( bool bFlag );
		bool GetIcon();
		void SetIcon( bool bFlag );
		bool GetBlackRect();
		void SetBlackRect( bool bFlag );
		bool GetGrayRect();
		void SetGrayRect( bool bFlag );
		bool GetWhiteRect();
		void SetWhiteRect( bool bFlag );
		bool GetBlackFrame();
		void SetBlackFrame( bool bFlag );
		bool GetGrayFrame();
		void SetGrayFrame( bool bFlag );
		bool GetWhiteFrame();
		void SetWhiteFrame( bool bFlag );
		bool GetUserItem();
		void SetUserItem( bool bFlag );
		bool GetSimple();
		void SetSimple( bool bFlag );
		bool GetLeftNoWordWrap();
		void SetLeftNoWordWrap( bool bFlag );
		bool GetOwnerDraw();
		void SetOwnerDraw( bool bFlag );
		bool GetBitmap();
		void SetBitmap( bool bFlag );
		bool GetEnhMetaFile();
		void SetEnhMetaFile( bool bFlag );
		bool GetEtchedHorz();
		void SetEtchedHorz( bool bFlag );
		bool GetEtchedVert();
		void SetEtchedVert( bool bFlag );
		bool GetEtchedFrame();
		void SetEtchedFrame( bool bFlag );
		bool GetTypeMask();
		void SetTypeMask( bool bFlag );
		bool GetRealSize();
		void SetRealSize( bool bFlag );
		bool GetNoPrefix();
		void SetNoPrefix( bool bFlag );
		bool GetNotify();
		void SetNotify( bool bFlag );
		bool GetCenterImage();
		void SetCenterImage( bool bFlag );
		bool GetRightJustify();
		void SetRightJustify( bool bFlag );
		bool GetRealSizeImage();
		void SetRealSizeImage( bool bFlag );
		bool GetSunken();
		void SetSunken( bool bFlag );
		bool GetEditControl();
		void SetEditControl( bool bFlag );
		bool GetEndEllipsis();
		void SetEndEllipsis( bool bFlag );
		bool GetPathEllipsis();
		void SetPathEllipsis( bool bFlag );
		bool GetWordEllipsis();
		void SetWordEllipsis( bool bFlag );

	private:

		CStaticFactory( const CStaticFactory& );
		CStaticFactory& operator = ( const CStaticFactory& );
	};

}//nsWin32

#endif//WINQL_GUI_WND_STATIC_H_3
