//ScrollBar.h

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//ScrollBar

#ifndef WINQL_GUI_WND_SCROLLBAR_H_3
#define WINQL_GUI_WND_SCROLLBAR_H_3

#include "WinQL/GUI/Views/WindowView.h"
#include "WinQL/GUI/Windows/WinCtrlWindow.h"
#include "MammutQOR/Model.h"
#include "WinQL/GUI/WindowFactory.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CScrollBarClass : public CWindowClass
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CScrollBarClass );

		CScrollBarClass();
		virtual ~CScrollBarClass();
		virtual bool Preregistered();
		const TCHAR* Name();

	private:

		CScrollBarClass( const CScrollBarClass& );
		CScrollBarClass& operator = ( const CScrollBarClass& );

	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CScrollBar : public CWinCtrlWindow
	{
	public:

		//Messages
		__QCMP_STATIC_CONSTANT( int, SBM_SETPOS                  = 0x00E0 );
		__QCMP_STATIC_CONSTANT( int, SBM_GETPOS                  = 0x00E1 );
		__QCMP_STATIC_CONSTANT( int, SBM_SETRANGE                = 0x00E2 );
		__QCMP_STATIC_CONSTANT( int, SBM_SETRANGEREDRAW          = 0x00E6 );
		__QCMP_STATIC_CONSTANT( int, SBM_GETRANGE                = 0x00E3 );
		__QCMP_STATIC_CONSTANT( int, SBM_ENABLE_ARROWS           = 0x00E4 );
#if(WINVER >= 0x0400)
		__QCMP_STATIC_CONSTANT( int, SBM_SETSCROLLINFO           = 0x00E9 );
		__QCMP_STATIC_CONSTANT( int, SBM_GETSCROLLINFO           = 0x00EA );
#endif /* WINVER >= 0x0400 */

#if(_WIN32_WINNT >= 0x0501)
		__QCMP_STATIC_CONSTANT( int, SBM_GETSCROLLBARINFO        = 0x00EB );
#endif /* _WIN32_WINNT >= 0x0501 */

		__QOR_DECLARE_OCLASS_ID( CScrollBar );

		CScrollBar();
		virtual ~CScrollBar();
		bool EnableArrows( Cmp_uint_ptr ArrowFlags );
		long GetPos();
		void GetRange( unsigned long& dwMinPos, unsigned long& dwMaxPos );
		bool GetBarInfo( SCROLLBARINFO& Info );
		bool GetScrollInfo( SCROLLINFO& Info );
		long SetPos( Cmp_uint_ptr NewPos, bool bRedraw );
		long SetRange( Cmp_uint_ptr NewMin, Cmp_long_ptr NewMax );
		long SetRangeRedraw( Cmp_uint_ptr NewMin, Cmp_long_ptr NewMax );
		long SetScrollInfo( SCROLLINFO& Info, bool bRedraw );

	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CScrollBarFactory : public CWindowFactory
	{
	public:

		//Scroll Bar Styles

		__QCMP_STATIC_CONSTANT( long, SBS_HORZ                    = 0x0000L );
		__QCMP_STATIC_CONSTANT( long, SBS_VERT                    = 0x0001L );
		__QCMP_STATIC_CONSTANT( long, SBS_TOPALIGN                = 0x0002L );
		__QCMP_STATIC_CONSTANT( long, SBS_LEFTALIGN               = 0x0002L );
		__QCMP_STATIC_CONSTANT( long, SBS_BOTTOMALIGN             = 0x0004L );
		__QCMP_STATIC_CONSTANT( long, SBS_RIGHTALIGN              = 0x0004L );
		__QCMP_STATIC_CONSTANT( long, SBS_SIZEBOXTOPLEFTALIGN     = 0x0002L );
		__QCMP_STATIC_CONSTANT( long, SBS_SIZEBOXBOTTOMRIGHTALIGN = 0x0004L );
		__QCMP_STATIC_CONSTANT( long, SBS_SIZEBOX                 = 0x0008L );
#if(WINVER >= 0x0400)
		__QCMP_STATIC_CONSTANT( long, SBS_SIZEGRIP                = 0x0010L );
#endif /* WINVER >= 0x0400 */

		__QOR_DECLARE_OCLASS_ID( CScrollBarFactory );

		CScrollBarFactory();
		virtual ~CScrollBarFactory();
		virtual CScrollBar* Create( void );

		bool GetHorizontal();
		void SetHorizontal( bool bFlag );
		bool GetVertical();
		void SetVertical( bool bFlag );
		bool GetTopAlign();
		void SetTopAlign( bool bFlag );
		bool GetLeftAlign();
		void SetLeftAlign( bool bFlag );
		bool GetBottomAlign();
		void SetBottomAlign( bool bFlag );
		bool GetRightAlign();
		void SetRightAlign( bool bFlag );
		bool GetSizeBoxTopLeftAlign();
		void SetSizeBoxTopLeftAlign( bool bFlag );
		bool GetSizeBoxBottomRightAlign();
		void SetSizeBoxBottomRightAlign( bool bFlag );
		bool GetSizeBox();
		void SetSizeBox( bool bFlag );
		bool GetSizeGrip();
		void SetSizeGrip( bool bFlag );

	};

}//nsWin32

#endif//WINQL_GUI_WND_SCROLLBAR_H_3
