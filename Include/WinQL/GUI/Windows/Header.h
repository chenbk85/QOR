//Header.h

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Header Common Control Window

#ifndef WINQL_GUI_WND_CCTRL_HEADER_H_3
#define WINQL_GUI_WND_CCTRL_HEADER_H_3

#include "WinQL/GUI/Views/WindowView.h"
#include "WinQL/GUI/Windows/WinCtrlWindow.h"
#include "WinQL/GUI/CommonCtrl.h"
#include "MammutQOR/Model.h"
#include "WinQL/Application/Graphics/WinQLRectangle.h"
#include "WinQL/GUI/WindowFactory.h"
#include "WinQL/GUI/ImageList.h"

#if		( _WIN32_IE < 0x0500 )
typedef struct tagNMHDFILTERBTNCLICK
{
    NMHDR hdr;
    INT iItem;
    RECT rc;
} NMHDFILTERBTNCLICK, *LPNMHDFILTERBTNCLICK;
#endif//( _WIN32_IE < 0x0500 )

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CHeaderClass : public CWindowClass
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CHeaderClass );

		CHeaderClass();
		~CHeaderClass();
		virtual bool Preregistered();
		const TCHAR* Name();

	private:

		CCommonCtrl m_ComCtrl32;

	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CHeader : public CWinCtrlWindow
	{
	public:

		//--------------------------------------------------------------------------------
		struct HDItem
		{
			unsigned int    mask;
			int     cxy;
			TCHAR*  pszText;
			CBitmapHandle::refType hbm;
			int     cchTextMax;
			int     fmt;
			Cmp_long_ptr  lParam;
#if		(_WIN32_IE >= 0x0300)
			int     iImage;        // index of bitmap in ImageList
			int     iOrder;
#endif//(_WIN32_IE >= 0x0300)
#if		(_WIN32_IE >= 0x0500)
			unsigned int    type;           // [in] filter type (defined what pvFilter is a pointer to)
			void*  pvFilter;       // [in] fillter data see above
#endif//(_WIN32_IE >= 0x0500)
#if _WIN32_WINNT >= 0x0600
			unsigned int   state;
#endif
		};

		//--------------------------------------------------------------------------------
		struct NMHeader : public NotificationMessageHeader
		{
			int     iItem;
			int     iButton;
			HDItem	Item;
		};


		//--------------------------------------------------------------------------------
		struct NMHDDISPINFO : public NotificationMessageHeader
		{
			int     iItem;
			unsigned int    mask;
			TCHAR*  pszText;
			int     cchTextMax;
			int     iImage;
			Cmp_long_ptr  lParam;
		};

		//--------------------------------------------------------------------------------
		struct HDHITTESTINFO
		{
			nsWin32::POINT pt;
			unsigned int flags;
			int iItem;
		};

		//--------------------------------------------------------------------------------
		struct HDLAYOUT
		{
			RECT* prc;
			WindowPos* pwpos;
		};

		//--------------------------------------------------------------------------------
		struct NMHDFILTERBTNCLICK : public NotificationMessageHeader
		{
			//NMHDR hdr;
			int iItem;
			RECT rc;
		};

		__QCMP_STATIC_CONSTANT( int, HDN_FIRST               = (0U-300U) );

		//Notifications
		__QCMP_STATIC_CONSTANT( int, HDN_ITEMCHANGINGA       = (HDN_FIRST-0)  );
		__QCMP_STATIC_CONSTANT( int, HDN_ITEMCHANGINGW       = (HDN_FIRST-20) );
		__QCMP_STATIC_CONSTANT( int, HDN_ITEMCHANGEDA        = (HDN_FIRST-1)  );
		__QCMP_STATIC_CONSTANT( int, HDN_ITEMCHANGEDW        = (HDN_FIRST-21) );
		__QCMP_STATIC_CONSTANT( int, HDN_ITEMCLICKA          = (HDN_FIRST-2)  );
		__QCMP_STATIC_CONSTANT( int, HDN_ITEMCLICKW          = (HDN_FIRST-22) );
		__QCMP_STATIC_CONSTANT( int, HDN_ITEMDBLCLICKA       = (HDN_FIRST-3)  );
		__QCMP_STATIC_CONSTANT( int, HDN_ITEMDBLCLICKW       = (HDN_FIRST-23) );
		__QCMP_STATIC_CONSTANT( int, HDN_DIVIDERDBLCLICKA    = (HDN_FIRST-5)  );
		__QCMP_STATIC_CONSTANT( int, HDN_DIVIDERDBLCLICKW    = (HDN_FIRST-25) );
		__QCMP_STATIC_CONSTANT( int, HDN_BEGINTRACKA         = (HDN_FIRST-6)  );
		__QCMP_STATIC_CONSTANT( int, HDN_BEGINTRACKW         = (HDN_FIRST-26) );
		__QCMP_STATIC_CONSTANT( int, HDN_ENDTRACKA           = (HDN_FIRST-7)  );
		__QCMP_STATIC_CONSTANT( int, HDN_ENDTRACKW           = (HDN_FIRST-27) );
		__QCMP_STATIC_CONSTANT( int, HDN_TRACKA              = (HDN_FIRST-8)  );
		__QCMP_STATIC_CONSTANT( int, HDN_TRACKW              = (HDN_FIRST-28) );
#if (_WIN32_IE >= 0x0300)
		__QCMP_STATIC_CONSTANT( int, HDN_GETDISPINFOA        = (HDN_FIRST-9) );
		__QCMP_STATIC_CONSTANT( int, HDN_GETDISPINFOW        = (HDN_FIRST-29) );
		__QCMP_STATIC_CONSTANT( int, HDN_BEGINDRAG           = (HDN_FIRST-10) );
		__QCMP_STATIC_CONSTANT( int, HDN_ENDDRAG             = (HDN_FIRST-11) );
#endif
#if (_WIN32_IE >= 0x0500)
		__QCMP_STATIC_CONSTANT( int, HDN_FILTERCHANGE        = (HDN_FIRST-12) );
		__QCMP_STATIC_CONSTANT( int, HDN_FILTERBTNCLICK      = (HDN_FIRST-13) );
#endif

#if (_WIN32_IE >= 0x0600)
		__QCMP_STATIC_CONSTANT( int, HDN_BEGINFILTEREDIT     = (HDN_FIRST-14) );
		__QCMP_STATIC_CONSTANT( int, HDN_ENDFILTEREDIT       = (HDN_FIRST-15) );
#endif

#if _WIN32_WINNT >= 0x0600
		__QCMP_STATIC_CONSTANT( int, HDN_ITEMSTATEICONCLICK  = (HDN_FIRST-16) );
		__QCMP_STATIC_CONSTANT( int, HDN_ITEMKEYDOWN         = (HDN_FIRST-17) );
		__QCMP_STATIC_CONSTANT( int, HDN_DROPDOWN            = (HDN_FIRST-18) );
		__QCMP_STATIC_CONSTANT( int, HDN_OVERFLOWCLICK       = (HDN_FIRST-19) );
#endif

#ifdef UNICODE
#	define	HDN_ITEMCHANGING         HDN_ITEMCHANGINGW
#	define	HDN_ITEMCHANGED          HDN_ITEMCHANGEDW
#	define	HDN_ITEMCLICK            HDN_ITEMCLICKW
#	define	HDN_ITEMDBLCLICK         HDN_ITEMDBLCLICKW
#	define	HDN_DIVIDERDBLCLICK      HDN_DIVIDERDBLCLICKW
#	define	HDN_BEGINTRACK           HDN_BEGINTRACKW
#	define	HDN_ENDTRACK             HDN_ENDTRACKW
#	define	HDN_TRACK                HDN_TRACKW
#	if (_WIN32_IE >= 0x0300)
#		define HDN_GETDISPINFO          HDN_GETDISPINFOW
#	endif
#else
#	define HDN_ITEMCHANGING         HDN_ITEMCHANGINGA
#	define HDN_ITEMCHANGED          HDN_ITEMCHANGEDA
#	define HDN_ITEMCLICK            HDN_ITEMCLICKA
#	define HDN_ITEMDBLCLICK         HDN_ITEMDBLCLICKA
#	define HDN_DIVIDERDBLCLICK      HDN_DIVIDERDBLCLICKA
#	define HDN_BEGINTRACK           HDN_BEGINTRACKA
#	define HDN_ENDTRACK             HDN_ENDTRACKA
#	define HDN_TRACK                HDN_TRACKA
#	if (_WIN32_IE >= 0x0300)
#		define HDN_GETDISPINFO          HDN_GETDISPINFOA
#	endif
#endif

		//Messages

		__QCMP_STATIC_CONSTANT( int, HDM_FIRST               = 0x1200 );
		__QCMP_STATIC_CONSTANT( int, HDM_GETITEMCOUNT        = (HDM_FIRST + 0) );
		__QCMP_STATIC_CONSTANT( int, HDM_INSERTITEMA         = (HDM_FIRST + 1) );
		__QCMP_STATIC_CONSTANT( int, HDM_DELETEITEM          = (HDM_FIRST + 2) );
		__QCMP_STATIC_CONSTANT( int, HDM_GETITEMA            = (HDM_FIRST + 3) );
		__QCMP_STATIC_CONSTANT( int, HDM_SETITEMA            = (HDM_FIRST + 4) );
		__QCMP_STATIC_CONSTANT( int, HDM_LAYOUT              = (HDM_FIRST + 5) );
		__QCMP_STATIC_CONSTANT( int, HDM_HITTEST             = (HDM_FIRST + 6) );
		__QCMP_STATIC_CONSTANT( int, HDM_GETITEMRECT         = (HDM_FIRST + 7) );
		__QCMP_STATIC_CONSTANT( int, HDM_SETIMAGELIST        = (HDM_FIRST + 8) );
		__QCMP_STATIC_CONSTANT( int, HDM_GETIMAGELIST        = (HDM_FIRST + 9) );
		__QCMP_STATIC_CONSTANT( int, HDM_INSERTITEMW         = (HDM_FIRST + 10) );
		__QCMP_STATIC_CONSTANT( int, HDM_GETITEMW            = (HDM_FIRST + 11) );
		__QCMP_STATIC_CONSTANT( int, HDM_SETITEMW            = (HDM_FIRST + 12) );

		__QCMP_STATIC_CONSTANT( int, HDM_ORDERTOINDEX        = (HDM_FIRST + 15) );
		__QCMP_STATIC_CONSTANT( int, HDM_CREATEDRAGIMAGE     = (HDM_FIRST + 16) ); // wparam = which item (by index)
		__QCMP_STATIC_CONSTANT( int, HDM_GETORDERARRAY       = (HDM_FIRST + 17) );
		__QCMP_STATIC_CONSTANT( int, HDM_SETORDERARRAY       = (HDM_FIRST + 18) );
		__QCMP_STATIC_CONSTANT( int, HDM_SETHOTDIVIDER       = (HDM_FIRST + 19) );
		__QCMP_STATIC_CONSTANT( int, HDM_SETBITMAPMARGIN     = (HDM_FIRST + 20) );
		__QCMP_STATIC_CONSTANT( int, HDM_GETBITMAPMARGIN     = (HDM_FIRST + 21) );
		__QCMP_STATIC_CONSTANT( int, HDM_SETFILTERCHANGETIMEOUT = (HDM_FIRST+22) );
		__QCMP_STATIC_CONSTANT( int, HDM_EDITFILTER          = (HDM_FIRST + 23) );
		__QCMP_STATIC_CONSTANT( int, HDM_CLEARFILTER         = (HDM_FIRST + 24) );
		__QCMP_STATIC_CONSTANT( int, HDM_GETITEMDROPDOWNRECT = (HDM_FIRST+25) );  // rect of item's drop down button
		__QCMP_STATIC_CONSTANT( int, HDM_GETOVERFLOWRECT		= (HDM_FIRST+26) );  // rect of overflow button
		__QCMP_STATIC_CONSTANT( int, HDM_GETFOCUSEDITEM		= (HDM_FIRST+27) );
		__QCMP_STATIC_CONSTANT( int, HDM_SETFOCUSEDITEM		= (HDM_FIRST+28) );
		__QCMP_STATIC_CONSTANT( int, HDM_GETUNICODEFORMAT    = CCM_GETUNICODEFORMAT );
		__QCMP_STATIC_CONSTANT( int, HDM_SETUNICODEFORMAT    = CCM_SETUNICODEFORMAT );

#if( __QOR_UNICODE )
#	define HDM_GETITEM HDM_GETITEMW
#	define HDM_SETITEM HDM_SETITEMW
#	define HDM_INSERTITEM HDM_INSERTITEMW
#else
#	define HDM_GETITEM HDM_GETITEMA
#	define HDM_SETITEM HDM_SETITEMA
#	define HDM_INSERTITEM HDM_INSERTITEMA
#endif

		__QOR_DECLARE_OCLASS_ID( CHeader );

		CHeader();
		virtual ~CHeader();
		long OnNotify( NotificationMessageHeader* pHdr );

		virtual bool OnItemChanging( NMHeader* pHdr );
		virtual void OnItemChanged( NMHeader* pHdr );
		virtual void OnItemClick( NMHeader* pHdr );
		virtual void OnItemDblClick( NMHeader* pHdr );
		virtual void OnDividerDblClick( NMHeader* pHdr );
		virtual bool OnBeginTrack( NMHeader* pHdr );
		virtual void OnEndTrack( NMHeader* pHdr );
		virtual bool OnTrack( NMHeader* pHdr );
		virtual long OnGetDispInfo( NMHDDISPINFO* pHdr );
		virtual bool OnBeginDrag( NMHeader* pHdr );
		virtual bool OnEndDrag( NMHeader* pHdr );
		virtual void OnFilterChange( NMHeader* pHdr );
		virtual bool OnFilterBtnClick( NMHDFILTERBTNCLICK* pHdr );
		virtual void OnBeginFilterEdit( NMHeader* pHdr );
		virtual void OnEndFilterEdit( NMHeader* pHdr );
		virtual void OnItemStateIconClick( NMHeader* pHdr );
		virtual void OnItemKeyDown( NMHeader* pHdr );
		virtual void OnDropDown( NMHeader* pHdr );
		virtual void OnOverFlowClick( NMHeader* pHdr );
		virtual long OnCustomDraw( NMCustomDraw* pCustomDraw );
		virtual bool OnRClick( NotificationMessageHeader* pHdr );
		virtual void OnReleasedCapture( NotificationMessageHeader* pHdr );
		virtual long OnUnknownNotification( NotificationMessageHeader* pHdr );

		bool ClearFilter( int iColumn );
		long CreateDragImage( int iColumn );
		bool DeleteItem( int iColumn );
		bool EditFilter( int iColumn, bool bDiscardChanges );
		long GetBitmapMargin();
		long GetFocusItem();
		long GetImageList( Cmp_uint_ptr Option );
		bool GetItem( int iColumn, HDItem& Item );
		long GetItemCount();
		bool GetItemDropDownRect( int iColumn, CRectangle& rcItemDrop );
		bool GetItemRect( int iColumn, CRectangle& rcItem );
		bool GetOrderArray( int iSize, int* paOrder );
		bool GetOverflowRect( CRectangle& rcOverflow );
		bool GetUnicodeFormat();
		long HitTest( HDHITTESTINFO& Info );
		long InsertItem( int iColumn, HDItem& Item );
		bool Layout( HDLAYOUT& Layout );
		long OrderToIndex( int iOrder );
		long SetBitmapMargin( int iMargin );
		long SetFilterChangeTimeout( int iMilliseconds );
		bool SetFocusedItem( int iColumn );
		long SetHotDivider( bool bFlag, unsigned long dwValue );
		long SetImageList( Cmp_uint_ptr Option, CImageList::refType ImageList );
		bool SetItem( int iColumn, HDItem& Item );
		bool SetOrderArray( int iSize, int* paOrder );
		bool SetUnicodeFormat( bool bUnicode );

	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CHeaderFactory : public CWindowFactory
	{
	public:

		__QCMP_STATIC_CONSTANT( int, HDS_HORZ                = 0x0000 );
		__QCMP_STATIC_CONSTANT( int, HDS_BUTTONS             = 0x0002 );
		__QCMP_STATIC_CONSTANT( int, HDS_HIDDEN              = 0x0008 );

#if (_WIN32_IE >= 0x0300)
		__QCMP_STATIC_CONSTANT( int, HDS_HOTTRACK            = 0x0004 );
		__QCMP_STATIC_CONSTANT( int, HDS_DRAGDROP            = 0x0040 );
		__QCMP_STATIC_CONSTANT( int, HDS_FULLDRAG            = 0x0080 );
#endif

#if (_WIN32_IE >= 0x0500)
		__QCMP_STATIC_CONSTANT( int, HDS_FILTERBAR           = 0x0100 );
#endif

#if (_WIN32_WINNT >= 0x0501)
		__QCMP_STATIC_CONSTANT( int, HDS_FLAT                = 0x0200 );
#endif

#if _WIN32_WINNT >= 0x0600
		__QCMP_STATIC_CONSTANT( int, HDS_CHECKBOXES          = 0x0400 );
		__QCMP_STATIC_CONSTANT( int, HDS_NOSIZING            = 0x0800 );
		__QCMP_STATIC_CONSTANT( int, HDS_OVERFLOW            = 0x1000 );
#endif

		__QOR_DECLARE_OCLASS_ID( CHeaderFactory );

		CHeaderFactory();

		virtual ~CHeaderFactory();
		virtual CHeader* Create();
			
		bool GetHorizontal();
		void SetHorizontal( bool bFlag );
		bool GetVertical();
		void SetVertical( bool bFlag );
		bool GetHasButtons();
		void SetHasButtons( bool bFlag );
		bool GetHotTrack();
		void SetHotTrack( bool bFlag );
		bool GetHidden();
		void SetHidden( bool bFlag );
		bool GetDragDrop();
		void SetDragDrop( bool bFlag );
		bool GetFullDrag();
		void SetFullDrag( bool bFlag );
		bool GetFilterBar();
		void SetFilterBar( bool bFlag );
		bool GetFlat();
		void SetFlat( bool bFlag );
		bool GetCheckBoxes();
		void SetCheckBoxes( bool bFlag );
		bool GetNoSizing();
		void SetNoSizing( bool bFlag );
		bool GetOverflow();
		void SetOverflow( bool bFlag );
 
	private:

		CHeaderFactory( const CHeaderFactory& );
		CHeaderFactory& operator = ( const CHeaderFactory& );
	};

}//nsWin32

#endif//WINQL_GUI_WND_CCTRL_HEADER_H_3
