//UpDown.h

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Up Down Common Control Window

#ifndef WINQL_GUI_WND_CCTRL_UPDOWN_H_3
#define WINQL_GUI_WND_CCTRL_UPDOWN_H_3

#include "WinQL/GUI/Views/WindowView.h"
#include "WinQL/GUI/Windows/WinCtrlWindow.h"
#include "WinQL/GUI/Windows/CommonCtrlClass.h"
#include "WinQL/GUI/Windows/CommonCtrlFactory.h"
#include "MammutQOR/Model.h"
#include "WinQL/Application/Graphics/WinQLRectangle.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	class __QOR_INTERFACE( __WINQL_GUI ) CUpDownFactory;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CUpDownClass : public CCommonCtrlClass
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CUpDownClass );

		CUpDownClass();
		virtual ~CUpDownClass();

	private:

		CUpDownClass( const CUpDownClass& );
		CUpDownClass& operator = ( const CUpDownClass& );
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CUpDown : public CWinCtrlWindow
	{
	public:

		typedef CUpDownClass TWndClass;
		typedef CUpDownFactory TFactory;

		//--------------------------------------------------------------------------------
		typedef struct _NM_UPDOWN : public NotificationMessageHeader
		{
			//NMHDR hdr;
			int iPos;
			int iDelta;
		} NMUPDOWN, *LPNMUPDOWN;

		//--------------------------------------------------------------------------------
		typedef struct _UDACCEL 
		{
			unsigned int nSec;
			unsigned int nInc;
		} UDACCEL, *LPUDACCEL;

		__QCMP_STATIC_CONSTANT( int, UDN_FIRST               = (0U-721U) );
		__QCMP_STATIC_CONSTANT( int, UDN_LAST                = (0U-729U) );

		//Notifications
		__QCMP_STATIC_CONSTANT( int, UDN_DELTAPOS            = (UDN_FIRST - 1) );

		//Messages
		__QCMP_STATIC_CONSTANT( int, UDM_SETRANGE            = (COSWindow::wmUser+101) );
		__QCMP_STATIC_CONSTANT( int, UDM_GETRANGE            = (COSWindow::wmUser+102) );
		__QCMP_STATIC_CONSTANT( int, UDM_SETPOS              = (COSWindow::wmUser+103) );
		__QCMP_STATIC_CONSTANT( int, UDM_GETPOS              = (COSWindow::wmUser+104) );
		__QCMP_STATIC_CONSTANT( int, UDM_SETBUDDY            = (COSWindow::wmUser+105) );
		__QCMP_STATIC_CONSTANT( int, UDM_GETBUDDY            = (COSWindow::wmUser+106) );
		__QCMP_STATIC_CONSTANT( int, UDM_SETACCEL            = (COSWindow::wmUser+107) );
		__QCMP_STATIC_CONSTANT( int, UDM_GETACCEL            = (COSWindow::wmUser+108) );
		__QCMP_STATIC_CONSTANT( int, UDM_SETBASE             = (COSWindow::wmUser+109) );
		__QCMP_STATIC_CONSTANT( int, UDM_GETBASE             = (COSWindow::wmUser+110) );
#if (_WIN32_IE >= 0x0400)
		__QCMP_STATIC_CONSTANT( int, UDM_SETRANGE32          = (COSWindow::wmUser+111) );
		__QCMP_STATIC_CONSTANT( int, UDM_GETRANGE32          = (COSWindow::wmUser+112) ); // wParam & lParam are LPINT
		__QCMP_STATIC_CONSTANT( int, UDM_SETUNICODEFORMAT    = CCM_SETUNICODEFORMAT );
		__QCMP_STATIC_CONSTANT( int, UDM_GETUNICODEFORMAT    = CCM_GETUNICODEFORMAT );
#endif
#if (_WIN32_IE >= 0x0500)
		__QCMP_STATIC_CONSTANT( int, UDM_SETPOS32            = (COSWindow::wmUser+113) );
		__QCMP_STATIC_CONSTANT( int, UDM_GETPOS32            = (COSWindow::wmUser+114) );
#endif

		__QOR_DECLARE_OCLASS_ID( CUpDown );

		CUpDown();
		virtual ~CUpDown();

		virtual long OnNotify( NotificationMessageHeader* pHdr );
		virtual void OnReleasedCapture( NotificationMessageHeader* pHdr );
		virtual bool OnDeltaPos( NMUPDOWN* pHdr );
		virtual long OnUnknownNotification( NotificationMessageHeader* pHdr );

		long GetAccelerators( int iSize, UDACCEL* paAccel );
		long GetBase();
		COSWindow::refType GetBuddy();
		long GetPos();
		long GetPos32( int* pbError );
		long GetRange();
		void GetRange32( int* pLow, int* pHigh );
		bool GetUnicodeFormat();
		bool SetAccelerators( UDACCEL* paAccel, int iSize );
		long SetBase( int nSize );
		COSWindow::refType SetBuddy( COSWindow::refType BuddyWindow );
		long SetPos( short nPos );
		long SetPos32( int nPos );
		long SetRange( short nUpper, short nLower );
		long SetRange32( int iLow, int iHigh );
		bool SetUnicodeFormat( bool bUnicode );

	};

	//--------------------------------------------------------------------------------		
	class __QOR_INTERFACE( __WINQL_GUI ) CUpDownFactory : public CCommonCtrlFactory< CUpDown >
	{
	public:

		__QCMP_STATIC_CONSTANT( int, UDS_WRAP                = 0x0001 );
		__QCMP_STATIC_CONSTANT( int, UDS_SETBUDDYINT         = 0x0002 );
		__QCMP_STATIC_CONSTANT( int, UDS_ALIGNRIGHT          = 0x0004 );
		__QCMP_STATIC_CONSTANT( int, UDS_ALIGNLEFT           = 0x0008 );
		__QCMP_STATIC_CONSTANT( int, UDS_AUTOBUDDY           = 0x0010 );
		__QCMP_STATIC_CONSTANT( int, UDS_ARROWKEYS           = 0x0020 );
		__QCMP_STATIC_CONSTANT( int, UDS_HORZ                = 0x0040 );
		__QCMP_STATIC_CONSTANT( int, UDS_NOTHOUSANDS         = 0x0080 );
#if		(_WIN32_IE >= 0x0300)
		__QCMP_STATIC_CONSTANT( int, UDS_HOTTRACK            = 0x0100 );
#endif//(_WIN32_IE >= 0x0300)

		__QOR_DECLARE_OCLASS_ID( CUpDownFactory );

		CUpDownFactory();
		virtual ~CUpDownFactory();
		bool GetWrap();
		void SetWrap( bool bFlag );
		bool GetBuddyInt();
		void SetBuddyInt( bool bFlag );
		bool GetAlignRight();
		void SetAlignRight( bool bFlag );
		bool GetAlignLeft();
		void SetAlignLeft( bool bFlag );
		bool GetAutoBuddy();
		void SetAutoBuddy( bool bFlag );
		bool GetArrowKeys();
		void SetArrowKeys( bool bFlag );
		bool GetHorizontal();
		void SetHorizontal( bool bFlag );
		bool GetNoThousands();
		void SetNoThousands( bool bFlag );
		bool GetHotTrack();
		void SetHotTrack( bool bFlag );

	};

}//nsWin32

#endif//WINQL_GUI_WND_CCTRL_UPDOWN_H_3
