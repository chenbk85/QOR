//Button.h

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_GUI_WND_BUTTON_H_3
#define WINQL_GUI_WND_BUTTON_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/GUI/Window.h"
#include "WinCtrlWindow.h"
#include "WinQL/GUI/WindowFactory.h"
#include "WinQL/GUI/CommonCtrl.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CButtonClass : public CWindowClass
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CButtonClass );
		
		CButtonClass();
		virtual ~CButtonClass( void );
		virtual bool Preregistered();
		const TCHAR* Name( void );

	private:

		CButtonClass( const CButtonClass& );
		CButtonClass& operator = ( const CButtonClass& );
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CButton : public CWinCtrlWindow
	{
	public:

		//--------------------------------------------------------------------------------
		typedef struct tagNMBCHOTITEM : public NotificationMessageHeader
		{
			//NMHDR   hdr;
			unsigned long   dwFlags;           // HICF_*
		} NMBCHOTITEM, * LPNMBCHOTITEM;

		//--------------------------------------------------------------------------------
		typedef struct tagNMBCDROPDOWN : public NotificationMessageHeader
		{
			//NMHDR   hdr;
			RECT    rcButton;
		} NMBCDROPDOWN, * LPNMBCDROPDOWN;

		//Notifications
		__QCMP_STATIC_CONSTANT( int, BN_CLICKED          = 0 );
		__QCMP_STATIC_CONSTANT( int, BN_PAINT            = 1 );
		__QCMP_STATIC_CONSTANT( int, BN_HILITE           = 2 );
		__QCMP_STATIC_CONSTANT( int, BN_UNHILITE         = 3 );
		__QCMP_STATIC_CONSTANT( int, BN_DISABLE          = 4 );
		__QCMP_STATIC_CONSTANT( int, BN_DOUBLECLICKED    = 5 );
#if(WINVER >= 0x0400)										
		__QCMP_STATIC_CONSTANT( int, BN_PUSHED           = BN_HILITE );
		__QCMP_STATIC_CONSTANT( int, BN_UNPUSHED         = BN_UNHILITE );
		__QCMP_STATIC_CONSTANT( int, BN_DBLCLK           = BN_DOUBLECLICKED );
		__QCMP_STATIC_CONSTANT( int, BN_SETFOCUS         = 6 );
		__QCMP_STATIC_CONSTANT( int, BN_KILLFOCUS        = 7 );
#endif /* WINVER >= 0x0400 */

		__QCMP_STATIC_CONSTANT( int, BCN_FIRST            = (0U-1250U) );
		__QCMP_STATIC_CONSTANT( int, BCN_LAST             = (0U-1350U) );
		__QCMP_STATIC_CONSTANT( int, BCN_HOTITEMCHANGE    = (BCN_FIRST + 0x0001) );
		__QCMP_STATIC_CONSTANT( int, BCN_DROPDOWN         = (BCN_FIRST + 0x0002) );

		//Button Control Messages

		__QCMP_STATIC_CONSTANT( int, BM_GETCHECK        = 0x00F0 );
		__QCMP_STATIC_CONSTANT( int, BM_SETCHECK        = 0x00F1 );
		__QCMP_STATIC_CONSTANT( int, BM_GETSTATE        = 0x00F2 );
		__QCMP_STATIC_CONSTANT( int, BM_SETSTATE        = 0x00F3 );
		__QCMP_STATIC_CONSTANT( int, BM_SETSTYLE        = 0x00F4 );
#if(WINVER >= 0x0400)
		__QCMP_STATIC_CONSTANT( int, BM_CLICK           = 0x00F5 );
		__QCMP_STATIC_CONSTANT( int, BM_GETIMAGE        = 0x00F6 );
		__QCMP_STATIC_CONSTANT( int, BM_SETIMAGE        = 0x00F7 );
#endif /* WINVER >= 0x0400 */
#if(WINVER >= 0x0600)
		__QCMP_STATIC_CONSTANT( int, BM_SETDONTCLICK    = 0x00F8 );
#endif /* WINVER >= 0x0600 */

#		define VSCLASS_BUTTONSTYLE	L"BUTTONSTYLE"
#		define VSCLASS_BUTTON	L"BUTTON"

		enum BUTTONPARTS 
		{
			BP_PUSHBUTTON = 1,
			BP_RADIOBUTTON = 2,
			BP_CHECKBOX = 3,
			BP_GROUPBOX = 4,
			BP_USERBUTTON = 5,
			BP_COMMANDLINK = 6,
			BP_COMMANDLINKGLYPH = 7,
		};

#		define BUTTONSTYLEPARTS BUTTONPARTS;

		enum PUSHBUTTONSTATES 
		{
			PBS_NORMAL = 1,
			PBS_HOT = 2,
			PBS_PRESSED = 3,
			PBS_DISABLED = 4,
			PBS_DEFAULTED = 5,
			PBS_DEFAULTED_ANIMATING = 6,
		};

		enum RADIOBUTTONSTATES 
		{
			RBS_UNCHECKEDNORMAL = 1,
			RBS_UNCHECKEDHOT = 2,
			RBS_UNCHECKEDPRESSED = 3,
			RBS_UNCHECKEDDISABLED = 4,
			RBS_CHECKEDNORMAL = 5,
			RBS_CHECKEDHOT = 6,
			RBS_CHECKEDPRESSED = 7,
			RBS_CHECKEDDISABLED = 8,
		};

		enum CHECKBOXSTATES 
		{
			CBS_UNCHECKEDNORMAL = 1,
			CBS_UNCHECKEDHOT = 2,
			CBS_UNCHECKEDPRESSED = 3,
			CBS_UNCHECKEDDISABLED = 4,
			CBS_CHECKEDNORMAL = 5,
			CBS_CHECKEDHOT = 6,
			CBS_CHECKEDPRESSED = 7,
			CBS_CHECKEDDISABLED = 8,
			CBS_MIXEDNORMAL = 9,
			CBS_MIXEDHOT = 10,
			CBS_MIXEDPRESSED = 11,
			CBS_MIXEDDISABLED = 12,
			CBS_IMPLICITNORMAL = 13,
			CBS_IMPLICITHOT = 14,
			CBS_IMPLICITPRESSED = 15,
			CBS_IMPLICITDISABLED = 16,
			CBS_EXCLUDEDNORMAL = 17,
			CBS_EXCLUDEDHOT = 18,
			CBS_EXCLUDEDPRESSED = 19,
			CBS_EXCLUDEDDISABLED = 20,
		};

		enum GROUPBOXSTATES 
		{
			GBS_NORMAL = 1,
			GBS_DISABLED = 2,
		};

		enum COMMANDLINKSTATES 
		{
			CMDLS_NORMAL = 1,
			CMDLS_HOT = 2,
			CMDLS_PRESSED = 3,
			CMDLS_DISABLED = 4,
			CMDLS_DEFAULTED = 5,
			CMDLS_DEFAULTED_ANIMATING = 6,
		};

		enum COMMANDLINKGLYPHSTATES 
		{
			CMDLGS_NORMAL = 1,
			CMDLGS_HOT = 2,
			CMDLGS_PRESSED = 3,
			CMDLGS_DISABLED = 4,
			CMDLGS_DEFAULTED = 5,
		};

		__QOR_DECLARE_OCLASS_ID( CButton );

		CButton();
		virtual ~CButton();
			
		long OnNotify( NotificationMessageHeader* pHdr );
		virtual void OnBCNDropDown( NMBCDROPDOWN* pNMDropDown );
		virtual void OnHotItemChange( NMBCHOTITEM* pNMHotItem );
		void OnCommand( unsigned short wCtrlID, unsigned short wCode );

		virtual void OnClicked(){}
		virtual void OnPaint(){}
		virtual void OnPushed(){}
		virtual void OnUnpushed(){}
		virtual void OnDisable(){}
		virtual void OnDblClicked(){}
		virtual void OnSetFocus(){}
		virtual void OnKillFocus(){}

		virtual long OnCustomDraw( NMCustomDraw* pCustomDraw );
		void Click();
		long GetCheck();
		void SetCheck( Cmp_uint_ptr Check );
		long GetState();
		void SetState( Cmp_uint_ptr State );
		void SetStyle( Cmp_uint_ptr Style, int bRedraw );
		CIconHandle::refType GetIcon();
		CBitmapHandle::refType GetBitmap();
		CIconHandle::refType SetIcon( CIconHandle::refType hIcon );
		CBitmapHandle::refType SetBitmap( CBitmapHandle::refType hBitmap );

	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CButtonFactory : public CWindowFactory
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CButtonFactory );

		//Button Control Styles
		__QCMP_STATIC_CONSTANT( long, BS_PUSHBUTTON       = 0x00000000L );
		__QCMP_STATIC_CONSTANT( long, BS_DEFPUSHBUTTON    = 0x00000001L );
		__QCMP_STATIC_CONSTANT( long, BS_CHECKBOX         = 0x00000002L );
		__QCMP_STATIC_CONSTANT( long, BS_AUTOCHECKBOX     = 0x00000003L );
		__QCMP_STATIC_CONSTANT( long, BS_RADIOBUTTON      = 0x00000004L );
		__QCMP_STATIC_CONSTANT( long, BS_3STATE           = 0x00000005L );
		__QCMP_STATIC_CONSTANT( long, BS_AUTO3STATE       = 0x00000006L );
		__QCMP_STATIC_CONSTANT( long, BS_GROUPBOX         = 0x00000007L );
		__QCMP_STATIC_CONSTANT( long, BS_USERBUTTON       = 0x00000008L );
		__QCMP_STATIC_CONSTANT( long, BS_AUTORADIOBUTTON  = 0x00000009L );
		__QCMP_STATIC_CONSTANT( long, BS_PUSHBOX          = 0x0000000AL );
		__QCMP_STATIC_CONSTANT( long, BS_OWNERDRAW        = 0x0000000BL );
		__QCMP_STATIC_CONSTANT( long, BS_TYPEMASK         = 0x0000000FL );
		__QCMP_STATIC_CONSTANT( long, BS_LEFTTEXT         = 0x00000020L );
#if(WINVER >= 0x0400)
		__QCMP_STATIC_CONSTANT( long, BS_TEXT             = 0x00000000L );
		__QCMP_STATIC_CONSTANT( long, BS_ICON             = 0x00000040L );
		__QCMP_STATIC_CONSTANT( long, BS_BITMAP           = 0x00000080L );
		__QCMP_STATIC_CONSTANT( long, BS_LEFT             = 0x00000100L );
		__QCMP_STATIC_CONSTANT( long, BS_RIGHT            = 0x00000200L );
		__QCMP_STATIC_CONSTANT( long, BS_CENTER           = 0x00000300L );
		__QCMP_STATIC_CONSTANT( long, BS_TOP              = 0x00000400L );
		__QCMP_STATIC_CONSTANT( long, BS_BOTTOM           = 0x00000800L );
		__QCMP_STATIC_CONSTANT( long, BS_VCENTER          = 0x00000C00L );
		__QCMP_STATIC_CONSTANT( long, BS_PUSHLIKE         = 0x00001000L );
		__QCMP_STATIC_CONSTANT( long, BS_MULTILINE        = 0x00002000L );
		__QCMP_STATIC_CONSTANT( long, BS_NOTIFY           = 0x00004000L );
		__QCMP_STATIC_CONSTANT( long, BS_FLAT             = 0x00008000L );
		__QCMP_STATIC_CONSTANT( long, BS_RIGHTBUTTON      = BS_LEFTTEXT );
#endif /* WINVER >= 0x0400 */

		CButtonFactory();

		virtual ~CButtonFactory();
		virtual CButton* Create( void );

		bool GetDefault();
		void SetDefault( bool bFlag );
		bool GetCheckBox();
		void SetCheckBox( bool bFlag );
		bool GetAutoCheckBox();
		void SetAutoCheckBox( bool bFlag );
		bool GetRadioButton();
		void SetRadioButton( bool bFlag );
		bool Get3State();
		void Set3State( bool bFlag );
		bool GetAuto3State();
		void SetAuto3State( bool bFlag );
		bool GetGroupBox();
		void SetGroupBox( bool bFlag );
		bool GetUserButton();
		void SetUserButton( bool bFlag );
		bool GetAutoRadioButton();
		void SetAutoRadioButton( bool bFlag );
		bool GetPushBox();
		void SetPushBox( bool bFlag );
		bool GetOwnerDraw();
		void SetOwnerDraw( bool bFlag );
		bool GetTypeMask();
		void SetTypeMask( bool bFlag );
		bool GetLeftText();
		void SetLeftText( bool bFlag );
		bool GetIcon();
		void SetIcon( bool bFlag );
		bool GetBitmap();
		void SetBitmap( bool bFlag );
		bool GetLeft();
		void SetLeft( bool bFlag );
		bool GetRight();
		void SetRight( bool bFlag );
		bool GetCenter();
		void SetCenter( bool bFlag );
		bool GetTop();
		void SetTop( bool bFlag );
		bool GetBottom();
		void SetBottom( bool bFlag );
		bool GetVCenter();
		void SetVCenter( bool bFlag );
		bool GetPushlike();
		void SetPushlike( bool bFlag );
		bool GetMultiline();
		void SetMultiline( bool bFlag );
		bool GetNotify();
		void SetNotify( bool bFlag );
		bool GetFlat();
		void SetFlat( bool bFlag );

	};

}//nsWin32

#endif//WINQL_GUI_WND_BUTTON_H_3
