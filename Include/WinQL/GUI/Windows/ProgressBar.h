//ProgressBar.h

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//ProgressBar Common Control Window

#ifndef WINQL_GUI_WND_CCTRL_PROGRESSBAR_H_3
#define WINQL_GUI_WND_CCTRL_PROGRESSBAR_H_3

#include "WinQL/WinQL.h"
#include "WinQL/GUI/Views/WindowView.h"
#include "WinQL/GUI/Windows/WinCtrlWindow.h"
#include "WinQL/GUI/CommonCtrl.h"
#include "MammutQOR/Model.h"
#include "WinQL/GUI/WindowFactory.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CProgressBarClass : public CWindowClass
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CProgressBarClass );

		CProgressBarClass();
		virtual ~CProgressBarClass();
		virtual bool Preregistered();
		const TCHAR* Name();

	private:

		CCommonCtrl m_ComCtrl32;

		CProgressBarClass( const CProgressBarClass& );
		CProgressBarClass& operator = ( const CProgressBarClass& );
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CProgressBar : public CWinCtrlWindow
	{
	public:

		//--------------------------------------------------------------------------------
		struct PBRANGE
		{
			int iLow;
			int iHigh;
		};

		__QCMP_STATIC_CONSTANT( int, PBM_SETRANGE            = (COSWindow::wmUser+1) );
		__QCMP_STATIC_CONSTANT( int, PBM_SETPOS              = (COSWindow::wmUser+2) );
		__QCMP_STATIC_CONSTANT( int, PBM_DELTAPOS            = (COSWindow::wmUser+3) );
		__QCMP_STATIC_CONSTANT( int, PBM_SETSTEP             = (COSWindow::wmUser+4) );
		__QCMP_STATIC_CONSTANT( int, PBM_STEPIT              = (COSWindow::wmUser+5) );
		__QCMP_STATIC_CONSTANT( int, PBM_SETRANGE32          = (COSWindow::wmUser+6) ); // lParam = high, wParam = low
		__QCMP_STATIC_CONSTANT( int, PBM_GETRANGE            = (COSWindow::wmUser+7) ); // wParam = return (TRUE ? low : high). lParam = PPBRANGE or NULL
		__QCMP_STATIC_CONSTANT( int, PBM_GETPOS              = (COSWindow::wmUser+8) );
		__QCMP_STATIC_CONSTANT( int, PBM_SETBARCOLOR         = (COSWindow::wmUser+9) );            // lParam = bar color
		__QCMP_STATIC_CONSTANT( int, PBM_SETMARQUEE          = (COSWindow::wmUser+10));
																			  
		__QCMP_STATIC_CONSTANT( int, PBM_GETSTEP             = (COSWindow::wmUser+13));
		__QCMP_STATIC_CONSTANT( int, PBM_GETBKCOLOR          = (COSWindow::wmUser+14));
		__QCMP_STATIC_CONSTANT( int, PBM_GETBARCOLOR         = (COSWindow::wmUser+15));
		__QCMP_STATIC_CONSTANT( int, PBM_SETSTATE            = (COSWindow::wmUser+16)); // wParam = PBST_[State] (NORMAL, ERROR, PAUSED)
		__QCMP_STATIC_CONSTANT( int, PBM_GETSTATE            = (COSWindow::wmUser+17));

#define PBM_SETBKCOLOR          CCM_SETBKCOLOR  // lParam = bkColor

		__QOR_DECLARE_OCLASS_ID( CProgressBar );

		CProgressBar();
		virtual ~CProgressBar();
		long DeltaPosition( int nIncrement );
		long GetBarColour();
		long GetBkColour();
		long GetPos();
		long GetRange( bool bLowLimit, PBRANGE* pPBRange );
		long GetState();
		long GetStep();
		unsigned long SetBarColour( unsigned long clrBarColour );
		unsigned long SetBkColour( unsigned long clrBkColour );
		void SetMarquee( unsigned int uiMilliseconds, bool bOn );
		long SetPos( int iPos );
		long SetRange( unsigned short wMin, unsigned short wMax );
		long SetRange32( int iMin, int iMax );
		long SetState( int iState );
		long SetStep( int nStepInc );
		long StepIt();
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CProgressBarFactory : public CWindowFactory
	{
	public:

		__QCMP_STATIC_CONSTANT( int, PBS_SMOOTH              = 0x01 );
		__QCMP_STATIC_CONSTANT( int, PBS_VERTICAL            = 0x04 );
		__QCMP_STATIC_CONSTANT( int, PBS_MARQUEE             = 0x08 );
		__QCMP_STATIC_CONSTANT( int, PBS_SMOOTHREVERSE       = 0x10 );

		__QOR_DECLARE_OCLASS_ID( CProgressBarFactory );

		CProgressBarFactory();

		virtual ~CProgressBarFactory();
		virtual CProgressBar* Create();
			
		bool GetSmooth();
		void SetSmooth( bool bFlag );
		bool GetVertical();
		void SetVertical( bool bFlag );
		bool GetMarquee();
		void SetMarquee( bool bFlag );
		bool GetSmoothReverse();
		void SetSmoothReverse( bool bFlag );

	private:

		CProgressBarFactory( const CProgressBarFactory& );
		CProgressBarFactory& operator = ( const CProgressBarFactory& );
 
	};

}//nsWin32

#endif//WINQL_GUI_WND_CCTRL_PROGRESSBAR_H_3
