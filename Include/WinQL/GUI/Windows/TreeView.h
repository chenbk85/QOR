//TreeView.h

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Tree View Common Control Window

#ifndef WINQL_GUI_WND_CCTRL_TREEVIEW_H_3
#define WINQL_GUI_WND_CCTRL_TREEVIEW_H_3

#include "WinQL/GUI/Views/WindowView.h"
#include "WinQL/GUI/Windows/WinCtrlWindow.h"
#include "WinQL/GUI/Windows/CommonCtrlClass.h"
#include "WinQL/GUI/Windows/CommonCtrlFactory.h"
#include "MammutQOR/Model.h"
#include "WinQL/Application/Graphics/WinQLRectangle.h"
#include "WinQL/GUI/ImageList.h"

/*
#if		( _WIN32_IE < 0x0400 )

	typedef struct tagNMTVGETINFOTIP
	{
		NMHDR hdr;
		LPTSTR pszText;
		int cchTextMax;
		HTREEITEM hItem;
		Cmp_long_ptr lParam;
	} NMTVGETINFOTIP, *LPNMTVGETINFOTIP;

	typedef struct tagTVITEMEX
	{
		unsigned int      mask;
		HTREEITEM hItem;
		unsigned int      state;
		unsigned int      stateMask;
		LPTSTR    pszText;
		int       cchTextMax;
		int       iImage;
		int       iSelectedImage;
		int       cChildren;
		Cmp_long_ptr    lParam;
		int       iIntegral;
	#if (_WIN32_IE >= 0x0600)
		unsigned int      uStateEx;
		WindowHandle      hwnd;
		int       iExpandedImage;
	#endif
	} TVITEMEX, *LPTVITEMEX;

	typedef struct tagNMMOUSE 
	{
		NMHDR   hdr;
		DWORD_PTR dwItemSpec;
		DWORD_PTR dwItemData;
		POINT   pt;
		Cmp_long_ptr  dwHitInfo; // any specifics about where on the item or control the mouse is
	} NMMOUSE, *LPNMMOUSE;

#endif//( _WIN32_IE < 0x0400 )

#if		( _WIN32_IE <= 0x0600 )

	typedef struct tagNMTVASYNCDRAW
	{
		NMHDR     hdr;
		IMAGELISTDRAWPARAMS *pimldp;    // the draw that failed
		long   hr;                   // why it failed
		HTREEITEM hItem;                // item that failed to draw icon
		Cmp_long_ptr    lParam;               // its data
		// Out Params
		unsigned long     dwRetFlags;           // What listview should do on return
		int       iRetImageIndex;       // used if ADRF_DRAWIMAGE is returned
	} NMTVASYNCDRAW;

	typedef struct tagTVITEMCHANGE 
	{
		NMHDR hdr;
		unsigned int uChanged;
		HTREEITEM hItem;
		unsigned int uStateNew;
		unsigned int uStateOld;
		Cmp_long_ptr lParam;
	} NMTVITEMCHANGE;

#endif//( _WIN32_IE <= 0x0600 )
*/

//--------------------------------------------------------------------------------
namespace nsWin32
{
	class __QOR_INTERFACE( __WINQL_GUI ) CTreeViewFactory;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CTreeViewClass : public CCommonCtrlClass
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CTreeViewClass );

		CTreeViewClass();
		virtual ~CTreeViewClass();

	private:

		CTreeViewClass( const CTreeViewClass& );
		CTreeViewClass& operator = ( const CTreeViewClass& );
	};


	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CTreeView : public CWinCtrlWindow
	{
	public:

		typedef CTreeViewClass TWndClass;
		typedef CTreeViewFactory TFactory;

		//--------------------------------------------------------------------------------
		typedef struct tagNMMOUSE : public NotificationMessageHeader
		{
			//NMHDR   hdr;
			Cmp_ulong_ptr dwItemSpec;
			Cmp_ulong_ptr dwItemData;
			POINT   pt;
			Cmp_long_ptr  dwHitInfo; // any specifics about where on the item or control the mouse is
		} NMMOUSE, *LPNMMOUSE;

		//--------------------------------------------------------------------------------
		struct TVITEM
		{
			unsigned int      mask;
			HTREEITEM hItem;
			unsigned int      state;
			unsigned int      stateMask;
			TCHAR*    pszText;
			int       cchTextMax;
			int       iImage;
			int       iSelectedImage;
			int       cChildren;
			Cmp_long_ptr    lParam;
		};

		//--------------------------------------------------------------------------------
		struct NMTREEVIEW : public NotificationMessageHeader
		{
			//NMHDR       hdr;
			unsigned int        action;
			TVITEM    itemOld;
			TVITEM    itemNew;
			POINT       ptDrag;
		};

		//--------------------------------------------------------------------------------
		struct NMTVCUSTOMDRAW : public NMCustomDraw
		{
			//NMCUSTOMDRAW nmcd;
			unsigned long     clrText;
			unsigned long     clrTextBk;
#if (_WIN32_IE >= 0x0400)
			int iLevel;
#endif
		};

		//--------------------------------------------------------------------------------
		struct NMTVDISPINFO : public NotificationMessageHeader
		{
			//NMHDR hdr;
			TVITEM item;
		};

		//--------------------------------------------------------------------------------
		typedef struct ImageListDrawParams		//_IMAGELISTDRAWPARAMS
		{
			unsigned long       cbSize;
			CImageList*  himl;
			int         i;
			CDCInternal*         hdcDst;
			int         x;
			int         y;
			int         cx;
			int         cy;
			int         xBitmap;        // x offest from the upperleft of bitmap
			int         yBitmap;        // y offset from the upperleft of bitmap
			unsigned long    rgbBk;
			unsigned long    rgbFg;
			unsigned int        fStyle;
			unsigned long       dwRop;
		#if (_WIN32_IE >= 0x0501)
			unsigned long       fState;
			unsigned long       Frame;
			unsigned long    crEffect;
		#endif
		} IMAGELISTDRAWPARAMS, *LPIMAGELISTDRAWPARAMS;

		//--------------------------------------------------------------------------------
		typedef struct tagNMTVASYNCDRAW : public NotificationMessageHeader
		{
			//NMHDR     hdr;
			ImageListDrawParams *pimldp;    // the draw that failed
			long   hr;                   // why it failed
			HTREEITEM hItem;                // item that failed to draw icon
			Cmp_long_ptr    lParam;               // its data
			// Out Params
			unsigned long     dwRetFlags;           // What listview should do on return
			int       iRetImageIndex;       // used if ADRF_DRAWIMAGE is returned
		} NMTVASYNCDRAW;

		//--------------------------------------------------------------------------------
		struct NMTVGETINFOTIP : public NotificationMessageHeader
		{
			//NMHDR hdr;
			TCHAR* pszText;
			int cchTextMax;
			HTREEITEM hItem;
			Cmp_long_ptr lParam;
		};

		//--------------------------------------------------------------------------------
		typedef struct tagTVITEMCHANGE : public NotificationMessageHeader
		{
			//NMHDR hdr;
			unsigned int uChanged;
			HTREEITEM hItem;
			unsigned int uStateNew;
			unsigned int uStateOld;
			Cmp_long_ptr lParam;
		} NMTVITEMCHANGE;

		//--------------------------------------------------------------------------------
		typedef struct tagTVKEYDOWN : public NotificationMessageHeader
		{
			//NMHDR hdr;
			unsigned short wVKey;
			unsigned int flags;
		} NMTVKEYDOWN, *LPNMTVKEYDOWN;

		//--------------------------------------------------------------------------------
		typedef struct tagTVHITTESTINFO 
		{
			POINT       pt;
			unsigned int        flags;
			HTREEITEM   hItem;
		} TVHITTESTINFO, *LPTVHITTESTINFO;

		//--------------------------------------------------------------------------------
		struct TVITEMEX
		{
			unsigned int      mask;
			HTREEITEM hItem;
			unsigned int      state;
			unsigned int      stateMask;
			wchar_t*    pszText;
			int       cchTextMax;
			int       iImage;
			int       iSelectedImage;
			int       cChildren;
			Cmp_long_ptr    lParam;
			int       iIntegral;
#if (_WIN32_IE >= 0x0600)
			unsigned int      uStateEx;
			COSWindow*      hwnd;
			int       iExpandedImage;
#endif
#if (NTDDI_VERSION >= NTDDI_WIN7)
			int       iReserved;
#endif
		};

		//--------------------------------------------------------------------------------
		struct TVINSERTSTRUCT
		{
			HTREEITEM hParent;
			HTREEITEM hInsertAfter;
#if (_WIN32_IE >= 0x0400)
			union
			{
				TVITEMEX itemex;
				TVITEM  item;
			} DUMMYUNIONNAME;
#else
			TVITEM item;
#endif
		};

		//--------------------------------------------------------------------------------
		typedef int ( __QCMP_STDCALLCONVENTION *PFNTVCOMPARE )( Cmp_long_ptr lParam1, Cmp_long_ptr lParam2, Cmp_long_ptr lParamSort );

		typedef struct tagTVSORTCB
		{
			HTREEITEM       hParent;
			PFNTVCOMPARE    lpfnCompare;
			Cmp_long_ptr          lParam;
		} TVSORTCB, *LPTVSORTCB;


		__QCMP_STATIC_CONSTANT( int, TVN_FIRST               = (0U-400U) );
		__QCMP_STATIC_CONSTANT( int, TVN_LAST                = (0U-499U) );

		//Notifications

		__QCMP_STATIC_CONSTANT( int, TVN_SELCHANGINGA        = (TVN_FIRST-1)  );
		__QCMP_STATIC_CONSTANT( int, TVN_SELCHANGINGW        = (TVN_FIRST-50) );
		__QCMP_STATIC_CONSTANT( int, TVN_SELCHANGEDA         = (TVN_FIRST-2)	 );
		__QCMP_STATIC_CONSTANT( int, TVN_SELCHANGEDW         = (TVN_FIRST-51) );
		__QCMP_STATIC_CONSTANT( int, TVN_GETDISPINFOA        = (TVN_FIRST-3)	 );
		__QCMP_STATIC_CONSTANT( int, TVN_GETDISPINFOW        = (TVN_FIRST-52) );
		__QCMP_STATIC_CONSTANT( int, TVN_SETDISPINFOA        = (TVN_FIRST-4)	 );
		__QCMP_STATIC_CONSTANT( int, TVN_SETDISPINFOW        = (TVN_FIRST-53) );
		__QCMP_STATIC_CONSTANT( int, TVN_ITEMEXPANDINGA      = (TVN_FIRST-5)	 );
		__QCMP_STATIC_CONSTANT( int, TVN_ITEMEXPANDINGW      = (TVN_FIRST-54) );
		__QCMP_STATIC_CONSTANT( int, TVN_ITEMEXPANDEDA       = (TVN_FIRST-6)	 );
		__QCMP_STATIC_CONSTANT( int, TVN_ITEMEXPANDEDW       = (TVN_FIRST-55) );
		__QCMP_STATIC_CONSTANT( int, TVN_BEGINDRAGA          = (TVN_FIRST-7)	 );
		__QCMP_STATIC_CONSTANT( int, TVN_BEGINDRAGW          = (TVN_FIRST-56) );
		__QCMP_STATIC_CONSTANT( int, TVN_BEGINRDRAGA         = (TVN_FIRST-8)	 );
		__QCMP_STATIC_CONSTANT( int, TVN_BEGINRDRAGW         = (TVN_FIRST-57) );
		__QCMP_STATIC_CONSTANT( int, TVN_DELETEITEMA         = (TVN_FIRST-9)	 );
		__QCMP_STATIC_CONSTANT( int, TVN_DELETEITEMW         = (TVN_FIRST-58) );
		__QCMP_STATIC_CONSTANT( int, TVN_BEGINLABELEDITA     = (TVN_FIRST-10) );
		__QCMP_STATIC_CONSTANT( int, TVN_BEGINLABELEDITW     = (TVN_FIRST-59) );
		__QCMP_STATIC_CONSTANT( int, TVN_ENDLABELEDITA       = (TVN_FIRST-11) );
		__QCMP_STATIC_CONSTANT( int, TVN_ENDLABELEDITW       = (TVN_FIRST-60) );
		__QCMP_STATIC_CONSTANT( int, TVN_KEYDOWN             = (TVN_FIRST-12) );
		__QCMP_STATIC_CONSTANT( int, TVN_GETINFOTIPA         = (TVN_FIRST-13) );
		__QCMP_STATIC_CONSTANT( int, TVN_GETINFOTIPW         = (TVN_FIRST-14) );
		__QCMP_STATIC_CONSTANT( int, TVN_SINGLEEXPAND        = (TVN_FIRST-15) );
		__QCMP_STATIC_CONSTANT( int, TVN_ITEMCHANGINGA       = (TVN_FIRST-16) );
		__QCMP_STATIC_CONSTANT( int, TVN_ITEMCHANGINGW       = (TVN_FIRST-17) );
		__QCMP_STATIC_CONSTANT( int, TVN_ITEMCHANGEDA        = (TVN_FIRST-18) );
		__QCMP_STATIC_CONSTANT( int, TVN_ITEMCHANGEDW        = (TVN_FIRST-19) );
		__QCMP_STATIC_CONSTANT( int, TVN_ASYNCDRAW           = (TVN_FIRST-20) );

#ifdef UNICODE
#	define TVN_SELCHANGING         TVN_SELCHANGINGW
#	define TVN_SELCHANGED          TVN_SELCHANGEDW
#	define TVN_GETDISPINFO         TVN_GETDISPINFOW
#	define TVN_SETDISPINFO         TVN_SETDISPINFOW
#	define TVN_ITEMEXPANDING       TVN_ITEMEXPANDINGW
#	define TVN_ITEMEXPANDED        TVN_ITEMEXPANDEDW
#	define TVN_BEGINDRAG           TVN_BEGINDRAGW
#	define TVN_BEGINRDRAG          TVN_BEGINRDRAGW
#	define TVN_DELETEITEM          TVN_DELETEITEMW
#	define TVN_BEGINLABELEDIT      TVN_BEGINLABELEDITW
#	define TVN_ENDLABELEDIT        TVN_ENDLABELEDITW
#	define TVN_GETINFOTIP          TVN_GETINFOTIPW
#	define TVN_ITEMCHANGING        TVN_ITEMCHANGINGW
#	define TVN_ITEMCHANGED         TVN_ITEMCHANGEDW
#else
#	define TVN_SELCHANGING         TVN_SELCHANGINGA
#	define TVN_SELCHANGED          TVN_SELCHANGEDA
#	define TVN_GETDISPINFO         TVN_GETDISPINFOA
#	define TVN_SETDISPINFO         TVN_SETDISPINFOA
#	define TVN_ITEMEXPANDING       TVN_ITEMEXPANDINGA
#	define TVN_ITEMEXPANDED        TVN_ITEMEXPANDEDA
#	define TVN_BEGINDRAG           TVN_BEGINDRAGA
#	define TVN_BEGINRDRAG          TVN_BEGINRDRAGA
#	define TVN_DELETEITEM          TVN_DELETEITEMA
#	define TVN_BEGINLABELEDIT      TVN_BEGINLABELEDITA
#	define TVN_ENDLABELEDIT        TVN_ENDLABELEDITA
#	define TVN_GETINFOTIP          TVN_GETINFOTIPA
#	define TVN_ITEMCHANGING        TVN_ITEMCHANGINGA
#	define TVN_ITEMCHANGED         TVN_ITEMCHANGEDA
#endif

		//Messages
		__QCMP_STATIC_CONSTANT( int, TV_FIRST						= 0x1100 );
		__QCMP_STATIC_CONSTANT( int, TVM_INSERTITEMA					= (TV_FIRST + 0)  );
		__QCMP_STATIC_CONSTANT( int, TVM_DELETEITEM					= (TV_FIRST + 1)  );
		__QCMP_STATIC_CONSTANT( int, TVM_EXPAND						= (TV_FIRST + 2)  );
		__QCMP_STATIC_CONSTANT( int, TVM_GETITEMRECT					= (TV_FIRST + 4)  );
		__QCMP_STATIC_CONSTANT( int, TVM_GETCOUNT					= (TV_FIRST + 5)  );
		__QCMP_STATIC_CONSTANT( int, TVM_GETINDENT					= (TV_FIRST + 6)  );
		__QCMP_STATIC_CONSTANT( int, TVM_SETINDENT					= (TV_FIRST + 7)  );
		__QCMP_STATIC_CONSTANT( int, TVM_GETIMAGELIST				= (TV_FIRST + 8)  );
		__QCMP_STATIC_CONSTANT( int, TVM_SETIMAGELIST				= (TV_FIRST + 9)  );
		__QCMP_STATIC_CONSTANT( int, TVM_GETNEXTITEM					= (TV_FIRST + 10) );
		__QCMP_STATIC_CONSTANT( int, TVM_SELECTITEM					= (TV_FIRST + 11) );
		__QCMP_STATIC_CONSTANT( int, TVM_GETITEMA					= (TV_FIRST + 12) );
		__QCMP_STATIC_CONSTANT( int, TVM_SETITEMA					= (TV_FIRST + 13) );
		__QCMP_STATIC_CONSTANT( int, TVM_EDITLABELA					= (TV_FIRST + 14) );
		__QCMP_STATIC_CONSTANT( int, TVM_GETEDITCONTROL				= (TV_FIRST + 15) );
		__QCMP_STATIC_CONSTANT( int, TVM_GETVISIBLECOUNT				= (TV_FIRST + 16) );
		__QCMP_STATIC_CONSTANT( int, TVM_HITTEST						= (TV_FIRST + 17) );
		__QCMP_STATIC_CONSTANT( int, TVM_CREATEDRAGIMAGE				= (TV_FIRST + 18) );
		__QCMP_STATIC_CONSTANT( int, TVM_SORTCHILDREN				= (TV_FIRST + 19) );
		__QCMP_STATIC_CONSTANT( int, TVM_ENSUREVISIBLE				= (TV_FIRST + 20) );
		__QCMP_STATIC_CONSTANT( int, TVM_SORTCHILDRENCB				= (TV_FIRST + 21) );
		__QCMP_STATIC_CONSTANT( int, TVM_ENDEDITLABELNOW				= (TV_FIRST + 22) );
		__QCMP_STATIC_CONSTANT( int, TVM_GETISEARCHSTRINGA			= (TV_FIRST + 23) );
		__QCMP_STATIC_CONSTANT( int, TVM_SETTOOLTIPS					= (TV_FIRST + 24) );
		__QCMP_STATIC_CONSTANT( int, TVM_GETTOOLTIPS					= (TV_FIRST + 25) );
		__QCMP_STATIC_CONSTANT( int, TVM_SETINSERTMARK				= (TV_FIRST + 26) );
		__QCMP_STATIC_CONSTANT( int, TVM_SETITEMHEIGHT				= (TV_FIRST + 27) );
		__QCMP_STATIC_CONSTANT( int, TVM_GETITEMHEIGHT				= (TV_FIRST + 28) );
		__QCMP_STATIC_CONSTANT( int, TVM_SETBKCOLOR					= (TV_FIRST + 29) );
		__QCMP_STATIC_CONSTANT( int, TVM_SETTEXTCOLOR				= (TV_FIRST + 30) );
		__QCMP_STATIC_CONSTANT( int, TVM_GETBKCOLOR					= (TV_FIRST + 31) );
		__QCMP_STATIC_CONSTANT( int, TVM_GETTEXTCOLOR				= (TV_FIRST + 32) );
		__QCMP_STATIC_CONSTANT( int, TVM_SETSCROLLTIME				= (TV_FIRST + 33) );
		__QCMP_STATIC_CONSTANT( int, TVM_GETSCROLLTIME				= (TV_FIRST + 34) );
		__QCMP_STATIC_CONSTANT( int, TVM_SETINSERTMARKCOLOR          = (TV_FIRST + 37) );
		__QCMP_STATIC_CONSTANT( int, TVM_GETINSERTMARKCOLOR          = (TV_FIRST + 38) );
		__QCMP_STATIC_CONSTANT( int, TVM_GETITEMSTATE				= (TV_FIRST + 39) );
		__QCMP_STATIC_CONSTANT( int, TVM_SETLINECOLOR				= (TV_FIRST + 40) );
		__QCMP_STATIC_CONSTANT( int, TVM_GETLINECOLOR				= (TV_FIRST + 41) );
		__QCMP_STATIC_CONSTANT( int, TVM_MAPACCIDTOHTREEITEM			= (TV_FIRST + 42) );
		__QCMP_STATIC_CONSTANT( int, TVM_MAPHTREEITEMTOACCID			= (TV_FIRST + 43) );
		__QCMP_STATIC_CONSTANT( int, TVM_SETEXTENDEDSTYLE			= (TV_FIRST + 44) );
		__QCMP_STATIC_CONSTANT( int, TVM_GETEXTENDEDSTYLE			= (TV_FIRST + 45) );
		__QCMP_STATIC_CONSTANT( int, TVM_INSERTITEMW					= (TV_FIRST + 50) );
		__QCMP_STATIC_CONSTANT( int, TVM_SETAUTOSCROLLINFO			= (TV_FIRST + 59) );
		__QCMP_STATIC_CONSTANT( int, TVM_GETITEMW					= (TV_FIRST + 62) );
		__QCMP_STATIC_CONSTANT( int, TVM_SETITEMW					= (TV_FIRST + 63) );
		__QCMP_STATIC_CONSTANT( int, TVM_GETISEARCHSTRINGW			= (TV_FIRST + 64) );
		__QCMP_STATIC_CONSTANT( int, TVM_EDITLABELW					= (TV_FIRST + 65) );
		__QCMP_STATIC_CONSTANT( int, TVM_GETSELECTEDCOUNT			= (TV_FIRST + 70) );
		__QCMP_STATIC_CONSTANT( int, TVM_SHOWINFOTIP					= (TV_FIRST + 71) );
		__QCMP_STATIC_CONSTANT( int, TVM_GETITEMPARTRECT				= (TV_FIRST + 72) );

#ifdef UNICODE
#	define  TVM_INSERTITEM         TVM_INSERTITEMW
#	define  TVM_GETITEM            TVM_GETITEMW
#	define  TVM_SETITEM            TVM_SETITEMW
#	define TVM_EDITLABEL           TVM_EDITLABELW
#	define TVM_GETISEARCHSTRING     TVM_GETISEARCHSTRINGW
#else
#	define  TVM_INSERTITEM         TVM_INSERTITEMA
#	define  TVM_GETITEM            TVM_GETITEMA
#	define  TVM_SETITEM            TVM_SETITEMA
#	define TVM_EDITLABEL           TVM_EDITLABELA
#	define TVM_GETISEARCHSTRING     TVM_GETISEARCHSTRINGA
#endif

#define TVM_SETUNICODEFORMAT     CCM_SETUNICODEFORMAT
#define TVM_GETUNICODEFORMAT     CCM_GETUNICODEFORMAT

		__QOR_DECLARE_OCLASS_ID( CTreeView );

		CTreeView();
		virtual ~CTreeView();
		virtual long OnNotify( NotificationMessageHeader* pHdr );

		virtual bool OnClick( NotificationMessageHeader* pHdr );
		virtual long OnCustomDraw( NMTVCUSTOMDRAW* pHdr );
		virtual bool OnDblClick( NotificationMessageHeader* pHdr );
		virtual void OnKillFocus( NotificationMessageHeader* pHdr );
		virtual bool OnRClick( NotificationMessageHeader* pHdr );
		virtual bool OnRDblClick( NotificationMessageHeader* pHdr );
		virtual bool OnReturn( NotificationMessageHeader* pHdr );
		virtual bool OnSetCursor( NMMOUSE* pHdr );
		virtual void OnSetFocus( NotificationMessageHeader* pHdr );
		virtual void OnAsyncDraw( NMTVASYNCDRAW* pHdr );
		virtual void OnBeginDrag( NMTREEVIEW* pHdr );
		virtual bool OnBeginLabelEdit( NMTVDISPINFO* pHdr );
		virtual void OnBeginRDrag( NMTREEVIEW* pHdr );
		virtual void OnDeleteItem( NMTREEVIEW* pHdr );
		virtual bool OnEndLabelEdit( NMTVDISPINFO* pHdr );
		virtual void OnGetDispInfo( NMTVDISPINFO* pHdr );
		virtual void OnGetInfoTip( NMTVGETINFOTIP* pHdr );
		virtual bool OnItemChanged( NMTVITEMCHANGE* pHdr );
		virtual bool OnItemChanging( NMTVITEMCHANGE* pHdr );
		virtual void OnItemExpanded( NMTREEVIEW* pHdr );
		virtual bool OnItemExpanding( NMTREEVIEW* pHdr );
		virtual bool OnKeyDown( NMTVKEYDOWN* pHdr );
		virtual void OnSelChanged( NMTREEVIEW* pHdr );
		virtual bool OnSelChanging( NMTREEVIEW* pHdr );
		virtual void OnSetDispInfo( NMTVDISPINFO* pHdr );
		virtual long OnSingleExpand( NMTREEVIEW* pHdr );
		virtual long OnUnknownNotification( NotificationMessageHeader* pHdr );

		CImageList::refType CreateDragImage( HTREEITEM hItem );
		bool DeleteItem( HTREEITEM hItem );
		COSWindow::refType EditLabel( HTREEITEM hItem );
		bool EndEditLabelNow( bool bCancel );
		bool EnsureVisible( HTREEITEM hItem );
		bool EnsureVisible( unsigned int uiFlag, HTREEITEM hItem );
		unsigned long GetBkColour();
		long GetCount();
		COSWindow::refType GetEditControl();
		long GetExtendedStyle();
		CImageList::refType GetImageList( int iImageList );
		long GetIndent();
		unsigned long GetInsertMarkColour();
		long GetIncrementalSearchString( char* strBuffer );
		bool GetItem( TVITEMEX& Item );
		long GetItemHeight();
		bool GetItemRect( bool bItemOnly, CRectangle& rcItem );
		long GetItemState( HTREEITEM hItem, unsigned int uiStateMask );
		unsigned long GetLineColour();
		HTREEITEM GetNextItem( HTREEITEM hItem, unsigned int uiFlag );
		long GetScrollTime();
		unsigned long GetTextColour();
		COSWindow::refType GetToolTips();
		bool GetUnicodeFormat();
		long GetVisibleCount();
		HTREEITEM HitTest( TVHITTESTINFO& HitTestInfo );
		HTREEITEM InsertItem( TVINSERTSTRUCT& Insert );
		HTREEITEM MapAccIdToItem( unsigned int uiID );
		unsigned int MapItemToAccId( HTREEITEM hItem );
		bool SelectItem( unsigned long dwFlags, HTREEITEM hItem );
		void SetAutoScrollInfo( Cmp_uint_ptr uPixPerSec, Cmp_long_ptr uUpdateTime );
		unsigned long SetBkColour( unsigned long bkClr );
		long SetExtendedStyle( unsigned int uiExStyle );
		CImageList::refType SetImageList( int iList, CImageList::refType hImageList );
		void SetIndent( int iIndent );
		bool SetInsertMark( bool bAfter, HTREEITEM hItem );
		unsigned long SetInsertMarkColour( unsigned long clrInsertMark );
		bool SetItem( TVITEMEX& Item );
		long SetItemHeight( short sItemHeight );
		unsigned long SetLineColour( unsigned long clrText );
		long SetScrollTime( unsigned int uiMilliseconds );
		unsigned long SetTextColour( unsigned long clrText );
		COSWindow::refType SetToolTips( COSWindow::refType hToolTips );
		bool SetUnicodeFormat( bool bUnicode );
		void ShowInfoTip( HTREEITEM hItem );
		bool SortChildren( HTREEITEM hItem, bool bRecurse );
		bool SortChildrenWithCallback( TVSORTCB& SortCB, bool bRecurse );

	};

	//--------------------------------------------------------------------------------		
	class __QOR_INTERFACE( __WINQL_GUI ) CTreeViewFactory : public CCommonCtrlFactory< CTreeView >
	{
	public:

		__QCMP_STATIC_CONSTANT( int, TVS_HASBUTTONS          = 0x0001 );
		__QCMP_STATIC_CONSTANT( int, TVS_HASLINES            = 0x0002 );
		__QCMP_STATIC_CONSTANT( int, TVS_LINESATROOT         = 0x0004 );
		__QCMP_STATIC_CONSTANT( int, TVS_EDITLABELS          = 0x0008 );
		__QCMP_STATIC_CONSTANT( int, TVS_DISABLEDRAGDROP     = 0x0010 );
		__QCMP_STATIC_CONSTANT( int, TVS_SHOWSELALWAYS       = 0x0020 );
#if		(_WIN32_IE >= 0x0300)
		__QCMP_STATIC_CONSTANT( int, TVS_RTLREADING          = 0x0040 );

		__QCMP_STATIC_CONSTANT( int, TVS_NOTOOLTIPS          = 0x0080 );
		__QCMP_STATIC_CONSTANT( int, TVS_CHECKBOXES          = 0x0100 );
		__QCMP_STATIC_CONSTANT( int, TVS_TRACKSELECT         = 0x0200 );
#if (_WIN32_IE >= 0x0400)
		__QCMP_STATIC_CONSTANT( int, TVS_SINGLEEXPAND        = 0x0400 );
		__QCMP_STATIC_CONSTANT( int, TVS_INFOTIP             = 0x0800 );
		__QCMP_STATIC_CONSTANT( int, TVS_FULLROWSELECT       = 0x1000 );
		__QCMP_STATIC_CONSTANT( int, TVS_NOSCROLL            = 0x2000 );
		__QCMP_STATIC_CONSTANT( int, TVS_NONEVENHEIGHT       = 0x4000 );
#endif
#if (_WIN32_IE >= 0x500)
		__QCMP_STATIC_CONSTANT( int, TVS_NOHSCROLL           = 0x8000 ); // TVS_NOSCROLL overrides this
#endif
#endif//(_WIN32_IE >= 0x0300)

#if (_WIN32_WINNT >= 0x0600)
		__QCMP_STATIC_CONSTANT( int, TVS_EX_MULTISELECT          = 0x0002 );
		__QCMP_STATIC_CONSTANT( int, TVS_EX_DOUBLEBUFFER         = 0x0004 );
		__QCMP_STATIC_CONSTANT( int, TVS_EX_NOINDENTSTATE        = 0x0008 );
		__QCMP_STATIC_CONSTANT( int, TVS_EX_RICHTOOLTIP          = 0x0010 );
		__QCMP_STATIC_CONSTANT( int, TVS_EX_AUTOHSCROLL          = 0x0020 );
		__QCMP_STATIC_CONSTANT( int, TVS_EX_FADEINOUTEXPANDOS    = 0x0040 );
		__QCMP_STATIC_CONSTANT( int, TVS_EX_PARTIALCHECKBOXES    = 0x0080 );
		__QCMP_STATIC_CONSTANT( int, TVS_EX_EXCLUSIONCHECKBOXES  = 0x0100 );
		__QCMP_STATIC_CONSTANT( int, TVS_EX_DIMMEDCHECKBOXES     = 0x0200 );
		__QCMP_STATIC_CONSTANT( int, TVS_EX_DRAWIMAGEASYNC       = 0x0400 );
#endif

		__QOR_DECLARE_OCLASS_ID( CTreeViewFactory );

		CTreeViewFactory();
		bool GetHasButtons();
		void SetHasButtons( bool bFlag );
		bool GetHasLines();
		void SetHasLines( bool bFlag );
		bool GetLinesAtRoot();
		void SetLinesAtRoot( bool bFlag );
		bool GetEditLabels();
		void SetEditLabels( bool bFlag );
		bool GetDisableDragDrop();
		void SetDisableDragDrop( bool bFlag );
		bool GetShowSelAlways();
		void SetShowSelAlways( bool bFlag );
		bool GetRTLReading();
		void SetRTLReading( bool bFlag );
		bool GetNoToolTips();
		void SetNoToolTips( bool bFlag );
		bool GetCheckBoxes();
		void SetCheckBoxes( bool bFlag );
		bool GetTrackSelect();
		void SetTrackSelect( bool bFlag );
		bool GetSingleExpand();
		void SetSingleExpand( bool bFlag );
		bool GetInfoTip();
		void SetInfoTip( bool bFlag );
		bool GetFullRowSelect();
		void SetFullRowSelect( bool bFlag );
		bool GetNoScroll();
		void SetNoScroll( bool bFlag );
		bool GetNonEvenHeight();
		void SetNonEvenHeight( bool bFlag );
		bool GetNoHScoll();
		void SetNoHScoll( bool bFlag );

	};

}//nsWin32

#endif//WINQL_GUI_WND_CCTRL_TREEVIEW_H_3
