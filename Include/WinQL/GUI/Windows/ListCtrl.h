//ListCtrl.h

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//List Common Control Window

#ifndef WINQL_GUI_WND_CCTRL_LIST_H_3
#define WINQL_GUI_WND_CCTRL_LIST_H_3

#include "WinQL/GUI/Views/WindowView.h"
#include "WinQL/GUI/Windows/WinCtrlWindow.h"
#include "WinQL/GUI/WindowFactory.h"
#include "WinQL/GUI/CommonCtrl.h"
#include "WinQL/Application/Graphics/WinQLRectangle.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CListCtrlClass : public CWindowClass
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CListCtrlClass );

		CListCtrlClass();
		~CListCtrlClass();
		virtual bool Preregistered();
		const TCHAR* Name();

	private:

		CCommonCtrl m_ComCtrl32;

		CListCtrlClass( const CListCtrlClass& );
		CListCtrlClass& operator = ( const CListCtrlClass& );

	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CListCtrl : public CWinCtrlWindow
	{
	public:

		typedef int ( __QCMP_STDCALLCONVENTION *PFNLVCOMPARE )( Cmp_long_ptr, Cmp_long_ptr, Cmp_long_ptr );
		typedef int ( __QCMP_STDCALLCONVENTION *PFNLVGROUPCOMPARE )( int, int, void* );

		__QCMP_STATIC_CONSTANT( int, LVN_FIRST               = (0U-100U) );
		__QCMP_STATIC_CONSTANT( int, LVN_LAST                = (0U-199U) );

		//Notifications
		__QCMP_STATIC_CONSTANT( int, LVN_ITEMCHANGING        = ( LVN_FIRST - 0 ) );
		__QCMP_STATIC_CONSTANT( int, LVN_ITEMCHANGED         = ( LVN_FIRST - 1 ) );
		__QCMP_STATIC_CONSTANT( int, LVN_INSERTITEM          = ( LVN_FIRST - 2 ) );
		__QCMP_STATIC_CONSTANT( int, LVN_DELETEITEM          = ( LVN_FIRST - 3 ) );
		__QCMP_STATIC_CONSTANT( int, LVN_DELETEALLITEMS      = ( LVN_FIRST - 4 ) );
		__QCMP_STATIC_CONSTANT( int, LVN_BEGINLABELEDITA     = ( LVN_FIRST - 5 ) );
		__QCMP_STATIC_CONSTANT( int, LVN_BEGINLABELEDITW     = ( LVN_FIRST - 75 ) );
		__QCMP_STATIC_CONSTANT( int, LVN_ENDLABELEDITA       = ( LVN_FIRST - 6 ) );
		__QCMP_STATIC_CONSTANT( int, LVN_ENDLABELEDITW       = ( LVN_FIRST - 76 ) );
		__QCMP_STATIC_CONSTANT( int, LVN_COLUMNCLICK         = ( LVN_FIRST - 8 ) );
		__QCMP_STATIC_CONSTANT( int, LVN_BEGINDRAG           = ( LVN_FIRST - 9 ) );
		__QCMP_STATIC_CONSTANT( int, LVN_BEGINRDRAG          = ( LVN_FIRST - 11 ) );
		__QCMP_STATIC_CONSTANT( int, LVN_ODCACHEHINT         = ( LVN_FIRST - 13 ) );
		__QCMP_STATIC_CONSTANT( int, LVN_ODFINDITEMA         = ( LVN_FIRST - 52 ) );
		__QCMP_STATIC_CONSTANT( int, LVN_ODFINDITEMW         = ( LVN_FIRST - 79 ) );
		__QCMP_STATIC_CONSTANT( int, LVN_ITEMACTIVATE        = ( LVN_FIRST - 14 ) );
		__QCMP_STATIC_CONSTANT( int, LVN_ODSTATECHANGED      = ( LVN_FIRST - 15 ) );
		__QCMP_STATIC_CONSTANT( int, LVN_HOTTRACK            = ( LVN_FIRST - 21 ) );
		__QCMP_STATIC_CONSTANT( int, LVN_GETDISPINFOA        = ( LVN_FIRST - 50 ) );
		__QCMP_STATIC_CONSTANT( int, LVN_GETDISPINFOW        = ( LVN_FIRST - 77 ) );
		__QCMP_STATIC_CONSTANT( int, LVN_SETDISPINFOA        = ( LVN_FIRST - 51 ) );
		__QCMP_STATIC_CONSTANT( int, LVN_SETDISPINFOW        = ( LVN_FIRST - 78 ) );
		__QCMP_STATIC_CONSTANT( int, LVN_KEYDOWN             = ( LVN_FIRST - 55 ) );
		__QCMP_STATIC_CONSTANT( int, LVN_MARQUEEBEGIN        = ( LVN_FIRST - 56 ) );
		__QCMP_STATIC_CONSTANT( int, LVN_GETINFOTIPA          = ( LVN_FIRST - 57 ) );
		__QCMP_STATIC_CONSTANT( int, LVN_GETINFOTIPW          = ( LVN_FIRST - 58 ) );
		__QCMP_STATIC_CONSTANT( int, LVN_INCREMENTALSEARCHA   = ( LVN_FIRST - 62 ) );
		__QCMP_STATIC_CONSTANT( int, LVN_INCREMENTALSEARCHW   = ( LVN_FIRST - 63 ) );
		__QCMP_STATIC_CONSTANT( int, LVN_COLUMNDROPDOWN       = ( LVN_FIRST - 64 ) );
		__QCMP_STATIC_CONSTANT( int, LVN_COLUMNOVERFLOWCLICK  = ( LVN_FIRST - 66 ) );
		__QCMP_STATIC_CONSTANT( int, LVN_BEGINSCROLL          = ( LVN_FIRST - 80 ) );
		__QCMP_STATIC_CONSTANT( int, LVN_ENDSCROLL            = ( LVN_FIRST - 81 ) );
		__QCMP_STATIC_CONSTANT( int, LVN_LINKCLICK           = ( LVN_FIRST - 84 ) );
		__QCMP_STATIC_CONSTANT( int, LVN_GETEMPTYMARKUP      = ( LVN_FIRST - 87 ) );

#ifdef UNICODE
#	define LVN_BEGINLABELEDIT      LVN_BEGINLABELEDITW
#	define LVN_ENDLABELEDIT        LVN_ENDLABELEDITW
#	define LVN_GETDISPINFO         LVN_GETDISPINFOW
#	define LVN_SETDISPINFO         LVN_SETDISPINFOW
#	define LVN_ODFINDITEM          LVN_ODFINDITEMW
#	define LVN_INCREMENTALSEARCH   LVN_INCREMENTALSEARCHW
#	define LVN_GETINFOTIP          LVN_GETINFOTIPW
#else
#	define LVN_BEGINLABELEDIT      LVN_BEGINLABELEDITA
#	define LVN_ENDLABELEDIT        LVN_ENDLABELEDITA
#	define LVN_GETDISPINFO         LVN_GETDISPINFOA
#	define LVN_SETDISPINFO         LVN_SETDISPINFOA
#	define LVN_ODFINDITEM          LVN_ODFINDITEMA
#	define LVN_INCREMENTALSEARCH   LVN_INCREMENTALSEARCHA
#	define LVN_GETINFOTIP          LVN_GETINFOTIPA
#endif

		//Messages
		__QCMP_STATIC_CONSTANT( int, L_MAX_URL_LENGTH    = (2048 + 32 + sizeof("://")) );
		__QCMP_STATIC_CONSTANT( int, MAX_LINKID_TEXT     = 48 );

		__QCMP_STATIC_CONSTANT( int, LVM_FIRST               = 0x1000 );      // ListView messages
		__QCMP_STATIC_CONSTANT( int, LVM_GETBKCOLOR          = (LVM_FIRST + 0)  );
		__QCMP_STATIC_CONSTANT( int, LVM_SETBKCOLOR          = (LVM_FIRST + 1)  );
		__QCMP_STATIC_CONSTANT( int, LVM_GETIMAGELIST        = (LVM_FIRST + 2)  );
		__QCMP_STATIC_CONSTANT( int, LVM_SETIMAGELIST        = (LVM_FIRST + 3)  );
		__QCMP_STATIC_CONSTANT( int, LVM_GETITEMCOUNT        = (LVM_FIRST + 4)  );
		__QCMP_STATIC_CONSTANT( int, LVM_GETITEMA            = (LVM_FIRST + 5)  );
		__QCMP_STATIC_CONSTANT( int, LVM_GETITEMW            = (LVM_FIRST + 75) );
		__QCMP_STATIC_CONSTANT( int, LVM_SETITEMA            = (LVM_FIRST + 6)  );
		__QCMP_STATIC_CONSTANT( int, LVM_SETITEMW            = (LVM_FIRST + 76) );
		__QCMP_STATIC_CONSTANT( int, LVM_INSERTITEMA         = (LVM_FIRST + 7)  );
		__QCMP_STATIC_CONSTANT( int, LVM_INSERTITEMW         = (LVM_FIRST + 77) );
		__QCMP_STATIC_CONSTANT( int, LVM_DELETEITEM          = (LVM_FIRST + 8)  );
		__QCMP_STATIC_CONSTANT( int, LVM_DELETEALLITEMS      = (LVM_FIRST + 9)  );
		__QCMP_STATIC_CONSTANT( int, LVM_GETCALLBACKMASK     = (LVM_FIRST + 10) );
		__QCMP_STATIC_CONSTANT( int, LVM_SETCALLBACKMASK     = (LVM_FIRST + 11) );
		__QCMP_STATIC_CONSTANT( int, LVM_GETNEXTITEM         = (LVM_FIRST + 12) );
		__QCMP_STATIC_CONSTANT( int, LVM_FINDITEMA           = (LVM_FIRST + 13) );
		__QCMP_STATIC_CONSTANT( int, LVM_FINDITEMW           = (LVM_FIRST + 83) );
		__QCMP_STATIC_CONSTANT( int, LVM_GETITEMRECT         = (LVM_FIRST + 14) );
		__QCMP_STATIC_CONSTANT( int, LVM_SETITEMPOSITION     = (LVM_FIRST + 15) );
		__QCMP_STATIC_CONSTANT( int, LVM_GETITEMPOSITION     = (LVM_FIRST + 16) );
		__QCMP_STATIC_CONSTANT( int, LVM_GETSTRINGWIDTHA     = (LVM_FIRST + 17) );
		__QCMP_STATIC_CONSTANT( int, LVM_GETSTRINGWIDTHW     = (LVM_FIRST + 87) );
		__QCMP_STATIC_CONSTANT( int, LVM_HITTEST             = (LVM_FIRST + 18) );
		__QCMP_STATIC_CONSTANT( int, LVM_ENSUREVISIBLE       = (LVM_FIRST + 19) );
		__QCMP_STATIC_CONSTANT( int, LVM_SCROLL              = (LVM_FIRST + 20) );
		__QCMP_STATIC_CONSTANT( int, LVM_REDRAWITEMS         = (LVM_FIRST + 21) );
		__QCMP_STATIC_CONSTANT( int, LVM_ARRANGE             = (LVM_FIRST + 22) );
		__QCMP_STATIC_CONSTANT( int, LVM_EDITLABELA          = (LVM_FIRST + 23) );
		__QCMP_STATIC_CONSTANT( int, LVM_EDITLABELW          = (LVM_FIRST + 118));
		__QCMP_STATIC_CONSTANT( int, LVM_GETEDITCONTROL      = (LVM_FIRST + 24) );
		__QCMP_STATIC_CONSTANT( int, LVM_GETCOLUMNA          = (LVM_FIRST + 25) );
		__QCMP_STATIC_CONSTANT( int, LVM_GETCOLUMNW          = (LVM_FIRST + 95) );
		__QCMP_STATIC_CONSTANT( int, LVM_SETCOLUMNA          = (LVM_FIRST + 26) );
		__QCMP_STATIC_CONSTANT( int, LVM_SETCOLUMNW          = (LVM_FIRST + 96) );
		__QCMP_STATIC_CONSTANT( int, LVM_INSERTCOLUMNA       = (LVM_FIRST + 27) );
		__QCMP_STATIC_CONSTANT( int, LVM_INSERTCOLUMNW       = (LVM_FIRST + 97) );
		__QCMP_STATIC_CONSTANT( int, LVM_DELETECOLUMN        = (LVM_FIRST + 28) );
		__QCMP_STATIC_CONSTANT( int, LVM_GETCOLUMNWIDTH      = (LVM_FIRST + 29) );
		__QCMP_STATIC_CONSTANT( int, LVM_SETCOLUMNWIDTH      = (LVM_FIRST + 30) );
		__QCMP_STATIC_CONSTANT( int, LVM_GETHEADER           = (LVM_FIRST + 31) );
																
		__QCMP_STATIC_CONSTANT( int, LVM_CREATEDRAGIMAGE     = (LVM_FIRST + 33)  );
		__QCMP_STATIC_CONSTANT( int, LVM_GETVIEWRECT         = (LVM_FIRST + 34)  );
		__QCMP_STATIC_CONSTANT( int, LVM_GETTEXTCOLOR        = (LVM_FIRST + 35)  );
		__QCMP_STATIC_CONSTANT( int, LVM_SETTEXTCOLOR        = (LVM_FIRST + 36)  );
		__QCMP_STATIC_CONSTANT( int, LVM_GETTEXTBKCOLOR      = (LVM_FIRST + 37)  );
		__QCMP_STATIC_CONSTANT( int, LVM_SETTEXTBKCOLOR      = (LVM_FIRST + 38)  );
		__QCMP_STATIC_CONSTANT( int, LVM_GETTOPINDEX         = (LVM_FIRST + 39)  );
		__QCMP_STATIC_CONSTANT( int, LVM_GETCOUNTPERPAGE     = (LVM_FIRST + 40)  );
		__QCMP_STATIC_CONSTANT( int, LVM_GETORIGIN           = (LVM_FIRST + 41)  );
		__QCMP_STATIC_CONSTANT( int, LVM_UPDATE              = (LVM_FIRST + 42)  );
		__QCMP_STATIC_CONSTANT( int, LVM_SETITEMSTATE        = (LVM_FIRST + 43)  );
		__QCMP_STATIC_CONSTANT( int, LVM_GETITEMSTATE        = (LVM_FIRST + 44)  );
		__QCMP_STATIC_CONSTANT( int, LVM_GETITEMTEXTA        = (LVM_FIRST + 45)  );
		__QCMP_STATIC_CONSTANT( int, LVM_GETITEMTEXTW        = (LVM_FIRST + 115) );
		__QCMP_STATIC_CONSTANT( int, LVM_SETITEMTEXTA        = (LVM_FIRST + 46)  );
		__QCMP_STATIC_CONSTANT( int, LVM_SETITEMTEXTW        = (LVM_FIRST + 116) );
		__QCMP_STATIC_CONSTANT( int, LVM_SETITEMCOUNT        = (LVM_FIRST + 47)  );
		__QCMP_STATIC_CONSTANT( int, LVM_SORTITEMS           = (LVM_FIRST + 48)  );
		__QCMP_STATIC_CONSTANT( int, LVM_SETITEMPOSITION32   = (LVM_FIRST + 49)  );
		__QCMP_STATIC_CONSTANT( int, LVM_GETSELECTEDCOUNT    = (LVM_FIRST + 50)  );
		__QCMP_STATIC_CONSTANT( int, LVM_GETITEMSPACING      = (LVM_FIRST + 51)  );
		__QCMP_STATIC_CONSTANT( int, LVM_GETISEARCHSTRINGA   = (LVM_FIRST + 52)  );
		__QCMP_STATIC_CONSTANT( int, LVM_GETISEARCHSTRINGW   = (LVM_FIRST + 117) );
		__QCMP_STATIC_CONSTANT( int, LVM_SETICONSPACING      = (LVM_FIRST + 53)  );
		__QCMP_STATIC_CONSTANT( int, LVM_SETEXTENDEDLISTVIEWSTYLE = (LVM_FIRST + 54) );   // optional wParam == mask
		__QCMP_STATIC_CONSTANT( int, LVM_GETEXTENDEDLISTVIEWSTYLE = (LVM_FIRST + 55) );
		__QCMP_STATIC_CONSTANT( int, LVM_GETSUBITEMRECT      = (LVM_FIRST + 56) );
		__QCMP_STATIC_CONSTANT( int, LVM_SUBITEMHITTEST      = (LVM_FIRST + 57) );
		__QCMP_STATIC_CONSTANT( int, LVM_SETCOLUMNORDERARRAY = (LVM_FIRST + 58) );
		__QCMP_STATIC_CONSTANT( int, LVM_GETCOLUMNORDERARRAY = (LVM_FIRST + 59) );
		__QCMP_STATIC_CONSTANT( int, LVM_SETHOTITEM  = (LVM_FIRST + 60) );
		__QCMP_STATIC_CONSTANT( int, LVM_GETHOTITEM  = (LVM_FIRST + 61) );
		__QCMP_STATIC_CONSTANT( int, LVM_SETHOTCURSOR  = (LVM_FIRST + 62) );
		__QCMP_STATIC_CONSTANT( int, LVM_GETHOTCURSOR  = (LVM_FIRST + 63) );
		__QCMP_STATIC_CONSTANT( int, LVM_APPROXIMATEVIEWRECT = (LVM_FIRST + 64) );
		__QCMP_STATIC_CONSTANT( int, LVM_SETWORKAREAS        = (LVM_FIRST + 65) );
		__QCMP_STATIC_CONSTANT( int, LVM_GETSELECTIONMARK    = (LVM_FIRST + 66) );
		__QCMP_STATIC_CONSTANT( int, LVM_SETSELECTIONMARK    = (LVM_FIRST + 67) );
		__QCMP_STATIC_CONSTANT( int, LVM_SETBKIMAGEA         = (LVM_FIRST + 68) );
		__QCMP_STATIC_CONSTANT( int, LVM_SETBKIMAGEW         = (LVM_FIRST + 138) );
		__QCMP_STATIC_CONSTANT( int, LVM_GETBKIMAGEA         = (LVM_FIRST + 69) );
		__QCMP_STATIC_CONSTANT( int, LVM_GETBKIMAGEW         = (LVM_FIRST + 139) );

		__QCMP_STATIC_CONSTANT( int, LVM_GETWORKAREAS        = (LVM_FIRST + 70) );
		__QCMP_STATIC_CONSTANT( int, LVM_SETHOVERTIME        = (LVM_FIRST + 71) );
		__QCMP_STATIC_CONSTANT( int, LVM_GETHOVERTIME        = (LVM_FIRST + 72) );
		__QCMP_STATIC_CONSTANT( int, LVM_GETNUMBEROFWORKAREAS  = (LVM_FIRST + 73) );
		__QCMP_STATIC_CONSTANT( int, LVM_SETTOOLTIPS       = (LVM_FIRST + 74) );

		__QCMP_STATIC_CONSTANT( int, LVM_GETTOOLTIPS       = (LVM_FIRST + 78) );

		__QCMP_STATIC_CONSTANT( int, LVM_SORTITEMSEX          = (LVM_FIRST + 81) );

		__QCMP_STATIC_CONSTANT( int, LVM_GETGROUPSTATE        = (LVM_FIRST + 92) );
		__QCMP_STATIC_CONSTANT( int, LVM_GETFOCUSEDGROUP      = (LVM_FIRST + 93) );

		__QCMP_STATIC_CONSTANT( int, LVM_GETGROUPRECT         = (LVM_FIRST + 98) );

		__QCMP_STATIC_CONSTANT( int, LVM_SETSELECTEDCOLUMN    = (LVM_FIRST + 140) );

		__QCMP_STATIC_CONSTANT( int, LVM_SETVIEW				 = (LVM_FIRST + 142) );
		__QCMP_STATIC_CONSTANT( int, LVM_GETVIEW				 = (LVM_FIRST + 143) );

		__QCMP_STATIC_CONSTANT( int, LVM_INSERTGROUP          = (LVM_FIRST + 145) );

		__QCMP_STATIC_CONSTANT( int, LVM_SETGROUPINFO         = (LVM_FIRST + 147) );

		__QCMP_STATIC_CONSTANT( int, LVM_GETGROUPINFO         = (LVM_FIRST + 149) );
		__QCMP_STATIC_CONSTANT( int, LVM_REMOVEGROUP          = (LVM_FIRST + 150) );
		__QCMP_STATIC_CONSTANT( int, LVM_MOVEGROUP            = (LVM_FIRST + 151) );
		__QCMP_STATIC_CONSTANT( int, LVM_GETGROUPCOUNT        = (LVM_FIRST + 152) );
		__QCMP_STATIC_CONSTANT( int, LVM_GETGROUPINFOBYINDEX  = (LVM_FIRST + 153) );
		__QCMP_STATIC_CONSTANT( int, LVM_MOVEITEMTOGROUP      = (LVM_FIRST + 154) );
		__QCMP_STATIC_CONSTANT( int, LVM_SETGROUPMETRICS      = (LVM_FIRST + 155) );
		__QCMP_STATIC_CONSTANT( int, LVM_GETGROUPMETRICS      = (LVM_FIRST + 156) );
		__QCMP_STATIC_CONSTANT( int, LVM_ENABLEGROUPVIEW      = (LVM_FIRST + 157) );
		__QCMP_STATIC_CONSTANT( int, LVM_SORTGROUPS          = (LVM_FIRST + 158) );
		__QCMP_STATIC_CONSTANT( int, LVM_INSERTGROUPSORTED    = (LVM_FIRST + 159) );
		__QCMP_STATIC_CONSTANT( int, LVM_REMOVEALLGROUPS      = (LVM_FIRST + 160) );
		__QCMP_STATIC_CONSTANT( int, LVM_HASGROUP             = (LVM_FIRST + 161) );
		__QCMP_STATIC_CONSTANT( int, LVM_SETTILEVIEWINFO     =  (LVM_FIRST + 162) );
		__QCMP_STATIC_CONSTANT( int, LVM_GETTILEVIEWINFO      = (LVM_FIRST + 163) );
		__QCMP_STATIC_CONSTANT( int, LVM_SETTILEINFO          = (LVM_FIRST + 164) );
		__QCMP_STATIC_CONSTANT( int, LVM_GETTILEINFO          = (LVM_FIRST + 165) );
		__QCMP_STATIC_CONSTANT( int, LVM_SETINSERTMARK        = (LVM_FIRST + 166) );
		__QCMP_STATIC_CONSTANT( int, LVM_GETINSERTMARK        = (LVM_FIRST + 167) );
		__QCMP_STATIC_CONSTANT( int, LVM_INSERTMARKHITTEST    = (LVM_FIRST + 168) );
		__QCMP_STATIC_CONSTANT( int, LVM_GETINSERTMARKRECT    = (LVM_FIRST + 169) );
		__QCMP_STATIC_CONSTANT( int, LVM_SETINSERTMARKCOLOR   = (LVM_FIRST + 170) );
		__QCMP_STATIC_CONSTANT( int, LVM_GETINSERTMARKCOLOR  = (LVM_FIRST + 171) );
		__QCMP_STATIC_CONSTANT( int, LVM_SETINFOTIP         = (LVM_FIRST + 173) );
		__QCMP_STATIC_CONSTANT( int, LVM_GETSELECTEDCOLUMN   = (LVM_FIRST + 174) );
		__QCMP_STATIC_CONSTANT( int, LVM_ISGROUPVIEWENABLED   = (LVM_FIRST + 175) );
		__QCMP_STATIC_CONSTANT( int, LVM_GETOUTLINECOLOR      = (LVM_FIRST + 176) );
		__QCMP_STATIC_CONSTANT( int, LVM_SETOUTLINECOLOR     = (LVM_FIRST + 177) );
		__QCMP_STATIC_CONSTANT( int, LVM_CANCELEDITLABEL     = (LVM_FIRST + 179) );
		__QCMP_STATIC_CONSTANT( int, LVM_MAPINDEXTOID		= (LVM_FIRST + 180) );
		__QCMP_STATIC_CONSTANT( int, LVM_MAPIDTOINDEX		= (LVM_FIRST + 181) );
		__QCMP_STATIC_CONSTANT( int, LVM_ISITEMVISIBLE		= (LVM_FIRST + 182) );
		__QCMP_STATIC_CONSTANT( int, LVM_GETEMPTYTEXT		= (LVM_FIRST + 204) );
		__QCMP_STATIC_CONSTANT( int, LVM_GETFOOTERRECT		= (LVM_FIRST + 205) );
		__QCMP_STATIC_CONSTANT( int, LVM_GETFOOTERINFO		= (LVM_FIRST + 206) );
		__QCMP_STATIC_CONSTANT( int, LVM_GETFOOTERITEMRECT	= (LVM_FIRST + 207) );
		__QCMP_STATIC_CONSTANT( int, LVM_GETFOOTERITEM		= (LVM_FIRST + 208) );
		__QCMP_STATIC_CONSTANT( int, LVM_GETITEMINDEXRECT    = (LVM_FIRST + 209) );
		__QCMP_STATIC_CONSTANT( int, LVM_SETITEMINDEXSTATE   = (LVM_FIRST + 210) );
		__QCMP_STATIC_CONSTANT( int, LVM_GETNEXTITEMINDEX    = (LVM_FIRST + 211) );


#ifdef UNICODE
#	define LVM_EDITLABEL           LVM_EDITLABELW
#	define LVM_FINDITEM           LVM_FINDITEMW
#	define LVM_SETBKIMAGE          LVM_SETBKIMAGEW
#	define LVM_GETBKIMAGE          LVM_GETBKIMAGEW
#	define LVM_GETCOLUMN          LVM_GETCOLUMNW
#	define LVM_GETISEARCHSTRING    LVM_GETISEARCHSTRINGW
#	define LVM_GETITEM             LVM_GETITEMW
#	define  LVM_GETITEMTEXT        LVM_GETITEMTEXTW
#	define  LVM_GETSTRINGWIDTH     LVM_GETSTRINGWIDTHW
#   define  LVM_INSERTCOLUMN    LVM_INSERTCOLUMNW
#	define LVM_INSERTITEM          LVM_INSERTITEMW
#	define  LVM_SETCOLUMN          LVM_SETCOLUMNW
#	define LVM_SETITEM				LVM_SETITEMW
#	define LVM_SETITEMTEXT				LVM_SETITEMTEXTW
#else
#	define LVM_EDITLABEL           LVM_EDITLABELA
#	define LVM_FINDITEM           LVM_FINDITEMA
#	define LVM_SETBKIMAGE          LVM_SETBKIMAGEA
#	define LVM_GETBKIMAGE          LVM_GETBKIMAGEA
#	define LVM_GETCOLUMN          LVM_GETCOLUMNA
#	define LVM_GETISEARCHSTRING    LVM_GETISEARCHSTRINGA
#	define LVM_GETITEM             LVM_GETITEMA
#	define  LVM_GETITEMTEXT        LVM_GETITEMTEXTA
#	define  LVM_GETSTRINGWIDTH     LVM_GETSTRINGWIDTHA
#   define  LVM_INSERTCOLUMN    LVM_INSERTCOLUMNA
#	define LVM_INSERTITEM          LVM_INSERTITEMA
#	define  LVM_SETCOLUMN          LVM_SETCOLUMNA
#	define LVM_SETITEM				LVM_SETITEMA
#	define LVM_SETITEMTEXT				LVM_SETITEMTEXTA
#endif

#	define LVM_SETUNICODEFORMAT     CCM_SETUNICODEFORMAT
#	define LVM_GETUNICODEFORMAT     CCM_GETUNICODEFORMAT

		//--------------------------------------------------------------------------------
		typedef struct tagLITEM
		{
			unsigned int        mask ;
			int         iLink ;
			unsigned int        state ;
			unsigned int        stateMask ;
			wchar_t       szID[ MAX_LINKID_TEXT ] ;
			wchar_t       szUrl[ L_MAX_URL_LENGTH ] ;
		} LITEM, * PLITEM ;

		//--------------------------------------------------------------------------------
		typedef struct tagNMLVLINK : public NotificationMessageHeader
		{
			//NMHDR       hdr;
			LITEM       link;
			int         iItem;
			int         iSubItem;
		} NMLVLINK,  *PNMLVLINK;

		//--------------------------------------------------------------------------------
		typedef struct tagNMLVGETINFOTIP : public NotificationMessageHeader
		{
			//NMHDR hdr;
			unsigned long dwFlags;
			TCHAR* pszText;
			int cchTextMax;
			int iItem;
			int iSubItem;
			Cmp_long_ptr lParam;
		} NMLVGETINFOTIP, *LPNMLVGETINFOTIP;

		//--------------------------------------------------------------------------------
		typedef struct tagNMLVEMPTYMARKUP : public NotificationMessageHeader
		{
			//NMHDR hdr;
			// out params from client back to listview
			unsigned long dwFlags;                      // EMF_*
			wchar_t szMarkup[L_MAX_URL_LENGTH];   // markup displayed
		} NMLVEMPTYMARKUP;

		//--------------------------------------------------------------------------------
		typedef struct tagNMLVSCROLL : public NotificationMessageHeader
		{
			//NMHDR   hdr;
			int     dx;
			int     dy;
		} NMLVSCROLL, *LPNMLVSCROLL;

		//--------------------------------------------------------------------------------
		typedef struct tagNMLISTVIEW : public NotificationMessageHeader
		{
			//NMHDR   hdr;
			int     iItem;
			int     iSubItem;
			unsigned int    uNewState;
			unsigned int    uOldState;
			unsigned int    uChanged;
			POINT   ptAction;
			Cmp_long_ptr  lParam;
		} NMLISTVIEW, *LPNMLISTVIEW;

		//--------------------------------------------------------------------------------
		typedef struct tagNMITEMACTIVATE : public NotificationMessageHeader
		{
			//NMHDR   hdr;
			int     iItem;
			int     iSubItem;
			unsigned int    uNewState;
			unsigned int    uOldState;
			unsigned int    uChanged;
			POINT   ptAction;
			Cmp_long_ptr  lParam;
			unsigned int    uKeyFlags;
		} NMITEMACTIVATE, *LPNMITEMACTIVATE;

		//--------------------------------------------------------------------------------
		typedef struct tagLVTILEVIEWINFO
		{
			unsigned int    cbSize;
			unsigned long   dwMask;     //LVTVIM_*
			unsigned long   dwFlags;    //LVTVIF_*
			SIZE    sizeTile;
			int     cLines;
			RECT    rcLabelMargin;
		} LVTILEVIEWINFO, *PLVTILEVIEWINFO;

		//--------------------------------------------------------------------------------
		typedef struct tagLVTILEINFO
		{
			unsigned int    cbSize;
			int     iItem;
			unsigned int    cColumns;
			unsigned int*   puColumns;
#if		(_WIN32_WINNT >= 0x0600)
			int*    piColFmt;
#endif//(_WIN32_WINNT >= 0x0600)
		} LVTILEINFO, *PLVTILEINFO;

		//--------------------------------------------------------------------------------
		typedef struct tagLVSETINFOTIP
		{
			unsigned int cbSize;
			unsigned long dwFlags;
			wchar_t* pszText;
			int iItem;
			int iSubItem;
		} LVSETINFOTIP, *PLVSETINFOTIP;

		//--------------------------------------------------------------------------------
		// supports a single item in multiple groups.
		typedef struct tagLVITEMINDEX
		{
			int iItem;          // listview item index
			int iGroup;         // group index (must be -1 if group view is not enabled)
		} LVITEMINDEX, *PLVITEMINDEX;

		//--------------------------------------------------------------------------------
		typedef struct
		{
			unsigned int cbSize;
			unsigned long dwFlags;
			int iItem;
			unsigned long dwReserved;
		} LVINSERTMARK, * LPLVINSERTMARK;

		//--------------------------------------------------------------------------------
		struct LVBkImage		//LVBKIMAGE
		{
			unsigned long ulFlags;
			CBitmap* hbm;
			TCHAR* pszImage;
			unsigned int cchImageMax;
			int xOffsetPercent;
			int yOffsetPercent;
		};

		//--------------------------------------------------------------------------------
		struct LVCOLUMN
		{
			unsigned int mask;
			int fmt;
			int cx;
			TCHAR* pszText;
			int cchTextMax;
			int iSubItem;
#if		(_WIN32_IE >= 0x0300)
			int iImage;
			int iOrder;
#endif//(_WIN32_IE >= 0x0300)
#if		(_WIN32_WINNT >= 0x0600)
			int cxMin;       // min snap point
			int cxDefault;   // default snap point
			int cxIdeal;     // read only. ideal may not eqaul current width if auto sized (LVS_EX_AUTOSIZECOLUMNS) to a lesser width.
#endif//(_WIN32_WINNT >= 0x0600)
		};

		//--------------------------------------------------------------------------------
		struct LVFINDINFO
		{
			unsigned int flags;
			const char* psz;
			Cmp_long_ptr lParam;
			POINT pt;
			unsigned int vkDirection;
		};

		//--------------------------------------------------------------------------------
		struct LVGROUP
		{
			unsigned int    cbSize;
			unsigned int    mask;
			wchar_t*  pszHeader;
			int     cchHeader;

			wchar_t*  pszFooter;
			int     cchFooter;

			int     iGroupId;

			unsigned int    stateMask;
			unsigned int    state;
			unsigned int    uAlign;
#if		(_WIN32_WINNT >= 0x0600)
			wchar_t*  pszSubtitle;
			unsigned int    cchSubtitle;
			wchar_t*  pszTask;
			unsigned int    cchTask;
			wchar_t*  pszDescriptionTop;
			unsigned int    cchDescriptionTop;
			wchar_t*  pszDescriptionBottom;
			unsigned int    cchDescriptionBottom;
			int     iTitleImage;
			int     iExtendedImage;
			int     iFirstItem;         // Read only
			unsigned int    cItems;             // Read only
			wchar_t*  pszSubsetTitle;     // NULL if group is not subset
			unsigned int    cchSubsetTitle;

//#	define LVGROUP_V5_SIZE CCSIZEOF_STRUCT( LVGROUP, uAlign )

#endif//(_WIN32_WINNT >= 0x0600)
		};

		//--------------------------------------------------------------------------------
		struct LVGROUPMETRICS
		{
			unsigned int cbSize;
			unsigned int mask;
			unsigned int Left;
			unsigned int Top;
			unsigned int Right;
			unsigned int Bottom;
			unsigned long crLeft;
			unsigned long crTop;
			unsigned long crRight;
			unsigned long crBottom;
			unsigned long crHeader;
			unsigned long crFooter;
		};

		//--------------------------------------------------------------------------------
		struct LVHITTESTINFO
		{
			POINT pt;
			unsigned int flags;
			int iItem;
#if		(_WIN32_IE >= 0x0300)
			int iSubItem;    // this is was NOT in win95.  valid only for LVM_SUBITEMHITTEST
#endif//(_WIN32_IE >= 0x0300)
#if		(_WIN32_WINNT >= 0x0600)
			int iGroup; // readonly. index of group. only valid for owner data.supports single item in multiple groups.
#endif//(_WIN32_WINNT >= 0x0600)
		};

		//--------------------------------------------------------------------------------
		struct LVITEM
		{
			unsigned int mask;
			int iItem;
			int iSubItem;
			unsigned int state;
			unsigned int stateMask;
			TCHAR* pszText;
			int cchTextMax;
			int iImage;
			Cmp_long_ptr lParam;
#if		(_WIN32_IE >= 0x0300)
			int iIndent;
#endif//(_WIN32_IE >= 0x0300)
#if		(_WIN32_WINNT >= 0x0501)
			int iGroupId;
			unsigned int cColumns; // tile view columns
			unsigned int* puColumns;
#endif//(_WIN32_WINNT >= 0x0501)
#if		(_WIN32_WINNT >= 0x0600)
			int* piColFmt;
			int iGroup; // readonly. only valid for owner data.
#endif//(_WIN32_WINNT >= 0x0600)
		};

		//--------------------------------------------------------------------------------
		typedef struct tagLVFOOTERINFO
		{
			unsigned int mask;          // LVFF_*
			wchar_t* pszText;
			int cchTextMax;
			unsigned int cItems;
		} LVFOOTERINFO, *LPLVFOOTERINFO;

		//--------------------------------------------------------------------------------
		typedef struct tagLVFOOTERITEM
		{
			unsigned int mask;          // LVFIF_*
			int iItem;
			wchar_t* pszText;
			int cchTextMax;
			unsigned int state;         // LVFIS_*
			unsigned int stateMask;     // LVFIS_*
		} LVFOOTERITEM, *LPLVFOOTERITEM;

		//--------------------------------------------------------------------------------
		typedef struct tagLVINSERTGROUPSORTED
		{
			PFNLVGROUPCOMPARE pfnGroupCompare;
			void *pvData;
			LVGROUP lvGroup;
		}LVINSERTGROUPSORTED, *PLVINSERTGROUPSORTED;

		//--------------------------------------------------------------------------------
		typedef struct tagNMLVCACHEHINT : public NotificationMessageHeader
		{
			//NMHDR   hdr;
			int     iFrom;
			int     iTo;
		} NMLVCACHEHINT, *LPNMLVCACHEHINT;

		//--------------------------------------------------------------------------------
		typedef struct tagNMLVODSTATECHANGE : public NotificationMessageHeader
		{
			//NMHDR hdr;
			int iFrom;
			int iTo;
			unsigned int uNewState;
			unsigned int uOldState;
		} NMLVODSTATECHANGE, *LPNMLVODSTATECHANGE;

		//--------------------------------------------------------------------------------
		typedef struct tagNMLVCUSTOMDRAW : public NMCustomDraw
		{
			//NMCUSTOMDRAW nmcd;
			unsigned long clrText;
			unsigned long clrTextBk;
#if		(_WIN32_IE >= 0x0400)
			int iSubItem;
#endif//(_WIN32_IE >= 0x0400)
#if		(_WIN32_WINNT >= 0x0501)
			unsigned long dwItemType;

			// Item custom draw
			unsigned long clrFace;
			int iIconEffect;
			int iIconPhase;
			int iPartId;
			int iStateId;

			// Group Custom Draw
			RECT rcText;
			unsigned int uAlign;      // Alignment. Use LVGA_HEADER_CENTER, LVGA_HEADER_RIGHT, LVGA_HEADER_LEFT
#endif//(_WIN32_WINNT >= 0x0501)
		} NMLVCUSTOMDRAW, *LPNMLVCUSTOMDRAW;

		//--------------------------------------------------------------------------------
		struct NMLVDISPINFO : public NotificationMessageHeader
		{
			//NMHDR hdr;
			LVITEM item;
		};

		//--------------------------------------------------------------------------------
		struct NMLVFINDITEM : public NotificationMessageHeader
		{
			//NMHDR   hdr;
			int     iStart;
			LVFINDINFO lvfi;
		};

		//--------------------------------------------------------------------------------
		typedef struct tagLVKEYDOWN : public NotificationMessageHeader
		{
			//NMHDR hdr;
			unsigned short wVKey;
			unsigned int flags;
		} NMLVKEYDOWN, *LPNMLVKEYDOWN;

		__QOR_DECLARE_OCLASS_ID( CListCtrl );

		CListCtrl();
		virtual ~CListCtrl();
		long OnNotify( NotificationMessageHeader* pHdr );

		virtual long OnUnknownNotification( NotificationMessageHeader* pHdr );
		virtual void OnBeginDrag( NMLISTVIEW* pHdr );
		virtual bool OnBeginLabelEdit( NMLVDISPINFO* pHdr );
		virtual void OnBeginRDrag( NMLISTVIEW* pHdr );
		virtual void OnBeginScroll( NMLVSCROLL* pHdr );
		virtual void OnColumnClick( NMLISTVIEW* pHdr );
		virtual void OnColumnDropDown( NMLISTVIEW* pHdr );
		virtual void OnColumnOverflowClick( NMLISTVIEW* pHdr );
		virtual bool OnDeleteAllItems( NMLISTVIEW* pHdr );
		virtual void OnDeleteItem( NMLISTVIEW* pHdr );
		virtual bool OnEndLabelEdit( NMLVDISPINFO* pHdr );
		virtual void OnEndScroll( NMLVSCROLL* pHdr );
		virtual void OnGetDispInfo( NMLVDISPINFO* pHdr );
		virtual bool OnGetEmptyMarkup( NMLVEMPTYMARKUP* pHdr );
		virtual void OnGetInfoTip( NMLVGETINFOTIP* pHdr );
		virtual bool OnHotTrack( NMLISTVIEW* pHdr );
		virtual void OnIncrementalSearch( NMLVFINDITEM* pHdr );
		virtual void OnInsertItem( NMLISTVIEW* pHdr );
		virtual void OnItemActivate( NMITEMACTIVATE* pHdr );
		virtual void OnItemActivate( NotificationMessageHeader* pHdr );
		virtual void OnItemChanged( NMLISTVIEW* pHdr );
		virtual bool OnItemChanging( NMLISTVIEW* pHdr );
		virtual void OnKeyDown( NMLVKEYDOWN* pHdr );
		virtual void OnLinkClick( NMLVLINK* pHdr );
		virtual bool OnMarqueeBegin( NMLISTVIEW* pHdr );
		virtual void OnOwnerDrawCacheHint( NMLVCACHEHINT* pHdr );
		virtual long OnOwnerDrawFindItem( NMLVFINDITEM* pHdr );
		virtual void OnOwnerDrawStateChanged( NMLVODSTATECHANGE* pHdr );
		virtual void OnSetDispInfo( NMLVDISPINFO* pHdr );
		virtual void OnClick( NMITEMACTIVATE* pHdr );
		virtual long OnCustomDraw( NMLVCUSTOMDRAW* pHdr );
		virtual void OnDblClick( NMITEMACTIVATE* pHdr );
		virtual long OnHover( NotificationMessageHeader* pHdr );
		virtual void OnKillFocus( NotificationMessageHeader* pHdr );
		virtual bool OnRClick( NMITEMACTIVATE* pHdr );
		virtual void OnRDblClick( NMITEMACTIVATE* pHdr );
		virtual void OnReleasedCapture( NotificationMessageHeader* pHdr );
		virtual void OnReturn( NotificationMessageHeader* pHdr );
		virtual void OnSetFocus( NotificationMessageHeader* pHdr );


		unsigned long ApproximateViewRect( int iItemCount, unsigned short wcx, unsigned short wcy );
		bool Arrange( Cmp_uint_ptr Alignment );
		void CancelEditLabel();
		long CreateDragImage( int iItem, CPoint& Point );
		bool DeleteAllItems();
		bool DeleteColumn( int iColumn );
		bool DeleteItem( int iItem );
		long EditLabel( int iItem );
		long EnableGroupView( bool bEnable );
		bool EnsureVisible( int iItem, bool bPartialOK );
		long FindItem( int iStart, LVFINDINFO& Info );
		long GetBackgroundColour();
		bool GetBackgroundImage( LVBkImage& Image );
		long GetCallbackMask();
		bool GetColumn( int iColumn, LVCOLUMN& ColumnInfo );
		bool GetColumnOrderArray( int iSize, int* paOrder );
		long GetColumnWidth( int iColumn );
		long GetCountPerPage();
		long GetEditControl();
		bool GetEmptyText( unsigned int uicchText, wchar_t* strBuffer );
		unsigned long GetExtendedStyle();
		long GetFocusedGroup();
		void GetFooterInfo( LVFOOTERINFO& FooterInfo );
		bool GetFooterItem( int iItem, LVFOOTERITEM& FooterItem );
		bool GetFooterItemRect( int iItem, CRectangle& rcFooterItem );
		bool GetFooterRect( CRectangle& rcFooter );
		long GetGroupCount();
		long GetGroupInfo( int iGroup, LVGROUP& GroupInfo );
		bool GetGroupInfoByIndex( int iIndex, LVGROUP& GroupInfo );
		void GetGroupMetrics( LVGROUPMETRICS& GroupMetrics );
		bool GetGroupRect( int iGroupId, CRectangle& rcGroup, int iFlags );
		long GetGroupState( int iGroupId, unsigned int uiMask );
		long GetHeader();
		CCursorHandle::refType GetHotCursor();
		long GetHotItem();
		long GetHoverTime();
		long GetImageList( int iImageList );
		bool GetInsertMark( LVINSERTMARK& InsertMark );
		unsigned long GetInsertMarkColour();
		bool GetInsertMarkRect( CRectangle& rcInsertMark );
		long GetIncrementalSearchString( char* strBuffer );
		bool GetItem( LVITEM& Item );
		long GetItemCount();
		bool GetItemIndexRect( LVITEMINDEX& ItemIndex, CRectangle& rcItem, int iSubItem, int iRect );
		bool GetItemPosition( int iItem, CPoint& Point );
		bool GetItemRect( int iItem, CRectangle& rcItem, int iRect );
		long GetItemSpacing( bool bSmallIcons );
		long GetItemState( int iItem, unsigned int uiMask );
		long GetItemText( int iItem, LVITEM& Item );
		long GetNextItem( int iStart, unsigned int uiFlags );
		bool GetNextItemIndex( LVITEMINDEX& ItemIndex, Cmp_long_ptr Flags );
		void GetNumberOfWorkAreas( unsigned int& uiWorkAreas );
		bool GetOrigin( CPoint& Point );
		unsigned long GetOutlineColour();
		long GetSelectedColumn();
		long GetSelectedCount();
		long GetSelectionMark();
		long GetStringWidth( const char* strItem );
		bool GetSubItemRect( int iItem, CRectangle& rcSubItem );
		long GetTextBkColour();
		long GetTextColour();
		void GetTileInfo( LVTILEINFO& TileInfo );
		void GetTileViewInfo( LVTILEVIEWINFO& TileViewInfo );
		long GetToolTips();
		long GetTopIndex();
		bool GetUnicodeFormat();
		long GetView();
		bool GetViewRect( CRectangle& rcView );
		void GetWorkAreas( int nWorkAreas, RECT* paRects );
		bool HasGroup( int iGroupId );
		long HitTest( LVHITTESTINFO& HitTestInfo, bool bGroup = false );
		long InsertColumn( int iColumn, LVCOLUMN& Column );
		long InsertGroup( int iIndex, LVGROUP& Group );
		void InsertGroupSorted( LVINSERTGROUPSORTED& Group );
		long InsertItem( LVITEM& Item );
		bool InsertMarkHitTest( CPoint& Point, LVINSERTMARK& InsertMark );
		bool IsGroupViewEnabled();
		bool IsItemVisible( int iIndex );
		long MapIdToIndex( unsigned int id );
		long MapIndexToId( unsigned int index );
		bool RedrawItems( int iFirst, int iLast );
		void RemoveAllGroups();
		long RemoveGroup( int iGroupId );
		bool Scroll( int dx, int dy );
		bool SetBkColour( unsigned long clrBk );
		bool SetBkImage( LVBkImage& BackImage );
		bool SetCallbackMask( unsigned int uiMask );
		bool SetColumn( int iColumn, LVCOLUMN& Column );
		bool SetColumnOrderArray( int iCount, int* paOrder );
		bool SetColumnWidth( int iColumn, int cx );
		long SetExtendedListViewStyle( unsigned long dwExMask, unsigned long dwExStyle );

/*
#define LVS_EX_GRIDLINES        0x00000001
#define LVS_EX_SUBITEMIMAGES    0x00000002
#define LVS_EX_CHECKBOXES       0x00000004
#define LVS_EX_TRACKSELECT      0x00000008
#define LVS_EX_HEADERDRAGDROP   0x00000010
#define LVS_EX_FULLROWSELECT    0x00000020 // applies to report mode only
#define LVS_EX_ONECLICKACTIVATE 0x00000040
#define LVS_EX_TWOCLICKACTIVATE 0x00000080
#if (_WIN32_IE >= 0x0400)
#define LVS_EX_FLATSB           0x00000100
#define LVS_EX_REGIONAL         0x00000200
#define LVS_EX_INFOTIP          0x00000400 // listview does InfoTips for you
#define LVS_EX_UNDERLINEHOT     0x00000800
#define LVS_EX_UNDERLINECOLD    0x00001000
#define LVS_EX_MULTIWORKAREAS   0x00002000
#endif
#if (_WIN32_IE >= 0x0500)
#define LVS_EX_LABELTIP         0x00004000 // listview unfolds partly hidden labels if it does not have infotip text
#define LVS_EX_BORDERSELECT     0x00008000 // border selection style instead of highlight
#endif  // End (_WIN32_IE >= 0x0500)
#if (_WIN32_WINNT >= 0x0501)
#define LVS_EX_DOUBLEBUFFER     0x00010000
#define LVS_EX_HIDELABELS       0x00020000
#define LVS_EX_SINGLEROW        0x00040000
#define LVS_EX_SNAPTOGRID       0x00080000  // Icons automatically snap to grid.
#define LVS_EX_SIMPLESELECT     0x00100000  // Also changes overlay rendering to top right for icon mode.
#endif
#if _WIN32_WINNT >= 0x0600
#define LVS_EX_JUSTIFYCOLUMNS   0x00200000  // Icons are lined up in columns that use up the whole view area.
#define LVS_EX_TRANSPARENTBKGND 0x00400000  // Background is painted by the parent via WM_PRINTCLIENT
#define LVS_EX_TRANSPARENTSHADOWTEXT 0x00800000  // Enable shadow text on transparent backgrounds only (useful with bitmaps)
#define LVS_EX_AUTOAUTOARRANGE  0x01000000  // Icons automatically arrange if no icon positions have been set
#define LVS_EX_HEADERINALLVIEWS 0x02000000  // Display column header in all view modes
#define LVS_EX_AUTOCHECKSELECT  0x08000000
#define LVS_EX_AUTOSIZECOLUMNS  0x10000000
#define LVS_EX_COLUMNSNAPPOINTS 0x40000000
#define LVS_EX_COLUMNOVERFLOW   0x80000000
#endif
*/
		long SetGroupInfo( int iGroupId, LVGROUP& Group );
		void SetGroupMetrics( LVGROUPMETRICS& GroupMetrics );
		CCursorHandle::refType SetHotCursor( CCursorHandle::refType hHotCursor );
		long SetHotItem( int index );
		long SetHoverTime( unsigned long dwHoverMilliseconds );
		long SetIconSpacing( unsigned short cx, unsigned short cy );
		long SetImageList( int iImageList, CImageListHandle::refType hImageList );
		bool SetInfoTop( LVSETINFOTIP& InfoTip );
		bool SetInsertMark( LVINSERTMARK& InsertMark );
		unsigned long SetInsertMarkColour( unsigned long clrMark );
		bool SetItem( LVITEM& Item );
		bool SetItemCount( int cItems, unsigned long dwFlags );
		bool SetItemIndexState( LVITEMINDEX& ItemIndex, LVITEM& Item );
		bool SetItemPosition( int iItem, unsigned short x, unsigned short y );
		void SetItemPosition32( int iItem, CPoint& Point );
		bool SetItemState( int iItem, LVITEM& Item );
		bool SetItemText( int iItem, LVITEM& Item );
		unsigned long SetOutlineColour( unsigned long OutlineColour );
		void SetSelectedColumn( int iColumn );
		long SetSelectionMark( int index );
		bool SetTextBkColour( unsigned long clrBkText );
		bool SetTextColour( unsigned long clrText );
		bool SetTileInfo( LVTILEINFO& TileInfo );
		bool SetTileViewInfo( LVTILEVIEWINFO& TileViewInfo );
		long SetToolTips( CWindowHandle::refType hToolTipCtrl );
		bool SetUnicodeFormat( bool bUnicode );
		long SetView( unsigned long dwView );
		void SetWorkAreas( int nWorkAreas, RECT* paRects );
		void SortGroups( PFNLVGROUPCOMPARE pfnGroupCompare, void* pvData );
		bool SortItems( PFNLVCOMPARE pfnCompare, Cmp_uint_ptr Data );
		bool SortItemsEx( PFNLVCOMPARE pfnCompare, Cmp_uint_ptr Data );
		long SubItemHitTest( LVHITTESTINFO& HitTestInfo, bool bGroup );
		bool Update( int iItem );

	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CListCtrlFactory : public CWindowFactory
	{
	public:

		__QCMP_STATIC_CONSTANT( int, LVS_ICON                = 0x0000 );
		__QCMP_STATIC_CONSTANT( int, LVS_REPORT              = 0x0001 );
		__QCMP_STATIC_CONSTANT( int, LVS_SMALLICON           = 0x0002 );
		__QCMP_STATIC_CONSTANT( int, LVS_LIST                = 0x0003 );
		__QCMP_STATIC_CONSTANT( int, LVS_TYPEMASK            = 0x0003 );
		__QCMP_STATIC_CONSTANT( int, LVS_SINGLESEL           = 0x0004 );
		__QCMP_STATIC_CONSTANT( int, LVS_SHOWSELALWAYS       = 0x0008 );
		__QCMP_STATIC_CONSTANT( int, LVS_SORTASCENDING       = 0x0010 );
		__QCMP_STATIC_CONSTANT( int, LVS_SORTDESCENDING      = 0x0020 );
		__QCMP_STATIC_CONSTANT( int, LVS_SHAREIMAGELISTS     = 0x0040 );
		__QCMP_STATIC_CONSTANT( int, LVS_NOLABELWRAP         = 0x0080 );
		__QCMP_STATIC_CONSTANT( int, LVS_AUTOARRANGE         = 0x0100 );
		__QCMP_STATIC_CONSTANT( int, LVS_EDITLABELS          = 0x0200 );
#if		(_WIN32_IE >= 0x0300)											 
		__QCMP_STATIC_CONSTANT( int, LVS_OWNERDATA           = 0x1000 );
#endif//(_WIN32_IE >= 0x0300)											 
		__QCMP_STATIC_CONSTANT( int, LVS_NOSCROLL            = 0x2000 );
		__QCMP_STATIC_CONSTANT( int, LVS_TYPESTYLEMASK       = 0xfc00 );
		__QCMP_STATIC_CONSTANT( int, LVS_ALIGNTOP            = 0x0000 );
		__QCMP_STATIC_CONSTANT( int, LVS_ALIGNLEFT           = 0x0800 );
		__QCMP_STATIC_CONSTANT( int, LVS_ALIGNMASK           = 0x0c00 );
		__QCMP_STATIC_CONSTANT( int, LVS_OWNERDRAWFIXED      = 0x0400 );
		__QCMP_STATIC_CONSTANT( int, LVS_NOCOLUMNHEADER      = 0x4000 );
		__QCMP_STATIC_CONSTANT( int, LVS_NOSORTHEADER        = 0x8000 );

		__QOR_DECLARE_OCLASS_ID( CListCtrlFactory );

		CListCtrlFactory();

		virtual ~CListCtrlFactory();
		virtual CListCtrl* Create();

		bool GetIcon();
		void SetIcon( bool bFlag );
		bool GetReport();
		void SetReport( bool bFlag );
		bool GetSmallIcon();
		void SetSmallIcon( bool bFlag );
		bool GetList();
		void SetList( bool bFlag );
		bool GetSingleSel();
		void SetSingleSel( bool bFlag );
		bool GetShowSelAlways();
		void SetShowSelAlways( bool bFlag );
		bool GetSortAscending();
		void SetSortAscending( bool bFlag );
		bool GetSortDescending();
		void SetSortDescending( bool bFlag );
		bool GetSharedImageLists();
		void SetSharedImageLists( bool bFlag );
		bool GetNoLabelWrap();
		void SetNoLabelWrap( bool bFlag );
		bool GetAutoArrange();
		void SetAutoArrange( bool bFlag );
		bool GetEditLabels();
		void SetEditLabels( bool bFlag );
		bool GetOwnerData();
		void SetOwnerData( bool bFlag );
		bool GetNoScroll();
		void SetNoScroll( bool bFlag );
		bool GetAlignTop();
		void SetAlignTop( bool bFlag );
		bool GetAlignLeft();
		void SetAlignLeft( bool bFlag );
		bool GetOwnerDrawFixed();
		void SetOwnerDrawFixed( bool bFlag );
		bool GetNoColumnHeader();
		void SetNoColumnHeader( bool bFlag );
		bool GetNoSortOrder();
		void SetNoSortOrder( bool bFlag );
 
	};

}//nsWin32

#endif//WINQL_GUI_WND_CCTRL_LIST_H_3
