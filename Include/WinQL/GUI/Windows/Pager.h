//Pager.h

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Pager Common Control Window

#ifndef WINQL_GUI_WND_CCTRL_PAGER_H_3
#define WINQL_GUI_WND_CCTRL_PAGER_H_3

#include "WinQL/GUI/Views/WindowView.h"
#include "WinQL/GUI/Windows/WinCtrlWindow.h"
#include "WinQL/GUI/CommonCtrl.h"
#include "MammutQOR/Model.h"
#include "WinQL/Definitions/Interfaces.h"
#include "WinQL/GUI/WindowFactory.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{

#if		( _WIN32_IE >= 0x0400 )
	
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CPagerClass : public CWindowClass
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CPagerClass );

		CPagerClass();
		virtual ~CPagerClass();
		virtual bool Preregistered();
		const TCHAR* Name();

	private:

		CCommonCtrl m_ComCtrl32;

		CPagerClass( const CPagerClass& );
		CPagerClass& operator = ( const CPagerClass& );
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CPager : public CWinCtrlWindow
	{
	public:

		__QCMP_STATIC_CONSTANT( int, PGN_FIRST               = (0U-900U) );
		__QCMP_STATIC_CONSTANT( int, PGN_LAST                = (0U-950U) );

		//Notifications
		__QCMP_STATIC_CONSTANT( int, PGN_SCROLL				= (PGN_FIRST-1) );
		__QCMP_STATIC_CONSTANT( int, PGN_CALCSIZE			= (PGN_FIRST-2) );
		__QCMP_STATIC_CONSTANT( int, PGN_HOTITEMCHANGE		= (PGN_FIRST-3) );

		//Messages
		__QCMP_STATIC_CONSTANT( int, PGM_FIRST               = 0x1400 );
		__QCMP_STATIC_CONSTANT( int, PGM_SETCHILD            = (PGM_FIRST + 1) ); // lParam == hwnd
		__QCMP_STATIC_CONSTANT( int, PGM_RECALCSIZE          = (PGM_FIRST + 2) );
		__QCMP_STATIC_CONSTANT( int, PGM_FORWARDMOUSE        = (PGM_FIRST + 3) );
		__QCMP_STATIC_CONSTANT( int, PGM_SETBKCOLOR          = (PGM_FIRST + 4) );
		__QCMP_STATIC_CONSTANT( int, PGM_GETBKCOLOR          = (PGM_FIRST + 5) );
		__QCMP_STATIC_CONSTANT( int, PGM_SETBORDER           = (PGM_FIRST + 6) );
		__QCMP_STATIC_CONSTANT( int, PGM_GETBORDER           = (PGM_FIRST + 7) );
		__QCMP_STATIC_CONSTANT( int, PGM_SETPOS              = (PGM_FIRST + 8) );
		__QCMP_STATIC_CONSTANT( int, PGM_GETPOS              = (PGM_FIRST + 9) );
		__QCMP_STATIC_CONSTANT( int, PGM_SETBUTTONSIZE       = (PGM_FIRST + 10));
		__QCMP_STATIC_CONSTANT( int, PGM_GETBUTTONSIZE       = (PGM_FIRST + 11));
		__QCMP_STATIC_CONSTANT( int, PGM_GETBUTTONSTATE      = (PGM_FIRST + 12));

#define PGM_GETDROPTARGET       CCM_GETDROPTARGET

		//--------------------------------------------------------------------------------
		typedef struct : public NotificationMessageHeader
		{
			//NMHDR   hdr;
			unsigned long   dwFlag;
			int     iWidth;
			int     iHeight;
		}NMPGCALCSIZE, *LPNMPGCALCSIZE;

		//--------------------------------------------------------------------------------
		typedef struct tagNMPGHOTITEM : public NotificationMessageHeader
		{
			//NMHDR   hdr;
			int     idOld;
			int     idNew;
			unsigned long   dwFlags;           // HICF_*
		} NMPGHOTITEM, * LPNMPGHOTITEM;


		__QOR_DECLARE_OCLASS_ID( CPager );

		CPager();
		virtual ~CPager();

		long OnNotify( NotificationMessageHeader* pHdr );

		virtual void OnReleasedCapture( NotificationMessageHeader* pHdr );
		virtual void OnCalcSize( NMPGCALCSIZE* pCalcSize );
		virtual bool OnHotItemChange( NMPGHOTITEM* pHotItem );
		virtual long OnUnknownNotification( NotificationMessageHeader* pHdr );

		void ForwardMouse( bool bForward );
		unsigned long GetBkColour();
		long GetBorderPixels();
		long GetButtonSizePixels();
		long GetButtonState( int iButton );
		void GetDropTarget( IDropTarget** pIDropTarget );
		long GetPosScrollPixels();
		void RecalcSize();
		unsigned long SetBkColour( unsigned long clrBk );
		long SetBorderPixels( int iBorderSize );
		long SetButtonPixels( int iSize );
		void SetChild( CWindowHandle::refType hChild );
		void SetPosScrollPixels( int iPos );

	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CPagerFactory : public CWindowFactory
	{
	public:

		__QCMP_STATIC_CONSTANT( int, PGS_VERT                = 0x00000000 );
		__QCMP_STATIC_CONSTANT( int, PGS_HORZ                = 0x00000001 );
		__QCMP_STATIC_CONSTANT( int, PGS_AUTOSCROLL          = 0x00000002 );
		__QCMP_STATIC_CONSTANT( int, PGS_DRAGNDROP           = 0x00000004 );

		__QOR_DECLARE_OCLASS_ID( CPagerFactory );

		CPagerFactory();

		virtual ~CPagerFactory();
		virtual CPager* Create();
			
		bool GetVertical();
		void SetVertical( bool bFlag );
		bool GetHorizontal();
		void SetHorizontal( bool bFlag );
		bool GetAutoScroll();
		void SetAutoScroll( bool bFlag );
		bool GetDragAndDrop();
		void SetDragAndDrop( bool bFlag );
 
	};

#endif//( _WIN32_IE >= 0x0400 )

}//nsWin32

#endif//WINQL_GUI_WND_CCTRL_PAGER_H_3
