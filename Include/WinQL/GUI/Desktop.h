//Desktop.h

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_GUI_DESKTOP_H_3
#define WINQL_GUI_DESKTOP_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "CodeQOR/ClassReg/ClassRegEntry.h"
#include "WinQL/WinQL.h"
#include "WinQL/Definitions/Handles.h"
#include "WinQL/Definitions/Data.h"
#include "WinQL/Definitions/Security.h"
#include "WinQL/CodeServices/Text/WinString.h"
//#include "WinQL/CodeServices/Text/TCharBuffer.h"
#include "WinQL/System/Security/WinQLSecurity.h"
#include "WinQL/Application/USer/WinQLUserObject.h"
#include "WinQL/GUI/GUI.h"
#include "WinQL/CodeServices/Handles/WinQLHandleMap.h"
#include "WinQL/CodeServices/Handles/WinQLRAIISessionHandle.h"
#include "WinQL/GUI/Window.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	class __QOR_INTERFACE( __WINQAPI ) CUser32;
}

//--------------------------------------------------------------------------------
namespace nsWin32
{

	class __QOR_INTERFACE( __WINQL_GUI ) CDesktop;

	typedef CRAIISessionHandle CDesktopHandle;
	typedef nsWin32::CTHandleMap< CDesktopHandle::refType, CDesktop > CDesktopHandleMap;

	extern __QCMP_DECLARE_PERTHREAD CDesktopHandleMap* p_tDesktopHandleMap;
	
	typedef int( __QCMP_STDCALLCONVENTION *WindowEnumProc )( void*, Cmp_long_ptr );
	typedef bool( __QCMP_STDCALLCONVENTION* OSWindowEnumProc )( COSWindow::refType, Cmp_long_ptr );

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CDesktop
	{
		QOR_PP_WINQL_SHARED;

	public:

		typedef nsCodeQOR::CTLRef< CDesktop > refType;

		__QOR_DECLARE_OCLASS_ID( CDesktop );

		//Get the current threads desktop
		CDesktop();		
		//Opens an existing desktop
		CDesktop( const TCHAR* lpszDesktop, unsigned long dwFlags, bool fInherit, unsigned long dwDesiredAccess );
		//Creates a new desktop
		CDesktop( const TCHAR* lpszDesktop, const TCHAR* lpszDevice, nsWin32::LPDEVMODE pDevmode, unsigned long dwFlags, unsigned long dwDesiredAccess, nsWin32::LPSECURITY_ATTRIBUTES lpsa );
		CDesktop( const TCHAR* lpszDesktop, const TCHAR* lpszDevice, nsWin32::LPDEVMODE pDevmode, unsigned long dwFlags, unsigned long dwDesiredAccess, nsWin32::LPSECURITY_ATTRIBUTES lpsa, unsigned long ulHeapSize, void* pvoid );

		static refType ThreadDesktop( void );
		static refType Open( const TCHAR* szDesktop, unsigned long ulFlags, bool bInherit, unsigned long ulDesiredAccess );
		static refType CreateEx( const TCHAR* lpszDesktop, const TCHAR* lpszDevice, nsWin32::LPDEVMODE pDevmode, unsigned long dwFlags, unsigned long dwDesiredAccess, nsWin32::LPSECURITY_ATTRIBUTES lpsa, unsigned long ulHeapSize, void* pvoid );
		static refType Create( TCHAR* lpszDesktop, const TCHAR* lpszDevice, nsWin32::LPDEVMODE pDevmode, unsigned long dwFlags, unsigned long dwDesiredAccess, nsWin32::LPSECURITY_ATTRIBUTES lpsa );

		virtual ~CDesktop();
		
		CTString GetName( void );
		bool GetFlags( nsWin32::USEROBJECTFLAGS& Flags );
		bool SetFlags( nsWin32::USEROBJECTFLAGS& Flags );
		bool IsInputDesktop( bool& bInput );
		bool GetHeapSize( unsigned long& Size );
		CTString GetType();
		CSID GetSID();
		bool SwitchTo();		
		bool AttachToCurrentThread();
		bool EnumWindows( OSWindowEnumProc fpWindowEnumProc, Cmp_long_ptr cookie = 0 );
		bool EnumWindows( nsWin32::WindowEnumProc lpfn, Cmp_long_ptr lParam );
		bool GetInformation( int nIndex, nsCodeQOR::CTLRef< byte >& RefData );
		bool SetInformation( int nIndex, const void* pvInfo, unsigned long nLength );

		CDesktopHandle::refType Handle();
		static refType FromHandle( CDesktopHandle::refType hDesktop );

		int InstanceEnumWindowProc( void* hWindow );

	protected:

		bool m_bNeedsClose;
		CDesktopHandle m_Handle;
		Cmp_long_ptr m_EnumCookie;
		OSWindowEnumProc mfpWindowEnumProc;

		void Init( void );
		void Uninit( void );

		CDesktop( CDesktopHandle::refType hDesktop );

	private:			

		nsWinQAPI::CUser32& m_User32Library;

		static int EnumWindowProc( void*, Cmp_long_ptr );
	};

}//nsWin32

#endif//WINQL_GUI_DESKTOP_H_3
