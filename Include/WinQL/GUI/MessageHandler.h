//MessageHandler.h

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_GUI_MESSAGEHANDLER_H_3
#define WINQL_GUI_MESSAGEHANDLER_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/Definitions/Handles.h"
#include "WinQL/Definitions/Constants.h"
#include "WinQL/Definitions/Security.h"
#include "WinQL/GUI/GUI.h"
#include "WinQL/GUI/Window.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	class __QOR_INTERFACE( __WINQAPI ) CUser32;
}

//--------------------------------------------------------------------------------
namespace nsWin32
{
	typedef void ( __QCMP_STDCALLCONVENTION *SENDASYNCPROC )( void*, unsigned int, Cmp_ulong_ptr, Cmp_long_ptr );

	//--------------------------------------------------------------------------------
	typedef struct 
	{
		unsigned int cbSize;
		CDesktopHandle::refType hdesk;
		CWindowHandle::refType hwnd;
		nsWin32::LUID luid;
	} BSMINFO, *PBSMINFO;

	__QOR_INTERFACE( __WINQL_GUI ) int Get_X_LParam( Cmp_long_ptr lp );
	__QOR_INTERFACE( __WINQL_GUI ) int Get_Y_LParam( Cmp_long_ptr lp );

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CMessageHandler
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CMessageHandler );

		__QCMP_STATIC_CONSTANT( unsigned short, PMNoRemove		= 0x0000 );
		__QCMP_STATIC_CONSTANT( unsigned short, PMRemove		= 0x0001 );
		__QCMP_STATIC_CONSTANT( unsigned short, PMNoYield		= 0x0002 );
#if	( WINVER >= 0x0500 )
		__QCMP_STATIC_CONSTANT( unsigned int, PMQSInput			= ( QSINPUT << 16 ) );
		__QCMP_STATIC_CONSTANT( unsigned int, PMQSPostMessage	= ( ( QSPOSTMESSAGE | QSHOTKEY | QSTIMER ) << 16 ) );
		__QCMP_STATIC_CONSTANT( unsigned int, PMQSPaint			= ( QSPAINT << 16 ) );
		__QCMP_STATIC_CONSTANT( unsigned int, PMQSSendMessage	= ( QSSENDMESSAGE << 16 ) );
#endif

		CMessageHandler();
		CMessageHandler( const CMessageHandler& src );
		virtual ~CMessageHandler();
		CMessageHandler& operator = ( const CMessageHandler& src );
		long BroadcastSystemMessageT( unsigned long dwFlags, unsigned long* lpdwRecipients, unsigned int uiMessage, Cmp_uint_ptr wParam, Cmp_long_ptr lParam );
		long BroadcastSystemMessageT( unsigned long dwFlags, unsigned long* lpdwRecipients, unsigned int uiMessage, Cmp_uint_ptr wParam, Cmp_long_ptr lParam, nsWin32::PBSMINFO pBSMInfo );
		Cmp_long_ptr Dispatch( const nsWin32::MSG* lpmsg );
		bool GetInputState( void );
		bool Get( nsWin32::LPMSG lpMsg, void* hwnd, unsigned int wMsgFilterMin, unsigned int wMsgFilterMax );
		Cmp_long_ptr GetMessageExtraInfo( void );
		unsigned long GetMessagePos( void );
		long GetMessageTime( void );
		unsigned long GetQueueStatus( unsigned int flags );
		bool InSend( void );
		unsigned long InSend( void* lpReserved );
		bool Peek( nsWin32::LPMSG lpMsg, void* hwnd, unsigned int wMsgFilterMin, unsigned int wMsgFilterMax, unsigned int wRemoveMsg );
		bool Post( COSWindow::refType Wnd, unsigned int Msg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam );
		void PostQuit( int nExitCode );
		bool PostToThread( unsigned long idThread, unsigned int Msg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam );
		unsigned int RegisterWindowMessageT( const TCHAR* lpString );
		bool Reply( Cmp_long_ptr lResult );
		bool SendWithCallback( COSWindow::refType hWnd, unsigned int Msg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam, nsWin32::SENDASYNCPROC lpCallBack, Cmp_ulong_ptr dwData );
		Cmp_long_ptr SendWithTimeout( COSWindow::refType hWnd, unsigned int Msg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam, unsigned int fuFlags, unsigned int uTimeout, Cmp_ulong_ptr* lpdwResult );
		Cmp_long_ptr Send( COSWindow::refType hWnd, unsigned int Msg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam );
		bool SendNotify( COSWindow::refType hWnd, unsigned int Msg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam );
		Cmp_long_ptr SetMessageExtraInfo( Cmp_long_ptr lParam );
		bool Translate( const nsWin32::MSG* lpMsg );
		bool TranslateMDISysAccel( COSWindow::refType WndClient, nsWin32::LPMSG lpMsg );
		bool IsWow64( void );
		bool Wait( void );

		//--------------------------------------------------------------------------------
		virtual int IsIdleMessage( nsWin32::MSG* pMsg )  // checks for special messages
		{
			return 0;
		}

		//--------------------------------------------------------------------------------
		virtual int OnIdle( long lCount ) // return TRUE if more idle processing
		{
			return 0;
		}

		//--------------------------------------------------------------------------------
		virtual bool RouteMessage( void );

		//--------------------------------------------------------------------------------
		virtual int MessageLoop( void );

		//--------------------------------------------------------------------------------
		virtual void Quit( int nExitCode )
		{
			PostQuit( nExitCode );
		}

	private:

		nsWinQAPI::CUser32& m_User32Library;

	};

}//nsWin32

#endif//WINQL_GUI_MESSAGEHANDLER_H_3
