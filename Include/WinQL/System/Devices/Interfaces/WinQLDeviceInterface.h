//DeviceInterface.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Win32 Device Interface

#ifndef WINQL_DEVICEINTERFACE_H_3
#define WINQL_DEVICEINTERFACE_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/Definitions/Data.h"
#include "WinQL/Definitions/IO.h"
#include "WinQL/System/Devices/WinQLDevice.h"
#include "WinQL/System/Devices/WinQLDeviceHandle.h"
#include "WinQL/CodeServices/Text/WinString.h"
#include "AppocritaQOR/Controller.h"

#define __WINQL_DEVICE_CONTROL_CODE( DeviceType, Function, Method, Access ) (	\
    ((DeviceType) << 16) | ((Access) << 14) | ((Function) << 2) | (Method) )

//--------------------------------------------------------------------------------
namespace nsWin32
{
	class __QOR_INTERFACE( __WINQL ) CDeviceInterfaceClass;
	class __QOR_INTERFACE( __WINQL ) CDeviceInstance;
	class __QOR_INTERFACE( __WINQL ) CIODeviceFile;
	
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CDeviceInterface
	{
	public:

		typedef nsCodeQOR::CTLRef< CDeviceInterface > refType;

		//--------------------------------------------------------------------------------
		enum eMethod
		{
			Method_Buffered			= 0,
			Method_In_Direct,
			Method_Out_Direct,
			Method_Neither,
		};

		//--------------------------------------------------------------------------------
		enum eAccess
		{
			File_Any_Access			= 0x000,
			File_Special_Access		= 0x000,
			File_Read_Access		= 0x0001,
			File_Write_Access		= 0x0002
		};

		__QOR_DECLARE_OCLASS_ID( CDeviceInterface );

		CDeviceInterface();
		CDeviceInterface( CDeviceHandle& hExisting );
		CDeviceInterface( const CDeviceInterface& );
		CDeviceInterface& operator = ( const CDeviceInterface& );
		virtual ~CDeviceInterface();

		//--------------------------------------------------------------------------------
		refType Ref( void )
		{
			return refType( this, false );
		}

		void SetClass( CDeviceInterfaceClass* pClass, unsigned long ulIndex );
		nsCodeQOR::CTLRef< CDeviceInterfaceClass > GetClass( void );

		void SetInstance( CDeviceInstance* pInstance );
		nsCodeQOR::CTLRef< CDeviceInstance > GetInstance( void );

		void SetActive( bool bActive );
		bool GetActive( void );

		void SetDefault( bool bDefault );
		bool GetDefault( void );

		void SetRemoved( bool bRemoved );
		bool GetRemoved( void );

		virtual void SetPath( const mxTCHAR* szPath );
		CTString& GetPath( void );

		CIODeviceFile& Open( unsigned long ulAccessRequired, unsigned long ulShareMode, unsigned long ulAttributes );
		void Close( void );

		CIODeviceFile* GetDeviceFile( void );

		//--------------------------------------------------------------------------------
		class CDeviceSession
		{
		public:

			CDeviceSession( CDeviceInterface& Interface, unsigned long ulAccessRequired, unsigned long ulShareMode, unsigned long ulAttributes );
			~CDeviceSession();

			__QOR_DECLARE_OCLASS_ID( CDeviceInterface::CDeviceSession );

		private:

			CDeviceInterface& m_Interface;

			CDeviceSession();
			CDeviceSession( const CDeviceSession& src );
			CDeviceSession& operator = ( const CDeviceSession& src );
		};

	protected:
				
		bool m_bActive;
		bool m_bDefault;
		bool m_bRemoved;
		CDeviceInstance* m_pInstance;
		CDeviceInterfaceClass* m_pClass;
		unsigned long m_ulIndex;
		CTString m_strPath;		
		unsigned long m_ulUsageCount;
		
		CIODeviceFile* m_pDeviceFile;
	};

}//nsWin32

#endif//WINQL_DEVICEINTERFACE_H_3
