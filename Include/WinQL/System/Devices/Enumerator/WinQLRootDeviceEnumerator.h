//WinQLRootDeviceEnumerator.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Win32 Root Device Enumerator

#ifndef WINQL_ROOTDEVICEENUMERATOR_H_3
#define WINQL_ROOTDEVICEENUMERATOR_H_3

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma __QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/CodeServices/Handles/WinQLHandle.h"
#include "WinQL/System/Devices/Instances/WinQLDeviceInstanceCollection.h"
#include "WinQL/System/Devices/Enumerator/WinQLDeviceEnumerator.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	class __QOR_INTERFACE( __WINQAPI ) CSetupAPI;
}//nsWinQAPI

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	//An enumerator for device enumerators
	class __QOR_INTERFACE( __WINQL ) CRootDeviceEnumerator
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CRootDeviceEnumerator );

		typedef nsCodeQOR::CTLRef< CRootDeviceEnumerator > refType;

		CRootDeviceEnumerator();
		CRootDeviceEnumerator( const CRootDeviceEnumerator& src );
		CRootDeviceEnumerator& operator = ( const CRootDeviceEnumerator& src );
		virtual ~CRootDeviceEnumerator();

		unsigned int Enumerate( void );

		//--------------------------------------------------------------------------------
		refType Ref( void )
		{
			return refType( this );
		}
		/*
		//--------------------------------------------------------------------------------
		class CIterator
		{
		public:

			//--------------------------------------------------------------------------------
			CIterator( CRootDeviceEnumerator& RDE, unsigned int uiIndex = 0 ) : m_RDE( RDE )
			{
				m_uiIndex = uiIndex;
			}

			//--------------------------------------------------------------------------------
			CIterator( const CIterator& src ) : m_RDE( src.m_RDE )
			{
				*this = src;
			}

			//--------------------------------------------------------------------------------
			CIterator& operator = ( const CIterator& src )
			{
				m_uiIndex = src.m_uiIndex;
				return *this;
			}

			//--------------------------------------------------------------------------------
			~CIterator()
			{
			}

			//--------------------------------------------------------------------------------
			bool operator == ( const CIterator& cmp )
			{
				return m_uiIndex == cmp.m_uiIndex;
			}

			//--------------------------------------------------------------------------------
			bool operator != ( const CIterator& cmp )
			{
				return m_uiIndex != cmp.m_uiIndex;
			}

			//--------------------------------------------------------------------------------
			CDeviceEnumerator::refType operator *()
			{
				CDeviceEnumerator::refType Ref( m_RDE.m_EnumeratorMap[ m_uiIndex ].Second(), false );
				return Ref;
			}

			//--------------------------------------------------------------------------------
			CDeviceEnumerator::refType operator->()
			{
				return m_RDE.m_EnumeratorMap[ m_uiIndex ].Second();
			}

			//--------------------------------------------------------------------------------
			CIterator& operator++( void )
			{
				if( m_uiIndex < m_RDE.m_EnumeratorMap.Size() )
				{
					++m_uiIndex;
				}
				return *this;
			}

			//--------------------------------------------------------------------------------
			CIterator& operator--( void )
			{
				if( m_uiIndex > 0 )
				{
					--m_uiIndex;
				}
				return *this;
			}

		private:

			unsigned int m_uiIndex;
			CRootDeviceEnumerator& m_RDE;
		};

		friend class CIterator;

		CIterator begin( void );
		CIterator end( void );
		*/
	private:

		nsWinQAPI::CSetupAPI& m_Library;
		//nsCodeQOR::CTMap< CTString, CDeviceEnumerator* > m_EnumeratorMap;
	};

}//nsWin32

#endif//WINQL_ROOTDEVICEENUMERATOR_H_3
