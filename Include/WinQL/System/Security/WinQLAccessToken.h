//WinQLAccessToken.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Win32 Security Access Token

#ifndef WINQL_SECURITY_ACCESTOKEN_H_3
#define WINQL_SECURITY_ACCESTOKEN_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/Definitions/Security.h"
#include "WinQL/Application/Process/WinQLProcess.h"
#include "WinQL/Application/Threading/WinQLThread.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	class __QOR_INTERFACE( __WINQAPI ) CAdvAPI32;
}

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	enum TokenInformationClass 
	{
		TokenUser = 1,
		TokenGroups,
		TokenPrivileges,
		TokenOwner,
		TokenPrimaryGroup,
		TokenDefaultDacl,
		TokenSource,
		TokenType,
		TokenImpersonationLevel,
		TokenStatistics,
		TokenRestrictedSids,
		TokenSessionId,
		TokenGroupsAndPrivileges,
		TokenSessionReference,
		TokenSandBoxInert,
		TokenAuditPolicy,
		TokenOrigin,
		TokenElevationType,
		TokenLinkedToken,
		TokenElevation,
		TokenHasRestrictions,
		TokenAccessInformation,
		TokenVirtualizationAllowed,
		TokenVirtualizationEnabled,
		TokenIntegrityLevel,
		TokenUIAccess,
		TokenMandatoryPolicy,
		TokenLogonSid,
		MaxTokenInfoClass  // MaxTokenInfoClass should always be the last enum
	};

	//--------------------------------------------------------------------------------
	enum eTokenType
	{
		TokenPrimary = 1,
		TokenImpersonation
	};
	//typedef TOKEN_TYPE *PTOKEN_TYPE;

	//--------------------------------------------------------------------------------
	typedef struct _TOKEN_PRIVILEGES 
	{
		unsigned long PrivilegeCount;
		LUID_AND_ATTRIBUTES Privileges[ 1 ];
	} TOKEN_PRIVILEGES, *PTOKEN_PRIVILEGES;

	//--------------------------------------------------------------------------------
	/*An access token is an object that describes the security context of a process or
	thread. The information in a token includes the identity and privileges of the 
	user account associated with the process or thread. When a user logs on, the 
	system verifies the user's password by comparing it with information stored in a 
	security database. If the password is authenticated, the system produces an access 
	token. Every process executed on behalf of this user has a copy of this access token.*/
	class __QOR_INTERFACE( __WINQL ) CAccessToken
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CAccessToken );

		CAccessToken( void* TokenHandle );
        CAccessToken( nsWin32::CProcess& Process, unsigned long dwDesiredAccess );
        CAccessToken( CThread& Thread, unsigned long dwDesiredAccess, bool bOpenAsSelf );
		CAccessToken( const CAccessToken& src, nsWin32::SECURITY_IMPERSONATION_LEVEL ImpersonationLevel );
		CAccessToken( const CAccessToken& src, unsigned long dwDesiredAccess, nsWin32::LPSECURITY_ATTRIBUTES lpTokenAttributes, nsWin32::SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, nsWin32::eTokenType TokenType );
		CAccessToken( const CAccessToken& src, unsigned long Flags, unsigned long DisableSidCount, nsWin32::PSID_AND_ATTRIBUTES SidsToDisable, unsigned long DeletePrivilegeCount, nsWin32::PLUID_AND_ATTRIBUTES PrivilegesToDelete, unsigned long RestrictedSidCount, nsWin32::PSID_AND_ATTRIBUTES SidsToRestrict );
		virtual ~CAccessToken();

		bool AdjustGroups( bool ResetToDefault, nsWin32::PTOKEN_GROUPS NewState, unsigned long BufferLength, nsWin32::PTOKEN_GROUPS PreviousState, unsigned long* ReturnLength );
		bool AdjustPrivileges( bool DisableAllPrivileges, nsWin32::PTOKEN_PRIVILEGES NewState, unsigned long BufferLength, nsWin32::PTOKEN_PRIVILEGES PreviousState, unsigned long* ReturnLength, int& bAllSuccess );
		bool CheckMembership( void* SidToCheck, int* IsMember );
		bool PrivilegeCheck( nsWin32::PPRIVILEGE_SET RequiredPrivileges, int* pfResult );
		bool GetInformation( nsWin32::TokenInformationClass TokenInformationClass, void* TokenInformation, unsigned long TokenInformationLength, unsigned long* ReturnLength );
		bool SetInformation( nsWin32::TokenInformationClass TokenInformationClass, void* TokenInformation, unsigned long TokenInformationLength );
		bool IsRestricted( void );
		bool IsUntrusted( void );
		const CHandle& Handle( void ) const;
		bool LookupPrivilegeValueT( const TCHAR* lpSystemName, const TCHAR* lpName, nsWin32::PLUID lpLuid );

	protected:

		CHandle m_TokenHandle;

	private:

		CAccessToken();//no defualt constructor
		CAccessToken( const CAccessToken& src );//no copy constructor
		CAccessToken& operator=( const CAccessToken& src );//no assignment operator

		nsWinQAPI::CAdvAPI32& m_AdvAPI32Library;

	};

}//nsWin32

#endif//WINQL_SECURITY_ACCESTOKEN_H_3
