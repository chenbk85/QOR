//WinQLImpersonation.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Win32 Security Impersonation sessions

#ifndef WINQL_SECURITY_IMPERSON_H_3
#define WINQL_SECURITY_IMPERSON_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/Definitions/Security.h"
#include "WinQL/CodeServices/Handles/WinQLHandle.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	class __QOR_INTERFACE( __WINQAPI ) CAdvAPI32;
}

//--------------------------------------------------------------------------------
namespace nsWin32
{
	class __QOR_INTERFACE( __WINQL ) CThread;

	//--------------------------------------------------------------------------------
	//Base class only for Impersonation Sessions
	class __QOR_INTERFACE( __WINQL ) CImpersonationSession
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CImpersonationSession );

	protected:		

		CImpersonationSession();
		virtual ~CImpersonationSession();

		bool m_bInSession;
		nsWinQAPI::CAdvAPI32& m_AdvAPI32Library;

	private:

		CImpersonationSession( const CImpersonationSession& src );//no copy constructor
		CImpersonationSession& operator=( const CImpersonationSession& src );//no assignment operator
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CSelfImpersonationSession : public CImpersonationSession
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CSelfImpersonationSession );

		CSelfImpersonationSession( nsWin32::SECURITY_IMPERSONATION_LEVEL ImpersonationLevel );
		virtual ~CSelfImpersonationSession();

	private:

		CSelfImpersonationSession();//no to be implemented
		CSelfImpersonationSession( const CSelfImpersonationSession& src );//not to be implemented
		CSelfImpersonationSession& operator=( const CSelfImpersonationSession& src );//not to be implemented
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CNamedPipeClientImpersonationSession : public CImpersonationSession
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CNamedPipeClientImpersonationSession );

		CNamedPipeClientImpersonationSession( void* hNamedPipe );
		virtual ~CNamedPipeClientImpersonationSession();

	private:

		CNamedPipeClientImpersonationSession();//not to be implemeted
		CNamedPipeClientImpersonationSession( const CNamedPipeClientImpersonationSession& src );//not to be implemented
		CNamedPipeClientImpersonationSession& operator=( const CNamedPipeClientImpersonationSession& src );//not to be implemented
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CLoggedOnUserImpersonationSession : public CImpersonationSession
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CLoggedOnUserImpersonationSession );

		CLoggedOnUserImpersonationSession( CHandle& hToken );
		virtual ~CLoggedOnUserImpersonationSession();

	private:

		CLoggedOnUserImpersonationSession();//not to be implemeted
		CLoggedOnUserImpersonationSession( const CLoggedOnUserImpersonationSession& src );//not to be implemented
		CLoggedOnUserImpersonationSession& operator=( const CLoggedOnUserImpersonationSession& src );//not to be implemented

	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CAnonymousImpersonationSession : public CImpersonationSession
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CAnonymousImpersonationSession );

		CAnonymousImpersonationSession( CThread& Thread );
		virtual ~CAnonymousImpersonationSession();

	private:

		CAnonymousImpersonationSession();//not to be implemeted
		CAnonymousImpersonationSession( const CAnonymousImpersonationSession& src );//not to be implemented
		CAnonymousImpersonationSession& operator=( const CAnonymousImpersonationSession& src );//not to be implemented

	};


}//nsWin32

#endif//WINQL_SECURITY_IMPERSON_H_3
