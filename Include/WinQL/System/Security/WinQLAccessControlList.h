//WinQLAccessControlList.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Win32 Security Access Control List

#ifndef WINQL_SECURITY_ACCESSCTRLLIST_H_3
#define WINQL_SECURITY_ACCESSCTRLLIST_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma __QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/System/Security/WinQLExplicitAccess.h"
#include "WinQL/System/Security/WinQLSecurityDescriptor.h"
#include "WinQL/System/Security/WinQLLocalSecAuthority.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	enum ACLInformationClass
	{
		eAclRevisionInformation = 1,
		eAclSizeInformation
	};

	//--------------------------------------------------------------------------------
	struct ACLRevisionInformation 
	{
		unsigned long AclRevision;
	};

	//--------------------------------------------------------------------------------
	struct ACLSizeInformation 
	{
		unsigned long AceCount;
		unsigned long AclBytesInUse;
		unsigned long AclBytesFree;
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CAccessControlList
	{

	public:

		__QOR_DECLARE_OCLASS_ID( CAccessControlList );

		CAccessControlList();
		CAccessControlList( const CAccessControlList& src );
		CAccessControlList( unsigned long cCountOfExplicitEntries, nsWin32::ExplicitAccess* pListOfExplicitEntries );		
		CAccessControlList& operator=( const CAccessControlList& src );
		virtual ~CAccessControlList();

		unsigned long SetEntries( unsigned long cCountOfExplicitEntries, nsWin32::ExplicitAccess* pListOfExplicitEntries );
		bool AddAccessAllowedAce( unsigned long dwAceRevision, unsigned long AccessMask, void* pSid );
		bool AddAccessAllowedAceEx( unsigned long dwAceRevision, unsigned long AceFlags, unsigned long AccessMask, void* pSid );
		bool AddAccessAllowedObjectAce( unsigned long dwAceRevision, unsigned long AceFlags, unsigned long AccessMask, nsWin32::GUID* ObjectTypeGuid, nsWin32::GUID* InheritedObjectTypeGuid, void* pSid );
		bool AddAccessDeniedAce( unsigned long dwAceRevision, unsigned long AccessMask, void* pSid );
		bool AddAccessDeniedAceEx( unsigned long dwAceRevision, unsigned long AceFlags, unsigned long AccessMask, void* pSid );
		bool AddAccessDeniedObjectAce( unsigned long dwAceRevision, unsigned long AceFlags, unsigned long AccessMask, nsWin32::GUID* ObjectTypeGuid, nsWin32::GUID* InheritedObjectTypeGuid, void* pSid );
		bool AddAce( unsigned long dwAceRevision, unsigned long dwStartingAceIndex, void* pAceList, unsigned long nAceListLength );
		bool AddAuditAccessAce( unsigned long dwAceRevision, unsigned long dwAccessMask, void* pSid, bool bAuditSuccess, bool bAuditFailure );
		bool AddAuditAccessAceEx( unsigned long dwAceRevision, unsigned long AceFlags, unsigned long dwAccessMask, void* pSid, bool bAuditSuccess, bool bAuditFailure );
		bool AddAuditAccessObjectAce( unsigned long dwAceRevision, unsigned long AceFlags, unsigned long dwAccessMask, nsWin32::GUID* ObjectTypeGuid, nsWin32::GUID* InheritedObjectTypeGuid, void* pSid, bool bAuditSuccess, bool bAuditFailure );
		bool DeleteAce( unsigned long dwAceIndex );
		bool FindFirstFreeAce( void** pAce );
		bool GetAce( unsigned long dwAceIndex, void** pAce );
		unsigned long GetAuditedPermissions( nsWin32::Trustee* pTrustee, unsigned long* pSuccessfulAuditedRights, unsigned long* pFailedAuditRights );
		unsigned long GetEffectiveRights( nsWin32::Trustee* pTrustee, unsigned long* pAccessRights );
		unsigned long GetEntries( unsigned long* pcCountOfExplicitEntries, nsWin32::ExplicitAccess** pListOfExplicitEntries ) const;
		bool GetInformation( void* pAclInformation, unsigned long nAclInformationLength, nsWin32::ACLInformationClass dwAclInformationClass );
		bool Initialize( unsigned long nAclLength, unsigned long dwAclRevision );
		bool IsValid( void );
		bool SetInformation( void* pAclInformation, unsigned long nAclInformationLength, nsWin32::ACLInformationClass dwAclInformationClass );

	private:

		nsWinQAPI::CAdvAPI32& m_AdvAPI32Library;
		AccessControlList* m_pACL;

	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CWindowsAccessControlList
	{
	public:

		//--------------------------------------------------------------------------------
		union uEntryFlags
		{
			struct
			{
				__QCMP_STATIC_CONSTANT( unsigned char, ValidMask = 0x1F );
				unsigned char ObjectInherit : 1;
				unsigned char ContainerInherit: 1;
				unsigned char NoPropagateInherit: 1;
				unsigned char InheritOnly: 1;
				unsigned char Inherited: 1;
			}bitFlags;
			unsigned long ulFlags;
		};

		//--------------------------------------------------------------------------------
		enum ERevision
		{
			Revision1 = 1,
			Revision2 = 2,
			Revision3 = 3,
			Revision_DS = 4,
		};

		__QOR_DECLARE_OCLASS_ID( CWindowsAccessControlList );

		CWindowsAccessControlList();
		CWindowsAccessControlList( const CWindowsAccessControlList& src );
		
		CWindowsAccessControlList( CExplicitAccessArray& src );

		//bool Initialize( unsigned long nAclLength, unsigned long dwAclRevision )

		CWindowsAccessControlList& operator=( const CWindowsAccessControlList& src );
		CWindowsAccessControlList& operator=( CAccessControlList& src );
		CWindowsAccessControlList& operator=( CExplicitAccessArray& src );
		virtual ~CWindowsAccessControlList();

		bool AddAllowedEntry( sAccessMask AccessMask, uEntryFlags Flags, CSID& Sid );
		bool AddDeniedEntry( sAccessMask AccessMask, uEntryFlags Flags, CSID& Sid );


		bool AddAllowedObjectEntry( sAccessMask AccessMask, uEntryFlags Flags, nsWin32::GUID* ObjectTypeGuid, 
			nsWin32::GUID* InheritedObjectTypeGuid, CSID& Sid );

		bool AddDeniedObjectEntry( sAccessMask AccessMask, uEntryFlags Flags, nsWin32::GUID* ObjectTypeGuid, 
			nsWin32::GUID* InheritedObjectTypeGuid, CSID& Sid );

		bool AddEntries( unsigned long ulStartingIndex, void* pData, unsigned long ulDataBytes );        

		bool AddAuditEntry( sAccessMask AccessMask, uEntryFlags Flags, 
			CSID& Sid, bool bAuditSuccess, bool bAuditFailure );

		bool AddAuditObjectEntry( sAccessMask AccessMask, uEntryFlags Flags, nsWin32::GUID* ObjectTypeGuid,
			nsWin32::GUID* InheritedObjectTypeGuid, CSID& Sid, bool bAuditSuccess,
			bool bAuditFailure );

		bool DeleteEntry( unsigned long ulIndex );

		bool FindFirstFreeEntry( void** ppData );
       
		bool GetEntry( unsigned long ulIndex, void** ppEntry );

		unsigned long GetAuditedPermissions( CTrustee& Trustee, 
			sAccessMask& SuccessfulAuditedRights, sAccessMask& FailedAuditRights );

		unsigned long GetEffectiveRights( CTrustee& Trustee, sAccessMask& AccessRights );

		unsigned long GetEntries( CExplicitAccessArray& ArrayOfEntries ) const;

		ERevision GetRevisionInformation( void );
		bool GetSizeInformation( unsigned long& ulEntryCount, unsigned long& ulBytesInUse, unsigned long& ulBytesFree );
		//bool GetInformation( void* pAclInformation, unsigned long nAclInformationLength, ACLInformationClass dwAclInformationClass )
        
		bool IsValid( void );

		bool SetRevisionInformation( ERevision Revision );
		//bool SetInformation( void* pAclInformation, unsigned long nAclInformationLength, ACLInformationClass dwAclInformationClass )

	private:

		ERevision m_Revision;
		CAccessControlList m_Win32ACL;
	};

}//nsWin32

#endif//WINQL_SECURITY_ACCESSCTRLLIST_H_3
			
