//WinQLExplicitAccess.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Win32 Security Access Control Entry

#ifndef WINQL_SECURITY_EXPLICITACCESS_H_3
#define WINQL_SECURITY_EXPLICITACCESS_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma __QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/WinQL.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "CodeQOR/DataStructures/TArray.h"
#include "WinQL/System/Security/WinQLTrustee.h"
#include "WinQL/CodeServices/WinQLPolicy.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	enum AccessMode
	{
		NOT_USED_ACCESS = 0,
		GRANT_ACCESS,
		SET_ACCESS,
		DENY_ACCESS,
		REVOKE_ACCESS,
		SET_AUDIT_SUCCESS,
		SET_AUDIT_FAILURE
	};

	//--------------------------------------------------------------------------------
	struct ExplicitAccess
	{
		unsigned long grfAccessPermissions;
		AccessMode  grfAccessMode;
		unsigned long grfInheritance;
		Trustee Trustee;
	};

	bool operator != ( const ExplicitAccess& Ac1, const ExplicitAccess& Ac2 );

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CExplicitAccessArray : public nsCodeQOR::CTArray< ExplicitAccess, CWinQLPolicy >
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CExplicitAccessArray );

		CExplicitAccessArray( unsigned long ulSize );
		~CExplicitAccessArray();
		virtual void Append( void );
		void BuildItem( unsigned long ulIndex, TCHAR* pTrusteeName, unsigned long AccessPermissions, nsWin32::AccessMode AccessMode, unsigned long Inheritance );
		bool BuiltItem( unsigned long ulIndex, unsigned long grfAccessPermissions, nsWin32::AccessMode grfAccessMode, unsigned long grfInheritance, Trustee& Trustee );

	private:

		nsWinQAPI::CAdvAPI32& m_AdvAPI32Library;

		CExplicitAccessArray();//not to be implemented
		__QCS_DECLARE_NONCOPYABLE( CExplicitAccessArray );
	};

}//nsWin32

#endif//WINQL_SECURITY_EXPLICITACCESS_H_3
