//WinQLFileManagement.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_FILEMNGMNT_H_1
#define WINQL_FILEMNGMNT_H_1

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/Application/Threading/WinQLThread.h"
#include "WinQL/System/Devices/WinQLDevice.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	
	//--------------------------------------------------------------------------------
	typedef enum _GET_FILEEX_INFO_LEVELS 
	{
		GetFileExInfoStandard,
		GetFileExMaxInfoLevel
	} GET_FILEEX_INFO_LEVELS;

	//--------------------------------------------------------------------------------
	typedef unsigned long ( __QCMP_STDCALLCONVENTION *LPPROGRESS_ROUTINE )( LARGE_INTEGER TotalFileSize, LARGE_INTEGER TotalBytesTransferred, LARGE_INTEGER StreamSize, LARGE_INTEGER StreamBytesTransferred, unsigned long dwStreamNumber, unsigned long dwCallbackReason, void* hSourceFile, void* hDestinationFile, void* lpData );
	
	static const int OfenFileStructMaxPathName = 128;

	//--------------------------------------------------------------------------------
	typedef struct _OFSTRUCT 
	{
		unsigned char cBytes;
		unsigned char fFixedDisk;
		unsigned short nErrCode;
		unsigned short Reserved1;
		unsigned short Reserved2;
		char szPathName[ OfenFileStructMaxPathName ];
	} OFSTRUCT, *LPOFSTRUCT, *POFSTRUCT;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CFileHelper
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CFileHelper );
			
		CFileHelper( void );
		~CFileHelper( void );
		bool AreApisANSI( void );
		bool CancelSynchronousIo( nsWin32::CThread& Thread );
		bool CheckNameLegalDOS8Dot3T( const TCHAR* lpName, char* lpOemName, unsigned long OemNameSize, int* pbNameContainsSpaces, int* pbNameLegal );
		bool Copy( const TCHAR* lpExistingFileName, const TCHAR* lpNewFileName, bool bFailIfExists );
		bool Copy( const TCHAR* lpExistingFileName, const TCHAR* lpNewFileName, nsWin32::LPPROGRESS_ROUTINE lpProgressRoutine, void* lpData, int* pbCancel, unsigned long dwCopyFlags );
		bool CopyTransacted( const TCHAR* lpExistingFileName, const TCHAR* lpNewFileName, nsWin32::LPPROGRESS_ROUTINE lpProgressRoutine, void* lpData, int* pbCancel, unsigned long dwCopyFlags, void* hTransaction );
		bool CreateHardLinkT( const TCHAR* lpFileName, const TCHAR* lpExistingFileName, nsWin32::LPSECURITY_ATTRIBUTES lpSecurityAttributes );
		bool CreateHardLinkTransactedT( const TCHAR* lpFileName, const TCHAR* lpExistingFileName, nsWin32::LPSECURITY_ATTRIBUTES lpSecurityAttributes, void* hTransaction );
		bool CreateSymbolicLinkT( const TCHAR* lpSymlinkFileName, const TCHAR* lpTargetFileName, unsigned long dwFlags );
		bool CreateSymbolicLinkTransactedT( const TCHAR* lpSymlinkFileName, const TCHAR* lpTargetFileName, unsigned long dwFlags, void* hTransaction );
		bool Delete( const TCHAR* lpFileName );
		bool DeleteTransacted( const TCHAR* lpFileName, void* hTransaction );
		bool GetBinaryTypeT( const TCHAR* lpApplicationName, unsigned long* lpBinaryType );
		unsigned long GetCompressedSize( const TCHAR* lpFileName, unsigned long* lpFileSizeHigh );
		unsigned long GetCompressedSizeTransacted( const TCHAR* lpFileName, unsigned long* lpFileSizeHigh, void* hTransaction );
		int GetExpandedNameT( TCHAR* lpszSource, TCHAR* lpszBuffer );
		unsigned long GetAttributes( const TCHAR* lpFileName );
		bool GetAttributes( const TCHAR* lpFileName, nsWin32::GET_FILEEX_INFO_LEVELS fInfoLevelId, void* lpFileInformation );
		bool GetAttributesTransacted( const TCHAR* lpFileName, nsWin32::GET_FILEEX_INFO_LEVELS fInfoLevelId, void* lpFileInformation, void* hTransaction );
		unsigned long GetFullPathNameT( const TCHAR* lpFileName, unsigned long nBufferLength, TCHAR* lpBuffer, TCHAR** lpFilePart );
		unsigned long GetFullPathNameTransactedT( const TCHAR* lpFileName, unsigned long nBufferLength, TCHAR* lpBuffer, TCHAR** lpFilePart, void* hTransaction );
		unsigned long GetLongPathNameT( const TCHAR* lpszShortPath, TCHAR* lpszLongPath, unsigned long cchBuffer );
		unsigned long GetLongPathNameTransactedT( const TCHAR* lpszShortPath, TCHAR* lpszLongPath, unsigned long cchBuffer, void* hTransaction );
		unsigned long GetShortPathNameT( const TCHAR* lpszLongPath, TCHAR* lpszShortPath, unsigned long cchBuffer );
		unsigned int GetTempName( const TCHAR* lpPathName, const TCHAR* lpPrefixString, unsigned int uUnique, TCHAR* lpTempFileName );
		unsigned long GetTempPathT( unsigned long nBufferLength, TCHAR* lpBuffer );
		bool Move( const TCHAR* lpExistingFileName, const TCHAR* lpNewFileName );
		bool Move( const TCHAR* lpExistingFileName, const TCHAR* lpNewFileName, unsigned long dwFlags );
		bool MoveTransacted( const TCHAR* lpExistingFileName, const TCHAR* lpNewFileName, nsWin32::LPPROGRESS_ROUTINE lpProgressRoutine, void* lpData, unsigned long dwFlags, void* hTransaction );
		bool MoveWithProgress( const TCHAR* lpExistingFileName, const TCHAR* lpNewFileName, nsWin32::LPPROGRESS_ROUTINE lpProgressRoutine, void* lpData, unsigned long dwFlags );
		bool Replace( const TCHAR* lpReplacedFileName, const TCHAR* lpReplacementFileName, const TCHAR* lpBackupFileName, unsigned long dwReplaceFlags, void* lpExclude, void* lpReserved );
		unsigned long SearchPathT( const TCHAR* lpPath, const TCHAR* lpFileName, const TCHAR* lpExtension, unsigned long nBufferLength, TCHAR* lpBuffer, TCHAR** lpFilePart );
		void SetApisToANSI( void );
		void SetApisToOEM( void );
		bool SetAttributes( const TCHAR* lpFileName, unsigned long dwFileAttributes );
		bool SetAttributesTransacted( const TCHAR* lpFileName, unsigned long dwFileAttributes, void* hTransaction );
		bool Wow64DisableWow64FsRedirection( void** OldValue );
		unsigned char Wow64EnableWow64FsRedirection( unsigned char Wow64FsEnableRedirection );
		bool Wow64RevertWow64FsRedirection( void* OldValue );
		unsigned int SetHandleCount( unsigned int uNumber );

	};

}//nsWin32

#endif//WINQL_FILEMNGMNT_H_1
