//WinQLCodePage.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Win32 Code Page

#ifndef WINQL_CS_TXT_CODEPAGE_H_3
#define WINQL_CS_TXT_CODEPAGE_H_3

#include "WinQL/CodeServices/Text/WinQLStringServices.h"
#include "WinQL/Application/ErrorSystem/WinQLFunctionContext.h"
#include "WinQL/Application/I18n/WinQLI18n.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CCodePage
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CCodePage );

		//  Code Page Default Values.
		__QCMP_STATIC_CONSTANT( unsigned int, ACP                    = 0 );			// default to ANSI code page
		__QCMP_STATIC_CONSTANT( unsigned int, OEMCP                  = 1 );          // default to OEM  code page
		__QCMP_STATIC_CONSTANT( unsigned int, MACCP                  = 2 );          // default to MAC  code page
		__QCMP_STATIC_CONSTANT( unsigned int, THREAD_ACP             = 3 );          // current thread's ANSI code page
		__QCMP_STATIC_CONSTANT( unsigned int, IBM037				 = 37 );		 // IBM EBCDIC US-Canada
		__QCMP_STATIC_CONSTANT( unsigned int, SYMBOL                 = 42 );         // SYMBOL translations
		__QCMP_STATIC_CONSTANT( unsigned int, IBM437				 = 437 );		 // OEM United States
		__QCMP_STATIC_CONSTANT( unsigned int, IBM500				 = 500 );		 // IBM EBCDIC International
		__QCMP_STATIC_CONSTANT( unsigned int, ASMO_708				 = 708 );		 // Arabic (ASMO 708)

		__QCMP_STATIC_CONSTANT( unsigned int, UTF7                   = 65000 );      // UTF-7 translation
		__QCMP_STATIC_CONSTANT( unsigned int, UTF8                   = 65001 );       // UTF-8 translation

		//--------------------------------------------------------------------------------
		CCodePage( unsigned int uiPageID = ACP ) : m_uiPage( uiPageID )
		{
			_WINQ_FCONTEXT( "CCodePage::CCodePage" );
		}

		//--------------------------------------------------------------------------------
		~CCodePage()
		{
			_WINQ_FCONTEXT( "CCodePage::~CCodePage" );
		}

		//--------------------------------------------------------------------------------
		CCodePage& operator = ( const CCodePage& Src )
		{
			_WINQ_FCONTEXT( "CCodePage::operator = " );
			m_uiPage = Src.m_uiPage;
			return *this;
		}

		//--------------------------------------------------------------------------------
		unsigned int ID() const
		{
			return m_uiPage;
		}

		//--------------------------------------------------------------------------------
		operator unsigned int()
		{
			return m_uiPage;
		}

		//--------------------------------------------------------------------------------
		nsCodeQOR::CTLRef< CPInfo > GetInfo( void )
		{
			_WINQ_FCONTEXT( "CCodePage::GetInfo" );
			return m_Win32LocaleHelper.GetCPInfo( *this );
		}

		//--------------------------------------------------------------------------------
		nsCodeQOR::CTLRef< CPInfoEx > GetInfoEx( CPInfoEx& InfoEx )
		{
			_WINQ_FCONTEXT( "CCodePage::GetInfoEx" );
			return m_Win32LocaleHelper.GetCPInfoExT( *this );
		}

		//--------------------------------------------------------------------------------
		bool IsDBCSLeadByteEx( unsigned char TestByte )
		{
			_WINQ_FCONTEXT( "CCodePage::IsDBCSLeadByteEx" );
			bool bResult = m_Win32StringHelper.IsDBCSLeadByteEx( m_uiPage, TestByte ) ? true : false;
			return bResult;
		}

		//--------------------------------------------------------------------------------
		int CompareString( unsigned long Locale, unsigned long dwCmpFlags, const TCHAR* lpString1, int cchCount1, const TCHAR* lpString2, int cchCount2 )
		{
			_WINQ_FCONTEXT( "CCodePage::CompareString" );
			int iResult = m_Win32StringHelper.CompareStringT( Locale, dwCmpFlags, lpString1, cchCount1, lpString2, cchCount2 );
			return iResult;
		}

		//--------------------------------------------------------------------------------
		int MultiByteToWideChar( unsigned long dwFlags, const char* lpMultiByteStr, int cbMultiByte, wchar_t* lpWideCharStr, int cchWideChar )
		{
			_WINQ_FCONTEXT( "CCodePage::MultiByteToWideChar" );
			int iResult = m_Win32StringHelper.MultiByteToWideChar( m_uiPage, dwFlags, lpMultiByteStr, cbMultiByte, lpWideCharStr, cchWideChar );
			return iResult;
		}

		//--------------------------------------------------------------------------------
		int WideCharToMultiByte( unsigned long dwFlags, const wchar_t* lpWideCharStr, int cchWideChar, char* lpMultiByteStr, int cbMultiByte, const char* lpDefaultChar, int* lpUsedDefaultChar )
		{
			_WINQ_FCONTEXT( "CCodePage::WideCharToMultiByte" );
			int iResult = m_Win32StringHelper.WideCharToMultiByte( m_uiPage, dwFlags, lpWideCharStr, cchWideChar, lpMultiByteStr, cbMultiByte, lpDefaultChar, lpUsedDefaultChar );
			return iResult;
		}

		//--------------------------------------------------------------------------------
		char* CharNextA( const char* lpCurrentChar, unsigned long dwFlags )
		{
			_WINQ_FCONTEXT( "CCodePage::CharNextA" );
			char* strResult = m_Win32StringHelper.CharNextExA( static_cast< unsigned short >( m_uiPage ), lpCurrentChar, dwFlags );
			return strResult;
		}

		//--------------------------------------------------------------------------------
		char* CharPrevA( const char* lpStart, const char* lpCurrentChar, unsigned long dwFlags )
		{
			_WINQ_FCONTEXT( "CCodePage::CharPrevA" );
			char* strResult = m_Win32StringHelper.CharPrevExA( static_cast< unsigned short >( m_uiPage ), lpStart, lpCurrentChar, dwFlags );
			return strResult;
		}

		char* Convert( CCodePage& toCP, const char* lpSrcStr, int* pcchSrc, char* lpDestStr, int cchDest );

	protected:

		unsigned int m_uiPage;

	private:

		nsWin32::CStringHelper m_Win32StringHelper;
		nsWin32::CLocaleHelper m_Win32LocaleHelper;
	};

}//nsWin32

#endif//WINQL_CS_TXT_CODEPAGE_H_3
