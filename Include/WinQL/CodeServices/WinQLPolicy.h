//WinQLPolicy.h

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//WinQL Policy object
//The policy class for up integrating the Win32 QOR library
#ifndef WINQL_POLICY_H_3
#define WINQL_POLICY_H_3

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
	class __QOR_INTERFACE( __CODEQOR ) CDefaultSource;
}

//--------------------------------------------------------------------------------
namespace nsWin32
{
	class __QOR_INTERFACE( __WINQL ) CCriticalSection;
	class __QOR_INTERFACE( __WINQL ) CCriticalSectionLock;
	class __QOR_INTERFACE( __WINQL ) CCriticalLock;
	class __QOR_INTERFACE( __WINQL ) CMutex;
	class __QOR_INTERFACE( __WINQL ) CSemaphore;
}//nsWin32

#undef USE_WINQL_POLICY

#ifdef __QORLIB
#	if( QOR_SYS_OS ==QOR_SYS_MSW )
#		define USE_WINQL_POLICY	1
#	endif
#endif

#ifdef __WINQL
#	define USE_WINQL_POLICY	1
#endif

//--------------------------------------------------------------------------------
class __QOR_INTERFACE( __WINQL ) CWinQLPolicy
{

public:

	//default container initial sizes
	__QCMP_STATIC_CONSTANT( unsigned long, DEFAULT_INITIAL_ARRAY_SIZE = 20 );

	//Error system parameters
	__QCMP_STATIC_CONSTANT( unsigned char, MAX_ERROR_PARAMETERS = 10 );

	//Synchronization policy
	typedef nsWin32::CSemaphore				TThreadSyncMultiPrimitive;
	typedef nsWin32::CMutex					TThreadWaitableSinglePrimitive;	
	typedef nsWin32::CCriticalSection		TThreadSyncSinglePrimitive;
	typedef nsWin32::CCriticalSectionLock	TThreadSyncSingleLock;
	typedef nsWin32::CCriticalLock			TThreadLock;

	//Default raw memory allocator
	typedef nsCodeQOR::CDefaultSource		TAllocationSource;
		
};

#if( USE_WINQL_POLICY == 1 )
namespace nsWin32
{
	typedef ::CWinQLPolicy CPolicy;
}
#endif

#endif//WINQL_POLICY_H_3
