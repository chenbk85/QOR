//WinQLThreadLocaleInfo.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Win32 Thread Locale Information

#ifndef WINQL_CS_TXT_LC_TLOCINFO_H_3
#define WINQL_CS_TXT_LC_TLOCINFO_H_3

#include "WinQL/CodeServices/Locale/WinQLLCID.h"
#include "WinQL/CodeServices/Locale/WinQLLocaleConv.h"
#include "WinQL/CodeServices/Locale/WinQLLocaleDateTime.h"
#include "WinQL/CodeServices/Locale/WinQLCharData.h"
#include "WinQL/CodeServices/Text/WinQLCodePage.h"
#include "WinQL/CodeServices/Locale/WinQLSetLoc.h"
#include "WinQL/Application/Threading/WinQLSynchronization.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CThreadLocaleInfo
	{
	public:

		__QCMP_STATIC_CONSTANT( int, CTabSize = 257 );

		//--------------------------------------------------------------------------------
		struct CLocaleCategory
		{
			//--------------------------------------------------------------------------------
			char*& Locale()
			{
				return m_szLocale;
			}

			//--------------------------------------------------------------------------------
			wchar_t*& wLocale()
			{
				return m_wzLocale;
			}

			//--------------------------------------------------------------------------------
			nsWin32::shared_long*& RefCount()
			{
				return m_pRefCount;
			}

			//--------------------------------------------------------------------------------
			long AddRef()
			{
				return m_pRefCount->operator ++();
			}

			//--------------------------------------------------------------------------------
			long Release()
			{
				return m_pRefCount->operator --();				
			}

			//--------------------------------------------------------------------------------
			nsWin32::shared_long*& wRefCount()
			{
				return m_pwRefCount;
			}

			//--------------------------------------------------------------------------------
			long wAddRef()
			{
				return m_pwRefCount->operator ++();
			}

			//--------------------------------------------------------------------------------
			long wRelease()
			{
				return m_pwRefCount->operator --();
			}

			//--------------------------------------------------------------------------------
			const char*& Name()
			{
				return m_CatName;
			}

			//--------------------------------------------------------------------------------
			char*& CatLocale()
			{
				return m_szCatLocale;
			}
			
			typedef int( __QCMP_THISCALL CThreadLocaleInfo::*PTR_THREADLOCALEINITFUNC )( void ) ;

			//--------------------------------------------------------------------------------
			PTR_THREADLOCALEINITFUNC& Init()
			{
				return m_InitFunc;
			}

			const char*		m_CatName;
			char*			m_szLocale;
			int ( CThreadLocaleInfo::* m_InitFunc )( void );			

			wchar_t*		m_wzLocale;
			nsWin32::shared_long*	m_pRefCount;
			nsWin32::shared_long*	m_pwRefCount;			
			char*			m_szCatLocale;

		};

		CThreadLocaleInfo();
		virtual ~CThreadLocaleInfo();

		CThreadLocaleInfo& operator=( const CThreadLocaleInfo& Src );

		void AddLocaleRef();
		void* RemoveLocaleRef();
		char* SetLocaleNoLock( int iCategory, const char* pchLocale );
		void Free();
		CThreadLocaleInfo* UpdateExNoLock( CThreadLocaleInfo* pptlocid );

		//--------------------------------------------------------------------------------
		long AddRef()
		{
			return m_RefCount++;
		}

		//--------------------------------------------------------------------------------
		long Release()
		{
			return m_RefCount--;
		}

		//--------------------------------------------------------------------------------
		long RefCount()
		{			
			return m_RefCount;
		}

		//--------------------------------------------------------------------------------
		void ResetRefCount()
		{
			m_RefCount.Reset();
		}

		//--------------------------------------------------------------------------------
		CCodePage& CodePage()
		{
			return m_CodePage;
		}

		//--------------------------------------------------------------------------------
		unsigned int& CollationCodePage()
		{
			return m_uiCollationCodePage;
		}

		//--------------------------------------------------------------------------------
		unsigned long& Handle( unsigned int iIndex )
		{
			if( iIndex < 6 )
			{
				return m_Handles[ iIndex ];
			}
			//TODO:Error;
			return m_Handles[ 0 ];//TODO:Wrong
		}

		//--------------------------------------------------------------------------------
		unsigned long* Handles()
		{
			return &m_Handles[ 0 ];
		}

		//--------------------------------------------------------------------------------
		CLC_ID& LocaleID( unsigned int iIndex )
		{
			if( iIndex < 6 )
			{
				return m_LocaleIDs[ iIndex ];
			}
			//TODO:Error;
			return m_LocaleIDs[ 0 ];//TODO:Wrong
		}

		//--------------------------------------------------------------------------------
		CLocaleCategory& Category( unsigned int iIndex )
		{
			if( iIndex < 6 )
			{
				return m_Categories[ iIndex ];
			}
			//TODO:Error;
			return m_Categories[ 0 ];//TODO:Wrong
		}

		//--------------------------------------------------------------------------------
		int& CLike()
		{
			return m_CLike;
		}

		//--------------------------------------------------------------------------------
		int& MBCurMax()
		{
			return m_MBCurMax;
		}

		//--------------------------------------------------------------------------------
		nsWin32::shared_long*& Conv_Intl_RefCount()
		{
			return m_pConvIntlRefCount;
		}

		//--------------------------------------------------------------------------------
		long AddRef_Conv_IntlRefCount()
		{
			if( m_pConvIntlRefCount )
			{
				return m_pConvIntlRefCount->operator ++();
			}
			return 0;
		}

		//--------------------------------------------------------------------------------
		long Release_Conv_IntlRefCount()
		{			
			if( m_pConvIntlRefCount )
			{
				return m_pConvIntlRefCount->operator --();
			}
			return 0;
		}

		//--------------------------------------------------------------------------------
		nsWin32::shared_long*& Conv_Num_RefCount()
		{
			return m_pConvNumRefCount;
		}

		//--------------------------------------------------------------------------------
		long AddRef_Conv_NumRefCount()
		{
			if( m_pConvNumRefCount )
			{
				return m_pConvNumRefCount->operator ++();
			}
			return 0;
		}

		//--------------------------------------------------------------------------------
		long Release_Conv_NumRefCount()
		{
			if( m_pConvNumRefCount )
			{
				return m_pConvNumRefCount->operator --();
			}
			return 0;
		}

		//--------------------------------------------------------------------------------
		nsWin32::shared_long*& Conv_Mon_RefCount()
		{
			return m_pConvMonRefCount;
		}

		//--------------------------------------------------------------------------------
		long AddRef_Conv_MonRefCount()
		{
			if( m_pConvMonRefCount )
			{
				return m_pConvMonRefCount->operator ++();
			}
			return 0;
		}

		//--------------------------------------------------------------------------------
		long Release_Conv_MonRefCount()
		{			
			if( m_pConvMonRefCount )
			{
				return m_pConvMonRefCount->operator --();
			}
			return 0;
		}

		//--------------------------------------------------------------------------------
		CLocaleConv*& Conv()
		{
			return m_pConv;
		}

		//--------------------------------------------------------------------------------
		nsWin32::shared_long*& CType1_RefCount()
		{
			return m_pCType1RefCount;
		}

		//--------------------------------------------------------------------------------
		long AddRef_CType1_RefCount()
		{
			if( m_pCType1RefCount )
			{
				return m_pCType1RefCount->operator ++();
			}
			return 0;
		}

		//--------------------------------------------------------------------------------
		long Release_CType1_RefCount()
		{
			if( m_pCType1RefCount )
			{
				return m_pCType1RefCount->operator --();
			}
			return 0;
		}

		//--------------------------------------------------------------------------------
		unsigned short*& CType1()
		{
			return m_pCType1;
		}

		//--------------------------------------------------------------------------------
		const unsigned short*& CType()
		{
			return m_pCType;
		}

		//--------------------------------------------------------------------------------
		const unsigned char*& CLMap()
		{
			return m_pCLMap;
		}

		//--------------------------------------------------------------------------------
		const unsigned char*& CUMap()
		{
			return m_pCUMap;
		}

		//--------------------------------------------------------------------------------
		CLocaleDateTime*& TimeDatePtr()
		{
			return m_pTimeDate;
		}

		static CLocaleCategory m_sDefaultCategory[6];

		// Initialization functions for locale categories
		int __init_collate();
		int __init_ctype();
		int __init_monetary();
		int __init_numeric();
		int __init_time();
		int __init_dummy();
		
		void AddRefAll();
		void ReleaseAll();		

		char* SetLocale_GetAll();

	protected:

		char* SetLocale_SetCat( int category, const char* locale );		
		void FixGrouping( char* grouping );

		nsWin32::shared_long m_RefCount;
		CCodePage m_CodePage;
		unsigned int m_uiCollationCodePage;
		unsigned long m_Handles[6];
		CLC_ID m_LocaleIDs[6];
		CLocaleCategory m_Categories[6];
		int m_CLike;
		int m_MBCurMax;

		nsWin32::shared_long* m_pConvIntlRefCount;
		nsWin32::shared_long* m_pConvNumRefCount;
		nsWin32::shared_long* m_pConvMonRefCount;
		nsWin32::CInterlockedHelper m_InterlockedHelper;

		CLocaleConv* m_pConv;

		nsWin32::shared_long* m_pCType1RefCount;
		unsigned short* m_pCType1;

		const unsigned short* m_pCType;
		const unsigned char* m_pCLMap;
		const unsigned char* m_pCUMap;

		CLocaleDateTime* m_pTimeDate;

	private:

		void _strcats( char* pchOutStr, size_t sizeInBytes, int n, ... );
		int StrToLocale( CLC_STRINGS* names, const char* locale );
		void LocaleToStr( char* pchLocale, size_t sizeInBytes, const CLC_STRINGS* pLC_Names );
		char* ExpandLocale( char* szExpr, char* pchOutput, size_t sizeInChars, CLC_ID* pLocaleID, unsigned int* puiCodePage, int iCategory );

	};

}//nsWin32

#endif//WINQL_CS_TXT_LC_TLOCINFO_H_3
