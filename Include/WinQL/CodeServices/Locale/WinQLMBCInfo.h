//WinQLMBCInfo.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Win32 MultiByte Character Set Info

#ifndef WINQL_CS_TXT_LC_MBCINFO_H_3
#define WINQL_CS_TXT_LC_MBCINFO_H_3

#include <string.h>
#include "WinQL/Application/Threading/WinQLSynchronization.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CMBCInfo
	{
	public:

		__QCMP_STATIC_CONSTANT( int, NUM_ULINFO = 12 );	// multibyte full-width-latin upper/lower info
		__QCMP_STATIC_CONSTANT( int, NUM_CTYPES = 4 );	// table contains 4 types of info
		__QCMP_STATIC_CONSTANT( int, MAX_RANGES = 8 );	// max number of ranges needed given languages so far
		__QCMP_STATIC_CONSTANT( int, _KANJI_CP = 932 );
		__QCMP_STATIC_CONSTANT( int, _CHINESE_SIMP_CP = 936 );
		__QCMP_STATIC_CONSTANT( int, _KOREAN_WANGSUNG_CP = 949 );
		__QCMP_STATIC_CONSTANT( int, _CHINESE_TRAD_CP = 950 );
		__QCMP_STATIC_CONSTANT( int, _KOREAN_JOHAB_CP = 1361 );
		__QCMP_STATIC_CONSTANT( int, _CLOCALECP = 0 );// "C" locale Code page

		// SetMBCPNoLock parameter defines
		__QCMP_STATIC_CONSTANT( int, _MB_CP_SBCS = 0 );
		__QCMP_STATIC_CONSTANT( int, _MB_CP_OEM = -2 );
		__QCMP_STATIC_CONSTANT( int, _MB_CP_ANSI = -3 );
		__QCMP_STATIC_CONSTANT( int, _MB_CP_LOCALE = -4 );
		__QCMP_STATIC_CONSTANT( int, _SBUP = 0x10 );		// SBCS upper char
		__QCMP_STATIC_CONSTANT( int, _SBLOW = 0x20 );		// SBCS lower char
		__QCMP_STATIC_CONSTANT( int, NUM_CHARS = 257 );	// -1 through 255

		CMBCInfo();
		int SetMBCPNoLock( int );

		//--------------------------------------------------------------------------------
		void InitRefCount()
		{
			const long lInit = 1;
			m_RefCount = lInit;
		}

		//--------------------------------------------------------------------------------
		long AddRef()
		{
			return m_RefCount++;			
		}

		//--------------------------------------------------------------------------------
		long Release()
		{
			return m_RefCount--;
		}

		//--------------------------------------------------------------------------------
		int& CodePage()
		{
			return m_MBCodePage;
		}

		//--------------------------------------------------------------------------------
		bool& IsMBCodePage()
		{
			return m_bIsMBCodePage;
		}

		//--------------------------------------------------------------------------------
		int& LcId()
		{
			return m_MBLcId;
		}

		//--------------------------------------------------------------------------------
		unsigned char& MBCType( unsigned char ucIndex )
		{
			return m_MBCType[ ucIndex ];
		}

	protected:

		unsigned short& ULInfo( unsigned int uiIndex )
		{			
			if( uiIndex < 6 )
			{
				return m_MBULInfo[ uiIndex ];
			}
			//TODO:Error
			return m_MBULInfo[ 0 ];
		}

		unsigned char& MBCaseMap( unsigned char ucIndex )
		{
			return m_MBCaseMap[ ucIndex ];
		}


		nsWin32::shared_long m_RefCount;
		int m_MBCodePage;	
		int m_MBLcId;
		bool m_bIsMBCodePage;
		unsigned short m_MBULInfo[6];
		unsigned char m_MBCType[257];
		unsigned char m_MBCaseMap[256];

		static unsigned short sMBULInfo[6];
		static unsigned char sMBCType[257];
		static unsigned char sMBCaseMap[256];

		void setSBCS ();		
		void setSBUpperLower ();
		int CPtoLCID (int codepage);

		//------------------------------------------------------------------------------
		// character type info in ranges (pair of low/high), zeros indicate end
		class CCodePageInfo
		{
		public:
			int             m_iCodePage;
			unsigned short  m_usMBULInfo[NUM_ULINFO];
			unsigned char   m_ucaRange[NUM_CTYPES][MAX_RANGES];
		};

		static CCodePageInfo s_CodePageinfoArray[];

	};

}//nsWin32

#endif//WINQL_CS_TXT_LC_MBCINFO_H_3
