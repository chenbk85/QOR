//WinQLHandleMap.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_CS_DATASTRUCTS_HANDLEMAP_H_1
#define WINQL_CS_DATASTRUCTS_HANDLEMAP_H_1

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma __QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "CodeQOR/DataStructures/TMap.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	//A thread safe map template for mapping handles to objects
	template<class THandle, class TObject>
	class __QOR_INTERFACE( __WINQL ) CTHandleMap : public nsCodeQOR::CTMap< THandle, TObject* >
	{
		typedef nsCodeQOR::CTMap< THandle, TObject* > TBase;
		typedef typename TBase::TItem TItem;

	public:

		//------------------------------------------------------------------------------
		CTHandleMap() : m_pPending( 0 )
		{
		}

		//------------------------------------------------------------------------------
		virtual ~CTHandleMap()
		{
		}

		//------------------------------------------------------------------------------
		TObject* FindHandle( THandle const& handle )
		{
			m_CS.Enter();

			TObject* pT = TBase::Find( handle );

			m_CS.Leave();
			return pT;
		}

		//------------------------------------------------------------------------------
		void Add( THandle const& handle, TObject* pT )
		{
			m_CS.Enter();

			TBase::Insert( handle, pT );

			if( pT == m_pPending )
			{
				m_pPending = 0;
				m_PendingCS.Leave();
			}

			m_CS.Leave();
		}

		//------------------------------------------------------------------------------
		unsigned long IndexOf( const THandle& handle )
		{
			m_CS.Enter();
			nsCodeQOR::CTMapPair< THandle, TObject* > Pair( handle, 0 );
			unsigned long ulIndex = TBase::BaseName::Find( Pair );
			m_CS.Leave();
			return ulIndex;
		}

		//------------------------------------------------------------------------------
		void Remove( THandle const& handle )
		{
			m_CS.Enter();

			TBase::Remove( handle );

			m_CS.Leave();
		}

		//------------------------------------------------------------------------------
		void PendingAdd( TObject* pT )
		{
			m_PendingCS.Enter();
			m_pPending = pT;
		}

		//------------------------------------------------------------------------------
		TObject* Pending()
		{
			return m_pPending;
		}

	private:

		nsWin32::CCriticalSection m_CS;
		nsWin32::CCriticalSection m_PendingCS;
		TObject* m_pPending;

	};

}//nsWin32

#endif//WINQL_CS_DATASTRUCTS_HANDLEMAP_H_1
