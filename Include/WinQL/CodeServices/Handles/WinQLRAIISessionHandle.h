//WinQLRAIISessionHandle.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Win32 Code Services Session type handle that is created and freed by its object

#ifndef WINQL_CS_RAIISESSIONHANDLE_H_3
#define WINQL_CS_RAIISESSIONHANDLE_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/WinQL.h"
#include "WinQL/CodeServices/Handles/WinQLHandle.h"
#include "CodeQOR/DataStructures/TLRef.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CRAIISessionHandle : private CHandle
	{
	public:

		typedef nsCodeQOR::CTLRef< CRAIISessionHandle > refType;

		__QOR_DECLARE_OCLASS_ID( CRAIISessionHandle );

		CRAIISessionHandle( void* pObj, void* h );
		CRAIISessionHandle& operator = ( void* h );
		~CRAIISessionHandle();

		bool operator == ( const CRAIISessionHandle& Cmp );
		bool IsNull( void ) const;
		void* Use( void ) const;
		CHandle& AsHandle( void ) const;
		refType Ref( void );

		//--------------------------------------------------------------------------------
		template< class TObject > TObject* Object( void ) const
		{
			return reinterpret_cast< TObject* >( AsHandle().Object() );
		}

	private:

		CRAIISessionHandle();
		CRAIISessionHandle( const CRAIISessionHandle& );
		CRAIISessionHandle& operator = ( const CRAIISessionHandle& );

	};

	//--------------------------------------------------------------------------------
	template< class TObject >
	class CTypedSessionHandle : public CRAIISessionHandle
	{
	public:

		typedef nsCodeQOR::CTLRef< CTypedSessionHandle< TObject > > refType;

		//--------------------------------------------------------------------------------
		CTypedSessionHandle( TObject* pObj, void* h ) : CRAIISessionHandle( (void*)(pObj), h )
		{
		}

		//--------------------------------------------------------------------------------
		CTypedSessionHandle& operator = ( TObject* pObj )
		{
			CHandle::m_pObject = pObj;
			return *this;
		}

		//--------------------------------------------------------------------------------
		CTypedSessionHandle& operator = ( void* h )
		{
			CRAIISessionHandle::operator=( h );
			return *this;
		}

		//--------------------------------------------------------------------------------
		bool operator == ( const CRAIISessionHandle& Cmp )
		{
			return ( AsHandle() == ( const_cast< CRAIISessionHandle& >( Cmp ) ).AsHandle() );
		}

		//--------------------------------------------------------------------------------
		~CTypedSessionHandle()
		{
		}

		//--------------------------------------------------------------------------------
		TObject* Object( void )
		{
			return reinterpret_cast< TObject* >( AsHandle().Object() );
		}

		//--------------------------------------------------------------------------------
		refType Ref( void )
		{
			refType Ref( this, false );
			return Ref;
		}
	};

}//nsWin32

#endif//WINQL_CS_RAIISESSIONHANDLE_H_3
