//WinQLAudioSession.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_AUDIO_SESSION_H_3
#define WINQL_AUDIO_SESSION_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/Definitions/Interfaces.h"
#include "WinQL/MediaFoundation/MediaInterfaces.h"
#include "WinQL/COM/UnknownImplBase.h"
#include "WinQL/GUI/Window.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//const GUID CLASS_MMDEVICEENUMERATOR;//BCDE0395-E52F-467C-8E3D-C4579291692E
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_MEDIA ) CAudioSessionEventHandler : public CIUnknownImplBase< IAudioSessionEvents >
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CAudioSessionEventHandler );

		// Static method to create an instance of the object.
		static long CreateInstance( unsigned int uNotificationMessage, COSWindow::refType hwndNotification, CAudioSessionEventHandler** ppAudioSessionEventHander );

		// IAudioSessionEvents methods.

		virtual long __QCMP_STDCALLCONVENTION OnSimpleVolumeChanged( float NewVolume, int NewMute, const GUID* EventContext );

		//--------------------------------------------------------------------------------
		virtual long __QCMP_STDCALLCONVENTION OnDisplayNameChanged( const wchar_t* /*NewDisplayName*/, const GUID* /*EventContext*/ )
		{
			return 0;
		}
        
		//--------------------------------------------------------------------------------
		virtual long __QCMP_STDCALLCONVENTION OnIconPathChanged( const wchar_t* /*NewIconPath*/, const GUID* /*EventContext*/ )
		{
			return 0;
		}
        
		//--------------------------------------------------------------------------------
		virtual long __QCMP_STDCALLCONVENTION OnChannelVolumeChanged( unsigned long/*ChannelCount*/, float /*NewChannelVolumeArray*/[], unsigned long/*ChangedChannel*/, const GUID* /*EventContext*/ )
		{
			return 0;
		}
        
		//--------------------------------------------------------------------------------
		virtual long __QCMP_STDCALLCONVENTION OnGroupingParamChanged( const GUID* /*NewGroupingParam*/, const GUID* /*EventContext*/ )
		{
			return 0;
		}
        
		//--------------------------------------------------------------------------------
		virtual long __QCMP_STDCALLCONVENTION OnStateChanged( AudioSessionState /*NewState*/ )
		{
			return 0;
		}
        
		//--------------------------------------------------------------------------------
		virtual long __QCMP_STDCALLCONVENTION OnSessionDisconnected( AudioSessionDisconnectReason /*DisconnectReason*/ )
		{
			return 0;
		}

		//--------------------------------------------------------------------------------
		// Other methods
		long EnableNotifications( bool bEnable );
		long GetVolume( float* pflVolume );
		long SetVolume( float flVolume );
		long GetMute( int* pbMute );
		long SetMute( bool bMute );
		long SetDisplayName( const wchar_t* wszName );

	protected:

		CAudioSessionEventHandler( unsigned int uNotificationMessage, COSWindow::refType hwndNotification );
		~CAudioSessionEventHandler();

		long Initialize();

	protected:

		unsigned int		m_uNotificationMessage;        // Window message to send when an audio event occurs.
		COSWindow::refType	m_hwndNotification;            // Window to receives messages.
		bool				m_bNotificationsEnabled;       // Are audio notifications enabled?

		IAudioSessionControl*	m_pAudioSession;
		ISimpleAudioVolume*		m_pSimpleAudioVolume;
	};

}//nsWin32

#endif//WINQL_AUDIO_SESSION_H_3

