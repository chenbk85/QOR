//MediaType.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_MEDIAFOUND_MEDTYPE_H_3
#define WINQL_MEDIAFOUND_MEDTYPE_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/MediaFoundation/MediaFoundation.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	namespace nsMediaFoundation
	{			
		//--------------------------------------------------------------------------------
		//Represent a description of a media format.
		class __QOR_INTERFACE(__WINQL_MEDIA) CMediaType : public CTMediaFoundationAPIObject< IMFMediaType >
		{
		public:

			__QOR_DECLARE_OCLASS_ID( CMediaType );

			CMediaType();
			CMediaType( IMFMediaType* pIMediaType );
			CMediaType( const CMediaType& );
			CMediaType( GUID& guidRepresentation, void* pvRepresentation );//Create a media type from an older Direct Show media type
			unsigned long InitFromAMMediaType( const AM_MEDIA_TYPE* pAMType );
			unsigned long InitFromMPEG1VideoInfo( const MPEG1VIDEOINFO* pMP1VI, Cmp_unsigned__int32 cbBufSize, const GUID* pSubtype );//Initializes a media type from a DirectShow MPEG1VIDEOINFO structure.
			unsigned long InitFromMPEG2VideoInfo( const MPEG2VIDEOINFO* pMP2VI, Cmp_unsigned__int32 cbBufSize, const GUID *pSubtype );//Initializes a media type from a DirectShow MPEG2VIDEOINFO structure
			unsigned long InitFromVideoInfoHeader( const VIDEOINFOHEADER* pVIH, Cmp_unsigned__int32 cbBufSize, const GUID* pSubtype );//Initializes a media type from a DirectShow VIDEOINFOHEADER structure.
			unsigned long InitFromVideoInfoHeader2( const VIDEOINFOHEADER2* pVIH2, Cmp_unsigned__int32 cbBufSize, const GUID* pSubtype );//Initializes a media type from a DirectShow VIDEOINFOHEADER2 structure
			unsigned long InitFromWaveFormatEx( const WAVEFORMATEX* pWaveFormat, Cmp_unsigned__int32 cbBufSize );//Initializes a media type from a WAVEFORMATEX structure. 
			virtual ~CMediaType();			
		};

		//--------------------------------------------------------------------------------
		//Represents a description of a video format.
		class __QOR_INTERFACE(__WINQL_MEDIA) CVideoMediaType : public CTMediaFoundationAPIObject< IMFVideoMediaType >
		{
		public:

			__QOR_DECLARE_OCLASS_ID( CVideoMediaType );

			CVideoMediaType( const BITMAPINFOHEADER* pbmihBitMapInfoHeader, Cmp_unsigned__int32 cbBitMapInfoHeader, unsigned long dwPixelAspectRatioX, unsigned long dwPixelAspectRatioY, MFVideoInterlaceMode InterlaceMode, Cmp_unsigned_long_long VideoFlags, unsigned long dwFramesPerSecondNumerator, unsigned long dwFramesPerSecondDenominator, unsigned long dwMaxBitRate );//Create video media type from a bitmap header
			CVideoMediaType( const GUID* pAMSubtype );//Create a video media type from a subtype
			CVideoMediaType( const KS_VIDEOINFOHEADER* pVideoInfoHeader, unsigned long cbVideoInfoHeader, unsigned long dwPixelAspectRatioX, unsigned long dwPixelAspectRatioY, MFVideoInterlaceMode InterlaceMode, Cmp_unsigned_long_long VideoFlags, const GUID* pSubtype );//Create a video media type from a video info header
			CVideoMediaType( const KS_VIDEOINFOHEADER2* pVideoInfoHeader, unsigned long cbVideoInfoHeader, unsigned long long AdditionalVideoFlags, const GUID* pSubtype );//Create a video media type from a video info header2
			virtual ~CVideoMediaType();

		private:

			CVideoMediaType();
			CVideoMediaType( const CVideoMediaType& );
			CVideoMediaType& operator = ( const CVideoMediaType& );
		};

	}//nsMediaFoundation

}//nsWin32

#endif//WINQL_MEDIAFOUND_MEDTYPE_H_3
