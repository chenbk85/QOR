//WorkQueue.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_MEDIAFOUND_WORKQUEUE_H_3
#define WINQL_MEDIAFOUND_WORKQUEUE_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma __QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/MediaFoundation/MediaFoundation.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	namespace nsMediaFoundation
	{
		class __QOR_INTERFACE(__WINQL_MEDIA) CWorkQueueMMCSSRegistration;

		//--------------------------------------------------------------------------------
		class __QOR_INTERFACE(__WINQL_MEDIA) CWorkQueue
		{
			friend class CWorkQueueLock;

		public:

			__QOR_DECLARE_OCLASS_ID( CWorkQueue );

			CWorkQueue( unsigned long ulStandardWorkQueueID );
			CWorkQueue( bool bMessageLoop );
			virtual ~CWorkQueue();
			unsigned long PutWorkItem( IMFAsyncCallback* pCallback, IUnknown* pState );
			unsigned long PutWorkItemEx( IMFAsyncResult* pResult );
			unsigned long ID( void );
			virtual CWorkQueueMMCSSRegistration* MMCSSRegistration( const wchar_t* wszClass, unsigned long ulTaskId, IUnknown* pDoneState );
			unsigned long GetMMCSSClass( wchar_t* pwszClass, unsigned long* pcchClass );
			unsigned long GetMMCSSTaskId( unsigned long* pulTaskId );

		protected:

			nsWinQAPI::CMFAPI& MediaFoundationHelper;
			unsigned long m_ulStatus;
			unsigned long m_ulWorkQueueID;

		private:

			bool m_bCustom;

			CWorkQueue();
			CWorkQueue( const CWorkQueue& );
			CWorkQueue& operator = ( const CWorkQueue& );
		};

		//--------------------------------------------------------------------------------
		class __QOR_INTERFACE(__WINQL_MEDIA) CWorkQueueLock
		{
		public:

			__QOR_DECLARE_OCLASS_ID( CWorkQueueLock );

			CWorkQueueLock( CWorkQueue& Queue );
			~CWorkQueueLock();

		private:

			CWorkQueue& m_Queue;
			CWorkQueueLock& operator = ( const CWorkQueueLock& src );	//Not implemented
		};

		//--------------------------------------------------------------------------------
		class __QOR_INTERFACE(__WINQL_MEDIA) CWorkQueueMMCSSRegistration : public CAsyncCallback
		{
		public:

			__QOR_DECLARE_OCLASS_ID( CWorkQueueMMCSSRegistration );

			CWorkQueueMMCSSRegistration( CWorkQueue& WorkQueue, const wchar_t* wszClass, unsigned long ulTaskId, IUnknown* pDoneState );
			void Register( void );
			void UnRegister( void );
			virtual unsigned long __QCMP_STDCALLCONVENTION GetParameters( unsigned long* pdwFlags, unsigned long* pdwQueue );
			virtual unsigned long __QCMP_STDCALLCONVENTION Invoke( IMFAsyncResult* pAsyncResult );

			//--------------------------------------------------------------------------------
			virtual void OnRegistration( void ){}
			//--------------------------------------------------------------------------------
			virtual void OnUnRegistration( void ){}

		protected:

			//--------------------------------------------------------------------------------
			virtual ~CWorkQueueMMCSSRegistration(){}
		
			nsWinQAPI::CMFAPI& m_MFLibrary;
			unsigned long m_ulStatus;
			unsigned long m_ulTaskId;
			bool m_bBeginEnd;
			CWorkQueue& m_WorkQueue;
			IUnknown* m_pDoneState;
			const wchar_t* m_wszClass;

		private:

			CWorkQueueMMCSSRegistration();	//Not implemented
			CWorkQueueMMCSSRegistration& operator = ( CWorkQueueMMCSSRegistration& src );	//Not implemented
			CWorkQueueMMCSSRegistration( const CWorkQueueMMCSSRegistration& src );	//Not implemented
		};

	}//nsMediaFoundation

}//nsWin32

#endif//WINQL_MEDIAFOUND_WORKQUEUE_H_3

