//MediaSource.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_MEDIAFOUND_MEDSOURCE_H_3
#define WINQL_MEDIAFOUND_MEDSOURCE_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma __QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/MediaFoundation/MediaFoundation.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	namespace nsMediaFoundation
	{	
		//--------------------------------------------------------------------------------
		//A base class for system provided media source clients
		//media sources are input pipeline entry points for the media foundation
		class __QOR_INTERFACE(__WINQL_MEDIA) CMediaSource : public CTMediaFoundationObject< IMFMediaSource >
		{
		public:

			__QOR_DECLARE_OCLASS_ID( CMediaSource );

			CMediaSource();
			virtual ~CMediaSource();

		private:

			CMediaSource( const CMediaSource& );
			CMediaSource& operator = ( const CMediaSource& );
		};

		//--------------------------------------------------------------------------------
		//Device capture source for input to a media foundation pipeline
		class __QOR_INTERFACE(__WINQL_MEDIA) CDeviceSource : public CMediaSource
		{
		public:

			__QOR_DECLARE_OCLASS_ID( CDeviceSource );

			CDeviceSource( IMFAttributes* pAttributes );
			virtual ~CDeviceSource();

		private:

			CDeviceSource();
			CDeviceSource( const CDeviceSource& );
			CDeviceSource& operator = ( const CDeviceSource& );
		};

		//--------------------------------------------------------------------------------
		//Creates a media source that aggregates a collection of media sources. 
		//Use it to combine a video capture source and an audio capture source. 
		class __QOR_INTERFACE(__WINQL_MEDIA) CAggregateSource : CMediaSource
		{
		public:

			__QOR_DECLARE_OCLASS_ID( CAggregateSource );

			CAggregateSource( IMFCollection* pSourceCollection );
			virtual ~CAggregateSource();

		private:

			CAggregateSource();
			CAggregateSource( const CAggregateSource& );
			CAggregateSource& operator = ( const CAggregateSource& );
		};

		//--------------------------------------------------------------------------------
		//A base class for custom media sources
		//A media source must implement two objects:
		//	A presentation descriptor, which describes the contents of the source, including the number of streams and the format of each stream.
		//	One or more media streams, which generate the source data. 
		class __QOR_INTERFACE(__WINQL_MEDIA) CBaseCustomMediaSource : public CServerObjectBase< IMFMediaSource >
		{
		public:

			__QOR_DECLARE_OCLASS_ID( CBaseCustomMediaSource );

			CBaseCustomMediaSource();
			CBaseCustomMediaSource( const CBaseCustomMediaSource& );
			CBaseCustomMediaSource& operator = ( const CBaseCustomMediaSource& );
			virtual ~CBaseCustomMediaSource();

			//IMFMediaSource

			virtual unsigned long __QCMP_STDCALLCONVENTION GetCharacteristics( unsigned long* pdwCharacteristics ) = 0;	//Retrieves the characteristics of the media source.
			virtual unsigned long __QCMP_STDCALLCONVENTION CreatePresentationDescriptor( IMFPresentationDescriptor** ppPresentationDescriptor ) = 0;	//Retrieves a copy of the media source's presentation descriptor.
			virtual unsigned long __QCMP_STDCALLCONVENTION Start( IMFPresentationDescriptor* pPresentationDescriptor, const GUID* pguidTimeFormat, const PROPVARIANT* pvarStartPosition ) = 0;	//Starts, seeks, or restarts the media source by specifying where to start playback.
			virtual unsigned long __QCMP_STDCALLCONVENTION Stop( void ) = 0;		//Stops all active streams in the media source.
			virtual unsigned long __QCMP_STDCALLCONVENTION Pause( void ) = 0;		//Pauses all active streams in the media source.
			virtual unsigned long __QCMP_STDCALLCONVENTION Shutdown( void ) = 0;	//Shuts down the media source and releases the resources it is using.

			//IMFMediaEventGenerator
			//An object that supports this interface maintains a queue of events.
			virtual unsigned long __QCMP_STDCALLCONVENTION GetEvent( unsigned long dwFlags, IMFMediaEvent** ppEvent ) = 0;			//Retrieves the next event in the queue. This method is synchronous.
			virtual unsigned long __QCMP_STDCALLCONVENTION BeginGetEvent( IMFAsyncCallback* pCallback, IUnknown* punkState ) = 0;	//Begins an asynchronous request for the next event in the queue.
			virtual unsigned long __QCMP_STDCALLCONVENTION EndGetEvent( IMFAsyncResult* pResult, IMFMediaEvent** ppEvent ) = 0;		//Completes an asynchronous request for the next event in the queue.
			virtual unsigned long __QCMP_STDCALLCONVENTION QueueEvent( unsigned long met, const GUID& guidExtendedType, unsigned long hrStatus, const PROPVARIANT* pvValue ) = 0;	//Puts a new event in the object's queue.

		};

	}//nsMediaFoundation

}//nsWin32

#endif//WINQL_MEDIAFOUND_MEDSOURCE_H_3
