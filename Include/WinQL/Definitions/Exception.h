//Exception.h

// Copyright Querysoft Limited 2016
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Data structures, POD types only, for use with the Microsoft Windows Operating System

#ifndef WINQL_DEFS_EXCEPTION_H
#define WINQL_DEFS_EXCEPTION_H

namespace nsWin32
{
	__QCMP_STATIC_CONSTANT( int, MaximumSupportedExtension = 512 );
	__QCMP_STATIC_CONSTANT( int, SizeOf80387Registers = 80 );
	__QCMP_STATIC_CONSTANT( int, WoW64MaximumSupportedExtension = 512 );
	__QCMP_STATIC_CONSTANT( int, WoW64SizeOf80387Registers = 80 );

	//--------------------------------------------------------------------------------
	typedef struct _FLOATING_SAVE_AREA
	{
		unsigned long ControlWord;
		unsigned long StatusWord;
		unsigned long TagWord;
		unsigned long ErrorOffset;
		unsigned long ErrorSelector;
		unsigned long DataOffset;
		unsigned long DataSelector;
		unsigned char RegisterArea[ SizeOf80387Registers ];
		unsigned long Cr0NpxState;
	} FLOATING_SAVE_AREA;

	typedef FLOATING_SAVE_AREA *PFLOATING_SAVE_AREA;

	//--------------------------------------------------------------------------------
	typedef struct _WOW64_FLOATING_SAVE_AREA
	{
		unsigned long ControlWord;
		unsigned long StatusWord;
		unsigned long TagWord;
		unsigned long ErrorOffset;
		unsigned long ErrorSelector;
		unsigned long DataOffset;
		unsigned long DataSelector;
		unsigned char RegisterArea[ WoW64SizeOf80387Registers ];
		unsigned long Cr0NpxState;
	} WOW64_FLOATING_SAVE_AREA;

	//--------------------------------------------------------------------------------
	struct CONTEXT
	{
		// The flags values within this flag control the contents of
		// a CONTEXT record.
		//
		// If the context record is used as an input parameter, then
		// for each portion of the context record controlled by a flag
		// whose value is set, it is assumed that that portion of the
		// context record contains valid context. If the context record
		// is being used to modify a threads context, then only that
		// portion of the threads context will be modified.
		//
		// If the context record is used as an IN OUT parameter to capture
		// the context of a thread, then only those portions of the thread's
		// context corresponding to set flags will be returned.
		//
		// The context record is never used as an OUT only parameter.
		//

		unsigned long ContextFlags;

		// This section is specified/returned if CONTEXT_DEBUG_REGISTERS is
		// set in ContextFlags.  Note that CONTEXT_DEBUG_REGISTERS is NOT
		// included in CONTEXT_FULL.
		//

		unsigned long Dr0;
		unsigned long Dr1;
		unsigned long Dr2;
		unsigned long Dr3;
		unsigned long Dr6;
		unsigned long Dr7;

		// This section is specified/returned if the
		// ContextFlags word contians the flag CONTEXT_FLOATING_POINT.

		FLOATING_SAVE_AREA FloatSave;

		// This section is specified/returned if the
		// ContextFlags word contians the flag CONTEXT_SEGMENTS.

		unsigned long SegGs;
		unsigned long SegFs;
		unsigned long SegEs;
		unsigned long SegDs;

		// This section is specified/returned if the
		// ContextFlags word contians the flag CONTEXT_INTEGER.

		unsigned long Edi;
		unsigned long Esi;
		unsigned long Ebx;
		unsigned long Edx;
		unsigned long Ecx;
		unsigned long Eax;

		// This section is specified/returned if the
		// ContextFlags word contians the flag CONTEXT_CONTROL.

		unsigned long Ebp;
		unsigned long Eip;
		unsigned long SegCs;              // MUST BE SANITIZED
		unsigned long EFlags;             // MUST BE SANITIZED
		unsigned long Esp;
		unsigned long SegSs;

		// This section is specified/returned if the ContextFlags word
		// contains the flag CONTEXT_EXTENDED_REGISTERS.
		// The format and contexts are processor specific

		unsigned char ExtendedRegisters[ MaximumSupportedExtension ];

	};

	typedef CONTEXT *PCONTEXT;

	//--------------------------------------------------------------------------------
	typedef struct _WOW64_CONTEXT
	{
		// The flags values within this flag control the contents of
		// a CONTEXT record.
		//
		// If the context record is used as an input parameter, then
		// for each portion of the context record controlled by a flag
		// whose value is set, it is assumed that that portion of the
		// context record contains valid context. If the context record
		// is being used to modify a threads context, then only that
		// portion of the threads context will be modified.
		//
		// If the context record is used as an IN OUT parameter to capture
		// the context of a thread, then only those portions of the thread's
		// context corresponding to set flags will be returned.
		//
		// The context record is never used as an OUT only parameter.
		//

		unsigned long ContextFlags;

		//
		// This section is specified/returned if CONTEXT_DEBUG_REGISTERS is
		// set in ContextFlags.  Note that CONTEXT_DEBUG_REGISTERS is NOT
		// included in CONTEXT_FULL.
		//

		unsigned long Dr0;
		unsigned long Dr1;
		unsigned long Dr2;
		unsigned long Dr3;
		unsigned long Dr6;
		unsigned long Dr7;

		// This section is specified/returned if the
		// ContextFlags word contians the flag CONTEXT_FLOATING_POINT.

		WOW64_FLOATING_SAVE_AREA FloatSave;

		// This section is specified/returned if the
		// ContextFlags word contians the flag CONTEXT_SEGMENTS.

		unsigned long SegGs;
		unsigned long SegFs;
		unsigned long SegEs;
		unsigned long SegDs;

		// This section is specified/returned if the
		// ContextFlags word contians the flag CONTEXT_INTEGER.

		unsigned long Edi;
		unsigned long Esi;
		unsigned long Ebx;
		unsigned long Edx;
		unsigned long Ecx;
		unsigned long Eax;

		// This section is specified/returned if the
		// ContextFlags word contians the flag CONTEXT_CONTROL.

		unsigned long Ebp;
		unsigned long Eip;
		unsigned long SegCs;              // MUST BE SANITIZED
		unsigned long EFlags;             // MUST BE SANITIZED
		unsigned long Esp;
		unsigned long SegSs;

		// This section is specified/returned if the ContextFlags word
		// contains the flag CONTEXT_EXTENDED_REGISTERS.
		// The format and contexts are processor specific

		unsigned char ExtendedRegisters[ WoW64MaximumSupportedExtension ];

	} WOW64_CONTEXT;

	typedef WOW64_CONTEXT *PWOW64_CONTEXT;

	//--------------------------------------------------------------------------------
	typedef struct _LDT_ENTRY
	{
		unsigned short LimitLow;
		unsigned short BaseLow;
		union
		{
			struct
			{
				unsigned char BaseMid;
				unsigned char Flags1;     // Declare as bytes to avoid alignment
				unsigned char Flags2;     // Problems.
				unsigned char BaseHi;
			} Bytes;
			struct
			{
				unsigned long BaseMid : 8;
				unsigned long Type : 5;
				unsigned long Dpl : 2;
				unsigned long Pres : 1;
				unsigned long LimitHi : 4;
				unsigned long Sys : 1;
				unsigned long Reserved_0 : 1;
				unsigned long Default_Big : 1;
				unsigned long Granularity : 1;
				unsigned long BaseHi : 8;
			} Bits;
		} HighWord;
	} LDT_ENTRY, *PLDT_ENTRY;

#if defined(_X86_)
	typedef PLDT_ENTRY LPLDT_ENTRY;
#else
	typedef void* LPLDT_ENTRY;
#endif

	//--------------------------------------------------------------------------------
	typedef enum _EXCEPTION_DISPOSITION
	{
		ExceptionContinueExecution,
		ExceptionContinueSearch,
		ExceptionNestedException,
		ExceptionCollidedUnwind
	} EXCEPTION_DISPOSITION;

	//--------------------------------------------------------------------------------
	typedef struct _RuntimeFunction
	{
		unsigned long BeginAddress;
		unsigned long EndAddress;
		unsigned long UnwindData;
	} RuntimeFunction, *pRuntimeFunction;

	static const int maximum_exception_parameters = 15;
	//--------------------------------------------------------------------------------
	struct EXCEPTION_RECORD
	{
		unsigned long ExceptionCode;
		unsigned long ExceptionFlags;
		struct _EXCEPTION_RECORD* ExceptionRecord;
		void* ExceptionAddress;
		unsigned long NumberParameters;
		Cmp_ulong_ptr ExceptionInformation[ maximum_exception_parameters ];
	};

	typedef EXCEPTION_RECORD *PEXCEPTION_RECORD;

	//--------------------------------------------------------------------------------
	typedef struct _EXCEPTION_POINTERS
	{
		PEXCEPTION_RECORD ExceptionRecord;
		CONTEXT* ContextRecord;
	} EXCEPTION_POINTERS, *PEXCEPTION_POINTERS;

}//nsWin32

#endif//WINQL_DEFS_EXCEPTION_H

