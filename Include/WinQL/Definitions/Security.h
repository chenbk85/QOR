//Security.h

// Copyright Querysoft Limited 2012 - . All rights reserved.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Security constants definitions and structures for use with the Microsoft Windows Operating System

#ifndef WINQL_SECURITY_H_2
#define WINQL_SECURITY_H_2

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma __QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/Definitions/Data.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{

	//--------------------------------------------------------------------------------
	typedef enum _SID_NAME_USE 
	{
		SidTypeUser = 1,
		SidTypeGroup,
		SidTypeDomain,
		SidTypeAlias,
		SidTypeWellKnownGroup,
		SidTypeDeletedAccount,
		SidTypeInvalid,
		SidTypeUnknown,
		SidTypeComputer,
		SidTypeLabel
	} SID_NAME_USE, *PSID_NAME_USE;

	//--------------------------------------------------------------------------------
	typedef enum 
	{
		WinNullSid                                  = 0,
		WinWorldSid                                 = 1,
		WinLocalSid                                 = 2,
		WinCreatorOwnerSid                          = 3,
		WinCreatorGroupSid                          = 4,
		WinCreatorOwnerServerSid                    = 5,
		WinCreatorGroupServerSid                    = 6,
		WinNtAuthoritySid                           = 7,
		WinDialupSid                                = 8,
		WinNetworkSid                               = 9,
		WinBatchSid                                 = 10,
		WinInteractiveSid                           = 11,
		WinServiceSid                               = 12,
		WinAnonymousSid                             = 13,
		WinProxySid                                 = 14,
		WinEnterpriseControllersSid                 = 15,
		WinSelfSid                                  = 16,
		WinAuthenticatedUserSid                     = 17,
		WinRestrictedCodeSid                        = 18,
		WinTerminalServerSid                        = 19,
		WinRemoteLogonIdSid                         = 20,
		WinLogonIdsSid                              = 21,
		WinLocalSystemSid                           = 22,
		WinLocalServiceSid                          = 23,
		WinNetworkServiceSid                        = 24,
		WinBuiltinDomainSid                         = 25,
		WinBuiltinAdministratorsSid                 = 26,
		WinBuiltinUsersSid                          = 27,
		WinBuiltinGuestsSid                         = 28,
		WinBuiltinPowerUsersSid                     = 29,
		WinBuiltinAccountOperatorsSid               = 30,
		WinBuiltinSystemOperatorsSid                = 31,
		WinBuiltinPrintOperatorsSid                 = 32,
		WinBuiltinBackupOperatorsSid                = 33,
		WinBuiltinReplicatorSid                     = 34,
		WinBuiltinPreWindows2000CompatibleAccessSid = 35,
		WinBuiltinRemoteDesktopUsersSid             = 36,
		WinBuiltinNetworkConfigurationOperatorsSid  = 37,
		WinAccountAdministratorSid                  = 38,
		WinAccountGuestSid                          = 39,
		WinAccountKrbtgtSid                         = 40,
		WinAccountDomainAdminsSid                   = 41,
		WinAccountDomainUsersSid                    = 42,
		WinAccountDomainGuestsSid                   = 43,
		WinAccountComputersSid                      = 44,
		WinAccountControllersSid                    = 45,
		WinAccountCertAdminsSid                     = 46,
		WinAccountSchemaAdminsSid                   = 47,
		WinAccountEnterpriseAdminsSid               = 48,
		WinAccountPolicyAdminsSid                   = 49,
		WinAccountRasAndIasServersSid               = 50,
		WinNTLMAuthenticationSid                    = 51,
		WinDigestAuthenticationSid                  = 52,
		WinSChannelAuthenticationSid                = 53,
		WinThisOrganizationSid                      = 54,
		WinOtherOrganizationSid                     = 55,
		WinBuiltinIncomingForestTrustBuildersSid    = 56,
		WinBuiltinPerfMonitoringUsersSid            = 57,
		WinBuiltinPerfLoggingUsersSid               = 58,
		WinBuiltinAuthorizationAccessSid            = 59,
		WinBuiltinTerminalServerLicenseServersSid   = 60,
		WinBuiltinDCOMUsersSid                      = 61,
		WinBuiltinIUsersSid                         = 62,
		WinIUserSid                                 = 63,
		WinBuiltinCryptoOperatorsSid                = 64,
		WinUntrustedLabelSid                        = 65,
		WinLowLabelSid                              = 66,
		WinMediumLabelSid                           = 67,
		WinHighLabelSid                             = 68,
		WinSystemLabelSid                           = 69,
		WinWriteRestrictedCodeSid                   = 70,
		WinCreatorOwnerRightsSid                    = 71,
		WinCacheablePrincipalsGroupSid              = 72,
		WinNonCacheablePrincipalsGroupSid           = 73,
		WinEnterpriseReadonlyControllersSid         = 74,
		WinAccountReadonlyControllersSid            = 75,
		WinBuiltinEventLogReadersGroup              = 76,
		WinNewEnterpriseReadonlyControllersSid      = 77,
		WinBuiltinCertSvcDComAccessGroup            = 78,
		WinMediumPlusLabelSid                       = 79,
		WinLocalLogonSid                            = 80,
		WinConsoleLogonSid							= 81,
		WinThisOrganizationCertificateSid			= 82,
	} WELL_KNOWN_SID_TYPE;

	//--------------------------------------------------------------------------------
	typedef enum _SECURITY_IMPERSONATION_LEVEL 
	{
		SecurityAnonymous,
		SecurityIdentification,
		SecurityImpersonation,
		SecurityDelegation
    } SECURITY_IMPERSONATION_LEVEL, * PSECURITY_IMPERSONATION_LEVEL;

	//--------------------------------------------------------------------------------
	typedef struct _SID_AND_ATTRIBUTES 
	{
#ifdef MIDL_PASS
		PISID Sid;
#else // MIDL_PASS
		void* Sid;
#endif // MIDL_PASS
		unsigned long Attributes;
	} SID_AND_ATTRIBUTES, * PSID_AND_ATTRIBUTES;

	//--------------------------------------------------------------------------------
	typedef struct _TOKEN_GROUPS 
	{
		unsigned long GroupCount;
#ifdef MIDL_PASS
		SID_AND_ATTRIBUTES Groups[*];
#else // MIDL_PASS
		SID_AND_ATTRIBUTES Groups[ 1 ];
#endif // MIDL_PASS
	} TOKEN_GROUPS, *PTOKEN_GROUPS;

	//pushpack
#if ! (defined(lint) || defined(RC_INVOKED))
#if ( _MSC_VER >= 800 && !defined(_M_I86)) || defined(_PUSHPOP_SUPPORTED)
#pragma warning(disable:4103)
#if !(defined( MIDL_PASS )) || defined( __midl )
#pragma pack(push,4)
#else
#pragma pack(4)
#endif
#else
#pragma pack(4)
#endif
#endif /* ! (defined(lint) || defined(RC_INVOKED)) */

	//--------------------------------------------------------------------------------
	typedef struct _LUID_AND_ATTRIBUTES 
	{
		LUID Luid;
		unsigned long Attributes;
	} LUID_AND_ATTRIBUTES, * PLUID_AND_ATTRIBUTES;
	typedef LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[ 1 ];
	typedef LUID_AND_ATTRIBUTES_ARRAY *PLUID_AND_ATTRIBUTES_ARRAY;

	//poppack
#if ! (defined(lint) || defined(RC_INVOKED))
#if ( _MSC_VER >= 800 && !defined(_M_I86)) || defined(_PUSHPOP_SUPPORTED)
#pragma warning(disable:4103)
#if !(defined( MIDL_PASS )) || defined( __midl )
#pragma pack(pop)
#else
#pragma pack()
#endif
#else
#pragma pack()
#endif
#endif /* ! (defined(lint) || defined(RC_INVOKED)) */

	//--------------------------------------------------------------------------------
	typedef struct _PRIVILEGE_SET 
	{
		unsigned long PrivilegeCount;
		unsigned long Control;
		LUID_AND_ATTRIBUTES Privilege[ 1 ];
	} PRIVILEGE_SET, * PPRIVILEGE_SET;

	//--------------------------------------------------------------------------------
	typedef struct _SID_IDENTIFIER_AUTHORITY 
	{
		unsigned char Value[ 6 ];
	} SID_IDENTIFIER_AUTHORITY, *PSID_IDENTIFIER_AUTHORITY;

	//--------------------------------------------------------------------------------
	typedef struct _SID 
	{
		unsigned char Revision;
		unsigned char SubAuthorityCount;
		SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
	#ifdef MIDL_PASS
		unsigned long SubAuthority[*];
	#else // MIDL_PASS
		unsigned long SubAuthority[ 1 ];
	#endif // MIDL_PASS
	} SID, *PISID;

}//nsWin32

#endif//WINQL_SECURITY_H_2
