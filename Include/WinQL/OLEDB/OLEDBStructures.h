//OLEDBStructures.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_OLEDBSTRUCTURES_H_3
#define WINQL_OLEDBSTRUCTURES_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

//Common Object Model OLE DB structure definitions for the Microsoft Windows Operating System

#include "WinQL/Definitions/Handles.h"
#include "WinQL/Definitions/Security.h"
#include "WinQL/Definitions/Data.h"
#include "WinQL/Definitions/IO.h"
#include "WinQL/Definitions/Interfaces.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{

	//--------------------------------------------------------------------------------
	typedef struct BOID
	{
		byte rgb[ 16 ];
	} 	BOID;

	typedef long ISOLEVEL;
	typedef BOID XACTUOW;

	//--------------------------------------------------------------------------------
	typedef enum TX_MISC_CONSTANTS
	{
		MAX_TRAN_DESC = 40
	} 	TX_MISC_CONSTANTS;

	//--------------------------------------------------------------------------------
	typedef unsigned long  DBACCESSORFLAGS;
	
	//--------------------------------------------------------------------------------
	enum DBACCESSORFLAGSENUM 
	{
		DBACCESSOR_INVALID,
		DBACCESSOR_PASSBYREF,
		DBACCESSOR_ROWDATA,
		DBACCESSOR_PARAMETERDATA,
		DBACCESSOR_OPTIMIZED,
		DBACCESSOR_INHERITED
	};

	typedef struct tagDBBINDEXT 
	{
		byte*			pExtension;
		unsigned long		ulExtension;
	} DBBINDEXT;

	typedef struct tagDBOBJECT {
		unsigned long dwFlags;
		GUID iid;
	} DBOBJECT;

	typedef unsigned long DBPART;
	typedef unsigned long DBMEMOWNER;
	typedef unsigned long DBPARAMIO;
	typedef unsigned short DBTYPE;

	typedef struct tagDBBINDING {
		unsigned long      iOrdinal;
		unsigned long   obValue;
		unsigned long   obLength;
		unsigned long   obStatus;
		ITypeInfo     *pTypeInfo;
		DBOBJECT      *pObject;
		DBBINDEXT     *pBindExt;
		DBPART         dwPart;
		DBMEMOWNER     dwMemOwner;
		DBPARAMIO      eParamIO;
		unsigned long       cbMaxLen;
		unsigned long          dwFlags;
		DBTYPE         wType;
		byte           bPrecision;
		byte           bScale;
	} DBBINDING;

	typedef unsigned long DBBINDFLAG;

	enum DBBINDFLAGENUM 
	{
		DBBINDFLAG_HTML
	};

	typedef unsigned long DBBINDSTATUS;

	enum DBBINDSTATUSENUM 
	{
		DBBINDSTATUS_OK,
		DBBINDSTATUS_BADORDINAL,
		DBBINDSTATUS_UNSUPPORTEDCONVERSION,
		DBBINDSTATUS_BADBINDINFO,
		DBBINDSTATUS_BADSTORAGEFLAGS,
		DBBINDSTATUS_NOINTERFACE,
	};

	typedef unsigned long DBBINDURLFLAG;
	
	enum DBBINDURLFLAGENUM 
	{
		DBBINDURLFLAG_READ,
		DBBINDURLFLAG_WRITE,
		DBBINDURLFLAG_READWRITE,
		DBBINDURLFLAG_SHARE_DENY_READ,
		DBBINDURLFLAG_SHARE_DENY_WRITE,
		DBBINDURLFLAG_SHARE_EXCLUSIVE,
		DBBINDURLFLAG_SHARE_DENY_NONE,
		DBBINDURLFLAG_ASYNCHRONOUS,
		DBBINDURLFLAG_COLLECTION,
		DBBINDURLFLAG_DELAYFETCHSTREAM,
		DBBINDURLFLAG_DELAYFETCHCOLUMNS,
		DBBINDURLFLAG_RECURSIVE,
		DBBINDURLFLAG_OUTPUT,
		DBBINDURLFLAG_WAITFORINIT,
		DBBINDURLFLAG_OPENIFEXISTS,
		DBBINDURLFLAG_OVERWRITE,
		DBBINDURLFLAG_ISSTRUCTUREDDOCUMENT
	};

	typedef unsigned long DBBINDURLSTATUS;

	enum DBBINDURLSTATUSENUM 
	{
		DBBINDURLSTATUS_S_OK,
		DBBINDURLSTATUS_S_DENYNOTSUPPORTED,
		DBBINDURLSTATUS_S_DENYTYPENOTSUPPORTED,
		DBBINDURLSTATUS_S_REDIRECTED
	};

	typedef enum tagDBBOOKMARK 
	{
		DBBMK_INVALID,
		DBBMK_FIRST,
		DBBMK_LAST
	} DBBOOKMARK;

	typedef unsigned long DBKIND;

	typedef struct tagDBID
	{
		union {
			GUID guid;
			GUID * pguid;
		} uGuid;
		DBKIND eKind;
		union
		{
			wchar_t* pwszName;
			unsigned long    ulPropid;
		} uName;
	} DBID;

	typedef unsigned long DBSTATUS;

	typedef struct tagDBCOLUMNACCESS 
	{
		void          *pData;
		DBID           columnid;
		unsigned long       cbDataLen;
		DBSTATUS       dwStatus;
		unsigned long       cbMaxLen;
		unsigned long   dwReserved;
		DBTYPE         wType;
		byte           bPrecision;
		byte           bScale;
	} DBCOLUMNACCESS;

	typedef unsigned long DBPROPOPTIONS;
	typedef unsigned long DBPROPSTATUS;

	typedef struct tagDBPROP
	{
		unsigned long      dwPropertyID;
		DBPROPOPTIONS dwOptions;
		DBPROPSTATUS  dwStatus;
		DBID          colid;
		Variant       vValue;
	} DBPROP;

	typedef struct tagDBPROPSET
	{
		DBPROP * rgProperties;
		unsigned long    cProperties;
		GUID     guidPropertySet;
	} DBPROPSET;

	typedef struct tagDBCOLUMNDESC {
		wchar_t*     pwszTypeName;
		ITypeInfo   *pTypeInfo;
		DBPROPSET   *rgPropertySets;
		GUID       *pclsid;
		unsigned long        cPropertySets;
		unsigned long     ulColumnSize;
		DBID         dbcid;
		DBTYPE       wType;
		byte         bPrecision;
		byte         bScale;
	} DBCOLUMNDESC;

	typedef unsigned long DBCOLUMNFLAGS;
	enum DBCOLUMNFLAGSENUM {
		DBCOLUMNFLAGS_ISBOOKMARK,
		DBCOLUMNFLAGS_MAYDEFER,
		DBCOLUMNFLAGS_WRITE,
		DBCOLUMNFLAGS_WRITEUNKNOWN,
		DBCOLUMNFLAGS_ISFIXEDLENGTH,
		DBCOLUMNFLAGS_ISNULLABLE,
		DBCOLUMNFLAGS_MAYBENULL,
		DBCOLUMNFLAGS_ISLONG,
		DBCOLUMNFLAGS_ISROWID,
		DBCOLUMNFLAGS_ISROWVER,
		DBCOLUMNFLAGS_CACHEDEFERRED,
		DBCOLUMNFLAGS_SCALEISNEGATIVE,
		DBCOLUMNFLAGS_RESERVED,
		DBCOLUMNFLAGS_ISROWURL,
		DBCOLUMNFLAGS_ISDEFAULTSTREAM,
		DBCOLUMNFLAGS_ISCOLLECTION,
		DBCOLUMNFLAGS_ISSTREAM,
		DBCOLUMNFLAGS_ISROWSET,
		DBCOLUMNFLAGS_ISROW,
		DBCOLUMNFLAGS_ROWSPECIFICCOLUMN
	};

	typedef struct tagDBCOLUMNINFO {
		wchar_t*        pwszName;
		ITypeInfo      *pTypeInfo;
		unsigned long       iOrdinal;
		DBCOLUMNFLAGS   dwFlags;
		unsigned long        ulColumnSize;
		DBTYPE          wType;
		byte            bPrecision;
		byte            bScale;
		DBID            columnid;
	} DBCOLUMNINFO;

	typedef unsigned long DBCOMPARE;
	enum DBCOMPAREENUM {
		DBCOMPARE_LT,
		DBCOMPARE_EQ,
		DBCOMPARE_GT,
		DBCOMPARE_NE,
		DBCOMPARE_NOTCOMPARABLE
	};

	typedef unsigned long DBCOMPAREOP;
	enum DBCOMPAREOPSENUM
	{
		DBCOMPAREOPS_LT = 0,
		DBCOMPAREOPS_LE = 1,
		DBCOMPAREOPS_EQ = 2,
		DBCOMPAREOPS_GE = 3,
		DBCOMPAREOPS_GT = 4,
		DBCOMPAREOPS_BEGINSWITH = 5,
		DBCOMPAREOPS_CONTAINS = 6,
		DBCOMPAREOPS_NE = 7,
		DBCOMPAREOPS_IGNORE = 8,
		DBCOMPAREOPS_CASESENSITIVE = 0x1000,
		DBCOMPAREOPS_CASEINSENSITIVE = 0x2000
	};

	typedef struct tagDBCONSTRAINTDESC 
	{
		DBID       *pConstraintID;
		unsigned long ConstraintType;
		unsigned long   cColumns;
		DBID*        rgColumnList;//[];
		DBID       *pReferencedTableID;
		unsigned long   cForeignKeyColumns;
		DBID*        rgForeignKeyColumnList;//[];
		wchar_t    *pwszConstraintText;
		unsigned long UpdateRule;
		unsigned long DeleteRule;
		unsigned long MatchType;
		unsigned long Deferrability;
		unsigned long cReserved;
		DBPROPSET*   rgReserved;//[];
	} DBCONSTRAINTDESC;


	typedef unsigned long DBCONVERTFLAGS;
	enum DBCONVERTFLAGSENUM {
		DBCONVERTFLAGS_COLUMN,
		DBCONVERTFLAGS_PARAMETER,
		DBCONVERTFLAGS_FROMVARIANT,
		DBCONVERTFLAGS_ISFIXEDLENGTH,
		DBCONVERTFLAGS_ISLONG
	};

	typedef unsigned long DBCOPYFLAGS;
	enum DBCOPYFLAGSENUM {
		DBCOPY_ASYNC,
		DBCOPY_REPLACE_EXISTING,
		DBCOPY_ALLOW_EMULATION,
		DBCOPY_NON_RECURSIVE,
		DBCOPY_ATOMIC
	};

	typedef struct tagDBDATE 
	{
		short  year;
		unsigned short month;
		unsigned short day;
	} DBDATE;

	typedef unsigned long DBDELETEFLAGS;

	enum DBDELETEFLAGSENUM 
	{
		DBDELETE_ASYNC,
		DBDELETE_ATOMIC
	};

	typedef unsigned long DBEVENTPHASE;
	enum DBEVENTPHASEENUM 
	{
		DBEVENTPHASE_OKTODO,
		DBEVENTPHASE_ABOUTTODO,
		DBEVENTPHASE_SYNCHAFTER,
		DBEVENTPHASE_FAILEDTODO,
		DBEVENTPHASE_DIDEVENT
	};


	typedef struct tagDBIMPLICITSESSION 
	{
		IUnknown *   pUnkOuter;
		GUID* piid;
		IUnknown *   pSession;
	} DBIMPLICITSESSION;

	typedef unsigned long DBINDEX_COL_ORDER;
	enum DBINDEX_COL_ORDERENUM 
	{
		DBINDEX_COL_ORDER_ASC,
		DBINDEX_COL_ORDER_DESC
	};

	typedef struct tagDBINDEXCOLUMNDESC 
	{
		DBID * pColumnID;
		DBINDEX_COL_ORDER eIndexColOrder;
	} DBINDEXCOLUMNDESC;

	

	enum DBKINDENUM 
	{
		DBKIND_GUID_NAME,
		DBKIND_GUID_PROPID,
		DBKIND_NAME,
		DBKIND_PGUID_NAME,
		DBKIND_PGUID_PROPID,
		DBKIND_PROPID,
		DBKIND_GUID
	};

	typedef unsigned long DBLITERAL;

	enum DBLITERALENUM 
	{
		DBLITERAL_INVALID,
		DBLITERAL_BINARY_LITERAL,
		DBLITERAL_CATALOG_NAME,
		DBLITERAL_CATALOG_SEPARATOR,
		DBLITERAL_CHAR_LITERAL,
		DBLITERAL_COLUMN_ALIAS,
		DBLITERAL_COLUMN_NAME,
		DBLITERAL_CORRELATION_NAME,
		DBLITERAL_CURSOR_NAME,
		DBLITERAL_ESCAPE_PERCENT,
		DBLITERAL_ESCAPE_UNDERSCORE,
		DBLITERAL_INDEX_NAME,
		DBLITERAL_LIKE_PERCENT,
		DBLITERAL_LIKE_UNDERSCORE,
		DBLITERAL_PROCEDURE_NAME,
		DBLITERAL_QUOTE,
		DBLITERAL_SCHEMA_NAME,
		DBLITERAL_TABLE_NAME,
		DBLITERAL_TEXT_COMMAND,
		DBLITERAL_USER_NAME,
		DBLITERAL_VIEW_NAME,
		DBLITERAL_CUBE_NAME,
		DBLITERAL_DIMENSION_NAME,
		DBLITERAL_HIERARCHY_NAME,
		DBLITERAL_LEVEL_NAME,
		DBLITERAL_MEMBER_NAME,
		DBLITERAL_PROPERTY_NAME,
		DBLITERAL_SCHEMA_SEPARATOR,
		DBLITERAL_QUOTE_SUFFIX,
		DBLITERAL_ESCAPE_PERCENT_SUFFIX,
		DBLITERAL_ESCAPE_UNDERSCORE_SUFFIX
	};

	
	enum DBMEMOWNERENUM {
		DBMEMOWNER_CLIENTOWNED,
		DBMEMOWNER_PROVIDEROWNED
	};

	typedef unsigned long DBMOVEFLAGS;
	enum DBMOVEFLAGSENUM {
		DBMOVE_REPLACE_EXISTING,
		DBMOVE_ASYNC,
		DBMOVE_DONT_UPDATE_LINKS,
		DBMOVE_ALLOW_EMULATION,
		DBMOVE_ATOMIC
	};

	typedef struct tagDB_NUMERIC {
		byte precision;
		byte scale;
		byte sign;
		byte val[ 16 ];
	} DB_NUMERIC;

	typedef struct tagDB_VARNUMERIC {
		byte precision;
		signed char scale;
		byte sign;
		byte val[ 1 ];
	} DB_VARNUMERIC;

	typedef unsigned long DBPARAMFLAGS;

	typedef struct tagDBPARAMBINDINFO 
	{
		wchar_t* pwszDataSourceType;
		wchar_t*     pwszName;
		unsigned long     ulParamSize;
		DBPARAMFLAGS dwFlags;
		byte         bPrecision;
		byte         bScale;
	} DBPARAMBINDINFO;

	
	enum DBPARAMFLAGSENUM {
		DBPARAMFLAGS_ISINPUT,
		DBPARAMFLAGS_ISOUTPUT,
		DBPARAMFLAGS_ISSIGNED,
		DBPARAMFLAGS_ISNULLABLE,
		DBPARAMFLAGS_ISLONG,
		DBPARAMFLAGS_SCALEISNEGATIVE
	};

	typedef struct tagDBPARAMINFO {
		DBPARAMFLAGS dwFlags;
		unsigned long    iOrdinal;
		wchar_t*     pwszName;
		ITypeInfo   *pTypeInfo;
		unsigned long     ulParamSize;
		DBTYPE       wType;
		byte         bPrecision;
		byte         bScale;
	} DBPARAMINFO;

	
	enum DBPARAMIOENUM 
	{
		DBPARAMIO_NOTPARAM,
		DBPARAMIO_INPUT,
		DBPARAMIO_OUTPUT
	};

	typedef struct tagDBPARAMS 
	{
		void        *pData;
		unsigned long   cParamSets;
		Cmp_ulong_ptr    hAccessor;
	} DBPARAMS;

	
	enum DBPARTENUM 
	{
		DBPART_INVALID,
		DBPART_VALUE,
		DBPART_LENGTH,
		DBPART_STATUS
	};

	typedef unsigned long DBPENDINGSTATUS;
	enum DBPENDINGSTATUSENUM 
	{
		DBPENDINGSTATUS_NEW,
		DBPENDINGSTATUS_CHANGED,
		DBPENDINGSTATUS_DELETED,
		DBPENDINGSTATUS_UNCHANGED,
		DBPENDINGSTATUS_INVALIDROW
	};


	typedef unsigned long DBPROPFLAGS;
	enum DBPROPFLAGSENUM 
	{
		DBPROPFLAGS_NOTSUPPORTED,
		DBPROPFLAGS_COLUMN,
		DBPROPFLAGS_DATASOURCE,
		DBPROPFLAGS_DATASOURCECREATE,
		DBPROPFLAGS_DATASOURCEINFO,
		DBPROPFLAGS_DBINIT,
		DBPROPFLAGS_INDEX,
		DBPROPFLAGS_ROWSET,
		DBPROPFLAGS_TABLE,
		DBPROPFLAGS_COLUMNOK,
		DBPROPFLAGS_READ,
		DBPROPFLAGS_WRITE,
		DBPROPFLAGS_REQUIRED,
		DBPROPFLAGS_SESSION,
		DBPROPFLAGS_TRUSTEE,
		DBPROPFLAGS_VIEW,
		DBPROPFLAGS_STREAM
	};

	typedef struct tagDBPROPIDSET 
	{
		unsigned long * rgPropertyIDs;
		unsigned long      cPropertyIDs;
		GUID       guidPropertySet;
	} DBPROPIDSET;

	typedef struct tagDBPROPINFO 
	{
		wchar_t*    pwszDescription;
		unsigned long    dwPropertyID;
		DBPROPFLAGS dwFlags;
		unsigned short     vtType;
		Variant     vValues;
	} DBPROPINFO;

	typedef struct tagDBPROPINFOSET 
	{
		DBPROPINFO * rgPropertyInfos;
		unsigned long        cPropertyInfos;
		GUID         guidPropertySet;
	} DBPROPINFOSET;

	
	enum DBPROPOPTIONSENUM 
	{
		DBPROPOPTIONS_REQUIRED,
		DBPROPOPTIONS_OPTIONAL
	};


	

	enum DBPROPSTATUSENUM 
	{
		DBPROPSTATUS_OK,
		DBPROPSTATUS_NOTSUPPORTED,
		DBPROPSTATUS_BADVALUE,
		DBPROPSTATUS_BADOPTION,
		DBPROPSTATUS_BADCOLUMN,
		DBPROPSTATUS_NOTALLSETTABLE,
		DBPROPSTATUS_NOTSETTABLE,
		DBPROPSTATUS_NOTSET,
		DBPROPSTATUS_CONFLICTING,
		DBPROPSTATUS_NOTAVAILABLE
	};

	typedef unsigned long DBRANGE;

	enum DBRANGEENUM 
	{
		DBRANGE_INCLUSIVESTART,
		DBRANGE_INCLUSIVEEND,
		DBRANGE_EXCLUSIVESTART,
		DBRANGE_EXCLUSIVEEND,
		DBRANGE_EXCLUDENULLS,
		DBRANGE_PREFIX,
		DBRANGE_MATCH
	};

	typedef unsigned long DBREASON;

	enum DBREASONENUM 
	{
		DBREASON_ROWSET_FETCHPOSITIONCHANGE,
		DBREASON_ROWSET_RELEASE,
		DBREASON_COLUMN_SET,
		DBREASON_COLUMN_RECALCULATED,
		DBREASON_ROW_ACTIVATE,
		DBREASON_ROW_RELEASE,
		DBREASON_ROW_DELETE,
		DBREASON_ROW_FIRSTCHANGE,
		DBREASON_ROW_INSERT,
		DBREASON_ROW_RESYNCH,
		DBREASON_ROW_UNDOCHANGE,
		DBREASON_ROW_UNDOINSERT,
		DBREASON_ROW_UNDODELETE,
		DBREASON_ROW_UPDATE,
		DBREASON_ROWSET_CHANGED,
		DBREASON_ROWPOSITION_CHANGED,
		DBREASON_ROWPOSITION_CHAPTERCHANGED,
		DBREASON_ROWPOSITION_CLEARED,
		DBREASON_ROW_ASYNCHINSERT
	};


	typedef unsigned long DBROWSTATUS;

	enum DBROWSTATUSENUM 
	{
		DBROWSTATUS_S_OK,
		DBROWSTATUS_S_MULTIPLECHANGES,
		DBROWSTATUS_S_PENDINGCHANGES,
		DBROWSTATUS_S_ROWSETCOLUMN,
		DBROWSTATUS_S_NOCHANGE,
		DBROWSTATUS_E_CANCELED,
		DBROWSTATUS_E_CANTRELEASE,
		DBROWSTATUS_E_CONCURRENCYVIOLATION,
		DBROWSTATUS_E_DELETED,
		DBROWSTATUS_E_PENDINGINSERT,
		DBROWSTATUS_E_NEWLYINSERTED,
		DBROWSTATUS_E_INTEGRITYVIOLATION,
		DBROWSTATUS_E_INVALID,
		DBROWSTATUS_E_MAXPENDCHANGESEXCEEDED,
		DBROWSTATUS_E_OBJECTOPEN,
		DBROWSTATUS_E_OUTOFMEMORY,
		DBROWSTATUS_E_PERMISSIONDENIED,
		DBROWSTATUS_E_LIMITREACHED,
		DBROWSTATUS_E_SCHEMAVIOLATION,
		DBROWSTATUS_E_FAIL
	};

	typedef unsigned long DBSEEK;

	enum DBSEEKENUM 
	{
		DBSEEK_INVALID,
		DBSEEK_FIRSTEQ,
		DBSEEK_LASTEQ,
		DBSEEK_GE,
		DBSEEK_GT,
		DBSEEK_LE,
		DBSEEK_LT
	};


	typedef unsigned long DBSORT;

	enum DBSORTENUM 
	{
		DBSORT_ASCENDING = 0,
		DBSORT_DESCENDING
	};


	typedef unsigned long DBSOURCETYPE;

	enum DBSOURCETYPEENUM 
	{
		DBSOURCETYPE_BINDER,
		DBSOURCETYPE_DATASOURCE_MDP,
		DBSOURCETYPE_DATASOURCE_TDP,
		DBSOURCETYPE_ENUMERATOR
	};

	

	enum DBSTATUSENUM 
	{
		DBSTATUS_S_OK,
		DBSTATUS_E_BADACCESSOR,
		DBSTATUS_E_CANTCONVERTVALUE,
		DBSTATUS_S_ISNULL,
		DBSTATUS_S_TRUNCATED,
		DBSTATUS_E_SIGNMISMATCH,
		DBSTATUS_E_DATAOVERFLOW,
		DBSTATUS_E_CANTCREATE,
		DBSTATUS_E_UNAVAILABLE,
		DBSTATUS_E_PERMISSIONDENIED,
		DBSTATUS_E_INTEGRITYVIOLATION,
		DBSTATUS_E_SCHEMAVIOLATION,
		DBSTATUS_E_BADSTATUS,
		DBSTATUS_S_DEFAULT,
		MDSTATUS_S_CELLEMPTY,
		DBSTATUS_S_IGNORE,
		DBSTATUS_E_DOESNOTEXIST,
		DBSTATUS_E_INVALIDURL,
		DBSTATUS_E_RESOURCELOCKED,
		DBSTATUS_E_RESOURCEEXISTS,
		DBSTATUS_E_CANNOTCOMPLETE,
		DBSTATUS_E_VOLUMENOTFOUND,
		DBSTATUS_E_OUTOFSPACE,
		DBSTATUS_S_CANNOTDELETESOURCE,
		DBSTATUS_E_READONLY,
		DBSTATUS_E_RESOURCEOUTOFSCOPE,
		DBSTATUS_S_ALREADYEXISTS,
		DBSTATUS_E_CANCELED,
		DBSTATUS_E_NOTCOLLECTION,
		DBSTATUS_S_ROWSETCOLUMN
	};

	enum DBTABLESTATISTICSTYPE 
	{
		DBSTAT_HISTOGRAM,
		DBSTAT_COLUMN_CARDINALITY,
		DBSTAT_TUPLE_CARDINALITY
	};

	typedef struct tagDBTIME {
		unsigned short hour;
		unsigned short minute;
		unsigned short second;
	} DBTIME;

	typedef struct tagDBTIMESTAMP {
		short  year;
		unsigned short month;
		unsigned short day;
		unsigned short hour;
		unsigned short minute;
		unsigned short second;
		unsigned long  fraction;
	} DBTIMESTAMP;

	
	enum DBTYPEENUM {
		DBTYPE_EMPTY,
		DBTYPE_NULL,
		DBTYPE_I2,
		DBTYPE_I4,
		DBTYPE_R4,
		DBTYPE_R8,
		DBTYPE_CY,
		DBTYPE_DATE,
		DBTYPE_BSTR,
		DBTYPE_IDISPATCH,
		DBTYPE_ERROR,
		DBTYPE_BOOL,
		DBTYPE_VARIANT,
		DBTYPE_IUNKNOWN,
		DBTYPE_DECIMAL,
		DBTYPE_UI1,
		DBTYPE_ARRAY,
		DBTYPE_BYREF,
		DBTYPE_I1,
		DBTYPE_UI2,
		DBTYPE_UI4,
		DBTYPE_I8,
		DBTYPE_UI8,
		DBTYPE_GUID,
		DBTYPE_VECTOR,
		DBTYPE_RESERVED,
		DBTYPE_BYTES,
		DBTYPE_STR,
		DBTYPE_WSTR,
		DBTYPE_NUMERIC,
		DBTYPE_UDT,
		DBTYPE_DBDATE,
		DBTYPE_DBTIME,
		DBTYPE_DBTIMESTAMP,
		DBTYPE_FILETIME,
		DBTYPE_HCHAPTER,
		DBTYPE_PROPVARIANT,
		DBTYPE_VARNUMERIC
	};

	typedef struct tagDBVECTOR 
	{
		unsigned long   size;
		void      *ptr;
	} DBVECTOR;

	//--------------------------------------------------------------------------------
	typedef struct tagERRORINFO 
	{
		long hrError;
		unsigned long   dwMinor;
		GUID   clsid;
		GUID     iid;
		long  dispid;
	} ERRORINFO;

	//--------------------------------------------------------------------------------
	typedef struct XACTTRANSINFO 
	{
		XACTUOW  uow;
		ISOLEVEL isoLevel;
		unsigned long    isoFlags;
		unsigned long    grfTCSupported;
		unsigned long    grfRMSupported;
		unsigned long    grfTCSupportedRetaining;
		unsigned long    grfRMSupportedRetaining;
	} XACTTRANSINFO;

	//--------------------------------------------------------------------------------
	typedef struct XACTOPT 
	{
		unsigned long ulTimeout;
		unsigned char
			szDescription[ MAX_TRAN_DESC ];
	} XACTOPT;

	//--------------------------------------------------------------------------------
	typedef struct tagDBLITERALINFO
	{
		wchar_t* pwszLiteralValue;
		wchar_t* pwszInvalidChars;
		wchar_t* pwszInvalidStartingChars;
		DBLITERAL lt;
		int fSupported;
		unsigned long cchMaxLen;
	} 	DBLITERALINFO;

	//--------------------------------------------------------------------------------
	enum DBPROPENUM
	{
		DBPROP_ABORTPRESERVE = 0x2L,
		DBPROP_ACTIVESESSIONS = 0x3L,
		DBPROP_APPENDONLY = 0xbbL,
		DBPROP_ASYNCTXNABORT = 0xa8L,
		DBPROP_ASYNCTXNCOMMIT = 0x4L,
		DBPROP_AUTH_CACHE_AUTHINFO = 0x5L,
		DBPROP_AUTH_ENCRYPT_PASSWORD = 0x6L,
		DBPROP_AUTH_INTEGRATED = 0x7L,
		DBPROP_AUTH_MASK_PASSWORD = 0x8L,
		DBPROP_AUTH_PASSWORD = 0x9L,
		DBPROP_AUTH_PERSIST_ENCRYPTED = 0xaL,
		DBPROP_AUTH_PERSIST_SENSITIVE_AUTHINFO = 0xbL,
		DBPROP_AUTH_USERID = 0xcL,
		DBPROP_BLOCKINGSTORAGEOBJECTS = 0xdL,
		DBPROP_BOOKMARKS = 0xeL,
		DBPROP_BOOKMARKSKIPPED = 0xfL,
		DBPROP_BOOKMARKTYPE = 0x10L,
		DBPROP_BYREFACCESSORS = 0x78L,
		DBPROP_CACHEDEFERRED = 0x11L,
		DBPROP_CANFETCHBACKWARDS = 0x12L,
		DBPROP_CANHOLDROWS = 0x13L,
		DBPROP_CANSCROLLBACKWARDS = 0x15L,
		DBPROP_CATALOGLOCATION = 0x16L,
		DBPROP_CATALOGTERM = 0x17L,
		DBPROP_CATALOGUSAGE = 0x18L,
		DBPROP_CHANGEINSERTEDROWS = 0xbcL,
		DBPROP_COL_AUTOINCREMENT = 0x1aL,
		DBPROP_COL_DEFAULT = 0x1bL,
		DBPROP_COL_DESCRIPTION = 0x1cL,
		DBPROP_COL_FIXEDLENGTH = 0xa7L,
		DBPROP_COL_NULLABLE = 0x1dL,
		DBPROP_COL_PRIMARYKEY = 0x1eL,
		DBPROP_COL_UNIQUE = 0x1fL,
		DBPROP_COLUMNDEFINITION = 0x20L,
		DBPROP_COLUMNRESTRICT = 0x21L,
		DBPROP_COMMANDTIMEOUT = 0x22L,
		DBPROP_COMMITPRESERVE = 0x23L,
		DBPROP_CONCATNULLBEHAVIOR = 0x24L,
		DBPROP_CURRENTCATALOG = 0x25L,
		DBPROP_DATASOURCENAME = 0x26L,
		DBPROP_DATASOURCEREADONLY = 0x27L,
		DBPROP_DBMSNAME = 0x28L,
		DBPROP_DBMSVER = 0x29L,
		DBPROP_DEFERRED = 0x2aL,
		DBPROP_DELAYSTORAGEOBJECTS = 0x2bL,
		DBPROP_DSOTHREADMODEL = 0xa9L,
		DBPROP_GROUPBY = 0x2cL,
		DBPROP_HETEROGENEOUSTABLES = 0x2dL,
		DBPROP_IAccessor = 0x79L,
		DBPROP_IColumnsInfo = 0x7aL,
		DBPROP_IColumnsRowset = 0x7bL,
		DBPROP_IConnectionPointContainer = 0x7cL,
		DBPROP_IConvertType = 0xc2L,
		DBPROP_IRowset = 0x7eL,
		DBPROP_IRowsetChange = 0x7fL,
		DBPROP_IRowsetIdentity = 0x80L,
		DBPROP_IRowsetIndex = 0x9fL,
		DBPROP_IRowsetInfo = 0x81L,
		DBPROP_IRowsetLocate = 0x82L,
		DBPROP_IRowsetResynch = 0x84L,
		DBPROP_IRowsetScroll = 0x85L,
		DBPROP_IRowsetUpdate = 0x86L,
		DBPROP_ISupportErrorInfo = 0x87L,
		DBPROP_ILockBytes = 0x88L,
		DBPROP_ISequentialStream = 0x89L,
		DBPROP_IStorage = 0x8aL,
		DBPROP_IStream = 0x8bL,
		DBPROP_IDENTIFIERCASE = 0x2eL,
		DBPROP_IMMOBILEROWS = 0x2fL,
		DBPROP_INDEX_AUTOUPDATE = 0x30L,
		DBPROP_INDEX_CLUSTERED = 0x31L,
		DBPROP_INDEX_FILLFACTOR = 0x32L,
		DBPROP_INDEX_INITIALSIZE = 0x33L,
		DBPROP_INDEX_NULLCOLLATION = 0x34L,
		DBPROP_INDEX_NULLS = 0x35L,
		DBPROP_INDEX_PRIMARYKEY = 0x36L,
		DBPROP_INDEX_SORTBOOKMARKS = 0x37L,
		DBPROP_INDEX_TEMPINDEX = 0xa3L,
		DBPROP_INDEX_TYPE = 0x38L,
		DBPROP_INDEX_UNIQUE = 0x39L,
		DBPROP_INIT_DATASOURCE = 0x3bL,
		DBPROP_INIT_HWND = 0x3cL,
		DBPROP_INIT_IMPERSONATION_LEVEL = 0x3dL,
		DBPROP_INIT_LCID = 0xbaL,
		DBPROP_INIT_LOCATION = 0x3eL,
		DBPROP_INIT_MODE = 0x3fL,
		DBPROP_INIT_PROMPT = 0x40L,
		DBPROP_INIT_PROTECTION_LEVEL = 0x41L,
		DBPROP_INIT_PROVIDERSTRING = 0xa0L,
		DBPROP_INIT_TIMEOUT = 0x42L,
		DBPROP_LITERALBOOKMARKS = 0x43L,
		DBPROP_LITERALIDENTITY = 0x44L,
		DBPROP_MAXINDEXSIZE = 0x46L,
		DBPROP_MAXOPENROWS = 0x47L,
		DBPROP_MAXPENDINGROWS = 0x48L,
		DBPROP_MAXROWS = 0x49L,
		DBPROP_MAXROWSIZE = 0x4aL,
		DBPROP_MAXROWSIZEINCLUDESBLOB = 0x4bL,
		DBPROP_MAXTABLESINSELECT = 0x4cL,
		DBPROP_MAYWRITECOLUMN = 0x4dL,
		DBPROP_MEMORYUSAGE = 0x4eL,
		DBPROP_MULTIPLEPARAMSETS = 0xbfL,
		DBPROP_MULTIPLERESULTS = 0xc4L,
		DBPROP_MULTIPLESTORAGEOBJECTS = 0x50L,
		DBPROP_MULTITABLEUPDATE = 0x51L,
		DBPROP_NOTIFICATIONGRANULARITY = 0xc6L,
		DBPROP_NOTIFICATIONPHASES = 0x52L,
		DBPROP_NOTIFYCOLUMNSET = 0xabL,
		DBPROP_NOTIFYROWDELETE = 0xadL,
		DBPROP_NOTIFYROWFIRSTCHANGE = 0xaeL,
		DBPROP_NOTIFYROWINSERT = 0xafL,
		DBPROP_NOTIFYROWRESYNCH = 0xb1L,
		DBPROP_NOTIFYROWSETCHANGED = 0xd3L,
		DBPROP_NOTIFYROWSETRELEASE = 0xb2L,
		DBPROP_NOTIFYROWSETFETCHPOSITIONCHANGE = 0xb3L,
		DBPROP_NOTIFYROWUNDOCHANGE = 0xb4L,
		DBPROP_NOTIFYROWUNDODELETE = 0xb5L,
		DBPROP_NOTIFYROWUNDOINSERT = 0xb6L,
		DBPROP_NOTIFYROWUPDATE = 0xb7L,
		DBPROP_NULLCOLLATION = 0x53L,
		DBPROP_OLEOBJECTS = 0x54L,
		DBPROP_ORDERBYCOLUMNSINSELECT = 0x55L,
		DBPROP_ORDEREDBOOKMARKS = 0x56L,
		DBPROP_OTHERINSERT = 0x57L,
		DBPROP_OTHERUPDATEDELETE = 0x58L,
		DBPROP_OUTPUTPARAMETERAVAILABILITY = 0xb8L,
		DBPROP_OWNINSERT = 0x59L,
		DBPROP_OWNUPDATEDELETE = 0x5aL,
		DBPROP_PERSISTENTIDTYPE = 0xb9L,
		DBPROP_PREPAREABORTBEHAVIOR = 0x5bL,
		DBPROP_PREPARECOMMITBEHAVIOR = 0x5cL,
		DBPROP_PROCEDURETERM = 0x5dL,
		DBPROP_PROVIDERNAME = 0x60L,
		DBPROP_PROVIDEROLEDBVER = 0x61L,
		DBPROP_PROVIDERVER = 0x62L,
		DBPROP_QUICKRESTART = 0x63L,
		DBPROP_QUOTEDIDENTIFIERCASE = 0x64L,
		DBPROP_REENTRANTEVENTS = 0x65L,
		DBPROP_REMOVEDELETED = 0x66L,
		DBPROP_REPORTMULTIPLECHANGES = 0x67L,
		DBPROP_RETURNPENDINGINSERTS = 0xbdL,
		DBPROP_ROWRESTRICT = 0x68L,
		DBPROP_ROWSETCONVERSIONSONCOMMAND = 0xc0L,
		DBPROP_ROWTHREADMODEL = 0x69L,
		DBPROP_SCHEMATERM = 0x6aL,
		DBPROP_SCHEMAUSAGE = 0x6bL,
		DBPROP_SERVERCURSOR = 0x6cL,
		DBPROP_SESS_AUTOCOMMITISOLEVELS = 0xbeL,
		DBPROP_SQLSUPPORT = 0x6dL,
		DBPROP_STRONGIDENTITY = 0x77L,
		DBPROP_STRUCTUREDSTORAGE = 0x6fL,
		DBPROP_SUBQUERIES = 0x70L,
		DBPROP_SUPPORTEDTXNDDL = 0xa1L,
		DBPROP_SUPPORTEDTXNISOLEVELS = 0x71L,
		DBPROP_SUPPORTEDTXNISORETAIN = 0x72L,
		DBPROP_TABLETERM = 0x73L,
		DBPROP_TBL_TEMPTABLE = 0x8cL,
		DBPROP_TRANSACTEDOBJECT = 0x74L,
		DBPROP_UPDATABILITY = 0x75L,
		DBPROP_USERNAME = 0x76L
	};

	enum DBPROPENUM15
	{
		DBPROP_FILTERCOMPAREOPS = 0xd1L,
		DBPROP_FINDCOMPAREOPS = 0xd2L,
		DBPROP_IChapteredRowset = 0xcaL,
		DBPROP_IDBAsynchStatus = 0xcbL,
		DBPROP_IRowsetFind = 0xccL,
		DBPROP_IRowsetView = 0xd4L,
		DBPROP_IViewChapter = 0xd5L,
		DBPROP_IViewFilter = 0xd6L,
		DBPROP_IViewRowset = 0xd7L,
		DBPROP_IViewSort = 0xd8L,
		DBPROP_INIT_ASYNCH = 0xc8L,
		DBPROP_MAXOPENCHAPTERS = 0xc7L,
		DBPROP_MAXORSINFILTER = 0xcdL,
		DBPROP_MAXSORTCOLUMNS = 0xceL,
		DBPROP_ROWSET_ASYNCH = 0xc9L,
		DBPROP_SORTONINDEX = 0xcfL
	};

#define DBPROP_PROVIDERFILENAME DBPROP_PROVIDERNAME
#define DBPROP_SERVER_NAME DBPROP_SERVERNAME

	enum DBPROPENUM20
	{
		DBPROP_IMultipleResults = 0xd9L,
		DBPROP_DATASOURCE_TYPE = 0xfbL,
		MDPROP_AXES = 0xfcL,
		MDPROP_FLATTENING_SUPPORT = 0xfdL,
		MDPROP_MDX_JOINCUBES = 0xfeL,
		MDPROP_NAMED_LEVELS = 0xffL,
		MDPROP_RANGEROWSET = 0x100L,
		MDPROP_MDX_SLICER = 0xdaL,
		MDPROP_MDX_CUBEQUALIFICATION = 0xdbL,
		MDPROP_MDX_OUTERREFERENCE = 0xdcL,
		MDPROP_MDX_QUERYBYPROPERTY = 0xddL,
		MDPROP_MDX_CASESUPPORT = 0xdeL,
		MDPROP_MDX_STRING_COMPOP = 0xe0L,
		MDPROP_MDX_DESCFLAGS = 0xe1L,
		MDPROP_MDX_SET_FUNCTIONS = 0xe2L,
		MDPROP_MDX_MEMBER_FUNCTIONS = 0xe3L,
		MDPROP_MDX_NUMERIC_FUNCTIONS = 0xe4L,
		MDPROP_MDX_FORMULAS = 0xe5L,
		MDPROP_AGGREGATECELL_UPDATE = 0xe6L,
		MDPROP_MDX_AGGREGATECELL_UPDATE = MDPROP_AGGREGATECELL_UPDATE,
		MDPROP_MDX_OBJQUALIFICATION = 0x105L,
		MDPROP_MDX_NONMEASURE_EXPRESSIONS = 0x106L,
		DBPROP_ACCESSORDER = 0xe7L,
		DBPROP_BOOKMARKINFO = 0xe8L,
		DBPROP_INIT_CATALOG = 0xe9L,
		DBPROP_ROW_BULKOPS = 0xeaL,
		DBPROP_PROVIDERFRIENDLYNAME = 0xebL,
		DBPROP_LOCKMODE = 0xecL,
		DBPROP_MULTIPLECONNECTIONS = 0xedL,
		DBPROP_UNIQUEROWS = 0xeeL,
		DBPROP_SERVERDATAONINSERT = 0xefL,
		DBPROP_STORAGEFLAGS = 0xf0L,
		DBPROP_CONNECTIONSTATUS = 0xf4L,
		DBPROP_ALTERCOLUMN = 0xf5L,
		DBPROP_COLUMNLCID = 0xf6L,
		DBPROP_RESETDATASOURCE = 0xf7L,
		DBPROP_INIT_OLEDBSERVICES = 0xf8L,
		DBPROP_IRowsetRefresh = 0xf9L,
		DBPROP_SERVERNAME = 0xfaL,
		DBPROP_IParentRowset = 0x101L,
		DBPROP_HIDDENCOLUMNS = 0x102L,
		DBPROP_PROVIDERMEMORY = 0x103L,
		DBPROP_CLIENTCURSOR = 0x104L
	};

	enum DBPROPENUM21
	{
		DBPROP_TRUSTEE_USERNAME = 0xf1L,
		DBPROP_TRUSTEE_AUTHENTICATION = 0xf2L,
		DBPROP_TRUSTEE_NEWAUTHENTICATION = 0xf3L,
		DBPROP_IRow = 0x107L,
		DBPROP_IRowChange = 0x108L,
		DBPROP_IRowSchemaChange = 0x109L,
		DBPROP_IGetRow = 0x10aL,
		DBPROP_IScopedOperations = 0x10bL,
		DBPROP_IBindResource = 0x10cL,
		DBPROP_ICreateRow = 0x10dL,
		DBPROP_INIT_BINDFLAGS = 0x10eL,
		DBPROP_INIT_LOCKOWNER = 0x10fL,
		DBPROP_GENERATEURL = 0x111L,
		DBPROP_IDBBinderProperties = 0x112L,
		DBPROP_IColumnsInfo2 = 0x113L,
		DBPROP_IRegisterProvider = 0x114L,
		DBPROP_IGetSession = 0x115L,
		DBPROP_IGetSourceRow = 0x116L,
		DBPROP_IRowsetCurrentIndex = 0x117L,
		DBPROP_OPENROWSETSUPPORT = 0x118L,
		DBPROP_COL_ISLONG = 0x119L
	};

	enum DBPROPENUM25
	{
		DBPROP_COL_SEED = 0x11aL,
		DBPROP_COL_INCREMENT = 0x11bL,
		DBPROP_INIT_GENERALTIMEOUT = 0x11cL,
		DBPROP_COMSERVICES = 0x11dL
	};

	enum DBPROPENUM26
	{
		DBPROP_OUTPUTSTREAM = 0x11eL,
		DBPROP_OUTPUTENCODING = 0x11fL,
		DBPROP_TABLESTATISTICS = 0x120L,
		DBPROP_SKIPROWCOUNTRESULTS = 0x123L,
		DBPROP_IRowsetBookmark = 0x124L,
		MDPROP_VISUALMODE = 0x125L
	};

	enum DBPROMPT
	{
		DBPROMPT_PROMPT              = 0x01,
		DBPROMPT_COMPLETE,
		DBPROMPT_COMPLETEREQUIRED,
		DBPROMPT_NOPROMPT,
	};

}//nsWin32

#endif//WINQL_OLEDBSTRUCTURES_H_3
