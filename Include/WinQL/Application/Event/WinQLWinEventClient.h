//WinQLWinEventClient.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_APP_WINEVENTCLIENT_H_3
#define WINQL_APP_WINEVENTCLIENT_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/Definitions/Handles.h"
#include "CodeQOR/DataStructures/TLRef.h"
#include "WinQL/CodeServices/Handles/WinQLHandleMap.h"
#include "WinQL/GUI/Window.h"


//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	class __QOR_INTERFACE( __WINQAPI ) CUser32;
}

//--------------------------------------------------------------------------------
namespace nsWin32
{

	//--------------------------------------------------------------------------------
	typedef void ( __QCMP_STDCALLCONVENTION* WinEventCallback )( void* phWinEventHook, unsigned long Event, void* phwnd, long idObject, long idChild, unsigned long idEventThread, unsigned long dwmsEventTime );

	//--------------------------------------------------------------------------------
	//Client for Active Accessibility events
	class __QOR_INTERFACE( __WINQL ) CWinEventClient
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CWinEventClient );
			
		CWinEventClient( unsigned int eventMin, unsigned int eventMax, ModuleHandle hmodWinEventProc, WinEventCallback lpfnWinEventProc, unsigned long idProcess, unsigned long idThread, unsigned int dwflags, int* pbResult = 0 );
		virtual ~CWinEventClient();

	protected:

		int* m_pResult;
		CWinEventHookHandle m_Handle;

	private:			

		nsWinQAPI::CUser32& m_User32Library;

		CWinEventClient();
		__QCS_DECLARE_NONCOPYABLE( CWinEventClient );

	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CActiveAccessibilityClient;

	extern __QCMP_DECLARE_PERTHREAD CTHandleMap< CWinEventHookHandle::refType, CActiveAccessibilityClient >* p_tAACHandleMap;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CActiveAccessibilityClient : public CWinEventClient
	{
	public:

		typedef nsCodeQOR::CTLRef< CActiveAccessibilityClient > refType;

		CActiveAccessibilityClient( unsigned int eventMin, unsigned int eventMax, nsWin32::ModuleHandle hmodWinEventProc, unsigned long idProcess, unsigned long idThread, unsigned int dwflags );
		virtual ~CActiveAccessibilityClient();
		static void __QCMP_STDCALLCONVENTION HandleWinEvent( void* hook, unsigned long dwEvent, void* phwnd, long lObjectId, long lChildId, unsigned long dwEventThread, unsigned long dwmsEventTime );
        virtual void WinEvent( unsigned long dwEvent, COSWindow::refType refWindow, long lObjectId, long lChildId, unsigned long dwEventThread, unsigned long dwmsEventTime ) = 0;

	private:

		CActiveAccessibilityClient();
		CActiveAccessibilityClient( const CActiveAccessibilityClient& );
		CActiveAccessibilityClient& operator = ( const CActiveAccessibilityClient& );

	};

}//nsWin32

#endif//WINQL_APP_WINEVENTCLIENT_H_3

