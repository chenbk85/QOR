//WinQLSEH.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Win32 Code Services Structured Exception Handling

#ifndef WINQL_SEH_H_1
#define WINQL_SEH_H_1

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma __QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE
	
#include "WinQL/Definitions/Data.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	struct CONTEXT;

	//--------------------------------------------------------------------------------
	typedef long ( __QCMP_STDCALLCONVENTION *PVECTORED_EXCEPTION_HANDLER )( struct _EXCEPTION_POINTERS *ExceptionInfo );

	//--------------------------------------------------------------------------------
	typedef long ( __QCMP_STDCALLCONVENTION *PTOP_LEVEL_EXCEPTION_FILTER )( struct _EXCEPTION_POINTERS *ExceptionInfo );
	typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER;

	#define EXCEPTION_NONCONTINUABLE 0x1    // Noncontinuable exception
	//#define EXCEPTION_MAXIMUM_PARAMETERS 15 // maximum number of exception parameters

	__QCMP_STATIC_CONSTANT( int, Exception_Execute_Handler = 1 );
	__QCMP_STATIC_CONSTANT( int, Exception_Continue_Search = 0 );
	__QCMP_STATIC_CONSTANT( int, Exception_Continue_Execution = -1 );

	//--------------------------------------------------------------------------------
	namespace nsCodeServices
	{
		//--------------------------------------------------------------------------------
		class __QOR_INTERFACE( __WINQL ) CStructuredExceptionHelper
		{
		public:

			__QOR_DECLARE_OCLASS_ID( CStructuredExceptionHelper );

			CStructuredExceptionHelper();
			~CStructuredExceptionHelper();
			void* AddVectoredContinueHandler( unsigned long FirstHandler, nsWin32::PVECTORED_EXCEPTION_HANDLER VectoredHandler );
			void* AddVectoredExceptionHandler( unsigned long FirstHandler, nsWin32::PVECTORED_EXCEPTION_HANDLER VectoredHandler );
			void RaiseException( unsigned long dwExceptionCode, unsigned long dwExceptionFlags, unsigned long nNumberOfArguments, const Cmp_ulong_ptr* lpArguments );
			unsigned long RemoveVectoredContinueHandler( void* Handler );
			unsigned long RemoveVectoredExceptionHandler( void* VectoredHandlerHandle );
			unsigned char RtlAddFunctionTable( nsWin32::pRuntimeFunction FunctionTable, unsigned long EntryCount, Cmp_unsigned__int64 BaseAddress, Cmp_unsigned_long_long TargetGp );
			void RtlCaptureContext( nsWin32::CONTEXT* ContextRecord );
			unsigned char RtlDeleteFunctionTable( nsWin32::pRuntimeFunction FunctionTable );
			unsigned char RtlInstallFunctionTableCallback( Cmp_unsigned__int64 TableIdentifier, Cmp_unsigned__int64 BaseAddress, unsigned long Length, void* Callback, void* Context, const wchar_t* OutOfProcessCallbackDll );
			void RtlRestoreContext( nsWin32::CONTEXT* ContextRecord, nsWin32::PEXCEPTION_RECORD ExceptionRecord );
			nsWin32::LPTOP_LEVEL_EXCEPTION_FILTER SetUnhandledExceptionFilter( nsWin32::LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter );
		};

	}//nsCodeServices

}//nsWin32

#endif//WINQL_SEH_H_1
