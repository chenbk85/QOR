//WinQLExceptionFrame.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef	WINQL_EXCEPTIONFRAME_H_1
#define WINQL_EXCEPTIONFRAME_H_1

#include "WinQL/Application/ErrorSystem/WinQLSEH.h"
#include "CodeQOR/ErrorSystem/IExceptionFrame.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CExceptionFrame : public nsCodeQOR::IExceptionFrame
	{
	public:

		//--------------------------------------------------------------------------------
		CExceptionFrame( void* Handler ): m_pNext( GetCurrent() ), m_FrameHandler( Handler )
		{
		}

		//--------------------------------------------------------------------------------
		__QCMP_ALWAYSINLINE CExceptionFrame* Next()
		{ 
			return m_pNext; 
		}

		//--------------------------------------------------------------------------------
		virtual void UnwindStack( nsWin32::EXCEPTION_RECORD* pExceptionRecord, void* ReturnValue );

		//--------------------------------------------------------------------------------
		__QCMP_ALWAYSINLINE void* Handler() const
		{ 
			return m_FrameHandler; 
		}

		//--------------------------------------------------------------------------------
		__QCMP_ALWAYSINLINE void Remove()
		{ 
			this->m_pNext->SetCurrent(); 
		}

		void __stdcall UnwindNestedFrames( nsWin32::EXCEPTION_RECORD* pExcept );		

		//--------------------------------------------------------------------------------
		__QCMP_ALWAYSINLINE void SetCurrent()
		{
#pragma TODO ( "asm to be jit generated" )
#if	( __QCMP_COMPILER == __QCMP_MSVC )
			__asm 
			{				
				mov eax,this
				mov dword ptr fs:[0],eax
			}
#endif
		}

		//--------------------------------------------------------------------------------
		static __QCMP_ALWAYSINLINE CExceptionFrame* GetCurrent()
		{
			CExceptionFrame * pRet;
#pragma TODO ( "asm to be jit generated" )
#if	( __QCMP_COMPILER == __QCMP_MSVC )
			__asm 
			{
				mov eax, dword ptr fs:[0];
				mov pRet, eax
			}
#endif
			return pRet;
		}


	private:

		CExceptionFrame * m_pNext;
		void * m_FrameHandler;

		// Not to be implemented
		CExceptionFrame( const CExceptionFrame& );
		CExceptionFrame& operator = ( const CExceptionFrame& );
	};

} // nsWin32

#endif//WINQL_EXCEPTIONFRAME_H_1
