//WinQLErrorHandling.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Win32 Code Services ErrorHandling class

#ifndef WINQL_CODESERV_ERRHANDLING_H_1
#define WINQL_CODESERV_ERRHANDLING_H_1

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "CodeQOR/Macros/codingmacros.h"
#include "WinQL/Definitions/Handles.h"
#include "WinQL/Definitions/Errors.h"
#include "WinQL/Definitions/Data.h"
#include <stdarg.h>

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	class __QOR_INTERFACE( __WINQAPI ) CUser32;
}

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	typedef struct _FRAME_POINTERS 
	{
		Cmp_unsigned_long_long MemoryStackFp;
		Cmp_unsigned_long_long BackingStoreFp;
	} FRAME_POINTERS, *PFRAME_POINTERS;

	//--------------------------------------------------------------------------------
	typedef void* pHistoryTableForUnwinding;
	typedef void* pKernelNonVolatileContextPointers;

	//--------------------------------------------------------------------------------
	typedef enum _WER_REGISTER_FILE_TYPE
	{   
		WerRegFileTypeUserDocument = 1,
		WerRegFileTypeOther = 2,
		WerRegFileTypeMax
	} WER_REGISTER_FILE_TYPE;


	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CErrorHelper
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CErrorHelper );

		CErrorHelper();
		virtual ~CErrorHelper();

		static void FatalAppExitT( unsigned int uAction, const TCHAR* lpMessageText );
		unsigned long FormatMessageT( unsigned long dwFlags, const void* lpSource, unsigned long dwMessageId, unsigned long dwLanguageId, TCHAR* lpBuffer, unsigned long nSize, va_list* Arguments );
		unsigned int GetErrorMode( void );
		unsigned long GetLastError( void );
		unsigned int SetErrorMode( unsigned int uMode );
		void SetLastError( unsigned long dwErrCode );

	private:

		nsWinQAPI::CUser32& m_User32Library;

		__QCS_DECLARE_NONCOPYABLE( CErrorHelper );
	};

}//nsWin32

#endif//WINQL_CODESERV_ERRHANDLING_H_1
