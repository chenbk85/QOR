//WinQLError.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_CS_ERR_ERROR_H_1
#define WINQL_CS_ERR_ERROR_H_1

#include "CodeQOR/ErrorSystem/BaseErrorDomain.h"
#include "CodeQOR/ErrorSystem/When.h"
#include "CodeQOR/ErrorSystem/Where.h"
#include "CodeQOR/ErrorSystem/What.h"
#include <wchar.h>
#include "WinQL/Application/ErrorSystem/WinQLFunctionContext.h"
#include "WinQL/Application/ErrorSystem/WinQLSEH.h"
#include "../SystemQOR/MSWindows/WinQAPI/include/Error.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	class __QOR_INTERFACE( __WINQL ) CThread;

#	define __QOR_WIN32ERRSYSTEM ::nsWin32::nsCodeServices::CProcess::ThisProcess()->ErrorSystem()


	//--------------------------------------------------------------------------------
#	if		( __QOR_ERROR_SYSTEM == __QCS_YES_ )

#		define _QSYS_MSW_WWL_RAISE( _PARAMS, _Level )								\
	nsWin32::CError::Raise( __FILE__ , __LINE__ ,									\
		_FContext_.Name(), nsCodeQOR::CError::CBaseErrorParams _PARAMS, &nsWin32::ErrorDomain, _Level )

#		define _QSYS_MSW_WWL_NOTE( _PARAMS )										\
		_QSYS_MSW_WWL_RAISE( _PARAMS, nsCodeQOR::CError::ERR_LVL_NOTE )

#		define _QSYS_MSW_WWL_TRACE( _X )											\
    _QSYS_MSW_WWL_NOTE( ( nsCodeQOR::CBaseErrorDomain::TRACE_NOTE, _CTXT( _X ), 0 ) )

#		define _QSYS_MSW_WWL_WARNING( _PARAMS )										\
		_QSYS_MSW_WWL_RAISE( _PARAMS, nsCodeQOR::CError::ERR_LVL_WARNING )

#		define _QSYS_MSW_WWL_CONT_ERROR( _PARAMS )									\
		_QSYS_MSW_WWL_RAISE( _PARAMS, nsCodeQOR::CError::ERR_LVL_CONTINUE )

#		define _QSYS_MSW_WWL_SERIOUS( _PARAMS )										\
		_QSYS_MSW_WWL_RAISE( _PARAMS, nsCodeQOR::CError::ERR_LVL_SERIOUS )

#		define _QSYS_MSW_WWL_FATAL( _PARAMS )										\
		_QSYS_MSW_WWL_RAISE( _PARAMS, nsCodeQOR::CError::ERR_LVL_FATAL )

#		define _QSYS_ERR_ONLY( _X ) _X
#	else

#	define _QSYS_MSW_WWL_RAISE( _PARAMS, _Level )
#	define _QSYS_MSW_WWL_NOTE( _PARAMS )
#	define _QSYS_MSW_WWL_TRACE( _PARAMS )
#	define _QSYS_MSW_WWL_WARNING( _PARAMS )
#	define _QSYS_MSW_WWL_CONT_ERROR( _PARAMS )
#	define _QSYS_MSW_WWL_SERIOUS( _PARAMS )
#	define _QSYS_MSW_WWL_FATAL( _PARAMS )
#	define _QSYS_ERR_ONLY( _X )
#	endif


	//--------------------------------------------------------------------------------
#	if		( __QOR_CPP_EXCEPTIONS == __QCS_YES_ && defined __EXCEPTIONS )
#		define __QOR_PROTECT try

#		define __QOR_ENDPROTECT						\
		catch( nsCodeQOR::CError* pError )				\
		{											\
			pError->Catch();						\
		}											\
		catch(...)									\
		{											\
			throw;									\
		}
#	else
#		define __QOR_PROTECT
#		define __QOR_ENDPROTECT
#	endif//( __QOR_CPP_EXCEPTIONS == __QCS_YES_ )

#	if		( __CQOR_DEFINED_COMPILERSEHSUPPORT )
#		define _QSYS_SEH_PROTECT __QCMP_TRY
#		define _QSYS_SEH_ENDPROTECT __QCMP_EXCEPT	\
		( nsCodeQOR::CError::FilterExcept(				\
			GetExceptionCode(),						\
			GetExceptionInformation() ) )			\
		{											\
			nsCodeQOR::CError::SEHandle(				\
			GetExceptionCode() );					\
		}
#	endif

	//--------------------------------------------------------------------------------
	enum eExcept
	{
		eEXCEPTION_CONTINUE_EXECUTION = -1,
		eEXCEPTION_CONTINUE_SEARCH = 0,
		eEXCEPTION_EXECUTE_HANDLER = 1
	};

	class __QOR_INTERFACE( __WINQL ) CProcess;
	class __QOR_INTERFACE( __WINQL ) CThread;
	class __QOR_INTERFACE( __WINQL ) CModule;

	//------------------------------------------------------------------------------
	//A class to represent what happened
	class __QOR_INTERFACE( __WINQL ) CWhat : public nsCodeQOR::CWhat
	{
		friend class CError;

	public:

		//------------------------------------------------------------------------------
		CWhat()
		{
			m_dwOSErrorCode = 0;
		}

		//------------------------------------------------------------------------------
		virtual ~CWhat()
		{
		}

		//------------------------------------------------------------------------------
		unsigned long OSErrCode()
		{
			return m_dwOSErrorCode;
		}

	protected:

		//------------------------------------------------------------------------------
		void SetOSErrorCode( unsigned long dwErrCode )
		{
			m_dwOSErrorCode = dwErrCode;
		}

		unsigned long m_dwOSErrorCode;
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CError : public nsCodeQOR::CError
	{
	public:

		//------------------------------------------------------------------------------
		CError()
		{
		}

		//------------------------------------------------------------------------------
		virtual ~CError()
		{
		}

		virtual void Resolved( bool bResolved );

		static bool Raise( _EXCEPTION_POINTERS* ep, CBaseErrorParams Params, nsCodeQOR::CBaseErrorDomain* pDomain, CError::Level eLevel );
		static void Raise( const char* szFile, int iLine, const char* szClassFunc, CBaseErrorParams Params, nsCodeQOR::CBaseErrorDomain* pDomain, CError::Level eLevel );
		static void Raise( const char* strFile, int iLine, const char* szClassFunc, unsigned int uiErrCode, CError::Level eLevel );
		static void Raise( unsigned int uiErrCode, nsCodeQOR::CBaseErrorDomain* pDomain, CError::Level eLevel );

		//------------------------------------------------------------------------------
		CWhat& What()
		{
#if		( __QCMP_SUPPORTS( __QCMP_FEATURE_TEMPLATE_PARTIAL_SPECIALIZATION ) )
		return m_What.operator()< CWhat >();
#else
		return *( dynamic_cast< CWhat* >( m_What.Base() ) );
#endif
		}

		__QCMP_NORETURN static void RaiseException( const void* prec );
		static int FilterExcept( unsigned int iCode, _EXCEPTION_POINTERS* ep );
		static void SEHandle( unsigned int iCode );

	};

}//nsWin32

#endif//WINQL_CS_ERR_ERROR_H_1
