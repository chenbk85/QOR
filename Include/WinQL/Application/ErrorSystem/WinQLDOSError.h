//WinQLDOSError.h

// Copyright Querysoft Limited 2012 - . All rights reserved.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_CS_ERR_DOS_H_2
#define WINQL_CS_ERR_DOS_H_2

#include "WinQL/WinQL.h"
#include "WinQL/Definitions/Errors.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CDOSError
	{
	public:

		//--------------------------------------------------------------------------------
		enum
		{
			E_ifunc         = 1,       // invalid function code 
			E_nofile        = 2,       // file not found 
			E_nopath        = 3,       // path not found 
			E_toomany       = 4,       // too many open files 
			E_access        = 5,       // access denied 
			E_ihandle       = 6,       // invalid handle 
			E_arena         = 7,       // arena trashed 
			E_nomem         = 8,       // not enough memory 
			E_iblock        = 9,       // invalid block 
			E_badenv        = 10,      // bad environment 
			E_badfmt        = 11,      // bad format 
			E_iaccess       = 12,      // invalid access code 
			E_idata         = 13,      // invalid data 
			E_unknown       = 14,      // ??? unknown error ??? 
			E_idrive        = 15,      // invalid drive 
			E_curdir        = 16,      // current directory 
			E_difdev        = 17,      // not same device 
			E_nomore        = 18,      // no more files 
			E_maxerr2       = 19,      // unknown error - Version 2.0 
			E_sharerr       = 32,      // sharing violation 
			E_lockerr       = 33,      // locking violation 
			E_maxerr3       = 34,      // unknown error - Version 3.0 
		};

		struct errentry 
		{
			unsigned long oscode;		// OS return value
			int errnocode;				// System V error code
		};

		static struct errentry errtable[];

		// size of the table
		__QCMP_STATIC_CONSTANT( int, ERRTABLESIZE = 45 );

		// The following two constants must be the minimum and maximum values in the (contiguous) range of Exec Failure errors.
		__QCMP_STATIC_CONSTANT( int, MIN_EXEC_ERROR = ErrorInvalidStartingCodeSeg );
		__QCMP_STATIC_CONSTANT( int, MAX_EXEC_ERROR = ErrorInfLoopInRelocChain );

		// These are the low and high value in the range of errors that are access violations
		__QCMP_STATIC_CONSTANT( int, MIN_EACCES_RANGE = ErrorWriteProtect );
		__QCMP_STATIC_CONSTANT( int, MAX_EACCES_RANGE = ErrorSharingBufferExceeded );

		static void MapError ( unsigned long ulOSErrNo );
		static int Get_errno_FromOSErr( unsigned long ulOSErrNo );
		static void Set( unsigned long ulOSErrNo );

	};

}//nsWin32

#endif//WINQL_CS_ERR_DOS_H_2
