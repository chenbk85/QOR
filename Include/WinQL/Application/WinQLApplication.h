//WinQLApplication.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//WinQL Application object

#ifndef WINQL_APPLICATION_H_3
#define WINQL_APPLICATION_H_3

#include "SystemQOR.h"
#include "CodeQOR/Instancing/STMember.h"
#include "CodeQOR/ClassReg/ClassRegEntry.h"
//#include "AppocritaQOR/Application.h"
//#include "AppocritaQOR/Applications/AbstractTerminalApp.h"
//#include "MonkiQOR/GUI.h"
#include "WinQL/Application/ErrorSystem/WinQLErrorSystem.h"
#include "WinQL/Application/Console/WinQLConsole.h"
//#include "WinQL/OSGUI/GUI.h"
//#include "WinQL/Application/Process/WinQLEnvironment.h"
#include "WinQL/Application/Resources/WinQLResourceManager.h"
//#include "WinQL/OSGUI/Theme/ThemeData.h"
#include "WinQL/System/User/WinQLUser.h"
//#include "WinQL/CodeServices/Locale/Locale.h"
//#include "WinQL/Application/Memory/WinQLMemory.h"
#include "WinQL/Application/RecoveryAndRestart/WinQLAppRecovery.h"
#include "WinQL/Application/RecoveryAndRestart/WinQLAppRestart.h"
#include "WinQL/Application/Comms/IPC/Atoms/WinQLAtoms.h"
#include "WinQL/Application/Comms/Node/WinQLCommsNode.h"


//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CWin32Application
	{
	public:

		typedef nsCodeQOR::CTLRef< CWin32Application > refType;

		//--------------------------------------------------------------------------------
		enum eRole
		{
			eService,
			eConsole,
			eOffice,
			eSysTray,
			eGame,
			eTool,
			eCOMServer,
		};

		__QOR_DECLARE_OCLASS_ID( CWin32Application );

		CWin32Application();
		virtual ~CWin32Application();

		//Command Line
		//CEnvironment::refType Environment( void );
		
		CConsole::refType Console( void );			//Console - optional
		//DesktopEnvironment - optional

		bool SetAutoRestart( const CWString& strCommandLine, unsigned long ulFlags  );
		void ClearAutoRestart( void );

		bool SetAutoRecovery( unsigned long ulPingIntervalMilliseconds );
		void ClearAutoRecovery( void );

		//Comms/IPC
		nsCodeQOR::CSTMember< CLocalAtomTable > LocalAtomTable;
		nsCodeQOR::CSTMember< CCommsNode > CommsNode;
		

		//CLocale::refType Locale( void );		
		//CErrorSystem::refType ErrorSystem( void );
		//CMemoryManager::refType Memory( void );
		CResourceManager::refType Resources( void );
		//CThreadManager::refType Threads( void );
		//CTimerManager::refType Timers( void );
		//CModuleManager::refType Modules( void );
		//CSecurityManager::refType Security( void );
		CUser::refType User( void );
		//CGUI::refType GUI( void );		

		static refType TheWin32Application( void );

		//virtual int Run( void );

		//--------------------------------------------------------------------------------
		refType Ref( void )
		{
			refType ref( this, false );
			return ref;
		}

		void SetRole( eRole Role );
		eRole GetRole( void );

	private:

		eRole m_Role;
		CAppRestart::refType m_Restart;
		CAppRecovery::refType m_Recovery;
	};

}//nsWin32

#endif//WINQL_APPLICATION_H_3

