//WinQLComm.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Win32 Serial Comms

#ifndef WINQL_COMMS_SERIAL_COMM_H_3
#define WINQL_COMMS_SERIAL_COMM_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/WinQL.h"
#include "WinQL/System/Devices/WinQLDeviceFile.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	typedef struct _DCB 
	{
		unsigned long DCBlength;      /* sizeof(DCB)                     */
		unsigned long BaudRate;       /* Baudrate at which running       */
		unsigned long fBinary: 1;     /* Binary Mode (skip EOF check)    */
		unsigned long fParity: 1;     /* Enable parity checking          */
		unsigned long fOutxCtsFlow:1; /* CTS handshaking on output       */
		unsigned long fOutxDsrFlow:1; /* DSR handshaking on output       */
		unsigned long fDtrControl:2;  /* DTR Flow control                */
		unsigned long fDsrSensitivity:1; /* DSR Sensitivity              */
		unsigned long fTXContinueOnXoff: 1; /* Continue TX when Xoff sent */
		unsigned long fOutX: 1;       /* Enable output X-ON/X-OFF        */
		unsigned long fInX: 1;        /* Enable input X-ON/X-OFF         */
		unsigned long fErrorChar: 1;  /* Enable Err Replacement          */
		unsigned long fNull: 1;       /* Enable Null stripping           */
		unsigned long fRtsControl:2;  /* Rts Flow control                */
		unsigned long fAbortOnError:1; /* Abort all reads and writes on Error */
		unsigned long fDummy2:17;     /* Reserved                        */
		unsigned short wReserved;       /* Not currently used              */
		unsigned short XonLim;          /* Transmit X-ON threshold         */
		unsigned short XoffLim;         /* Transmit X-OFF threshold        */
		unsigned char ByteSize;        /* Number of bits/byte, 4-8        */
		unsigned char Parity;          /* 0-4=None,Odd,Even,Mark,Space    */
		unsigned char StopBits;        /* 0,1,2 = 1, 1.5, 2               */
		char XonChar;         /* Tx and Rx X-ON character        */
		char XoffChar;        /* Tx and Rx X-OFF character       */
		char ErrorChar;       /* Error replacement char          */
		char EofChar;         /* End of Input character          */
		char EvtChar;         /* Received Event character        */
		unsigned short wReserved1;      /* Fill for now.                   */
	} DCB, *LPDCB;

	//--------------------------------------------------------------------------------
	typedef struct _COMMCONFIG 
	{
		unsigned long dwSize;               // Size of the entire struct
		unsigned short wVersion;            // version of the structure
		unsigned short wReserved;           // alignment
		DCB dcb;							// device control block
		unsigned long dwProviderSubType;    // ordinal value for identifying provider-defined data structure format
		unsigned long dwProviderOffset;     // Specifies the offset of provider specific data field in bytes from the start
		unsigned long dwProviderSize;       // size of the provider-specific data field
		wchar_t wcProviderData[ 1 ];		// provider-specific data
	} COMMCONFIG, *LPCOMMCONFIG;

	//--------------------------------------------------------------------------------
	typedef struct _COMSTAT 
	{
		unsigned long fCtsHold : 1;
		unsigned long fDsrHold : 1;
		unsigned long fRlsdHold : 1;
		unsigned long fXoffHold : 1;
		unsigned long fXoffSent : 1;
		unsigned long fEof : 1;
		unsigned long fTxim : 1;
		unsigned long fReserved : 25;
		unsigned long cbInQue;
		unsigned long cbOutQue;
	} COMSTAT, *LPCOMSTAT;

	//--------------------------------------------------------------------------------
	typedef struct _COMMPROP 
	{
		unsigned short wPacketLength;
		unsigned short wPacketVersion;
		unsigned long dwServiceMask;
		unsigned long dwReserved1;
		unsigned long dwMaxTxQueue;
		unsigned long dwMaxRxQueue;
		unsigned long dwMaxBaud;
		unsigned long dwProvSubType;
		unsigned long dwProvCapabilities;
		unsigned long dwSettableParams;
		unsigned long dwSettableBaud;
		unsigned short wSettableData;
		unsigned short wSettableStopParity;
		unsigned long dwCurrentTxQueue;
		unsigned long dwCurrentRxQueue;
		unsigned long dwProvSpec1;
		unsigned long dwProvSpec2;
		wchar_t wcProvChar[ 1 ];
	} COMMPROP,*LPCOMMPROP;

	//--------------------------------------------------------------------------------
	typedef struct _COMMTIMEOUTS 
	{
		unsigned long ReadIntervalTimeout;          // Maximum time between read chars.
		unsigned long ReadTotalTimeoutMultiplier;   // Multiplier of characters.
		unsigned long ReadTotalTimeoutConstant;     // Constant in milliseconds.
		unsigned long WriteTotalTimeoutMultiplier;  // Multiplier of characters.
		unsigned long WriteTotalTimeoutConstant;    // Constant in milliseconds.
	} COMMTIMEOUTS,*LPCOMMTIMEOUTS;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CComPort : public CDeviceFile
	{
	public:
		
		CComPort( const TCHAR* lpPortName, unsigned long dwDesiredAccess );	//e.g._TXT("\\\\.\\COM1")
		virtual ~CComPort();
		bool GetConfig( LPCOMMCONFIG lpCC, unsigned long* lpdwSize );
		bool SetConfig( LPCOMMCONFIG lpCC, unsigned long dwSize );
		bool ClearBreak( void );
		bool ClearError( unsigned long* lpErrors, LPCOMSTAT lpStat );
		bool EscapeFunction( unsigned long dwFunc );
		bool GetMask( unsigned long* lpEvtMask );
		bool GetModemStatus( unsigned long* lpModemStat );
		bool GetProperties( LPCOMMPROP lpCommProp );
		bool GetState( LPDCB lpDCB );
		bool Purge( unsigned long dwFlags );
		bool SetBreak( void );
		bool SetMask( unsigned long dwEvtMask );
		bool SetState( LPDCB lpDCB );
		bool GetTimeouts( LPCOMMTIMEOUTS lpCommTimeouts );
		bool SetTimeouts( LPCOMMTIMEOUTS lpCommTimeouts );
		bool Setup( unsigned long dwInQueue, unsigned long dwOutQueue );
		bool TransmitChar( char cChar );
		bool WaitEvent( unsigned long* lpEvtMask, LPOVERLAPPED lpOverlapped );

		//static class operations

		static bool BuildDCB( const TCHAR* lpDef, LPDCB lpDCB );
		static bool BuildDCBAndTimeouts( const TCHAR* lpDef, LPDCB lpDCB, LPCOMMTIMEOUTS lpCommTimeouts );
		static bool ConfigDialog( const TCHAR* lpszName, CWindowHandle& hWnd, LPCOMMCONFIG lpCC );
		static bool GetDefaultConfig( const TCHAR* lpszName, LPCOMMCONFIG lpCC, unsigned long* lpdwSize );
		static bool SetDefaultConfig( const TCHAR* lpszName, LPCOMMCONFIG lpCC, unsigned long dwSize );

	};

}//nsWin32

#endif//WINQL_COMMS_SERIAL_COMM_H_3
