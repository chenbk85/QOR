//WinQLActCtx.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Win32 Activation Context class

#ifndef WINQL_APP_ACTCTX_H_2
#define WINQL_APP_ACTCTX_H_2

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/Definitions/Security.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	typedef struct tagACTCTX
	{
		unsigned long cbSize;
		unsigned long dwFlags;
		const TCHAR* lpSource;
		unsigned short wProcessorArchitecture;
		unsigned short wLangId;
		const TCHAR* lpAssemblyDirectory;
		const TCHAR* lpResourceName;
		const TCHAR* lpApplicationName;
		ModuleHandle hModule;
	} ACTCTX, *PACTCTX;

	//--------------------------------------------------------------------------------
	typedef struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA 
	{
		void* lpInformation;
		void* lpSectionBase;
		unsigned long ulSectionLength;
		void* lpSectionGlobalDataBase;
		unsigned long ulSectionGlobalDataLength;
	} ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA, *PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
	typedef const ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA *PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;

	//--------------------------------------------------------------------------------
	typedef struct tagACTCTX_SECTION_KEYED_DATA 
	{
		unsigned long cbSize;
		unsigned long ulDataFormatVersion;
		void* lpData;
		unsigned long ulLength;
		void* lpSectionGlobalData;
		unsigned long ulSectionGlobalDataLength;
		void* lpSectionBase;
		unsigned long ulSectionTotalLength;
		void* hActCtx;
		unsigned long ulAssemblyRosterIndex;
	// 2600 stops here
		unsigned long ulFlags;
		ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata;
	} ACTCTX_SECTION_KEYED_DATA, *PACTCTX_SECTION_KEYED_DATA;
	typedef const ACTCTX_SECTION_KEYED_DATA * PCACTCTX_SECTION_KEYED_DATA;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CActCtx : public ACTCTX
	{

	public:

		__QOR_DECLARE_OCLASS_ID( CActCtx );

		CActCtx();
		virtual ~CActCtx();
		bool Activate( Cmp_ulong_ptr* lpCookie );
		bool Deactivate( unsigned long dwFlags, Cmp_ulong_ptr ulCookie );
		void AddRef( void );
		void Release( void );
		bool Zombify( void );
		static bool FindSectionGuid( unsigned long dwFlags, const nsWin32::GUID* lpExtensionGuid, unsigned long ulSectionId, const nsWin32::GUID* lpGuidToFind, nsWin32::PACTCTX_SECTION_KEYED_DATA ReturnedData );
		static bool FindSectionString( unsigned long dwFlags, const nsWin32::GUID* lpExtensionGuid, unsigned long ulSectionId, const TCHAR* lpStringToFind, nsWin32::PACTCTX_SECTION_KEYED_DATA ReturnedData );
		static bool GetCurrent( void** lphActCtx );
		bool QueryW( unsigned long dwFlags, void* pvSubInstance, unsigned long ulInfoClass, void* pvBuffer, Cmp_ulong_ptr cbBuffer, Cmp_ulong_ptr * pcbWrittenOrRequired );
		bool QuerySettingsW( unsigned long dwFlags, const wchar_t* settingsNameSpace, const wchar_t* settingName, wchar_t* pvBuffer, Cmp_ulong_ptr dwBuffer, Cmp_ulong_ptr* pdwWrittenOrRequired );

	private:

		void* m_hActCtx;

	};
		

}//nsWin32

#endif//WINQL_APP_ACTCTX_H_2

