//WinQLRemoteProcess.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Windows external process objects

#ifndef WINQL_CS_REMOTEPROCESS_H_3
#define WINQL_CS_REMOTEPROCESS_H_3

#include "WinQL/WinQL.h"
#include "WinQL/Application/Process/WinQLJob.h"
#include "WinQL/CodeServices/WinQLSharedRef.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CRemoteProcess
	{
		QOR_PP_WINQL_SHARED

	public:

		typedef CSharedRef< CRemoteProcess > refType;

		friend class refType;

		__QOR_DECLARE_OCLASS_ID( CRemoteProcess );

		/*
		//--------------------------------------------------------------------------------
		//Launch codes
		enum
		{
			_P_WAIT			= 0,
			_P_NOWAIT		= 1,
			_OLD_P_OVERLAY	= 2,
			_P_NOWAITO		= 3,
			_P_DETACH		= 4,
		};
		*/
	public:

		//Job

		bool IsInJob( CJob::refType refJob, int& Result );
		bool AssignToJobObject( CJob::refType refJob );

		bool Terminate( unsigned int uiExitCode );
		bool GetExitCode( unsigned long& ulExitCode );

		//Priority

		unsigned long GetPriorityClass();
		bool GetPriorityBoost();
		bool SetPriorityClass( unsigned long dwPriorityClass );
		bool SetPriorityBoost( bool bDisablePriorityBoost );

		//Affinity

		bool GetAffinityMask( Cmp_ulong_ptr& ulProcessAffinityMask, Cmp_ulong_ptr& ulSystemAffinityMask );
		bool QueryAffinityUpdateMode( unsigned long& ulFlags );
		bool SetAffinityMask( Cmp_ulong_ptr dwProcessAffinityMask );
		bool SetAffinityUpdateMode( unsigned long dwFlags );

		bool GetHandleCount( unsigned long& ulHandleCount );
		unsigned long GetId();
		
		bool IsWow64( int& Wow64Process );
		
		//Properties & Resources

		bool GetIoCounters( nsWin32::IOCounters& IoCounters );
		bool QueryFullImageName( unsigned long dwFlags, CTString& strName );		
		bool GetTimes( nsWin32::FILETIME& lpCreationTime, nsWin32::FILETIME& lpExitTime, nsWin32::FILETIME& lpKernelTime, nsWin32::FILETIME& lpUserTime );
		bool QueryCycleTime( Cmp_unsigned__int64& CycleTime );
		unsigned long GetVersion();
		bool GetWorkingSetSize( Cmp_ulong_ptr& ulMinimumWorkingSetSize, Cmp_ulong_ptr& ulMaximumWorkingSetSize );
		bool GetWorkingSetSizeEx( Cmp_ulong_ptr& ulMinimumWorkingSetSize, Cmp_ulong_ptr& ulMaximumWorkingSetSize, unsigned long& ulFlags );
		bool SetWorkingSetSize( Cmp_ulong_ptr ulMinimumWorkingSetSize, Cmp_ulong_ptr ulMaximumWorkingSetSize );
		bool SetWorkingSetSizeEx( Cmp_ulong_ptr ulMinimumWorkingSetSize, Cmp_ulong_ptr ulMaximumWorkingSetSize, unsigned long ulFlags );		
		unsigned long GetGuiResources( unsigned long uiFlags );

		unsigned long WaitForInputIdle( unsigned long dwMilliseconds );
		bool ReadMemory( const void* lpBaseAddress, void* lpBuffer, Cmp_ulong_ptr nSize, Cmp_ulong_ptr& ulNumberOfBytesRead );
		bool WriteMemory( void* lpBaseAddress, const void* lpBuffer, Cmp_ulong_ptr nSize, Cmp_ulong_ptr& ulNumberOfBytesWritten );
		bool FlushInstructionCache( const void* lpBaseAddress, Cmp_ulong_ptr dwSize );
		bool IsBeingDebugged( int& DebuggerPresent );
		bool DebugBreak( void );

		//--------------------------------------------------------------------------------
		refType Ref( void )
		{
			return refType( this );
		}

		//------------------------------------------------------------------------------
		CHandle ProcessHandle( void ) const
		{
			_WINQ_FCONTEXT( "CRemoteProcess::Handle" );
			return m_ProcessHandle;
		}

		//Create a process
		CRemoteProcess( const TCHAR* lpApplicationName, TCHAR* lpCommandLine, nsWin32::LPSECURITY_ATTRIBUTES lpProcessAttributes, nsWin32::LPSECURITY_ATTRIBUTES lpThreadAttributes, bool bInheritHandles, unsigned long dwCreationFlags, void* lpEnvironment, const TCHAR* lpCurrentDirectory, nsWin32::LPSTARTUPINFO lpStartupInfo, nsWin32::ProcessInformation* lpProcessInformation );
		//Attach to an existing process
		CRemoteProcess( unsigned long dwDesiredAccess, bool bInheritHandle, unsigned long dwProcessId );
		//Detach from process
		~CRemoteProcess();

	private:

		friend class CProcess;

		//------------------------------------------------------------------------------
		CRemoteProcess::CRemoteProcess( void* hProcess ) : m_ProcessHandle( hProcess )
		{
			_WINQ_FCONTEXT( "CRemoteProcess::CRemoteProcess" );
			m_ProcessHandle.Attach( this );
		}

		//not to be implemented
		CRemoteProcess();
		CRemoteProcess( const CRemoteProcess& );
		CRemoteProcess& operator = ( const CRemoteProcess& );

		CHandle m_ProcessHandle;

		friend __QOR_INTERFACE( __WINQL ) CRemoteProcess::refType CreateProcess( const TCHAR* lpApplicationName, TCHAR* lpCommandLine, nsWin32::LPSECURITY_ATTRIBUTES lpProcessAttributes, nsWin32::LPSECURITY_ATTRIBUTES lpThreadAttributes, bool bInheritHandles, unsigned long dwCreationFlags, void* lpEnvironment, const TCHAR* lpCurrentDirectory, nsWin32::LPSTARTUPINFO lpStartupInfo, nsWin32::ProcessInformation* lpProcessInformation );
		friend __QOR_INTERFACE( __WINQL ) CRemoteProcess::refType OpenProcess( unsigned long dwDesiredAccess, bool bInheritHandle, unsigned long dwProcessId );
	};

	__QOR_INTERFACE( __WINQL ) CRemoteProcess::refType CreateProcess( const TCHAR* lpApplicationName, TCHAR* lpCommandLine, nsWin32::LPSECURITY_ATTRIBUTES lpProcessAttributes, nsWin32::LPSECURITY_ATTRIBUTES lpThreadAttributes, bool bInheritHandles, unsigned long dwCreationFlags, void* lpEnvironment, const TCHAR* lpCurrentDirectory, nsWin32::LPSTARTUPINFO lpStartupInfo, nsWin32::ProcessInformation* lpProcessInformation );
	__QOR_INTERFACE( __WINQL ) CRemoteProcess::refType OpenProcess( unsigned long dwDesiredAccess, bool bInheritHandle, unsigned long dwProcessId );

}//nsWin32

#endif//WINQL_CS_REMOTEPROCESS_H_3
