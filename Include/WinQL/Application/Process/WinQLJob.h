//WinQLJob.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Win32 Job object

#ifndef WINQL_CODESERV_JOB_H_3
#define WINQL_CODESERV_JOB_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/Definitions/Security.h"
#include "WinQL/CodeServices/WinQLPolicy.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQL/CodeServices/Text/WinString.h"
#include "WinQL/CodeServices/WinQLSharedRef.h"
#include "WinQL/CodeServices/Handles/WinQLHandle.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	class __QOR_INTERFACE( __WINQL ) CProcess;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CJob
	{
		QOR_PP_WINQL_SHARED

	public:

		//--------------------------------------------------------------------------------
		enum eJobObjectInfoClass
		{
			JobObjectBasicAccountingInformation = 1,
			JobObjectBasicLimitInformation,
			JobObjectBasicProcessIdList,
			JobObjectBasicUIRestrictions,
			JobObjectSecurityLimitInformation,  // deprecated
			JobObjectEndOfJobTimeInformation,
			JobObjectAssociateCompletionPortInformation,
			JobObjectBasicAndIoAccountingInformation,
			JobObjectExtendedLimitInformation,
			JobObjectJobSetInformation,
			JobObjectGroupInformation,//?
			JobObjectNotificationLimitInformation,
			JobObjectLimitViolationInformation,
			JobObjectGroupInformationEx,//?
			JobObjectCpuRateControlInformation,
			JobObjectCompletionFilter,//?
			JobObjectCompletionCounter,//?
			JobObjectReserved1Information = 18,
			JobObjectReserved2Information,
			JobObjectReserved3Information,
			JobObjectReserved4Information,
			JobObjectReserved5Information,
			JobObjectReserved6Information,
			JobObjectReserved7Information,
			JobObjectReserved8Information,
			JobObjectReserved9Information,
			MaxJobObjectInfoClass
		};

		//--------------------------------------------------------------------------------
		struct sJobObjectBasicAccountInformation
		{
			LARGE_INTEGER TotalUserTime;
			LARGE_INTEGER TotalKernelTime;
			LARGE_INTEGER ThisPeriodTotalUserTime;
			LARGE_INTEGER ThisPeriodTotalKernelTime;
			unsigned long TotalPageFaultCount;
			unsigned long TotalProcesses;
			unsigned long ActiveProcesses;
			unsigned long TotalTerminatedProcesses;
		};

		//--------------------------------------------------------------------------------
		struct sJobObjectBasicLimitInformation
		{
			LARGE_INTEGER PerProcessUserTimeLimit;
			LARGE_INTEGER PerJobUserTimeLimit;
			unsigned long LimitFlags;
			size_t MinimumWorkingSetSize;
			size_t MaximumWorkingSetSize;
			unsigned long ActiveProcessLimit;
			Cmp_ulong_ptr Affinity;
			unsigned long PriorityClass;
			unsigned long SchedulingClass;
		};

		//--------------------------------------------------------------------------------
		struct sJobObjectExtendedLimitInformation
		{
			sJobObjectBasicLimitInformation BasicLimitInformation;
			IOCounters IoInfo;
			size_t ProcessMemoryLimit;
			size_t JobMemoryLimit;
			size_t PeakProcessMemoryUsed;
			size_t PeakJobMemoryUsed;
		};

		//--------------------------------------------------------------------------------
		struct sJobObjectBasicProcessIDList
		{
			unsigned long NumberOfAssignedProcesses;
			unsigned long NumberOfProcessIdsInList;
			Cmp_ulong_ptr ProcessIdList[1];
		};

		//--------------------------------------------------------------------------------
		struct sJobObjectBasicUIRestrictions
		{
			unsigned long UIRestrictionsClass;
		};

		//--------------------------------------------------------------------------------
		enum eJobObjectUILimits
		{
			eJobObjectUILimit_Handles			= 0x00000001,
			eJobObjectUILimit_ReadClipboard		= 0x00000002,
			eJobObjectUILimit_WriteClipboard	= 0x00000004,
			eJobObjectUILimit_SystemParameters	= 0x00000008,
			eJobObjectUILimit_DisplaySettings	= 0x00000010,
			eJobObjectUILimit_GlobalAtoms		= 0x00000020,
			eJobObjectUILimit_Desktop			= 0x00000040,
			eJobObjectUILimit_ExitWindows		= 0x00000080,
		};
		
		//--------------------------------------------------------------------------------
		struct sJobObjectEndOfJobTimeInformation
		{
			unsigned long EndOfJobTimeAction;
		};

		//--------------------------------------------------------------------------------
		struct sJobObjectAssociateCompletionPort
		{
			void* CompletionKey;
			void* CompletionPort;
		};

		//--------------------------------------------------------------------------------
		struct sJobObjectBasicAndIOAccountingInformation
		{
			sJobObjectBasicAccountInformation BasicInfo;
			IOCounters IoInfo;
		};

		//--------------------------------------------------------------------------------
		struct sJobObjectJobSetInformation
		{
			unsigned long MemberLevel;
		};

		//--------------------------------------------------------------------------------
		enum eJobObjectRateControlTolerance
		{
			ToleranceLow = 1,
			ToleranceMedium,
			ToleranceHigh
		};

		//--------------------------------------------------------------------------------
		enum eJobObjectRateControlToleranceInterval
		{
			ToleranceIntervalShort = 1,
			ToleranceIntervalMedium,
			ToleranceIntervalLong
		};

		//--------------------------------------------------------------------------------
		struct sJobObjectNotificationLimitInformation
		{
			Cmp_unsigned__int64 IoReadBytesLimit;
			Cmp_unsigned__int64 IoWriteBytesLimit;
			LARGE_INTEGER PerJobUserTimeLimit;
			Cmp_unsigned__int64 JobMemoryLimit;
			eJobObjectRateControlTolerance RateControlTolerance;
			eJobObjectRateControlToleranceInterval RateControlToleranceInterval;
			unsigned long LimitFlags;
		};

		//--------------------------------------------------------------------------------
		struct sJobObjectLimitViolationInformation
		{
			unsigned long LimitFlags;
			unsigned long ViolationLimitFlags;
			Cmp_unsigned__int64 IoReadBytes;
			Cmp_unsigned__int64 IoReadBytesLimit;
			Cmp_unsigned__int64 IoWriteBytes;
			Cmp_unsigned__int64 IoWriteBytesLimit;
			LARGE_INTEGER PerJobUserTime;
			LARGE_INTEGER PerJobUserTimeLimit;
			Cmp_unsigned__int64 JobMemory;
			Cmp_unsigned__int64 JobMemoryLimit;
			eJobObjectRateControlTolerance RateControlTolerance;
			eJobObjectRateControlToleranceInterval RateControlToleranceLimit;
		};

		//--------------------------------------------------------------------------------
		struct sJobObjectCPURateControlInformation
		{
			unsigned long ControlFlags;
			union 
			{
				unsigned long CpuRate;
				unsigned long Weight;
			};
		};

		//--------------------------------------------------------------------------------
		struct sGroupAffinity
		{
			Cmp_ulong_ptr Mask;
			unsigned short Group;
			unsigned short Reserved[3];
		};

		typedef CSharedRef< CJob > refType;

		friend class refType;

		__QOR_DECLARE_OCLASS_ID( CJob );

		//Assign a Process to this Job
		bool AssignProcess( CProcess& Process );
		//Does this Job contain Process?
		bool ContainsProcess( CProcess& Process, int& iResult );
		//Terminates all processes currently associated with the job. If the job is nested, this function terminates all processes currently associated with the job and all of its child jobs in the hierarchy. 
		bool Terminate( unsigned int uExitCode );

		nsCodeQOR::CTLRef< sJobObjectBasicAccountInformation > GetBasicAccountingInformation( void );
		nsCodeQOR::CTLRef< sJobObjectBasicAndIOAccountingInformation > GetBasicAndIOAccountingInformation( void );
		nsCodeQOR::CTLRef< sJobObjectBasicLimitInformation > GetBasicLimitInformation( void );
		bool SetBasicLimitInformation( nsCodeQOR::CTLRef< CJob::sJobObjectBasicLimitInformation > BasicLimitInformation );
		nsCodeQOR::CTLRef< sJobObjectExtendedLimitInformation > GetExtendedLimitInformation( void );
		bool SetExtendedLimitInformation( nsCodeQOR::CTLRef< sJobObjectExtendedLimitInformation > );
		nsCodeQOR::CTLRef< nsCodeQOR::CTArray< Cmp_ulong_ptr > > GetBasicProcessIDList( void );		
		nsCodeQOR::CTLRef< sJobObjectNotificationLimitInformation > GetNotificationLimitInformation( void );
		bool SetNotificationLimitInformation( nsCodeQOR::CTLRef< sJobObjectNotificationLimitInformation > );
		nsCodeQOR::CTLRef< sJobObjectLimitViolationInformation > GetLimitViolationInformation( void );

		sJobObjectBasicUIRestrictions GetUILimits( void );
		bool SetUILimits( sJobObjectBasicUIRestrictions& UIRestrictions );
		bool GetUILimitHandles( void );
		bool SetUILimitHandles( bool bLimit );
		bool GetUILimitReadClipboard( void );
		bool SetUILimitReadClipboard( bool bLimit );
		bool GetUILimitWriteClipboard( void );
		bool SetUILimitWriteClipboard( bool bLimit );
		bool GetUILimitSystemParameters( void );
		bool SetUILimitSystemParameters( bool bLimit );
		bool GetUILimitDisplaySettings( void );
		bool SetUILimitDisplaySettings( bool bLimit );
		bool GetUILimitGlobalAtoms( void );
		bool SetUILimitGlobalAtoms( bool bLimit );
		bool GetUILimitDesktop( void );
		bool SetUILimitDesktop( bool bLimit );
		bool GetUILimitExitWindows( void );
		bool SetUILimitExitWindows( bool bLimit );

		sJobObjectEndOfJobTimeInformation GetEndOfJobTimeInfo( void );
		bool SetEndOfJobTimeInfo( sJobObjectEndOfJobTimeInformation& EndOfJobTimeInformation );
		sJobObjectAssociateCompletionPort GetCompletionPortInfo( void );
		bool SetCompletionPortInfo( sJobObjectAssociateCompletionPort& AssociateCompletionPort );
		sJobObjectJobSetInformation GetJobSetInfo( void );
		sJobObjectCPURateControlInformation GetCPURateControlInfo( void );
		bool SetCPURateControlInfo( sJobObjectCPURateControlInformation& CPURateControlInformation );

		bool SetGroupInfo( nsCodeQOR::CTLRef< unsigned short > GroupInfo, unsigned int uiCount = 1 );
		bool SetGroupAffinityInfo( nsCodeQOR::CTLRef< sGroupAffinity > GroupAffinity, unsigned int uiCount = 1);

		//--------------------------------------------------------------------------------
		refType Ref( void )
		{
			return refType( this );
		}
		
		//--------------------------------------------------------------------------------
		CHandle& Handle()
		{
			return m_Handle;
		}
		
	protected:

		//Create a new Job
		CJob( nsWin32::LPSECURITY_ATTRIBUTES lpJobAttributes, const CTString& strName );
		//Open an exisitng Job
		CJob( unsigned long dwDesiredAccess, bool bInheritHandles, const CTString& strName );
		//Close a Job
		virtual ~CJob();

		//Queries limit and job state information from the job object.
		bool QueryInformation( eJobObjectInfoClass JobObjectInfoClass, void* lpJobObjectInfo, unsigned long cbJobObjectInfoLength, unsigned long* lpReturnLength );
		//Sets limit and job state information on the job object.
		bool SetInformationJobObject( eJobObjectInfoClass JobObjectInfoClass, void* lpJobObjectInfo, unsigned long cbJobObjectInfoLength );

	private:

		CHandle m_Handle;

		friend CJob::refType CreateJob( nsWin32::LPSECURITY_ATTRIBUTES, const CTString& strJobName );
		friend CJob::refType OpenJob( unsigned long ulAccess, bool bInheritHandles, const CTString& strJobName );
	};

	//Create a new Job Object
	CJob::refType CreateJob( nsWin32::LPSECURITY_ATTRIBUTES, const CTString& strJobName );
	//Open an existing Job Object
	CJob::refType OpenJob( unsigned long ulAccess, bool bInheritHandles, const CTString& strJobName );

}//nsWin32

#endif//WINQL_CODESERV_JOB_H_3

