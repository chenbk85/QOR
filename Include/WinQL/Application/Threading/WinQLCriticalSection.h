//WinQLCriticalSection.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Win32 Critical Section classes

#ifndef WINQL_CS_CRITSEC_H_1
#define WINQL_CS_CRITSEC_H_1

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/WinQL.h"
#include "CodeQOR/DataTypes/GUID.h"
#include "CodeQOR/Macros/ClassIdentityMacros.h"

//------------------------------------------------------------------------------
namespace nsWin32
{
	struct _RTL_CRITICAL_SECTION;

	//------------------------------------------------------------------------------
	typedef struct _LIST_ENTRY 
	{
	   struct _LIST_ENTRY *Flink;
	   struct _LIST_ENTRY *Blink;
	} LIST_ENTRY, *PLIST_ENTRY, *__QCMP_RESTRICT PRLIST_ENTRY;

	//------------------------------------------------------------------------------
	typedef struct _RTL_CRITICAL_SECTION_DEBUG 
	{
		unsigned short Type;
		unsigned short CreatorBackTraceIndex;
		_RTL_CRITICAL_SECTION* CriticalSection;
		LIST_ENTRY ProcessLocksList;
		unsigned long EntryCount;
		unsigned long ContentionCount;
		unsigned long Flags;
		unsigned short CreatorBackTraceIndexHigh;
		unsigned short SpareWORD;
	} RTL_CRITICAL_SECTION_DEBUG, *PRTL_CRITICAL_SECTION_DEBUG, RTL_RESOURCE_DEBUG, *PRTL_RESOURCE_DEBUG;

	//------------------------------------------------------------------------------
	typedef struct _RTL_CRITICAL_SECTION 
	{
		PRTL_CRITICAL_SECTION_DEBUG DebugInfo;

		//  The following three fields control entering and exiting the critical section
		long LockCount;
		long RecursionCount;
		void* OwningThread;        // from the thread's ClientId->UniqueThread
		void* LockSemaphore;
		Cmp_ulong_ptr SpinCount;        // force size on 64-bit systems when packed
		unsigned char extra[128];
	} RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION;

	typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;

	//------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CCriticalSection : public CRITICAL_SECTION
	{

	public:

		__QOR_DECLARE_OCLASS_ID( CCriticalSection );

		CCriticalSection();
		CCriticalSection( unsigned long dwSpinCount, unsigned long dwFlags = 0, int* pbResult = 0 );
		~CCriticalSection();
		void Enter( void );
		void Leave( void );
		void Acquire( void );
		void Release( void );
		unsigned long SetSpinCount( unsigned long dwSpinCount );
		bool TryEnter( void );

	private:

		void Construct( unsigned long dwSpinCount, unsigned long dwFlags, int* pbResult );

		CCriticalSection( const CCriticalSection& );
		CCriticalSection& operator = ( const CCriticalSection& );
	};


	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CCriticalSectionLock
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CCriticalSectionLock );

		CCriticalSectionLock( CCriticalSection& Section );
		~CCriticalSectionLock();

		void Lock( void );
		void Unlock( void );

	protected:

		CCriticalSection& m_Section;

	private:

		//Not to be implemented
		CCriticalSectionLock();
		CCriticalSectionLock( const CCriticalSectionLock& );
		CCriticalSectionLock& operator = ( const CCriticalSectionLock& );
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE(__WINQL) CCriticalLock
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CCriticalLock );

		CCriticalLock( unsigned long dwSpinCount = 0, unsigned long dwFlags = 0, int* pbResult = 0 );
		~CCriticalLock();

	protected:

		CCriticalSection m_Section;

	private:

		CCriticalLock( const CCriticalLock& );
		CCriticalLock& operator = ( const CCriticalLock& );
	};

}//nsWin32

#endif//WINQL_CS_CRITSEC_H_1
