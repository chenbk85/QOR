//Mutex.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Win32 Mutex classes

#ifndef WINQL_CS_MUTEX_H_2
#define WINQL_CS_MUTEX_H_2

#ifdef  __QCMP_OPTIMIZEINCLUDE
#pragma __QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/Definitions/Constants.h"
#include "WinQL/Application/ErrorSystem/WinQLFunctionContext.h"
#include "WinQL/Definitions/Data.h"

//------------------------------------------------------------------------------
namespace nsWin32
{
	//------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CMutex
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CMutex );

		__QCMP_STATIC_CONSTANT( unsigned long, Create_Mutex_Initial_Owner	= 0x00000001 );

		CMutex( unsigned long dwFlags = 0, nsWin32::LPSECURITY_ATTRIBUTES lpMutexAttributes = 0, unsigned long dwDesiredAccess = 0, const TCHAR* lpName = 0, bool* pbAlreadyExists = 0 );
		CMutex( const TCHAR* lpName, unsigned long dwDesiredAccess = 0, bool bInheritHandle = 0 );
		~CMutex();
		bool Release( void );
		const void* Handle() const;

	protected:

		bool m_bAlreadyExisted;

	private:

		bool m_bInitialOwnership;
		bool m_bOpenClose;
		void* m_h;

	};


	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CMutexLock
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CMutexLock );

		CMutexLock( CMutex& Mutex, unsigned long dwTimeout = 0xFFFFFFFF, unsigned long* pdwResult = 0 );
		virtual ~CMutexLock();

	protected:

		CMutex& m_Mutex;

	private:

		CMutexLock& operator = ( const CMutexLock& Src ); //not to be implemented
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CLock
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CLock );

		CLock( SECURITY_ATTRIBUTES* pMutexAttributes = 0, unsigned long dwFlags = 0, unsigned long dwDesiredAccess = 0, unsigned long* pdwResult = 0, unsigned long dwTimeout = Infinite );
		virtual ~CLock();

	protected:

		CMutex m_Mutex;
	};

}//nsWin32

#endif//WINQL_CS_MUTEX_H_2
