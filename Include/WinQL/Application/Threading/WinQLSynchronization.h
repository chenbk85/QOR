//WinQLSynchronization.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Win32 Code Services sync classes

#ifndef WINQL_CS_SYNC_H_2
#define WINQL_CS_SYNC_H_2

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma __QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/Definitions/IO.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	typedef void ( __QCMP_STDCALLCONVENTION *PAPCFUNC )( Cmp_ulong_ptr Parameter );

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CInterlockedHelper
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CInterlockedHelper );

		CInterlockedHelper();
		~CInterlockedHelper();
		static long Increment( long volatile* Addend );
		static Cmp_long_long CompareExchange64( Cmp_long_long volatile* Destination, Cmp_long_long Exchange, Cmp_long_long Comperand );
		static long CompareExchangeAcquire( long volatile* Destination, long Exchange, long Comperand );
		static Cmp_long_long CompareExchangeAcquire64( Cmp_long_long volatile* Destination, Cmp_long_long Exchange, Cmp_long_long Comperand );
		static long CompareExchangeRelease( long volatile* Destination, long Exchange, long Comperand );
		static Cmp_long_long CompareExchangeRelease64( Cmp_long_long volatile* Destination, Cmp_long_long Exchange, Cmp_long_long Comperand );
		static Cmp_long_long Decrement64( Cmp_long_long volatile* Addend );
		static long DecrementAcquire( long volatile* Addend );
		static long DecrementRelease( long volatile* Addend );
		static Cmp_long_long Exchange64( Cmp_long_long volatile* Target, Cmp_long_long Value );
		static Cmp_long_long ExchangeAcquire64( Cmp_long_long volatile Target, Cmp_long_long Value );
		static Cmp_long_long ExchangeAdd64( Cmp_long_long volatile* Addend, Cmp_long_long Value );
		static Cmp_long_long Increment64( Cmp_long_long volatile* Addend );
		static long IncrementAcquire( long volatile* Addend );
		static long IncrementRelease( long volatile* Addend );
		static long CompareExchange( long volatile* Destination, long Exchange, long Comperand );
		static void* CompareExchangePointer( void* volatile* Destination, void* Exchange, void* Comperand );
		static long ExchangeAdd( long volatile* Addend, long Value );
		static long Decrement( long volatile* Addend );
		static long Exchange( long volatile* Target, long Value );
	};

	//--------------------------------------------------------------------------------
			
	struct __QOR_INTERFACE( __WINQL ) shared_long 
	{
		shared_long();
		shared_long( const shared_long& x );
		shared_long( long& x );
		shared_long( const long x );
		shared_long operator+() const;
		shared_long operator-() const;
		void operator= (const shared_long&  x);
		void operator= (volatile const long& x);
		void operator+= (const shared_long& x);
		void operator-= (const shared_long& x);
		void operator*= (const shared_long& x);
		void operator/= (const shared_long& x);
		operator volatile long&();

		void opModAssign( const shared_long& x );
		void operator %= ( const shared_long& x );
		shared_long opPreInc( void );
		shared_long opPreDec( void );
		shared_long opPostInc( void );
		shared_long opPostDec( void );
		shared_long operator++ ( void );
		shared_long operator++ ( int );
		shared_long operator-- ( void );
		shared_long operator-- ( int );
		int Compare(const shared_long& x) const;
		void Reset( void );
		friend shared_long operator%(const shared_long& x0, const shared_long& x1);
		friend shared_long operator+(const shared_long& x0, const shared_long& x1);
		friend shared_long operator-(const shared_long& x0, const shared_long& x1);
		friend shared_long operator*(const shared_long& x0, const shared_long& x1);
		friend shared_long operator/(const shared_long& x0, const shared_long& x1);
		friend bool operator>(const shared_long& x0, const shared_long& x1);
		friend bool operator<(const shared_long& x0, const shared_long& x1);
		friend bool operator>=(const shared_long& x0, const shared_long& x1);
		friend bool operator<=(const shared_long& x0, const shared_long& x1);
		friend bool operator==(const shared_long& x0, const shared_long& x1);
		friend bool operator!=(const shared_long& x0, const shared_long& x1);

	protected:

		void opAssign(const shared_long& x);
		void opAssign(const long& x);
		void opPlusAssign(const shared_long& x);
		void opMinusAssign(const shared_long& x);
		void opStarAssign(const shared_long& x);
		void opDivAssign(const shared_long& x);

		volatile const long& ToPrimitive() const;
		volatile long& ToPrimitive();

		volatile long m;
	};

}//nsWin32

#endif//WINQL_CS_SYNC_H_2
