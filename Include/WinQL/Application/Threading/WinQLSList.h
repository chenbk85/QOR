//WinQLSList.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_CS_SLIST_H_3
#define WINQL_CS_SLIST_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/WinQL.h"

//------------------------------------------------------------------------------
namespace nsWin32
{
	//------------------------------------------------------------------------------
	typedef struct _SINGLE_LIST_ENTRY 
	{
		_SINGLE_LIST_ENTRY* Next;
	} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY;

	#define PSLIST_ENTRY PSINGLE_LIST_ENTRY

#	if defined(_WIN64)

	//------------------------------------------------------------------------------
	typedef union DECLSPEC_ALIGN(16) _SLIST_HEADER 
	{
		struct 
		{  // original struct
			Cmp_unsigned_long_long Alignment;
			Cmp_unsigned_long_long Region;
		} DUMMYSTRUCTNAME;
		struct 
		{  // 8-byte header
			Cmp_unsigned_long_long Depth:16;
			Cmp_unsigned_long_long Sequence:9;
			Cmp_unsigned_long_long NextEntry:39;
			Cmp_unsigned_long_long HeaderType:1; // 0: 8-byte; 1: 16-byte
			Cmp_unsigned_long_long Init:1;       // 0: uninitialized; 1: initialized
			Cmp_unsigned_long_long Reserved:59;
			Cmp_unsigned_long_long Region:3;
		} Header8;
		struct 
		{  // ia64 16-byte header
			Cmp_unsigned_long_long Depth:16;
			Cmp_unsigned_long_long Sequence:48;
			Cmp_unsigned_long_long HeaderType:1; // 0: 8-byte; 1: 16-byte
			Cmp_unsigned_long_long Init:1;       // 0: uninitialized; 1: initialized
			Cmp_unsigned_long_long Reserved:2;
			Cmp_unsigned_long_long NextEntry:60; // last 4 bits are always 0's
		} Header16;
		struct 
		{  // x64 16-byte header
			Cmp_unsigned_long_long Depth:16;
			Cmp_unsigned_long_long Sequence:48;
			Cmp_unsigned_long_long HeaderType:1; // 0: 8-byte; 1: 16-byte
			Cmp_unsigned_long_long Reserved:3;
			Cmp_unsigned_long_long NextEntry:60; // last 4 bits are always 0's
		} HeaderX64;
	} SLIST_HEADER, *PSLIST_HEADER;

	typedef union _SLIST_HEADER32
	{
		Cmp_unsigned_long_long Alignment;
		struct 
		{
			SLIST_ENTRY32 Next;
			unsigned short Depth;
			unsigned short Sequence;
		} DUMMYSTRUCTNAME;
	} SLIST_HEADER32, *PSLIST_HEADER32;

#	else

	//------------------------------------------------------------------------------
	typedef union _SLIST_HEADER 
	{
		Cmp_unsigned_long_long Alignment;

__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_NAMELESS_STRUCTUNION, "Deliberate use of Microsoft extension" )

		struct __CQOR_NAMELESS_STRUCT
		{
			SINGLE_LIST_ENTRY Next;
			unsigned short Depth;
			unsigned short Sequence;
		} DUMMYSTRUCTNAME;

__QCMP_WARNING_POP

	} SLIST_HEADER, *pSListHeader;

	//------------------------------------------------------------------------------
	typedef SLIST_HEADER SLIST_HEADER32, *pSListHeader32;

#	endif // _WIN64

	//------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CSList
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CSList );

		CSList();
		virtual ~CSList();
		nsWin32::PSLIST_ENTRY InterlockedFlush( void );
		nsWin32::PSLIST_ENTRY InterlockedPopEntry( void );
		nsWin32::PSLIST_ENTRY InterlockedPushEntry( nsWin32::PSLIST_ENTRY ListEntry );
		unsigned short QueryDepth( void );

	private:

		void InitializeHead( void );

		nsWin32::pSListHeader m_pListHeader;			

		CSList( const CSList& );
		CSList& operator = ( const CSList& );
	};

}//nsWin32

#endif//WINQL_CS_SLIST_H_3
