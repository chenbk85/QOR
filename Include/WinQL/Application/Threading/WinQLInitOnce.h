//WinQLInitOnce.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_CS_INITONCE_H_3
#define WINQL_CS_INITONCE_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/Definitions/Data.h"

//------------------------------------------------------------------------------
namespace nsWin32
{
	//------------------------------------------------------------------------------
	typedef union _RTL_RUN_ONCE 
	{       
		void* Ptr;                      
	} RTL_RUN_ONCE, *PRTL_RUN_ONCE;     

	//------------------------------------------------------------------------------
	typedef RTL_RUN_ONCE INIT_ONCE;
	typedef PRTL_RUN_ONCE PINIT_ONCE;

	//------------------------------------------------------------------------------
	typedef int ( __QCMP_STDCALLCONVENTION *fpInitOnce ) ( nsWin32::PINIT_ONCE InitOnce, void* Parameter, void**Context );

	//------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CInitOnceHelper
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CInitOnceHelper );

		CInitOnceHelper();
		CInitOnceHelper( bool bInit );
		virtual ~CInitOnceHelper();

		bool BeginInitialize( unsigned long dwFlags, int* fPending, void** lpContext );
		bool Complete( unsigned long dwFlags, void* lpContext );
		bool ExecuteOnce( nsWin32::fpInitOnce InitFn, void* Parameter, void** Context );

	private:

		void Initialize( void );

		nsWin32::INIT_ONCE m_InitOnce;

		CInitOnceHelper( const CInitOnceHelper& );
		CInitOnceHelper& operator = ( const CInitOnceHelper& );
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CASyncInitOnce
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CASyncInitOnce );

		CASyncInitOnce();
		virtual ~CASyncInitOnce();
			
		bool Execute( void** pContext );

		virtual bool Init( void** pContext ) = 0;
		virtual void UnInit( void** pContext ) = 0;

	protected:

		CInitOnceHelper m_Win32InitOnce;

	private:

		bool m_bStatus;
		int m_bPending;
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CInitOnce
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CInitOnce );

		CInitOnce();
		virtual ~CInitOnce();

		bool Execute( void** pContext );

		static bool InitOnceCallback( nsWin32::INIT_ONCE* InitOnce, void* Parameter, void** lpContext );

		virtual bool Init( void** pContext ) = 0;

	protected:

		CInitOnceHelper m_Win32InitOnce;
	};

}//nsWin32

#endif//WINQL_CS_INITONCE_H_3
