//WinQLSemaphore.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_CS_SEMAPHORE_H_3
#define WINQL_CS_SEMAPHORE_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/Definitions/Constants.h"
#include "WinQL/Definitions/Security.h"
#include "WinQL/CodeServices/Handles/WinQLSyncHandle.h"
#include "WinQL/CodeServices/Text/WinString.h"

//------------------------------------------------------------------------------
namespace nsWin32
{
	//------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CSemaphore
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CSemaphore );

		//CSemaphore( const CSemaphore& );
		CSemaphore( CSyncHandle& ExistingHandle );
		CSemaphore( nsWin32::LPSECURITY_ATTRIBUTES lpSemaphoreAttributes = 0, long lInitialCount = 1, long lMaximumCount = 1, const TCHAR* lpName = 0, unsigned long dwFlags = 0, unsigned long dwDesiredAccess = 0, bool* pbAlreadyExists = 0 );
		CSemaphore( const TCHAR* lpName, unsigned long dwDesiredAccess = 0, bool bInheritHandle = false );
		virtual ~CSemaphore();
		bool Release( long lReleaseCount, long* lpPreviousCount );
		virtual unsigned long Wait( unsigned long dwMilliseconds );

		nsCodeQOR::CTCRef< CSyncHandle > Handle() const;

	protected:

		bool m_bAlreadyExisted;

	private:

		CSyncHandle m_Handle;

	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CSessionSemaphore : public CSemaphore
	{		
	public:

		CSessionSemaphore( const TCHAR* lpName, SECURITY_ATTRIBUTES* pSemaphoreAttributes = 0, long lInitialCount = 1, long lMaximumCount = 1, unsigned long dwDesiredAccess = 0 );

	private:

		static CTString SessionName( const TCHAR* lpName );
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CSessionSemaphoreLock
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CSessionSemaphoreLock );

		CSessionSemaphoreLock( const TCHAR* lpName, SECURITY_ATTRIBUTES* pSemaphoreAttributes = 0, long lInitialCount = 1, long lMaximumCount = 1, unsigned long dwDesiredAccess = 0 );
		~CSessionSemaphoreLock();

		unsigned long Lock();
		bool Unlock();

	protected:

		CSessionSemaphore m_Semaphore;
		long m_nPreviousCount;

		CSessionSemaphoreLock( const CSessionSemaphoreLock& );
		CSessionSemaphoreLock& operator = ( const CSessionSemaphoreLock& );
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CGlobalSemaphore : public CSemaphore
	{
	public:

		CGlobalSemaphore( const TCHAR* lpName, SECURITY_ATTRIBUTES* pSemaphoreAttributes = 0, long lInitialCount = 1, long lMaximumCount = 1, unsigned long dwDesiredAccess = 0 );

	private:

		static CTString GlobalName( const TCHAR* lpName );

	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CGlobalSemaphoreLock
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CGlobalSemaphoreLock );

		CGlobalSemaphoreLock( const TCHAR* lpName, SECURITY_ATTRIBUTES* pSemaphoreAttributes = 0, long lInitialCount = 1, long lMaximumCount = 1, unsigned long dwDesiredAccess = 0 );
		virtual ~CGlobalSemaphoreLock();
		unsigned long Lock();
		bool Unlock();

	protected:

		CGlobalSemaphore m_Semaphore;
		long m_nPreviousCount;
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CSemaphoreLock
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CSemaphoreLock );

		CSemaphoreLock( CSemaphore& Semaphore );
		virtual ~CSemaphoreLock();
		unsigned long Lock();
		bool Unlock( long* plPreviousCount = 0 );

	protected:

		CSemaphore& m_Semaphore;			

	private:

		CSemaphoreLock( const CSemaphoreLock& SemaphoreLock );//not to be implemented
		CSemaphoreLock& operator = ( const CSemaphoreLock& SemaphoreLock );//not to be implemented
	};

}//nsWin32

#endif//WINQL_CS_SEMAPHORE_H_3
