//WinQLThreadState.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//State associated with a Windows Thread

#ifndef WINQL_CS_THREAD_STATE_H_3
#define WINQL_CS_THREAD_STATE_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/CodeServices/Locale/WinQLLocaleThreadData.h"
#include "WinQL/Definitions/Constants.h"
#include "WinQL/Definitions/Data.h"
#include "WinQL/Definitions/IO.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{

	class __QOR_INTERFACE( __WINQL ) CThreadState;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CThreadCRTState
	{
		friend class CThreadState;

	public:

		CThreadCRTState();
		~CThreadCRTState();

	private:

		unsigned long m_ulHoldRand;			//rand() seed value
		char* m_pToken;						//strtok data
		wchar_t* m_pwToken;
		unsigned char* m_pmToken;
		char* m_pszErrMsg;					// ptr to strerror()/_strerror() buff
		wchar_t* m_pwErrMsg;				// ptr to _wcserror()/__wcserror() buff
		char* m_pszNameBuffer0;				// ptr to tmpnam() buffer
		wchar_t* m_pwNameBuffer0;			// ptr to _wtmpnam() buffer
		char* m_pszNameBuffer1;				// ptr to tmpfile() buffer
		wchar_t* m_pwNameBuffer1;			// ptr to _wtmpfile() buffer
		char* m_pszAscTimeBuffer;			// ptr to asctime() buffer
		wchar_t* m_pwAscTimeBuffer;			// ptr to _wasctime() buffer
		void* m_pTimeBuffer;				// ptr to gmtime() structure
		char* m_pCVTBuffer;					// ptr to ecvt()/fcvt buffer
		unsigned char _con_ch_buf[5];		// ptr to putch() buffer [MB_LEN_MAX]
		unsigned short _ch_buf_used;		// if the _con_ch_buf is used
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CThreadExceptionState
	{
		friend class CThreadState;

	public:

		CThreadExceptionState();
		~CThreadExceptionState();

	private:

		void* m_pInitAddr;					// initial user thread address
		void* m_pInitArg;					// initial user thread argument
		void* m_pxcptacttab;				// ptr to exception-action table
		void* m_tpxcptinfoptrs;				// ptr to exception info pointers
		int m_tfpecode;						// float point exception code
		void*      m_pCurrentException;//_curexception;  // current exception
#if     ( __QCMP_COMPILER == __QCMP_MSVC || __QCMP_COMPILER == __QCMP_INTEL )
		::nsCompiler::EH::ExceptData m_CurrentException;
#endif//( __QCMP_COMPILER == __QCMP_MSVC )
		int m_ProcessingThrow; // for uncaught_exception
		void* m_pFrameInfoChain;
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CThreadLocaleState
	{
		friend class CThreadState;

	public:

		CThreadLocaleState();
		~CThreadLocaleState();

	private:

		CSetLoc _setloc_data;
		CLocaleThreadData m_LocaleData;
		int m_bOwnLocale;

	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CThreadState
	{
	public:

		__QCMP_STATIC_CONSTANT( int, _Per_Thread_Locale_Bit = 0x2 );
		__QCMP_STATIC_CONSTANT( int, _Global_Locale_Bit = 0x1 );
		__QCMP_STATIC_CONSTANT( unsigned short, _ENABLE_PER_THREAD_LOCALE = 0x1 );
		__QCMP_STATIC_CONSTANT( unsigned short, _DISABLE_PER_THREAD_LOCALE = 0x2 );
		__QCMP_STATIC_CONSTANT( unsigned short, _ENABLE_PER_THREAD_LOCALE_GLOBAL = 0x10 );
		__QCMP_STATIC_CONSTANT( unsigned short, _DISABLE_PER_THREAD_LOCALE_GLOBAL = 0x20 );
		__QCMP_STATIC_CONSTANT( unsigned short, _ENABLE_PER_THREAD_LOCALE_NEW = 0x100 );
		__QCMP_STATIC_CONSTANT( unsigned short, _DISABLE_PER_THREAD_LOCALE_NEW = 0x200 );

	protected:

		unsigned long m_ulThreadId;
		unsigned long m_ulThreadHandle;
		
		int m_iErrNumber;
		unsigned long m_ulDOSErrNumber;
		bool m_bInErrorSystem;				// The thread is executing Error System code

//		unsigned int m_uiFPDS;				//Float Point Data Segment

		nsCodeQOR::CSTMember< CThreadCRTState > CRTState;
		nsCodeQOR::CSTMember< CThreadExceptionState > ExceptionState;
		nsCodeQOR::CSTMember< CThreadLocaleState > LocaleState;

	public:

		//--------------------------------------------------------------------------------
		CThreadState() :
		m_ulThreadId( 0 ),
		m_ulThreadHandle( 0 ),
		m_iErrNumber( 0 ),
		m_ulDOSErrNumber( 0 ),
		m_bInErrorSystem( false )
		{
		}

		//--------------------------------------------------------------------------------
		~CThreadState()
		{
		}

		//--------------------------------------------------------------------------------
		void EnableExceptionState( void )
		{
			ExceptionState();
		}

		//--------------------------------------------------------------------------------
		virtual int& ProcessingThrow()
		{
			return ExceptionState().m_ProcessingThrow;
		}

		//--------------------------------------------------------------------------------
		virtual void*& FrameInfoChain( void )
		{
			return ExceptionState().m_pFrameInfoChain;
		}

#if     ( __QCMP_COMPILER == __QCMP_MSVC || __QCMP_COMPILER == __QCMP_INTEL )
		//--------------------------------------------------------------------------------
		virtual nsCompiler::EH::ExceptData& CurrentException( void )
		{
			return ExceptionState().m_CurrentException;
		}
#else
		//--------------------------------------------------------------------------------
        virtual void* CurrentException( void )
        {
            return 0;
        }
#endif//( __QCMP_COMPILER == __QCMP_MSVC )

		//--------------------------------------------------------------------------------
		CLocaleThreadData& LocaleData( void )
		{
			return LocaleState().m_LocaleData;
		}

		//--------------------------------------------------------------------------------
		bool& InErrorSystem( void )
		{
			return m_bInErrorSystem;
		}

		//--------------------------------------------------------------------------------
		int& OwnLocale( void )
		{
			return LocaleState().m_bOwnLocale;
		}

		//--------------------------------------------------------------------------------
		int& ErrorNumber( void )
		{
			return m_iErrNumber;
		}

		//--------------------------------------------------------------------------------
		char*& CVTBuffer( void )
		{
			return CRTState().m_pCVTBuffer;
		}

		//--------------------------------------------------------------------------------
		unsigned long& DOSErrorNumber( void )
		{
			return m_ulDOSErrNumber;
		}

		//--------------------------------------------------------------------------------
		CSetLoc& SetLocData( void )
		{
			return LocaleState()._setloc_data;
		}
	};

}//nsWin32

#endif//WINQL_CS_THREAD_STATE_H_3
