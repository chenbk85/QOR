//WinQLTLS.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Win32 Thread Local Storage

#ifndef WINQL_CS_TLS_H_1
#define WINQL_CS_TLS_H_1

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/WinQL.h"
#include "CodeQOR/ClassReg/ClassRegEntry.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	typedef struct _IMAGE_TLS_DIRECTORY64 
	{
		Cmp_unsigned_long_long StartAddressOfRawData;
		Cmp_unsigned_long_long EndAddressOfRawData;
		Cmp_unsigned_long_long AddressOfIndex;         // PDWORD
		Cmp_unsigned_long_long AddressOfCallBacks;     // PIMAGE_TLS_CALLBACK *;
		unsigned long SizeOfZeroFill;
		unsigned long Characteristics;
	} IMAGE_TLS_DIRECTORY64;
	typedef IMAGE_TLS_DIRECTORY64 * PIMAGE_TLS_DIRECTORY64;

	//--------------------------------------------------------------------------------
	typedef struct _IMAGE_TLS_DIRECTORY32 
	{
		unsigned long StartAddressOfRawData;
		unsigned long EndAddressOfRawData;
		unsigned long AddressOfIndex;             // PDWORD
		unsigned long AddressOfCallBacks;         // PIMAGE_TLS_CALLBACK *
		unsigned long SizeOfZeroFill;
		unsigned long Characteristics;
	} IMAGE_TLS_DIRECTORY32;
	typedef IMAGE_TLS_DIRECTORY32 * PIMAGE_TLS_DIRECTORY32;

#ifdef _WIN64
	typedef IMAGE_TLS_DIRECTORY64           IMAGE_TLS_DIRECTORY;
	typedef PIMAGE_TLS_DIRECTORY64          PIMAGE_TLS_DIRECTORY;
#else
	typedef IMAGE_TLS_DIRECTORY32           IMAGE_TLS_DIRECTORY;
	typedef PIMAGE_TLS_DIRECTORY32          PIMAGE_TLS_DIRECTORY;
#endif

	typedef void ( __QCMP_STDCALLCONVENTION *fpImage_TLS_Callback ) ( void* DllHandle, unsigned long Reason, void* Reserved );

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CTLSHelper
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CTLSHelper );

		__QCMP_STATIC_CONSTANT( Cmp_unsigned_int, OUT_OF_INDEXES = ((unsigned long)0xFFFFFFFF) );

		CTLSHelper();
		CTLSHelper( const CTLSHelper& );
		CTLSHelper& operator = ( const CTLSHelper& );
		~CTLSHelper();
		unsigned long Alloc( void );
		bool Free( unsigned long dwTlsIndex );
		void* GetValue( unsigned long dwTlsIndex );
		bool SetValue( unsigned long dwTlsIndex, void* lpTlsValue );

	};

	//--------------------------------------------------------------------------------
	template<typename T>
	class TlsEntry : protected CTLSHelper
	{
	public:

		//--------------------------------------------------------------------------------
		TlsEntry() : m_Index( Alloc() )
		{
		}

		//--------------------------------------------------------------------------------
		~TlsEntry()
		{
			Free( m_Index );			
		}

		//--------------------------------------------------------------------------------
		void SetValue( T* p )
		{
			nsWin32::nsCodeServices::CTLSHelper::SetValue( m_Index, p );
		}

		//--------------------------------------------------------------------------------
		T* GetValue()
		{
			return static_cast< T* >( nsWin32::nsCodeServices::CTLSHelper::GetValue( m_Index ) );
		}

	private:

		unsigned int m_Index;
	
		// Not to be implemented
		TlsEntry( TlsEntry const & );
		TlsEntry& operator = ( TlsEntry const& );
	};

}//nsWin32

#endif//WINQL_CS_TLS_H_1

