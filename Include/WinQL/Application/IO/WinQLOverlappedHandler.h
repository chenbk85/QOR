//WinQLOverlappedHandler.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_IO_OVERLAPPEDHANDLER_H_3
#define WINQL_IO_OVERLAPPEDHANDLER_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/Definitions/Data.h"
#include "WinQL/CodeServices/Handles/WinQLHandleMap.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	class __QOR_INTERFACE( __WINQL ) COverlappedHandler;

	typedef CTHandleMap< OVERLAPPED*, COverlappedHandler > COverlappedHandlerMap;

	extern __QCMP_DECLARE_PERTHREAD COverlappedHandlerMap* p_tOverlappedHandlerMap;

	//--------------------------------------------------------------------------------
	//Callback handler for Windows overlapped IO with completion routines
	//Derive a class from COverlappedHandler to enable it to do asynchronous IO
	class __QOR_INTERFACE( __WINQL ) COverlappedHandler
	{
	public:

		COverlappedHandler();
		virtual ~COverlappedHandler();

		static COverlappedHandler* COverlappedHandler::FromHandle( OVERLAPPED* pOverlapped );
		static void __QCMP_STDCALLCONVENTION OnOverlappedWriteCompleted( unsigned long ulError, unsigned long ulCountBytesWritten, OVERLAPPED* pOverlapped );
		static void __QCMP_STDCALLCONVENTION OnOverlappedSocketWriteCompleted( unsigned long ulError, unsigned long ulCountBytesWritten, OVERLAPPED* pOverlapped, unsigned long ulFlags );
		static void __QCMP_STDCALLCONVENTION OnOverlappedReadCompleted( unsigned long ulError, unsigned long ulCountBytesRead, OVERLAPPED* pOverlapped );
		static void __QCMP_STDCALLCONVENTION OnOverlappedSocketReadCompleted( unsigned long ulError, unsigned long ulCountBytesRead, OVERLAPPED* pOverlapped, unsigned long ulFlags );

		virtual void OnWriteCompleted( unsigned long ulError, unsigned long ulCountBytesWritten ) = 0;
		virtual void OnReadCompleted( unsigned long ulError, unsigned long ulCountBytesRead ) = 0;		

	protected:

		OVERLAPPED m_Overlapped;

	private:

		void Init( void );
		void Uninit( void );
	};

}//nsWin32

#endif//WINQL_IO_OVERLAPPEDHANDLER_H_3
