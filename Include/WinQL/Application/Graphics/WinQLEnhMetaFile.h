//WinQLEnhMetaFile.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_GRAPHICS_ENHMETAFILE_H_3
#define WINQL_GRAPHICS_ENHMETAFILE_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/Definitions/Data.h"
#include "WinQL/Application/Graphics/WinQLMetaFile.h"
#include "WinQL/Application/Graphics/WinQLRectangle.h"
#include "WinQL/Application/Graphics/WinQLPalette.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{

	class __QOR_INTERFACE( __WINQL ) CEnhMetaFileDC;
	class __QOR_INTERFACE( __WINQL ) CEnhMetaFile;

	typedef CTHandleMap< typename CTypedSessionHandle< CEnhMetaFile >::refType, CEnhMetaFile > CEnhMetaFileHandleMap;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CEnhMetaFile : public CGDIObject< CEnhMetaFile >
	{
		friend class CEnhMetaFileDC;
		friend class CGDIObject< CEnhMetaFile >;

	public:

		__QOR_DECLARE_OCLASS_ID( CEnhMetaFile );

		CEnhMetaFile( CEnhMetaFile& Src, const TCHAR* lpszFile, int* pbResult = 0 );
		CEnhMetaFile( const TCHAR* lpszMetaFile, int* pbResult = 0 );
		CEnhMetaFile( unsigned int cbBuffer, const unsigned char* lpbBuffer, CDCInternal& DCRef, const nsWin32::METAFILEPICT* lpmfp, int* pbResult = 0 );
		CEnhMetaFile( unsigned int cbBuffer, const unsigned char* lpData, int* pbResult = 0 );
		virtual ~CEnhMetaFile();
		bool Enum( CDCInternal& DC, nsWin32::ENHMFENUMPROC lpEnhMetaFunc, void* lpData, const nsWin32::RECT* lpRect );
		unsigned int GetBits( unsigned int cbBuffer, unsigned char* lpbBuffer );
		unsigned int GetDescription( unsigned int cchBuffer, TCHAR* pszDescription );
		unsigned int GetHeader( unsigned int cbBuffer, nsWin32::LPENHMETAHEADER lpemh );
		unsigned int GetPaletteEntries( unsigned int cEntries, nsWin32::PALETTEENTRY* lppe );
		unsigned int GetWinMetaFileBits( unsigned int cbBuffer, unsigned char* lpbBuffer, int fnMapMode, CDCInternal& DCRef );
		unsigned int GetPixelFormat( unsigned long cbBuffer, const nsWin32::PIXELFORMATDESCRIPTOR* ppfd );

	protected:

		static CEnhMetaFileHandleMap& HandleMap( void );
		CEnhMetaFile( CEnhMetaFileHandle::refType hemf, bool bOwnership = true );
		int* m_pResult;

	private:

		__QCS_DECLARE_NONCOPYABLE( CEnhMetaFile );

	};

	class __QOR_INTERFACE( __WINQL ) CEnhMetaFileDC;
	typedef CTHandleMap< typename CTypedSessionHandle< CEnhMetaFileDC >::refType, CEnhMetaFileDC > CEnhMetaFileDCHandleMap;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CEnhMetaFileDC : public CGDIObject< CEnhMetaFileDC >
	{
		friend class CGDIObject< CEnhMetaFileDC >;

	public:

		__QOR_DECLARE_OCLASS_ID( CEnhMetaFileDC );
			
		CEnhMetaFileDC( CDCInternal& DCRef, const TCHAR* lpFilename, const nsWin32::RECT* lpRect, const TCHAR* lpDescription );
		CEnhMetaFile::refType Close( void );

	protected:

		static CEnhMetaFileDCHandleMap& HandleMap( void );
		virtual ~CEnhMetaFileDC();

	private:

		__QCS_DECLARE_NONCOPYABLE( CEnhMetaFileDC );

	};

}//nsWin32

#endif//WINQL_GRAPHICS_ENHMETAFILE_H_3
