//WinQLRegion.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_GRAPHICS_REGION_H_3
#define WINQL_GRAPHICS_REGION_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma __QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/Application/Graphics/WinQLBrush.h"
#include "WinQL/Definitions/Data.h"
#include "WinQL/Application/Graphics/WinQLGDIObj.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	class __QOR_INTERFACE( __WINQAPI ) CGDI32;
}

//--------------------------------------------------------------------------------
namespace nsWin32
{
	class __QOR_INTERFACE( __WINQL ) CRegion;
	typedef CTHandleMap< typename CTypedSessionHandle< CRegion >::refType, CRegion > CRegionHandleMap;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CRegion : public CGDIObject< CRegion >
	{
		friend class CGDIObject< CRegion >;

	public:

		//CombineRgn Styles
		__QCMP_STATIC_CONSTANT( int, RgnAnd             = 1	);
		__QCMP_STATIC_CONSTANT( int, RgnOr              = 2	);
		__QCMP_STATIC_CONSTANT( int, RgnXor             = 3	);
		__QCMP_STATIC_CONSTANT( int, RgnDiff            = 4	);
		__QCMP_STATIC_CONSTANT( int, RgnCpy				= 5	);
		__QCMP_STATIC_CONSTANT( int, RgnMin             = RgnAnd  );
		__QCMP_STATIC_CONSTANT( int, RgnMax             = RgnCpy );

		CRegion();
		CRegion( const CRegion& Src );
		CRegion( CRegion& Src1, CRegion& Src2, int fnCombineMode, int& iResult );
		CRegion( const nsWin32::XFORM* lpXform, unsigned long nCount, const nsWin32::RGNDATA* lpRgnData );
		virtual ~CRegion();
		CRegionHandle::refType DetachHandle( void );
		int Combine( CRegion& Src2, int fnCombineMode );
		int Combine( CRegion& Src1, CRegion& Src2, int fnCombineMode );
		bool operator==( const CRegion& RgnCompare );
		bool Fill( CDCInternal& DC, CBrush& Brush );
		bool Frame( CDCInternal& DC, CBrush& Brush, int nWidth, int nHeight );
		unsigned long GetData( unsigned long dwCount, nsWin32::LPRGNDATA lpRgnData );
		int GetBox( nsWin32::RECT* lprc );
		bool Invert( CDCInternal& DC );
		int Offset( int nXOffset, int nYOffset );
		bool PointIn( int X, int Y );
		bool Paint( CDCInternal& DC );
		bool RectIn( const nsWin32::RECT* lprc );
		bool SetRect( int nLeftRect, int nTopRect, int nRightRect, int nBottomRect );
		//virtual void* Handle( void ) const;

	protected:

		static CRegionHandleMap& HandleMap( void );

		__QCS_DECLARE_NONASSIGNABLE( CRegion );
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CEllipticRgn : public CRegion
	{
	public:

		CEllipticRgn( int nLeftRect, int nTopRect, int nRightRect, int nBottomRect );
		CEllipticRgn( const nsWin32::RECT* lprc );
		virtual ~CEllipticRgn();

	private:

		CEllipticRgn();
		__QCS_DECLARE_NONCOPYABLE( CEllipticRgn );
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CPolygonRgn : public CRegion
	{
	public:

		CPolygonRgn( const nsWin32::POINT* lppt, int cPoints, int fnPolyFillMode );
		CPolygonRgn( const nsWin32::POINT* lppt, const int* lpPolyCounts, int nCount, int fnPolyFillMode );
		virtual ~CPolygonRgn();

	private:

		CPolygonRgn();
		__QCS_DECLARE_NONCOPYABLE( CPolygonRgn );
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CRectRgn : public CRegion
	{
	public:

		CRectRgn( int nLeftRect, int nTopRect, int nRightRect, int nBottomRect );
		CRectRgn( const nsWin32::RECT* lprc );
		virtual ~CRectRgn();

	private:

		CRectRgn();
		__QCS_DECLARE_NONCOPYABLE( CRectRgn );
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CRoundRectRgn : public CRegion
	{
	public:
			
		CRoundRectRgn( int nLeftRect, int nTopRect, int nRightRect, int nBottomRect, int nWidthEllipse, int nHeightEllipse );
		virtual ~CRoundRectRgn();

	private:

		CRoundRectRgn();
		__QCS_DECLARE_NONCOPYABLE( CRoundRectRgn );
	};

}//nsWin32

#endif//WINQL_GRAPHICS_REGION_H_3

