//WinQLFont.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_GRAPHICS_FONT_H_3
#define WINQL_GRAPHICS_FONT_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "CodeQOR/Macros/codingmacros.h"
#include "WinQL/Definitions/Handles.h"
#include "WinQL/Definitions/Constants.h"
#include "WinQL/Application/Graphics/WinQLGDIObj.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	typedef struct tagLOGFONT
	{
		long      lfHeight;
		long      lfWidth;
		long      lfEscapement;
		long      lfOrientation;
		long      lfWeight;
		unsigned char      lfItalic;
		unsigned char      lfUnderline;
		unsigned char      lfStrikeOut;
		unsigned char      lfCharSet;
		unsigned char      lfOutPrecision;
		unsigned char      lfClipPrecision;
		unsigned char      lfQuality;
		unsigned char      lfPitchAndFamily;
		TCHAR     lfFaceName[ LF_FaceSize ];
	} LOGFONT, *PLOGFONT, *NPLOGFONT, *LPLOGFONT;

	//--------------------------------------------------------------------------------
	typedef struct tagENUMLOGFONTEX
	{
		LOGFONT    elfLogFont;
		TCHAR       elfFullName[ LF_FullFaceSize ];
		TCHAR       elfStyle[ LF_FaceSize ];
		TCHAR       elfScript[LF_FaceSize];
	} ENUMLOGFONTEX, *LPENUMLOGFONTEX;

	//--------------------------------------------------------------------------------
	typedef struct tagDESIGNVECTOR
	{
		unsigned long  dvReserved;
		unsigned long  dvNumAxes;
		long   dvValues[ MM_Max_NumAxes ];
	} DESIGNVECTOR, *PDESIGNVECTOR, *LPDESIGNVECTOR;

	//--------------------------------------------------------------------------------
	typedef struct tagENUMLOGFONTEXDV
	{
		ENUMLOGFONTEX elfEnumLogfontEx;
		DESIGNVECTOR   elfDesignVector;
	} ENUMLOGFONTEXDV, *PENUMLOGFONTEXDV, *LPENUMLOGFONTEXDV;


	class __QOR_INTERFACE( __WINQL ) CFont;
	typedef CTHandleMap< typename CTypedSessionHandle< CFont >::refType, CFont > CFontHandleMap;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CFont : public CSelectableGDIObject< CFont >
	{
		friend class CGDIObject< CFont >;

	public:

		__QOR_DECLARE_OCLASS_ID( CFont );

		// Font Families
		__QCMP_STATIC_CONSTANT( int, F_DONTCARE         = ( 0 << 4 ) );  // Don't care or don't know.
		__QCMP_STATIC_CONSTANT( int, F_ROMAN            = ( 1 << 4 ) );  // Variable stroke width, serifed. Times Roman, Century Schoolbook, etc.
		__QCMP_STATIC_CONSTANT( int, F_SWISS            = ( 2 << 4 ) );  // Variable stroke width, sans-serifed. Helvetica, Swiss, etc.
		__QCMP_STATIC_CONSTANT( int, F_MODERN           = ( 3 << 4 ) );  // Constant stroke width, serifed or sans-serifed. Pica, Elite, Courier, etc.
		__QCMP_STATIC_CONSTANT( int, F_SCRIPT           = ( 4 << 4 ) );  // Cursive, etc.
		__QCMP_STATIC_CONSTANT( int, F_DECORATIVE       = ( 5 << 4 ) );  // Old English, etc.

		__QCMP_STATIC_CONSTANT( int, W_DONTCARE         = 0 );
		__QCMP_STATIC_CONSTANT( int, W_THIN             = 100 );
		__QCMP_STATIC_CONSTANT( int, W_EXTRALIGHT       = 200 );
		__QCMP_STATIC_CONSTANT( int, W_LIGHT            = 300 );
		__QCMP_STATIC_CONSTANT( int, W_NORMAL           = 400 );
		__QCMP_STATIC_CONSTANT( int, W_MEDIUM           = 500 );
		__QCMP_STATIC_CONSTANT( int, W_SEMIBOLD         = 600 );
		__QCMP_STATIC_CONSTANT( int, W_BOLD             = 700 );
		__QCMP_STATIC_CONSTANT( int, W_EXTRABOLD        = 800 );
		__QCMP_STATIC_CONSTANT( int, W_HEAVY            = 900 );
		__QCMP_STATIC_CONSTANT( int, W_ULTRALIGHT       = W_EXTRALIGHT );
		__QCMP_STATIC_CONSTANT( int, W_REGULAR          = W_NORMAL );
		__QCMP_STATIC_CONSTANT( int, W_DEMIBOLD         = W_SEMIBOLD );
		__QCMP_STATIC_CONSTANT( int, W_ULTRABOLD        = W_EXTRABOLD );
		__QCMP_STATIC_CONSTANT( int, W_BLACK            = W_HEAVY );

		__QCMP_STATIC_CONSTANT( int, DEFAULT_PRECIS          = 0 );
		__QCMP_STATIC_CONSTANT( int, STRING_PRECIS           = 1 );
		__QCMP_STATIC_CONSTANT( int, CHARACTER_PRECIS        = 2 );
		__QCMP_STATIC_CONSTANT( int, STROKE_PRECIS           = 3 );
		__QCMP_STATIC_CONSTANT( int, TT_PRECIS               = 4 );
		__QCMP_STATIC_CONSTANT( int, DEVICE_PRECIS           = 5 );
		__QCMP_STATIC_CONSTANT( int, RASTER_PRECIS           = 6 );
		__QCMP_STATIC_CONSTANT( int, TT_ONLY_PRECIS          = 7 );
		__QCMP_STATIC_CONSTANT( int, OUTLINE_PRECIS          = 8 );
		__QCMP_STATIC_CONSTANT( int, SCREEN_OUTLINE_PRECIS   = 9 );
		__QCMP_STATIC_CONSTANT( int, PS_ONLY_PRECIS          = 10 );

		__QCMP_STATIC_CONSTANT( int, _CLIP_DEFAULT_PRECIS     = 0 );
		__QCMP_STATIC_CONSTANT( int, _CLIP_CHARACTER_PRECIS   = 1 );
		__QCMP_STATIC_CONSTANT( int, _CLIP_STROKE_PRECIS      = 2 );
		__QCMP_STATIC_CONSTANT( int, _CLIP_MASK               = 0xf );
		__QCMP_STATIC_CONSTANT( int, _CLIP_LH_ANGLES          = (1<<4) );
		__QCMP_STATIC_CONSTANT( int, _CLIP_TT_ALWAYS          = (2<<4) );
#if (_WIN32_WINNT >= _WIN32_WINNT_LONGHORN)
		__QCMP_STATIC_CONSTANT( int, _CLIP_DFA_DISABLE        = (4<<4) );
#endif // (_WIN32_WINNT >= _WIN32_WINNT_LONGHORN)
		__QCMP_STATIC_CONSTANT( int, _CLIP_EMBEDDED           = (8<<4) );

		__QCMP_STATIC_CONSTANT( int, _DEFAULT_QUALITY         = 0 );
		__QCMP_STATIC_CONSTANT( int, _DRAFT_QUALITY           = 1 );
		__QCMP_STATIC_CONSTANT( int, _PROOF_QUALITY           = 2 );
#if(WINVER >= 0x0400)
		__QCMP_STATIC_CONSTANT( int, _NONANTIALIASED_QUALITY  = 3 );
		__QCMP_STATIC_CONSTANT( int, _ANTIALIASED_QUALITY     = 4 );
#endif /* WINVER >= 0x0400 */

#if (_WIN32_WINNT >= _WIN32_WINNT_WINXP)
		__QCMP_STATIC_CONSTANT( int, _CLEARTYPE_QUALITY       = 5 );
		__QCMP_STATIC_CONSTANT( int, _CLEARTYPE_NATURAL_QUALITY = 6 );
#endif

		__QCMP_STATIC_CONSTANT( int, _DEFAULT_PITCH           = 0 );
		__QCMP_STATIC_CONSTANT( int, _FIXED_PITCH             = 1 );
		__QCMP_STATIC_CONSTANT( int, _VARIABLE_PITCH          = 2 );
#if(WINVER >= 0x0400)
		__QCMP_STATIC_CONSTANT( int, _MONO_FONT               = 8 );
#endif /* WINVER >= 0x0400 */

		__QCMP_STATIC_CONSTANT( int, _ANSI_CHARSET            = 0	  );
		__QCMP_STATIC_CONSTANT( int, _DEFAULT_CHARSET         = 1	  );
		__QCMP_STATIC_CONSTANT( int, _SYMBOL_CHARSET          = 2	  );
		__QCMP_STATIC_CONSTANT( int, _SHIFTJIS_CHARSET        = 128 );
		__QCMP_STATIC_CONSTANT( int, _HANGEUL_CHARSET         = 129 );
		__QCMP_STATIC_CONSTANT( int, _HANGUL_CHARSET          = 129 );
		__QCMP_STATIC_CONSTANT( int, _GB2312_CHARSET          = 134 );
		__QCMP_STATIC_CONSTANT( int, _CHINESEBIG5_CHARSET     = 136 );
		__QCMP_STATIC_CONSTANT( int, _OEM_CHARSET             = 255 );
		__QCMP_STATIC_CONSTANT( int, _JOHAB_CHARSET           = 130 );
		__QCMP_STATIC_CONSTANT( int, _HEBREW_CHARSET          = 177 );
		__QCMP_STATIC_CONSTANT( int, _ARABIC_CHARSET          = 178 );
		__QCMP_STATIC_CONSTANT( int, _GREEK_CHARSET           = 161 );
		__QCMP_STATIC_CONSTANT( int, _TURKISH_CHARSET         = 162 );
		__QCMP_STATIC_CONSTANT( int, _VIETNAMESE_CHARSET      = 163 );
		__QCMP_STATIC_CONSTANT( int, _THAI_CHARSET            = 222 );
		__QCMP_STATIC_CONSTANT( int, _EASTEUROPE_CHARSET      = 238 );
		__QCMP_STATIC_CONSTANT( int, _RUSSIAN_CHARSET         = 204 );
		__QCMP_STATIC_CONSTANT( int, _MAC_CHARSET             = 77  );
		__QCMP_STATIC_CONSTANT( int, _BALTIC_CHARSET          = 186 );

		CFont( int nHeight, int nWidth, int nEscapement, int nOrientation, int fnWeight, unsigned long fdwItalic, unsigned long fdwUnderline, unsigned long fdwStrikeOut, unsigned long fdwCharSet, unsigned long fdwOutputPrecision, unsigned long fdwClipPrecision, unsigned long fdwQuality, unsigned long fdwPitchAndFamily, const TCHAR* lpszFace );
		CFont( const LOGFONT* lplf );
		CFont( const ENUMLOGFONTEXDV* penumlfex );

	protected:

		static CFontHandleMap& HandleMap( void );
		virtual ~CFont();

	private:

		__QCS_DECLARE_NONASSIGNABLE( CFont );
	};

}//nsWin32

#endif//WINQL_GRAPHICS_FONT_H_3

