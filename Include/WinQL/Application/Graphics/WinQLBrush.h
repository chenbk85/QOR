//WinQLBrush.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_GRAPHICS_BRUSH_H_3
#define WINQL_GRAPHICS_BRUSH_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma __QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "CodeQOR/Macros/codingmacros.h"
#include "WinQLGDIObj.h"
#include "WinQLBitmap.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	typedef struct tagLOGBRUSH
	{
		unsigned int lbStyle;
		unsigned long lbColor;
		Cmp_ulong_ptr lbHatch;
	} LOGBRUSH, *PLOGBRUSH, *NPLOGBRUSH, *LPLOGBRUSH;	

	typedef CTHandleMap< typename CTypedSessionHandle< CBrush >::refType, CBrush > CBrushHandleMap;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CBrush : public CSelectableGDIObject< CBrush >
	{
		friend class nsCodeQOR::CDefaultInstancer< nsCodeQOR::CDefaultSource, CBrush >;
		friend class nsCodeQOR::CDefaultAllocator< nsCodeQOR::CDefaultInstancer< nsCodeQOR::CDefaultSource, CBrush >, CBrush >;
		friend class CGDIObject< CBrush >;
		friend class nsCodeQOR::CTClassRegEntry< CBrush >;

	public:

		__QOR_DECLARE_OCLASS_ID( CBrush );

		CBrush( const nsWin32::LOGBRUSH& lplb );
		CBrush( void* hglbDIBPacked, unsigned int fuColourSpec );
		CBrush( const void* lpPackedDIB, unsigned int iUsage );
		CBrush( int fnStyle, unsigned long clrref );
		CBrush( CBitmap& Bitmap );
		CBrush( unsigned long crColour );
		virtual ~CBrush();		

	protected:
			
		static CBrushHandleMap& HandleMap( void );
		CBrush();
		

		__QCS_DECLARE_NONCOPYABLE( CBrush );
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CSystemColourBrush : public CBrush
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CSystemColourBrush );

		enum eSysColour
		{
			_3DDKShadow			=	21,		//COLOR_3DDKSHADOW 21 Dark shadow for three-dimensional display elements.
			_3DFace				=	15,		//COLOR_3DFACE 15 Face color for three-dimensional display elements and for dialog box backgrounds.
			_3DHighlight			=	20,		//COLOR_3DHIGHLIGHT 20 Highlight color for three-dimensional display elements (for edges facing the light source.)
			_3DLight				=	22,		//COLOR_3DLIGHT 22 Light color for three-dimensional display elements (for edges facing the light source.)
			_3DShadow			=	16,		//COLOR_3DSHADOW 16 Shadow color for three-dimensional display elements (for edges facing away from the light source).
			ActiveBorder		=	10,		//COLOR_ACTIVEBORDER 10 Active window border.
			ActiveCaption		=	2,		//COLOR_ACTIVECAPTION 2 Active window title bar. Specifies the left side color in the color gradient of an active window's title bar if the gradient effect is enabled.
			AppWorkspace		=	12,		//COLOR_APPWORKSPACE 12 Background color of multiple document interface (MDI) applications.
			Background			=	1,		//COLOR_BACKGROUND 1 Desktop.
			ButtonFace			=	15,		//COLOR_BTNFACE 15 Face color for three-dimensional display elements and for dialog box backgrounds.
			ButtonHightlight	=	20,		//COLOR_BTNHIGHLIGHT 20 Highlight color for three-dimensional display elements (for edges facing the light source.)
			ButtonShadow		=	16,		//COLOR_BTNSHADOW 16 Shadow color for three-dimensional display elements (for edges facing away from the light source).
			ButtonText			=	18,		//COLOR_BTNTEXT 18 Text on push buttons.
			CaptionText			=	9,		//COLOR_CAPTIONTEXT 9 Text in caption, size box, and scroll bar arrow box.
			Desktop				=	1,		//COLOR_DESKTOP 1 Desktop.
			GradientActiveCaption = 27,		//COLOR_GRADIENTACTIVECAPTION 27 Right side color in the color gradient of an active window's title bar. COLOR_ACTIVECAPTION specifies the left side color. Use SPI_GETGRADIENTCAPTIONS with the SystemParametersInfo function to determine whether the gradient effect is enabled. 
			GradientInactiveCaption = 28,	//COLOR_GRADIENTINACTIVECAPTION 28 Right side color in the color gradient of an inactive window's title bar. COLOR_INACTIVECAPTION specifies the left side color.
			GrayText			=	17,		//COLOR_GRAYTEXT 17 Grayed (disabled) text. This color is set to 0 if the current display driver does not support a solid gray color.
			Highlight			=	13,		//COLOR_HIGHLIGHT 13 Item(s) selected in a control.
			HighlightText		=	14,		//COLOR_HIGHLIGHTTEXT 14 Text of item(s) selected in a control.
			HotLight			=	26,		//COLOR_HOTLIGHT 26 Color for a hyperlink or hot-tracked item.
			InactiveBorder		=	11,		//COLOR_INACTIVEBORDER 11 Inactive window border.
			InactiveCaption		=	3,		//COLOR_INACTIVECAPTION 3 Inactive window caption. Specifies the left side color in the color gradient of an inactive window's title bar if the gradient effect is enabled.
			InactiveCaptionText	=	19,		//COLOR_INACTIVECAPTIONTEXT 19 Color of text in an inactive caption.
			InfoBackground		=	24,		//COLOR_INFOBK 24 Background color for tooltip controls.
			InfoText			=	23,		//COLOR_INFOTEXT 23 Text color for tooltip controls.
			Menu				=	4,		//COLOR_MENU 4 Menu background.
			MenuHighlight		=	29,		//COLOR_MENUHILIGHT 29 The color used to highlight menu items when the menu appears as a flat menu (see SystemParametersInfo). The highlighted menu item is outlined with COLOR_HIGHLIGHT. Windows 2000:  This value is not supported.  
			MenuBar				=	30,		//COLOR_MENUBAR 30 The background color for the menu bar when menus appear as flat menus (see SystemParametersInfo). However, COLOR_MENU continues to specify the background color of the menu popup. Windows 2000:  This value is not supported
			MenuText			=	7,		//COLOR_MENUTEXT 7 Text in menus.
			ScrollBar			=	0,		//COLOR_SCROLLBAR 0 Scroll bar gray area.
			Window				=	5,		//COLOR_WINDOW 5 Window background.
			WindowFrame			=	6,		//COLOR_WINDOWFRAME 6 Window frame.
			WindowText			=	8,		//COLOR_WINDOWTEXT 8 Text in windows.
		};

        CSystemColourBrush( int nIndex );
		virtual ~CSystemColourBrush();

	private:

		nsWinQAPI::CUser32& m_User32Library;

		__QCS_DECLARE_NONCOPYABLE( CSystemColourBrush );
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CStockBrush : public CBrush
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CStockBrush );

		__QCMP_STATIC_CONSTANT( int, WHITE         = 0 );
		__QCMP_STATIC_CONSTANT( int, LTGRAY        = 1 );
		__QCMP_STATIC_CONSTANT( int, GRAY          = 2 );
		__QCMP_STATIC_CONSTANT( int, DKGRAY        = 3 );
		__QCMP_STATIC_CONSTANT( int, BLACK         = 4 );
		__QCMP_STATIC_CONSTANT( int, NULLBRUSH    = 5 );
		__QCMP_STATIC_CONSTANT( int, HOLLOW        = NULLBRUSH );
		__QCMP_STATIC_CONSTANT( int, DC            = 18 );			//DC_BRUSH Windows 2000/XP: Solid color brush. The default color is white. The color can be changed by using the SetDCBrushColor function.

        CStockBrush( int nBrush );
		virtual ~CStockBrush();

	private:

		CStockBrush();
		__QCS_DECLARE_NONCOPYABLE( CStockBrush );

	};

}//nsWin32

#endif//WINQL_GRAPHICS_BRUSH_H_3
