//WinQLDCInternal.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_GRAPHICS_DCINTERNAL_H_3
#define WINQL_GRAPHICS_DCINTERNAL_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/Application/Graphics/WinQLBitmap.h"
#include "WinQL/Definitions/Handles.h"
#include "WinQL/GUI/GUI.h"
#include "WinQL/Definitions/Data.h"
#include "WinQL/Application/Graphics/WinQLRegion.h"
#include "WinQL/Application/Graphics/WinQLPalette.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	class __QOR_INTERFACE( nsWinQAPI ) CUser32;
	class __QOR_INTERFACE( nsWinQAPI ) CGDI32;
}

//--------------------------------------------------------------------------------
namespace nsWin32
{	

	typedef int ( __QCMP_STDCALLCONVENTION *DRAWSTATEPROC )( CDCHandle::refType hdc, Cmp_long_ptr lData, Cmp_uint_ptr wData, int cx, int cy );
	typedef int ( __QCMP_STDCALLCONVENTION *GRAYSTRINGPROC )( CDCHandle::refType, Cmp_long_ptr, int );
	typedef int ( __QCMP_STDCALLCONVENTION *fpICMEnumProc )( TCHAR*, Cmp_long_ptr );
	typedef int ( __QCMP_STDCALLCONVENTION *GOBJENUMPROC )( void*, Cmp_long_ptr );

	class __QOR_INTERFACE( __WINQL )CRectangle;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CICInternal
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CICInternal );
			
		CICInternal( const TCHAR* lpszDriver, const TCHAR* lpszDevice, const TCHAR* lpszOutput, const nsWin32::DEVMODE* lpdvmInit );

	protected:

		int m_iStatus;
		CICHandle m_Handle;
		bool m_bDelete;

	private:
			
		nsWinQAPI::CGDI32& m_GDI32Library;

		CICInternal();
		__QCS_DECLARE_NONCOPYABLE( CICInternal );

	};

	class __QOR_INTERFACE( __WINQL ) CDCInternal;

	typedef CTHandleMap< typename CTypedSessionHandle< CDCInternal >::refType, CDCInternal > CDCHandleMap;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CDCInternal : public CGDIObject< CDCInternal >
	{
		friend class CGDIObject< CDCInternal >;

	public:

		__QCMP_STATIC_CONSTANT( unsigned long, srccopy             = (unsigned long)0x00CC0020 );// dest = source                   
		__QCMP_STATIC_CONSTANT( unsigned long, srcpaint            = (unsigned long)0x00EE0086 );// dest = source OR dest           
		__QCMP_STATIC_CONSTANT( unsigned long, srcand              = (unsigned long)0x008800C6 );// dest = source AND dest          
		__QCMP_STATIC_CONSTANT( unsigned long, srcinvert           = (unsigned long)0x00660046 );// dest = source XOR dest          
		__QCMP_STATIC_CONSTANT( unsigned long, srcerase            = (unsigned long)0x00440328 );// dest = source AND (NOT dest )   
		__QCMP_STATIC_CONSTANT( unsigned long, notsrccopy          = (unsigned long)0x00330008 );// dest = (NOT source)             
		__QCMP_STATIC_CONSTANT( unsigned long, notsrcerase         = (unsigned long)0x001100A6 );// dest = (NOT src) AND (NOT dest) 
		__QCMP_STATIC_CONSTANT( unsigned long, mergecopy           = (unsigned long)0x00C000CA );// dest = (source AND pattern)     
		__QCMP_STATIC_CONSTANT( unsigned long, mergepaint          = (unsigned long)0x00BB0226 );// dest = (NOT source) OR dest     
		__QCMP_STATIC_CONSTANT( unsigned long, patcopy             = (unsigned long)0x00F00021 );// dest = pattern                  
		__QCMP_STATIC_CONSTANT( unsigned long, patpaint            = (unsigned long)0x00FB0A09 );// dest = DPSnoo                   
		__QCMP_STATIC_CONSTANT( unsigned long, patinvert           = (unsigned long)0x005A0049 );// dest = pattern XOR dest         
		__QCMP_STATIC_CONSTANT( unsigned long, dstinvert           = (unsigned long)0x00550009 );// dest = (NOT dest)               
		__QCMP_STATIC_CONSTANT( unsigned long, blackness           = (unsigned long)0x00000042 );// dest = BLACK                    
		__QCMP_STATIC_CONSTANT( unsigned long, whiteness           = (unsigned long)0x00FF0062 );// dest = WHITE                    

		__QOR_DECLARE_OCLASS_ID( CDCInternal );
            
        CDCInternal();
		CDCInternal( CWindowHandle::refType hWnd );
		CDCInternal( CWindowHandle::refType hWnd, CRegion::refType RgnClip, unsigned long flags );
		CDCInternal( CDCHandle::refType hdc, int iMode );
		CDCInternal( const TCHAR* lpszDriver, const TCHAR* lpszDevice, const TCHAR* lpszOutput, const nsWin32::DEVMODE* lpInitData );
		virtual ~CDCInternal();
        void GDIDelete( void );
        bool CreateCompatibleDC( CDCHandle::refType hdc );
		bool BitBltTo( CDCInternal& Dest, int nXDest, int nYDest, int nWidth, int nHeight, int nXSrc, int nYSrc, unsigned long dwRop );
		bool MaskBltTo( CDCInternal& Dest, int nXDest, int nYDest, int nWidth, int nHeight, int nXSrc, int nYSrc, CBitmap& Bitmap, int xMask, int yMask, unsigned long dwRop );
		bool PlgBltTo( CDCInternal& Dest, const nsWin32::POINT* lpPoint, int nXSrc, int nYSrc, int nWidth, int nHeight, CBitmap& Bitmap, int xMask, int yMask );
		bool StretchBltTo( CDCInternal& Dest, int nXOriginDest, int nYOriginDest, int nWidthDest, int nHeightDest, int nXOriginSrc, int nYOriginSrc, int nWidthSrc, int nHeightSrc, unsigned long dwRop ) ;
		int StretchBitsFromDIB( int XDest, int YDest, int nDestWidth, int nDestHeight, int XSrc, int YSrc, int nSrcWidth, int nSrcHeight, const void* lpBits, const nsWin32::BITMAPINFO* lpBitsInfo, unsigned int iUsage, unsigned long dwRop );
		int DrawTextT( const TCHAR* lpString, int nCount, nsWin32::RECT* lpRect, unsigned int uFormat );
		int DrawTextT( TCHAR* lpchText, int cchText, nsWin32::RECT* lprc, unsigned int dwDTFormat, nsWin32::LPDRAWTEXTPARAMS lpDTParams );
		unsigned long GetTabbedTextExtentT( const TCHAR* lpString, int nCount, int nTabPositions, const pInt lpnTabStopPositions );
		long TabbedTextOutT( int X, int Y, const TCHAR* lpString, int nCount, int nTabPositions, const pInt lpnTabStopPositions, int nTabOrigin );
		bool DrawEdge( CRectangle* prc, unsigned int edge, unsigned int grfFlags );
		bool DrawFocusRect( const CRectangle* prc );
		bool DrawFrameControl( CRectangle* prc, unsigned int uType, unsigned int uState );
		bool DrawStateT( CBrushHandle::refType hbr, nsWin32::DRAWSTATEPROC lpOutputFunc, Cmp_long_ptr lData, Cmp_uint_ptr wData, int x, int y, int cx, int cy, unsigned int fuFlags );
		bool GrayStringT( CBrushHandle::refType hBrush, nsWin32::GRAYSTRINGPROC lpOutputFunc, Cmp_long_ptr lpData, int nCount, int X, int Y, int nWidth, int nHeight );
		bool PaintDesktop( void );
		int FillRect( const CRectangle* prc, CBrushHandle::refType hbr );
		int FrameRect( const CRectangle* prc, CBrushHandle::refType hbr );
		bool InvertRect( const CRectangle* prc );
		bool ExtFloodFill( int nXStart, int nYStart, unsigned long crColor, unsigned int fuFillType );
		bool FloodFill( int nXStart, int nYStart, unsigned long crFill );
		unsigned long GetPixel( int nXPos, int nYPos );
		int GetStretchBltMode( void );
		int SetStretchBltMode( int iStretchMode );
		int SetDIBits( int XDest, int YDest, unsigned long dwWidth, unsigned long dwHeight, int XSrc, int YSrc, unsigned int uStartScan, unsigned int cScanLines, const void* lpvBits, const nsWin32::BITMAPINFO* lpbmi, unsigned int fuColourUse );
		unsigned long SetPixel( int X, int Y, unsigned long crColour );
		bool SetPixelV( int X, int Y, unsigned long crColour );
		bool GetColourAdjustment( nsWin32::LPCOLORADJUSTMENT lpca );
		bool SetColourAdjustment( const nsWin32::COLORADJUSTMENT* lpca );
		unsigned long GetNearestColour( unsigned long crColour );
		unsigned int GetSystemPaletteEntries( unsigned int iStartIndex, unsigned int nEntries, nsWin32::LPPALETTEENTRY lppe );
		unsigned int GetSystemPaletteUse( void );
		unsigned int SetSystemPaletteUse( unsigned int uUsage );
		unsigned int RealizePalette( void );
		CPaletteHandle::refType SelectPalette( CPaletteHandle::refType hpal, bool bForceBackground );
		bool UpdateColours( void );
		bool GetGammaRamp( void* lpRamp );
		bool SetGammaRamp( void* lpRamp );
		int EnumICMProfilesT( nsWin32::fpICMEnumProc lpEnumICMProfilesFunc, Cmp_long_ptr lParam );
		bool GetICMProfileT( unsigned long* lpcbName, TCHAR* lpszFileName );
		int SetICMMode( int iEnableICM );
		bool SetICMProfileT( TCHAR* lpFileName );
		bool CheckColorsInGamut( void* lpRGBTriples, void* lpBuffer, unsigned int nCount );
		bool ColourMatchToTarget( CDCInternal& Target, unsigned long uiAction );
		CColourSpace::refType SetColourSpace( CColourSpace::refType ColourSpace );
		bool GetCurrentPosition( nsWin32::POINT* lpPoint );
		bool DPtoLP( nsWin32::POINT* lpPoints, int nCount );
		bool LPtoDP( nsWin32::POINT* lpPoints, int nCount );
		bool Cancel( void );
		bool DeleteObject( void* hObject );
		int DrawEscape( int nEscape, int cbInput, const char* lpszInData );
		int EnumObjects( int nObjectType, nsWin32::GOBJENUMPROC lpObjectFunc, Cmp_long_ptr lParam );
		void* GetCurrentObject( unsigned int uObjectType );
		unsigned long GetBrushColour();
		bool GetOrigin( nsWin32::POINT* lpPoint );
		unsigned long GetPenColour( void );
		int GetCapability( int nIndex );
		unsigned long GetLayout( void );
		bool Reset( const nsWin32::DEVMODE* lpInitData );
		bool Restore( int nSavedDC );
		int Save( void );
		void* SelectObject( void* hgdiobj );
		unsigned long SetBrushColour( unsigned long crColour );
		unsigned long SetPenColour( unsigned long crColour );
		unsigned long SetLayout( unsigned long dwLayout );
		bool SwapBuffers( void );
		unsigned long GetBkColour( void );
		int GetBkMode( void );
		unsigned int GetBoundsRect( nsWin32::RECT* lprcBounds, unsigned int flags );
		int GetROP2( void );
		unsigned long SetBkColour( unsigned long crColour );
		int SetBkMode( int iBkMode );
		unsigned int SetBoundsRect( const nsWin32::RECT* lprcBounds, unsigned int flags );
		int SetROP2( int fnDrawMode );
		int GetPolyFillMode( void );
		int SetPolyFillMode( int iPolyFillMode );
		int GetMetaRegion( CRegion::refType hrgn );
		int SetMetaRegion( void );

	protected:

		CDCInternal( CDCHandle& hdc );
		static CDCHandleMap& HandleMap( void );

		int m_iStatus;
		CWindowHandle::refType m_hWnd;
		bool m_bDelete;

		nsWinQAPI::CUser32& m_User32Library;

	private:

		__QCS_DECLARE_NONCOPYABLE( CDCInternal );

	};

}//nsWin32

#endif//WINQL_GRAPHICS_DCINTERNAL_H_3
