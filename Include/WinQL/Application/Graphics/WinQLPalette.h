//WinQLPalette.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_GRAPHICS_PALETTE_H_3
#define WINQL_GRAPHICS_PALETTE_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/Definitions/Handles.h"
#include "WinQL/Definitions/Constants.h"
#include "WinQL/Application/Graphics/WinQLGDIObj.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	class __QOR_INTERFACE( __WINQL ) CDCInternal;
	typedef long FXPT16DOT16, *LPFXPT16DOT16;
	typedef long FXPT2DOT30, *LPFXPT2DOT30;
/*
	//--------------------------------------------------------------------------------
	typedef struct tagCIEXYZ
	{
		FXPT2DOT30 ciexyzX;
		FXPT2DOT30 ciexyzY;
		FXPT2DOT30 ciexyzZ;
	} CIEXYZ;
	typedef CIEXYZ *LPCIEXYZ;

	//--------------------------------------------------------------------------------
	typedef struct tagICEXYZTRIPLE
	{
		CIEXYZ  ciexyzRed;
		CIEXYZ  ciexyzGreen;
		CIEXYZ  ciexyzBlue;
	} CIEXYZTRIPLE;
	typedef CIEXYZTRIPLE *LPCIEXYZTRIPLE;

	//--------------------------------------------------------------------------------
	typedef struct tagLOGCOLORSPACE
	{
		unsigned long lcsSignature;
		unsigned long lcsVersion;
		unsigned long lcsSize;
		long lcsCSType;
		long lcsIntent;
		CIEXYZTRIPLE lcsEndpoints;
		unsigned long lcsGammaRed;
		unsigned long lcsGammaGreen;
		unsigned long lcsGammaBlue;
		TCHAR  lcsFilename[ Max_Path ];
	} LOGCOLORSPACE, *LPLOGCOLORSPACE;

	//--------------------------------------------------------------------------------
	typedef struct tagLOGPALETTE 
	{
		unsigned short palVersion;
		unsigned short palNumEntries;
		PALETTEENTRY palPalEntry[ 1 ];
	} LOGPALETTE, *PLOGPALETTE, *NPLOGPALETTE, *LPLOGPALETTE;
*/

	class __QOR_INTERFACE( __WINQL ) CColourSpace;
	typedef CTHandleMap< typename CTypedSessionHandle< CColourSpace >::refType, CColourSpace > CColourSpaceHandleMap;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CColourSpace : public CGDIObject< CColourSpace >
	{
		friend class CGDIObject< CColourSpace >;

	public:

		__QOR_DECLARE_OCLASS_ID( CColourSpace );

		CColourSpace( nsWin32::LPLOGCOLORSPACE lpLogColourSpace, int* pbResult = 0 );
		CColourSpace( CDCInternal& DC, int* pbResult = 0 );
		virtual ~CColourSpace();
		nsWin32::LOGCOLORSPACE GetData( void );

	protected:

		static CColourSpaceHandleMap& HandleMap( void );

		int* m_pResult;
	};

	class __QOR_INTERFACE( __WINQL ) CPalette;
	typedef CTHandleMap< typename CTypedSessionHandle< CPalette >::refType, CPalette > CPaletteHandleMap;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CPalette : public CGDIObject< CPalette >
	{
		friend class CGDIObject< CPalette >;

	public:

		__QOR_DECLARE_OCLASS_ID( CPalette );

		CPalette( CDCHandle::refType hdc );
		CPalette( const nsWin32::LOGPALETTE& logPalette );
		virtual ~CPalette();
		bool Animate( unsigned int iStartIndex, unsigned int cEntries, const nsWin32::PALETTEENTRY* ppe );
		unsigned int GetNearestIndex( unsigned long crColour );
		unsigned int GetEntries( unsigned int iStartIndex, unsigned int nEntries, nsWin32::LPPALETTEENTRY lppe );
		unsigned int Realize( CDCHandle::refType hDC );
		bool Resize( unsigned int nEntries );
		unsigned int SetEntries( unsigned int iStart, unsigned int cEntries, const nsWin32::PALETTEENTRY* lppe );
		bool Unrealize( void );
		bool ColourCorrect( CDCHandle::refType hDC, unsigned long dwFirstEntry, unsigned long dwNumOfEntries );
		//TODO: selectable into multiple simultaneous DCs.
		//TODO: must be deselected from everywhere before deletion

	protected:

		static CPaletteHandleMap& HandleMap( void );
	};

}//nsWin32

#endif//WINQL_GRAPHICS_PALETTE_H_3
