//WinQLRectangle.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_GRAPHICS_RECTANGLE_H_3
#define WINQL_GRAPHICS_RECTANGLE_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/Definitions/Handles.h"
#include "WinQL/GUI/GUI.h"
#include "WinQL/Definitions/Data.h"
#include "WinQL/Application/Graphics/WinQLDeviceContext.h"
#include "WinQL/Application/Graphics/WinQLBrush.h"
#include "WinQL/Application/Graphics/WinQLPoint.h"
#include "WinQL/Application/Graphics/WinQLSize.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	class __QOR_INTERFACE( __WINQAPI ) CUser32;
}

//--------------------------------------------------------------------------------
namespace nsWin32
{
	class CDeviceContext;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CRectangle : public RECT
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CRectangle );

        CRectangle();
		CRectangle( int l, int t, int r, int b );
		CRectangle( const CRectangle& Src );
		bool Copy( CRectangle* pRect );
		bool Equal( const CRectangle* pRect ) const;
		bool Inflate( int dx, int dy );
		bool Intersect( CRectangle* lprcDst, const CRectangle* lprcSrc1 );
		bool IsEmpty( void ) const;
		bool Offset( int dx, int dy );
		bool IsPointInside( nsWin32::POINT pt ) const;
		bool Set( int xLeft, int yTop, int xRight, int yBottom );
		void SetTop( int y1 );
		void SetBottom( int y2 );
		void SetLeft( int x1 );
		void SetRight( int x2 );
		bool SetEmpty( void );
		bool Subtract( CRectangle* lprcDst, const CRectangle* lprcSrc1 );
		bool Union( CRectangle* lprcDst, const CRectangle* lprcSrc1 );
		int Fill( CDCHandle::refType hDC, CBrushHandle::refType hbr );
		int Frame( CDCHandle::refType hDC, CBrushHandle::refType hbr );
		bool Invert( CDCHandle::refType hDC );
		CRectangle MulDiv( int nMultiplier, int nDivisor );

		//--------------------------------------------------------------------------------
		CRectangle( const RECT& rc )
		{
			left = rc.left;
			top = rc.top;
			right = rc.right;
			bottom = rc.bottom;
		}

		//--------------------------------------------------------------------------------
		CRectangle( CPoint Point, CSize Size)
		{
			left = Point.x;
			right = Point.x + Size.cx;
			top = Point.y;
			bottom = Point.y + Size.cy;
		}

		//--------------------------------------------------------------------------------
		CRectangle( CPoint TopLeft, CPoint BottomRight )
		{
			left = TopLeft.x;
			right = BottomRight.x;
			top = TopLeft.y;
			bottom = BottomRight.y;
		}

		//--------------------------------------------------------------------------------
		int Left() const
		{
			return left;
		}

		//--------------------------------------------------------------------------------
		int Right() const
		{
			return right;
		}

		//--------------------------------------------------------------------------------
		int Top() const
		{
			return top;
		}

		//--------------------------------------------------------------------------------
		int Bottom() const
		{
			return bottom;
		}

		//--------------------------------------------------------------------------------
		int Width() const
		{
			return right - left;
		}

		//--------------------------------------------------------------------------------
		int Height() const
		{
			return bottom - top;
		}

		//--------------------------------------------------------------------------------
		CSize Size() const
		{
			return CSize( Width(), Height() );
		}

		//--------------------------------------------------------------------------------
		CPoint TopLeft() const
		{
			return CPoint( left, top );
		}

		//--------------------------------------------------------------------------------
		CPoint TopRight() const
		{
			return CPoint( right, top );
		}

		//--------------------------------------------------------------------------------
		CPoint BottomLeft() const
		{
			return CPoint( left, bottom );
		}

		//--------------------------------------------------------------------------------
		CPoint BottomRight() const
		{
			return CPoint( right, bottom );
		}

		//--------------------------------------------------------------------------------
		CPoint Center() const
		{
			return CPoint( ( left + right ) / 2, ( top + bottom ) / 2 );
		}

		//--------------------------------------------------------------------------------
		void SwapLeftRight()
		{
			int tmp = left;
			left = right;
			right = tmp;
		}

		//--------------------------------------------------------------------------------
		bool IsNull() const
		{
			bool bResult = ( ( left == 0 ) && ( right == 0 ) && ( top == 0 ) && ( bottom == 0 ) );
			return bResult;
		}

		//--------------------------------------------------------------------------------
		bool Inside( CPoint Point ) const
		{
			bool bResult = IsPointInside( Point ) ? true : false;
			return bResult;
		}

		//--------------------------------------------------------------------------------
		void Set( CPoint TopLeft, CPoint BottomRight )
		{
			Set( TopLeft.x, TopLeft.y, BottomRight.x, BottomRight.y );
		}

		//--------------------------------------------------------------------------------
		bool CopyTo( CRectangle* pRect )
		{
			bool bResult = Copy( pRect ) ? true : false;
			return bResult;
		}

		//--------------------------------------------------------------------------------
		bool CopyTo( nsWin32::RECT* pRect )
		{
			bool bResult = Copy( reinterpret_cast< CRectangle* >( pRect ) ) ? true : false;
			return bResult;
		}

		//--------------------------------------------------------------------------------
		void Inflate( CSize Size )
		{
			Inflate( Size.cx, Size.cy );
		}

		//--------------------------------------------------------------------------------
		void Deflate( int x, int y )
		{
			Inflate( -x, -y );
		}

		//--------------------------------------------------------------------------------
		void Deflate( CSize Size )
		{
			Inflate( -Size.cx, -Size.cy );
		}

		//--------------------------------------------------------------------------------
		void Offset( CPoint Point )
		{
			Offset( Point.x, Point.y );
		}

		//--------------------------------------------------------------------------------
		void Offset( CSize Size )
		{
			Offset( Size.cx, Size.cy );
		}

		//--------------------------------------------------------------------------------
		void MoveToY( int y )
		{
			bottom = Height() + y;
			top = y;
		}

		//--------------------------------------------------------------------------------
		void MoveToX( int x )
		{
			right = Width() + x;
			left = x;
		}

		//--------------------------------------------------------------------------------
		void MoveToXY( int x, int y )
		{
			MoveToX( x );
			MoveToY( y );
		}

		//--------------------------------------------------------------------------------
		void MoveToXY( CPoint Point )
		{
			MoveToXY( Point.x, Point.y );
		}

		//--------------------------------------------------------------------------------
		bool operator == ( const CRectangle& Cmp )
		{
			bool bResult = Equal( &Cmp ) ? true : false;
			return bResult;
		}

		//--------------------------------------------------------------------------------
		bool operator != ( const CRectangle& Cmp )
		{
			bool bResult = Equal( &Cmp ) ? false : true;
			return bResult;
		}

		//--------------------------------------------------------------------------------
		void operator += ( CPoint Point )
		{
			Offset( Point.x, Point.y );
		}

		//--------------------------------------------------------------------------------
		void operator += ( CSize Size )
		{
			right += Size.cx;
			bottom += Size.cy;
		}

		//--------------------------------------------------------------------------------
		void operator -= ( CPoint Point )
		{
			Offset( -Point.x, -Point.y );
		}

		//--------------------------------------------------------------------------------
		void operator -= ( CSize Size )
		{
			right -= Size.cx;
			bottom -= Size.cy;
		}

		//--------------------------------------------------------------------------------
		void operator &= ( const CRectangle& Rect )
		{
			Intersect( this, &Rect );
		}

		//--------------------------------------------------------------------------------
		void operator |= ( const CRectangle& Rect )
		{
			Union( this, &Rect );
		}

		//--------------------------------------------------------------------------------
		CRectangle operator + ( CPoint Point )
		{
			CRectangle Rect( *this );
			Rect.Offset( Point.x, Point.y );
			return Rect;
		}

		//--------------------------------------------------------------------------------
		CRectangle operator - ( CPoint Point )
		{
			CRectangle Rect( *this );
			Rect.Offset( -Point.x, -Point.y );
			return Rect;
		}

		//--------------------------------------------------------------------------------
		CRectangle operator + ( CSize Size )
		{
			CRectangle Rect( *this );
			Rect += Size;
			return Rect;
		}

		//--------------------------------------------------------------------------------
		CRectangle operator - ( CSize Size )
		{
			CRectangle Rect( *this );
			Rect -= Size;
			return Rect;
		}

		//--------------------------------------------------------------------------------
		CRectangle operator & ( const CRectangle& Rect2 )
		{
			CRectangle Rect;
			Rect.Intersect( this, &Rect2 );
			return Rect;
		}

		//--------------------------------------------------------------------------------
		CRectangle operator | ( const CRectangle& Rect2 )
		{
			CRectangle Rect;
			Rect.Union( this, &Rect2 );
			return Rect;
		}
		/*
		//--------------------------------------------------------------------------------
		bool Subtract( CRectangle* pRect1, CRectangle* pRect2 )
		{
			bool bResult = Subtract( pRect1, pRect2 ) ? true : false;
			return bResult;
		}
		*/
		//--------------------------------------------------------------------------------
		void Normalize()
		{
			int nTmp;
			if( left > right )
			{
				nTmp = left;
				left = right;
				right = nTmp;
			}
			if( top > bottom )
			{
				nTmp = top;
				top = bottom;
				bottom = nTmp;
			}
		}

		//--------------------------------------------------------------------------------
		void Inflate(int l, int t, int r, int b)
		{
			left -= l;
			right += r;
			top -= t;
			bottom += b;
		}

        int Fill( CDeviceContext& DC, CBrush& Brush );

		//--------------------------------------------------------------------------------
		~CRectangle()
		{
		}

		//--------------------------------------------------------------------------------
		operator nsWin32::LPRECT ()
		{
			return this;
		}

		//--------------------------------------------------------------------------------
		CRectangle* Ptr()
		{
			return this;
		}

	};

}//nsWin32

#endif//WINQL_GRAPHICS_RECTANGLE_H_3
