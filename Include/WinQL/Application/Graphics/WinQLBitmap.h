//WinQLBitmap.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_GRAPHICS_BITMAP_H_3
#define WINQL_GRAPHICS_BITMAP_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/Definitions/Handles.h"
#include "WinQL/Definitions/Data.h"
#include "WinQL/Application/Process/Module/WinQLModule.h"
#include "WinQL/Application/Graphics/WinQLGDIObj.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	class __QOR_INTERFACE( __WINQAPI ) CUser32;
	class __QOR_INTERFACE( __WINQAPI ) CGDI32;
}

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	typedef struct tagBITMAP
	{
		long bmType;
		long bmWidth;
		long bmHeight;
		long bmWidthBytes;
		unsigned short bmPlanes;
		unsigned short bmBitsPixel;
		void* bmBits;
	} BITMAP, *PBITMAP, *NPBITMAP, *LPBITMAP;

	//--------------------------------------------------------------------------------
	typedef struct tagBITMAPINFO 
	{
		BITMAPINFOHEADER    bmiHeader;
		RGBQUAD             bmiColors[1];
	} BITMAPINFO, *LPBITMAPINFO, *PBITMAPINFO;


	class __QOR_INTERFACE( __WINQL ) CSelectedDIB;

	typedef CTHandleMap< typename CTypedSessionHandle< CBitmap >::refType, CBitmap > CBitmapHandleMap;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CBitmap : public CSelectableGDIObject< CBitmap >
	{
		friend class CSelectedDIB;
		friend class CGDIObject< CBitmap >;

	public:

		__QOR_DECLARE_OCLASS_ID( CBitmap );

        CBitmap();
		CBitmap( const CBitmap& src );
		CBitmap( CWinModule& Module, const TCHAR* lpBitmapName );
        CBitmap( CWinModule& Module, const TCHAR* lpszName, int cxDesired, int cyDesired, unsigned int fuLoad );
		CBitmap( int nWidth, int nHeight, unsigned int cPlanes, unsigned int cBitsPerPel, const void* lpvBits );
		CBitmap( const nsWin32::BITMAP* lpbm );
		CBitmap( CDCHandle::refType hdc, int nWidth, int nHeight );
		CBitmap( CDCHandle::refType hdc, const nsWin32::BITMAPINFOHEADER* lpbmih, unsigned long fdwInit, const void* lpbInit, const nsWin32::BITMAPINFO* lpbmi, unsigned int fuUsage );
		CBitmap( CDCHandle::refType hdc, const nsWin32::BITMAPINFO* pbmi, unsigned int iUsage, void** ppvBits, void* hSection, unsigned long dwOffset );
		CBitmap& operator =( const CBitmap& src );
		bool LoadT( CWinModule& Module, const TCHAR* lpBitmapName );
        bool LoadImageT( CWinModule& Module, const TCHAR* lpszName, int cxDesired, int cyDesired, unsigned int fuLoad );
        bool CreateCompatibleBitmap( CDCHandle::refType hdc, int nWidth, int nHeight );
		long GetBits( long cbBuffer, void* lpvBits );
		int GetDIBits( CDCHandle::refType hdc, unsigned int uStartScan, unsigned int cScanLines, void* lpvBits, nsWin32::LPBITMAPINFO lpbi, unsigned int uUsage );
		long SetBits( unsigned long cBytes, const void* lpBits );
		int SetDIBits( CDCHandle::refType hdc, unsigned int uStartScan, unsigned int cScanLines, const void* lpvBits, const nsWin32::BITMAPINFO* lpbmi, unsigned int fuColourUse );
		bool GetDimensions( nsWin32::SIZE* lpDimension );
		bool SetDimensions( int nWidth, int nHeight, nsWin32::SIZE* lpSize );
		virtual ~CBitmap();

	protected:

		static CBitmapHandleMap& HandleMap( void );
        bool DeleteGDIObject( void );

	private:
			
		nsWinQAPI::CUser32& m_User32Library;
			
	};

}//nsWin32

#endif//WINQL_GRAPHICS_BITMAP_H_3
