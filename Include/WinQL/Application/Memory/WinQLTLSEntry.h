//WinQLTLSEntry.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Thread Local Storage type template

#ifndef WINQL_MEMORY_TLSENTRY_H_2
#define WINQL_MEMORY_TLSENTRY_H_2

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	template<typename T>
	class TlsEntry : protected nsWin32::nsCodeServices::CTLSHelper
	{
	public:

		//--------------------------------------------------------------------------------
		TlsEntry() : m_Index( Alloc() )
		{
			/*
			if ( m_Index == OUT_OF_INDEXES )
			{
				_QSYS_MSW_WWL_SERIOUS(( OUT_OF_THREAD_MEMORY, _CTXT( "TlsEntry< T >::TlsEntry()" ), 0 ));
			}
			*/
		}

		//--------------------------------------------------------------------------------
		~TlsEntry()
		{
			Free( m_Index );			
		}

		//--------------------------------------------------------------------------------
		void SetValue( T* p )
		{
			if( !nsWin32::nsCodeServices::CTLSHelper::SetValue( m_Index, p ) )
			{
				//_QSYS_MSW_WWL_CONT_ERROR(( 
			}
		}

		//--------------------------------------------------------------------------------
		T* GetValue()
		{
			return static_cast< T* >( nsWin32::nsCodeServices::CTLSHelper::GetValue( m_Index ) );
		}

	// Members
	private:

		unsigned int m_Index;

	// Not to be implemented
	private:

		TlsEntry( TlsEntry const & );
		TlsEntry& operator = ( TlsEntry const& );
	};

}//nsWin32


#endif//WINQL_MEMORY_TLSENTRY_H_2
