//WinQLMemFile.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_CODESERV_MEMFILE_H_2
#define WINQL_CODESERV_MEMFILE_H_2

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma __QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/WinQL.h"
#include "CodeQOR/ClassReg/ClassRegEntry.h"
#include "WinQL/CodeServices/Text/WinQLStringServices.h"
#include "WinQL/System/Security/WinQLSecurity.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CMemFile
	{
		friend class CMappedViewOfFile;

	public:

		typedef nsCodeQOR::CTLRef< CMemFile > refType;

		__QOR_DECLARE_OCLASS_ID( CMemFile );

		CMemFile( SECURITY_ATTRIBUTES* pSecurity, unsigned long ulProtectFlags, unsigned long ulMaximumSizeHigh, unsigned long ulMaximumSizeLow, const TCHAR* szName );
		~CMemFile();

		//--------------------------------------------------------------------------------
		refType Ref( void )
		{
			refType ref( this, false );
			return ref;
		}

		//--------------------------------------------------------------------------------
		CRAIISessionHandle& Handle( void )
		{
			return m_Handle;
		}

	private:

		CRAIISessionHandle m_Handle;

		//static HANDLE CreateFileMapping( HANDLE hFile, ::LPSECURITY_ATTRIBUTES lpAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCTSTR lpName );
		//static HANDLE CreateFileMappingNuma( HANDLE hFile, ::LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCTSTR lpName, DWORD nndPreferred );
		//static void* MapViewOfFile( HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap );
		//static void* MapViewOfFileEx( HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap, void* lpBaseAddress );
		//static LPVOID MapViewOfFileExNuma( HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap, LPVOID lpBaseAddress, DWORD nndPreferred );
		//static BOOL UnmapViewOfFile( LPCVOID lpBaseAddress );
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CMappedViewOfFile
	{
	public:

		__QCMP_STATIC_CONSTANT( unsigned long, Map_Copy				= nsWin32::Section_Query );
		__QCMP_STATIC_CONSTANT( unsigned long, Map_Write			= nsWin32::Section_Map_Write );
		__QCMP_STATIC_CONSTANT( unsigned long, Map_Read				= nsWin32::Section_Map_Read );
		__QCMP_STATIC_CONSTANT( unsigned long, Map_All_Access		= nsWin32::Section_All_Access );
		__QCMP_STATIC_CONSTANT( unsigned long, Map_Execute			= nsWin32::Section_Execute_Explicit );

		__QOR_DECLARE_OCLASS_ID( CMappedViewOfFile );

		CMappedViewOfFile( CMemFile::refType RefMemFile, unsigned long ulAccess, unsigned long ulFileOffsetHigh, unsigned long ulFileOffsetLow, unsigned long ulNumberOfBytesToMap );
		~CMappedViewOfFile();

		void* operator()(void);

	private:

		void* m_pMapping;
	};

}//nsWin32

#endif//WINQL_CODESERV_MEMFILE_H_2
