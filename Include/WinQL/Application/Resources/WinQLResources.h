//WinQLResources.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Win32 Code Services Resources

#ifndef WINQL_CODESERV_RESOURCES_H_2
#define WINQL_CODESERV_RESOURCES_H_2

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/Definitions/Handles.h"
#include "WinQL/Application/Resources/WinQLResourceUpdateHandle.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	typedef int ( __QCMP_STDCALLCONVENTION *fpEnumResLangProc )( ModuleHandle hModule, const wchar_t* lpType, const wchar_t* lpName, unsigned short wLanguage, Cmp_long_ptr lParam );
	typedef int ( __QCMP_STDCALLCONVENTION *fpEnumResNameProc )( ModuleHandle hModule,  const wchar_t* lpType, wchar_t* lpName, Cmp_long_ptr lParam );
	typedef int ( __QCMP_STDCALLCONVENTION *fpEnumResTypeProc )( ModuleHandle hModule, wchar_t* lpType, Cmp_long_ptr lParam );

	//------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CResourceUpdate
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CResourceUpdate );

		CResourceUpdate( const TCHAR* pFileName, bool bDeleteExistingResources );
		virtual ~CResourceUpdate();
		bool Update( const TCHAR* lpType, const TCHAR* lpName, unsigned short wLanguage, void* lpData, unsigned long cbData );
		void Discard( void );

	private:

		CResourceUpdateHandle m_Handle;
		bool m_fDiscard;

		CResourceUpdate();
		CResourceUpdate( const CResourceUpdate& );
		CResourceUpdate& operator = ( const CResourceUpdate& );
	};


	//------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CResourceHelper
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CResourceHelper );

		CResourceHelper();
		CResourceHelper( const CResourceHelper& src );
		CResourceHelper& operator = ( const CResourceHelper& src );
		~CResourceHelper();
		bool EnumLanguages( ModuleHandle hModule, const TCHAR* lpType, const TCHAR* lpName, nsWin32::fpEnumResLangProc lpEnumFunc, Cmp_long_ptr lParam );
		bool EnumLanguagesEx( ModuleHandle hModule, const TCHAR* lpType, const TCHAR* lpName, nsWin32::fpEnumResLangProc lpEnumFunc, Cmp_long_ptr lParam, unsigned long dwFlags, unsigned short LangId );
		bool EnumNames( ModuleHandle hModule, const TCHAR* lpszType, nsWin32::fpEnumResNameProc lpEnumFunc, Cmp_long_ptr lParam );
		bool EnumNamesEx( ModuleHandle hModule, const TCHAR* lpszType, nsWin32::fpEnumResNameProc lpEnumFunc, Cmp_long_ptr lParam, unsigned long dwFlags, unsigned short LangId );
		bool EnumTypes( ModuleHandle hModule, nsWin32::fpEnumResTypeProc lpEnumFunc, Cmp_long_ptr lParam );
		bool EnumTypesEx( ModuleHandle hModule, nsWin32::fpEnumResTypeProc lpEnumFunc, Cmp_long_ptr lParam, unsigned long dwFlags, unsigned short LangId );
		ResourceHandle Find( ModuleHandle hModule, const TCHAR* lpName, const TCHAR* lpType );
		ResourceHandle FindEx( ModuleHandle hModule, const TCHAR* lpType, const TCHAR* lpName, unsigned short wLanguage );
		bool Free( void* hglbResource );
		void* Load( ModuleHandle hModule, ResourceHandle hResInfo );
		void* Lock( void* hResData );
		unsigned long Size( ModuleHandle hModule, ResourceHandle hResInfo );
		unsigned long VerLanguageNameT( unsigned long wLang, TCHAR* szLang, unsigned long nSize );

	};

}//nsWin32

#endif//WINQL_CODESERV_RESOURCES_H_2
