//PosumString.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Posum String

#ifndef POSUMQOR_STRING_H_3
#define POSUMQOR_STRING_H_3

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma __QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE


#include "CodeQOR/DataTypes/GUID.h"
#include "CodeQOR/ClassReg/ClassRegEntry.h"
#include "CodeQOR/Text/Char.h"

//--------------------------------------------------------------------------------
namespace nsPosum
{
	/*
	Posum String
	needs to be similar to std::string in terms of being a template but over an encoding rather than a character type
	CString< UTF8 >
	CString< UCS2 >
	CString< ASCII >
	CString< ANSI >
	CString< MBCS >
	CString< UTF16 >
	CString< UTF32 >

	[] operator to return a character reference CChar< encoding > which will implement the ctype.h/wctype.h interface

	ToIMax and ToUMax functions to cover inttypes.h

	MessageFormat function to cover fmtmsg.h

	Match function to cover fnmatch.h

	Relevant conversion functions to match iconv

	Dates and Times as strings and conversion to and from strings in langinfo determined and specified formats

	Regex implementation to cover regex.h

	Serialization and formatting to cover parts of stdio

	Conversions to cover parts of stdlib

	Copying to cover strdup

	Functions to cover string.h and strings.h

	Functions to cover all of wchar.h

	This will entail an enormous interface and a great number of functions. Consider how to break this up.
	Perhaps by dividing the functionality between an encoding type class and a buffer base class

	All Posum strings should be allocated from a managed pool. This enables the handing out of raw pointers
	to the character data and to validate and recover the class object later from the raw pointer by testing 
	for the address being within the pool.

	Look towards integration of Posum Strings with CodeQOR Strings and WinQL Strings becoming the WinPosum 
	implementation of Posum String

	*/
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __POSUMQOR ) CString
	{

	public:

		__QOR_DECLARE_OCLASS_ID( CString );
		
		CString();
		CString( const CString& );
		CString& operator = ( const CString& );
		virtual ~CString();		

		operator const mxTCHAR*();

	protected:

		CString( CString* pImpl );		

	private:

		CString* m_pImpl;
		CString* PImpl( void );
	};

}//nsPosum

#endif//POSUMQOR_SHAREDLIBRARY_H_3
