//PosumBaseCharImpl.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Posum Character object

#ifndef POSUMQOR_BASE_CHAR_IMPL_H_3
#define POSUMQOR_BASE_CHAR_IMPL_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma __QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

//------------------------------------------------------------------------------
namespace nsPosum
{
	//------------------------------------------------------------------------------
	class CBaseCharImpl
	{
	public:

		CBaseCharImpl();
		CBaseCharImpl( unsigned int uiC );
		CBaseCharImpl( const CBaseCharImpl& src );
		CBaseCharImpl& operator = ( const CBaseCharImpl& src );
		CBaseCharImpl& operator = ( const unsigned int& src );
		virtual ~CBaseCharImpl();

		bool IsAlphaNumeric( void );
		bool IsAlpha( void );
		bool IsBlank( void );
		bool IsControl( void );
		bool IsDigit( void );
		bool IsGraph( void );
		bool IsLowerCase( void );
		bool IsPrint( void );
		bool IsPunctuation( void );
		bool IsSpace( void );
		bool IsUpperCase( void );
		bool IsXDigit( void );
		bool IsASCII( void );
		bool IsMultiByteAlphaNumeric( void );

		CBaseCharImpl ToLowerCase( void );
		CBaseCharImpl ToUpperCase( void );
		CBaseCharImpl ToASCII( void );

/*
	__QOR_INTERFACE( __CQOR ) int _setmbcp( int codepage );
	__QOR_INTERFACE( __CQOR ) int _isatty( int fd );

	__QOR_INTERFACE( __CQOR ) int _isctype( int c, int desc );

	__QOR_INTERFACE( __CQOR ) int _ismbbalnum( unsigned int c  );
	__QOR_INTERFACE( __CQOR ) int _ismbbalnum_l( unsigned int c );
	__QOR_INTERFACE( __CQOR ) int _ismbbalpha( unsigned int c );
	__QOR_INTERFACE( __CQOR ) int _ismbbalpha_l( unsigned int c );
	__QOR_INTERFACE( __CQOR ) int _ismbbgraph ( unsigned int c );
	__QOR_INTERFACE( __CQOR ) int _ismbbkalnum( unsigned int c );
	__QOR_INTERFACE( __CQOR ) int _ismbbkana( unsigned int c );
	__QOR_INTERFACE( __CQOR ) int _ismbbkprint( unsigned int c );
	__QOR_INTERFACE( __CQOR ) int _ismbbkpunct( unsigned int c );
	__QOR_INTERFACE( __CQOR ) int _ismbblead( unsigned int c );
	__QOR_INTERFACE( __CQOR ) int _ismbbprint( unsigned int c );
	__QOR_INTERFACE( __CQOR ) int _ismbbpunct( unsigned int c );
	__QOR_INTERFACE( __CQOR ) int _ismbbtrail( unsigned int c );
	__QOR_INTERFACE( __CQOR ) int _ismbcalnum( unsigned int c );
	__QOR_INTERFACE( __CQOR ) int _ismbcalpha( unsigned int c );
	__QOR_INTERFACE( __CQOR ) int _ismbcdigit( unsigned int c );
	__QOR_INTERFACE( __CQOR ) int _ismbcgraph( unsigned int c );
	__QOR_INTERFACE( __CQOR ) int _ismbchira( unsigned int c );
	__QOR_INTERFACE( __CQOR ) int _ismbckata( unsigned int c );
	__QOR_INTERFACE( __CQOR ) int _ismbcl0( unsigned int c );
	__QOR_INTERFACE( __CQOR ) int _ismbcl1( unsigned int c );
	__QOR_INTERFACE( __CQOR ) int _ismbcl2( unsigned int c );
	__QOR_INTERFACE( __CQOR ) int _ismbclegal( unsigned int c );
	__QOR_INTERFACE( __CQOR ) int _ismbclower( unsigned int c );
	__QOR_INTERFACE( __CQOR ) int _ismbcprint( unsigned int c );
	__QOR_INTERFACE( __CQOR ) int _ismbcpunct( unsigned int c );
	__QOR_INTERFACE( __CQOR ) int _ismbcspace( unsigned int c );
	__QOR_INTERFACE( __CQOR ) int _ismbcsymbol( unsigned int c );
	__QOR_INTERFACE( __CQOR ) int _ismbcupper( unsigned int c );
	__QOR_INTERFACE( __CQOR ) int _ismbslead( const unsigned char* str, const unsigned char* current );
	__QOR_INTERFACE( __CQOR ) int _ismbstrail( const unsigned char* str, const unsigned char* current );
	__QOR_INTERFACE( __CQOR ) const unsigned short* __pctype_func( void );

	__QOR_INTERFACE( __CQOR ) int islower_l( int c, nsPlatform::locale_t l );
	__QOR_INTERFACE( __CQOR ) int isupper_l( int c, nsPlatform::locale_t l );
	__QOR_INTERFACE( __CQOR ) int toupper_l( int c, nsPlatform::locale_t l );
	__QOR_INTERFACE( __CQOR ) int tolower_l( int c, nsPlatform::locale_t l );
	__QOR_INTERFACE( __CQOR ) int isdigit_l( int c, nsPlatform::locale_t l );
	__QOR_INTERFACE( __CQOR ) int isxdigit_l( int c , nsPlatform::locale_t l );
*/
	private:

		unsigned int m_C;
	};

}//nsPosum

#endif//POSUMQOR_BASE_CHAR_IMPL_H_3
