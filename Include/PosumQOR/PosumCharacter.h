//PosumCharacter.h

// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Posum character object

#ifndef POSUMQOR_CHARACTER_H_3
#define POSUMQOR_CHARACTER_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma __QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "CompilerQOR.h"

//--------------------------------------------------------------------------------
namespace nsPosum
{
	class __QOR_INTERFACE( __POSUMQOR ) CLocale;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __POSUMQOR ) CCharacter
	{
	public:

		//--------------------------------------------------------------------------------
		CCharacter() : m_Value( 0 )
		{
		}

		//--------------------------------------------------------------------------------
		virtual ~CCharacter()
		{
		}

		CCharacter( const CCharacter& );
		CCharacter( unsigned int uiValue );
		CCharacter( int iValue );
		CCharacter& operator = ( const CCharacter& );

		bool isalnum( void );
		bool isalpha( void );
		bool isblank( void );
		bool iscntrl( void );
		bool isdigit( void );
		bool isgraph( void );
		bool islower( void );
		bool isprint( void );
		bool ispunct( void );
		bool isspace( void );
		bool isupper( void );
		bool isxdigit( void );
		CCharacter tolower( void );
		CCharacter toupper( void );
		bool isascii( void );
		int toascii( void );
		bool isctype( int desc );
		bool ismbbalnum( void );
		bool ismbbalnum_l( void );
		bool ismbbalpha( void );
		bool ismbbalpha_l( void );
		bool ismbbgraph ( void );
		bool ismbbkalnum( void );
		bool ismbbkana( void );
		bool ismbbkprint( void );
		bool ismbbkpunct( void );
		bool ismbblead( void );
		bool ismbbprint( void );
		bool ismbbpunct( void );
		bool ismbbtrail( void );
		bool ismbcalnum( void );
		bool ismbcalpha( void );
		bool ismbcdigit( void );
		bool ismbcgraph( void );
		bool ismbchira( void );
		bool ismbckata( void );
		bool ismbcl0( void );
		bool ismbcl1( void );
		bool ismbcl2( void );
		bool ismbclegal( void );
		bool ismbclower( void );
		bool ismbcprint( void );
		bool ismbcpunct( void );
		bool ismbcspace( void );
		bool ismbcsymbol( void );
		bool ismbcupper( void );
		bool ismbslead( const unsigned char* str, const unsigned char* current );
		bool ismbstrail( const unsigned char* str, const unsigned char* current );

		bool islower_l( CLocale& l );
		bool isupper_l( CLocale& l );
		bool toupper_l( CLocale& l );
		bool tolower_l( CLocale& l );
		bool isdigit_l( CLocale& l );
		bool isxdigit_l( CLocale& l );

	private:

		unsigned int m_Value;
	};
	
}//nsPosum

#endif//POSUMQOR_CHARACTER_H_3
