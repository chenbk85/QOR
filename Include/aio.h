//aio.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef	QOR_AIO_H_3
#define QOR_AIO_H_3

#include <fcntl.h>
#include <signal.h>
#include "SystemQOR.h"
#include QOR_SYS_PLATFORMTYPES(aio)

typedef nsPlatform::aiocb aiocb;
typedef nsPlatform::timespec timespec;
typedef nsPlatform::sigevent sigevent;
typedef nsPlatform::ssize_t ssize_t;

#define AIO_ALLDONE			( nsPlatform::AIOAllDone )		//A return value indicating that none of the requested operations could be canceled since they are already complete. 
#define AIO_CANCELED		( nsPlatform::AIOCancelled )	//A return value indicating that all requested operations have been canceled. 
#define AIO_NOTCANCELED		( nsPlatform::AIONotCancelled )

#define LIO_NOP				( nsPlatform::LIONoOp )			//A lio_listio() element operation option indicating that no transfer is requested.
#define LIO_NOWAIT			( nsPlatform::LIONoWait )		//A lio_listio() synchronization operation indicating that the calling thread is to continue execution while the lio_listio() operation is being performed, and no notification is given when the operation is complete.
#define LIO_READ			( nsPlatform::LIORead )			//A lio_listio() element operation option requesting a read.
#define LIO_WAIT			( nsPlatform::LIOWait )			//A lio_listio() synchronization operation indicating that the calling thread is to suspend until the lio_listio() operation is complete.
#define LIO_WRITE			( nsPlatform::LIOWrite )		//A lio_listio() element operation option requesting a write.

__QCMP_STARTLINKAGE_C

	__QOR_INTERFACE( __CQOR ) int      aio_cancel( int, aiocb* );
	__QOR_INTERFACE( __CQOR ) int      aio_error( const aiocb* );
	__QOR_INTERFACE( __CQOR ) int      aio_fsync( int, aiocb* );
	__QOR_INTERFACE( __CQOR ) int      aio_read( aiocb* );
	__QOR_INTERFACE( __CQOR ) ssize_t  aio_return( aiocb* );
	__QOR_INTERFACE( __CQOR ) int      aio_suspend( const aiocb* const[], int, const timespec* );
	__QOR_INTERFACE( __CQOR ) int      aio_write( aiocb* );
	__QOR_INTERFACE( __CQOR ) int      lio_listio( int, aiocb* __QCMP_RESTRICT const[], int, sigevent* __QCMP_RESTRICT );

__QCMP_ENDLINKAGE_C

#endif//QOR_AIO_H_3
