//in.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef	QOR_NETINET_IN_H_3
#define QOR_NETINET_IN_H_3

#include "SystemQOR.h"
#include QOR_SYS_PLATFORMTYPES(netinet/in)

typedef nsPlatform::in_port_t in_port_t;
typedef nsPlatform::in_addr_t in_addr_t;
typedef nsPlatform::sa_family_t sa_family_t;
typedef nsPlatform::uint8_t uint8_t;
typedef nsPlatform::uint32_t uint32_t;
typedef nsPlatform::in_addr in_addr;
typedef nsPlatform::sockaddr_in sockaddr_in;
typedef nsPlatform::in6_addr in6_addr;
typedef nsPlatform::sockaddr_in6 sockaddr_in6;

extern const in6_addr in6addr_any;

//TODO:
#define IN6ADDR_ANY_INIT			//This macro must be constant at compile time and can be used to initialize a variable of type struct in6_addr to the IPv6 wildcard address.

extern const in6_addr in6addr_loopback;

//TODO:
#define IN6ADDR_LOOPBACK_INIT		//This macro must be constant at compile time and can be used to initialize a variable of type struct in6_addr to the IPv6 loopback address.

typedef nsPlatform::ipv6_mreq ipv6_mreq;

//the following symbolic constants for use as values of the level argument of getsockopt() and setsockopt():

#define IPPROTO_IP			( nsPlatform::IPProtoIP )			//Internet protocol. 
#define IPPROTO_IPV6		( nsPlatform::IPProtoIPV6 )			//[IP6]  Internet Protocol Version 6.  
#define IPPROTO_ICMP		( nsPlatform::IPProtoICMP )			//Control message protocol. 
#define IPPROTO_RAW			( nsPlatform::IPProtoRaw )			//[RS]  Raw IP Packets Protocol.  
#define IPPROTO_TCP			( nsPlatform::IPProtoTCP )			//Transmission control protocol. 
#define IPPROTO_UDP			( nsPlatform::IPProtoUDP )			//User datagram protocol. 

//the following symbolic constants for use as destination addresses for connect(), sendmsg(), and sendto():

#define INADDR_ANY			( nsPlatform::InAddrAny )			//IPv4 local host address. 
#define INADDR_BROADCAST	( nsPlatform::InAddrBroadcast )		//IPv4 broadcast address. 

#define INET_ADDRSTRLEN		16
#define INET6_ADDRSTRLEN	46

//the following symbolic constants, with distinct integer values, for use in the option_name argument in the getsockopt() or setsockopt() functions at protocol level IPPROTO_IPV6:

#define IPV6_JOIN_GROUP				( nsPlatform::IPV6JoinGroup )			//Join a multicast group. 
#define IPV6_LEAVE_GROUP			( nsPlatform::IPV6LeaveGroup )			//Quit a multicast group. 
#define IPV6_MULTICAST_HOPS			( nsPlatform::IPV6MulticastHops	)		//Multicast hop limit. 
#define IPV6_MULTICAST_IF			( nsPlatform::IPV6MulticastInterface )	//Interface to use for outgoing multicast packets. 
#define IPV6_MULTICAST_LOOP			( nsPlatform::IPV6MulticastLoopBack )	//Multicast packets are delivered back to the local application. 
#define IPV6_UNICAST_HOPS			( nsPlatform::IPV6UnicastHops )			//Unicast hop limit. 
#define IPV6_V6ONLY					( nsPlatform::IPV6Only )				//Restrict AF_INET6 socket to IPv6 communications only. 

//the following macros that test for special IPv6 addresses. Each macro is of type int and takes a single argument of type const struct in6_addr *:

#define IN6_IS_ADDR_UNSPECIFIED( _IN6ADDR )			( nsPlatform::IN6IsAddrUnspecified( _IN6ADDR ) )			//Unspecified address. 
#define IN6_IS_ADDR_LOOPBACK( _IN6ADDR )			( nsPlatform::IN6IsAddrLoopBack( _IN6ADDR ) )				//Loopback address. 
#define IN6_IS_ADDR_MULTICAST( _IN6ADDR )			( nsPlatform::IN6IsAddrMulticast( _IN6ADDR ) )				//Multicast address. 
#define IN6_IS_ADDR_LINKLOCAL( _IN6ADDR )			( nsPlatform::IN6IsAddrLinkLocal( _IN6ADDR ) )				//Unicast link-local address. 
#define IN6_IS_ADDR_SITELOCAL( _IN6ADDR )			( nsPlatform::IN6IsAddrSiteLocal( _IN6ADDR ) )				//Unicast site-local address. 
#define IN6_IS_ADDR_V4MAPPED( _IN6ADDR )			( nsPlatform::IN6IsAddrV4Mapped( _IN6ADDR ) )				//IPv4 mapped address. 
#define IN6_IS_ADDR_V4COMPAT( _IN6ADDR )			( nsPlatform::IN6IsAddrV4Compatible( _IN6ADDR ) )			//IPv4-compatible address. 
#define IN6_IS_ADDR_MC_NODELOCAL( _IN6ADDR )		( nsPlatform::IN6IsAddrMCNodeLocal( _IN6ADDR ) )			//Multicast node-local address. 
#define IN6_IS_ADDR_MC_LINKLOCAL( _IN6ADDR )		( nsPlatform::IN6IsAddrMCLinkLocal( _IN6ADDR ) )			//Multicast link-local address. 
#define IN6_IS_ADDR_MC_SITELOCAL( _IN6ADDR )		( nsPlatform::IN6IsAddrMCSiteLocal( _IN6ADDR ) )			//Multicast site-local address. 
#define IN6_IS_ADDR_MC_ORGLOCAL( _IN6ADDR )			( nsPlatform::IN6IsAddrMCOrgLocal( _IN6ADDR ) )				//Multicast organization-local address. 
#define IN6_IS_ADDR_MC_GLOBAL( _IN6ADDR )			( nsPlatform::IN6IsAddrMCGlobal( _IN6ADDR ) )				//Multicast global address. 

#endif//QOR_NETINET_IN_H_3
