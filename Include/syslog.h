//syslog.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef	QOR_SYSLOG_H_3
#define QOR_SYSLOG_H_3

#include "SystemQOR.h"
#include QOR_SYS_PLATFORMTYPES(syslog)

//the following symbolic constants, zero or more of which may be OR'ed together to form the logopt option of openlog():

#define LOG_PID				( nsPlatform::LogPID )				//Log the process ID with each message. 
#define LOG_CONS			( nsPlatform::LogCons )				//Log to the system console on error. 
#define LOG_NDELAY			( nsPlatform::LogNoDelay )			//Connect to syslog daemon immediately. 
#define LOG_ODELAY			( nsPlatform::LogOpenDelay )		//Delay open until syslog() is called. 
#define LOG_NOWAIT			( nsPlatform::LogNoWait )			//Do not wait for child processes. 

//the following symbolic constants for use as the facility argument to openlog():

#define LOG_KERN			( nsPlatform::LogKern )				//Reserved for message generated by the system. 
#define LOG_USER			( nsPlatform::LogUser )				//Message generated by a process. 
#define LOG_MAIL			( nsPlatform::LogMail )				//Reserved for message generated by mail system. 
#define LOG_NEWS			( nsPlatform::LogNews )				//Reserved for message generated by news system. 
#define LOG_UUCP			( nsPlatform::LogUUCP )				//Reserved for message generated by UUCP system. 
#define LOG_DAEMON			( nsPlatform::LogDaemon )			//Reserved for message generated by system daemon. 
#define LOG_AUTH			( nsPlatform::LogAuth )				//Reserved for message generated by authorization daemon. 
#define LOG_CRON			( nsPlatform::LogCron )				//Reserved for message generated by clock daemon. 
#define LOG_LPR				( nsPlatform::LogLPR )				//Reserved for message generated by printer system. 
#define LOG_LOCAL0			( nsPlatform::LogLocal0 )			//Reserved for local use. 
#define LOG_LOCAL1			( nsPlatform::LogLocal1 )			//Reserved for local use. 
#define LOG_LOCAL2			( nsPlatform::LogLocal2 )			//Reserved for local use. 
#define LOG_LOCAL3			( nsPlatform::LogLocal3 )			//Reserved for local use. 
#define LOG_LOCAL4			( nsPlatform::LogLocal4 )			//Reserved for local use. 
#define LOG_LOCAL5			( nsPlatform::LogLocal5 )			//Reserved for local use. 
#define LOG_LOCAL6			( nsPlatform::LogLocal6 )			//Reserved for local use. 
#define LOG_LOCAL7			( nsPlatform::LogLocal7 )			//Reserved for local use. 

//the following macros for constructing the maskpri argument to setlogmask(). The following macros expand to an expression of type int when the argument pri is an expression of type int:

#define LOG_MASK( pri )		//A mask for priority pri. 

//the following symbolic constants for use as the priority argument of syslog():

#define LOG_EMERG			( nsPlatform::LogEmergency )		//A panic condition was reported to all processes. 
#define LOG_ALERT			( nsPlatform::LogAlert )			//A condition that should be corrected immediately. 
#define LOG_CRIT			( nsPlatform::LogCritical )			//A critical condition. 
#define LOG_ERR				( nsPlatform::LogError )			//An error message. 
#define LOG_WARNING			( nsPlatform::LogWarning )			//A warning message. 
#define LOG_NOTICE			( nsPlatform::LogNotice )			//A condition requiring special handling. 
#define LOG_INFO			( nsPlatform::LogInfo )				//A general information message. 
#define LOG_DEBUG			( nsPlatform::LogDebug )			//A message useful for debugging programs.

__QCMP_STARTLINKAGE_C

	__QOR_INTERFACE( __CQOR ) void  closelog( void );
	__QOR_INTERFACE( __CQOR ) void  openlog( const char*, int, int );
	__QOR_INTERFACE( __CQOR ) int   setlogmask( int );
	__QOR_INTERFACE( __CQOR ) void  syslog( int, const char *, ... );

__QCMP_ENDLINKAGE_C

#endif//QOR_SYSLOG_H_3

