//BfXmlDefaultHandler.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

// SAX handler class

#ifndef BLUEFOOT_XML_SAX_DEFAULTHANDLER_H_3
#define BLUEFOOT_XML_SAX_DEFAULTHANDLER_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "BluefootQOR/XML/SAX/BfXmlContentHandler.h"
#include "BluefootQOR/XML/SAX/BfXmlErrorHandler.h"
#include "BluefootQOR/XML/SAX/BfXmlDTDHandler.h"
#include "BluefootQOR/XML/SAX/BfXmlEntityResolver.h"
#include "BluefootQOR/XML/SAX/BfXmlLexicalHandler.h"
#include "BluefootQOR/XML/SAX/BfXmlDeclHandler.h"

//------------------------------------------------------------------------------
namespace nsBluefoot
{
	class CXmlDefaultHandlerPrivate;

	//------------------------------------------------------------------------------
	class __QOR_INTERFACE( __BLUEFOOTQOR ) CXmlDefaultHandler : public CXmlContentHandler, public CXmlErrorHandler, public CXmlDTDHandler, public CXmlEntityResolver, public CXmlLexicalHandler, public CXmlDeclHandler
	{
	public:

		CXmlDefaultHandler() { }
		virtual ~CXmlDefaultHandler() { }

		//CXmlContentHandler
		void setDocumentLocator( CXmlLocator* locator );
		bool startDocument();
		bool endDocument();
		bool startPrefixMapping( const nsCodeQOR::CUCS2String& prefix, const nsCodeQOR::CUCS2String& uri );
		bool endPrefixMapping( const nsCodeQOR::CUCS2String& prefix );
		bool startElement( const nsCodeQOR::CUCS2String& namespaceURI, const nsCodeQOR::CUCS2String& localName, const nsCodeQOR::CUCS2String& qName, const CXmlAttributes& atts );
		bool endElement( const nsCodeQOR::CUCS2String& namespaceURI, const nsCodeQOR::CUCS2String& localName, const nsCodeQOR::CUCS2String& qName );
		bool characters( const nsCodeQOR::CUCS2String& ch );
		bool ignorableWhitespace( const nsCodeQOR::CUCS2String& ch );
		bool processingInstruction( const nsCodeQOR::CUCS2String& target, const nsCodeQOR::CUCS2String& data );
		bool skippedEntity( const nsCodeQOR::CUCS2String& name );

		bool warning( const CXmlParseException& exception );
		bool error( const CXmlParseException& exception );
		bool fatalError( const CXmlParseException& exception );

		//CXmlDTDHandler
		bool notationDecl( const nsCodeQOR::CUCS2String& name, const nsCodeQOR::CUCS2String& publicId, const nsCodeQOR::CUCS2String& systemId );
		bool unparsedEntityDecl( const nsCodeQOR::CUCS2String& name, const nsCodeQOR::CUCS2String& publicId, const nsCodeQOR::CUCS2String& systemId, const nsCodeQOR::CUCS2String& notationName );

		//CXmlEntityResolver
		bool resolveEntity( const nsCodeQOR::CUCS2String& publicId, const nsCodeQOR::CUCS2String& systemId, CXmlInputSource*& ret );

		//CXmlLexicalHandler
		bool startDTD( const nsCodeQOR::CUCS2String& name, const nsCodeQOR::CUCS2String& publicId, const nsCodeQOR::CUCS2String& systemId );
		bool endDTD();
		bool startEntity( const nsCodeQOR::CUCS2String& name );
		bool endEntity( const nsCodeQOR::CUCS2String& name );
		bool startCDATA();
		bool endCDATA();
		bool comment( const nsCodeQOR::CUCS2String& ch );

		//CXmlDeclHandler
		bool attributeDecl( const nsCodeQOR::CUCS2String& eName, const nsCodeQOR::CUCS2String& aName, const nsCodeQOR::CUCS2String& type, const nsCodeQOR::CUCS2String& valueDefault, const nsCodeQOR::CUCS2String& value );
		bool internalEntityDecl( const nsCodeQOR::CUCS2String& name, const nsCodeQOR::CUCS2String& value );
		bool externalEntityDecl( const nsCodeQOR::CUCS2String& name, const nsCodeQOR::CUCS2String& publicId, const nsCodeQOR::CUCS2String& systemId );

		nsCodeQOR::CString errorString() const;

	private:
		
		CXmlDefaultHandlerPrivate* d;
		__QCS_DECLARE_NONCOPYABLE( CXmlDefaultHandler );
	};

}//nsBluefoot

#endif//BLUEFOOT_XML_SAX_DEFAULTHANDLER_H_3
