//BfSource.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef BLUEFOOT_SOURCE_H_3
#define BLUEFOOT_SOURCE_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

//Defines an Source for a Bluefoot pipeline

#include "BfElement.h"
#include "BfBuffer.h"

//------------------------------------------------------------------------------
namespace nsBluefoot
{
	class CSink;

	//------------------------------------------------------------------------------
	class __QOR_INTERFACE( __BLUEFOOTQOR ) CBFSource : public CBFElement
	{
	public:

		CBFSource();
		virtual ~CBFSource();
		CBFSource(const CBFSource& src);
		CBFSource& operator = (const CBFSource& src);

		void SetSink( CBFSink* pSink );
		CBFSink* GetSink(void);

		virtual bool Read( unsigned long& ulUnitsRead, unsigned long ulUnitsToRead = 1 ) = 0;

		//------------------------------------------------------------------------------
		virtual void OnReadSuccess( unsigned long ulUnitsRead )
		{
			//Overrride for asynchronous sources
		}

		//------------------------------------------------------------------------------
		virtual bool IsSource( void )
		{
			return true;
		}

		//------------------------------------------------------------------------------
		virtual eFlowMode GetMode(void)
		{
			return m_pParent->GetMode();
		}

	protected:

		CBFSink* m_pSink;
	};

	//--------------------------------------------------------------------------------
	template< class TSource >
	class __QOR_INTERFACE( __BLUEFOOTQOR ) CTBFSourceProxy : public CBFSource
	{
	public:

		//--------------------------------------------------------------------------------
		CTBFSourceProxy( TSource& Source ) : CBFSource()
		, m_Source( Source )
		{
		}

		//--------------------------------------------------------------------------------
		virtual ~CTBFSourceProxy()
		{
		}

		//--------------------------------------------------------------------------------
		CTBFSourceProxy( const CTBFSourceProxy& src ) : CBFSource( src )
		, m_Source( src.m_Source )
		{
		}

		//--------------------------------------------------------------------------------
		CTBFSourceProxy& operator = ( const CTBFSourceProxy& src )
		{
			return *this;
		}

		//--------------------------------------------------------------------------------
		virtual void SetSink( CBFSink* pSink )
		{
			m_pSink = pSink;
		}

		//--------------------------------------------------------------------------------
		virtual CBFSink* GetSink( void )
		{
			return m_pSink;
		}

		//--------------------------------------------------------------------------------
		virtual bool Read( unsigned long& ulUnitsRead, unsigned long ulUnitsToRead = 1 )		
		{
			return m_Source.Read( ulUnitsRead, ulUnitsToRead );
		}

		//--------------------------------------------------------------------------------
		virtual CBFBuffer* GetBuffer( void )
		{
			return m_Source.GetSourceBuffer();
		}

	private:

		TSource& m_Source;

	};

	class __QOR_INTERFACE( __BLUEFOOTQOR ) CBFPlug;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __BLUEFOOTQOR ) CNULLSource : public CBFSource
	{
	public:

		//--------------------------------------------------------------------------------
		CNULLSource( CBFPlug* pAny = 0 ) : CBFSource()
		{
		}

		//--------------------------------------------------------------------------------
		virtual ~CNULLSource()
		{
		}

		//--------------------------------------------------------------------------------
		virtual bool Read( unsigned long& ulUnitsRead, unsigned long ulUnitsToRead = 1 )
		{
			ulUnitsRead = 0;
			return true;
		}

		//--------------------------------------------------------------------------------
		virtual bool IsAtEnd( void )
		{
			return true;
		}
	};

}//nsBluefoot

#endif//BLUEFOOT_SOURCE_H_3
