//BfProtocol.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef BLUEFOOT_PROTOCOL_H_3
#define BLUEFOOT_PROTOCOL_H_3

//Defines a protocol

#include "CodeQOR/DataTypes/GUID.h"
#include "CodeQOR/Macros/ClassIdentityMacros.h"
#include "CodeQOR/DataStructures/TLRef.h"
#include "BfPipeline.h"

//------------------------------------------------------------------------------
namespace nsBluefoot
{
	
	//------------------------------------------------------------------------------
	class __QOR_INTERFACE( __BLUEFOOTQOR ) CBFProtocol
	{
	public:

		typedef nsCodeQOR::CTLRef< CBFProtocol > refType;

		//--------------------------------------------------------------------------------
		enum eState
		{
			Stopped,
			Reading,
			Writing
		};

		__QOR_DECLARE_OCLASS_ID( CBFProtocol );

		CBFProtocol();
		virtual ~CBFProtocol();
		CBFProtocol(const CBFProtocol& src);
		CBFProtocol& operator = (const CBFProtocol& src);

		void SetOutPipe( CBFPipeline* pOutPipe );
		CBFPipeline* GetOutPipe( void );
		void SetInPipe( CBFPipeline* pInPipe );
		CBFPipeline* GetInPipe( void );

		virtual void Run( void );								//crank the state machine until there's no data or its in the Stopped state.
		virtual bool OnProtocolStateChange( void );				//single step the state machine

		virtual void GetNextReadCount( void );
		virtual void GetNextWriteCount( void );

		virtual void OnConnectionError( void );
		virtual void OnConnected( void );
		virtual void OnDisconnectionError( void );
		virtual void OnDisconnected( void );
		virtual void OnReadSuccess( unsigned long ulUnitsRead );
		virtual void OnReadError( void );
		virtual void OnWriteSuccess( void );
		virtual void OnWriteError( void );
		virtual bool Read( void );
		virtual bool Write( void );

		//For the use a protocol as a sink/source via CProtocolSink, CProtocolSource below
		virtual bool OnRead( unsigned long& ulUnitsWritten, unsigned long ulUnitsToWrite = 1 ){ return false; }
		virtual bool OnWrite( unsigned long& ulUnitsRead, unsigned long ulUnitsToRead = 1 ){ return false; }

		refType Ref( void )
		{
			return refType( this );
		}

	protected:

		eState m_eState;
		eState m_eNextState;
		unsigned long m_ulDataSize;		
		CBFPipeline* m_pInPipe;
		CBFPipeline* m_pOutPipe;
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __BLUEFOOTQOR ) CProtocolSink : public CBFSink
	{
	public:

		//--------------------------------------------------------------------------------
		CProtocolSink( CBFProtocol* pProtocol ) : CBFSink()
		,	m_pProtocol( pProtocol )
		{
		}

		//--------------------------------------------------------------------------------
		virtual ~CProtocolSink()
		{
		}

		//--------------------------------------------------------------------------------
		virtual bool Write( unsigned long& ulUnitsWritten, unsigned long ulUnitsToWrite = 1 )
		{
			return m_pProtocol->OnWrite( ulUnitsWritten, ulUnitsToWrite );
		}

		//--------------------------------------------------------------------------------
		virtual bool Flush( void )
		{
			return false;//m_pProtocol->FlushInPipe();
		}

	protected:

		CBFProtocol* m_pProtocol;
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __BLUEFOOTQOR ) CProtocolSource : public CBFSource
	{
	public:

		//--------------------------------------------------------------------------------
		CProtocolSource( CBFProtocol* pProtocol ) : CBFSource()
		,	m_pProtocol( pProtocol )
		{
		}

		//--------------------------------------------------------------------------------
		virtual ~CProtocolSource()
		{
		}

		//--------------------------------------------------------------------------------
		virtual bool Read( unsigned long& ulUnitsRead, unsigned long ulUnitsToRead = 1 )
		{
			return m_pProtocol->OnRead( ulUnitsToRead, ulUnitsRead );
		}

		//--------------------------------------------------------------------------------
		virtual bool Flush( void )
		{
			return false;//m_pProtocol->FlushInPipe();
		}

	protected:

		CBFProtocol* m_pProtocol;
	};

}//nsBluefoot

#endif//BLUEFOOT_PROTOCOL_H_3
