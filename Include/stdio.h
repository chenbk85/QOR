//stdio.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_STDIO_H_3
#define QOR_STDIO_H_3

#include <stddef.h>
#include <stdarg.h>
#include "SystemQOR.h"
#include QOR_SYS_PLATFORMTYPES(stdio)

typedef nsPlatform::locale_t locale_t;
typedef nsPlatform::wint_t wint_t;
typedef nsPlatform::_finddatai64_t __finddatai64_t;
typedef nsPlatform::__finddata64_t __finddata64_t;
typedef nsPlatform::_finddata_t _finddata_t;
typedef nsPlatform::sstat _sstat;
typedef nsPlatform::sstat64 __sstat64;
typedef nsPlatform::sstati64 _sstati64;
typedef nsPlatform::FILE FILE;
typedef nsPlatform::fpos_t fpos_t;
typedef nsPlatform::off_t off_t;
#if (!__QCMP_FEATURE_PREDEFINESSIZE_T)
	typedef nsPlatform::size_t size_t;
#endif
typedef nsPlatform::ssize_t ssize_t;
typedef nsPlatform::va_list va_list;
typedef nsPlatform::errno_t errno_t;
typedef nsPlatform::intptr_t intptr_t;
typedef nsPlatform::uintptr_t uintptr_t;

#define BUFSIZ				( nsPlatform::sc_BufferSize )				//Size of <stdio.h> buffers.
#define L_ctermid			( nsPlatform::sc_MaxLength_ctermid )		//[CX]  Maximum size of character array to hold ctermid() output.
#define L_tmpnam			( nsPlatform::sc_MaxLength_tmpnam )			//Maximum size of character array to hold tmpnam() output.
#define _IOFBF				( nsPlatform::sc_IOFullyBuffered )			//Input/output fully buffered.
#define _IOLBF				( nsPlatform::sc_IOLineBuffered)			//Input/output line buffered.
#define _IONBF				( nsPlatform::sc_IOUnbuffered )				//Input/output unbuffered.

#define SEEK_CUR			( nsPlatform::sc_Seek_Cur )					//Seek relative to current position.
#define SEEK_END			( nsPlatform::sc_Seek_End )					//Seek relative to end-of-file.
#define SEEK_SET			( nsPlatform::sc_Seek_Set )					//Seek relative to start-of-file.


#define FILENAME_MAX		( nsPlatform::sc_MaxLength_Filename )		//Maximum size in bytes of the longest filename string that the implementation guarantees can be opened.
#define	FOPEN_MAX			( nsPlatform::sc_MaxNumber_Streams )		//Number of streams which the implementation guarantees can be open simultaneously. The value is at least eight.

//Minimum number of unique filenames generated by tmpnam(). Maximum number of times an application can call tmpnam() reliably.
//The value of {TMP_MAX} is at least 25. [XSI] On XSI-conformant systems, the value of {TMP_MAX} is at least 10000.
#define TMP_MAX				( nsPlatform::sc_MaxNumber_UniqueTempNames )
#define EOF					( nsPlatform::sc_EndOfFile )				//The following macro name shall be defined as a negative integer constant expression:End-of-file return value.
#define P_tmpdir			( nsPlatform::sc_TempDirPrefix )			//The following macro name shall be defined as a string constant: [XSI]  Default directory prefix for tempnam().

//The following shall be defined as expressions of type "pointer to FILE" that point to
//the FILE objects associated, respectively, with the standard error, input, and output streams:
#define stderr				( _stderr() )								//Standard error output stream.
#define stdin				( _stdin() )								//Standard input stream.
#define stdout				( _stdout() )								//Standard output stream

//The following shall be declared as functions and may also be defined as macros. Function prototypes shall be provided.

__QCMP_STARTLINKAGE_C

    __QOR_INTERFACE( __CQOR ) FILE* _stdin( void );
    __QOR_INTERFACE( __CQOR ) FILE* _stdout( void );
    __QOR_INTERFACE( __CQOR ) FILE* _stderr( void );
	__QOR_INTERFACE( __CQOR ) void clearerr( FILE* stream );
    __QOR_INTERFACE( __CQOR ) errno_t clearerr_s( FILE* stream );
    __QOR_INTERFACE( __CQOR ) char* ctermid( char* );
	__QOR_INTERFACE( __CQOR ) int dprintf(int, const char *__QCMP_RESTRICT, ...);
    __QOR_INTERFACE( __CQOR ) int fclose( FILE* stream );
    __QOR_INTERFACE( __CQOR ) FILE* fdopen( int, const char* );
    __QOR_INTERFACE( __CQOR ) int feof( FILE* stream );
    __QOR_INTERFACE( __CQOR ) int ferror( FILE* stream );
    __QOR_INTERFACE( __CQOR ) int fflush( FILE* stream );
    __QOR_INTERFACE( __CQOR ) int fgetc( FILE* stream );
    __QOR_INTERFACE( __CQOR ) int fgetpos( FILE* __QCMP_RESTRICT stream, fpos_t* __QCMP_RESTRICT pos );
    __QOR_INTERFACE( __CQOR ) char* fgets( char* __QCMP_RESTRICT s, int n, FILE* __QCMP_RESTRICT stream );
    __QOR_INTERFACE( __CQOR ) int fileno( FILE* );
    __QOR_INTERFACE( __CQOR ) void flockfile( FILE* );
	__QOR_INTERFACE( __CQOR ) FILE* fmemopen( void * __QCMP_RESTRICT, size_t, const char * __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) FILE* fopen( const char* __QCMP_RESTRICT filename, const char* __QCMP_RESTRICT mode );
    __QOR_INTERFACE( __CQOR ) errno_t fopen_s( FILE** ppFile, const char* szFilename, const char* szMode );
    __QOR_INTERFACE( __CQOR ) int fprintf( FILE* __QCMP_RESTRICT stream, const char* __QCMP_RESTRICT format, ... );
    __QOR_INTERFACE( __CQOR ) int fprintf_s( FILE* stream, const char* format, ... );
    __QOR_INTERFACE( __CQOR ) int fputc( int c, FILE* stream );
    __QOR_INTERFACE( __CQOR ) int fputs( const char* __QCMP_RESTRICT s, FILE* __QCMP_RESTRICT stream );
    __QOR_INTERFACE( __CQOR ) size_t fread( void* __QCMP_RESTRICT ptr, size_t size, size_t nmemb, FILE* __QCMP_RESTRICT stream );
    __QOR_INTERFACE( __CQOR ) size_t fread_s( void* ptr, size_t DstSize, size_t ElementSize, size_t Count, FILE* pFile );
    __QOR_INTERFACE( __CQOR ) FILE* freopen( const char* __QCMP_RESTRICT filename, const char* __QCMP_RESTRICT mode, FILE* __QCMP_RESTRICT stream );
    __QOR_INTERFACE( __CQOR ) errno_t freopen_s( FILE** ppFile, const char* szFilename, const char* szMode, FILE* pOldFile );
    __QOR_INTERFACE( __CQOR ) int fscanf( FILE* __QCMP_RESTRICT stream, const char* __QCMP_RESTRICT format, ... );
    __QOR_INTERFACE( __CQOR ) int fscanf_s( FILE* pFile, const char* format, ... );
    __QOR_INTERFACE( __CQOR ) int fseek( FILE* stream, long int offset, int whence );
    __QOR_INTERFACE( __CQOR ) int fseeko( FILE*, off_t, int );
    __QOR_INTERFACE( __CQOR ) int fsetpos( FILE* stream, const fpos_t* pos );
    __QOR_INTERFACE( __CQOR ) long int ftell( FILE* stream );
    __QOR_INTERFACE( __CQOR ) off_t ftello( FILE* );
    __QOR_INTERFACE( __CQOR ) int ftrylockfile( FILE* );
    __QOR_INTERFACE( __CQOR ) void funlockfile( FILE* );
    __QOR_INTERFACE( __CQOR ) size_t fwrite( const void* __QCMP_RESTRICT ptr, size_t size, size_t nmemb, FILE* __QCMP_RESTRICT stream );
    __QOR_INTERFACE( __CQOR ) int getc( FILE* stream );
    __QOR_INTERFACE( __CQOR ) int getchar( void );
    __QOR_INTERFACE( __CQOR ) int getc_unlocked( FILE* );
    __QOR_INTERFACE( __CQOR ) int getchar_unlocked( void );
	__QOR_INTERFACE( __CQOR ) ssize_t getdelim( char** __QCMP_RESTRICT, size_t* __QCMP_RESTRICT, int, FILE* __QCMP_RESTRICT );
	__QOR_INTERFACE( __CQOR ) ssize_t  getline( char** __QCMP_RESTRICT, size_t* __QCMP_RESTRICT, FILE* __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) char* gets( char* s );
    __QOR_INTERFACE( __CQOR ) char* gets_s( char* s, size_t _Size );
	__QOR_INTERFACE( __CQOR ) FILE* open_memstream( char**, size_t* );
    __QOR_INTERFACE( __CQOR ) int pclose( FILE* );
    __QOR_INTERFACE( __CQOR ) void perror( const char* s );
    __QOR_INTERFACE( __CQOR ) FILE* popen( const char*, const char* );
	__QOR_INTERFACE( __CQOR ) FILE* _popen( const char* command, const char* mode );

    __QOR_INTERFACE( __CQOR ) int printf( const char* __QCMP_RESTRICT format, ... );
    __QOR_INTERFACE( __CQOR ) int printf_s( const char* format, ... );
    __QOR_INTERFACE( __CQOR ) int putc( int c, FILE* stream );
    __QOR_INTERFACE( __CQOR ) int putchar( int c );
    __QOR_INTERFACE( __CQOR ) int putc_unlocked( int, FILE* );
    __QOR_INTERFACE( __CQOR ) int putchar_unlocked( int );
    __QOR_INTERFACE( __CQOR ) int puts( const char* s );
    __QOR_INTERFACE( __CQOR ) int remove( const char* filename );
#ifndef OS_EXPORTS_STDIO_RENAME
    __QOR_INTERFACE( __CQOR ) int rename( const char* old, const char* pnew );
#endif
	__QOR_INTERFACE( __CQOR ) int renameat( int, const char*, int, const char* );
    __QOR_INTERFACE( __CQOR ) void rewind( FILE* stream );
    __QOR_INTERFACE( __CQOR ) int scanf( const char* __QCMP_RESTRICT format, ... );
    __QOR_INTERFACE( __CQOR ) int scanf_s( const char* format, ... );
    __QOR_INTERFACE( __CQOR ) void setbuf( FILE* __QCMP_RESTRICT stream, char* __QCMP_RESTRICT buf );
    __QOR_INTERFACE( __CQOR ) int setvbuf( FILE* __QCMP_RESTRICT stream, char* __QCMP_RESTRICT buf, int mode, size_t size );
    __QOR_INTERFACE( __CQOR ) int snprintf( char* __QCMP_RESTRICT s, size_t n, const char* __QCMP_RESTRICT format, ... );
    __QOR_INTERFACE( __CQOR ) int sprintf( char* __QCMP_RESTRICT s, const char* __QCMP_RESTRICT format, ... );
    __QOR_INTERFACE( __CQOR ) int sprintf_s( char* s, size_t SizeInBytes, const char* format, ... );
    __QOR_INTERFACE( __CQOR ) int sscanf( const char* __QCMP_RESTRICT s, const char* __QCMP_RESTRICT format, ... );
    __QOR_INTERFACE( __CQOR ) int sscanf_s( const char* s, const char* format, ... );
    __QOR_INTERFACE( __CQOR ) char* tempnam( const char*, const char* );
    __QOR_INTERFACE( __CQOR ) FILE* tmpfile( void );
    __QOR_INTERFACE( __CQOR ) errno_t tmpfile_s( FILE** ppFile );
    __QOR_INTERFACE( __CQOR ) char* tmpnam( char* s );
    __QOR_INTERFACE( __CQOR ) errno_t tmpnam_s( char* s, size_t Size );
    __QOR_INTERFACE( __CQOR ) int ungetc( int c, FILE* stream );
    __QOR_INTERFACE( __CQOR ) int vfprintf( FILE* __QCMP_RESTRICT stream, const char* __QCMP_RESTRICT format, va_list arg );
    __QOR_INTERFACE( __CQOR ) int vfprintf_s( FILE* stream, const char* format, va_list arg );
    __QOR_INTERFACE( __CQOR ) int vfscanf( FILE* __QCMP_RESTRICT stream, const char* __QCMP_RESTRICT format, va_list arg );
    __QOR_INTERFACE( __CQOR ) int vprintf( const char* __QCMP_RESTRICT format, va_list arg );
    __QOR_INTERFACE( __CQOR ) int vprintf_s( const char* format, va_list arg );
    __QOR_INTERFACE( __CQOR ) int vscanf( const char* __QCMP_RESTRICT format, va_list arg );
    __QOR_INTERFACE( __CQOR ) int vsnprintf( char* __QCMP_RESTRICT s, size_t n, const char* __QCMP_RESTRICT format, va_list arg );
    __QOR_INTERFACE( __CQOR ) int vsprintf( char* __QCMP_RESTRICT s, const char* __QCMP_RESTRICT format, va_list arg );
    __QOR_INTERFACE( __CQOR ) int vsprintf_s( char* s, size_t SizeInBytes, const char* format, va_list arg );
    __QOR_INTERFACE( __CQOR ) int vsscanf( const char* __QCMP_RESTRICT s, const char* __QCMP_RESTRICT format, va_list arg );

	__QOR_INTERFACE( __CQOR ) int _ungetch( int c  );
	__QOR_INTERFACE( __CQOR ) ::wint_t _ungetwch( wint_t c );
	__QOR_INTERFACE( __CQOR ) int _ungetch_nolock( int c );
	__QOR_INTERFACE( __CQOR ) ::wint_t _ungetwch_nolock( wint_t c );
	__QOR_INTERFACE( __CQOR ) char* _tempnam( const char* dir, const char* prefix );
	__QOR_INTERFACE( __CQOR ) char* _tempnam_dbg( const char* dir, const char* prefix, int blockType, const char* filename, int linenumber );
	__QOR_INTERFACE( __CQOR ) wchar_t* _wtempnam_dbg( const wchar_t* dir, const wchar_t* prefix, int blockType, const char* filename, int linenumber );
	__QOR_INTERFACE( __CQOR ) long _tell( int handle );
	__QOR_INTERFACE( __CQOR ) Cmp__int64 _telli64( int handle );

	__QOR_INTERFACE( __CQOR ) int _sprintf_l( char* buffer, const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _sprintf_p_l( char* buffer, size_t sizeOfBuffer, const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _sprintf_s_l( char* buffer, size_t sizeOfBuffer, const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _sscanf_l( const char* buffer, const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _sscanf_s_l( const char* buffer, const char* format, ::locale_t locale, ... );

	__QOR_INTERFACE( __CQOR ) ::intptr_t _spawnl( int mode, const char* cmdname, const char* arg0, ... );
	__QOR_INTERFACE( __CQOR ) ::intptr_t _spawnle( int mode, const char* cmdname, const char* arg0, ... );
	__QOR_INTERFACE( __CQOR ) ::intptr_t _spawnlp( int mode, const char* cmdname, const char* arg0, ... );
	__QOR_INTERFACE( __CQOR ) ::intptr_t _spawnlpe( int mode, const char* cmdname, const char* arg0, ... );
	__QOR_INTERFACE( __CQOR ) ::intptr_t _spawnv( int mode, const char* cmdname, const char* const* argv );
	__QOR_INTERFACE( __CQOR ) ::intptr_t _spawnve( int mode, const char* cmdname, const char* const* argv, const char* const* envp );
	__QOR_INTERFACE( __CQOR ) ::intptr_t _spawnvp( int mode, const char* cmdname, const char* const* argv );
	__QOR_INTERFACE( __CQOR ) ::intptr_t _spawnvpe( int mode, const char* cmdname, const char* const* argv, const char* const* envp );

	__QOR_INTERFACE( __CQOR ) int _sopen( const char* filename, int oflag, int shflag, int pmode );
	__QOR_INTERFACE( __CQOR ) errno_t _sopen_s( int* pfh, const char* filename, int oflag, int shflag, int pmode );

	__QOR_INTERFACE( __CQOR ) int _snprintf( char* buffer, size_t count, const char* format, ... );

	//_snprintf_c
	//_snprintf_c_l

	__QOR_INTERFACE( __CQOR ) int _snprintf_l( char* buffer, size_t count, const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _snprintf_s( char* buffer, size_t sizeOfBuffer, size_t count, const char* format, ... );
	__QOR_INTERFACE( __CQOR ) int _snprintf_s_l( char* buffer, size_t sizeOfBuffer, size_t count, const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _snscanf( const char* input, size_t length, const char* format, ... );
	__QOR_INTERFACE( __CQOR ) int _snscanf_l( const char* input, size_t length, const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int  _snscanf_s( const char* input, size_t length, const char* format, ... );
	__QOR_INTERFACE( __CQOR ) int  _snscanf_s_l( const char* input, size_t length, const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _snwprintf( wchar_t* buffer, size_t count, const wchar_t* format, ... );
	__QOR_INTERFACE( __CQOR ) int _snwprintf_l( wchar_t* buffer, size_t count, const wchar_t* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _snwprintf_s( wchar_t* buffer, size_t sizeOfBuffer, size_t count, const wchar_t* format, ... );
	__QOR_INTERFACE( __CQOR ) int _snwprintf_s_l( wchar_t* buffer, size_t sizeOfBuffer, size_t count, const wchar_t* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int  _snwscanf( const wchar_t* input, size_t length, const wchar_t* format, ... );
	__QOR_INTERFACE( __CQOR ) int  _snwscanf_l( const wchar_t* input, size_t length, const wchar_t* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int  _snwscanf_s( const wchar_t* input, size_t length, const wchar_t* format, ... );
	__QOR_INTERFACE( __CQOR ) int  _snwscanf_s_l( const wchar_t* input, size_t length, const wchar_t* format, ::locale_t locale, ... );

	__QOR_INTERFACE( __CQOR ) int _setmode( int fd, int mode );
	__QOR_INTERFACE( __CQOR ) int _setmaxstdio( int newmax );
	__QOR_INTERFACE( __CQOR ) unsigned int _set_output_format( unsigned int format );
	__QOR_INTERFACE( __CQOR ) int _scanf_l( const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _scanf_s_l( const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _scprintf( const char* format, ... );
	__QOR_INTERFACE( __CQOR ) int _scprintf_l( const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _scprintf_p_l( const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _scwprintf( const wchar_t* format, ... );
	__QOR_INTERFACE( __CQOR ) int _scwprintf_l( const wchar_t* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _scwprintf_p_l( const wchar_t* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _rmtmp( void );
	__QOR_INTERFACE( __CQOR ) int _rmdir( const char* dirname );

	__QOR_INTERFACE( __CQOR ) int _putws( const wchar_t* str );
	__QOR_INTERFACE( __CQOR ) ::wint_t _putwch( wchar_t c );
	__QOR_INTERFACE( __CQOR ) int _putw( int binint, ::FILE* stream );
	__QOR_INTERFACE( __CQOR ) int _putch( int c );

	__QOR_INTERFACE( __CQOR ) int _printf_l( const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _printf_p( const char* format, ... );
	__QOR_INTERFACE( __CQOR ) int _printf_p_l( const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _printf_s_l( const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _outp( unsigned short port, int databyte );
	__QOR_INTERFACE( __CQOR ) unsigned long _outpd( unsigned short port, unsigned long dataword );
	__QOR_INTERFACE( __CQOR ) unsigned short _outpw( unsigned short port, unsigned short dataword );

	__QOR_INTERFACE( __CQOR ) int _open_osfhandle( intptr_t osfhandle, int flags );
	__QOR_INTERFACE( __CQOR ) int _open( const char* filename, int oflag, int pmode );
	__QOR_INTERFACE( __CQOR ) char* _mktemp( char* szTemplate );
	__QOR_INTERFACE( __CQOR ) errno_t _mktemp_s( char* szTemplate, size_t sizeInChars );
	__QOR_INTERFACE( __CQOR ) long _lseek( int fd, long offset, int origin );
	__QOR_INTERFACE( __CQOR ) Cmp__int64 _lseeki64( int fd, Cmp__int64 offset, int origin );

	__QOR_INTERFACE( __CQOR ) void* _lsearch( const void* key, void* base, unsigned int* num, unsigned int width, int ( *compare )( const void*, const void*) );
	__QOR_INTERFACE( __CQOR ) void* _lsearch_s( const void* key, void* base, unsigned int* num, size_t size, int ( *compare )( void*, const void*, const void* ), void* context );

	__QOR_INTERFACE( __CQOR ) int _locking( int fd, int mode, long nbytes );
	__QOR_INTERFACE( __CQOR ) void  _lock( int locknum );

	__QOR_INTERFACE( __CQOR ) void* _lfind( const void* key, const void* base, unsigned int* num, unsigned int width, int ( *compare )( const void*, const void* ) );
	__QOR_INTERFACE( __CQOR ) void* _lfind_s( const void* key, const void* base, unsigned int* num, size_t size, int ( *compare )( void*, const void*, const void* ), void* context );
	__QOR_INTERFACE( __CQOR ) int _kbhit( void );

	__QOR_INTERFACE( __CQOR ) int _inp( unsigned short port );
	__QOR_INTERFACE( __CQOR ) unsigned short _inpw( unsigned short port );
	__QOR_INTERFACE( __CQOR ) unsigned long _inpd( unsigned short port );

	__QOR_INTERFACE( __CQOR ) int _getw( ::FILE* stream );
	__QOR_INTERFACE( __CQOR ) ::wint_t _getwch( void );
	__QOR_INTERFACE( __CQOR ) ::wint_t _getwche( void );
	__QOR_INTERFACE( __CQOR ) wchar_t* _getws( wchar_t* buffer );
	__QOR_INTERFACE( __CQOR ) int _getmbcp( void );
	__QOR_INTERFACE( __CQOR ) int _getmaxstdio( void );
	__QOR_INTERFACE( __CQOR ) int _getch( void );
	__QOR_INTERFACE( __CQOR ) int _getche( void );
	__QOR_INTERFACE( __CQOR ) char* _getcwd( char* buffer, int maxlen );
	__QOR_INTERFACE( __CQOR ) char* _getdcwd( int drive, char* buffer, int maxlen );
	__QOR_INTERFACE( __CQOR ) unsigned int _get_output_format();
	__QOR_INTERFACE( __CQOR ) intptr_t _get_osfhandle( int fd );
	__QOR_INTERFACE( __CQOR ) errno_t _get_fileinfo( int* pFileInfo);
	__QOR_INTERFACE( __CQOR ) errno_t _get_fmode( int* pmode );
	__QOR_INTERFACE( __CQOR ) int _fwprintf_l( ::FILE* stream, const wchar_t* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _fwprintf_p( ::FILE* stream, const wchar_t* format, ...);
	__QOR_INTERFACE( __CQOR ) int _fwprintf_p_l( ::FILE* stream, const wchar_t* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _fwprintf_s_l( ::FILE* stream, const wchar_t* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _fwscanf_l( ::FILE* stream, const wchar_t* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _fwscanf_s_l( ::FILE* stream, const wchar_t* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _fscanf_l( ::FILE* stream, const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _fscanf_s_l( ::FILE* stream, const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _fseeki64( ::FILE* stream, Cmp__int64 offset, int origin );
	__QOR_INTERFACE( __CQOR ) ::FILE* _fsopen( const char* filename, const char* mode, int shflag );
	__QOR_INTERFACE( __CQOR ) int _fstat( int fd, ::_sstat* buffer );
	__QOR_INTERFACE( __CQOR ) int _fstat64( int fd, ::__sstat64* buffer );
	__QOR_INTERFACE( __CQOR ) int _fstati64( int fd, ::_sstati64* buffer );
	__QOR_INTERFACE( __CQOR ) int _fprintf_l( ::FILE* stream, const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _fprintf_p( ::FILE* stream, const char* format, ...);
	__QOR_INTERFACE( __CQOR ) int _fprintf_p_l( ::FILE* stream, const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _fprintf_s_l( ::FILE* stream, const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _fputchar( int c );
	__QOR_INTERFACE( __CQOR ) ::wint_t _fputwchar( wchar_t c );
	__QOR_INTERFACE( __CQOR ) int _flushall( void );
	__QOR_INTERFACE( __CQOR ) int _findclose( intptr_t handle );
	__QOR_INTERFACE( __CQOR ) ::intptr_t _findfirst( const char* filespec, ::_finddata_t* fileinfo );
	__QOR_INTERFACE( __CQOR ) ::intptr_t _findfirst64( const char* filespec, ::__finddata64_t* fileinfo );
	__QOR_INTERFACE( __CQOR ) ::intptr_t _findfirsti64( const char* filespec, ::__finddatai64_t* fileinfo );
	__QOR_INTERFACE( __CQOR ) int _findnext( intptr_t handle, ::_finddata_t* fileinfo );
	__QOR_INTERFACE( __CQOR ) int _findnext64( intptr_t handle, ::__finddata64_t* fileinfo );
	__QOR_INTERFACE( __CQOR ) int _findnexti64( intptr_t handle, ::__finddatai64_t* fileinfo );

	__QOR_INTERFACE( __CQOR ) ::FILE* _fdopen( int fd, const char* mode );
	__QOR_INTERFACE( __CQOR ) int _fgetchar( void );
	__QOR_INTERFACE( __CQOR ) wint_t _fgetwchar( void );
	__QOR_INTERFACE( __CQOR ) long _filelength( int fd );
	__QOR_INTERFACE( __CQOR ) Cmp__int64 _filelengthi64( int fd );
	__QOR_INTERFACE( __CQOR ) int _fileno( ::FILE* stream );
	__QOR_INTERFACE( __CQOR ) int _fcloseall( void );
	__QOR_INTERFACE( __CQOR ) int _eof( int fd );
	__QOR_INTERFACE( __CQOR ) int _dup( int fd );
	__QOR_INTERFACE( __CQOR ) int _dup2( int fd1, int fd2 );
	__QOR_INTERFACE( __CQOR ) int _cwprintf( const wchar_t* format, ... );
	__QOR_INTERFACE( __CQOR ) int _cwprintf_l( const wchar_t* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _cwprintf_p( const wchar_t* format, ... );
	__QOR_INTERFACE( __CQOR ) int _cwprintf_p_l( const wchar_t* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _cwprintf_s( const wchar_t* format, ... );
	__QOR_INTERFACE( __CQOR ) int _cwprintf_s_l( const wchar_t* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _cwscanf(  const wchar_t* format, ... );
	__QOR_INTERFACE( __CQOR ) int _cwscanf_l( const wchar_t* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _cwscanf_s( const wchar_t* format, ... );
	__QOR_INTERFACE( __CQOR ) int _cwscanf_s_l( const wchar_t* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _cscanf( const char* format, ... );
	__QOR_INTERFACE( __CQOR ) int _cscanf_l( const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _cscanf_s( const char* format, ... );
	__QOR_INTERFACE( __CQOR ) int _cscanf_s_l( const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _cprintf( const char* format, ... );
	__QOR_INTERFACE( __CQOR ) int _cprintf_l( const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _cprintf_p( const char* format, ... );
	__QOR_INTERFACE( __CQOR ) int _cprintf_p_l( const char* format, ::locale_t locale, ...);
	__QOR_INTERFACE( __CQOR ) int _cprintf_s( const char* format, ... );
	__QOR_INTERFACE( __CQOR ) int _cprintf_s_l( const char* format, ::locale_t locale, ...);
	__QOR_INTERFACE( __CQOR ) int _cputs( const char* str );
	__QOR_INTERFACE( __CQOR ) int _cputws( const wchar_t* str );
	__QOR_INTERFACE( __CQOR ) int _creat( const char* filename, int pmode );
	__QOR_INTERFACE( __CQOR ) int _close( int fd );
	__QOR_INTERFACE( __CQOR ) int _commit( int fd );
	__QOR_INTERFACE( __CQOR ) int _chsize( int fd, long size );
	__QOR_INTERFACE( __CQOR ) errno_t _chsize_s( int fd, Cmp__int64 size );
	__QOR_INTERFACE( __CQOR ) int _chmod( const char* filename, int pmode );
	__QOR_INTERFACE( __CQOR ) char* _cgets( char* buffer );
	__QOR_INTERFACE( __CQOR ) wchar_t* _cgetws( wchar_t* buffer );
	__QOR_INTERFACE( __CQOR ) errno_t _cgets_s( char* buffer, size_t numberOfElements, size_t* pSizeRead );
	__QOR_INTERFACE( __CQOR ) errno_t _cgetws_s( wchar_t* buffer, size_t numberOfElements, size_t* pSizeRead );
	__QOR_INTERFACE( __CQOR ) int _access( const char* path, int mode );
	__QOR_INTERFACE( __CQOR ) errno_t _access_s( const char* path, int mode );
	__QOR_INTERFACE( __CQOR ) int __isascii( int c );
	__QOR_INTERFACE( __CQOR ) int __iscsym( int c );
	__QOR_INTERFACE( __CQOR ) int __iscsymf( int c );


	__QOR_INTERFACE( __CQOR ) int sscanf_l( const char* buffer, ::locale_t locale, const char* format, ...); //int _sscanf_l( const char* buffer, const char* format, ::locale_t locale, ... );
	//__QOR_INTERFACE( __CQOR ) vsscanf_l( __s, __l, __f, ...) _sscanf_l( __s, __f, __l, __VA_ARGS__ )
	__QOR_INTERFACE( __CQOR ) int sprintf_l( char* buffer, ::locale_t locale, const char* format, ... );// _sprintf_l( , __f, __l, __VA_ARGS__ )
	__QOR_INTERFACE( __CQOR ) int snprintf_l( char* buffer, size_t count, ::locale_t locale, const char* format, ... );// _snprintf_l( __s, __n, __f, __l, __VA_ARGS__ ) int _snprintf_l( char* buffer, size_t count, const char* format, ::locale_t locale, ... );
	//__QOR_INTERFACE( __CQOR ) vsprintf_l( __s, __l, __f, ... ) _vsprintf_l( __s, __f, __l, __VA_ARGS__ )
	//__QOR_INTERFACE( __CQOR ) vsnprintf_l( __s, __n, __l, __f, ... ) _vsnprintf_l( __s, __n, __f, __l, __VA_ARGS__ )

	__QOR_INTERFACE( __CQOR ) int asprintf_l( char **ret, ::locale_t loc, const char* format, ... );
	__QOR_INTERFACE( __CQOR ) int vasprintf_l( char **ret, ::locale_t loc, const char* format, va_list ap );


	//_commode
	//FILE _iob[_IOB_ENTRIES];
	//extern const unsigned short *_pctype;
	//extern const wctype_t *_pwctype;
	//extern int _fmode;
	//extern int _fileinfo;
	//extern char **_environ;


__QCMP_ENDLINKAGE_C

#endif//QOR_STDIO_H_3
