//mman.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_SYS_MMAN_H_3
#define QOR_SYS_MMAN_H_3

#include "SystemQOR.h"
#include QOR_SYS_PLATFORMSYSTYPES(mman)

//the following symbolic constants for use as protection options:

#define PROT_EXEC				( nsPlatform::ProtectionExecutable )			//Page can be executed. 
#define PROT_NONE				( nsPlatform::ProtectionNone )					//Page cannot be accessed. 
#define PROT_READ				( nsPlatform::ProtectionRead )					//Page can be read. 
#define PROT_WRITE				( nsPlatform::ProtectionWrite )					//Page can be written. 

//the following symbolic constants for use as flag options:

#define MAP_FIXED				( nsPlatform::MapFixed )						//Interpret addr exactly. 
#define MAP_PRIVATE				( nsPlatform::MapPrivate )						//Changes are private. 
#define MAP_SHARED				( nsPlatform::MapShared )						//Share changes. 

//the following symbolic constants for the msync() function:

#define MS_ASYNC				( nsPlatform::MsyncAsync )						//Perform asynchronous writes. 
#define MS_INVALIDATE			( nsPlatform::MsyncInvalidate )					//Invalidate mappings. 
#define MS_SYNC					( nsPlatform::MsyncSync )						//Perform synchronous writes. 
 
//the following symbolic constants for the mlockall() function:

#define MCL_CURRENT				( nsPlatform::MlockallCurrent )					//Lock currently mapped pages. 
#define MCL_FUTURE				( nsPlatform::MlockallFuture )					//Lock pages that become mapped. 

//the symbolic constant MAP_FAILED which shall have type void * and shall be used to indicate a failure from the mmap() function .

#define MAP_FAILED				( nsPlatform::MapFailed )

//symbolic constants for the advice argument to the posix_madvise() function as follows:

#define POSIX_MADV_DONTNEED		( nsPlatform::PosixMapAdviseDontNeed )			//The application expects that it will not access the specified range in the near future. 
#define POSIX_MADV_NORMAL		( nsPlatform::PosixMapAdviseNormal )			//The application has no advice to give on its behavior with respect to the specified range. It is the default characteristic if no advice is given for a range of memory. 
#define POSIX_MADV_RANDOM		( nsPlatform::PosixMapAdviseRandom )			//The application expects to access the specified range in a random order. 
#define POSIX_MADV_SEQUENTIAL	( nsPlatform::PosixMapAdviseSequential )		//The application expects to access the specified range sequentially from lower addresses to higher addresses. 
#define POSIX_MADV_WILLNEED		( nsPlatform::PosixMapAdviseWillNeed )			//The application expects to access the specified range in the near future. 

//the following symbolic constants for use as flags for the posix_typed_mem_open() function:

#define POSIX_TYPED_MEM_ALLOCATE			( nsPlatform::PosixTypedMemAllocate )		//Allocate on mmap(). 
#define POSIX_TYPED_MEM_ALLOCATE_CONTIG		( nsPlatform::PosixTypedMemAllocateContig )	//Allocate contiguously on mmap(). 
#define POSIX_TYPED_MEM_MAP_ALLOCATABLE		( nsPlatform::PosixTypesMemMapAllocatable )	//Map on mmap(), without affecting allocatability. 
 

typedef nsPlatform::posix_typed_mem_info posix_typed_mem_info;
typedef nsPlatform::off_t off_t;
typedef nsPlatform::mode_t mode_t;

__QCMP_STARTLINKAGE_C

    __QOR_INTERFACE( __CQOR ) int mlock( const void*, size_t );
    __QOR_INTERFACE( __CQOR ) int mlockall( int );
    __QOR_INTERFACE( __CQOR ) void* mmap( void*, size_t, int, int, int, ::off_t );
    __QOR_INTERFACE( __CQOR ) int mprotect( void*, size_t, int );
    __QOR_INTERFACE( __CQOR ) int msync( void*, size_t, int );
    __QOR_INTERFACE( __CQOR ) int munlock( const void*, size_t );
    __QOR_INTERFACE( __CQOR ) int munlockall( void );
    __QOR_INTERFACE( __CQOR ) int munmap( void*, size_t );
    __QOR_INTERFACE( __CQOR ) int posix_madvise( void*, size_t, int );
    __QOR_INTERFACE( __CQOR ) int posix_mem_offset( const void* __QCMP_RESTRICT, size_t, ::off_t* __QCMP_RESTRICT, size_t* __QCMP_RESTRICT, int* __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) int posix_typed_mem_get_info( int, ::posix_typed_mem_info* );
    __QOR_INTERFACE( __CQOR ) int posix_typed_mem_open( const char*, int, int );
    __QOR_INTERFACE( __CQOR ) int shm_open( const char*, int, ::mode_t );
    __QOR_INTERFACE( __CQOR ) int shm_unlink( const char* );

__QCMP_ENDLINKAGE_C

#endif //QOR_SYS_MMAN_H_3
