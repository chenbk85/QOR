//resource.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_SYS_RESOURCE_H_3
#define QOR_SYS_RESOURCE_H_3

#include <sys/time.h>
#include "SystemQOR.h"
#include QOR_SYS_PLATFORMSYSTYPES(resource)

//the following symbolic constants as possible values of the which argument of getpriority() and setpriority():

#define PRIO_PROCESS			( nsPlatform::PrioProcess )				//Identifies the who argument as a process ID. 
#define PRIO_PGRP				( nsPlatform::PrioGroup )				//Identifies the who argument as a process group ID. 
#define PRIO_USER				( nsPlatform::PrioUser )				//Identifies the who argument as a user ID. 

typedef nsPlatform::rlim_t rlim_t;

#define RLIM_INFINITY			( nsPlatform::RLimInfinity )			//A value of rlim_t indicating no limit. 
#define RLIM_SAVED_MAX			( nsPlatform::RLimSavedMax )			//A value of type rlim_t indicating an unrepresentable saved hard limit. 
#define RLIM_SAVED_CUR			( nsPlatform::RLimSavedCur )			//A value of type rlim_t indicating an unrepresentable saved soft limit. 

//the following symbolic constants as possible values of the who parameter of getrusage():

#define RUSAGE_SELF				( nsPlatform::RUsageSelf )				//Returns information about the current process. 
#define RUSAGE_CHILDREN			( nsPlatform::RUsageChildren )			//Returns information about children of the current process. 

typedef nsPlatform::rlimit rlimit;
typedef nsPlatform::rusage rusage;
typedef nsPlatform::timeval timeval;
typedef nsPlatform::id_t id_t;

//the following symbolic constants as possible values for the resource argument of getrlimit() and setrlimit():

#define RLIMIT_CORE				( nsPlatform::RLimitCore )			//Limit on size of core file. 
#define RLIMIT_CPU				( nsPlatform::RLimitCPU )			//Limit on CPU time per process. 
#define RLIMIT_DATA				( nsPlatform::RLimitData )			//Limit on data segment size. 
#define RLIMIT_FSIZE			( nsPlatform::RLimitFSize )			//Limit on file size. 
#define RLIMIT_NOFILE			( nsPlatform::RLimitNOFile )		//Limit on number of open files. 
#define RLIMIT_STACK			( nsPlatform::RLimitStack )			//Limit on stack size. 
#define RLIMIT_AS				( nsPlatform::RLimitAddessSpace )	//Limit on address space size. 

__QCMP_STARTLINKAGE_C

    __QOR_INTERFACE( __CQOR ) int getpriority( int, ::id_t );
    __QOR_INTERFACE( __CQOR ) int getrlimit( int, ::rlimit* );
    __QOR_INTERFACE( __CQOR ) int getrusage( int, ::rusage* );
    __QOR_INTERFACE( __CQOR ) int setpriority( int, ::id_t, int );
    __QOR_INTERFACE( __CQOR ) int setrlimit( int, const ::rlimit* );

__QCMP_ENDLINKAGE_C

#endif //QOR_SYS_RESOURCE_H_3
