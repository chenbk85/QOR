//stropts.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef	QOR_STROPTS_H_3
#define QOR_STROPTS_H_3

#include <unistd.h>
#include "SystemQOR.h"
#include QOR_SYS_PLATFORMTYPES(stropts)

typedef nsPlatform::bandinfo bandinfo;
typedef nsPlatform::strpeek strpeek;
typedef nsPlatform::strbuf strbuf;
typedef nsPlatform::strfdinsert strfdinsert;
typedef nsPlatform::strioctl strioctl;
typedef nsPlatform::strrecvfd strrecvfd;
typedef nsPlatform::uid_t uid_t;
typedef nsPlatform::gid_t gid_t;
typedef nsPlatform::t_scalar_t t_scalar_t;
typedef nsPlatform::t_uscalar_t t_uscalar_t;
typedef nsPlatform::str_list str_list;
typedef nsPlatform::str_mlist str_mlist;

//symbolic constants for use as the request argument to ioctl():

#define I_ATMARK				( nsPlatform::IAtMark )				//Is the top message "marked''? 
#define I_CANPUT				( nsPlatform::ICanPut )				//Is a band writable? 
#define I_CKBAND				( nsPlatform::ICKBand )				//See if any messages exist in a band. 
#define I_FDINSERT				( nsPlatform::IFDInsert )			//Send implementation-defined information about another STREAM. 
#define I_FIND					( nsPlatform::IFind )				//Look for a STREAMS module. 
#define I_FLUSH					( nsPlatform::IFlush )				//Flush a STREAM. 
#define I_FLUSHBAND				( nsPlatform::IFlushBand )			//Flush one band of a STREAM. 
#define I_GETBAND				( nsPlatform::IGetBand )			//Get the band of the top message on a STREAM. 
#define I_GETCLTIME				( nsPlatform::IGetClTime )			//Get close time delay. 
#define I_GETSIG				( nsPlatform::IGetSig )				//Retrieve current notification signals. 
#define I_GRDOPT				( nsPlatform::IGrdOpt )				//Get the read mode. 
#define I_GWROPT				( nsPlatform::IGWROpt )				//Get the write mode. 
#define I_LINK					( nsPlatform::ILink )				//Connect two STREAMs. 
#define I_LIST					( nsPlatform::IList )				//Get all the module names on a STREAM. 
#define I_LOOK					( nsPlatform::ILook )				//Get the top module name. 
#define I_NREAD					( nsPlatform::INRead )				//Size the top message. 
#define I_PEEK					( nsPlatform::IPeek )				//Peek at the top message on a STREAM. 
#define I_PLINK					( nsPlatform::IPLink )				//Persistently connect two STREAMs. 
#define I_POP					( nsPlatform::IPop )				//Pop a STREAMS module. 
#define I_PUNLINK				( nsPlatform::IPUnlink )			//Dismantle a persistent STREAMS link. 
#define I_PUSH					( nsPlatform::IPush )				//Push a STREAMS module. 
#define I_RECVFD				( nsPlatform::IRecvFD )				//Get a file descriptor sent via I_SENDFD. 
#define I_SENDFD				( nsPlatform::ISendFD )				//Pass a file descriptor through a STREAMS pipe. 
#define I_SETCLTIME				( nsPlatform::ISetClTime )			//Set close time delay. 
#define I_SETSIG				( nsPlatform::ISetSig )				//Ask for notification signals. 
#define I_SRDOPT				( nsPlatform::ISRDOpt )				//Set the read mode. 
#define I_STR					( nsPlatform::IStr )				//Send a STREAMS ioctl(). 
#define I_SWROPT				( nsPlatform::ISWrOpt )				//Set the write mode. 
#define I_UNLINK				( nsPlatform::IUnlink )				//Disconnect two STREAMs. 

//symbolic constant for use with I_LOOK:
#define FMNAMESZ				( nsPlatform::FMNameSize )			//The minimum size in bytes of the buffer referred to by the arg argument. 

//symbolic constants for use with I_FLUSH:

#define FLUSHR					( nsPlatform::FlushR )				//Flush read queues. 
#define FLUSHRW					( nsPlatform::FlushRW )				//Flush read and write queues. 
#define FLUSHW					( nsPlatform::FlushW )				//Flush write queues. 

//symbolic constants for use with I_SETSIG:

#define S_BANDURG				( nsPlatform::SBandUrg )			//When used in conjunction with S_RDBAND, SIGURG is generated instead of SIGPOLL when a priority message reaches the front of the STREAM head read queue. 
#define S_ERROR					( nsPlatform::SError )				//Notification of an error condition reaches the STREAM head. 
#define S_HANGUP				( nsPlatform::SHangUp )				//Notification of a hangup reaches the STREAM head. 
#define S_HIPRI					( nsPlatform::SHiPri )				//A high-priority message is present on a STREAM head read queue. 
#define S_INPUT					( nsPlatform::SInput )				//A message, other than a high-priority message, has arrived at the head of a STREAM head read queue. 
#define S_MSG					( nsPlatform::SMsg )				//A STREAMS signal message that contains the SIGPOLL signal reaches the front of the STREAM head read queue. 
#define S_OUTPUT				( nsPlatform::SOutput )				//The write queue for normal data (priority band 0) just below the STREAM head is no longer full. This notifies the process that there is room on the queue for sending (or writing) normal data downstream. 
#define S_RDBAND				( nsPlatform::SReadBand )			//A message with a non-zero priority band has arrived at the head of a STREAM head read queue. 
#define S_RDNORM				( nsPlatform::SReadNorm	)			//A normal (priority band set to 0) message has arrived at the head of a STREAM head read queue. 
#define S_WRBAND				( nsPlatform::SWriteBand )			//The write queue for a non-zero priority band just below the STREAM head is no longer full. 
#define S_WRNORM				( nsPlatform::SWriteNorm )			//Equivalent to S_OUTPUT. 

//symbolic constant for use with I_PEEK:

#define RS_HIPRI				( nsPlatform::RSHiPri )				//Only look for high-priority messages. 

//symbolic constants for use with I_SRDOPT:

#define RMSGD					( nsPlatform::RMsgD )				//Message-discard mode. 
#define RMSGN					( nsPlatform::RMsgN )				//Message-non-discard mode. 
#define RNORM					( nsPlatform::RNorm )				//Byte-STREAM mode, the default. 
#define RPROTDAT				( nsPlatform::RProtData )			//Deliver the control part of a message as data when a process issues a read(). 
#define RPROTDIS				( nsPlatform::RProtDis )			//Discard the control part of a message, delivering any data part, when a process issues a read(). 
#define RPROTNORM				( nsPlatform::RProtNorm )			//Fail read() with [EBADMSG] if a message containing a control part is at the front of the STREAM head read queue. 

//symbolic constant for use with I_SWOPT:

#define SNDZERO					( nsPlatform::SendZero )			//Send a zero-length message downstream when a write() of 0 bytes occurs. 

//symbolic constants for use with I_ATMARK:

#define ANYMARK					( nsPlatform::AnyMark )				//Check if the message is marked. 
#define LASTMARK				( nsPlatform::LastMark )			//Check if the message is the last one marked on the queue. 

//symbolic constant for use with I_UNLINK:

#define MUXID_ALL				( nsPlatform::MuxIDAll )			//Unlink all STREAMs linked to the STREAM associated with fildes. 

//symbolic constants for getmsg(), getpmsg(), putmsg(), and putpmsg():

#define MORECTL					( nsPlatform::MoreCtl )				//More control information is left in message. 
#define MOREDATA				( nsPlatform::MoreData )			//More data is left in message. 
#define MSG_ANY					( nsPlatform::MsgAny )				//Receive any message. 
#define MSG_BAND				( nsPlatform::MsgBand )				//Receive message from specified band. 
#define MSG_HIPRI				( nsPlatform::MsgHiPri )			//Send/receive high-priority message. 

__QCMP_STARTLINKAGE_C

	__QOR_INTERFACE( __CQOR ) int fattach( int, const char* );
	__QOR_INTERFACE( __CQOR ) int fdetach( const char* );
	__QOR_INTERFACE( __CQOR ) int getmsg(int, ::strbuf* __QCMP_RESTRICT, ::strbuf* __QCMP_RESTRICT, int* __QCMP_RESTRICT );
	__QOR_INTERFACE( __CQOR ) int getpmsg( int, ::strbuf* __QCMP_RESTRICT, ::strbuf* __QCMP_RESTRICT, int* __QCMP_RESTRICT, int* __QCMP_RESTRICT );
	__QOR_INTERFACE( __CQOR ) int ioctl( int, int, ... );
	__QOR_INTERFACE( __CQOR ) int isastream( int );
	__QOR_INTERFACE( __CQOR ) int putmsg( int, const ::strbuf*, const ::strbuf*, int );
	__QOR_INTERFACE( __CQOR ) int putpmsg( int, const ::strbuf*, const ::strbuf*, int, int );

__QCMP_ENDLINKAGE_C

#endif//QOR_STROPTS_H_3

