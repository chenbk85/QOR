//termios.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef	QOR_TERMIOS_H_3
#define QOR_TERMIOS_H_3

#include "SystemQOR.h"
#include QOR_SYS_PLATFORMTYPES(termios)

typedef nsPlatform::cc_t cc_t;			//Used for terminal special characters. 
typedef nsPlatform::speed_t speed_t;	//Used for terminal baud rates. 
typedef nsPlatform::tcflag_t tcflag_t;	//Used for terminal modes. 

//The above types shall be all unsigned integer types.

typedef nsPlatform::termios termios;

#define NCCS		( nsPlatform::nccs )	//Size of the array c_cc for control characters. 

#define VEOF		4 
#define VEOL		11
#define VERASE		2
#define VINTR		0
#define VKILL		3
#define VMIN		6
#define VQUIT		1
#define VSTART		8
#define VSTOP		9
#define VSUSP		10
#define VTIME		5

//Input Modes

#define BRKINT		( nsPlatform::BrkInt )	//Signal interrupt on break. 
#define ICRNL		( nsPlatform::ICrnl )	//Map CR to NL on input. 
#define IGNBRK		( nsPlatform::IgnBrk )	//Ignore break condition. 
#define IGNCR		( nsPlatform::IgnCR )	//Ignore CR. 
#define IGNPAR		( nsPlatform::IgnPar )	//Ignore characters with parity errors. 
#define INLCR		( nsPlatform::InlCR )	//Map NL to CR on input. 
#define INPCK		( nsPlatform::InPck )	//Enable input parity check. 
#define ISTRIP		( nsPlatform::IStrip )	//Strip character. 
#define IXANY		( nsPlatform::IXAny )	//Enable any character to restart output. 
#define IXOFF		( nsPlatform::IXOff )	//Enable start/stop input control. 
#define IXON		( nsPlatform::IXOn )	//Enable start/stop output control. 
#define PARMRK		( nsPlatform::ParMark )	//Mark parity errors. 

//Output Modes
//the following symbolic constants for use as flags in the c_oflag field. The c_oflag field specifies the system treatment of output.

#define OPOST		( nsPlatform::OPost )	//Post-process output. 
#define ONLCR		( nsPlatform::ONlCr )	//Map NL to CR-NL on output.  
#define OCRNL		( nsPlatform::OCrnl )	//Map CR to NL on output.  
#define ONOCR		( nsPlatform::ONoCR )	//No CR output at column 0.  
#define ONLRET		( nsPlatform::ONLRet )	//NL performs CR function.  
#define OFDEL		( nsPlatform::OfDel )	//Fill is DEL.  
#define OFILL		( nsPlatform::OFill )	//Use fill characters for delay.  
#define NLDLY		( nsPlatform::NLDly )	//Select newline delays: 
#define NL0			( nsPlatform::nl0 )		//Newline type 0. 
#define NL1			( nsPlatform::nl1 )		//Newline type 1. 
 
#define CRDLY		( nsPlatform::CRDly )	//Select carriage-return delays: 
#define CR0			( nsPlatform::CR0 )		//Carriage-return delay type 0. 
#define CR1			( nsPlatform::CR1 )		//Carriage-return delay type 1. 
#define CR2			( nsPlatform::CR2 )		//Carriage-return delay type 2. 
#define CR3			( nsPlatform::CR3 )		//Carriage-return delay type 3. 
 
#define TABDLY		( nsPlatform::TabDly )	//Select horizontal-tab delays: 
#define TAB0		( nsPlatform::Tab0 )	//Horizontal-tab delay type 0. 
#define TAB1		( nsPlatform::Tab1 )	//Horizontal-tab delay type 1. 
#define TAB2		( nsPlatform::Tab2 )	//Horizontal-tab delay type 2. 
#define TAB3		( nsPlatform::Tab3 )	//Expand tabs to spaces. 
 
#define BSDLY		( nsPlatform::BSDly )	//Select backspace delays: 
#define BS0			( nsPlatform::bs0 )		//Backspace-delay type 0. 
#define BS1			( nsPlatform::bs1 )		//Backspace-delay type 1. 
 
#define VTDLY		( nsPlatform::VTDly )	//Select vertical-tab delays: 
#define VT0			( nsPlatform::vt0 )		//Vertical-tab delay type 0. 
#define VT1			( nsPlatform::vt1 )		//Vertical-tab delay type 1. 
 
#define FFDLY		( nsPlatform::FFDly )	//Select form-feed delays: 
#define FF0			( nsPlatform::ff0 )		//Form-feed delay type 0. 
#define FF1			( nsPlatform::ff1 )		//Form-feed delay type 1. 
 
//Baud Rate Selection
//The <termios.h> header shall define the following symbolic constants for use as values of objects of type speed_t.
//The input and output baud rates are stored in the termios structure. These are the valid values for objects of type speed_t. Not all baud rates need be supported by the underlying hardware.

#define B0			( nsPlatform::b0 )		//Hang up 
#define B50			( nsPlatform::b50 )		//50 baud 
#define B75			( nsPlatform::b75 )		//75 baud 
#define B110		( nsPlatform::b110 )	//110 baud 
#define B134		( nsPlatform::b134 )	//134.5 baud 
#define B150		( nsPlatform::b150 )	//150 baud 
#define B200		( nsPlatform::b200 )	//200 baud 
#define B300		( nsPlatform::b300 )	//300 baud 
#define B600		( nsPlatform::b600 )	//600 baud 
#define B1200		( nsPlatform::b1200 )	//1200 baud 
#define B1800		( nsPlatform::b1800 )	//1800 baud 
#define B2400		( nsPlatform::b2400 )	//2400 baud 
#define B4800		( nsPlatform::b4800 )	//4800 baud 
#define B9600		( nsPlatform::b9600 )	//9600 baud 
#define B19200		( nsPlatform::b19200 )	//19200 baud 
#define B38400		( nsPlatform::b38400 )	//38400 baud 

//Control Modes
//the following symbolic constants for use as flags in the c_cflag field. The c_cflag field describes the hardware control of the terminal; not all values specified are required to be supported by the underlying hardware.

#define CSIZE		( nsPlatform::CSize )	//Character size: 
#define CS5			( nsPlatform::Cs5 )		//5 bits 
#define CS6			( nsPlatform::Cs6 )		//6 bits 
#define CS7			( nsPlatform::Cs7 )		//7 bits 
#define CS8			( nsPlatform::Cs8 )		//8 bits 
#define CSTOPB		( nsPlatform::CStopB )	//Send two stop bits, else one. 
#define CREAD		( nsPlatform::CRead )	//Enable receiver. 
#define PARENB		( nsPlatform::ParenB )	//Parity enable. 
#define PARODD		( nsPlatform::ParOdd )	//Odd parity, else even. 
#define HUPCL		( nsPlatform::HUpCl )	//Hang up on last close. 
#define CLOCAL		( nsPlatform::CLocal )	//Ignore modem status lines. 

//Local Modes
//the following symbolic constants for use as flags in the c_lflag field. The c_lflag field of the argument structure is used to control various terminal functions.

#define ECHO		( nsPlatform::Echo )	//Enable echo. 
#define ECHOE		( nsPlatform::EchoE )	//Echo erase character as error-correcting backspace. 
#define ECHOK		( nsPlatform::EchoK )	//Echo KILL. 
#define ECHONL		( nsPlatform::EchoNL )	//Echo NL. 
#define ICANON		( nsPlatform::ICanon )	//Canonical input (erase and kill processing). 
#define IEXTEN		( nsPlatform::IExten )	//Enable extended input character processing. 
#define ISIG		( nsPlatform::ISig )	//Enable signals. 
#define NOFLSH		( nsPlatform::NoFlush )	//Disable flush after interrupt or quit. 
#define TOSTOP		( nsPlatform::ToStop )	//Send SIGTTOU for background output. 

//Attribute Selection
//the following symbolic constants for use with tcsetattr():

#define TCSANOW		( nsPlatform::TCSANow )		//Change attributes immediately. 
#define TCSADRAIN	( nsPlatform::TCSADrain )	//Change attributes when output has drained. 
#define TCSAFLUSH	( nsPlatform::TCSAFlush )	//Change attributes when output has drained; also flush pending input. 

//Line Control
//the following symbolic constants for use with tcflush():

#define TCIFLUSH	( nsPlatform::TCIFlush )	//Flush pending input. 
#define TCIOFLUSH	( nsPlatform::TCIOFlush )	//Flush both pending input and untransmitted output. 
#define TCOFLUSH	( nsPlatform::TCOFlush )	//Flush untransmitted output. 

//the following symbolic constants for use with tcflow():

#define TCIOFF		( nsPlatform::TCIOff )		//Transmit a STOP character, intended to suspend input data. 
#define TCION		( nsPlatform::TCIOn )		//Transmit a START character, intended to restart input data. 
#define TCOOFF		( nsPlatform::TCOOff )		//Suspend output. 
#define TCOON		( nsPlatform::TCOOn )		//Restart output. 

typedef nsPlatform::pid_t pid_t;
typedef nsPlatform::speed_t speed_t;
typedef nsPlatform::termios termios;

__QCMP_STARTLINKAGE_C

	__QOR_INTERFACE( __CQOR ) ::speed_t cfgetispeed( const ::termios* );
	__QOR_INTERFACE( __CQOR ) ::speed_t cfgetospeed( const ::termios* );
	__QOR_INTERFACE( __CQOR ) int     cfsetispeed( ::termios*, ::speed_t );
	__QOR_INTERFACE( __CQOR ) int     cfsetospeed( ::termios*, ::speed_t );
	__QOR_INTERFACE( __CQOR ) int     tcdrain( int );
	__QOR_INTERFACE( __CQOR ) int     tcflow( int, int );
	__QOR_INTERFACE( __CQOR ) int     tcflush( int, int );
	__QOR_INTERFACE( __CQOR ) int     tcgetattr( int, ::termios* );
	__QOR_INTERFACE( __CQOR ) ::pid_t  tcgetsid( int );
	__QOR_INTERFACE( __CQOR ) int     tcsendbreak( int, int );
	__QOR_INTERFACE( __CQOR ) int     tcsetattr( int, int, const ::termios* );

__QCMP_ENDLINKAGE_C

#endif//QOR_TERMIOS_H_3
