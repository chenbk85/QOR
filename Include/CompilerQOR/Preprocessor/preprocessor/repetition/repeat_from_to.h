//repeat_from_to.h

# /* Copyright (C) 2001
#  * Housemarque Oy
#  * http://www.housemarque.com
#  *
#  * Distributed under the Boost Software License, Version 1.0. (See
#  * accompanying file LICENSE_1_0.txt or copy at
#  * http://www.boost.org/LICENSE_1_0.txt)
#  */
#
# /* Revised by Paul Mensonides (2002) */

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PREPROCESSOR_REPETITION_REPEAT_FROM_TO_H_1
#define QOR_PREPROCESSOR_REPETITION_REPEAT_FROM_TO_H_1

#include "../arithmetic/add.h"
#include "../arithmetic/sub.h"
#include "../cat.h"
#include "../config/config.h"
#include "../control/while.h"
#include "../debug/error.h"
#include "../detail/auto_rec.h"
#include "../repetition/repeat.h"
#include "../tuple/elem.h"
#include "../tuple/rem.h"

//QOR_PP_REPEAT_FROM_TO(first, last, macro, data)

#define QOR_PP_REPEAT_FROM_TO					QOR_PP_CAT( QOR_PP_REPEAT_FROM_TO_, QOR_PP_AUTO_REC( QOR_PP_REPEAT_P, 4 ) )

#define QOR_PP_REPEAT_FROM_TO_1( f, l, m, dt )	QOR_PP_REPEAT_FROM_TO_D_1( QOR_PP_AUTO_REC( QOR_PP_WHILE_P, 256 ), f, l, m, dt )
#define QOR_PP_REPEAT_FROM_TO_2( f, l, m, dt )	QOR_PP_REPEAT_FROM_TO_D_2( QOR_PP_AUTO_REC( QOR_PP_WHILE_P, 256 ), f, l, m, dt )
#define QOR_PP_REPEAT_FROM_TO_3( f, l, m, dt )	QOR_PP_REPEAT_FROM_TO_D_3( QOR_PP_AUTO_REC( QOR_PP_WHILE_P, 256 ), f, l, m, dt )
#define QOR_PP_REPEAT_FROM_TO_4( f, l, m, dt )	QOR_PP_ERROR( 0x0003 )

#define QOR_PP_REPEAT_FROM_TO_1ST				QOR_PP_REPEAT_FROM_TO_1
#define QOR_PP_REPEAT_FROM_TO_2ND				QOR_PP_REPEAT_FROM_TO_2
#define QOR_PP_REPEAT_FROM_TO_3RD				QOR_PP_REPEAT_FROM_TO_3

//QOR_PP_REPEAT_FROM_TO_D(d, first, last, macro, data)

#define QOR_PP_REPEAT_FROM_TO_D						QOR_PP_CAT( QOR_PP_REPEAT_FROM_TO_D_, QOR_PP_AUTO_REC( QOR_PP_REPEAT_P, 4 ) )

#if		~QOR_PP_CONFIG_FLAGS() & QOR_PP_CONFIG_EDG()
#		define QOR_PP_REPEAT_FROM_TO_D_1( d, f, l, m, dt )		QOR_PP_REPEAT_1( QOR_PP_SUB_D( d, l, f ), QOR_PP_REPEAT_FROM_TO_M_1, ( d, f, m, dt ) )
#		define QOR_PP_REPEAT_FROM_TO_D_2( d, f, l, m, dt )		QOR_PP_REPEAT_2( QOR_PP_SUB_D( d, l, f ), QOR_PP_REPEAT_FROM_TO_M_2, ( d, f, m, dt ) )
#		define QOR_PP_REPEAT_FROM_TO_D_3( d, f, l, m, dt )		QOR_PP_REPEAT_3( QOR_PP_SUB_D( d, l, f ), QOR_PP_REPEAT_FROM_TO_M_3, ( d, f, m, dt ) )
#else//EDG
#		define QOR_PP_REPEAT_FROM_TO_D_1( d, f, l, m, dt )		QOR_PP_REPEAT_FROM_TO_D_1_I( d, f, l, m, dt )
#		define QOR_PP_REPEAT_FROM_TO_D_2( d, f, l, m, dt )		QOR_PP_REPEAT_FROM_TO_D_2_I( d, f, l, m, dt )
#		define QOR_PP_REPEAT_FROM_TO_D_3( d, f, l, m, dt )		QOR_PP_REPEAT_FROM_TO_D_3_I( d, f, l, m, dt )
#		define QOR_PP_REPEAT_FROM_TO_D_1_I( d, f, l, m, dt )	QOR_PP_REPEAT_1( QOR_PP_SUB_D( d, l, f ), QOR_PP_REPEAT_FROM_TO_M_1, ( d, f, m, dt ) )
#		define QOR_PP_REPEAT_FROM_TO_D_2_I( d, f, l, m, dt )	QOR_PP_REPEAT_2( QOR_PP_SUB_D( d, l, f ), QOR_PP_REPEAT_FROM_TO_M_2, ( d, f, m, dt ) )
#		define QOR_PP_REPEAT_FROM_TO_D_3_I( d, f, l, m, dt )	QOR_PP_REPEAT_3( QOR_PP_SUB_D( d, l, f ), QOR_PP_REPEAT_FROM_TO_M_3, ( d, f, m, dt ) )
#endif

#if QOR_PP_CONFIG_FLAGS() & QOR_PP_CONFIG_STRICT()
#   define QOR_PP_REPEAT_FROM_TO_M_1( z, n, dfmd )	QOR_PP_REPEAT_FROM_TO_M_1_IM( z, n, QOR_PP_TUPLE_REM_4 dfmd )
#   define QOR_PP_REPEAT_FROM_TO_M_2( z, n, dfmd )	QOR_PP_REPEAT_FROM_TO_M_2_IM( z, n, QOR_PP_TUPLE_REM_4 dfmd )
#   define QOR_PP_REPEAT_FROM_TO_M_3( z, n, dfmd )	QOR_PP_REPEAT_FROM_TO_M_3_IM( z, n, QOR_PP_TUPLE_REM_4 dfmd )
#   define QOR_PP_REPEAT_FROM_TO_M_1_IM( z, n, im )	QOR_PP_REPEAT_FROM_TO_M_1_I( z, n, im )
#   define QOR_PP_REPEAT_FROM_TO_M_2_IM( z, n, im )	QOR_PP_REPEAT_FROM_TO_M_2_I( z, n, im )
#   define QOR_PP_REPEAT_FROM_TO_M_3_IM( z, n, im )	QOR_PP_REPEAT_FROM_TO_M_3_I( z, n, im )
#else
#   define QOR_PP_REPEAT_FROM_TO_M_1( z, n, dfmd )	QOR_PP_REPEAT_FROM_TO_M_1_I( z, n, QOR_PP_TUPLE_ELEM( 4, 0, dfmd ), QOR_PP_TUPLE_ELEM( 4, 1, dfmd ), QOR_PP_TUPLE_ELEM( 4, 2, dfmd ), QOR_PP_TUPLE_ELEM( 4, 3, dfmd ) )
#   define QOR_PP_REPEAT_FROM_TO_M_2( z, n, dfmd )	QOR_PP_REPEAT_FROM_TO_M_2_I( z, n, QOR_PP_TUPLE_ELEM( 4, 0, dfmd ), QOR_PP_TUPLE_ELEM( 4, 1, dfmd ), QOR_PP_TUPLE_ELEM( 4, 2, dfmd ), QOR_PP_TUPLE_ELEM( 4, 3, dfmd ) )
#   define QOR_PP_REPEAT_FROM_TO_M_3( z, n, dfmd )	QOR_PP_REPEAT_FROM_TO_M_3_I( z, n, QOR_PP_TUPLE_ELEM( 4, 0, dfmd ), QOR_PP_TUPLE_ELEM( 4, 1, dfmd ), QOR_PP_TUPLE_ELEM( 4, 2, dfmd ), QOR_PP_TUPLE_ELEM( 4, 3, dfmd ) )
#endif

#define QOR_PP_REPEAT_FROM_TO_M_1_I( z, n, d, f, m, dt )	QOR_PP_REPEAT_FROM_TO_M_1_II( z, QOR_PP_ADD_D( d, n, f ), m, dt )
#define QOR_PP_REPEAT_FROM_TO_M_2_I( z, n, d, f, m, dt )	QOR_PP_REPEAT_FROM_TO_M_2_II( z, QOR_PP_ADD_D( d, n, f ), m, dt )
#define QOR_PP_REPEAT_FROM_TO_M_3_I( z, n, d, f, m, dt )	QOR_PP_REPEAT_FROM_TO_M_3_II( z, QOR_PP_ADD_D( d, n, f ), m, dt )

#define QOR_PP_REPEAT_FROM_TO_M_1_II( z, n, m, dt ) m( z, n, dt )
#define QOR_PP_REPEAT_FROM_TO_M_2_II( z, n, m, dt ) m( z, n, dt )
#define QOR_PP_REPEAT_FROM_TO_M_3_II( z, n, m, dt ) m( z, n, dt )

#endif//QOR_PREPROCESSOR_REPETITION_REPEAT_FROM_TO_H_1
