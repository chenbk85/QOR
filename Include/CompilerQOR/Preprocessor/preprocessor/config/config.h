//config.h

# /* **************************************************************************
#  *                                                                          *
#  *     (C) Copyright Paul Mensonides 2002-2011.                             *
#  *     (C) Copyright Edward Diener 2011.                                    *
#  *     Distributed under the Boost Software License, Version 1.0. (See      *
#  *     accompanying file LICENSE_1_0.txt or copy at                         *
#  *     http://www.boost.org/LICENSE_1_0.txt)                                *
#  *                                                                          *
#  ************************************************************************** */

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PREPROCESSOR_CONFIG_CONFIG_H_1
#define QOR_PREPROCESSOR_CONFIG_CONFIG_H_1

//QOR_PP_CONFIG_FLAGS

#define QOR_PP_CONFIG_STRICT()		0x0001
#define QOR_PP_CONFIG_IDEAL()		0x0002
#define QOR_PP_CONFIG_MSVC()		0x0004
#define QOR_PP_CONFIG_MWCC()		0x0008
#define QOR_PP_CONFIG_BCC()			0x0010
#define QOR_PP_CONFIG_EDG()			0x0020
#define QOR_PP_CONFIG_DMC()			0x0040

#ifndef QOR_PP_CONFIG_FLAGS
#   if defined(__GCCXML__)
#       define QOR_PP_CONFIG_FLAGS() (QOR_PP_CONFIG_STRICT())
#   elif defined(__WAVE__)
#       define QOR_PP_CONFIG_FLAGS() (QOR_PP_CONFIG_STRICT())
#   elif defined(__MWERKS__) && __MWERKS__ >= 0x3200
#       define QOR_PP_CONFIG_FLAGS() (QOR_PP_CONFIG_STRICT())
#   elif defined(__EDG__) || defined(__EDG_VERSION__)
#       if defined(_MSC_VER) && __EDG_VERSION__ >= 308
#           define QOR_PP_CONFIG_FLAGS() (QOR_PP_CONFIG_MSVC())
#       else
#           define QOR_PP_CONFIG_FLAGS() (QOR_PP_CONFIG_EDG() | QOR_PP_CONFIG_STRICT())
#       endif
#   elif defined(__MWERKS__)
#       define QOR_PP_CONFIG_FLAGS() (QOR_PP_CONFIG_MWCC())
#   elif defined(__DMC__)
#       define QOR_PP_CONFIG_FLAGS() (QOR_PP_CONFIG_DMC())
#   elif defined(__BORLANDC__) && __BORLANDC__ >= 0x581
#       define QOR_PP_CONFIG_FLAGS() (QOR_PP_CONFIG_STRICT())
#   elif defined(__BORLANDC__) || defined(__IBMC__) || defined(__IBMCPP__) || defined(__SUNPRO_CC)
#       define QOR_PP_CONFIG_FLAGS() (QOR_PP_CONFIG_BCC())
#   elif defined(_MSC_VER)
#       define QOR_PP_CONFIG_FLAGS() (QOR_PP_CONFIG_MSVC())
#   else
#       define QOR_PP_CONFIG_FLAGS() (QOR_PP_CONFIG_STRICT())
#   endif
#endif

//QOR_PP_CONFIG_EXTENDED_LINE_INFO

#ifndef QOR_PP_CONFIG_EXTENDED_LINE_INFO
#   define QOR_PP_CONFIG_EXTENDED_LINE_INFO 0
#endif

//QOR_PP_CONFIG_ERRORS

#ifndef QOR_PP_CONFIG_ERRORS
#   ifdef NDEBUG
#       define QOR_PP_CONFIG_ERRORS 0
#   else
#       define QOR_PP_CONFIG_ERRORS 1
#   endif
#endif

//QOR_PP_VARIADICS

#if !defined QOR_PP_VARIADICS
#   // variadic support explicitly disabled for all untested compilers
#   if defined __GCCXML__ || defined __CUDACC__ || defined __PATHSCALE__ || defined __clang__ || defined __DMC__ || defined __CODEGEARC__ || defined __BORLANDC__ || defined __MWERKS__ || defined __SUNPRO_CC || defined __HP_aCC && !defined __EDG__ || defined __MRC__ || defined __SC__ || defined __IBMCPP__ || defined __PGI
#       define QOR_PP_VARIADICS 0
#   // VC++ (C/C++) 
#   elif defined _MSC_VER && ( ( _MSC_VER >= 1400 && !defined __EDG__ ) || _MSC_VER >=1800 )
#       if _MSC_VER >= 1400
#           define QOR_PP_VARIADICS 1
#           define QOR_PP_VARIADICS_MSVC 1
#       else
#           define QOR_PP_VARIADICS 0
#       endif
#   // Wave (C/C++), GCC (C++) 
#   elif defined __WAVE__ && __WAVE_HAS_VARIADICS__ || defined __GNUC__ && __GXX_EXPERIMENTAL_CXX0X__
#       define QOR_PP_VARIADICS 1
#   // EDG-based (C/C++), GCC (C), and unknown (C/C++)
#   elif !defined __cplusplus && __STDC_VERSION__ >= 199901L || __cplusplus >= 201103L
#       define QOR_PP_VARIADICS 1
#   else
#       define QOR_PP_VARIADICS 0
#   endif
#elif !QOR_PP_VARIADICS + 1 < 2
#   undef QOR_PP_VARIADICS
#   define QOR_PP_VARIADICS 1
#   if defined _MSC_VER && _MSC_VER >= 1400 && !(defined __EDG__ || defined __GCCXML__ || defined __CUDACC__ || defined __PATHSCALE__ || defined __clang__ || defined __DMC__ || defined __CODEGEARC__ || defined __BORLANDC__ || defined __MWERKS__ || defined __SUNPRO_CC || defined __HP_aCC || defined __MRC__ || defined __SC__ || defined __IBMCPP__ || defined __PGI)
#       define QOR_PP_VARIADICS_MSVC 1
#   endif
#else
#   undef QOR_PP_VARIADICS
#   define QOR_PP_VARIADICS 0
#endif

#endif//QOR_PREPROCESSOR_CONFIG_CONFIG_H_1
