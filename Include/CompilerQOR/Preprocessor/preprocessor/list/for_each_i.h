//for_each_i

# /* Copyright (C) 2001
#  * Housemarque Oy
#  * http://www.housemarque.com
#  *
#  * Distributed under the Boost Software License, Version 1.0. (See
#  * accompanying file LICENSE_1_0.txt or copy at
#  * http://www.boost.org/LICENSE_1_0.txt)
#  */
#
# /* Revised by Paul Mensonides (2002) */

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PREPROCESSOR_LIST_LIST_FOR_EACH_I_H_1
#define QOR_PREPROCESSOR_LIST_LIST_FOR_EACH_I_H_1

#include "../arithmetic/inc.h"
#include "../config/config.h"
#include "adt.h"
#include "../repetition/for.h"
#include "../tuple/elem.h"
#include "../tuple/rem.h"

//QOR_PP_LIST_FOR_EACH_I

#if ~QOR_PP_CONFIG_FLAGS() & QOR_PP_CONFIG_EDG() && ~QOR_PP_CONFIG_FLAGS() & QOR_PP_CONFIG_MSVC()
#   define QOR_PP_LIST_FOR_EACH_I( macro, data, list )		QOR_PP_FOR( ( macro, data, list, 0 ), QOR_PP_LIST_FOR_EACH_I_P, QOR_PP_LIST_FOR_EACH_I_O, QOR_PP_LIST_FOR_EACH_I_M )
#else
#   define QOR_PP_LIST_FOR_EACH_I( macro, data, list )		QOR_PP_LIST_FOR_EACH_I_I( macro, data, list )
#   define QOR_PP_LIST_FOR_EACH_I_I( macro, data, list )	 QOR_PP_FOR( ( macro, data, list, 0 ), QOR_PP_LIST_FOR_EACH_I_P, QOR_PP_LIST_FOR_EACH_I_O, QOR_PP_LIST_FOR_EACH_I_M )
#endif

#if QOR_PP_CONFIG_FLAGS() & QOR_PP_CONFIG_STRICT()
#	define QOR_PP_LIST_FOR_EACH_I_P( r, x )					QOR_PP_LIST_FOR_EACH_I_P_D x
#   define QOR_PP_LIST_FOR_EACH_I_P_D( m, d, l, i )			QOR_PP_LIST_IS_CONS( l )
#else
#	define QOR_PP_LIST_FOR_EACH_I_P( r, x )					QOR_PP_LIST_IS_CONS( QOR_PP_TUPLE_ELEM( 4, 2, x ) )
#endif

#if ~QOR_PP_CONFIG_FLAGS() & QOR_PP_CONFIG_MWCC()
#   define QOR_PP_LIST_FOR_EACH_I_O( r, x )					QOR_PP_LIST_FOR_EACH_I_O_D x
#   define QOR_PP_LIST_FOR_EACH_I_O_D( m, d, l, i )			( m, d, QOR_PP_LIST_REST( l ), QOR_PP_INC( i ) )
#else//MWCC
#   define QOR_PP_LIST_FOR_EACH_I_O( r, x )					( QOR_PP_TUPLE_ELEM( 4, 0, x ), QOR_PP_TUPLE_ELEM( 4, 1, x ), QOR_PP_LIST_REST( QOR_PP_TUPLE_ELEM( 4, 2, x ) ), QOR_PP_INC( QOR_PP_TUPLE_ELEM( 4, 3, x ) ) )
#endif

#if ~QOR_PP_CONFIG_FLAGS() & QOR_PP_CONFIG_EDG()
#   define QOR_PP_LIST_FOR_EACH_I_M( r, x )					QOR_PP_LIST_FOR_EACH_I_M_D( r, QOR_PP_TUPLE_ELEM( 4, 0, x ), QOR_PP_TUPLE_ELEM( 4, 1, x ), QOR_PP_TUPLE_ELEM( 4, 2, x ), QOR_PP_TUPLE_ELEM( 4, 3, x ) )
#else
#   define QOR_PP_LIST_FOR_EACH_I_M( r, x )					QOR_PP_LIST_FOR_EACH_I_M_I( r, QOR_PP_TUPLE_REM_4 x )
#   define QOR_PP_LIST_FOR_EACH_I_M_I( r, x_e )				QOR_PP_LIST_FOR_EACH_I_M_D( r, x_e )
#endif

# define QOR_PP_LIST_FOR_EACH_I_M_D( r, m, d, l, i )		m( r, d, i, QOR_PP_LIST_FIRST( l ) )

//QOR_PP_LIST_FOR_EACH_I_R

#if ~QOR_PP_CONFIG_FLAGS() & QOR_PP_CONFIG_EDG()
#   define QOR_PP_LIST_FOR_EACH_I_R( r, macro, data, list )		QOR_PP_FOR_ ## r( ( macro, data, list, 0 ), QOR_PP_LIST_FOR_EACH_I_P, QOR_PP_LIST_FOR_EACH_I_O, QOR_PP_LIST_FOR_EACH_I_M )
#else
#   define QOR_PP_LIST_FOR_EACH_I_R( r, macro, data, list )		QOR_PP_LIST_FOR_EACH_I_R_I( r, macro, data, list )
#   define QOR_PP_LIST_FOR_EACH_I_R_I( r, macro, data, list )	QOR_PP_FOR_ ## r( ( macro, data, list, 0 ), QOR_PP_LIST_FOR_EACH_I_P, QOR_PP_LIST_FOR_EACH_I_O, QOR_PP_LIST_FOR_EACH_I_M )
#endif

#endif//QOR_PREPROCESSOR_LIST_LIST_FOR_EACH_I_H_1
