//rest_n.h

# /* Copyright (C) 2001
#  * Housemarque Oy
#  * http://www.housemarque.com
#  *
#  * Distributed under the Boost Software License, Version 1.0. (See
#  * accompanying file LICENSE_1_0.txt or copy at
#  * http://www.boost.org/LICENSE_1_0.txt)
#  */
#
# /* Revised by Paul Mensonides (2002) */

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PREPROCESSOR_LIST_REST_N_H_1
#define QOR_PREPROCESSOR_LIST_REST_N_H_1

#include "../arithmetic/dec.h"
#include "../config/config.h"
#include "../control/while.h"
#include "adt.h"
#include "../tuple/elem.h"

//QOR_PP_LIST_REST_N 

#if ~QOR_PP_CONFIG_FLAGS() & QOR_PP_CONFIG_EDG()
#   define QOR_PP_LIST_REST_N( count, list )		QOR_PP_TUPLE_ELEM( 2, 0, QOR_PP_WHILE( QOR_PP_LIST_REST_N_P, QOR_PP_LIST_REST_N_O, ( list, count ) ) )
#else
#   define QOR_PP_LIST_REST_N( count, list )		QOR_PP_LIST_REST_N_I( count, list )
#   define QOR_PP_LIST_REST_N_I( count, list )		QOR_PP_TUPLE_ELEM( 2, 0, QOR_PP_WHILE( QOR_PP_LIST_REST_N_P, QOR_PP_LIST_REST_N_O, ( list, count ) ) )
#endif

#if ~QOR_PP_CONFIG_FLAGS() & QOR_PP_CONFIG_EDG()
#   define QOR_PP_LIST_REST_N_P( d, lc )			QOR_PP_TUPLE_ELEM( 2, 1, lc )
#else
#   define QOR_PP_LIST_REST_N_P( d, lc )			QOR_PP_LIST_REST_N_P_I lc
#   define QOR_PP_LIST_REST_N_P_I( list, count )	count
#endif

# if ~QOR_PP_CONFIG_FLAGS() & QOR_PP_CONFIG_EDG()
#    define QOR_PP_LIST_REST_N_O( d, lc )			( QOR_PP_LIST_REST( QOR_PP_TUPLE_ELEM( 2, 0, lc ) ), QOR_PP_DEC( QOR_PP_TUPLE_ELEM( 2, 1, lc ) ) )
# else
#    define QOR_PP_LIST_REST_N_O( d, lc )			QOR_PP_LIST_REST_N_O_I lc
#    define QOR_PP_LIST_REST_N_O_I( list, count )	( QOR_PP_LIST_REST( list ), QOR_PP_DEC( count ) )
# endif

//QOR_PP_LIST_REST_N_D

#if ~QOR_PP_CONFIG_FLAGS() & QOR_PP_CONFIG_EDG()
#   define QOR_PP_LIST_REST_N_D( d, count, list )	QOR_PP_TUPLE_ELEM( 2, 0, QOR_PP_WHILE_ ## d( QOR_PP_LIST_REST_N_P, QOR_PP_LIST_REST_N_O, ( list, count ) ) )
#else
#   define QOR_PP_LIST_REST_N_D( d, count, list )	QOR_PP_LIST_REST_N_D_I( d, count, list )
#   define QOR_PP_LIST_REST_N_D_I( d, count, list ) QOR_PP_TUPLE_ELEM( 2, 0, QOR_PP_WHILE_ ## d( QOR_PP_LIST_REST_N_P, QOR_PP_LIST_REST_N_O, ( list, count ) ) )
#endif

#endif//QOR_PREPROCESSOR_LIST_REST_N_H_1
