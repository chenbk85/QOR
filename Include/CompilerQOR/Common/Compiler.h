//Compiler.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Header for compiler class

#ifndef QCMP_COMPILER_H_1
#define QCMP_COMPILER_H_1

#	include __QCMP_COMPILER_UNFEATURE_INCLUDE		//Include the defeaturing header for the compiler

//Define configuration dependent definitions

//Inlining is used to balance size and performance
//It's a pretty blunt instrument which for the most part the compiler ignores anyway
#if		( __QOR_PERFORMANCE >= __QCS_MAX_PERFORMANCE_ )
#	define __QCMPInline __QCMP_ALWAYSINLINE			//Try to force the compiler to inline, use with caution as performance may get worse rather than better
#else
#	if	( __QOR_PERFORMANCE == __QCS_BALANCED_PERF_ )
#		define __QCMPInline __QCMP_INLINE			//just give the compiler a suggestion that it might inline something and leave it to decide
#	else
#		if ( __QOR_PERFORMANCE <= __QCS_MAX_SAFETY_ )
#			define __QCMPInline __QCMP_NOINLINE		//Block the compiler from auto-inlining where for example we want to be able to step through every line of code
#		else
#			define __QCMPInline						//default empty definition if no performance level specified. Compiler auto-inlining may still occur
#		endif
#	endif
#endif

//Define some Compiler dependent definitions. Generic macros that depend on available compiler features

#if __QCMP_SUPPORTS( __QCMP_FEATURE_TYPENAME_ON_DEPENDENTTYPE_IN_DEF_TEML_PARAM )
#	define __QCMP_FEATURE_TONDTIDTP( _X ) _X
#else
#	define __QCMP_FEATURE_TONDTIDTP( _X )
#endif

#if __QCMP_SUPPORTS( __QCMP_FEATURE_REQUIRES_USING_TO_ACCESS_TEMPLATE_BASE)
#	define __QCMP_USING_BASE( _X ) using BaseName::_X
#else
#	define __QCMP_USING_BASE( _X )
#endif

//Configure library interfaces
#	ifdef __QORLIB									//If were building a static library __QORLIB must be defined
#		define __QOR_INTERFACE( _X )
#	else											//otherwise we're building a dynamic library so interfaces are exported or imported
#		define __QOR_INTERFACE( _X ) QOR_PP_IF( QOR_PP_IS_EMPTY( _X ), __QCMP_IMPORT, __QCMP_EXPORT )
#	endif											//__QOR_INTERFACE( _X ) will resolve to import if _X is not defined, export if _X is defined

#	include __QCMP_COMPILER_INCLUDE					//Include the compiler header
#	include __QCMP_COMPILER_DEPCOMMON_INCLUDE		//Include common compiler post definitions dependent on the version

//If the Compiler defines a builtins header then include it here in the global namespace

#ifdef __QCMP   //Hide the builtins from any other library that includes this header, they're not part of the CompilerQOR interface
#	ifdef __QCMP_BUILTINS_HEADER
__QCMP_STARTLINKAGE_C
#	include __QCMP_BUILTINS_HEADER		//Injects a list of 'C' prototypes for builtin functions
__QCMP_ENDLINKAGE_C
#	endif
#endif

//--------------------------------------------------------------------------------
namespace nsCompiler
{
    //--------------------------------------------------------------------------------
    class __QOR_INTERFACE( __QCMP ) CCompiler : public CCompilerBase
    {
        public:

        CCompiler();
        CCompiler( const CCompiler& src );
        CCompiler& operator = ( const CCompiler& src );
        virtual ~CCompiler();
        const char* Name( void );

		//If the Compiler defines builtin functions then import them into the CCompiler class

#ifdef __QCMP_BUILTINS_INC
#	include __QCMP_BUILTINS_HEADER //inject a list of C++ protoypes as member function in the class that match the available builtins
#endif

#ifdef __QCMP_INTRINSICS_HEADER
#	include __QCMP_INTRINSICS_HEADER //inject a list of C++ prototypes as member functions in the class that match the available intrinsics
#endif

	};

}//nsCompiler

typedef nsCompiler::CCompiler::mxc_void                                         Cmp_void;
typedef nsCompiler::CCompiler::mxc_c_void                                       Cmp_C_void;
typedef nsCompiler::CCompiler::mxc_v_void                                       Cmp_V_void;
typedef nsCompiler::CCompiler::mxc_bool                                         Cmp_bool;
typedef nsCompiler::CCompiler::mxc_c_bool                                       Cmp_C_bool;
typedef nsCompiler::CCompiler::mxc_v_bool                                       Cmp_V_bool;
typedef nsCompiler::CCompiler::mxc_char                                         Cmp_char;
typedef nsCompiler::CCompiler::mxc_c_char                                       Cmp_C_char;
typedef nsCompiler::CCompiler::mxc_v_char                                       Cmp_V_char;
typedef nsCompiler::CCompiler::mxc_short                                        Cmp_short;
typedef nsCompiler::CCompiler::mxc_c_short                                      Cmp_C_short;
typedef nsCompiler::CCompiler::mxc_v_short                                      Cmp_V_short;
typedef nsCompiler::CCompiler::mxc_int                                          Cmp_int;
typedef nsCompiler::CCompiler::mxc_c_int                                        Cmp_C_int;
typedef nsCompiler::CCompiler::mxc_v_int                                        Cmp_V_int;
typedef nsCompiler::CCompiler::mxc_long                                         Cmp_long;
typedef nsCompiler::CCompiler::mxc_c_long                                       Cmp_C_long;
typedef nsCompiler::CCompiler::mxc_v_long                                       Cmp_V_long;
typedef nsCompiler::CCompiler::mxc_float                                        Cmp_float;
typedef nsCompiler::CCompiler::mxc_c_float                                      Cmp_C_float;
typedef nsCompiler::CCompiler::mxc_v_float                                      Cmp_V_float;
typedef nsCompiler::CCompiler::mxc_double                                       Cmp_double;
typedef nsCompiler::CCompiler::mxc_c_double                                     Cmp_C_double;
typedef nsCompiler::CCompiler::mxc_v_double                                     Cmp_V_double;
typedef nsCompiler::CCompiler::mxc_signed_char									Cmp_signed_char;
typedef nsCompiler::CCompiler::mxc_c_signed_char								Cmp_C_signed_char;
typedef nsCompiler::CCompiler::mxc_v_signed_char								Cmp_V_signed_char;
typedef nsCompiler::CCompiler::mxc_unsigned_char								Cmp_unsigned_char;
typedef nsCompiler::CCompiler::mxc_c_unsigned_char								Cmp_C_unsigned_char;
typedef nsCompiler::CCompiler::mxc_v_unsigned_char								Cmp_V_unsigned_char;
typedef nsCompiler::CCompiler::mxc_signed_short									Cmp_signed_short;
typedef nsCompiler::CCompiler::mxc_c_signed_short								Cmp_C_signed_short;
typedef nsCompiler::CCompiler::mxc_v_signed_short								Cmp_V_signed_short;
typedef nsCompiler::CCompiler::mxc_unsigned_short								Cmp_unsigned_short;
typedef nsCompiler::CCompiler::mxc_c_unsigned_short								Cmp_C_unsigned_short;
typedef nsCompiler::CCompiler::mxc_v_unsigned_short								Cmp_V_unsigned_short;
typedef nsCompiler::CCompiler::mxc_signed_int									Cmp_signed_int;
typedef nsCompiler::CCompiler::mxc_c_signed_int									Cmp_C_signed_int;
typedef nsCompiler::CCompiler::mxc_v_signed_int									Cmp_V_signed_int;
typedef nsCompiler::CCompiler::mxc_unsigned_int									Cmp_unsigned_int;
typedef nsCompiler::CCompiler::mxc_c_unsigned_int								Cmp_C_unsigned_int;
typedef nsCompiler::CCompiler::mxc_v_unsigned_int								Cmp_V_unsigned_int;
typedef nsCompiler::CCompiler::mxc_signed_long									Cmp_signed_long;
typedef nsCompiler::CCompiler::mxc_c_signed_long								Cmp_C_signed_long;
typedef nsCompiler::CCompiler::mxc_v_signed_long								Cmp_V_signed_long;
typedef nsCompiler::CCompiler::mxc_unsigned_long								Cmp_unsigned_long;
typedef nsCompiler::CCompiler::mxc_c_unsigned_long								Cmp_C_unsigned_long;
typedef nsCompiler::CCompiler::mxc_v_unsigned_long								Cmp_V_unsigned_long;
typedef nsCompiler::CCompiler::mxc_long_double									Cmp_long_double;
typedef nsCompiler::CCompiler::mxc_c_long_double								Cmp_C_long_double;
typedef nsCompiler::CCompiler::mxc_v_long_double								Cmp_V_long_double;
typedef nsCompiler::CCompiler::mxc_long_long									Cmp_long_long;
typedef nsCompiler::CCompiler::mxc_c_long_long									Cmp_C_long_long;
typedef nsCompiler::CCompiler::mxc_v_long_long									Cmp_V_long_long;
typedef nsCompiler::CCompiler::mxc_unsigned_long_long							Cmp_unsigned_long_long;
typedef nsCompiler::CCompiler::mxc_c_unsigned_long_long							Cmp_C_unsigned_long_long;
typedef nsCompiler::CCompiler::mxc_v_unsigned_long_long							Cmp_V_unsigned_long_long;
typedef nsCompiler::CCompiler::mxc_wchar_t                                      Cmp_wchar_t;
typedef nsCompiler::CCompiler::mxc_c_wchar_t									Cmp_C_wchar_t;
typedef nsCompiler::CCompiler::mxc_v_wchar_t									Cmp_V_wchar_t;
typedef nsCompiler::CCompiler::mxc_unsigned__int8								Cmp_unsigned__int8;
typedef nsCompiler::CCompiler::mxc_c_unsigned__int8								Cmp_C_unsigned__int8;
typedef nsCompiler::CCompiler::mxc_v_unsigned__int8								Cmp_V_unsigned__int8;
typedef nsCompiler::CCompiler::mxc_unsigned__int16								Cmp_unsigned__int16;
typedef nsCompiler::CCompiler::mxc_c_unsigned__int16							Cmp_C_unsigned__int16;
typedef nsCompiler::CCompiler::mxc_v_unsigned__int16							Cmp_V_unsigned__int16;
typedef nsCompiler::CCompiler::mxc_unsigned__int32								Cmp_unsigned__int32;
typedef nsCompiler::CCompiler::mxc_c_unsigned__int32							Cmp_C_unsigned__int32;
typedef nsCompiler::CCompiler::mxc_v_unsigned__int32							Cmp_V_unsigned__int32;
typedef nsCompiler::CCompiler::mxc_unsigned__int64								Cmp_unsigned__int64;
typedef nsCompiler::CCompiler::mxc_c_unsigned__int64							Cmp_C_unsigned__int64;
typedef nsCompiler::CCompiler::mxc_v_unsigned__int64							Cmp_V_unsigned__int64;
typedef nsCompiler::CCompiler::mxc_signed__int8									Cmp_signed__int8;
typedef nsCompiler::CCompiler::mxc_c_signed__int8								Cmp_C_signed__int8;
typedef nsCompiler::CCompiler::mxc_v_signed__int8								Cmp_V_signed__int8;
typedef nsCompiler::CCompiler::mxc_signed__int16								Cmp_signed__int16;
typedef nsCompiler::CCompiler::mxc_c_signed__int16								Cmp_C_signed__int16;
typedef nsCompiler::CCompiler::mxc_v_signed__int16								Cmp_V_signed__int16;
typedef nsCompiler::CCompiler::mxc_signed__int32								Cmp_signed__int32;
typedef nsCompiler::CCompiler::mxc_c_signed__int32								Cmp_C_signed__int32;
typedef nsCompiler::CCompiler::mxc_v_signed__int32								Cmp_V_signed__int32;
typedef nsCompiler::CCompiler::mxc_signed__int64								Cmp_signed__int64;
typedef nsCompiler::CCompiler::mxc_c_signed__int64								Cmp_C_signed__int64;
typedef nsCompiler::CCompiler::mxc_v_signed__int64								Cmp_V_signed__int64;
typedef nsCompiler::CCompiler::mxc__int8                                        Cmp__int8;
typedef nsCompiler::CCompiler::mxc_c__int8                                      Cmp_C__int8;
typedef nsCompiler::CCompiler::mxc_v__int8                                      Cmp_V__int8;
typedef nsCompiler::CCompiler::mxc__int16                                       Cmp__int16;
typedef nsCompiler::CCompiler::mxc_c__int16                                     Cmp_C__int16;
typedef nsCompiler::CCompiler::mxc_v__int16                                     Cmp_V__int16;
typedef nsCompiler::CCompiler::mxc__int32                                       Cmp__int32;
typedef nsCompiler::CCompiler::mxc_c__int32                                     Cmp_C__int32;
typedef nsCompiler::CCompiler::mxc_v__int32                                     Cmp_V__int32;
typedef nsCompiler::CCompiler::mxc__int64                                       Cmp__int64;
typedef nsCompiler::CCompiler::mxc_c__int64                                     Cmp_C__int64;
typedef nsCompiler::CCompiler::mxc_v__int64                                     Cmp_V__int64;
typedef nsCompiler::CCompiler::mxc_int_ptr                                      Cmp_int_ptr;
typedef nsCompiler::CCompiler::mxc_uint_ptr                                     Cmp_uint_ptr;
typedef nsCompiler::CCompiler::mxc_long_ptr                                     Cmp_long_ptr;
typedef nsCompiler::CCompiler::mxc_ulong_ptr									Cmp_ulong_ptr;
typedef nsCompiler::CCompiler::mxc__int3264                                     Cmp__int3264;
typedef Cmp_unsigned_char														byte;

__QCMP_LINKAGE_C __QOR_INTERFACE( __QCMP ) nsCompiler::CCompiler* TheCompiler( void );

#endif//QCMP_COMPILER_H_1
