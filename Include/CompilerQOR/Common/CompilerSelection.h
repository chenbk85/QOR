//CompilerSelection.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Detect and select the compiler being used to build the module that includes this file
//Based on Boost compiler configuration selection header file

#ifndef QCMP_COMPSELECTION_H_1
#define QCMP_COMPSELECTION_H_1

#ifndef __QCMP_COMPILER								//If the compiler is not yet defined
#	if defined(__GCCXML__)
#	   define __QCMP_COMPILER	__QCMP_GCCXML		//GCC-XML emulates other compilers, it has to appear first here!
#		define __QCMP_COMPILER_ROOT_FOLDER GCCXML
#	elif defined(_CRAYC)
#		define __QCMP_COMPILER	__QCMP_CRAYC		//EDG based Cray compiler
#		define __QCMP_COMPILER_ROOT_FOLDER CrayC
#	elif defined __CUDACC__
#		define __QCMP_COMPILER	__QCMP_NVIDIACUDA	//NVIDIA CUDA C++ compiler for GPU
#		define __QCMP_COMPILER_ROOT_FOLDER Nvidia
#	elif defined __COMO__
#	   define __QCMP_COMPILER	__QCMP_COMEAU		//Comeau C++
#		define __QCMP_COMPILER_ROOT_FOLDER Comeau
#	elif defined(__PATHSCALE__) && (__PATHCC__ >= 4)
#		define __QCMP_COMPILER	__QCMP_PATHSCALE	//PathScale EKOPath compiler (has to come before clang and gcc)
#		define __QCMP_COMPILER_ROOT_FOLDER PathScale
#	elif defined __clang__ && !defined(__CUDACC__) && !defined(__ibmxl__)
#		define __QCMP_COMPILER	__QCMP_CLANG		//Clang C++ emulates GCC, so it has to appear early.
#		define __QCMP_COMPILER_ROOT_FOLDER clang
#	elif defined __DMC__
#	   define __QCMP_COMPILER	__QCMP_DIGITALMARS	//Digital Mars C++
#		define __QCMP_COMPILER_ROOT_FOLDER DigitalMars
#	elif defined(__INTEL_COMPILER) || defined(__ICL) || defined(__ICC) || defined(__ECC)
#		define __QCMP_COMPILER	__QCMP_INTEL		//Intel
#		define __QCMP_COMPILER_ROOT_FOLDER Intel
#	elif defined __GNUC__ && !defined(__ibmxl__)
#		define __QCMP_COMPILER	__QCMP_GCC			//GNU C++
#		define __QCMP_COMPILER_ROOT_FOLDER GCC
#	elif defined __KCC
#		define __QCMP_COMPILER	__QCMP_KAI			//Kai C++
#		define __QCMP_COMPILER_ROOT_FOLDER Kai
#	elif defined __sgi || defined(sgi)
#		define __QCMP_COMPILER	__QCMP_SGIMIPSPRO	//SGI MIPSpro C++
#		define __QCMP_COMPILER_ROOT_FOLDER SGIMIPSPro
#	elif defined __ghs
#		define __QCMP_COMPILER	__QCMP_GREENHILLS	//Greenhills C++
#		define __QCMP_COMPILER_ROOT_FOLDER Greenhills
#	elif defined __CODEGEARC__
#		define __QCMP_COMPILER	__QCMP_CODEGEAR		//CodeGear - must be checked for before Borland
#		define __QCMP_COMPILER_ROOT_FOLDER CodeGear
#	elif defined __BORLANDC__
#		define __QCMP_COMPILER	__QCMP_BORLAND		//Borland
#		define __QCMP_COMPILER_ROOT_FOLDER Borland
#	elif defined __MWERKS__
#		define __QCMP_COMPILER	__QCMP_METROCW		//Metrowerks CodeWarrior
#		define __QCMP_COMPILER_ROOT_FOLDER MetroworksCW
#	elif defined __WATCOM_CPLUSPLUS__
#		define __QCMP_COMPILER	__QCMP_WATCOM		//Open Watcom
#		define __QCMP_COMPILER_ROOT_FOLDER Watcom
#	elif defined  __SUNPRO_CC
#		define __QCMP_COMPILER	__QCMP_SUNWSHOP		//Sun Workshop Compiler C++
#		define __QCMP_COMPILER_ROOT_FOLDER SunWorkshop
#	elif defined __HP_aCC
#		define __QCMP_COMPILER	__QCMP_HPACC		//HP aCC
#		define __QCMP_COMPILER_ROOT_FOLDER HPACC
#	elif defined(__MRC__) || defined(__SC__) || defined(MPW_C) || defined(MPW_CPLUS)
#		define __QCMP_COMPILER	__QCMP_MRCPP		//MPW MrCpp or SCpp
#		define __QCMP_COMPILER_ROOT_FOLDER MrCPP
#	elif defined(__ibmxl__) || defined(__IBMCPP__) || defined(__xlC__) || defined(__xlc__)
#		define __QCMP_COMPILER	__QCMP_IBMXL		//IBM XL C/C+
#		define __QCMP_COMPILER_ROOT_FOLDER IBMXL
#	elif defined(__PGI)
#		define __QCMP_COMPILER	__QCMP_PORTLAND		//Portland Group Inc.
#		define __QCMP_COMPILER_ROOT_FOLDER Portland
#	elif defined(__IAR_SYSTEMS_ICC__)
#		define __QCMP_COMPILER	__QCMP_IAR_ICC		//IAR C/C++ Compiler
#		define __QCMP_COMPILER_ROOT_FOLDER IAR
#	elif defined(__HIGHC__)
#		define __QCMP_COMPILER	__QCMP_METAWARE_HIGH	//Metaware High C/C++ Compiler
#		define __QCMP_COMPILER_ROOT_FOLDER Metaware
#	elif defined(__DECC) || defined(__DECCXX)
#		defined __QCMP_COMPILER	__QCMP_COMPAQ_DEC	//Compaq C/C++
#		define __QCMP_COMPILER_ROOT_FOLDER Compaq
#	elif defined(__DCC__)
#		defined __QCMP_COMPILER	__QCMP_DIAB			//Diab C/C++
#		define __QCMP_COMPILER_ROOT_FOLDER Diab
#	elif defined(__SYSC__)
#		define __QCMP_COMPILER	__QCMP_DIGNUS		//Dignus Systems/C++
#		define __QCMP_COMPILER_ROOT_FOLDER Dignus
#	elif defined(_MRI)
#		define __QCMP_COMPILER	__QCMP_MICROTEC		//Microtec C/C++
#		define __QCMP_COMPILER_ROOT_FOLDER Microtec
#	elif defined(_PACC_VER)
#		define __QCMP_COMPILER	__QCMP_PALM			//Palm C/C++
#		define __QCMP_COMPILER_ROOT_FOLDER Palm
#	elif defined(__TenDRA__)
#		define __QCMP_COMPILER	__QCMP_TENDRA		//TenDRA C/C++
#		define __QCMP_COMPILER_ROOT_FOLDER TenDRA
//NOTE: Add new compiler support here

#	elif defined _MSC_VER							//  Must remain the last #elif since some other vendors (Metrowerks, for example) also #define _MSC_VER
#		define __QCMP_COMPILER	__QCMP_MSVC			//  Microsoft Visual C++
#		define __QCMP_COMPILER_ROOT_FOLDER MSVC
#		define QOR_CMP_MSVC_VERSION _MSC_VER
#	endif

													// Attempt to generate an error if we don't recognise the compiler:
#	ifndef __QCMP_COMPILER
#		error "Unknown compiler - Please #define __QCMP_COMPILER or add support for your compiler at the 'NOTE: Add new compiler support here' marked points "
#	endif

#endif//__QCMP_COMPILER

#endif//QCMP_COMPSELECTION_H_1
