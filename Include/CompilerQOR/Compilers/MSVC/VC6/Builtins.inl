//Builtins.inl

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef	QOR_MONOLITHIC
//These intrinsic functions which are always available with MSVC6
//and will become members of the CCompiler class

//--------------------------------------------------------------------------------
#pragma intrinsic(_inp)
//--------------------------------------------------------------------------------
int CCompiler::_inp( unsigned short usPort )
{
	return ::_inp( usPort );
}

//--------------------------------------------------------------------------------
#pragma intrinsic(_inpw)
//--------------------------------------------------------------------------------
unsigned short CCompiler::_inpw( unsigned short usPort )
{
	return ::_inpw( usPort );
}

/*//docs says its available, compiler says otherwise
//--------------------------------------------------------------------------------
#pragma intrinsic(_lrtol)
//--------------------------------------------------------------------------------
unsigned long CCompiler::_lrtol( unsigned long value, int shift )
{
	return ::_lrotl( value, shift );
}
*/
//--------------------------------------------------------------------------------
#pragma intrinsic(_lrotr)
//--------------------------------------------------------------------------------
unsigned long CCompiler::_lrotr( unsigned long value, int shift )
{
	return ::_lrotr( value, shift );
}

//--------------------------------------------------------------------------------
#pragma intrinsic(_outp)
//--------------------------------------------------------------------------------
int CCompiler::_outp( unsigned short usPort, int databyte )
{
	return ::_outp( usPort, databyte );
}

#if ( _MSC_VER < 1500 )
//--------------------------------------------------------------------------------
#pragma intrinsic(_outpw)
//--------------------------------------------------------------------------------
int CCompiler::_outpw( unsigned short usPort, unsigned short dataword )
{
	return ::_outpw( usPort, dataword );
}
#endif

//--------------------------------------------------------------------------------
#pragma intrinsic(_rotl)
//--------------------------------------------------------------------------------
unsigned int CCompiler::_rotl( unsigned int value, int shift )
{
	return ::_rotl( value, shift );
}

//--------------------------------------------------------------------------------
#pragma intrinsic(_rotr)
//--------------------------------------------------------------------------------
unsigned int CCompiler::_rotr( unsigned int value, int shift )
{
	return ::_rotr( value, shift );
}

//--------------------------------------------------------------------------------
#pragma intrinsic(_strset)
//--------------------------------------------------------------------------------
char* CCompiler::_strset( char* string, int c )
{
	return ::_strset( string, c );
}

//--------------------------------------------------------------------------------
#pragma intrinsic(abs)
//--------------------------------------------------------------------------------
int CCompiler::abs( int n )
{
	return ::abs( n );
}

//--------------------------------------------------------------------------------
#pragma intrinsic(fabs)
//--------------------------------------------------------------------------------
double CCompiler::fabs( double x )
{
	return ::fabs( x );
}

//--------------------------------------------------------------------------------
#pragma intrinsic(labs)
//--------------------------------------------------------------------------------
long CCompiler::labs( long n )
{
	return ::labs( n );
}

//--------------------------------------------------------------------------------
#pragma intrinsic(memcmp)
//--------------------------------------------------------------------------------
int CCompiler::memcmp( const void* buf1, const void* buf2, size_t count )
{
	return ::memcmp( buf1, buf2, count );
}

/*
//--------------------------------------------------------------------------------
#pragma intrinsic(memcpy)
//--------------------------------------------------------------------------------
void* CCompiler::memcpy( void* dest, const void* src, size_t count )
{
	return ::memcpy( dest, src, count );
}


//--------------------------------------------------------------------------------
#pragma intrinsic(memset)
//--------------------------------------------------------------------------------
void* CCompiler::memset( void* dest, int c, size_t count )
{
	return ::memset( dest, c, count );
}
*/
//--------------------------------------------------------------------------------
#pragma intrinsic(strcat)
//--------------------------------------------------------------------------------
char* CCompiler::strcat( char* strDest, const char* strSource )
{
	return ::strcat( strDest, strSource );
}

//--------------------------------------------------------------------------------
#pragma intrinsic(strcmp)
//--------------------------------------------------------------------------------
int CCompiler::strcmp( const char* string1, const char* string2 )
{
	return ::strcmp( string1, string2 );
}

//--------------------------------------------------------------------------------
#pragma intrinsic(strcpy)
//--------------------------------------------------------------------------------
char* CCompiler::strcpy( char* strDest, const char* strSource )
{
	return ::strcpy( strDest, strSource );
}

//--------------------------------------------------------------------------------
#pragma intrinsic(strlen)
//--------------------------------------------------------------------------------
size_t CCompiler::strlen( const char* string )
{
	return ::strlen( string );
}

#endif//QOR_MONOLITHIC
