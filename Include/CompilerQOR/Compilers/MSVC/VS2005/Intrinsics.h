//Intrinsics.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//NOTE: This header is intended for potential multiple inclusion

//Intrinsics supplied by MSVC
#include "../VS2003/Intrinsics.h"

#ifdef QOR_ARCH_JMPBUF_H
#	include QOR_ARCH_JMBBUF_H
	__QCMP_STARTLINKAGE_C
		int	__cdecl	_setjmp(jmp_buf);
	__QCMP_ENDLINKAGE_C
#endif

//__MACHINEX86X_NOWIN64
/*
(__m64 _m_from_float(float);
(float _m_to_float(__m64);
(__m64 _mm_cvt_ps2pi(__m128);
(__m64 _mm_cvtt_ps2pi(__m128);
(__m128 _mm_cvt_pi2ps(__m128,__m64);
(void _mm_stream_pi(__m64*,__m64);
(void  _m_femms(void);
(__m64 _m_pavgusb(__m64,__m64);
(__m64 _m_pf2id(__m64);
(__m64 _m_pfacc(__m64,__m64);
(__m64 _m_pfadd(__m64,__m64);
(__m64 _m_pfcmpeq(__m64,__m64);
(__m64 _m_pfcmpge(__m64,__m64);
(__m64 _m_pfcmpgt(__m64,__m64);
(__m64 _m_pfmax(__m64,__m64);
(__m64 _m_pfmin(__m64,__m64);
(__m64 _m_pfmul(__m64,__m64);
(__m64 _m_pfrcp(__m64);
(__m64 _m_pfrcpit1(__m64,__m64);
(__m64 _m_pfrcpit2(__m64,__m64);
(__m64 _m_pfrsqrt(__m64);
(__m64 _m_pfrsqit1(__m64,__m64);
(__m64 _m_pfsub(__m64,__m64);
(__m64 _m_pfsubr(__m64,__m64);
(__m64 _m_pi2fd(__m64);
(__m64 _m_pmulhrw(__m64,__m64);
(__m64 _m_pf2iw(__m64);
(__m64 _m_pfnacc(__m64,__m64);
(__m64 _m_pfpnacc(__m64,__m64);
(__m64 _m_pi2fw(__m64);
(__m64 _m_pswapd(__m64);
*/


//__MACHINEX86X_NOIA64
/*
__MACHINEX86X_NOIA64(__m128 _mm_add_ss(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_add_ps(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_sub_ss(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_sub_ps(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_mul_ss(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_mul_ps(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_div_ss(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_div_ps(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_sqrt_ss(__m128))
__MACHINEX86X_NOIA64(__m128 _mm_sqrt_ps(__m128))
__MACHINEX86X_NOIA64(__m128 _mm_rcp_ss(__m128))
__MACHINEX86X_NOIA64(__m128 _mm_rcp_ps(__m128))
__MACHINEX86X_NOIA64(__m128 _mm_rsqrt_ss(__m128))
__MACHINEX86X_NOIA64(__m128 _mm_rsqrt_ps(__m128))
__MACHINEX86X_NOIA64(__m128 _mm_min_ss(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_min_ps(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_max_ss(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_max_ps(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_and_ps(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_andnot_ps(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_or_ps(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_xor_ps(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_cmpeq_ss(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_cmpeq_ps(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_cmplt_ss(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_cmplt_ps(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_cmple_ss(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_cmple_ps(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_cmpgt_ss(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_cmpgt_ps(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_cmpge_ss(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_cmpge_ps(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_cmpneq_ss(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_cmpneq_ps(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_cmpnlt_ss(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_cmpnlt_ps(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_cmpnle_ss(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_cmpnle_ps(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_cmpngt_ss(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_cmpngt_ps(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_cmpnge_ss(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_cmpnge_ps(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_cmpord_ss(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_cmpord_ps(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_cmpunord_ss(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_cmpunord_ps(__m128,__m128))
__MACHINEX86X_NOIA64(int _mm_comieq_ss(__m128,__m128))
__MACHINEX86X_NOIA64(int _mm_comilt_ss(__m128,__m128))
__MACHINEX86X_NOIA64(int _mm_comile_ss(__m128,__m128))
__MACHINEX86X_NOIA64(int _mm_comigt_ss(__m128,__m128))
__MACHINEX86X_NOIA64(int _mm_comige_ss(__m128,__m128))
__MACHINEX86X_NOIA64(int _mm_comineq_ss(__m128,__m128))
__MACHINEX86X_NOIA64(int _mm_ucomieq_ss(__m128,__m128))
__MACHINEX86X_NOIA64(int _mm_ucomilt_ss(__m128,__m128))
__MACHINEX86X_NOIA64(int _mm_ucomile_ss(__m128,__m128))
__MACHINEX86X_NOIA64(int _mm_ucomigt_ss(__m128,__m128))
__MACHINEX86X_NOIA64(int _mm_ucomige_ss(__m128,__m128))
__MACHINEX86X_NOIA64(int _mm_ucomineq_ss(__m128,__m128))
__MACHINEX86X_NOIA64(int _mm_cvt_ss2si(__m128))
__MACHINEX86X_NOIA64(int _mm_cvtt_ss2si(__m128))
__MACHINEX86X_NOIA64(__m128 _mm_cvt_si2ss(__m128,int))
__MACHINEX86X_NOIA64(__m128 _mm_shuffle_ps(__m128,__m128,unsigned int))
__MACHINEX86X_NOIA64(__m128 _mm_unpackhi_ps(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_unpacklo_ps(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_loadh_pi(__m128,__m64 const*))
__MACHINEX86X_NOIA64(void _mm_storeh_pi(__m64*,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_loadl_pi(__m128,__m64 const*))
__MACHINEX86X_NOIA64(void _mm_storel_pi(__m64*,__m128))
__MACHINEX86X_NOIA64(int _mm_movemask_ps(__m128))
__MACHINEX86X_NOIA64(__m128 _mm_set_ss(float))
__MACHINEX86X_NOIA64(__m128 _mm_set_ps1(float))
__MACHINEX86X_NOIA64(__m128 _mm_set_ps(float,float,float,float))
__MACHINEX86X_NOIA64(__m128 _mm_setr_ps(float,float,float,float))
__MACHINEX86X_NOIA64(__m128 _mm_setzero_ps(void))
__MACHINEX86X_NOIA64(__m128 _mm_load_ss(float const*))
__MACHINEX86X_NOIA64(__m128 _mm_load_ps1(float const*))
__MACHINEX86X_NOIA64(__m128 _mm_load_ps(float const*))
__MACHINEX86X_NOIA64(__m128 _mm_loadr_ps(float const*))
__MACHINEX86X_NOIA64(__m128 _mm_loadu_ps(float const*))
__MACHINEX86X_NOIA64(__m128 _mm_move_ss(__m128,__m128))
__MACHINEX86X_NOIA64(void _mm_store_ss(float*,__m128))
__MACHINEX86X_NOIA64(void _mm_store_ps1(float*,__m128))
__MACHINEX86X_NOIA64(void _mm_store_ps(float*,__m128))
__MACHINEX86X_NOIA64(void _mm_storer_ps(float*,__m128))
__MACHINEX86X_NOIA64(void _mm_storeu_ps(float*,__m128))
__MACHINEX86X_NOIA64(void _mm_prefetch(char const*,int))
__MACHINEX86X_NOIA64(void _mm_stream_ps(float*,__m128))
__MACHINEX86X_NOIA64(void _mm_sfence(void))
__MACHINEX86X_NOIA64(unsigned int _mm_getcsr(void))
__MACHINEX86X_NOIA64(void _mm_setcsr(unsigned int))
__MACHINEX86X_NOIA64(__m128 _mm_movelh_ps(__m128,__m128))
__MACHINEX86X_NOIA64(__m128 _mm_movehl_ps(__m128,__m128))
__MACHINEX86X_NOIA64(void  _m_prefetch(void*))
__MACHINEX86X_NOIA64(void  _m_prefetchw(volatile const void*_Source))
*/

//__MACHINEX86X_NOX64
/*
__MACHINEX86X_NOX64(void  _m_empty(void))
__MACHINEX86X_NOX64(__m64 _m_from_int(int))
__MACHINEX86X_NOX64(int   _m_to_int(__m64))
__MACHINEX86X_NOX64(__m64 _m_packsswb(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_packssdw(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_packuswb(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_punpckhbw(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_punpckhwd(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_punpckhdq(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_punpcklbw(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_punpcklwd(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_punpckldq(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_paddb(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_paddw(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_paddd(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_paddsb(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_paddsw(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_paddusb(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_paddusw(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_psubb(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_psubw(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_psubd(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_psubsb(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_psubsw(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_psubusb(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_psubusw(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_pmaddwd(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_pmulhw(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_pmullw(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_psllw(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_psllwi(__m64,int))
__MACHINEX86X_NOX64(__m64 _m_pslld(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_pslldi(__m64,int))
__MACHINEX86X_NOX64(__m64 _m_psllq(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_psllqi(__m64,int))
__MACHINEX86X_NOX64(__m64 _m_psraw(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_psrawi(__m64,int))
__MACHINEX86X_NOX64(__m64 _m_psrad(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_psradi(__m64,int))
__MACHINEX86X_NOX64(__m64 _m_psrlw(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_psrlwi(__m64,int))
__MACHINEX86X_NOX64(__m64 _m_psrld(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_psrldi(__m64,int))
__MACHINEX86X_NOX64(__m64 _m_psrlq(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_psrlqi(__m64,int))
__MACHINEX86X_NOX64(__m64 _m_pand(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_pandn(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_por(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_pxor(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_pcmpeqb(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_pcmpeqw(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_pcmpeqd(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_pcmpgtb(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_pcmpgtw(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_pcmpgtd(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _mm_setzero_si64(void))
__MACHINEX86X_NOX64(__m64 _mm_set_pi32(int,int))
__MACHINEX86X_NOX64(__m64 _mm_set_pi16(short,short,short,short))
__MACHINEX86X_NOX64(__m64 _mm_set_pi8(char,char,char,char,char,char,char,char))
__MACHINEX86X_NOX64(__m64 _mm_set1_pi32(int))
__MACHINEX86X_NOX64(__m64 _mm_set1_pi16(short))
__MACHINEX86X_NOX64(__m64 _mm_set1_pi8(char))
__MACHINEX86X_NOX64(__m64 _mm_setr_pi32(int,int))
__MACHINEX86X_NOX64(__m64 _mm_setr_pi16(short,short,short,short))
__MACHINEX86X_NOX64(__m64 _mm_setr_pi8(char,char,char,char,char,char,char,char))
__MACHINEX86X_NOX64(int _m_pextrw(__m64,int))
__MACHINEX86X_NOX64(__m64 _m_pinsrw(__m64,int,int))
__MACHINEX86X_NOX64(__m64 _m_pmaxsw(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_pmaxub(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_pminsw(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_pminub(__m64,__m64))
__MACHINEX86X_NOX64(int _m_pmovmskb(__m64))
__MACHINEX86X_NOX64(__m64 _m_pmulhuw(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_pshufw(__m64,int))
__MACHINEX86X_NOX64(void _m_maskmovq(__m64,__m64,char*))
__MACHINEX86X_NOX64(__m64 _m_pavgb(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_pavgw(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _m_psadbw(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _mm_cvtpd_pi32(__m128d))
__MACHINEX86X_NOX64(__m64 _mm_cvttpd_pi32(__m128d))
__MACHINEX86X_NOX64(__m128d _mm_cvtpi32_pd(__m64))
__MACHINEX86X_NOX64(__m64 _mm_add_si64(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _mm_mul_su32(__m64,__m64))
__MACHINEX86X_NOX64(__m64 _mm_sub_si64(__m64,__m64))
__MACHINEX86X_NOX64(__m128i _mm_set_epi64(__m64,__m64))
__MACHINEX86X_NOX64(__m128i _mm_set1_epi64(__m64))
__MACHINEX86X_NOX64(__m128i _mm_setr_epi64(__m64,__m64))
__MACHINEX86X_NOX64(__m128i _mm_movpi64_epi64(__m64))
__MACHINEX86X_NOX64(__m64 _mm_movepi64_pi64(__m128i))
*/


//__MACHINEX86X - OK on x86s ? do these require processor rev ?
//TODO: These require MMX,SSE,SSE2,3DNOW support in the processor
#if ( QOR_ARCH == QOR_ARCH_X86_32 ) 

	
	//
	//__m128d _mm_add_sd(__m128d,__m128d);
	//__m128d _mm_add_pd(__m128d,__m128d);
	//__m128d _mm_div_sd(__m128d,__m128d);
	//__m128d _mm_div_pd(__m128d,__m128d);
	//__m128d _mm_max_sd(__m128d,__m128d);
	//__m128d _mm_max_pd(__m128d,__m128d);
	//__m128d _mm_min_sd(__m128d,__m128d);
	//__m128d _mm_min_pd(__m128d,__m128d);
	//__m128d _mm_mul_sd(__m128d,__m128d);
	//__m128d _mm_mul_pd(__m128d,__m128d);
	//__m128d _mm_sqrt_sd(__m128d, __m128d);
	//__m128d _mm_sqrt_pd(__m128d);
	//__m128d _mm_sub_sd(__m128d,__m128d);
	//__m128d _mm_sub_pd(__m128d,__m128d);
	//__m128d _mm_and_pd(__m128d,__m128d);
	//__m128d _mm_andnot_pd(__m128d,__m128d);
	//__m128d _mm_or_pd(__m128d,__m128d);
	//__m128d _mm_xor_pd(__m128d,__m128d);
	//__m128d _mm_cmpeq_sd(__m128d,__m128d);
	//__m128d _mm_cmpeq_pd(__m128d,__m128d);
	//__m128d _mm_cmplt_sd(__m128d,__m128d);
	//__m128d _mm_cmplt_pd(__m128d,__m128d);
	//__m128d _mm_cmple_sd(__m128d,__m128d);
	//__m128d _mm_cmple_pd(__m128d,__m128d);
	//__m128d _mm_cmpgt_sd(__m128d,__m128d);
	//__m128d _mm_cmpgt_pd(__m128d,__m128d);
	//__m128d _mm_cmpge_sd(__m128d,__m128d);
	//__m128d _mm_cmpge_pd(__m128d,__m128d);
	//__m128d _mm_cmpneq_sd(__m128d,__m128d);
	//__m128d _mm_cmpneq_pd(__m128d,__m128d);
	//__m128d _mm_cmpnlt_sd(__m128d,__m128d);
	//__m128d _mm_cmpnlt_pd(__m128d,__m128d);
	//__m128d _mm_cmpnle_sd(__m128d,__m128d);
	//__m128d _mm_cmpnle_pd(__m128d,__m128d);
	//__m128d _mm_cmpngt_sd(__m128d,__m128d);
	//__m128d _mm_cmpngt_pd(__m128d,__m128d);
	//__m128d _mm_cmpnge_sd(__m128d,__m128d);
	//__m128d _mm_cmpnge_pd(__m128d,__m128d);
	//__m128d _mm_cmpord_sd(__m128d,__m128d);
	//__m128d _mm_cmpord_pd(__m128d,__m128d);
	//__m128d _mm_cmpunord_sd(__m128d,__m128d);
	//__m128d _mm_cmpunord_pd(__m128d,__m128d);
	//int _mm_comieq_sd(__m128d,__m128d);
	//int _mm_comilt_sd(__m128d,__m128d);
	//int _mm_comile_sd(__m128d,__m128d);
	//int _mm_comigt_sd(__m128d,__m128d);
	//int _mm_comige_sd(__m128d,__m128d);
	//int _mm_comineq_sd(__m128d,__m128d);
	//int _mm_ucomieq_sd(__m128d,__m128d);
	//int _mm_ucomilt_sd(__m128d,__m128d);
	//int _mm_ucomile_sd(__m128d,__m128d);
	//int _mm_ucomigt_sd(__m128d,__m128d);
	//int _mm_ucomige_sd(__m128d,__m128d);
	//int _mm_ucomineq_sd(__m128d,__m128d);
	//__m128 _mm_cvtpd_ps(__m128d);
	//__m128d _mm_cvtps_pd(__m128);
	//__m128d _mm_cvtepi32_pd(__m128i);
	//__m128i _mm_cvtpd_epi32(__m128d);
	//int _mm_cvtsd_si32(__m128d);
	//__m128 _mm_cvtsd_ss(__m128,__m128d);
	//__m128d _mm_cvtsi32_sd(__m128d,int);
	//__m128d _mm_cvtss_sd(__m128d,__m128);
	//__m128i _mm_cvttpd_epi32(__m128d);
	//int _mm_cvttsd_si32(__m128d);
	//__m128 _mm_cvtepi32_ps(__m128i);
	//__m128i _mm_cvtps_epi32(__m128);
	//__m128i _mm_cvttps_epi32(__m128);
	//__m128d _mm_unpackhi_pd(__m128d,__m128d);
	//__m128d _mm_unpacklo_pd(__m128d,__m128d);
	//int _mm_movemask_pd(__m128d);
	//__m128d _mm_shuffle_pd(__m128d,__m128d,int);
	//__m128d _mm_load_pd(double const*);
	//__m128d _mm_load1_pd(double const*);
	//__m128d _mm_loadr_pd(double const*);
	//__m128d _mm_loadu_pd(double const*);
	//__m128d _mm_load_sd(double const*);
	//__m128d _mm_loadh_pd(__m128d,double const*);
	//__m128d _mm_loadl_pd(__m128d,double const*);
	//__m128d _mm_set_sd(double);
	//__m128d _mm_set1_pd(double);
	//__m128d _mm_set_pd(double,double);
	//__m128d _mm_setr_pd(double,double);
	//__m128d _mm_setzero_pd(void);
	//__m128d _mm_move_sd(__m128d,__m128d);
	//void _mm_store_sd(double*,__m128d);
	//void _mm_store1_pd(double*,__m128d);
	//void _mm_store_pd(double*,__m128d);
	//void _mm_storeu_pd(double*,__m128d);
	//void _mm_storer_pd(double*,__m128d);
	//void _mm_storeh_pd(double*,__m128d);
	//void _mm_storel_pd(double*,__m128d);
	//__m128i _mm_add_epi8(__m128i,__m128i);
	//__m128i _mm_add_epi16(__m128i,__m128i);
	//__m128i _mm_add_epi32(__m128i,__m128i);
	//__m128i _mm_add_epi64(__m128i,__m128i);
	//__m128i _mm_adds_epi8(__m128i,__m128i);
	//__m128i _mm_adds_epi16(__m128i,__m128i);
	//__m128i _mm_adds_epu8(__m128i,__m128i);
	//__m128i _mm_adds_epu16(__m128i,__m128i);
	//__m128i _mm_avg_epu8(__m128i,__m128i);
	//__m128i _mm_avg_epu16(__m128i,__m128i);
	//__m128i _mm_madd_epi16(__m128i,__m128i);
	//__m128i _mm_max_epi16(__m128i,__m128i);
	//__m128i _mm_max_epu8(__m128i,__m128i);
	//__m128i _mm_min_epi16(__m128i,__m128i);
	//__m128i _mm_min_epu8(__m128i,__m128i);
	//__m128i _mm_mulhi_epi16(__m128i,__m128i);
	//__m128i _mm_mulhi_epu16(__m128i,__m128i);
	//__m128i _mm_mullo_epi16(__m128i,__m128i);
	//__m128i _mm_mul_epu32(__m128i,__m128i);
	//__m128i _mm_sad_epu8(__m128i,__m128i);
	//__m128i _mm_sub_epi8(__m128i,__m128i);
	//__m128i _mm_sub_epi16(__m128i,__m128i);
	//__m128i _mm_sub_epi32(__m128i,__m128i);
	//__m128i _mm_sub_epi64(__m128i,__m128i);
	//__m128i _mm_subs_epi8(__m128i,__m128i);
	//__m128i _mm_subs_epi16(__m128i,__m128i);
	//__m128i _mm_subs_epu8(__m128i,__m128i);
	//__m128i _mm_subs_epu16(__m128i,__m128i);
	//__m128i _mm_andnot_si128(__m128i,__m128i);
	//__m128i _mm_and_si128(__m128i,__m128i);
	//__m128i _mm_or_si128(__m128i,__m128i);
	//__m128i _mm_xor_si128(__m128i,__m128i);
	//__m128i _mm_slli_si128(__m128i,int);
	//__m128i _mm_slli_epi16(__m128i,int);
	//__m128i _mm_sll_epi16(__m128i,__m128i);
	//__m128i _mm_slli_epi32(__m128i,int);
	//__m128i _mm_sll_epi32(__m128i,__m128i);
	//__m128i _mm_slli_epi64(__m128i,int);
	//__m128i _mm_sll_epi64(__m128i,__m128i);
	//__m128i _mm_srai_epi16(__m128i,int);
	//__m128i _mm_sra_epi16(__m128i,__m128i);
	//__m128i _mm_srai_epi32(__m128i,int);
	//__m128i _mm_sra_epi32(__m128i,__m128i);
	//__m128i _mm_srli_si128(__m128i,int);
	//__m128i _mm_srli_epi16(__m128i,int);
	//__m128i _mm_srl_epi16(__m128i,__m128i);
	//__m128i _mm_srli_epi32(__m128i,int);
	//__m128i _mm_srl_epi32(__m128i,__m128i);
	//__m128i _mm_srli_epi64(__m128i,int);
	//__m128i _mm_srl_epi64(__m128i,__m128i);
	//__m128i _mm_cmpeq_epi8(__m128i,__m128i);
	//__m128i _mm_cmpeq_epi16(__m128i,__m128i);
	//__m128i _mm_cmpeq_epi32(__m128i,__m128i);
	//__m128i _mm_cmpgt_epi8(__m128i,__m128i);
	//__m128i _mm_cmpgt_epi16(__m128i,__m128i);
	//__m128i _mm_cmpgt_epi32(__m128i,__m128i);
	//__m128i _mm_cmplt_epi8(__m128i,__m128i);
	//__m128i _mm_cmplt_epi16(__m128i,__m128i);
	//__m128i _mm_cmplt_epi32(__m128i,__m128i);
	//__m128i _mm_cvtsi32_si128(int);
	//int _mm_cvtsi128_si32(__m128i);
	//__m128i _mm_packs_epi16(__m128i,__m128i);
	//__m128i _mm_packs_epi32(__m128i,__m128i);
	//__m128i _mm_packus_epi16(__m128i,__m128i);
	//int _mm_extract_epi16(__m128i,int);
	//__m128i _mm_insert_epi16(__m128i,int,int);
	//int _mm_movemask_epi8(__m128i);
	//__m128i _mm_shuffle_epi32(__m128i,int);
	//__m128i _mm_shufflehi_epi16(__m128i,int);
	//__m128i _mm_shufflelo_epi16(__m128i,int);
	//__m128i _mm_unpackhi_epi8(__m128i,__m128i);
	//__m128i _mm_unpackhi_epi16(__m128i,__m128i);
	//__m128i _mm_unpackhi_epi32(__m128i,__m128i);
	//__m128i _mm_unpackhi_epi64(__m128i,__m128i);
	//__m128i _mm_unpacklo_epi8(__m128i,__m128i);
	//__m128i _mm_unpacklo_epi16(__m128i,__m128i);
	//__m128i _mm_unpacklo_epi32(__m128i,__m128i);
	//__m128i _mm_unpacklo_epi64(__m128i,__m128i);
	//__m128i _mm_load_si128(__m128i const*);
	//__m128i _mm_loadu_si128(__m128i const*);
	//__m128i _mm_loadl_epi64(__m128i const*);
	//__m128i _mm_set_epi32(int,int,int,int);
	//__m128i _mm_set_epi16(short,short,short,short,short,short,short,short);
	//__m128i _mm_set_epi8(char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char);
	//__m128i _mm_set1_epi32(int);
	//__m128i _mm_set1_epi16(short);
	//__m128i _mm_set1_epi8(char);
	//__m128i _mm_setl_epi64(__m128i);
	//__m128i _mm_setr_epi32(int,int,int,int);
	//__m128i _mm_setr_epi16(short,short,short,short,short,short,short,short);
	//__m128i _mm_setr_epi8(char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char);
	//__m128i _mm_setzero_si128(void);
	//void _mm_store_si128(__m128i*,__m128i);
	//void _mm_storeu_si128(__m128i*,__m128i);
	//void _mm_storel_epi64(__m128i*,__m128i);
	//void _mm_maskmoveu_si128(__m128i,__m128i,char*);
	//__m128i _mm_move_epi64(__m128i);
	//void _mm_stream_pd(double*,__m128d);
	//void _mm_stream_si128(__m128i*,__m128i);
	//void _mm_clflush(void const *);
	//void _mm_lfence(void);
	//void _mm_mfence(void);
	//void _mm_stream_si32(int*,int);
	//void _mm_pause(void);
	//__m128 _mm_addsub_ps(__m128,__m128);
	//__m128d _mm_addsub_pd(__m128d,__m128d);
	//__m128 _mm_hadd_ps(__m128,__m128);
	//__m128d _mm_hadd_pd(__m128d,__m128d);
	//__m128 _mm_hsub_ps(__m128,__m128);
	//__m128d _mm_hsub_pd(__m128d,__m128d);
	//__m128i _mm_lddqu_si128(__m128i const*);
	//void _mm_monitor(void const*,unsigned int,unsigned int);
	//__m128d _mm_movedup_pd(__m128d);
	//__m128d _mm_loaddup_pd(double const*);
	//__m128 _mm_movehdup_ps(__m128);
	//__m128 _mm_moveldup_ps(__m128);
	//void _mm_mwait(unsigned int,unsigned int);
	//__m128d _mm_add_sd(__m128d,__m128d);
	//__m128d _mm_add_pd(__m128d,__m128d);
	//__m128d _mm_div_sd(__m128d,__m128d);
	//__m128d _mm_div_pd(__m128d,__m128d);
	//__m128d _mm_max_sd(__m128d,__m128d);
	//__m128d _mm_max_pd(__m128d,__m128d);
	//__m128d _mm_min_sd(__m128d,__m128d);
	//__m128d _mm_min_pd(__m128d,__m128d);
	//__m128d _mm_mul_sd(__m128d,__m128d);
	//__m128d _mm_mul_pd(__m128d,__m128d);
	//__m128d _mm_sqrt_sd(__m128d, __m128d);
	//__m128d _mm_sqrt_pd(__m128d);
	//__m128d _mm_sub_sd(__m128d,__m128d);
	//__m128d _mm_sub_pd(__m128d,__m128d);
	//__m128d _mm_and_pd(__m128d,__m128d);
	//__m128d _mm_andnot_pd(__m128d,__m128d);
	//__m128d _mm_or_pd(__m128d,__m128d);
	//__m128d _mm_xor_pd(__m128d,__m128d);
	//__m128d _mm_cmpeq_sd(__m128d,__m128d);
	//__m128d _mm_cmpeq_pd(__m128d,__m128d);
	//__m128d _mm_cmplt_sd(__m128d,__m128d);
	//__m128d _mm_cmplt_pd(__m128d,__m128d);
	//__m128d _mm_cmple_sd(__m128d,__m128d);
	//__m128d _mm_cmple_pd(__m128d,__m128d);
	//__m128d _mm_cmpgt_sd(__m128d,__m128d);
	//__m128d _mm_cmpgt_pd(__m128d,__m128d);
	//__m128d _mm_cmpge_sd(__m128d,__m128d);
	//__m128d _mm_cmpge_pd(__m128d,__m128d);
	//__m128d _mm_cmpneq_sd(__m128d,__m128d);
	//__m128d _mm_cmpneq_pd(__m128d,__m128d);
	//__m128d _mm_cmpnlt_sd(__m128d,__m128d);
	//__m128d _mm_cmpnlt_pd(__m128d,__m128d);
	//__m128d _mm_cmpnle_sd(__m128d,__m128d);
	//__m128d _mm_cmpnle_pd(__m128d,__m128d);
	//__m128d _mm_cmpngt_sd(__m128d,__m128d);
	//__m128d _mm_cmpngt_pd(__m128d,__m128d);
	//__m128d _mm_cmpnge_sd(__m128d,__m128d);
	//__m128d _mm_cmpnge_pd(__m128d,__m128d);
	//__m128d _mm_cmpord_sd(__m128d,__m128d);
	//__m128d _mm_cmpord_pd(__m128d,__m128d);
	//__m128d _mm_cmpunord_sd(__m128d,__m128d);
	//__m128d _mm_cmpunord_pd(__m128d,__m128d);
	//int _mm_comieq_sd(__m128d,__m128d);
	//int _mm_comilt_sd(__m128d,__m128d);
	//int _mm_comile_sd(__m128d,__m128d);
	//int _mm_comigt_sd(__m128d,__m128d);
	//int _mm_comige_sd(__m128d,__m128d);
	//int _mm_comineq_sd(__m128d,__m128d);
	//int _mm_ucomieq_sd(__m128d,__m128d);
	//int _mm_ucomilt_sd(__m128d,__m128d);
	//int _mm_ucomile_sd(__m128d,__m128d);
	//int _mm_ucomigt_sd(__m128d,__m128d);
	//int _mm_ucomige_sd(__m128d,__m128d);
	//int _mm_ucomineq_sd(__m128d,__m128d);
	//__m128 _mm_cvtpd_ps(__m128d);
	//__m128d _mm_cvtps_pd(__m128);
	//__m128d _mm_cvtepi32_pd(__m128i);
	//__m128i _mm_cvtpd_epi32(__m128d);
	//int _mm_cvtsd_si32(__m128d);
	//__m128 _mm_cvtsd_ss(__m128,__m128d);
	//__m128d _mm_cvtsi32_sd(__m128d,int);
	//__m128d _mm_cvtss_sd(__m128d,__m128);
	//__m128i _mm_cvttpd_epi32(__m128d);
	//int _mm_cvttsd_si32(__m128d);
	//__m128 _mm_cvtepi32_ps(__m128i);
	//__m128i _mm_cvtps_epi32(__m128);
	//__m128i _mm_cvttps_epi32(__m128);
	//__m128d _mm_unpackhi_pd(__m128d,__m128d);
	//__m128d _mm_unpacklo_pd(__m128d,__m128d);
	//int _mm_movemask_pd(__m128d);
	//__m128d _mm_shuffle_pd(__m128d,__m128d,int);
	//__m128d _mm_load_pd(double const*);
	//__m128d _mm_load1_pd(double const*);
	//__m128d _mm_loadr_pd(double const*);
	//__m128d _mm_loadu_pd(double const*);
	//__m128d _mm_load_sd(double const*);
	//__m128d _mm_loadh_pd(__m128d,double const*);
	//__m128d _mm_loadl_pd(__m128d,double const*);
	//__m128d _mm_set_sd(double);
	//__m128d _mm_set1_pd(double);
	//__m128d _mm_set_pd(double,double);
	//__m128d _mm_setr_pd(double,double);
	//__m128d _mm_setzero_pd(void);
	//__m128d _mm_move_sd(__m128d,__m128d);
	//void _mm_store_sd(double*,__m128d);
	//void _mm_store1_pd(double*,__m128d);
	//void _mm_store_pd(double*,__m128d);
	//void _mm_storeu_pd(double*,__m128d);
	//void _mm_storer_pd(double*,__m128d);
	//void _mm_storeh_pd(double*,__m128d);
	//void _mm_storel_pd(double*,__m128d);
	//__m128i _mm_add_epi8(__m128i,__m128i);
	//__m128i _mm_add_epi16(__m128i,__m128i);
	//__m128i _mm_add_epi32(__m128i,__m128i);
	//__m128i _mm_add_epi64(__m128i,__m128i);
	//__m128i _mm_adds_epi8(__m128i,__m128i);
	//__m128i _mm_adds_epi16(__m128i,__m128i);
	//__m128i _mm_adds_epu8(__m128i,__m128i);
	//__m128i _mm_adds_epu16(__m128i,__m128i);
	//__m128i _mm_avg_epu8(__m128i,__m128i);
	//__m128i _mm_avg_epu16(__m128i,__m128i);
	//__m128i _mm_madd_epi16(__m128i,__m128i);
	//__m128i _mm_max_epi16(__m128i,__m128i);
	//__m128i _mm_max_epu8(__m128i,__m128i);
	//__m128i _mm_min_epi16(__m128i,__m128i);
	//__m128i _mm_min_epu8(__m128i,__m128i);
	//__m128i _mm_mulhi_epi16(__m128i,__m128i);
	//__m128i _mm_mulhi_epu16(__m128i,__m128i);
	//__m128i _mm_mullo_epi16(__m128i,__m128i);
	//__m128i _mm_mul_epu32(__m128i,__m128i);
	//__m128i _mm_sad_epu8(__m128i,__m128i);
	//__m128i _mm_sub_epi8(__m128i,__m128i);
	//__m128i _mm_sub_epi16(__m128i,__m128i);
	//__m128i _mm_sub_epi32(__m128i,__m128i);
	//__m128i _mm_sub_epi64(__m128i,__m128i);
	//__m128i _mm_subs_epi8(__m128i,__m128i);
	//__m128i _mm_subs_epi16(__m128i,__m128i);
	//__m128i _mm_subs_epu8(__m128i,__m128i);
	//__m128i _mm_subs_epu16(__m128i,__m128i);
	//__m128i _mm_andnot_si128(__m128i,__m128i);
	//__m128i _mm_and_si128(__m128i,__m128i);
	//__m128i _mm_or_si128(__m128i,__m128i);
	//__m128i _mm_xor_si128(__m128i,__m128i);
	//__m128i _mm_slli_si128(__m128i,int);
	//__m128i _mm_slli_epi16(__m128i,int);
	//__m128i _mm_sll_epi16(__m128i,__m128i);
	//__m128i _mm_slli_epi32(__m128i,int);
	//__m128i _mm_sll_epi32(__m128i,__m128i);
	//__m128i _mm_slli_epi64(__m128i,int);
	//__m128i _mm_sll_epi64(__m128i,__m128i);
	//__m128i _mm_srai_epi16(__m128i,int);
	//__m128i _mm_sra_epi16(__m128i,__m128i);
	//__m128i _mm_srai_epi32(__m128i,int);
	//__m128i _mm_sra_epi32(__m128i,__m128i);
	//__m128i _mm_srli_si128(__m128i,int);
	//__m128i _mm_srli_epi16(__m128i,int);
	//__m128i _mm_srl_epi16(__m128i,__m128i);
	//__m128i _mm_srli_epi32(__m128i,int);
	//__m128i _mm_srl_epi32(__m128i,__m128i);
	//__m128i _mm_srli_epi64(__m128i,int);
	//__m128i _mm_srl_epi64(__m128i,__m128i);
	//__m128i _mm_cmpeq_epi8(__m128i,__m128i);
	//__m128i _mm_cmpeq_epi16(__m128i,__m128i);
	//__m128i _mm_cmpeq_epi32(__m128i,__m128i);
	//__m128i _mm_cmpgt_epi8(__m128i,__m128i);
	//__m128i _mm_cmpgt_epi16(__m128i,__m128i);
	//__m128i _mm_cmpgt_epi32(__m128i,__m128i);
	//__m128i _mm_cmplt_epi8(__m128i,__m128i);
	//__m128i _mm_cmplt_epi16(__m128i,__m128i);
	//__m128i _mm_cmplt_epi32(__m128i,__m128i);
	//__m128i _mm_cvtsi32_si128(int);
	//int _mm_cvtsi128_si32(__m128i);
	//__m128i _mm_packs_epi16(__m128i,__m128i);
	//__m128i _mm_packs_epi32(__m128i,__m128i);
	//__m128i _mm_packus_epi16(__m128i,__m128i);
	//int _mm_extract_epi16(__m128i,int);
	//__m128i _mm_insert_epi16(__m128i,int,int);
	//int _mm_movemask_epi8(__m128i);
	//__m128i _mm_shuffle_epi32(__m128i,int);
	//__m128i _mm_shufflehi_epi16(__m128i,int);
	//__m128i _mm_shufflelo_epi16(__m128i,int);
	//__m128i _mm_unpackhi_epi8(__m128i,__m128i);
	//__m128i _mm_unpackhi_epi16(__m128i,__m128i);
	//__m128i _mm_unpackhi_epi32(__m128i,__m128i);
	//__m128i _mm_unpackhi_epi64(__m128i,__m128i);
	//__m128i _mm_unpacklo_epi8(__m128i,__m128i);
	//__m128i _mm_unpacklo_epi16(__m128i,__m128i);
	//__m128i _mm_unpacklo_epi32(__m128i,__m128i);
	//__m128i _mm_unpacklo_epi64(__m128i,__m128i);
	//__m128i _mm_load_si128(__m128i const*);
	//__m128i _mm_loadu_si128(__m128i const*);
	//__m128i _mm_loadl_epi64(__m128i const*);
	//__m128i _mm_set_epi32(int,int,int,int);
	//__m128i _mm_set_epi16(short,short,short,short,short,short,short,short);
	//__m128i _mm_set_epi8(char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char);
	//__m128i _mm_set1_epi32(int);
	//__m128i _mm_set1_epi16(short);
	//__m128i _mm_set1_epi8(char);
	//__m128i _mm_setl_epi64(__m128i);
	//__m128i _mm_setr_epi32(int,int,int,int);
	//__m128i _mm_setr_epi16(short,short,short,short,short,short,short,short);
	//__m128i _mm_setr_epi8(char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char);
	//__m128i _mm_setzero_si128(void);
	//void _mm_store_si128(__m128i*,__m128i);
	//void _mm_storeu_si128(__m128i*,__m128i);
	//void _mm_storel_epi64(__m128i*,__m128i);
	//void _mm_maskmoveu_si128(__m128i,__m128i,char*);
	//__m128i _mm_move_epi64(__m128i);
	//void _mm_stream_pd(double*,__m128d);
	//void _mm_stream_si128(__m128i*,__m128i);
	//void _mm_clflush(void const *);
	//void _mm_lfence(void);
	//void _mm_mfence(void);
	//void _mm_stream_si32(int*,int);
	//void _mm_pause(void);
	//__m128 _mm_addsub_ps(__m128,__m128);
	//__m128d _mm_addsub_pd(__m128d,__m128d);
	//__m128 _mm_hadd_ps(__m128,__m128);
	//__m128d _mm_hadd_pd(__m128d,__m128d);
	//__m128 _mm_hsub_ps(__m128,__m128);
	//__m128d _mm_hsub_pd(__m128d,__m128d);
	//__m128i _mm_lddqu_si128(__m128i const*);
	//void _mm_monitor(void const*,unsigned int,unsigned int);
	//__m128d _mm_movedup_pd(__m128d);
	//__m128d _mm_loaddup_pd(double const*);
	//__m128 _mm_movehdup_ps(__m128);
	//__m128 _mm_moveldup_ps(__m128);
	//void _mm_mwait(unsigned int,unsigned int);
	//__m128d _mm_add_sd(__m128d,__m128d);
	//__m128d _mm_add_pd(__m128d,__m128d);
	//__m128d _mm_div_sd(__m128d,__m128d);
	//__m128d _mm_div_pd(__m128d,__m128d);
	//__m128d _mm_max_sd(__m128d,__m128d);
	//__m128d _mm_max_pd(__m128d,__m128d);
	//__m128d _mm_min_sd(__m128d,__m128d);
	//__m128d _mm_min_pd(__m128d,__m128d);
	//__m128d _mm_mul_sd(__m128d,__m128d);
	//__m128d _mm_mul_pd(__m128d,__m128d);
	//__m128d _mm_sqrt_sd(__m128d, __m128d);
	//__m128d _mm_sqrt_pd(__m128d);
	//__m128d _mm_sub_sd(__m128d,__m128d);
	//__m128d _mm_sub_pd(__m128d,__m128d);
	//__m128d _mm_and_pd(__m128d,__m128d);
	//__m128d _mm_andnot_pd(__m128d,__m128d);
	//__m128d _mm_or_pd(__m128d,__m128d);
	//__m128d _mm_xor_pd(__m128d,__m128d);
	//__m128d _mm_cmpeq_sd(__m128d,__m128d);
	//__m128d _mm_cmpeq_pd(__m128d,__m128d);
	//__m128d _mm_cmplt_sd(__m128d,__m128d);
	//__m128d _mm_cmplt_pd(__m128d,__m128d);
	//__m128d _mm_cmple_sd(__m128d,__m128d);
	//__m128d _mm_cmple_pd(__m128d,__m128d);
	//__m128d _mm_cmpgt_sd(__m128d,__m128d);
	//__m128d _mm_cmpgt_pd(__m128d,__m128d);
	//__m128d _mm_cmpge_sd(__m128d,__m128d);
	//__m128d _mm_cmpge_pd(__m128d,__m128d);
	//__m128d _mm_cmpneq_sd(__m128d,__m128d);
	//__m128d _mm_cmpneq_pd(__m128d,__m128d);
	//__m128d _mm_cmpnlt_sd(__m128d,__m128d);
	//__m128d _mm_cmpnlt_pd(__m128d,__m128d);
	//__m128d _mm_cmpnle_sd(__m128d,__m128d);
	//__m128d _mm_cmpnle_pd(__m128d,__m128d);
	//__m128d _mm_cmpngt_sd(__m128d,__m128d);
	//__m128d _mm_cmpngt_pd(__m128d,__m128d);
	//__m128d _mm_cmpnge_sd(__m128d,__m128d);
	//__m128d _mm_cmpnge_pd(__m128d,__m128d);
	//__m128d _mm_cmpord_sd(__m128d,__m128d);
	//__m128d _mm_cmpord_pd(__m128d,__m128d);
	//__m128d _mm_cmpunord_sd(__m128d,__m128d);
	//__m128d _mm_cmpunord_pd(__m128d,__m128d);
	//int _mm_comieq_sd(__m128d,__m128d);
	//int _mm_comilt_sd(__m128d,__m128d);
	//int _mm_comile_sd(__m128d,__m128d);
	//int _mm_comigt_sd(__m128d,__m128d);
	//int _mm_comige_sd(__m128d,__m128d);
	//int _mm_comineq_sd(__m128d,__m128d);
	//int _mm_ucomieq_sd(__m128d,__m128d);
	//int _mm_ucomilt_sd(__m128d,__m128d);
	//int _mm_ucomile_sd(__m128d,__m128d);
	//int _mm_ucomigt_sd(__m128d,__m128d);
	//int _mm_ucomige_sd(__m128d,__m128d);
	//int _mm_ucomineq_sd(__m128d,__m128d);
	//__m128 _mm_cvtpd_ps(__m128d);
	//__m128d _mm_cvtps_pd(__m128);
	//__m128d _mm_cvtepi32_pd(__m128i);
	//__m128i _mm_cvtpd_epi32(__m128d);
	//int _mm_cvtsd_si32(__m128d);
	//__m128 _mm_cvtsd_ss(__m128,__m128d);
	//__m128d _mm_cvtsi32_sd(__m128d,int);
	//__m128d _mm_cvtss_sd(__m128d,__m128);
	//__m128i _mm_cvttpd_epi32(__m128d);
	//int _mm_cvttsd_si32(__m128d);
	//__m128 _mm_cvtepi32_ps(__m128i);
	//__m128i _mm_cvtps_epi32(__m128);
	//__m128i _mm_cvttps_epi32(__m128);
	//__MACHINEX86X_NOX64(__m64 _mm_cvtpd_pi32(__m128d);
	//__MACHINEX86X_NOX64(__m64 _mm_cvttpd_pi32(__m128d)
	//__m128d _mm_unpackhi_pd(__m128d,__m128d);
	//__m128d _mm_unpacklo_pd(__m128d,__m128d);
	//int _mm_movemask_pd(__m128d);
	//__m128d _mm_shuffle_pd(__m128d,__m128d,int);
	//__m128d _mm_load_pd(double const*);
	//__m128d _mm_load1_pd(double const*);
	//__m128d _mm_loadr_pd(double const*);
	//__m128d _mm_loadu_pd(double const*);
	//__m128d _mm_load_sd(double const*);
	//__m128d _mm_loadh_pd(__m128d,double const*);
	//__m128d _mm_loadl_pd(__m128d,double const*);
	//__m128d _mm_set_sd(double);
	//__m128d _mm_set1_pd(double);
	//__m128d _mm_set_pd(double,double);
	//__m128d _mm_setr_pd(double,double);
	//__m128d _mm_setzero_pd(void);
	//__m128d _mm_move_sd(__m128d,__m128d);
	//void _mm_store_sd(double*,__m128d);
	//void _mm_store1_pd(double*,__m128d);
	//void _mm_store_pd(double*,__m128d);
	//void _mm_storeu_pd(double*,__m128d);
	//void _mm_storer_pd(double*,__m128d);
	//void _mm_storeh_pd(double*,__m128d);
	//void _mm_storel_pd(double*,__m128d);
	//__m128i _mm_add_epi8(__m128i,__m128i);
	//__m128i _mm_add_epi16(__m128i,__m128i);
	//__m128i _mm_add_epi32(__m128i,__m128i);
	//__m128i _mm_add_epi64(__m128i,__m128i);
	//__m128i _mm_adds_epi8(__m128i,__m128i);
	//__m128i _mm_adds_epi16(__m128i,__m128i);
	//__m128i _mm_adds_epu8(__m128i,__m128i);
	//__m128i _mm_adds_epu16(__m128i,__m128i);
	//__m128i _mm_avg_epu8(__m128i,__m128i);
	//__m128i _mm_avg_epu16(__m128i,__m128i);
	//__m128i _mm_madd_epi16(__m128i,__m128i);
	//__m128i _mm_max_epi16(__m128i,__m128i);
	//__m128i _mm_max_epu8(__m128i,__m128i);
	//__m128i _mm_min_epi16(__m128i,__m128i);
	//__m128i _mm_min_epu8(__m128i,__m128i);
	//__m128i _mm_mulhi_epi16(__m128i,__m128i);
	//__m128i _mm_mulhi_epu16(__m128i,__m128i);
	//__m128i _mm_mullo_epi16(__m128i,__m128i);
	//__m128i _mm_mul_epu32(__m128i,__m128i);
	//__m128i _mm_sad_epu8(__m128i,__m128i);
	//__m128i _mm_sub_epi8(__m128i,__m128i);
	//__m128i _mm_sub_epi16(__m128i,__m128i);
	//__m128i _mm_sub_epi32(__m128i,__m128i);
	//__m128i _mm_sub_epi64(__m128i,__m128i);
	//__m128i _mm_subs_epi8(__m128i,__m128i);
	//__m128i _mm_subs_epi16(__m128i,__m128i);
	//__m128i _mm_subs_epu8(__m128i,__m128i);
	//__m128i _mm_subs_epu16(__m128i,__m128i);
	//__m128i _mm_andnot_si128(__m128i,__m128i);
	//__m128i _mm_and_si128(__m128i,__m128i);
	//__m128i _mm_or_si128(__m128i,__m128i);
	//__m128i _mm_xor_si128(__m128i,__m128i);
	//__m128i _mm_slli_si128(__m128i,int);
	//__m128i _mm_slli_epi16(__m128i,int);
	//__m128i _mm_sll_epi16(__m128i,__m128i);
	//__m128i _mm_slli_epi32(__m128i,int);
	//__m128i _mm_sll_epi32(__m128i,__m128i);
	//__m128i _mm_slli_epi64(__m128i,int);
	//__m128i _mm_sll_epi64(__m128i,__m128i);
	//__m128i _mm_srai_epi16(__m128i,int);
	//__m128i _mm_sra_epi16(__m128i,__m128i);
	//__m128i _mm_srai_epi32(__m128i,int);
	//__m128i _mm_sra_epi32(__m128i,__m128i);
	//__m128i _mm_srli_si128(__m128i,int);
	//__m128i _mm_srli_epi16(__m128i,int);
	//__m128i _mm_srl_epi16(__m128i,__m128i);
	//__m128i _mm_srli_epi32(__m128i,int);
	//__m128i _mm_srl_epi32(__m128i,__m128i);
	//__m128i _mm_srli_epi64(__m128i,int);
	//__m128i _mm_srl_epi64(__m128i,__m128i);
	//__m128i _mm_cmpeq_epi8(__m128i,__m128i);
	//__m128i _mm_cmpeq_epi16(__m128i,__m128i);
	//__m128i _mm_cmpeq_epi32(__m128i,__m128i);
	//__m128i _mm_cmpgt_epi8(__m128i,__m128i);
	//__m128i _mm_cmpgt_epi16(__m128i,__m128i);
	//__m128i _mm_cmpgt_epi32(__m128i,__m128i);
	//__m128i _mm_cmplt_epi8(__m128i,__m128i);
	//__m128i _mm_cmplt_epi16(__m128i,__m128i);
	//__m128i _mm_cmplt_epi32(__m128i,__m128i);
	//__m128i _mm_cvtsi32_si128(int);
	//int _mm_cvtsi128_si32(__m128i);
	//__m128i _mm_packs_epi16(__m128i,__m128i);
	//__m128i _mm_packs_epi32(__m128i,__m128i);
	//__m128i _mm_packus_epi16(__m128i,__m128i);
	//int _mm_extract_epi16(__m128i,int);
	//__m128i _mm_insert_epi16(__m128i,int,int);
	//int _mm_movemask_epi8(__m128i);
	//__m128i _mm_shuffle_epi32(__m128i,int);
	//__m128i _mm_shufflehi_epi16(__m128i,int);
	//__m128i _mm_shufflelo_epi16(__m128i,int);
	//__m128i _mm_unpackhi_epi8(__m128i,__m128i);
	//__m128i _mm_unpackhi_epi16(__m128i,__m128i);
	//__m128i _mm_unpackhi_epi32(__m128i,__m128i);
	//__m128i _mm_unpackhi_epi64(__m128i,__m128i);
	//__m128i _mm_unpacklo_epi8(__m128i,__m128i);
	//__m128i _mm_unpacklo_epi16(__m128i,__m128i);
	//__m128i _mm_unpacklo_epi32(__m128i,__m128i);
	//__m128i _mm_unpacklo_epi64(__m128i,__m128i);
	//__m128i _mm_load_si128(__m128i const*);
	//__m128i _mm_loadu_si128(__m128i const*);
	//__m128i _mm_loadl_epi64(__m128i const*);
	//__m128i _mm_set_epi32(int,int,int,int);
	//__m128i _mm_set_epi16(short,short,short,short,short,short,short,short);
	//__m128i _mm_set_epi8(char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char);
	//__m128i _mm_set1_epi32(int);
	//__m128i _mm_set1_epi16(short);
	//__m128i _mm_set1_epi8(char);
	//__m128i _mm_setl_epi64(__m128i);
	//__m128i _mm_setr_epi32(int,int,int,int);
	//__m128i _mm_setr_epi16(short,short,short,short,short,short,short,short);
	//__m128i _mm_setr_epi8(char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char);
	//__m128i _mm_setzero_si128(void);
	//void _mm_store_si128(__m128i*,__m128i);
	//void _mm_storeu_si128(__m128i*,__m128i);
	//void _mm_storel_epi64(__m128i*,__m128i);
	//void _mm_maskmoveu_si128(__m128i,__m128i,char*);
	//__m128i _mm_move_epi64(__m128i);
	//void _mm_stream_pd(double*,__m128d);
	//void _mm_stream_si128(__m128i*,__m128i);
	//void _mm_clflush(void const *);
	//void _mm_lfence(void);
	//void _mm_mfence(void);
	//void _mm_stream_si32(int*,int);
	//void _mm_pause(void);
	//__m128 _mm_addsub_ps(__m128,__m128);
	//__m128d _mm_addsub_pd(__m128d,__m128d);
	//__m128 _mm_hadd_ps(__m128,__m128);
	//__m128d _mm_hadd_pd(__m128d,__m128d);
	//__m128 _mm_hsub_ps(__m128,__m128);
	//__m128d _mm_hsub_pd(__m128d,__m128d);
	//__m128i _mm_lddqu_si128(__m128i const*);
	//void _mm_monitor(void const*,unsigned int,unsigned int);
	//__m128d _mm_movedup_pd(__m128d);
	//__m128d _mm_loaddup_pd(double const*);
	//__m128 _mm_movehdup_ps(__m128);
	//__m128 _mm_moveldup_ps(__m128);
	//void _mm_mwait(unsigned int,unsigned int);	

#endif//( QOR_ARCH == QOR_ARCH_X86_32 ) 


//32 bit machine only
#if		( QOR_ARCH == QOR_ARCH_X86_32 )

	long				_InterlockedAddLargeStatistic( __int64 volatile* , long );
	unsigned long		__readcr0(void);
	unsigned long		__readcr2(void);
	unsigned long		__readcr3(void);
	unsigned long		__readcr4(void);
	void				__writecr0(unsigned);
	void				__writecr3(unsigned);
	void				__writecr4(unsigned);
	unsigned char		__readfsbyte(unsigned long Offset);
	unsigned short		__readfsword(unsigned long Offset);
	unsigned long		__readfsdword(unsigned long Offset);
	unsigned __int64	__readfsqword(unsigned long Offset);
	void				__writefsbyte(unsigned long Offset, unsigned char Data);
	void				__writefsword(unsigned long Offset, unsigned short Data);
	void				__writefsdword(unsigned long Offset, unsigned long Data);
	void				__writefsqword(unsigned long Offset, unsigned __int64 Data);

#endif//( QOR_ARCH == QOR_ARCH_X86_32 )


//If the architecture is Intel 32 bit x86 like
#if ( QOR_ARCH == QOR_ARCH_X86_32 )

	//All 32 and 64 bit Intel like
	void				__cdecl _disable(void);
	__int64				__emul(int,int);
	unsigned __int64	__emulu(unsigned int,unsigned int);
	void				__cdecl _enable(void);
	long				__cdecl _InterlockedDecrement(long volatile *);
	long				_InterlockedExchange(long volatile *, long);
	long				_InterlockedExchangeAdd(long volatile *, long);
	long				_InterlockedCompareExchange (long volatile *, long, long);
	__int64				_InterlockedCompareExchange64(__int64 volatile *, __int64, __int64);
	long				__cdecl _InterlockedIncrement(long volatile *);
	//int					__cdecl _inp(unsigned short);
	int					__cdecl inp(unsigned short);
	unsigned long		__cdecl _inpd(unsigned short);
	unsigned long		__cdecl inpd(unsigned short);
	//unsigned short		__cdecl _inpw(unsigned short);
	unsigned short		__cdecl inpw(unsigned short);
	void				__cpuid( int a[ 4 ], int b );

#endif//( QOR_ARCH == QOR_ARCH_X86_32 )

