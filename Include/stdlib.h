//stdlib.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_STDLIB_H_3
#define QOR_STDLIB_H_3

#ifndef _QSYS_STDLIB_DEFINES
#include "SystemQOR.h"
#else
#include "CompilerQOR.h"
#endif

#include QOR_SYS_PLATFORMTYPES(stdlib)

typedef nsPlatform::HeapInfo _HEAPINFO;
typedef nsPlatform::_onexit_t _onexit_t;
typedef nsPlatform::intptr_t intptr_t;
typedef nsPlatform::uintptr_t uintptr_t;
typedef nsPlatform::locale_t locale_t;
typedef nsPlatform::_locale_t _locale_t;

#define EXIT_FAILURE			( nsPlatform::ExitFailure )				//Unsuccessful termination for exit(); evaluates to a non-zero value.
#define EXIT_SUCCESS			( nsPlatform::ExitSuccess )				//Successful termination for exit(); evaluates to 0.
#define RAND_MAX				( nsPlatform::RandMax )					//Maximum value returned by rand(); at least 32767.
#define MB_CUR_MAX				( nsPlatform::MBCurMax() )				//Maximum number of bytes in a character specified by the current locale (category LC_CTYPE ).
#define MB_CUR_MAX_L(loc)		( nsPlatform::MBCurMax_l(loc) )			//Maximum number of bytes in a character specified by locale loc (category LC_CTYPE ).

typedef nsPlatform::div_t div_t;
typedef nsPlatform::errno_t errno_t;
typedef nsPlatform::ldiv_t ldiv_t;
typedef nsPlatform::lldiv_t lldiv_t;
//typedef nsPlatform::size_t size_t	//As described in <stddef.h>.
//typedef nsPlatform::wchar_t wchar_t	//As described in <stddef.h>.

#define WEXITSTATUS( status )			( WaitExitStatus( status ) )
#define WIFEXITED( status )				( WaitIfExited( status ) )
#define WIFSIGNALED( status )			( WaitIfSignaled( status ) )
#define WIFSTOPPED( status )			( WaitIfStopped( status ) )
#define WSTOPSIG( status )				( WaitStopSignal( status ) )
#define WTERMSIG( status )				( WaitTermSignal( status ) )
#define WUNTRACED						( WaitUntraced() )
#define WNOHANG							( WaitNoHang() )


__QCMP_STARTLINKAGE_C

    __QOR_INTERFACE( __CQOR ) void _Exit( int status );
    __QOR_INTERFACE( __CQOR ) long a64l( const char* );
    __QOR_INTERFACE( __CQOR ) __QCMP_NORETURN void abort( void );
//#if( !__QCMP_DECLS_ABS )
    __QOR_INTERFACE( __CQOR ) int abs( int j );
//#endif

//#if( !__QCMP_DECLS_ATEXIT )
	//__QOR_INTERFACE(__CQOR) int __cxa_atexit(void(*)());
//#else
	extern int atexit( void ( *pFunc )( void ) );
//#endif

    __QOR_INTERFACE( __CQOR ) double atof( const char* nptr );
    __QOR_INTERFACE( __CQOR ) int atoi( const char* nptr );
    __QOR_INTERFACE( __CQOR ) long int atol( const char* nptr );
    __QOR_INTERFACE( __CQOR ) Cmp_long_long atoll( const char* nptr );
    __QOR_INTERFACE( __CQOR ) void* bsearch( const void* key, const void* base, size_t nmemb, size_t size, int ( *compar )( const void*, const void* ) );
    __QOR_INTERFACE( __CQOR ) void* bsearch_s( const void* key, const void* base, size_t nmemb, size_t SizeOfElements, int ( *pFuncCompare )( void*, const void*, const void* ), void* pvContext );

#ifndef OS_EXPORTS_STDLIB_CALLOC
    __QOR_INTERFACE( __CQOR ) void* calloc( size_t nmemb, size_t size );
#endif
    __QOR_INTERFACE( __CQOR ) div_t div( int numer, int denom );
    __QOR_INTERFACE( __CQOR ) double drand48( void );
    __QOR_INTERFACE( __CQOR ) char* ecvt( double dValue, int iDigit, int* __QCMP_RESTRICT pDecpt, int* __QCMP_RESTRICT pSign );// (LEGACY )
    __QOR_INTERFACE( __CQOR ) double erand48( unsigned short xsubi[ 3 ] );
#ifndef OS_EXPORTS_STDLIB_EXIT
     __QOR_INTERFACE( __CQOR ) __QCMP_NORETURN void exit(int status);
#endif
    __QOR_INTERFACE( __CQOR ) char* fcvt( double dValue, int iDigit, int* __QCMP_RESTRICT pDecpt, int* __QCMP_RESTRICT pSign );// (LEGACY )
#ifndef OS_EXPORTS_STDLIB_FREE
    __QOR_INTERFACE( __CQOR ) void free( void* ptr );
#endif
    __QOR_INTERFACE( __CQOR ) char* gcvt( double dValue, int iDigit, char* pBuf );// (LEGACY )
    __QOR_INTERFACE( __CQOR ) char* getenv( const char* name );
    __QOR_INTERFACE( __CQOR ) errno_t getenv_s( size_t* pReturnSize, char* pDstBuf, size_t DstSize, const char* pszVarName );
    __QOR_INTERFACE( __CQOR ) int getsubopt( char** optionp, char* const* keylistp, char** valuep );
    __QOR_INTERFACE( __CQOR ) int grantpt( int iFileDes );
    __QOR_INTERFACE( __CQOR ) char* initstate( unsigned int uiSeed, char* pState, size_t Size );
    __QOR_INTERFACE( __CQOR ) long jrand48( unsigned short xsubi[ 3 ] );
    __QOR_INTERFACE( __CQOR ) char* l64a( long lValue );
#if (!__QCMP_DECLS_LABS || __CQOR )
    __QOR_INTERFACE( __CQOR ) long int labs( long int j );
#else
    extern long int labs( long int j );
#endif
    __QOR_INTERFACE( __CQOR ) void lcong48( unsigned short param[ 7 ] );
    __QOR_INTERFACE( __CQOR ) ldiv_t ldiv( long int numer, long int denom );
#if (!__QCMP_DECLS_LLABS)
    __QOR_INTERFACE( __CQOR ) Cmp_long_long llabs( nsCompiler::CCompiler::mxc_long_long j);
#else
    extern long long int llabs( long long int j );
#endif
    __QOR_INTERFACE( __CQOR ) lldiv_t lldiv( Cmp_long_long numer, Cmp_long_long denom);
    __QOR_INTERFACE( __CQOR ) long lrand48( void );
#ifndef OS_EXPORTS_STDLIB_MALLOC
    __QOR_INTERFACE( __CQOR ) void* malloc( size_t size );
#endif
    __QOR_INTERFACE( __CQOR ) int mblen( const char*s, size_t n );
    __QOR_INTERFACE( __CQOR ) size_t mbstowcs( wchar_t* __QCMP_RESTRICT pwcs, const char* __QCMP_RESTRICT s, size_t n );
    __QOR_INTERFACE( __CQOR ) errno_t mbstowcs_s( size_t* pNumOfCharConverted, wchar_t* pDstBuf, size_t SizeInWords, const char* s, size_t MaxCount );
    __QOR_INTERFACE( __CQOR ) int mbtowc( wchar_t* __QCMP_RESTRICT pwc, const char* __QCMP_RESTRICT s, size_t n );

	__QOR_INTERFACE( __CQOR ) char* mkdtemp(char *);
    __QOR_INTERFACE( __CQOR ) char* mktemp( char* pTemplate );// (LEGACY )
    __QOR_INTERFACE( __CQOR ) int mkstemp( char* pTemplate );
    __QOR_INTERFACE( __CQOR ) long mrand48( void );
    __QOR_INTERFACE( __CQOR ) long nrand48( unsigned short xsubi[ 3 ] );
    __QOR_INTERFACE( __CQOR ) int posix_memalign( void** memptr, size_t alignment, size_t size );
    __QOR_INTERFACE( __CQOR ) int posix_openpt( int oflag );
    __QOR_INTERFACE( __CQOR ) char* ptsname( int iFileDes );
    __QOR_INTERFACE( __CQOR ) int putenv( const char* envstring );
    __QOR_INTERFACE( __CQOR ) int _putenv( const char* envstring );
	__QOR_INTERFACE( __CQOR ) errno_t _putenv_s( const char* name, const char* value );
    __QOR_INTERFACE( __CQOR ) void qsort( void* base, size_t nmemb, size_t size, int ( *compar )( const void*, const void* ));
    __QOR_INTERFACE( __CQOR ) void qsort_s( void* base, size_t nmemb, size_t SizeOfElements, int ( *pFuncCompare )( void*, const void*, const void* ), void* pvContext );
    __QOR_INTERFACE( __CQOR ) int rand( void );
    __QOR_INTERFACE( __CQOR ) errno_t rand_s( unsigned int* puiRandomValue );
    __QOR_INTERFACE( __CQOR ) int rand_r( unsigned int* pSeed );
    __QOR_INTERFACE( __CQOR ) long random( void );
#ifndef OS_EXPORTS_STDLIB_REALLOC
    __QOR_INTERFACE( __CQOR ) void* realloc( void* ptr, size_t size );
#endif
    __QOR_INTERFACE( __CQOR ) char* realpath( const char* __QCMP_RESTRICT file_name, char* __QCMP_RESTRICT resolved_name );
    __QOR_INTERFACE( __CQOR ) unsigned short* seed48( unsigned short seed16v[ 3 ] );
    __QOR_INTERFACE( __CQOR ) int setenv( const char* envname, const char* envval, int overwrite );
    __QOR_INTERFACE( __CQOR ) void setkey( const char* key );
    __QOR_INTERFACE( __CQOR ) char* setstate( const char* );
    __QOR_INTERFACE( __CQOR ) void srand( unsigned int seed );
    __QOR_INTERFACE( __CQOR ) void srand48( long );
    __QOR_INTERFACE( __CQOR ) void srandom( unsigned int uiSeed );
    __QOR_INTERFACE( __CQOR ) double strtod( const char* __QCMP_RESTRICT nptr, char** __QCMP_RESTRICT endptr );
    __QOR_INTERFACE( __CQOR ) float strtof( const char* __QCMP_RESTRICT nptr, char** __QCMP_RESTRICT endptr );
    __QOR_INTERFACE( __CQOR ) long int strtol( const char* __QCMP_RESTRICT nptr, char** __QCMP_RESTRICT endptr, int base );
    __QOR_INTERFACE( __CQOR ) long double strtold(const char* __QCMP_RESTRICT nptr, char** __QCMP_RESTRICT endptr );
    __QOR_INTERFACE( __CQOR ) Cmp_long_long strtoll( const char* __QCMP_RESTRICT nptr, char** __QCMP_RESTRICT endptr, int base );
    __QOR_INTERFACE( __CQOR ) unsigned long int strtoul( const char* __QCMP_RESTRICT nptr, char** __QCMP_RESTRICT endptr, int base );
    __QOR_INTERFACE( __CQOR ) Cmp_unsigned_long_long strtoull( const char* __QCMP_RESTRICT nptr, char** __QCMP_RESTRICT endptr, int base );
    __QOR_INTERFACE( __CQOR ) int system( const char* string );
    __QOR_INTERFACE( __CQOR ) int unlockpt( int );
    __QOR_INTERFACE( __CQOR ) int unsetenv( const char* );
    __QOR_INTERFACE( __CQOR ) size_t wcstombs( char* __QCMP_RESTRICT s, const wchar_t* __QCMP_RESTRICT pwcs, size_t n );
    __QOR_INTERFACE( __CQOR ) errno_t wcstombs_s( size_t* pReturnValue, char* mbstr, size_t sizeInBytes, const wchar_t* wcstr, size_t count );
    __QOR_INTERFACE( __CQOR ) int wctomb( char* s, wchar_t wchar );
    __QOR_INTERFACE( __CQOR ) errno_t wctomb_s( int* pRetValue, char* mbchar, size_t sizeInBytes, wchar_t wchar );
	__QOR_INTERFACE( __CQOR ) char* _ui64toa( Cmp_unsigned__int64 value, char* str, int radix );
	__QOR_INTERFACE( __CQOR ) errno_t _ui64toa_s( Cmp_unsigned__int64 value, char* buffer, size_t sizeInCharacters, int radix );
	__QOR_INTERFACE( __CQOR ) wchar_t* _ui64tow( Cmp_unsigned__int64 value, wchar_t* str, int radix );
	__QOR_INTERFACE( __CQOR ) errno_t _ui64tow_s( Cmp_unsigned__int64 value, wchar_t* buffer, size_t sizeInCharacters, int radix );
	__QOR_INTERFACE( __CQOR ) char* _ultoa( unsigned long value, char* str, int radix );
	__QOR_INTERFACE( __CQOR ) wchar_t* _ultow( unsigned long value, wchar_t* str, int radix );
	__QOR_INTERFACE( __CQOR ) errno_t _ultoa_s( unsigned long value, char* str, size_t sizeOfstr, int radix );
	__QOR_INTERFACE( __CQOR ) errno_t _ultow_s( unsigned long value, wchar_t* str, size_t sizeOfstr, int radix );

	__QOR_INTERFACE( __CQOR ) char*& _pgmptr( void );
	__QOR_INTERFACE( __CQOR ) wchar_t** _wpgmptr( void );
	__QOR_INTERFACE( __CQOR ) wchar_t** _wenviron( void );

	__QOR_INTERFACE( __CQOR ) void _splitpath( const char* path, char* drive, char* dir, char* fname, char* ext );
	__QOR_INTERFACE( __CQOR ) void _wsplitpath( const wchar_t* path, wchar_t* drive, wchar_t* dir, wchar_t* fname, wchar_t* ext );

	__QOR_INTERFACE( __CQOR ) int _set_sbh_threshold( size_t size );
	__QOR_INTERFACE( __CQOR ) errno_t _set_fmode( int mode );
	__QOR_INTERFACE( __CQOR ) errno_t _set_fileinfo( int value );
	__QOR_INTERFACE( __CQOR ) int _set_error_mode( int modeval );
	__QOR_INTERFACE( __CQOR ) errno_t _set_errno( int value );
	__QOR_INTERFACE( __CQOR ) errno_t _set_doserrno( int value );
	__QOR_INTERFACE( __CQOR ) errno_t _searchenv_s( const char* filename, const char* varname, char* pathname, size_t numberOfElements );
	__QOR_INTERFACE( __CQOR ) void _searchenv( const char* filename, const char* varname, char* pathname );
	__QOR_INTERFACE( __CQOR ) int _resetstkoflw( void );
	__QOR_INTERFACE( __CQOR ) void *_realloc_dbg( void* userData, size_t newSize, int blockType, const char* filename, int linenumber );

	__QOR_INTERFACE( __CQOR ) ::_onexit_t _onexit( _onexit_t function );

	__QOR_INTERFACE( __CQOR ) size_t _msize( void* memblock );
	//_msize_debug //TODO: determine prototype
	__QOR_INTERFACE( __CQOR ) void* _malloc_dbg( size_t size, int blockType, const char* filename, int linenumber );
	__QOR_INTERFACE( __CQOR ) void _makepath( char* path, const char* drive, const char* dir, const char* fname, const char* ext );
	__QOR_INTERFACE( __CQOR ) errno_t _makepath_s( char* path, size_t sizeInBytes, const char* drive, const char* dir, const char* fname, const char* ext );
	__QOR_INTERFACE( __CQOR ) char* _ltoa( long value, char* str, int radix );
	__QOR_INTERFACE( __CQOR ) wchar_t* _ltow( long value, wchar_t* str, int radix );
	__QOR_INTERFACE( __CQOR ) errno_t _ltoa_s( long value, char* str, size_t sizeOfstr, int radix );
	__QOR_INTERFACE( __CQOR ) errno_t _ltow_s( long value, wchar_t* str, size_t sizeOfstr, int radix );
	__QOR_INTERFACE( __CQOR ) unsigned long _lrotl( unsigned long value, int shift );
	__QOR_INTERFACE( __CQOR ) unsigned long _lrotr( unsigned long value, int shift );

	//__QOR_INTERFACE( __CQOR ) void _local_unwind2( ::PEXCEPTION_REGISTRATION xr, int stop );
	__QOR_INTERFACE( __CQOR ) char* _itoa( int value, char* str, int radix );

	__QOR_INTERFACE( __CQOR ) errno_t _itoa_s( int value, char* buffer, size_t sizeInCharacters, int radix );
	__QOR_INTERFACE( __CQOR ) wchar_t* _itow( int value, wchar_t* str, int radix );
	__QOR_INTERFACE( __CQOR ) errno_t _itow_s( int value, wchar_t* buffer, size_t sizeInCharacters, int radix );

	__QOR_INTERFACE( __CQOR ) char* _i64toa( Cmp__int64 value, char* str, int radix );
	__QOR_INTERFACE( __CQOR ) errno_t _i64toa_s( Cmp__int64 value, char* buffer, size_t sizeInCharacters, int radix );
	__QOR_INTERFACE( __CQOR ) wchar_t* _i64tow( Cmp__int64 value, wchar_t* str, int radix  );
	__QOR_INTERFACE( __CQOR ) errno_t _i64tow_s( Cmp__int64 value, wchar_t* buffer, size_t sizeInCharacters, int radix );
	__QOR_INTERFACE( __CQOR ) int _heapadd( void* memblock, size_t size );
	__QOR_INTERFACE( __CQOR ) int _heapchk( void );
	__QOR_INTERFACE( __CQOR ) int _heapmin( void );
	__QOR_INTERFACE( __CQOR ) int _heapset( unsigned int fill );
	//_heapused TODO: determine signature
	__QOR_INTERFACE( __CQOR ) int _heapwalk( _HEAPINFO* entryinfo );
	__QOR_INTERFACE( __CQOR ) int _getpid( void );
	__QOR_INTERFACE( __CQOR ) errno_t _get_wpgmptr( wchar_t** pValue );
	__QOR_INTERFACE( __CQOR ) size_t _get_sbh_threshold( void );
	__QOR_INTERFACE( __CQOR ) errno_t _get_pgmptr( char** pValue );
	__QOR_INTERFACE( __CQOR ) intptr_t _get_heap_handle( void );
	__QOR_INTERFACE( __CQOR ) errno_t _get_doserrno( int* pValue );
	//_get_environ
	__QOR_INTERFACE( __CQOR ) errno_t _get_errno( int* pValue );
	__QOR_INTERFACE( __CQOR ) char* _gcvt( double value, int digits, char* buffer );
	__QOR_INTERFACE( __CQOR ) errno_t _gcvt_s( char* buffer, size_t sizeInBytes, double value, int digits );
	__QOR_INTERFACE( __CQOR ) char* _fullpath( char* absPath, const char* relPath, size_t maxLength );
	__QOR_INTERFACE( __CQOR ) char* _fullpath_dbg( char* absPath, const char* relPath, size_t maxLength, int blockType, const char* filename, int linenumber );
	__QOR_INTERFACE( __CQOR ) void _free_dbg( void* userData, int blockType );
	__QOR_INTERFACE( __CQOR ) void _freea( void* memblock );
	//_freea_s
	__QOR_INTERFACE( __CQOR ) char* _fcvt( double value, int count, int* dec, int* sign );
	__QOR_INTERFACE( __CQOR ) errno_t _fcvt_s( char* buffer, size_t sizeInBytes, double value, int count, int* dec, int* sign );
	__QOR_INTERFACE( __CQOR ) void* _expand_dbg( void* userData, size_t newSize, int blockType, const char* filename, int linenumber );
	__QOR_INTERFACE( __CQOR ) void* _expand( void* memblock, size_t size );

	__QOR_INTERFACE( __CQOR ) ::intptr_t _execl( const char* cmdname, const char* arg0, ... );
	__QOR_INTERFACE( __CQOR ) ::intptr_t _execle( const char* cmdname, const char* arg0, ... );
	__QOR_INTERFACE( __CQOR ) ::intptr_t _execlp( const char* cmdname, const char* arg0, ... );
	__QOR_INTERFACE( __CQOR ) ::intptr_t _execlpe( const char* cmdname, const char* arg0, ... );
	__QOR_INTERFACE( __CQOR ) ::intptr_t _execv( const char* cmdname, const char* const* argv );
	__QOR_INTERFACE( __CQOR ) ::intptr_t _execve( const char* cmdname, const char* const* argv, const char* const* envp );
	__QOR_INTERFACE( __CQOR ) ::intptr_t _execvp( const char* cmdname, const char* const* argv );
	__QOR_INTERFACE( __CQOR ) ::intptr_t _execvpe( const char* cmdname, const char* const* argv, const char* const* envp );
	__QOR_INTERFACE( __CQOR ) ::uintptr_t _beginthread( void(  *start_address )( void * ), unsigned stack_size, void* arglist );
	__QOR_INTERFACE( __CQOR ) ::uintptr_t _beginthreadex( void* security, unsigned stack_size, unsigned ( __QCMP_STDCALLCONVENTION *start_address )( void * ), void* arglist, unsigned initflag, unsigned* thrdaddr );
	__QOR_INTERFACE( __CQOR ) void _endthread( void );
	__QOR_INTERFACE( __CQOR ) void _endthreadex( unsigned retval );
	__QOR_INTERFACE( __CQOR ) char* _ecvt( double value, int count, int* dec, int* sign );
	__QOR_INTERFACE( __CQOR ) errno_t _ecvt_s( char* _Buffer, size_t _SizeInBytes, double _Value, int _Count, int* _Dec, int* _Sign);
	__QOR_INTERFACE( __CQOR ) ::intptr_t _cwait( int* termstat, ::intptr_t procHandle, int action );
	__QOR_INTERFACE( __CQOR ) void _cexit( void );
	__QOR_INTERFACE( __CQOR ) void _c_exit( void );
	__QOR_INTERFACE( __CQOR ) void* _calloc_dbg( size_t num, size_t size, int blockType, const char* filename, int linenumber );
	__QOR_INTERFACE( __CQOR ) int _callnewh( size_t size );
	__QOR_INTERFACE( __CQOR ) int _atodbl( double* value, char* str );
	__QOR_INTERFACE( __CQOR ) int _atodbl_l ( double* value, char* str, ::locale_t locale );
	__QOR_INTERFACE( __CQOR ) double atof_l( const char* str, ::locale_t locale );
	__QOR_INTERFACE( __CQOR ) int _atoflt_l( float* value, char* str, ::locale_t locale );
	__QOR_INTERFACE( __CQOR ) Cmp__int64 _atoi64( const char* str );
	__QOR_INTERFACE( __CQOR ) Cmp__int64 _atoi64_l( const char* str, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) int _atoi_l( const char* str, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) long _atol_l( const char* str, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) int _atoldbl( long double* value, char* str );
	__QOR_INTERFACE( __CQOR ) int _atoldbl_l( long double* value, char* str, ::locale_t locale );
	__QOR_INTERFACE( __CQOR ) void _amsg_exit ( int rterrnum );
	__QOR_INTERFACE( __CQOR ) void _aligned_free( void* memblock );
	__QOR_INTERFACE( __CQOR ) void _aligned_free_dbg( void* memblock );
	__QOR_INTERFACE( __CQOR ) void* _aligned_malloc( size_t size,  size_t alignment );
	__QOR_INTERFACE( __CQOR ) void* _aligned_malloc_dbg( size_t size, size_t alignment, const char* filename, int linenumber );
	__QOR_INTERFACE( __CQOR ) void* _aligned_offset_malloc( size_t size, size_t alignment, size_t offset );
	__QOR_INTERFACE( __CQOR ) void* _aligned_offset_malloc_dbg( size_t size, size_t alignment, size_t offset, const char* filename, int linenumber );
	__QOR_INTERFACE( __CQOR ) void* _aligned_offset_realloc( void* memblock, size_t size, size_t alignment, size_t offset );
	__QOR_INTERFACE( __CQOR ) void* _aligned_offset_realloc_dbg( void* memblock, size_t size, size_t alignment, size_t offset, const char* filename, int linenumber );
	__QOR_INTERFACE( __CQOR ) void* _aligned_realloc( void* memblock, size_t size, size_t alignment );
	__QOR_INTERFACE( __CQOR ) void* _aligned_realloc_dbg( void* memblock, size_t size, size_t alignment, const char* filename, int linenumber );
	__QOR_INTERFACE( __CQOR ) Cmp__int64 _abs64( Cmp__int64 n );
	__QOR_INTERFACE( __CQOR ) int _abnormal_termination();
	//__QOR_INTERFACE( __CQOR ) int __wgetmainargs( int* _Argc, wchar_t*** _Argv, wchar_t*** _Env, int _DoWildCard, ::_startupinfo* _StartInfo );
	__QOR_INTERFACE( __CQOR ) errno_t __wcserror_s( wchar_t* buffer, size_t numberOfElements, const wchar_t* strErrMsg );
	__QOR_INTERFACE( __CQOR ) wchar_t* __wcserror( const wchar_t* strErrMsg );
	__QOR_INTERFACE( __CQOR ) void __set_app_type( int at );
	//__QOR_INTERFACE( __CQOR ) int __getmainargs( int* _Argc, char*** _Argv, char*** _Env, int _DoWildCard, ::_startupinfo* _StartInfo );
	//__QOR_INTERFACE( __CQOR ) void __cdecl _initterm( ::PVFV*, PVFV* );
	//__QOR_INTERFACE( __CQOR ) int __cdecl _initterm_e( ::PVFV*, PVFV* );

	__QOR_INTERFACE( __CQOR ) char*&		f_acmdln();
#	define _acmdln (f_acmdln())

	__QOR_INTERFACE( __CQOR ) wchar_t*&		f_wcmdln();
#	define _wcmdln (f_wcmdln())

	__QOR_INTERFACE( __CQOR ) char*&		f_aenvptr();
#	define _aenvptr (f_aenvptr())

	__QOR_INTERFACE( __CQOR ) wchar_t*&		f_wenvptr();
#	define _wenvptr (f_wenvptr())

	//extern char* _acmdln;
	//_crtAssertBusy
	//_crtBreakAlloc
	//_crtDbgFlag/*The _crtDbgFlag flag consists of five bit fields that control how memory allocations on the debug version of the heap are tracked, verified, reported, and dumped. The bit fields of the flag are set using the _CrtSetDbgFlag function. This flag and its bit fields are declared in Crtdbg.h. This flag is only available when the _DEBUG flag has been defined in the application. */
	extern int _doserrno;
	//extern int errno;
	extern char* _sys_errlist[ ];
	extern int _sys_nerr;

	__QOR_INTERFACE( __CQOR ) char**&		f_environ();
#	define environ (f_environ())

#ifndef __CQOR
#	ifndef __QORLIB
	//__QOR_INTERFACE( __CQOR ) char** environ;		// pointer to environment table
#	endif
#endif

	__QOR_INTERFACE( __CQOR ) int WaitExitStatus( int status );
	__QOR_INTERFACE( __CQOR ) int WaitIfExited( int status );
	__QOR_INTERFACE( __CQOR ) int WaitIfSignaled( int status );
	__QOR_INTERFACE( __CQOR ) int WaitIfStopped( int status );
	__QOR_INTERFACE( __CQOR ) int WaitStopSignal( int status );
	__QOR_INTERFACE( __CQOR ) int WaitTermSignal( int status );
	__QOR_INTERFACE( __CQOR ) int WaitUntraced( void );
	__QOR_INTERFACE( __CQOR ) int WaitNoHang( void );
__QCMP_ENDLINKAGE_C

#endif //QOR_STDLIB_H_3
