#include "../libcxx/include/limits"

//// -*- C++ -*-
////===---------------------------- limits ----------------------------------===//
////
////                     The LLVM Compiler Infrastructure
////
//// This file is dual licensed under the MIT and the University of Illinois Open
//// Source Licenses. See LICENSE.TXT for details.
////
////===----------------------------------------------------------------------===//
//
//#ifndef _LIBCPP_LIMITS
//#define _LIBCPP_LIMITS
//
///*
//    limits synopsis
//
//namespace std
//{
//
//template<class T>
//class numeric_limits
//{
//public:
//    static const bool is_specialized = false;
//    static T min() noexcept;
//    static T max() noexcept;
//    static T lowest() noexcept;
//
//    static const int  digits = 0;
//    static const int  digits10 = 0;
//    static const int  max_digits10 = 0;
//    static const bool is_signed = false;
//    static const bool is_integer = false;
//    static const bool is_exact = false;
//    static const int  radix = 0;
//    static T epsilon() noexcept;
//    static T round_error() noexcept;
//
//    static const int  min_exponent = 0;
//    static const int  min_exponent10 = 0;
//    static const int  max_exponent = 0;
//    static const int  max_exponent10 = 0;
//
//    static const bool has_infinity = false;
//    static const bool has_quiet_NaN = false;
//    static const bool has_signaling_NaN = false;
//    static const float_denorm_style has_denorm = denorm_absent;
//    static const bool has_denorm_loss = false;
//    static T infinity() noexcept;
//    static T quiet_NaN() noexcept;
//    static T signaling_NaN() noexcept;
//    static T denorm_min() noexcept;
//
//    static const bool is_iec559 = false;
//    static const bool is_bounded = false;
//    static const bool is_modulo = false;
//
//    static const bool traps = false;
//    static const bool tinyness_before = false;
//    static const float_round_style round_style = round_toward_zero;
//};
//
//enum float_round_style
//{
//    round_indeterminate       = -1,
//    round_toward_zero         =  0,
//    round_to_nearest          =  1,
//    round_toward_infinity     =  2,
//    round_toward_neg_infinity =  3
//};
//
//enum float_denorm_style
//{
//    denorm_indeterminate = -1,
//    denorm_absent = 0,
//    denorm_present = 1
//};
//
//template<> class numeric_limits<cv bool>;
//
//template<> class numeric_limits<cv char>;
//template<> class numeric_limits<cv signed char>;
//template<> class numeric_limits<cv unsigned char>;
//template<> class numeric_limits<cv wchar_t>;
//template<> class numeric_limits<cv char16_t>;
//template<> class numeric_limits<cv char32_t>;
//
//template<> class numeric_limits<cv short>;
//template<> class numeric_limits<cv int>;
//template<> class numeric_limits<cv long>;
//template<> class numeric_limits<cv long long>;
//template<> class numeric_limits<cv unsigned short>;
//template<> class numeric_limits<cv unsigned int>;
//template<> class numeric_limits<cv unsigned long>;
//template<> class numeric_limits<cv unsigned long long>;
//
//template<> class numeric_limits<cv float>;
//template<> class numeric_limits<cv double>;
//template<> class numeric_limits<cv long double>;
//
//}  // std
//
//*/
//
//#if __QCMP_SUPPORTS( __QCMP_FEATURE_PRAGMA_SYSTEM_HEADER )
//#pragma GCC system_header
//#endif
//
////#include <__config>
//#include "SystemQOR.h"
//#include <type_traits>
//
//#include <__undef_min_max>
//#include <limits.h>
//
//#if defined(_MSC_VER)
//#	include "SystemQOR/MSWindows/MSW_limits.h"
//#endif // _MSC_VER
//
//namespace std
//{
//
//	enum float_round_style
//	{
//		round_indeterminate       = -1,
//		round_toward_zero         =  0,
//		round_to_nearest          =  1,
//		round_toward_infinity     =  2,
//		round_toward_neg_infinity =  3
//	};
//
//	enum float_denorm_style
//	{
//		denorm_indeterminate = -1,
//		denorm_absent = 0,
//		denorm_present = 1
//	};
//
//	template <class _Tp, bool = is_arithmetic<_Tp>::value>
//	class __libcpp_numeric_limits
//	{
//	protected:
//		typedef _Tp type;
//
//		static const bool is_specialized = false;
//		__QCMP_ALWAYSINLINE static type min() __QCMP_THROW {return type();}
//		__QCMP_ALWAYSINLINE static type max() __QCMP_THROW {return type();}
//		__QCMP_ALWAYSINLINE static type lowest() __QCMP_THROW {return type();}
//
//		static const int  digits = 0;
//		static const int  digits10 = 0;
//		static const int  max_digits10 = 0;
//		static const bool is_signed = false;
//		static const bool is_integer = false;
//		static const bool is_exact = false;
//		static const int  radix = 0;
//		__QCMP_ALWAYSINLINE static type epsilon() __QCMP_THROW {return type();}
//		__QCMP_ALWAYSINLINE static type round_error() __QCMP_THROW {return type();}
//
//		static const int  min_exponent = 0;
//		static const int  min_exponent10 = 0;
//		static const int  max_exponent = 0;
//		static const int  max_exponent10 = 0;
//
//		static const bool has_infinity = false;
//		static const bool has_quiet_NaN = false;
//		static const bool has_signaling_NaN = false;
//		static const float_denorm_style has_denorm = denorm_absent;
//		static const bool has_denorm_loss = false;
//		__QCMP_ALWAYSINLINE static type infinity() __QCMP_THROW {return type();}
//		__QCMP_ALWAYSINLINE static type quiet_NaN() __QCMP_THROW {return type();}
//		__QCMP_ALWAYSINLINE static type signaling_NaN() __QCMP_THROW {return type();}
//		__QCMP_ALWAYSINLINE static type denorm_min() __QCMP_THROW {return type();}
//
//		static const bool is_iec559 = false;
//		static const bool is_bounded = false;
//		static const bool is_modulo = false;
//
//		static const bool traps = false;
//		static const bool tinyness_before = false;
//		static const float_round_style round_style = round_toward_zero;
//	};
//
//	template <class _Tp, int digits, bool is_signed>
//	struct __libcpp_compute_min
//	{
//		static const _Tp value = _Tp(_Tp(1) << digits);
//	};
//
//	template <class _Tp, int digits>
//	struct __libcpp_compute_min<_Tp, digits, false>
//	{
//		static const _Tp value = _Tp(0);
//	};
//
//	template <class _Tp>
//	class __libcpp_numeric_limits<_Tp, true>
//	{
//	protected:
//		typedef _Tp type;
//
//		static const bool is_specialized = true;
//
//		static const bool is_signed = type(-1) < type(0);
//		static const int  digits = static_cast<int>(sizeof(type) * __CHAR_BIT__ - is_signed);
//		static const int  digits10 = digits * 3 / 10;
//		static const int  max_digits10 = 0;
//		static const type __min = __libcpp_compute_min<type, digits, is_signed>::value;
//		static const type __max = is_signed ? type(type(~0) ^ __min) : type(~0);
//		__QCMP_ALWAYSINLINE static type min() __QCMP_THROW {return __min;}
//		__QCMP_ALWAYSINLINE static type max() __QCMP_THROW {return __max;}
//		__QCMP_ALWAYSINLINE static type lowest() __QCMP_THROW {return min();}
//
//		static const bool is_integer = true;
//		static const bool is_exact = true;
//		static const int  radix = 2;
//		__QCMP_ALWAYSINLINE static type epsilon() __QCMP_THROW {return type(0);}
//		__QCMP_ALWAYSINLINE static type round_error() __QCMP_THROW {return type(0);}
//
//		static const int  min_exponent = 0;
//		static const int  min_exponent10 = 0;
//		static const int  max_exponent = 0;
//		static const int  max_exponent10 = 0;
//
//		static const bool has_infinity = false;
//		static const bool has_quiet_NaN = false;
//		static const bool has_signaling_NaN = false;
//		static const float_denorm_style has_denorm = denorm_absent;
//		static const bool has_denorm_loss = false;
//		__QCMP_ALWAYSINLINE static type infinity() __QCMP_THROW {return type(0);}
//		__QCMP_ALWAYSINLINE static type quiet_NaN() __QCMP_THROW {return type(0);}
//		__QCMP_ALWAYSINLINE static type signaling_NaN() __QCMP_THROW {return type(0);}
//		__QCMP_ALWAYSINLINE static type denorm_min() __QCMP_THROW {return type(0);}
//
//		static const bool is_iec559 = false;
//		static const bool is_bounded = true;
//		static const bool is_modulo = true;
//
//	#if __i386__ || __x86_64__
//		static const bool traps = true;
//	#else
//		static const bool traps = false;
//	#endif
//		static const bool tinyness_before = false;
//		static const float_round_style round_style = round_toward_zero;
//	};
//
//	template <>
//	class __libcpp_numeric_limits<bool, true>
//	{
//	protected:
//		typedef bool type;
//
//		static const bool is_specialized = true;
//
//		static const bool is_signed = false;
//		static const int  digits = 1;
//		static const int  digits10 = 0;
//		static const int  max_digits10 = 0;
//		static const type __min = false;
//		static const type __max = true;
//		__QCMP_ALWAYSINLINE static type min() __QCMP_THROW {return __min;}
//		__QCMP_ALWAYSINLINE static type max() __QCMP_THROW {return __max;}
//		__QCMP_ALWAYSINLINE static type lowest() __QCMP_THROW {return min();}
//
//		static const bool is_integer = true;
//		static const bool is_exact = true;
//		static const int  radix = 2;
//		__QCMP_ALWAYSINLINE static type epsilon() __QCMP_THROW {return type(0);}
//		__QCMP_ALWAYSINLINE static type round_error() __QCMP_THROW {return type(0);}
//
//		static const int  min_exponent = 0;
//		static const int  min_exponent10 = 0;
//		static const int  max_exponent = 0;
//		static const int  max_exponent10 = 0;
//
//		static const bool has_infinity = false;
//		static const bool has_quiet_NaN = false;
//		static const bool has_signaling_NaN = false;
//		static const float_denorm_style has_denorm = denorm_absent;
//		static const bool has_denorm_loss = false;
//		__QCMP_ALWAYSINLINE static type infinity() __QCMP_THROW {return type(0);}
//		__QCMP_ALWAYSINLINE static type quiet_NaN() __QCMP_THROW {return type(0);}
//		__QCMP_ALWAYSINLINE static type signaling_NaN() __QCMP_THROW {return type(0);}
//		__QCMP_ALWAYSINLINE static type denorm_min() __QCMP_THROW {return type(0);}
//
//		static const bool is_iec559 = false;
//		static const bool is_bounded = true;
//		static const bool is_modulo = false;
//
//		static const bool traps = false;
//		static const bool tinyness_before = false;
//		static const float_round_style round_style = round_toward_zero;
//	};
//
//	template <>
//	class __libcpp_numeric_limits<float, true>
//	{
//	protected:
//		typedef float type;
//
//		static const bool is_specialized = true;
//
//		static const bool is_signed = true;
//		static const int  digits = __FLT_MANT_DIG__;
//		static const int  digits10 = __FLT_DIG__;
//		static const int  max_digits10 = 2+(digits * 30103)/100000;
//		__QCMP_ALWAYSINLINE static type min() __QCMP_THROW {return __FLT_MIN__;}
//		__QCMP_ALWAYSINLINE static type max() __QCMP_THROW {return __FLT_MAX__;}
//		__QCMP_ALWAYSINLINE static type lowest() __QCMP_THROW {return -max();}
//
//		static const bool is_integer = false;
//		static const bool is_exact = false;
//		static const int  radix = __FLT_RADIX__;
//		__QCMP_ALWAYSINLINE static type epsilon() __QCMP_THROW {return __FLT_EPSILON__;}
//		__QCMP_ALWAYSINLINE static type round_error() __QCMP_THROW {return 0.5F;}
//
//		static const int  min_exponent = __FLT_MIN_EXP__;
//		static const int  min_exponent10 = __FLT_MIN_10_EXP__;
//		static const int  max_exponent = __FLT_MAX_EXP__;
//		static const int  max_exponent10 = __FLT_MAX_10_EXP__;
//
//		static const bool has_infinity = true;
//		static const bool has_quiet_NaN = true;
//		static const bool has_signaling_NaN = true;
//		static const float_denorm_style has_denorm = denorm_present;
//		static const bool has_denorm_loss = false;
//		//TODO:
//		//__QCMP_ALWAYSINLINE static type infinity() __QCMP_THROW {return __builtin_huge_valf();}
//		//__QCMP_ALWAYSINLINE static type quiet_NaN() __QCMP_THROW {return __builtin_nanf("");}
//		//__QCMP_ALWAYSINLINE static type signaling_NaN() __QCMP_THROW {return __builtin_nansf("");}
//		//__QCMP_ALWAYSINLINE static type denorm_min() __QCMP_THROW {return __FLT_DENORM_MIN__;}
//
//		static const bool is_iec559 = true;
//		static const bool is_bounded = true;
//		static const bool is_modulo = false;
//
//		static const bool traps = false;
//		static const bool tinyness_before = false;
//		static const float_round_style round_style = round_to_nearest;
//	};
//
//	template <>
//	class __libcpp_numeric_limits<double, true>
//	{
//	protected:
//		typedef double type;
//
//		static const bool is_specialized = true;
//
//		static const bool is_signed = true;
//		static const int  digits = __DBL_MANT_DIG__;
//		static const int  digits10 = __DBL_DIG__;
//		static const int  max_digits10 = 2+(digits * 30103)/100000;
//		__QCMP_ALWAYSINLINE static type min() __QCMP_THROW {return __DBL_MIN__;}
//		__QCMP_ALWAYSINLINE static type max() __QCMP_THROW {return __DBL_MAX__;}
//		__QCMP_ALWAYSINLINE static type lowest() __QCMP_THROW {return -max();}
//
//		static const bool is_integer = false;
//		static const bool is_exact = false;
//		static const int  radix = __FLT_RADIX__;
//		__QCMP_ALWAYSINLINE static type epsilon() __QCMP_THROW {return __DBL_EPSILON__;}
//		__QCMP_ALWAYSINLINE static type round_error() __QCMP_THROW {return 0.5;}
//
//		static const int  min_exponent = __DBL_MIN_EXP__;
//		static const int  min_exponent10 = __DBL_MIN_10_EXP__;
//		static const int  max_exponent = __DBL_MAX_EXP__;
//		static const int  max_exponent10 = __DBL_MAX_10_EXP__;
//
//		static const bool has_infinity = true;
//		static const bool has_quiet_NaN = true;
//		static const bool has_signaling_NaN = true;
//		static const float_denorm_style has_denorm = denorm_present;
//		static const bool has_denorm_loss = false;
//		//TODO:
//		//__QCMP_ALWAYSINLINE static type infinity() __QCMP_THROW {return __builtin_huge_val();}
//		//__QCMP_ALWAYSINLINE static type quiet_NaN() __QCMP_THROW {return __builtin_nan("");}
//		//__QCMP_ALWAYSINLINE static type signaling_NaN() __QCMP_THROW {return __builtin_nans("");}
//		//__QCMP_ALWAYSINLINE static type denorm_min() __QCMP_THROW {return __DBL_DENORM_MIN__;}
//
//		static const bool is_iec559 = true;
//		static const bool is_bounded = true;
//		static const bool is_modulo = false;
//
//		static const bool traps = false;
//		static const bool tinyness_before = false;
//		static const float_round_style round_style = round_to_nearest;
//	};
//
//	template< >
//	class __libcpp_numeric_limits< long double, true >
//	{
//	protected:
//		typedef long double type;
//
//		static const bool is_specialized = true;
//
//		static const bool is_signed = true;
//		static const int  digits = __LDBL_MANT_DIG__;
//		static const int  digits10 = __LDBL_DIG__;
//		static const int  max_digits10 = 2+(digits * 30103)/100000;
//		__QCMP_ALWAYSINLINE static type min() __QCMP_THROW {return __LDBL_MIN__;}
//		__QCMP_ALWAYSINLINE static type max() __QCMP_THROW {return __LDBL_MAX__;}
//		__QCMP_ALWAYSINLINE static type lowest() __QCMP_THROW {return -max();}
//
//		static const bool is_integer = false;
//		static const bool is_exact = false;
//		static const int  radix = __FLT_RADIX__;
//		__QCMP_ALWAYSINLINE static type epsilon() __QCMP_THROW {return __LDBL_EPSILON__;}
//		__QCMP_ALWAYSINLINE static type round_error() __QCMP_THROW {return 0.5;}
//
//		static const int  min_exponent = __LDBL_MIN_EXP__;
//		static const int  min_exponent10 = __LDBL_MIN_10_EXP__;
//		static const int  max_exponent = __LDBL_MAX_EXP__;
//		static const int  max_exponent10 = __LDBL_MAX_10_EXP__;
//
//		static const bool has_infinity = true;
//		static const bool has_quiet_NaN = true;
//		static const bool has_signaling_NaN = true;
//		static const float_denorm_style has_denorm = denorm_present;
//		static const bool has_denorm_loss = false;
//		//TODO:
//		//__QCMP_ALWAYSINLINE static type infinity() __QCMP_THROW {return __builtin_huge_vall();}
//		//__QCMP_ALWAYSINLINE static type quiet_NaN() __QCMP_THROW {return __builtin_nanl("");}
//		//__QCMP_ALWAYSINLINE static type signaling_NaN() __QCMP_THROW {return __builtin_nansl("");}
//		//__QCMP_ALWAYSINLINE static type denorm_min() __QCMP_THROW {return __LDBL_DENORM_MIN__;}
//
//	#if (defined(__ppc__) || defined(__ppc64__))
//		static const bool is_iec559 = false;
//	#else
//		static const bool is_iec559 = true;
//	#endif
//		static const bool is_bounded = true;
//		static const bool is_modulo = false;
//
//		static const bool traps = false;
//		static const bool tinyness_before = false;
//		static const float_round_style round_style = round_to_nearest;
//	};
//
//	//--------------------------------------------------------------------------------
//	template< class _Tp >
//	class numeric_limits : private __libcpp_numeric_limits< typename remove_cv< _Tp >::type >
//	{
//		typedef __libcpp_numeric_limits< typename remove_cv< _Tp >::type > __base;
//		typedef typename __base::type type;
//
//	public:
//
//		static const bool is_specialized = __base::is_specialized;
//		__QCMP_INLINE static type min() __QCMP_THROW {return __base::min();}
//		__QCMP_INLINE static type max() __QCMP_THROW {return __base::max();}
//		__QCMP_INLINE static type lowest() __QCMP_THROW {return __base::lowest();}
//
//		static const int  digits = __base::digits;
//		static const int  digits10 = __base::digits10;
//		static const int  max_digits10 = __base::max_digits10;
//		static const bool is_signed = __base::is_signed;
//		static const bool is_integer = __base::is_integer;
//		static const bool is_exact = __base::is_exact;
//		static const int  radix = __base::radix;
//		__QCMP_INLINE static type epsilon() __QCMP_THROW {return __base::epsilon();}
//		__QCMP_INLINE static type round_error() __QCMP_THROW {return __base::round_error();}
//
//		static const int  min_exponent = __base::min_exponent;
//		static const int  min_exponent10 = __base::min_exponent10;
//		static const int  max_exponent = __base::max_exponent;
//		static const int  max_exponent10 = __base::max_exponent10;
//
//		static const bool has_infinity = __base::has_infinity;
//		static const bool has_quiet_NaN = __base::has_quiet_NaN;
//		static const bool has_signaling_NaN = __base::has_signaling_NaN;
//		static const float_denorm_style has_denorm = __base::has_denorm;
//		static const bool has_denorm_loss = __base::has_denorm_loss;
//		__QCMP_ALWAYSINLINE static type infinity() __QCMP_THROW {return __base::infinity();}
//		__QCMP_ALWAYSINLINE static type quiet_NaN() __QCMP_THROW {return __base::quiet_NaN();}
//		__QCMP_ALWAYSINLINE static type signaling_NaN() __QCMP_THROW {return __base::signaling_NaN();}
//		__QCMP_ALWAYSINLINE static type denorm_min() __QCMP_THROW {return __base::denorm_min();}
//
//		static const bool is_iec559 = __base::is_iec559;
//		static const bool is_bounded = __base::is_bounded;
//		static const bool is_modulo = __base::is_modulo;
//
//		static const bool traps = __base::traps;
//		static const bool tinyness_before = __base::tinyness_before;
//		static const float_round_style round_style = __base::round_style;
//	};
//
//	template <class _Tp>
//	class __QOR_INTERFACE( __STDQOR ) numeric_limits<const _Tp>
//		: private numeric_limits<_Tp>
//	{
//		typedef numeric_limits<_Tp> __base;
//		typedef _Tp type;
//	public:
//		static const bool is_specialized = __base::is_specialized;
//		__QCMP_ALWAYSINLINE static type min() __QCMP_THROW {return __base::min();}
//		__QCMP_ALWAYSINLINE static type max() __QCMP_THROW {return __base::max();}
//		__QCMP_ALWAYSINLINE static type lowest() __QCMP_THROW {return __base::lowest();}
//
//		static const int  digits = __base::digits;
//		static const int  digits10 = __base::digits10;
//		static const int  max_digits10 = __base::max_digits10;
//		static const bool is_signed = __base::is_signed;
//		static const bool is_integer = __base::is_integer;
//		static const bool is_exact = __base::is_exact;
//		static const int  radix = __base::radix;
//		__QCMP_ALWAYSINLINE static type epsilon() __QCMP_THROW {return __base::epsilon();}
//		__QCMP_ALWAYSINLINE static type round_error() __QCMP_THROW {return __base::round_error();}
//
//		static const int  min_exponent = __base::min_exponent;
//		static const int  min_exponent10 = __base::min_exponent10;
//		static const int  max_exponent = __base::max_exponent;
//		static const int  max_exponent10 = __base::max_exponent10;
//
//		static const bool has_infinity = __base::has_infinity;
//		static const bool has_quiet_NaN = __base::has_quiet_NaN;
//		static const bool has_signaling_NaN = __base::has_signaling_NaN;
//		static const float_denorm_style has_denorm = __base::has_denorm;
//		static const bool has_denorm_loss = __base::has_denorm_loss;
//		__QCMP_ALWAYSINLINE static type infinity() __QCMP_THROW {return __base::infinity();}
//		__QCMP_ALWAYSINLINE static type quiet_NaN() __QCMP_THROW {return __base::quiet_NaN();}
//		__QCMP_ALWAYSINLINE static type signaling_NaN() __QCMP_THROW {return __base::signaling_NaN();}
//		__QCMP_ALWAYSINLINE static type denorm_min() __QCMP_THROW {return __base::denorm_min();}
//
//		static const bool is_iec559 = __base::is_iec559;
//		static const bool is_bounded = __base::is_bounded;
//		static const bool is_modulo = __base::is_modulo;
//
//		static const bool traps = __base::traps;
//		static const bool tinyness_before = __base::tinyness_before;
//		static const float_round_style round_style = __base::round_style;
//	};
//
//	template <class _Tp>
//	class __QOR_INTERFACE( __STDQOR ) numeric_limits<volatile _Tp>
//		: private numeric_limits<_Tp>
//	{
//		typedef numeric_limits<_Tp> __base;
//		typedef _Tp type;
//	public:
//		static const bool is_specialized = __base::is_specialized;
//		__QCMP_ALWAYSINLINE static type min() __QCMP_THROW {return __base::min();}
//		__QCMP_ALWAYSINLINE static type max() __QCMP_THROW {return __base::max();}
//		__QCMP_ALWAYSINLINE static type lowest() __QCMP_THROW {return __base::lowest();}
//
//		static const int  digits = __base::digits;
//		static const int  digits10 = __base::digits10;
//		static const int  max_digits10 = __base::max_digits10;
//		static const bool is_signed = __base::is_signed;
//		static const bool is_integer = __base::is_integer;
//		static const bool is_exact = __base::is_exact;
//		static const int  radix = __base::radix;
//		__QCMP_ALWAYSINLINE static type epsilon() __QCMP_THROW {return __base::epsilon();}
//		__QCMP_ALWAYSINLINE static type round_error() __QCMP_THROW {return __base::round_error();}
//
//		static const int  min_exponent = __base::min_exponent;
//		static const int  min_exponent10 = __base::min_exponent10;
//		static const int  max_exponent = __base::max_exponent;
//		static const int  max_exponent10 = __base::max_exponent10;
//
//		static const bool has_infinity = __base::has_infinity;
//		static const bool has_quiet_NaN = __base::has_quiet_NaN;
//		static const bool has_signaling_NaN = __base::has_signaling_NaN;
//		static const float_denorm_style has_denorm = __base::has_denorm;
//		static const bool has_denorm_loss = __base::has_denorm_loss;
//		__QCMP_ALWAYSINLINE static type infinity() __QCMP_THROW {return __base::infinity();}
//		__QCMP_ALWAYSINLINE static type quiet_NaN() __QCMP_THROW {return __base::quiet_NaN();}
//		__QCMP_ALWAYSINLINE static type signaling_NaN() __QCMP_THROW {return __base::signaling_NaN();}
//		__QCMP_ALWAYSINLINE static type denorm_min() __QCMP_THROW {return __base::denorm_min();}
//
//		static const bool is_iec559 = __base::is_iec559;
//		static const bool is_bounded = __base::is_bounded;
//		static const bool is_modulo = __base::is_modulo;
//
//		static const bool traps = __base::traps;
//		static const bool tinyness_before = __base::tinyness_before;
//		static const float_round_style round_style = __base::round_style;
//	};
//
//	template <class _Tp>
//	class __QOR_INTERFACE( __STDQOR ) numeric_limits<const volatile _Tp>
//		: private numeric_limits<_Tp>
//	{
//		typedef numeric_limits<_Tp> __base;
//		typedef _Tp type;
//	public:
//		static const bool is_specialized = __base::is_specialized;
//		__QCMP_ALWAYSINLINE static type min() __QCMP_THROW {return __base::min();}
//		__QCMP_ALWAYSINLINE static type max() __QCMP_THROW {return __base::max();}
//		__QCMP_ALWAYSINLINE static type lowest() __QCMP_THROW {return __base::lowest();}
//
//		static const int  digits = __base::digits;
//		static const int  digits10 = __base::digits10;
//		static const int  max_digits10 = __base::max_digits10;
//		static const bool is_signed = __base::is_signed;
//		static const bool is_integer = __base::is_integer;
//		static const bool is_exact = __base::is_exact;
//		static const int  radix = __base::radix;
//		__QCMP_ALWAYSINLINE static type epsilon() __QCMP_THROW {return __base::epsilon();}
//		__QCMP_ALWAYSINLINE static type round_error() __QCMP_THROW {return __base::round_error();}
//
//		static const int  min_exponent = __base::min_exponent;
//		static const int  min_exponent10 = __base::min_exponent10;
//		static const int  max_exponent = __base::max_exponent;
//		static const int  max_exponent10 = __base::max_exponent10;
//
//		static const bool has_infinity = __base::has_infinity;
//		static const bool has_quiet_NaN = __base::has_quiet_NaN;
//		static const bool has_signaling_NaN = __base::has_signaling_NaN;
//		static const float_denorm_style has_denorm = __base::has_denorm;
//		static const bool has_denorm_loss = __base::has_denorm_loss;
//		__QCMP_ALWAYSINLINE static type infinity() __QCMP_THROW {return __base::infinity();}
//		__QCMP_ALWAYSINLINE static type quiet_NaN() __QCMP_THROW {return __base::quiet_NaN();}
//		__QCMP_ALWAYSINLINE static type signaling_NaN() __QCMP_THROW {return __base::signaling_NaN();}
//		__QCMP_ALWAYSINLINE static type denorm_min() __QCMP_THROW {return __base::denorm_min();}
//
//		static const bool is_iec559 = __base::is_iec559;
//		static const bool is_bounded = __base::is_bounded;
//		static const bool is_modulo = __base::is_modulo;
//
//		static const bool traps = __base::traps;
//		static const bool tinyness_before = __base::tinyness_before;
//		static const float_round_style round_style = __base::round_style;
//	};
//
//};//namespace std
//
//#endif  // _LIBCPP_LIMITS
