//netdb.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef	QOR_NETDB_H_3
#define QOR_NETDB_H_3

#include <netinet/in.h>
#include <sys/socket.h>
#include <inttypes.h>
#include "SystemQOR.h"
#include QOR_SYS_PLATFORMTYPES(netdb)

typedef nsPlatform::addrinfo addrinfo;
#ifndef OS_EXPORTS_NETDB_HOSTENT
typedef nsPlatform::hostent hostent;
#endif
typedef nsPlatform::socklen_t socklen_t;
#ifndef OS_EXPORTS_NETDB_SOCKADDR
typedef nsPlatform::sockaddr sockaddr;
#endif
#ifndef OS_EXPORTS_NETDB_NETENT
typedef nsPlatform::netent netent;
#endif
#ifndef OS_EXPORTS_NETDB_PROTOENT
typedef nsPlatform::protoent protoent;
#endif
#ifndef OS_EXPORTS_NETDB_SERVENT
typedef nsPlatform::servent servent;
#endif

//The <netdb.h> header shall define the following symbolic constants that evaluate to bitwise-distinct integer constants for use in the flags field of the addrinfo structure:
#define AI_PASSIVE			( nsPlatform::AIPlatform )				//Socket address is intended for bind(). 
#define AI_CANONNAME		( nsPlatform::AICannonName )			//Request for canonical name. 
#define AI_NUMERICHOST		( nsPlatform::AINumericHost )			//Return numeric host address as name. 
#define AI_NUMERICSERV		( nsPlatform::AINumericServ )			//Inhibit service name resolution. 
#define AI_V4MAPPED			( nsPlatform::AIV4Mapped )				//If no IPv6 addresses are found, query for IPv4 addresses and return them to the caller as IPv4-mapped IPv6 addresses. 
#define AI_ALL				( nsPlatform::AIAll )					//Query for both IPv4 and IPv6 addresses. 
#define AI_ADDRCONFIG		( nsPlatform::AIAddrConfig )			//Query for IPv4 addresses only when an IPv4 address is configured; query for IPv6 addresses only when an IPv6 address is configured. 

//The <netdb.h> header shall define the following symbolic constants that evaluate to bitwise-distinct integer constants for use in the flags argument to getnameinfo():
#define NI_NOFQDN			( nsPlatform::NINoFQDN )				//Only the nodename portion of the FQDN is returned for local hosts. 
#define NI_NUMERICHOST		( nsPlatform::NINumericHost )			//The numeric form of the node's address is returned instead of its name. 
#define NI_NAMEREQD			( nsPlatform::NINameReqd )				//Return an error if the node's name cannot be located in the database. 
#define NI_NUMERICSERV		( nsPlatform::NINumericServ )			//The numeric form of the service address is returned instead of its name. 
#define NI_NUMERICSCOPE		( nsPlatform::NINumericScope )

//For IPv6 addresses, the numeric form of the scope identifier is returned instead of its name. 
#define NI_DGRAM			( nsPlatform::NIDGram )					//Indicates that the service is a datagram service (SOCK_DGRAM). 

//The <netdb.h> header shall define the following symbolic constants for use as error values for getaddrinfo() and getnameinfo(). The values shall be suitable for use in #if preprocessing directives.

#define EAI_AGAIN			( nsPlatform::EAIAgain )				//The name could not be resolved at this time. Future attempts may succeed. 
#define EAI_BADFLAGS		( nsPlatform::EAIBadFlags )				//The flags had an invalid value. 
#define EAI_FAIL			( nsPlatform::EAIFail )					//A non-recoverable error occurred. 
#define EAI_FAMILY			( nsPlatform::EAIFamily )				//The address family was not recognized or the address length was invalid for the specified family. 
#define EAI_MEMORY			( nsPlatform::EAIMemory )				//There was a memory allocation failure. 
#define EAI_NONAME			( nsPlatform::EAINoName )				//The name does not resolve for the supplied parameters. NI_NAMEREQD is set and the host's name cannot be located, or both nodename and servname were null.
#define EAI_SERVICE			( nsPlatform::EAIService )				//The service passed was not recognized for the specified socket type. 
#define EAI_SOCKTYPE		( nsPlatform::EAISockType )				//The intended socket type was not recognized. 
#define EAI_SYSTEM			( nsPlatform::EAISystem )				//A system error occurred. The error code can be found in errno. 
#define EAI_OVERFLOW		( nsPlatform::EAIOverflow )				//An argument buffer overflowed. 

__QCMP_STARTLINKAGE_C

    __QOR_INTERFACE( __CQOR ) void endhostent( void );
    __QOR_INTERFACE( __CQOR ) void endnetent( void );
    __QOR_INTERFACE( __CQOR ) void endprotoent( void );
    __QOR_INTERFACE( __CQOR ) void endservent( void );
    __QOR_INTERFACE( __CQOR ) void freeaddrinfo( addrinfo* );
    __QOR_INTERFACE( __CQOR ) const char* gai_strerror( int );
    __QOR_INTERFACE( __CQOR ) int getaddrinfo( const char* __QCMP_RESTRICT, const char* __QCMP_RESTRICT,
                                     const addrinfo* __QCMP_RESTRICT, addrinfo**  __QCMP_RESTRICT );
#ifndef OS_EXPORTS_NETDB_GETHOSTBYADDR
    __QOR_INTERFACE( __CQOR ) hostent* gethostbyaddr( const void*, socklen_t, int );
#endif
#ifndef OS_EXPORTS_NETDB_GETHOSTBYNAME
    __QOR_INTERFACE( __CQOR ) hostent* gethostbyname( const char* );
#endif
    __QOR_INTERFACE( __CQOR ) hostent* gethostent( void );
    __QOR_INTERFACE( __CQOR ) int getnameinfo( const sockaddr* __QCMP_RESTRICT, socklen_t,
                                     char* __QCMP_RESTRICT, socklen_t, char* __QCMP_RESTRICT,
                                     socklen_t, int );
    __QOR_INTERFACE( __CQOR ) netent* getnetbyaddr( uint32_t, int );
    __QOR_INTERFACE( __CQOR ) netent* getnetbyname( const char* );
    __QOR_INTERFACE( __CQOR ) netent* getnetent( void );
#ifndef OS_EXPORTS_NETDB_GETPROTOBYNAME
    __QOR_INTERFACE( __CQOR ) protoent* getprotobyname( const char* );
#endif
#ifndef OS_EXPORTS_NETDB_GETPROTOBYNUMBER
    __QOR_INTERFACE( __CQOR ) protoent* getprotobynumber( int );
#endif
    __QOR_INTERFACE( __CQOR ) protoent* getprotoent( void );
#ifndef OS_EXPORTS_NETDB_GETSERVBYNAME
    __QOR_INTERFACE( __CQOR ) servent* getservbyname( const char*, const char* );
#endif
#ifndef OS_EXPORTS_NETDB_GETSERVBYPORT
    __QOR_INTERFACE( __CQOR ) servent* getservbyport( int, const char* );
#endif
    __QOR_INTERFACE( __CQOR ) servent* getservent( void );
    __QOR_INTERFACE( __CQOR ) void sethostent( int );
    __QOR_INTERFACE( __CQOR ) void setnetent( int );
    __QOR_INTERFACE( __CQOR ) void setprotoent( int );
    __QOR_INTERFACE( __CQOR ) void setservent( int );

__QCMP_ENDLINKAGE_C

#endif//QOR_NETDB_H_3

