//fcntl.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef	QOR_FCNTL_H_3
#define QOR_FCNTL_H_3

#include <sys/stat.h>
#include <unistd.h>
#include "SystemQOR.h"
#include QOR_SYS_PLATFORMTYPES(fcntl)

typedef nsPlatform::mode_t mode_t;
typedef nsPlatform::off_t off_t;
typedef nsPlatform::pid_t pid_t;
typedef nsPlatform::flock flock;

#define	F_DUPFD					( nsPlatform::FDuplicateFD )			//0//Duplicate file descriptor. 
#define F_DUPFD_CLOEXEC			( nsPlatform::FDuplicateFDCloseOnExec )	//1030//Duplicate file descriptor with the close-on- exec flag FD_CLOEXEC set. 
#define F_GETFD					( nsPlatform::FGetDescriptorFlags )		//1//Get file descriptor flags. 
#define F_SETFD					( nsPlatform::FSetDescriptorFlags )		//2//Set file descriptor flags. 
#define F_GETFL					( nsPlatform::FGetFlags )				//3//Get file status flags and file access modes. 
#define F_SETFL					( nsPlatform::FSetFlags )				//4//Set file status flags. 
#define F_GETLK					( nsPlatform::FGetLock )				//5//Get record locking information. 
#define F_SETLK					( nsPlatform::FSetLock )				//6//Set record locking information. 
#define F_SETLKW				( nsPlatform::FSetLockWait )			//7//Set record locking information; wait if blocked. 
#define F_GETOWN				( nsPlatform::FGetOwn )					//9//Get process or process group ID to receive SIGURG signals. 
#define F_SETOWN				( nsPlatform::FSetOwn )					//8//Set process or process group ID to receive SIGURG signals. 

#define FD_CLOEXEC				( nsPlatform::OCloseOnExec )			//Close the file descriptor upon execution of an exec family function. 

#define F_RDLCK					( nsPlatform::FReadLock )				//Shared or read lock. 
#define F_UNLCK					( nsPlatform::FUnlock )					//Unlock. 
#define F_WRLCK					( nsPlatform::FWriteLock )				//Exclusive or write lock. 

#define O_CREAT					( nsPlatform::OCreate )					//Create file if it does not exist. 
#define O_EXCL					( nsPlatform::OExclusive )				//Exclusive use flag. 
#define O_NOCTTY				( nsPlatform::ONoCTTY )					//Do not assign controlling terminal. 
#define O_TRUNC					( nsPlatform::OTruncate )				//Truncate flag. 
#define O_TTY_INIT				( nsPlatform::OTTYInit )				//Set the termios structure terminal parameters to a state that provides conforming behavior; see Parameters that Can be Set . The O_TTY_INIT flag can have the value zero and in this case it need not be bitwise-distinct from the other flags.

#define O_APPEND				( nsPlatform::OAppend )					//Set append mode. 
#define O_DSYNC					( nsPlatform::ODSync )					//[SIO]  Write according to synchronized I/O data integrity completion.  
#define O_NONBLOCK				( nsPlatform::ONonBlocking )			//Non-blocking mode. 
#define O_NDELAY				O_NONBLOCK
#define	O_RSYNC					( nsPlatform::OReadSync )				//[SIO]  Synchronized read I/O operations.  
#define O_SYNC					( nsPlatform::OWriteSync )				//Write according to synchronized I/O file integrity completion. 

#define O_ACCMODE				( nsPlatform::OAccessMode )				//Mask for file access modes. 

#define	O_EXEC					( nsPlatform::OExec )					//Open for execute only (non-directory files). The result is unspecified if this flag is applied to a directory. 
#define O_RDONLY				( nsPlatform::OReadOnly )				//Open for reading only. 
#define O_RDWR					( nsPlatform::OReadWrite )				//Open for reading and writing. 
#define O_SEARCH				( nsPlatform::OSearch )					//Open directory for search only. The result is unspecified if this flag is applied to a non-directory file. 
#define O_WRONLY				( nsPlatform::OWriteOnly )				//Open for writing only. 

#define AT_FDCWD				( nsPlatform::AtFDCWD )					//Use the current working directory to determine the target of relative file paths. 

#define AT_EACCESS				( nsPlatform::AtEAccess )				//Check access using effective user and group ID. 

#define AT_SYMLINK_NOFOLLOW		( nsPlatform::AtSymlinkNoFollow )		//Do not follow symbolic links. 

#define AT_SYMLINK_FOLLOW		( nsPlatform::AtSymlinkFollow )			//Follow symbolic link. 

#define O_CLOEXEC				( nsPlatform::OCloseOnExec )			//The FD_CLOEXEC flag associated with the new descriptor shall be set to close the file descriptor upon execution of an exec family function. 
#define O_DIRECTORY				( nsPlatform::ODirectory )				//Fail if not a directory. 
#define O_NOFOLLOW				( nsPlatform::ONoFollow )				//Do not follow symbolic links. 

#define AT_REMOVEDIR			( nsPlatform::AtRemoveDir )				//Remove directory instead of file. 

#define POSIX_FADV_NORMAL		( nsPlatform::PosixFAdvNormal )			//The application has no advice to give on its behavior with respect to the specified data. It is the default characteristic if no advice is given for an open file. 
#define POSIX_FADV_SEQUENTIAL	( nsPlatform::PosixFAdvSequential )		//The application expects to access the specified data sequentially from lower offsets to higher offsets. 
#define POSIX_FADV_RANDOM		( nsPlatform::PosixFAdvRandom )			//The application expects to access the specified data in a random order. 
#define POSIX_FADV_WILLNEED		( nsPlatform::PosixFAdvWillNeed )		//The application expects to access the specified data in the near future. 
#define POSIX_FADV_DONTNEED		( nsPlatform::PosixFAdvDontNeed )		//The application expects that it will not access the specified data in the near future. 
#define POSIX_FADV_NOREUSE		( nsPlatform::PosixFAdvNoReuse )		//The application expects to access the specified data once and then not reuse it thereafter. 

__QCMP_STARTLINKAGE_C

    __QOR_INTERFACE( __CQOR ) int creat( const char*, mode_t );
    __QOR_INTERFACE( __CQOR ) int fcntl( int, int, ... );
    __QOR_INTERFACE( __CQOR ) int open( const char*, int, ... );
	__QOR_INTERFACE( __CQOR ) int openat( int, const char*, int, ... );
    __QOR_INTERFACE( __CQOR ) int posix_fadvise( int, off_t, off_t, int );
    __QOR_INTERFACE( __CQOR ) int posix_fallocate( int, off_t, off_t );

__QCMP_ENDLINKAGE_C

#endif//QOR_FCNTL_H_3

