//time.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_TIME_H_3
#define QOR_TIME_H_3

#include "sys/timeb.h"//NOTE: Seems to be an error in MSVS2013 causing the wrong file to be selected at compile time only if we use 'include "sys/timeb.h"' weird!?!
#include "SystemQOR.h"
#include QOR_SYS_PLATFORMTYPES(time)
#include QOR_SYS_PLATFORMTYPES(signal)
#include QOR_SYS_PLATFORMTYPES(stddef)

typedef nsPlatform::__time32_t __time32_t;
typedef nsPlatform::__time64_t __time64_t;
typedef nsPlatform::__timeb32 __timeb32;
typedef nsPlatform::__timeb64 __timeb64;
typedef nsPlatform::timeb timeb;
typedef nsPlatform::_utimbuf _utimbuf;
typedef nsPlatform::__utimbuf64 __utimbuf64;
typedef nsPlatform::__utimbuf32 __utimbuf32;
typedef nsPlatform::tm tm;
typedef nsPlatform::locale_t locale_t;
typedef nsPlatform::pid_t pid_t;
typedef nsPlatform::clockid_t clockid_t;
typedef nsPlatform::timespec timespec;
typedef nsPlatform::itimerspec itimerspec;
typedef nsPlatform::clock_t clock_t;
typedef nsPlatform::errno_t errno_t;
#if		(!__QCMP_FEATURE_PREDEFINESSIZE_T)
typedef nsPlatform::size_t size_t;
#endif//(!__QCMP_FEATURE_PREDEFINESSIZE_T)
typedef nsPlatform::time_t time_t;
typedef nsPlatform::timer_t timer_t;
typedef nsPlatform::sigevent sigevent;

#undef NULL
#ifdef __cplusplus
#	define NULL    0
#else
#	define NULL    ( (void*)0 )
#endif

#define CLOCKS_PER_SEC				( nsPlatform::ClocksPerSecond )			//A number used to convert the value returned by the clock() function into seconds. The value shall be an expression with type clock_t. [XSI]   The value of CLOCKS_PER_SEC shall be 1 million on XSI-conformant systems. However, it may be variable on other systems, and it should not be assumed that CLOCKS_PER_SEC is a compile-time constant.

//the following symbolic constants. The values shall have a type that is assignment-compatible with clockid_t.

#define CLOCK_MONOTONIC				( nsPlatform::ClockMonotonic )			//The identifier for the system-wide monotonic clock, which is defined as a clock measuring real time, whose value cannot be set via clock_settime() and which cannot have negative clock jumps. The maximum possible clock jump shall be implementation-defined.
#define CLOCK_PROCESS_CPUTIME_ID	( nsPlatform::ClockProcessCPUTimeID )	//The identifier of the CPU-time clock associated with the process making a clock() or timer*() function call.
#define CLOCK_REALTIME				( nsPlatform::ClockRealtime )			//The identifier of the system-wide clock measuring real time.
#define CLOCK_THREAD_CPUTIME_ID		( nsPlatform::ClockThreadCPUTimeID )	//The identifier of the CPU-time clock associated with the thread making a clock() or timer*() function call.

#define TIMER_ABSTIME				( nsPlatform::TimerAbsTime )			//Flag indicating time is absolute. For functions taking timer objects, this refers to the clock associated with the timer.
#define getdate_err					( nsPlatform::GetDateError() )

__QCMP_STARTLINKAGE_C

    __QOR_INTERFACE( __CQOR ) char* asctime( const ::tm* timeptr );
    __QOR_INTERFACE( __CQOR ) char* asctime_r( const ::tm* __QCMP_RESTRICT timeptr, char* __QCMP_RESTRICT szBuf );
    __QOR_INTERFACE( __CQOR ) ::errno_t asctime_s( char* pBuf, size_t SizeInBytes, const ::tm* pTm );
#ifndef OS_EXPORTS_TIME_CLOCK
    __QOR_INTERFACE( __CQOR ) ::clock_t clock( void );
#endif
    __QOR_INTERFACE( __CQOR ) int clock_getcpuclockid( ::pid_t, ::clockid_t* );
    __QOR_INTERFACE( __CQOR ) int clock_getres( ::clockid_t, ::timespec* );
    __QOR_INTERFACE( __CQOR ) int clock_gettime( ::clockid_t, ::timespec* );
    __QOR_INTERFACE( __CQOR ) int clock_nanosleep( ::clockid_t, int, const ::timespec*, ::timespec* );
    __QOR_INTERFACE( __CQOR ) int clock_settime( ::clockid_t, const ::timespec* );
    __QOR_INTERFACE( __CQOR ) char* ctime( const ::time_t* timer );
    __QOR_INTERFACE( __CQOR ) char* ctime_r( const ::time_t*, char* );
    __QOR_INTERFACE( __CQOR ) double difftime( ::time_t time1, ::time_t time0 );
    __QOR_INTERFACE( __CQOR ) ::tm* getdate( const char* );
    __QOR_INTERFACE( __CQOR ) ::tm* gmtime( const ::time_t* timer );
    __QOR_INTERFACE( __CQOR ) ::tm* gmtime_r( const ::time_t* __QCMP_RESTRICT, ::tm* __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) ::tm* localtime( const ::time_t* timer );
	__QOR_INTERFACE( __CQOR ) ::tm* localtime_r( const ::time_t* __QCMP_RESTRICT, ::tm* __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) ::time_t mktime( ::tm* timeptr );
	__QOR_INTERFACE( __CQOR ) ::__time32_t _mktime32( ::tm *timeptr );
	__QOR_INTERFACE( __CQOR ) ::__time64_t _mktime64( ::tm *timeptr );
    __QOR_INTERFACE( __CQOR ) int nanosleep( const ::timespec*, ::timespec* );
    __QOR_INTERFACE( __CQOR ) size_t strftime( char* __QCMP_RESTRICT s, size_t maxsize, const char* __QCMP_RESTRICT format, const ::tm* __QCMP_RESTRICT timeptr );
	__QOR_INTERFACE( __CQOR ) size_t strftime_l( char* __QCMP_RESTRICT, size_t, const char* __QCMP_RESTRICT, const ::tm* __QCMP_RESTRICT, ::locale_t );
	__QOR_INTERFACE( __CQOR ) size_t _strftime_l( char* strDest, size_t maxsize, const char* format, const ::tm* timeptr, ::locale_t locale );

    __QOR_INTERFACE( __CQOR ) char* strptime( const char* __QCMP_RESTRICT, const char* __QCMP_RESTRICT, ::tm* __QCMP_RESTRICT );
#ifndef OS_EXPORTS_TIME_TIME
    __QOR_INTERFACE( __CQOR ) ::time_t time( ::time_t* timer );
#endif
    __QOR_INTERFACE( __CQOR ) int timer_create( ::clockid_t, ::sigevent* __QCMP_RESTRICT, ::timer_t* __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) int timer_delete( ::timer_t );
    __QOR_INTERFACE( __CQOR ) int timer_gettime( ::timer_t, ::itimerspec* );
    __QOR_INTERFACE( __CQOR ) int timer_getoverrun( ::timer_t );
    __QOR_INTERFACE( __CQOR ) int timer_settime( ::timer_t, int, const ::itimerspec* __QCMP_RESTRICT, ::itimerspec* __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) void tzset( void );
	__QOR_INTERFACE( __CQOR ) void _tzset( void );
	__QOR_INTERFACE( __CQOR ) ::__time32_t _time32( ::__time32_t* timer );
	__QOR_INTERFACE( __CQOR ) ::__time64_t _time64( ::__time64_t* timer );

	__QOR_INTERFACE( __CQOR ) int& daylight( void );
	__QOR_INTERFACE( __CQOR ) long& timezone( void );
	__QOR_INTERFACE( __CQOR ) char**& tzname( void );
	__QOR_INTERFACE( __CQOR ) ::time_t _mkgmtime( ::tm* timeptr );
	__QOR_INTERFACE( __CQOR ) ::__time32_t _mkgmtime32( ::tm* timeptr );
	__QOR_INTERFACE( __CQOR ) ::__time64_t _mkgmtime64( ::tm* timeptr );
	__QOR_INTERFACE( __CQOR ) ::tm*_localtime32( const ::__time32_t* timer );
	__QOR_INTERFACE( __CQOR ) ::tm* _localtime64( const ::__time64_t* timer );
	__QOR_INTERFACE( __CQOR ) ::errno_t _localtime32_s( ::tm* _tm, const ::__time32_t* time );
	__QOR_INTERFACE( __CQOR ) ::errno_t _localtime64_s( ::tm* _tm, const ::__time64_t* time );

	__QOR_INTERFACE( __CQOR ) ::tm* _gmtime32( const ::__time32_t* timer );
	__QOR_INTERFACE( __CQOR ) ::tm* _gmtime64( const ::__time64_t* timer );
	__QOR_INTERFACE( __CQOR ) ::errno_t _gmtime32_s( ::tm* _tm, const ::__time32_t* time );
	__QOR_INTERFACE( __CQOR ) ::errno_t _gmtime64_s( ::tm* _tm, const ::__time64_t* time );

	__QOR_INTERFACE( __CQOR ) int _futime( int fd, ::_utimbuf* filetime );
	__QOR_INTERFACE( __CQOR ) int _futime32( int fd, ::__utimbuf32* filetime );
	__QOR_INTERFACE( __CQOR ) int _futime64( int fd, ::__utimbuf64* filetime );
	__QOR_INTERFACE( __CQOR ) void _ftime( ::__timeb64* timeptr );
	__QOR_INTERFACE( __CQOR ) void _ftime32( ::__timeb32* timeptr );
	__QOR_INTERFACE( __CQOR ) void _ftime64( ::__timeb64* timeptr );
	__QOR_INTERFACE( __CQOR ) ::errno_t _ftime32_s( ::__timeb32* timeptr );
	__QOR_INTERFACE( __CQOR ) ::errno_t _ftime64_s( ::__timeb64* timeptr );

	__QOR_INTERFACE( __CQOR ) double _difftime32( ::__time32_t timer1, ::__time32_t timer0 );
	__QOR_INTERFACE( __CQOR ) double _difftime64( ::__time64_t timer1, ::__time64_t timer0 );
	__QOR_INTERFACE( __CQOR ) char* _ctime32( const ::__time32_t* timer );
	__QOR_INTERFACE( __CQOR ) char* _ctime64( const ::__time64_t* timer );
	__QOR_INTERFACE( __CQOR ) ::errno_t _ctime32_s( char* buffer, size_t numberOfElements, const ::__time32_t* time );
	__QOR_INTERFACE( __CQOR ) ::errno_t _ctime64_s( char* buffer, size_t numberOfElements, const ::__time64_t* time );

	extern int _daylight;
	extern int _dstbias;
	extern char *_tzname[2];
	extern long _timezone;

__QCMP_ENDLINKAGE_C

#endif //QOR_TIME_H_3
