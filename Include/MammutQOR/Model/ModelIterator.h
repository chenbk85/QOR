//ModelIterator.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#ifndef MAMMUTQOR_MODEL_ITERATOR_H_3
#define MAMMUTQOR_MODEL_ITERATOR_H_3

#include "SystemQOR.h"
#include "MammutQOR/Model/ModelItem.h"
#include "CodeQOR/DataStructures/TPair.h"
#include "CodeQOR/DataStructures/TLRef.h"

//------------------------------------------------------------------------------
namespace nsMammut
{
	//------------------------------------------------------------------------------
	template< class TModel >
	class __QOR_INTERFACE( __MAMMUT )  CModelIterator
	{
		friend TModel;

	public:

		typedef typename TModel::indexType TIndexer;
		typedef nsCodeQOR::CTPair< TModel*, TIndexer > CModelNode;

	protected:

		
		CModelNode __ptr_;

		//------------------------------------------------------------------------------
		__QCMP_ALWAYSINLINE explicit CModelIterator( CModelNode __p ) __QCMP_THROW : __ptr_( __p ) 
		{
		}
		

	public:

		typedef CModelItem::refType				value_type;
		typedef CModelItem::refType				reference;
		typedef CModelItem::refType				pointer;

		//------------------------------------------------------------------------------
		__QCMP_ALWAYSINLINE CModelIterator() __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		const TIndexer& Index( void ) const
		{
			return __ptr_.Second();
		}

		//------------------------------------------------------------------------------
		__QCMP_ALWAYSINLINE reference operator*() const
		{
			return __ptr_.First()->operator[]( __ptr_.Second() );
		}

		//------------------------------------------------------------------------------
		/*__QCMP_ALWAYSINLINE*/ pointer operator->() const 
		{
			return __ptr_.First()->operator[]( __ptr_.Second() );
		}

		//------------------------------------------------------------------------------
		__QCMP_ALWAYSINLINE CModelIterator& operator++()
		{
			++__ptr_.Second();
			return *this;
		}

		//------------------------------------------------------------------------------
		/*__QCMP_ALWAYSINLINE*/ CModelIterator operator++( int ) 
		{
			CModelIterator __t(*this);
			++(*this);
			return __t;
		}

		//------------------------------------------------------------------------------
		__QCMP_ALWAYSINLINE CModelIterator& operator--()
		{
			--__ptr_.Second();
			return *this;
		}

		//------------------------------------------------------------------------------
		__QCMP_ALWAYSINLINE CModelIterator operator--( int ) 
		{
			CModelIterator __t(*this);
			--(*this);
			return __t;
		}

		//------------------------------------------------------------------------------
		friend __QCMP_ALWAYSINLINE bool operator == ( const CModelIterator& __x, const CModelIterator& __y )
		{
			return __x.__ptr_ == __y.__ptr_;
		}

		//------------------------------------------------------------------------------
		friend __QCMP_ALWAYSINLINE bool operator != ( const CModelIterator& __x, const CModelIterator& __y )
		{
			return !( __x == __y );
		}
	};

}//nsMammut

#endif//MAMMUTQOR_MODEL_ITERATOR_H_3
