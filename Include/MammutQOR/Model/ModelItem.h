//ModelItem.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#ifndef MAMMUTQOR_MODEL_ITEM_H_3
#define MAMMUTQOR_MODEL_ITEM_H_3

#include "SystemQOR.h"
#include "CodeQOR/DataStructures/TLRef.h"

//------------------------------------------------------------------------------
namespace nsMammut
{
	class __QOR_INTERFACE( __MAMMUT ) CModel;

    //------------------------------------------------------------------------------
	//Singular Model Item. Types derived from CModelItem can be contained in a Model and have locking if derived classes implement it
    class __QOR_INTERFACE( __MAMMUT ) CModelItem
    {

    public:

		typedef nsCodeQOR::CTLRef< CModelItem > refType;

		CModelItem();
		CModelItem( CModel* pContainer );
		virtual ~CModelItem();
		CModelItem( const CModelItem& );
		CModelItem& operator = ( const CModelItem& );
		refType Ref( void );
		virtual void Lock( void ) const;
		virtual void Unlock( void ) const;
		virtual refType Clone( void );

		//------------------------------------------------------------------------------
		template< class TItem > TItem& As( void )
		{
			TItem* pItem = dynamic_cast< TItem* >( this );
			//TODO: Implement NullCheck namspace function in nsCodeQOR to raise NULL reference exception, need to pass in details of here so it can raise the error appropriately
			//nsCodeQOR::NullCheck( pItem );
			return *pItem;
		}

	protected:

		CModel* m_pContainer;

		//Note: Any locking primitives added in derived classes should be declared mutable.

    };

}//nsMammut

#endif//MAMMUTQOR_MODEL_ITEM_H_3
