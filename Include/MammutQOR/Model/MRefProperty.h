//MRefProperty.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#ifndef MAMMUTQOR_MODEL_REFPROPERTY_H_3
#define MAMMUTQOR_MODEL_REFPROPERTY_H_3

#include "SystemQOR.h"
#include "MammutQOR/Model/MProperty.h"

//------------------------------------------------------------------------------
namespace nsMammut
{
	//------------------------------------------------------------------------------
	template< class TIndex >
	class CRefProperty : public CPropertyBase
	{
	public:		

		//------------------------------------------------------------------------------
		CRefProperty( CModel* pContainer, const nsCodeQOR::CString& strName ) : CPropertyBase( pContainer, strName )
		{			
			m_Index = (unsigned long)(-1);
		}

		//------------------------------------------------------------------------------
		CRefProperty( CModel* pContainer, const nsCodeQOR::CString& strName, const TIndex& Index ) : CPropertyBase( pContainer, strName ), m_Index( Index )
		{
		}

		//------------------------------------------------------------------------------
		CRefProperty( CModel* pContainer, const nsCodeQOR::CString& strName, nsMammut::CModelItem::refType Ref ) : CPropertyBase( pContainer, strName )
		{
			CRefProperty< TIndex >* pProp = dynamic_cast< CRefProperty< TIndex >* >( Ref.operator->() );
			if( pProp )
			{
				m_Index = pProp->m_Index;
			}
		}

		//------------------------------------------------------------------------------
		CRefProperty( const CRefProperty< TIndex >& src ) : CPropertyBase( src )
		{
			*this = src;
		}

		//------------------------------------------------------------------------------
		CRefProperty( CModel* pContainer, const CRefProperty< TIndex >& src ) : CPropertyBase( pContainer, src.m_Name )
		{
			*this = src;
		}
		
		//------------------------------------------------------------------------------
		CRefProperty< TIndex >& operator = ( const CRefProperty< TIndex >& src )
		{
			CPropertyBase::operator=( src );
			
			if( &src != this && m_pContainer )
			{		
				m_Index = src.m_Index;
				//m_pContainer->SetAt( m_Value, src.m_pContainer->GetAt( src.m_Value ) );
			}
			
			return *this;
		}

		//------------------------------------------------------------------------------
		CRefProperty< TIndex >& operator = ( nsMammut::CModelItem::refType Ref )
		{
			CRefProperty< TIndex >* pProp = dynamic_cast< CRefProperty< TIndex >* >( Ref.operator->() );
			if( pProp && m_pContainer )
			{
				m_Index = pProp->m_Index;
				//m_pContainer->SetAt( m_Value, pProp->Value() );
			}
			return *this;
		}

		//------------------------------------------------------------------------------
		virtual ~CRefProperty()
		{
		}

		//------------------------------------------------------------------------------
		virtual refType Clone( void )
		{
			return refType( new CRefProperty< TIndex >( *this ), true );
		}

		//------------------------------------------------------------------------------
		template< class TValue >
		void Set( const TValue& src )
		{
			if( m_pContainer )
			{
				Lock();
				(*m_pContainer)[ m_Index ] = src;
				Unlock();			
				m_pContainer->OnChanged( Ref() );
			}
		}

		//------------------------------------------------------------------------------
		template< class TValue >
		TValue Value( void ) const
		{
			Lock();
			TValue Result( (*m_pContainer)[ m_Index ] );
			Unlock();
			return Result;
		}

	protected:
		
		TIndex m_Index;

	private:

		CRefProperty();
	};

}//nsMammut

#endif//MAMMUTQOR_MODEL_REFPROPERTY_H_3
