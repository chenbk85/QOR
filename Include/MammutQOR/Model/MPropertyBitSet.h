//MPropertyBitSet.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#ifndef MAMMUTQOR_MODEL_PROPERTY_BITSET_H_3
#define MAMMUTQOR_MODEL_PROPERTY_BITSET_H_3

#include "SystemQOR.h"
#include "CodeQOR/DataTypes/OTypes.h"
#include "CodeQOR/Observer/Observer.h"
#include "CodeQOR/DataStructures/TLRef.h"
#include "CodeQOR/Text/Char.h"
#include "CodeQOR/DataStructures/TMap.h"
#include "CodeQOR/DataStructures/TBitArray.h"
#include "MammutQOR/Model/MRefProperty.h"
#include "MammutQOR/Model.h"
#include "MammutQOR/Model/MBitSetIterator.h"

//------------------------------------------------------------------------------
namespace nsMammut
{
	class __QOR_INTERFACE( __MAMMUT ) CBitRefProperty;


	//------------------------------------------------------------------------------
	class __QOR_INTERFACE( __MAMMUT ) CPropertyBitSet : public CModel
	{
		friend class CPropertyIterator;

	public:

		CPropertyBitSet();
		CPropertyBitSet( CModel* pContainer );
		virtual ~CPropertyBitSet();
		CPropertyBitSet( const CPropertyBitSet& src);
		CPropertyBitSet& operator = ( const CPropertyBitSet& src );

		CModelItem::refType CreateProperty( const nsCodeQOR::CString& strName, const bool& InitialValue );		
		virtual iterator insert( CModel::refType Item );
		CModelItem::refType operator[]( const nsCodeQOR::CString& strName ) const;
		
		virtual iterator begin();
		virtual iterator end();

		void SetAt( unsigned long, bool );
		bool operator[]( unsigned long ulIndex );

	protected:

		virtual void OnChanged( CModel::refType Prop );
		unsigned long AddProperty( const nsCodeQOR::CString& strName, CModelItem::refType Prop );

		mutable nsCodeQOR::CTMap< nsCodeQOR::CString, CModel::refType > m_PropertyMap;

		nsCodeQOR::CTBitArray<> m_BitArray;
	};

	//------------------------------------------------------------------------------
	class __QOR_INTERFACE( __MAMMUT ) CBitRefProperty : public CRefProperty< unsigned long >
	{
	public:

		//------------------------------------------------------------------------------
		CBitRefProperty( CPropertyBitSet* pContainer, const nsCodeQOR::CString& strName ) : CRefProperty< unsigned long >( pContainer, strName )
		{
			m_Index = pContainer->insert( Ref() ).Index();
		}

		//------------------------------------------------------------------------------
		CBitRefProperty( CPropertyBitSet* pContainer, const nsCodeQOR::CString& strName, const bool& bValue ) : CRefProperty< unsigned long >( pContainer, strName )
		{
			m_Index = pContainer->insert( Ref() ).Index();
		}

		//------------------------------------------------------------------------------
		CBitRefProperty( const CBitRefProperty& src ) : CRefProperty( src )
		{
			//*this = src;
		}

		//------------------------------------------------------------------------------
		CBitRefProperty( CPropertyBitSet* pContainer, const CRefProperty< unsigned long >& src ) : CRefProperty( pContainer, src )
		{
			//*this = src;
		}
		
		//------------------------------------------------------------------------------
		CBitRefProperty& operator = ( const CBitRefProperty& src ) //CRefProperty< TIndex >& operator = ( const CRefProperty< TIndex >& src )
		{
			CRefProperty< unsigned long >::operator=( src );
			if( &src != this && m_pContainer )
			{				
				m_Index = src.m_Index;
				//(*m_pContainer)[ m_Value ] = src.Value();
			}
			return *this;
		}

		//------------------------------------------------------------------------------
		virtual ~CBitRefProperty()
		{
		}

		//------------------------------------------------------------------------------
		void Set( const bool& src )
		{
			if( m_pContainer )
			{
				Lock();
				( dynamic_cast< CPropertyBitSet* >( m_pContainer) )->SetAt( m_Index, src );
				Unlock();			
				m_pContainer->OnChanged( Ref() );
			}
		}

		//------------------------------------------------------------------------------
		bool Value( void ) const
		{
			Lock();
			bool bResult( (*( dynamic_cast< CPropertyBitSet* >( m_pContainer) ) )[ m_Index ] );
			Unlock();
			return bResult;
		}

	};

}//nsMammut

#endif//MAMMUTQOR_MODEL_PROPERTY_BITSET_H_3
