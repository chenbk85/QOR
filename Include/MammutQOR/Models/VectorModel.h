//VectorModel.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#ifndef MAMMUTQOR_MODELS_VECTOR_H_3
#define MAMMUTQOR_MODELS_VECTOR_H_3

#include "SystemQOR.h"
#include "MammutQOR/Model.h"
#include "vector"

//------------------------------------------------------------------------------
namespace nsMammut
{
    //------------------------------------------------------------------------------
    //Model that is a Vector of Model Items of some kind
	template< class TItem >
    class CVectorModel : public CModel
    {
    public:

		typedef typename std::vector< TItem >::iterator indexType;

		friend class CModelIterator< CVectorModel >;
		typedef CModelIterator< CVectorModel > iterator;

		//------------------------------------------------------------------------------
        CVectorModel() : CModel()
		{
		}

		//------------------------------------------------------------------------------
		CVectorModel( const CVectorModel& src ) : CModel( src )
		{
			*this = src;
		}

		//------------------------------------------------------------------------------
		CVectorModel( CModel* pContainer ) : CModel( pContainer )
		{
		}

		//------------------------------------------------------------------------------
        virtual ~CVectorModel()
		{
		}

		//------------------------------------------------------------------------------
		CVectorModel& operator = ( const CVectorModel& src )
		{
			m_ItemVector = src.m_ItemVector;
			return *this;
		}
                    
		//------------------------------------------------------------------------------
		iterator begin( void )
		{
			return iterator( iterator::CModelNode( this, m_ItemVector.begin() ) );
		}

		//------------------------------------------------------------------------------
		iterator end( void )
		{
			return iterator( iterator::CModelNode( this, m_ItemVector.end() ) );
		}
		
		//------------------------------------------------------------------------------
		virtual iterator insert( refType Item )
		{
			m_ItemVector.push_back( Item->As< TItem >() );
			return --end();
		}

		//------------------------------------------------------------------------------
		virtual iterator insertat( iterator it, refType Item )
		{
			return iterator(iterator::CModelNode( this, m_ItemVector.insert(it.Index(), Item->As< TItem >()) ) );
		}

		//------------------------------------------------------------------------------
		virtual iterator erase(iterator it)
		{
			return iterator(iterator::CModelNode(this, m_ItemVector.erase( it.Index() ) ) );
		}

		//------------------------------------------------------------------------------
		iterator find(TItem& item)
		{
			const std::vector< TItem >::iterator it = std::find( m_ItemVector.begin(), m_ItemVector.end(), item );
			iterator::CModelNode Node(this, it);
			return iterator( Node );
		}

		//------------------------------------------------------------------------------
		size_t size( void )
		{
			return m_ItemVector.size();
		}

		//------------------------------------------------------------------------------
		refType at( unsigned long ulIndex )
		{
			return operator[]( ulIndex );
		}

    protected:

		std::vector< TItem > m_ItemVector;

	private:

		refType operator[]( const std::__wrap_iter< TItem* > index )
		{
			return refType( &((*index).As<TItem>()), false );
		}

		refType operator[]( unsigned long );
    };

}//nsMammut

#endif//MAMMUTQOR_MODEL_H_3
