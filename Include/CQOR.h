//CQOR.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Primary header for QOR C Library

#ifndef QOR_C_H_1
#define QOR_C_H_1

#include "SystemQOR.h"
#include "CodeQOR/Instancing/sTOB.h"
#include "SystemQOR/System.h"
#include "CodeQOR/ClassReg/ClassRegEntry.h"

//--------------------------------------------------------------------------------
class __QOR_INTERFACE( __CQOR ) CmxCRT
{
public:

	__QOR_DECLARE_OCLASS_ID( CmxCRT );

    CmxCRT();
    ~CmxCRT();

    void Init( void );
	void Cleanup( void );

    //--------------------------------------------------------------------------------
    nsCompiler::CCompiler& Compiler()
    {
        return the_Compiler;
    }

protected:

    nsCompiler::CCompiler the_Compiler;

};

struct _rand48
{
    unsigned short _seed[ 3 ];
    unsigned short _mult[ 3 ];
    unsigned short _add;
};

struct clib_execution_context
{
    void* m_pOSECParent;//pointer to parent/root EC specific to the OS
    //Data for strtok and every other function that needs reentrancy protection
    unsigned char _con_ch_buf[ 5 /*MB_LEN_MAX*/ ];	// ptr to putch() buffer
    unsigned short _ch_buf_used;				// if the _con_ch_buf is used

    char _l64a_buf[ 8 ];
    _rand48 _r48;
};
/*
__QOR_INTERFACE( __CQOR ) clib_execution_context* create_execution_context( void );//The O/S calls us when it needs a new CRT EC
*/
__QOR_INTERFACE( __CQOR ) clib_execution_context* get_execution_context( void );//We provide an interface to everything else to get the current EC which this retrieves form the O/S

//Compatability extension: MinGW32 expects to find this in the C Library
#ifdef __MINGW32__
typedef void (__QCMP_CALLCON *_PVFV)(void);
typedef int (__QCMP_CALLCON * _onexit_t)(void);
#endif

#endif//QOR_C_H_1

