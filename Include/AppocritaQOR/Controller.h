//Controller.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Abstract base for all controllers

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#ifndef APPOCRITAQOR_CONTROLLER_H_3
#define APPOCRITAQOR_CONTROLLER_H_3

#include "SystemQOR.h"
#include "MammutQOR/Model.h"
#include "CodeQOR/DataStructures/TLinkedList.h"
#include "CodeQOR/Instancing/TMemberPtr.h"
#include <map>

//------------------------------------------------------------------------------
namespace nsMonki
{
	class __QOR_INTERFACE( __MONKI ) CView;
}//nsMonki

//------------------------------------------------------------------------------
namespace nsAppocrita
{
	
	//------------------------------------------------------------------------------
	class __QOR_INTERFACE( __APPOCRITA ) CController
	{
	public:

		typedef nsCodeQOR::CTLRef< CController > refType;
		typedef std::map< nsCodeQOR::mxGUID, refType > childMapType;
		typedef std::map< nsCodeQOR::mxGUID, nsCodeQOR::CClassInstanceFactory* > factoryMapType;

		CController();
		CController( nsMammut::CModel* pModel, CController* pParent = 0 );
		virtual ~CController();

		virtual void SetParent( CController* pParent );
		virtual CController* GetParent( void );

		virtual void SetModelType( const nsCodeQOR::mxGUID* );
		virtual bool SetModel( nsMammut::CModel* pModel );
		virtual nsMammut::CModel* GetModel( void );
		
		virtual void SetChildFactory( const nsCodeQOR::mxGUID* pClassID, nsCodeQOR::CClassInstanceFactory* pFactory );
		virtual refType Child( const nsCodeQOR::mxGUID*, unsigned int uiIndex = 0 );

	protected:

		//virtual nsMonki::CView* CreateView( void );

		CController* m_pParent;		//If this controller is part of a hierarchy of controllers it will have a parent
		//nsMonki::CView* m_pView;				//The view if any that this controller connects to the model
		nsMammut::CModel* m_pModel;			//The Model or View-State this controller manages

		nsCodeQOR::CSTMember< factoryMapType > m_FactoryMap;
		nsCodeQOR::CSTMember< childMapType > m_ChildMap;
		nsCodeQOR::CTMemberPtr< nsMammut::CModel > m_Model;

	};

	//template class std::move_iterator< nsAppocrita::CController** >;
	//template class std::reverse_iterator< std::__wrap_iter< nsAppocrita::CController **> >;
	//template class std::allocator< CController* >;
	//template struct std::pointer_traits< nsAppocrita::CController * const *>;
	//template class std::vector< CController* >;
	typedef nsCodeQOR::CTLinkedList< CController >/*std::vector< CController* >*/ CBaseControllerVector;

	//------------------------------------------------------------------------------
	class __QOR_INTERFACE( __APPOCRITA ) CCompoundController : public CController, public CBaseControllerVector
	{
	public:

		CCompoundController();
		CCompoundController( nsMammut::CModel* pModel, CCompoundController* pParent = 0 );
		virtual ~CCompoundController();

	};

}//nsAppocrita

#endif//APPOCRITAQOR_CONTROLLER_H_3

