//State.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//state machine states

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#ifndef APPOCRITAQOR_STATEMACHINE_STATE_H_3
#define APPOCRITAQOR_STATEMACHINE_STATE_H_3

#include "AppocritaQOR/StateMachine/AbstractState.h"
#include "CodeQOR/DataStructures/TLinkedList.h"

//------------------------------------------------------------------------------
namespace nsAppocrita
{

	class __QOR_INTERFACE( __APPOCRITA ) CHistoryState;
	class __QOR_INTERFACE( __APPOCRITA ) CAbstractTransition;

	//------------------------------------------------------------------------------
	class __QOR_INTERFACE( __APPOCRITA ) CState : public CAbstractState
	{
	public:

		enum eChildMode 
		{
			ExclusiveStates,
			ParallelStates
		};


		CState( eChildMode ChildMode );
		CState( CState* parent = 0, eChildMode ChildMode = CState::ExclusiveStates );
		~CState();

		CAbstractState* errorState() const;
		void setErrorState( CAbstractState* state );

		void addTransition( CAbstractTransition* transition );
		//CSignalTransition* addTransition( QObject* sender, const char* signal, CAbstractState* target );
		CAbstractTransition* addTransition( CAbstractState* target );
		void removeTransition( CAbstractTransition* transition );
		nsCodeQOR::CTLinkedList< CAbstractTransition* > transitions() const;

		CAbstractState* initialState( void ) const;
		void setInitialState( CAbstractState* state );

		eChildMode childMode( void ) const;
		void setChildMode( eChildMode mode );

	protected:

		virtual void onEntry( void );
		virtual void onExit( void );

	private:

		nsCodeQOR::CTLinkedList< CAbstractState* > childStates() const;
		nsCodeQOR::CTLinkedList< CHistoryState* > historyStates() const;
		//nsCodeQOR::CTLinkedList< CAbstractTransition* > transitions() const;

		void emitFinished();
		void emitPropertiesAssigned();

		CAbstractState* m_pErrorState;
		CAbstractState* m_pInitialState;
		eChildMode m_ChildMode;
		mutable bool m_bChildStatesListNeedsRefresh;

		mutable nsCodeQOR::CTLinkedList< CAbstractState* > childStatesList;
		mutable bool m_bTransitionsListNeedsRefresh;
		mutable nsCodeQOR::CTLinkedList< CAbstractTransition* > transitionsList;

	};

}//nsAppocrita

#endif//APPOCRITAQOR_STATEMACHINE_STATE_H_3

