//Kernel.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Linux Kernel wrapper

#ifndef LINQSYS_KERNEL_H_
#define LINQSYS_KERNEL_H_

#define FUTEX_WAIT		0
#define FUTEX_WAKE		1
#define FUTEX_FD		2
#define FUTEX_REQUEUE		3
#define FUTEX_CMP_REQUEUE	4
#define FUTEX_WAKE_OP		5
#define FUTEX_LOCK_PI		6
#define FUTEX_UNLOCK_PI		7
#define FUTEX_TRYLOCK_PI	8
#define FUTEX_WAIT_BITSET	9

#define FUTEX_CLOCK_REALTIME 256

//------------------------------------------------------------------------------
namespace nsLinQSys
{
    extern "C"
    {
    long __syscall_ret(unsigned long);
    long __syscall(long, ...);
    long syscall(long, ...);
    }
}//nsLinQSys

//#include <bits/syscall.h>

#include "LinQSys/LinuxArch.h"     //Linux interface to target architecture

//#include <sys/syscall.h>

#define __syscall1(n,a) __syscall1(n,(long)(a))
#define __syscall2(n,a,b) __syscall2(n,(long)(a),(long)(b))
#define __syscall3(n,a,b,c) __syscall3(n,(long)(a),(long)(b),(long)(c))
#define __syscall4(n,a,b,c,d) __syscall4(n,(long)(a),(long)(b),(long)(c),(long)(d))
#define __syscall5(n,a,b,c,d,e) __syscall5(n,(long)(a),(long)(b),(long)(c),(long)(d),(long)(e))
#define __syscall6(n,a,b,c,d,e,f) __syscall6(n,(long)(a),(long)(b),(long)(c),(long)(d),(long)(e),(long)(f))

#define __SYSCALL_NARGS_X(a,b,c,d,e,f,g,n,...) n
#define __SYSCALL_NARGS(...) __SYSCALL_NARGS_X(__VA_ARGS__,6,5,4,3,2,1,0)
#define __SYSCALL_CONCAT_X(a,b) a##b
#define __SYSCALL_CONCAT(a,b) __SYSCALL_CONCAT_X(a,b)
#define __SYSCALL_DISP(b,...) __SYSCALL_CONCAT(b,__SYSCALL_NARGS(__VA_ARGS__))(__VA_ARGS__)

#define __syscall(...) __SYSCALL_DISP(__syscall,__VA_ARGS__)
#define syscall(...) nsLinQSys::__syscall_ret(__syscall(__VA_ARGS__))

#define socketcall __socketcall
#define socketcall_cp __socketcall_cp

#define __syscall_cp0(n) (__syscall_cp)(n,0,0,0,0,0,0)
#define __syscall_cp1(n,a) (__syscall_cp)(n,(long)(a),0,0,0,0,0)
#define __syscall_cp2(n,a,b) (__syscall_cp)(n,(long)(a),(long)(b),0,0,0,0)
#define __syscall_cp3(n,a,b,c) (__syscall_cp)(n,(long)(a),(long)(b),(long)(c),0,0,0)
#define __syscall_cp4(n,a,b,c,d) (__syscall_cp)(n,(long)(a),(long)(b),(long)(c),(long)(d),0,0)
#define __syscall_cp5(n,a,b,c,d,e) (__syscall_cp)(n,(long)(a),(long)(b),(long)(c),(long)(d),(long)(e),0)
#define __syscall_cp6(n,a,b,c,d,e,f) (__syscall_cp)(n,(long)(a),(long)(b),(long)(c),(long)(d),(long)(e),(long)(f))

#define __syscall_cp(...) __SYSCALL_DISP(__syscall_cp,__VA_ARGS__)
#define syscall_cp(...) nsLinQSys::__syscall_ret(__syscall_cp(__VA_ARGS__))

//------------------------------------------------------------------------------
namespace nsLinQSys
{
    //------------------------------------------------------------------------------
    class CKernel
    {
    public:

        CKernel();
        ~CKernel();

        static CKernel& Instance( void );

        __QCMP_STATIC_CONSTANT( int, OFF_MASK = ((-0x2000ULL << (8*sizeof(long)-1)) | 0xfff) );

        long (__syscall_cp)(long, long, long, long, long, long, long);

        struct k_sigaction
        {
            void (*handler)(int);
            unsigned long flags;
            void (*restorer)(void);
            unsigned mask[2];
        };

        int adjtime( const struct timeval* in, struct timeval* out );
        Cmp_uint_ptr __brk( Cmp_uint_ptr newbrk );
        int brk( void* end );

        int __madvise( void* addr, size_t len, int advice );
        void* __mmap( void* start, size_t len, int prot, int flags, int fd, off_t off );
        void* __mremap( void* old_addr, size_t old_len, size_t new_len, int flags, ... );
        int __munmap( void* start, size_t len );
        void __wake( void* addr, int cnt, int priv );
        void __wait( volatile int* addr, volatile int* waiters, int val, int priv );

    private:

        CKernel( const CKernel& src );
        CKernel& operator = ( const CKernel& src );
    };

}//nsLinQSys

#endif//LINQSYS_KERNEL_H_
