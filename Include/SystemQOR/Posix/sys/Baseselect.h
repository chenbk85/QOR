//Baseselect.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Base CRT class for sys/select

#ifndef SYSTEMQOR_BASE_SYS_SELECT_H_3
#define SYSTEMQOR_BASE_SYS_SELECT_H_3

#include "SystemQOR.h"
#include QOR_SYS_PLATFORMSYSTYPES(select)
#include "CodeQOR/ClassReg/ClassRegEntry.h"

//--------------------------------------------------------------------------------
namespace nsBaseCRT
{
	using nsPlatform::fd_set;
	using nsPlatform::sigset_t;
	using nsPlatform::timespec;
	using nsPlatform::timeval;

    //--------------------------------------------------------------------------------
    class __QOR_INTERFACE( __QSYS ) Csys_select
    {
    public:

		__QOR_DECLARE_OCLASS_ID( Csys_select );

		virtual void FD_CLR( int, fd_set* );
		virtual int FD_ISSET( int, fd_set* );
		virtual void FD_SET( int, fd_set* );
		virtual void FD_ZERO( fd_set* );
		virtual int pselect( int, fd_set* __QCMP_RESTRICT, fd_set* __QCMP_RESTRICT, fd_set* __QCMP_RESTRICT, const timespec* __QCMP_RESTRICT, const sigset_t* __QCMP_RESTRICT );
		virtual int select( int, fd_set* __QCMP_RESTRICT, fd_set* __QCMP_RESTRICT, fd_set* __QCMP_RESTRICT, timeval* __QCMP_RESTRICT );

	protected:

		Csys_select();
		virtual ~Csys_select();

	private:

		Csys_select( const Csys_select& );
		Csys_select& operator = ( const Csys_select& );
    };

}//nsBaseCRT

#endif//SYSTEMQOR_BASE_SYS_SELECT_H_3
