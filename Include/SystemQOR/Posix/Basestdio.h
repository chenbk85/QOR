//Basestdio.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Base CRT class for Cstdio

#ifndef SYSTEMQOR_POSIX_STDIO_H_3
#define SYSTEMQOR_POSIX_STDIO_H_3

#include "SystemQOR.h"
#include QOR_SYS_PLATFORMTYPES(stdio)
#include "CodeQOR/ClassReg/ClassRegEntry.h"

//--------------------------------------------------------------------------------
namespace nsBaseCRT
{
	using nsPlatform::off_t;
    using nsPlatform::FILE;
    using nsPlatform::fpos_t;
    using nsPlatform::va_list;
    using nsPlatform::errno_t;
	using nsPlatform::ssize_t;

    //--------------------------------------------------------------------------------
    class __QOR_INTERFACE( __QSYS ) Cstdio
    {
    public:

		__QOR_DECLARE_OCLASS_ID( Cstdio );

        static const int sc_Seek_Set = 0;

        virtual FILE* _stdin( void );
        virtual FILE* _stdout( void );
        virtual FILE* _stderr( void );

        virtual void clearerr( FILE* stream );
        virtual errno_t clearerr_s( FILE* stream );
        virtual char* ctermid( char* );
		virtual int dprintf( int fd, const char* format, va_list args );
        virtual int fclose( FILE* stream );
        virtual FILE* fdopen( int, const char* );
        virtual int feof( FILE* stream );
        virtual int ferror( FILE* stream );
        virtual int fflush( FILE* stream );
        virtual int fgetc( FILE* stream );
        virtual int fgetpos( FILE* stream, fpos_t* pos );
        virtual char* fgets( char* s, int n, FILE* stream );
        virtual int fileno( FILE* );
        virtual void flockfile( FILE* );
		virtual FILE* fmemopen( void* buf, size_t size, const char* szMode );
        virtual FILE* fopen( const char* filename, const char* mode );
        virtual errno_t fopen_s( FILE** ppFile, const char* szFilename, const char* szMode );
        virtual int fprintf( FILE* stream, const char* format, va_list vargs );
        virtual int fprintf_s( FILE* stream, const char* format, va_list vargs );
        virtual int fputc( int c, FILE* stream );
        virtual int fputs( const char* s, FILE* stream );
        virtual size_t fread( void* ptr, size_t size, size_t nmemb, FILE* stream );
        virtual size_t fread_s( void* ptr, size_t DstSize, size_t ElementSize, size_t Count, FILE* pFile );
        virtual FILE* freopen( const char* filename, const char* mode, FILE* stream );
        virtual errno_t freopen_s( FILE** ppFile, const char* szFilename, const char* szMode, FILE* pOldFile );
        virtual int fscanf( FILE* stream, const char* format, va_list vargs );
        virtual int fscanf_s( FILE* pFile, const char* format, va_list vargs );
        virtual int fseek( FILE* stream, long int offset, int whence );
        virtual int fseeko( FILE*, off_t, int );
        virtual int fsetpos( FILE* stream, const fpos_t* pos );
        virtual long int ftell( FILE* stream );
        virtual off_t ftello( FILE* );
        virtual int ftrylockfile( FILE* );
        virtual void funlockfile( FILE* );
        virtual size_t fwrite( const void* ptr, size_t size, size_t nmemb, FILE* stream );
        virtual int getc( FILE* stream );
        virtual int getchar( void );
        virtual int getc_unlocked( FILE* );
        virtual int getchar_unlocked( void );
		virtual ssize_t getdelim( char** lineptr, size_t* n, int delimiter, FILE* stream );
		virtual ssize_t getline( char** lineptr, size_t* n, FILE* stream );
        virtual char* gets( char* s );
        virtual char* gets_s( char* s, size_t _Size );
		virtual FILE* open_memstream( char** bufp, size_t* sizep );
        virtual int pclose( FILE* );
        virtual void perror( const char* s );
        virtual FILE* popen( const char*, const char* );
        virtual int printf( const char* format, va_list vargs );
        virtual int printf_s( const char* format, va_list vargs );
        virtual int putc( int c, FILE* stream );
        virtual int putchar( int c );
        virtual int putc_unlocked( int, FILE* );
        virtual int putchar_unlocked( int );
        virtual int puts( const char* s );
        virtual int remove( const char* filename );
        virtual int rename( const char* old, const char* pnew );
		virtual int renameat( int ofd, const char* szOld, int newfd, const char* szNew );
        virtual void rewind( FILE* stream );
        virtual int scanf( const char* format, va_list vargs );
        virtual int scanf_s( const char* format, va_list vargs );
        virtual void setbuf( FILE* stream, char* buf );
        virtual int setvbuf( FILE* stream, char* buf, int mode, size_t size );
        virtual int snprintf( char* s, size_t n, const char* format, va_list vargs );
        virtual int sprintf( char* s, const char* format, va_list vargs );
        virtual int sprintf_s( char* s, size_t SizeInBytes, const char* format, va_list vargs );
        virtual int sscanf( const char* s, const char* format, va_list vargs );
        virtual int sscanf_s( const char* s, const char* format, va_list vargs );
        virtual char* tempnam( const char*, const char* );
        virtual FILE* tmpfile( void );
        virtual errno_t tmpfile_s( FILE** ppFile );
        virtual char* tmpnam( char* s );
        virtual errno_t tmpnam_s( char* s, size_t Size );
        virtual int ungetc( int c, FILE* stream );
        virtual int vfprintf( FILE* stream, const char* format, va_list arg );
        virtual int vfprintf_s( FILE* stream, const char* format, va_list arg );
        virtual int vfscanf( FILE* stream, const char* format, va_list arg );
        virtual int vprintf( const char* format, va_list arg );
        virtual int vprintf_s( const char* format, va_list arg );
        virtual int vscanf( const char* format, va_list arg );
        virtual int vsnprintf( char* s, size_t n, const char* format, va_list arg );
        virtual int vsprintf( char* s, const char* format, va_list arg );
        virtual int vsprintf_s( char* s, size_t SizeInBytes, const char* format, va_list arg );
        virtual int vsscanf( const char* s, const char* format, va_list arg );

	protected:

		Cstdio();
		virtual ~Cstdio();

	private:

		Cstdio( const Cstdio& );
		Cstdio& operator = ( const Cstdio& );

    };

}//nsBaseCRT

#endif//SYSTEMQOR_POSIX_STDIO_H_3
