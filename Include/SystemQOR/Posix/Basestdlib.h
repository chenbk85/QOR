//Basestdlib.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Base CRT class for Cstdlib

#ifndef SYSTEMQOR_POSIX_STDLIB_H_3
#define SYSTEMQOR_POSIX_STDLIB_H_3

#include "SystemQOR.h"
#include QOR_SYS_PLATFORMTYPES(stdlib)
#include "CodeQOR/ClassReg/ClassRegEntry.h"

struct clib_execution_context;

//--------------------------------------------------------------------------------
namespace nsBaseCRT
{
    using nsPlatform::div_t;
    using nsPlatform::ldiv_t;
    using nsPlatform::lldiv_t;
	using nsPlatform::errno_t;

    //--------------------------------------------------------------------------------
    class __QOR_INTERFACE( __CQOR ) Cstdlib
    {
    public:

		__QOR_DECLARE_OCLASS_ID( Cstdlib );

        __QCMP_STATIC_CONSTANT( int, CUTOFF = 8 );
        __QCMP_STATIC_CONSTANT( int, STKSIZ = ( 8 * sizeof( void* ) -2 ) );

        Cstdlib();
        virtual ~Cstdlib();

        virtual void _Exit( int status );
		virtual long a64l( const char* pInput );
        __QCMP_NORETURN virtual void abort( void );
        virtual int abs( int j );
        virtual int atexit( void (*func)(void) );
		virtual errno_t _get_doserrno( int* pValue );
		virtual errno_t _set_doserrno( int value );
        virtual double atof( const char* nptr );
        virtual int atoi( const char* nptr );
        virtual long int atol( const char* nptr );
        virtual long long int atoll( const char* nptr );
        virtual void* bsearch( const void* key, const void* base, size_t num, size_t width, int (*compare)(const void *, const void *) );
        virtual void* bsearch_s( const void* key, const void* base, size_t num, size_t width, int ( *compare )( void*, const void*, const void* ), void* pvContext );
        virtual void* calloc(size_t nmemb, size_t size) = 0;
        virtual div_t div( int numer, int denom );
        virtual double drand48( void );
        virtual char* ecvt( double dValue, int iDigit, int* pDecpt, int* pSign );
        virtual double erand48( unsigned short xsubi[ 3 ] );
        virtual void exit( int status );
        virtual char* fcvt( double dValue, int iDigit, int* pDecpt, int* pSign );
        virtual void free( void* ptr );
        virtual char* gcvt( double dValue, int iDigit, char* pBuf );
        virtual char* getenv( const char* name );
        virtual errno_t getenv_s( size_t* pReturnSize, char* pDstBuf, size_t DstSize, const char* pszVarName );
        virtual int getsubopt( char** optionp, char* const* tokens, char** valuep );
        virtual int grantpt( int iFileDes );
        virtual char* initstate( unsigned int uiSeed, char* pState, size_t Size );
        virtual long jrand48( unsigned short xsubi[ 3 ] );
        virtual char* l64a( long lValue );
        virtual long int labs( long int j );
        virtual void lcong48( unsigned short param[ 7 ] );
        virtual ldiv_t ldiv( long int numer, long int denom );
        virtual Cmp_long_long llabs(long long int j);
		virtual lldiv_t lldiv(long long int numer, long long int denom);
        virtual long lrand48( void );
        virtual void* malloc( size_t size );
        virtual int mblen( const char* s, size_t n );
		virtual size_t mbstowcs( wchar_t* pwcs, const char* s, size_t n );
        virtual errno_t mbstowcs_s( size_t* pNumOfCharConverted, wchar_t* pDstBuf, size_t SizeInWords, const char* s, size_t MaxCount );
        virtual int mbtowc( wchar_t* pwc, const char* s, size_t n );
        virtual char* mktemp( char* pTemplate );
        virtual int mkstemp( char* pTemplate );
        virtual long mrand48( void );
        virtual long nrand48( unsigned short xsubi[ 3 ] );
        virtual int posix_memalign( void** memptr, size_t alignment, size_t size );
        virtual int posix_openpt( int oflag );
        virtual char* ptsname( int iFileDes );
        virtual int putenv( const char* str );
        virtual int _putenv( const char* envstring );
        virtual void qsort( void* base, size_t num, size_t width, int (*comp)(const void *, const void *) );
        virtual void qsort_s( void* base, size_t nmemb, size_t SizeOfElements, int ( *pFuncCompare )( void*, const void*, const void* ), void* pvContext );
        virtual int rand(void);
        virtual errno_t rand_s( unsigned int* puiRandomValue );
        virtual int rand_r( unsigned int* pSeed );
        virtual long random( void );
        virtual void* realloc( void* ptr, size_t size );
        virtual char* realpath( const char* path, char* resolved_path );
        virtual unsigned short* seed48( unsigned short seed16v[ 3 ] );
        virtual int setenv( const char* envname, const char* envval, int overwrite );
        virtual void setkey( const char* key );
        virtual char* setstate( const char* );
        virtual void srand( unsigned int /*seed*/ );
        virtual void srand48( long /*seed*/ );
        virtual void srandom( unsigned int uiSeed );
        virtual double strtod( const char* /*nptr*/, char** /*endptr*/ );
        virtual float strtof( const char* nptr, char** endptr );
        virtual long int strtol( const char* nptr, char** endptr, int base );
		virtual long double strtold( const char* nptr, char** endptr );
        virtual long long int strtoll( const char* /*nptr*/, char** /*endptr*/, int /*base*/ );
        virtual unsigned long int strtoul( const char* /*nptr*/, char** /*endptr*/, int /*base*/ );
        virtual unsigned long long int strtoull( const char* /*nptr*/, char** /*endptr*/, int /*base*/ );
        virtual int system( const char* string );
        virtual int unlockpt( int );
        virtual int unsetenv( const char* /*name*/ );
        virtual size_t wcstombs( char* s, const wchar_t* pwcs, size_t n ) ;
        virtual int wctomb( char* s, wchar_t wchar );
        virtual errno_t wcstombs_s( size_t* pReturnValue, char* mbstr, size_t sizeInBytes, const wchar_t* wcstr, size_t count );
        virtual errno_t wctomb_s( int* pRetValue, char* mbchar, size_t sizeInBytes, wchar_t wchar );

    protected:

        char* suboptarg;

        static int _gettemp( /*ptr,*/ char* /*path*/, int /*doopen*/ );
		char* cvt( double arg, int ndigits, int *decpt, int *sign, char *buf, int eflag );
        char* _gcvt( double /*invalue*/, int /*ndigit*/, char* buf, char /*type*/, int /*dot*/ );
        virtual void __dorand48( clib_execution_context* pEC, unsigned short xseed[3] );

        //--------------------------------------------------------------------------------
        // Undocumented behaviour: when given NULL as a buffer, return a pointer to static space in
        //the rent structure.  This is only to support ecvt and fcvt, which aren't ANSI anyway.
        char* fcvtbuf( double /*invalue*/, int /*ndigit*/, int* /*decpt*/, int* /*sign*/, char* /*fcvt_buf*/ );
        virtual char* ecvtbuf( double /*invalue*/, int /*ndigit*/, int* /*decpt*/, int* /*sign*/, char* /*fcvt_buf*/ );
        virtual void swap( char* a, char* b, size_t width );
        virtual void shortsort( char* lo, char* hi, size_t width, int (*comp)( const void*, const void* ) );
    
		virtual long double strtox( const char* s, char** p, int prec ) = 0;

	private:

		unsigned int m_uiSeed;
    };

}//nsBaseCRT

#endif//_QCRT_BASE_STDLIB_H_
