//Baseinttypes.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Base CRT class for Cinttypes

#ifndef SYSTEMQOR_POSIX_INTTYPES_H_3
#define SYSTEMQOR_POSIX_INTTYPES_H_3

#include "SystemQOR.h"
#include QOR_SYS_PLATFORMTYPES(inttypes)
#include "CodeQOR/ClassReg/ClassRegEntry.h"

//--------------------------------------------------------------------------------
namespace nsBaseCRT
{
    using nsPlatform::intmax_t;
    using nsPlatform::imaxdiv_t;
    using nsPlatform::uintmax_t;

    //--------------------------------------------------------------------------------
    class __QOR_INTERFACE( __QSYS ) Cinttypes
    {

	public:

		__QOR_DECLARE_OCLASS_ID( Cinttypes );

        ///The imaxabs() function shall compute the absolute value of an integer j. If the
        ///result cannot be represented, the behavior is undefined.
        virtual intmax_t imaxabs( intmax_t j );

        ///The imaxdiv() function shall compute numer / denom and numer % denom in a single operation.
        ///The imaxdiv() function shall return a structure of type imaxdiv_t, comprising
        ///both the quotient and the remainder. The structure shall contain (in either order)
        ///the members quot (the quotient) and rem (the remainder), each of which has type intmax_t.
        virtual imaxdiv_t imaxdiv( intmax_t numer, intmax_t denom );

        ///These functions shall be equivalent to the strtol(), strtoll(), strtoul(), and
        ///strtoull() functions, except that the initial portion of the string shall be
        ///converted to intmax_t and uintmax_t representation, respectively.
        virtual intmax_t strtoimax( const char* __QCMP_RESTRICT nptr, char** __QCMP_RESTRICT endptr, int base );
        virtual uintmax_t strtoumax( const char* __QCMP_RESTRICT nptr, char** __QCMP_RESTRICT endptr, int base );
        virtual intmax_t wcstoimax( const wchar_t* __QCMP_RESTRICT nptr, wchar_t** __QCMP_RESTRICT endptr, int base );
        virtual uintmax_t wcstoumax( const wchar_t* __QCMP_RESTRICT nptr, wchar_t** __QCMP_RESTRICT endptr, int base );

	protected:

		Cinttypes();
		virtual ~Cinttypes();

	private:

		Cinttypes( const Cinttypes& );
		Cinttypes& operator = ( const Cinttypes& );

    };

}//nsBaseCRT

#endif//SYSTEMQOR_POSIX_INTTYPES_H_3
