//Baseaio.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Base CRT class for aio

#ifndef SYSTEMQOR_POSIX_AIO_H_3
#define SYSTEMQOR_POSIX_AIO_H_3

#include "SystemQOR.h"
#include QOR_SYS_PLATFORMTYPES(aio)
#include "CodeQOR/ClassReg/ClassRegEntry.h"

//--------------------------------------------------------------------------------
namespace nsBaseCRT
{
	using nsPlatform::aiocb;
	using nsPlatform::ssize_t;
	using nsPlatform::timespec;
	using nsPlatform::sigevent;

    //--------------------------------------------------------------------------------
    class __QOR_INTERFACE( __QSYS ) Caio
    {
    public:

		__QOR_DECLARE_OCLASS_ID( Caio );

        virtual int cancel( int, aiocb* );
        virtual int error( const aiocb* );
        virtual int fsync( int, aiocb* );
        virtual int read( aiocb* );
        virtual ssize_t _return( aiocb* );
        virtual int suspend( const aiocb* const[], int, const timespec* );
        virtual int write( aiocb* );
        virtual int lio_listio( int, aiocb* __QCMP_RESTRICT const[], int, sigevent* __QCMP_RESTRICT );

	protected:

        Caio();
        virtual ~Caio();

	private:

		Caio( const Caio& );
		Caio& operator = ( const Caio& );
	};
}//nsBaseCRT

#endif//SYSTEMQOR_POSIX_AIO_H_3
