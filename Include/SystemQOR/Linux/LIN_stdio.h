//LIN_stdio.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Linux overrides for stdio

#ifndef SYSTEMQOR_LIN_STDIO_H_3
#define SYSTEMQOR_LIN_STDIO_H_3

#include "SystemQOR/Linux/types/stdio_types.h"
#include "SystemQOR/Posix/Basestdio.h"

//--------------------------------------------------------------------------------
namespace nsLinux
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __QSYS ) Cstdio : public nsBaseCRT::Cstdio
	{
	public:

		Cstdio(){}
		~Cstdio(){}

		virtual FILE *fopen(const char *__restrict, const char *__restrict);
		virtual FILE *freopen(const char *__restrict, const char *__restrict, FILE *__restrict);
		virtual int fclose(FILE *);

		virtual int remove(const char *);
		virtual int rename(const char *, const char *);

		virtual int feof(FILE *);
		virtual int ferror(FILE *);
		virtual int fflush(FILE *);
		virtual void clearerr(FILE *);

		virtual int fseek(FILE *, long, int);
		virtual long ftell(FILE *);
		virtual void rewind(FILE *);

		virtual int fgetpos(FILE *__restrict, fpos_t *__restrict);
		virtual int fsetpos(FILE *, const fpos_t *);

		virtual size_t fread(void *__restrict, size_t, size_t, FILE *__restrict);
		virtual size_t fwrite(const void *__restrict, size_t, size_t, FILE *__restrict);

		virtual int fgetc(FILE *);
		virtual int getc(FILE *);
		virtual int getchar(void);
		virtual int ungetc(int, FILE *);
		virtual int fputc(int, FILE *);
		virtual int putc(int, FILE *);
		virtual int putchar(int);

		virtual char *fgets(char *__restrict, int, FILE *__restrict);

#if __STDC_VERSION__ < 201112L
		virtual char *gets(char *);
#endif

		virtual int fputs(const char *__restrict, FILE *__restrict);
		virtual int puts(const char *);

		virtual int printf(const char *__restrict, ...);
		virtual int fprintf(FILE *__restrict, const char *__restrict, ...);
		virtual int sprintf(char *__restrict, const char *__restrict, ...);
		virtual int snprintf(char *__restrict, size_t, const char *__restrict, ...);

		virtual int vprintf(const char *__restrict, __isoc_va_list);
		virtual int vfprintf(FILE *__restrict, const char *__restrict, __isoc_va_list);
		virtual int vsprintf(char *__restrict, const char *__restrict, __isoc_va_list);
		virtual int vsnprintf(char *__restrict, size_t, const char *__restrict, __isoc_va_list);

		virtual int scanf(const char *__restrict, ...);
		virtual int fscanf(FILE *__restrict, const char *__restrict, ...);
		virtual int sscanf(const char *__restrict, const char *__restrict, ...);
		virtual int vscanf(const char *__restrict, __isoc_va_list);
		virtual int vfscanf(FILE *__restrict, const char *__restrict, __isoc_va_list);
		virtual int vsscanf(const char *__restrict, const char *__restrict, __isoc_va_list);

		virtual void perror(const char *);

		virtual int setvbuf(FILE *__restrict, char *__restrict, int, size_t);
		virtual void setbuf(FILE *__restrict, char *__restrict);

		virtual char *tmpnam(char *);
		virtual FILE *tmpfile(void);

#if defined(_POSIX_SOURCE) || defined(_POSIX_C_SOURCE) || defined(_XOPEN_SOURCE) || defined(_GNU_SOURCE) || defined(_BSD_SOURCE)
		virtual FILE *fmemopen(void *__restrict, size_t, const char *__restrict);
		virtual FILE *open_memstream(char **, size_t *);
		virtual FILE *fdopen(int, const char *);
		virtual FILE *popen(const char *, const char *);
		virtual int pclose(FILE *);
		virtual int fileno(FILE *);
		virtual int fseeko(FILE *, off_t, int);
		virtual off_t ftello(FILE *);
		virtual int dprintf(int, const char *__restrict, ...);
		virtual int vdprintf(int, const char *__restrict, __isoc_va_list);
		virtual void flockfile(FILE *);
		virtual int ftrylockfile(FILE *);
		virtual void funlockfile(FILE *);
		virtual int getc_unlocked(FILE *);
		virtual int getchar_unlocked(void);
		virtual int putc_unlocked(int, FILE *);
		virtual int putchar_unlocked(int);
		virtual ssize_t getdelim(char **__restrict, size_t *__restrict, int, FILE *__restrict);
		virtual ssize_t getline(char **__restrict, size_t *__restrict, FILE *__restrict);
		virtual int renameat(int, const char *, int, const char *);
		virtual char *ctermid(char *);
#endif

#if defined(_XOPEN_SOURCE) || defined(_GNU_SOURCE) || defined(_BSD_SOURCE)
		virtual char *tempnam(const char *, const char *);
#endif

#if defined(_GNU_SOURCE) || defined(_BSD_SOURCE)
		virtual char *cuserid(char *);
		virtual void setlinebuf(FILE *);
		virtual void setbuffer(FILE *, char *, size_t);
		virtual int fgetc_unlocked(FILE *);
		virtual int fputc_unlocked(int, FILE *);
		virtual int fflush_unlocked(FILE *);
		virtual size_t fread_unlocked(void *, size_t, size_t, FILE *);
		virtual size_t fwrite_unlocked(const void *, size_t, size_t, FILE *);
		virtual void clearerr_unlocked(FILE *);
		virtual int feof_unlocked(FILE *);
		virtual int ferror_unlocked(FILE *);
		virtual int fileno_unlocked(FILE *);
		virtual int getw(FILE *);
		virtual int putw(int, FILE *);
		virtual char *fgetln(FILE *, size_t *);
		virtual int asprintf(char **, const char *, ...);
		virtual int vasprintf(char **, const char *, __isoc_va_list);
#endif

#ifdef _GNU_SOURCE
		virtual char *fgets_unlocked(char *, int, FILE *);
		virtual int fputs_unlocked(const char *, FILE *);
#endif

		virtual void _flushlbf(void);
		virtual int __fsetlocking(FILE *, int);
		virtual int __fwriting(FILE *);
		virtual int __freading(FILE *);
		virtual int __freadable(FILE *);
		virtual int __fwritable(FILE *);
		virtual int __flbf(FILE *);
		virtual size_t __fbufsize(FILE *);
		virtual size_t __fpending(FILE *);
		virtual int __fpurge(FILE *);
		virtual size_t __freadahead(FILE *);
		virtual const char *__freadptr(FILE *, size_t *);
		virtual void __freadptrinc(FILE *, size_t);
		virtual void __fseterr(FILE *);

	private:

		Cstdio( const Cstdio& );
		Cstdio& operator = ( const Cstdio& );

	};

}//nsLinux

#endif//SYSTEMQOR_LIN_STDIO_H_3
