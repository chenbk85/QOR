//LIN_string.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Linux overrides for string

#ifndef SYSTEMQOR_LIN_STRING_H_3
#define SYSTEMQOR_LIN_STRING_H_3

#include "SystemQOR/Linux/types/string_types.h"
#include "SystemQOR/Posix/Basestring.h"

//--------------------------------------------------------------------------------
namespace nsLinux
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __QSYS ) Cstring : public nsBaseCRT::Cstring
	{
	public:

		Cstring(){}
		~Cstring(){}

		virtual void *memcpy (void *__restrict, const void *__restrict, size_t);
		virtual void *memmove (void *, const void *, size_t);
		virtual void *memset (void *, int, size_t);
		virtual int memcmp (const void *, const void *, size_t);
		virtual void *memchr (const void *, int, size_t);

		virtual char *strcpy (char *__restrict, const char *__restrict);
		virtual char *strncpy (char *__restrict, const char *__restrict, size_t);

		virtual char *strcat (char *__restrict, const char *__restrict);
		virtual char *strncat (char *__restrict, const char *__restrict, size_t);

		virtual int strcmp (const char *, const char *);
		virtual int strncmp (const char *, const char *, size_t);

		virtual int strcoll (const char *, const char *);
		virtual size_t strxfrm (char *__restrict, const char *__restrict, size_t);

		virtual char *strchr (const char *, int);
		virtual char *strrchr (const char *, int);

		virtual size_t strcspn (const char *, const char *);
		virtual size_t strspn (const char *, const char *);
		virtual char *strpbrk (const char *, const char *);
		virtual char *strstr (const char *, const char *);
		virtual char *strtok (char *__restrict, const char *__restrict);
		virtual size_t strlen (const char *);
		virtual char *strerror (int);

#if defined(_POSIX_SOURCE) || defined(_POSIX_C_SOURCE) || defined(_XOPEN_SOURCE) || defined(_GNU_SOURCE) || defined(_BSD_SOURCE)
		virtual char *strtok_r (char *__restrict, const char *__restrict, char **__restrict);
		virtual int strerror_r (int, char *, size_t);
		virtual char *stpcpy(char *__restrict, const char *__restrict);
		virtual char *stpncpy(char *__restrict, const char *__restrict, size_t);
		virtual size_t strnlen (const char *, size_t);
		virtual char *strdup (const char *);
		virtual char *strndup (const char *, size_t);
		virtual char *strsignal(int);
		virtual char *strerror_l (int, locale_t);
		virtual int strcoll_l (const char *, const char *, locale_t);
		virtual size_t strxfrm_l (char *__restrict, const char *__restrict, size_t, locale_t);
#endif

#if defined(_XOPEN_SOURCE) || defined(_GNU_SOURCE) || defined(_BSD_SOURCE)
		virtual void *memccpy (void *__restrict, const void *__restrict, int, size_t);
#endif

#if defined(_GNU_SOURCE) || defined(_BSD_SOURCE)
		virtual char *strsep(char **, const char *);
		virtual size_t strlcat (char *, const char *, size_t);
		virtual size_t strlcpy (char *, const char *, size_t);
#endif

#ifdef _GNU_SOURCE
		virtual int strverscmp (const char *, const char *);
		virtual int strcasecmp_l (const char *, const char *, locale_t);
		virtual int strncasecmp_l (const char *, const char *, size_t, locale_t);
		virtual char *strchrnul(const char *, int);
		virtual char *strcasestr(const char *, const char *);
		virtual void *memmem(const void *, size_t, const void *, size_t);
		virtual void *memrchr(const void *, int, size_t);
		virtual void *mempcpy(void *, const void *, size_t);
#endif

	private:

		Cstring( const Cstring& );
		Cstring& operator = ( const Cstring& );

	};

}//nsLinux

#endif//SYSTEMQOR_LIN_STRING_H_3
