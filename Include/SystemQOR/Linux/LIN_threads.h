//LIN_threads.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Linux overrides for threads

#ifndef SYSTEMQOR_LIN_THREADS_H_3
#define SYSTEMQOR_LIN_THREADS_H_3

#include "SystemQOR/Linux/types/threads_types.h"
//#include "SystemQOR/Posix/Baseregex.h"

//--------------------------------------------------------------------------------
namespace nsLinux
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __QSYS ) Cthreads //: public nsBaseCRT::Cregex
	{
	public:

		Cthreads(){}
		~Cthreads(){}

		virtual int thrd_create(thrd_t *, thrd_start_t, void *);
		virtual _Noreturn void thrd_exit(int);

		virtual int thrd_detach(thrd_t);
		virtual int thrd_join(thrd_t, int *);

		virtual int thrd_sleep(const struct timespec *, struct timespec *);
		virtual void thrd_yield(void);

		virtual thrd_t thrd_current(void);
		virtual int thrd_equal(thrd_t, thrd_t);

		virtual void call_once(once_flag *, void (*)(void));

		virtual int mtx_init(mtx_t *, int);
		virtual void mtx_destroy(mtx_t *);

		virtual int mtx_lock(mtx_t *);
		virtual int mtx_timedlock(mtx_t *__restrict, const struct timespec *__restrict);
		virtual int mtx_trylock(mtx_t *);
		virtual int mtx_unlock(mtx_t *);

		virtual int cnd_init(cnd_t *);
		virtual void cnd_destroy(cnd_t *);

		virtual int cnd_broadcast(cnd_t *);
		virtual int cnd_signal(cnd_t *);

		virtual int cnd_timedwait(cnd_t *__restrict, mtx_t *__restrict, const struct timespec *__restrict);
		virtual int cnd_wait(cnd_t *, mtx_t *);

		virtual int tss_create(tss_t *, tss_dtor_t);
		virtual void tss_delete(tss_t key);

		virtual int tss_set(tss_t, void *);
		virtual void* tss_get(tss_t);

	private:

		Cthreads( const Cthreads& );
		Cthreads& operator = ( const Cthreads& );

	};

}//nsLinux

#endif//SYSTEMQOR_LIN_THREADS_H_3
