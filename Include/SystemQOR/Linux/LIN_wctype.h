//LIN_wctype.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Linux overrides for wctype

#ifndef SYSTEMQOR_LIN_WCTYPE_H_3
#define SYSTEMQOR_LIN_WCTYPE_H_3

#include "SystemQOR/Linux/types/wctype_types.h"
//#include "SystemQOR/Posix/Baseregex.h"

//--------------------------------------------------------------------------------
namespace nsLinux
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __QSYS ) Cwctype //: public nsBaseCRT::Cregex
	{
	public:

		Cwctype(){}
		~Cwctype(){}

		virtual int       iswalnum(wint_t);
		virtual int       iswalpha(wint_t);
		virtual int       iswblank(wint_t);
		virtual int       iswcntrl(wint_t);
		virtual int       iswdigit(wint_t);
		virtual int       iswgraph(wint_t);
		virtual int       iswlower(wint_t);
		virtual int       iswprint(wint_t);
		virtual int       iswpunct(wint_t);
		virtual int       iswspace(wint_t);
		virtual int       iswupper(wint_t);
		virtual int       iswxdigit(wint_t);
		virtual int       iswctype(wint_t, wctype_t);
		virtual wint_t    towctrans(wint_t, wctrans_t);
		virtual wint_t    towlower(wint_t);
		virtual wint_t    towupper(wint_t);
		virtual wctrans_t wctrans(const char *);
		virtual wctype_t  wctype(const char *);

#if defined(_POSIX_SOURCE) || defined(_POSIX_C_SOURCE) || defined(_XOPEN_SOURCE) || defined(_GNU_SOURCE) || defined(_BSD_SOURCE)

		virtual int iswalnum_l(wint_t, locale_t);
		virtual int iswalpha_l(wint_t, locale_t);
		virtual int iswblank_l(wint_t, locale_t);
		virtual int iswcntrl_l(wint_t, locale_t);
		virtual int iswdigit_l(wint_t, locale_t);
		virtual int iswgraph_l(wint_t, locale_t);
		virtual int iswlower_l(wint_t, locale_t);
		virtual int iswprint_l(wint_t, locale_t);
		virtual int iswpunct_l(wint_t, locale_t);
		virtual int iswspace_l(wint_t, locale_t);
		virtual int iswupper_l(wint_t, locale_t);
		virtual int iswxdigit_l(wint_t, locale_t);
		virtual int iswctype_l(wint_t, wctype_t, locale_t);
		virtual wint_t towlower_l(wint_t, locale_t);
		virtual wint_t towupper_l(wint_t, locale_t);
		virtual wint_t towctrans_l(wint_t, wctrans_t, locale_t);
		virtual wctrans_t wctrans_l(const char *, locale_t);
		virtual wctype_t  wctype_l(const char *, locale_t);

#endif

        virtual int iswascii( wint_t wc );

	private:

		Cwctype( const Cwctype& );
		Cwctype& operator = ( const Cwctype& );

	};

}//nsLinux

#endif//SYSTEMQOR_LIN_WCTYPE_H_3
