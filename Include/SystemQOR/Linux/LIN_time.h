//LIN_time.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Linux overrides for time

#ifndef SYSTEMQOR_LIN_TIME_H_3
#define SYSTEMQOR_LIN_TIME_H_3

#include "SystemQOR/Linux/types/time_types.h"
//#include "SystemQOR/Posix/Baseregex.h"

//--------------------------------------------------------------------------------
namespace nsLinux
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __QSYS ) Ctime //: public nsBaseCRT::Cregex
	{
	public:

		Ctime(){}
		~Ctime(){}

		virtual clock_t clock (void);
		virtual time_t time (time_t *);
		virtual double difftime (time_t, time_t);
		virtual time_t mktime (struct tm *);
		virtual size_t strftime (char *__restrict, size_t, const char *__restrict, const struct tm *__restrict);
		virtual tm *gmtime (const time_t *);
		virtual tm *localtime (const time_t *);
		virtual char *asctime (const tm *);
		virtual char *ctime (const time_t *);
		virtual int timespec_get( timespec *, int);

#if defined(_POSIX_SOURCE) || defined(_POSIX_C_SOURCE) || defined(_XOPEN_SOURCE) || defined(_GNU_SOURCE) || defined(_BSD_SOURCE)

		virtual size_t strftime_l (char *  __restrict, size_t, const char *  __restrict, const struct tm *  __restrict, locale_t);

		virtual tm *gmtime_r (const time_t *__restrict, struct tm *__restrict);
		virtual tm *localtime_r (const time_t *__restrict, struct tm *__restrict);
		virtual char *asctime_r (const struct tm *__restrict, char *__restrict);
		virtual char *ctime_r (const time_t *, char *);

		virtual void tzset (void);

		virtual int nanosleep (const struct timespec *, struct timespec *);
		virtual int clock_getres (clockid_t, struct timespec *);
		virtual int clock_gettime (clockid_t, struct timespec *);
		virtual int clock_settime (clockid_t, const struct timespec *);
		virtual int clock_nanosleep (clockid_t, int, const struct timespec *, struct timespec *);
		virtual int clock_getcpuclockid (pid_t, clockid_t *);

		virtual int timer_create (clockid_t, struct sigevent *__restrict, timer_t *__restrict);
		virtual int timer_delete (timer_t);
		virtual int timer_settime (timer_t, int, const struct itimerspec *__restrict, struct itimerspec *__restrict);
		virtual int timer_gettime (timer_t, struct itimerspec *);
		virtual int timer_getoverrun (timer_t);
#endif

#if defined(_XOPEN_SOURCE) || defined(_BSD_SOURCE) || defined(_GNU_SOURCE)
		virtual char *strptime (const char *__restrict, const char *__restrict, struct tm *__restrict);
		virtual tm* getdate (const char *);
#endif

#if defined(_GNU_SOURCE) || defined(_BSD_SOURCE)
		virtual int stime( const time_t *);
		virtual time_t timegm( tm* );
#endif

        virtual errno_t asctime_s( char* pBuf, size_t SizeInBytes, const tm* pTm );

	private:

		Ctime( const Ctime& );
		Ctime& operator = ( const Ctime& );

	};

}//nsLinux

#endif//SYSTEMQOR_LIN_TIME_H_3
