//LIN_math.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Linux overrides for math

#ifndef SYSTEMQOR_LIN_MATH_H_3
#define SYSTEMQOR_LIN_MATH_H_3

#include "SystemQOR/Linux/types/math_types.h"
//#include "SystemQOR/Posix/Baseregex.h"

//--------------------------------------------------------------------------------
namespace nsLinux
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __QSYS ) Cmath //: public nsBaseCRT::Cregex
	{
	public:

		Cmath(){}
		~Cmath(){}

		int __fpclassify(double);
		int __fpclassifyf(float);
		int __fpclassifyl(long double);

		static __inline unsigned __FLOAT_BITS(float __f)
		{
			union {float __f; unsigned __i;} __u;
			__u.__f = __f;
			return __u.__i;
		}

		static __inline unsigned long long __DOUBLE_BITS(double __f)
		{
			union {double __f; unsigned long long __i;} __u;
			__u.__f = __f;
			return __u.__i;
		}

		int __signbit(double);
		int __signbitf(float);
		int __signbitl(long double);

        template< typename _t >
        int fpclassify( _t& x)
        {
            return ( sizeof(x) == sizeof(float) ? __fpclassifyf(x) : sizeof(x) == sizeof(double) ? __fpclassify(x) : __fpclassifyl(x) );
        }

        template< typename _t >
        int isfinite( _t& x )
        {
            return ( sizeof(x) == sizeof(float) ? (__FLOAT_BITS(x) & 0x7fffffff) < 0x7f800000 : sizeof(x) == sizeof(double) ? (__DOUBLE_BITS(x) & -1ULL>>1) < 0x7ffULL<<52 : __fpclassifyl(x) > FpInfinite );
        }

        template< typename _t >
        int signbit( _t& x)
        {
            return ( sizeof(x) == sizeof(float) ? (int)(__FLOAT_BITS(x)>>31) : sizeof(x) == sizeof(double) ? (int)(__DOUBLE_BITS(x)>>63) : __signbitl(x) );
        }

        template< typename _t >
        int isinf( _t& x)
        {
            return ( sizeof(x) == sizeof(float) ? (__FLOAT_BITS(x) & 0x7fffffff) == 0x7f800000 : sizeof(x) == sizeof(double) ? (__DOUBLE_BITS(x) & -1ULL>>1) == 0x7ffULL<<52 : __fpclassifyl(x) == FpInfinite );
        }

        template< typename _t >
        int isnan( _t&x )
        {
            return ( sizeof(x) == sizeof(float) ? (__FLOAT_BITS(x) & 0x7fffffff) > 0x7f800000 : sizeof(x) == sizeof(double) ? (__DOUBLE_BITS(x) & -1ULL>>1) > 0x7ffULL<<52 : __fpclassifyl(x) == FpNAN );
        }

        template< typename _t >
        int isnormal( _t&x )
        {
            return ( sizeof(x) == sizeof(float) ? ((__FLOAT_BITS(x)+0x00800000) & 0x7fffffff) >= 0x01000000 : sizeof(x) == sizeof(double) ? ((__DOUBLE_BITS(x)+(1ULL<<52)) & -1ULL>>1) >= 1ULL<<53 : __fpclassifyl(x) == FpNormal );
        }

        template< typename _t, typename _u >
        int isunordered( _t& x, _u& y )
        {
            return (isnan((x)) ? ((void)(y),1) : isnan((y)));
        }


		__ISREL_DEF(lessf, <, float_t)
		__ISREL_DEF(less, <, double_t)
		__ISREL_DEF(lessl, <, long double)
		__ISREL_DEF(lessequalf, <=, float_t)
		__ISREL_DEF(lessequal, <=, double_t)
		__ISREL_DEF(lessequall, <=, long double)
		__ISREL_DEF(lessgreaterf, !=, float_t)
		__ISREL_DEF(lessgreater, !=, double_t)
		__ISREL_DEF(lessgreaterl, !=, long double)
		__ISREL_DEF(greaterf, >, float_t)
		__ISREL_DEF(greater, >, double_t)
		__ISREL_DEF(greaterl, >, long double)
		__ISREL_DEF(greaterequalf, >=, float_t)
		__ISREL_DEF(greaterequal, >=, double_t)
		__ISREL_DEF(greaterequall, >=, long double)

		double      acos(double);
		float       acosf(float);
		long double acosl(long double);

		double      acosh(double);
		float       acoshf(float);
		long double acoshl(long double);

		double      asin(double);
		float       asinf(float);
		long double asinl(long double);

		double      asinh(double);
		float       asinhf(float);
		long double asinhl(long double);

		double      atan(double);
		float       atanf(float);
		long double atanl(long double);

		double      atan2(double, double);
		float       atan2f(float, float);
		long double atan2l(long double, long double);

		double      atanh(double);
		float       atanhf(float);
		long double atanhl(long double);

		double      cbrt(double);
		float       cbrtf(float);
		long double cbrtl(long double);

		double      ceil(double);
		float       ceilf(float);
		long double ceill(long double);

		double      copysign(double, double);
		float       copysignf(float, float);
		long double copysignl(long double, long double);

		double      cos(double);
		float       cosf(float);
		long double cosl(long double);

		double      cosh(double);
		float       coshf(float);
		long double coshl(long double);

		double      erf(double);
		float       erff(float);
		long double erfl(long double);

		double      erfc(double);
		float       erfcf(float);
		long double erfcl(long double);

		double      exp(double);
		float       expf(float);
		long double expl(long double);

		double      exp2(double);
		float       exp2f(float);
		long double exp2l(long double);

		double      expm1(double);
		float       expm1f(float);
		long double expm1l(long double);

		double      fabs(double);
		float       fabsf(float);
		long double fabsl(long double);

		double      fdim(double, double);
		float       fdimf(float, float);
		long double fdiml(long double, long double);

		double      floor(double);
		float       floorf(float);
		long double floorl(long double);

		double      fma(double, double, double);
		float       fmaf(float, float, float);
		long double fmal(long double, long double, long double);

		double      fmax(double, double);
		float       fmaxf(float, float);
		long double fmaxl(long double, long double);

		double      fmin(double, double);
		float       fminf(float, float);
		long double fminl(long double, long double);

		double      fmod(double, double);
		float       fmodf(float, float);
		long double fmodl(long double, long double);

		double      frexp(double, int *);
		float       frexpf(float, int *);
		long double frexpl(long double, int *);

		double      hypot(double, double);
		float       hypotf(float, float);
		long double hypotl(long double, long double);

		int         ilogb(double);
		int         ilogbf(float);
		int         ilogbl(long double);

		double      ldexp(double, int);
		float       ldexpf(float, int);
		long double ldexpl(long double, int);

		double      lgamma(double);
		float       lgammaf(float);
		long double lgammal(long double);

		long long   llrint(double);
		long long   llrintf(float);
		long long   llrintl(long double);

		long long   llround(double);
		long long   llroundf(float);
		long long   llroundl(long double);

		double      log(double);
		float       logf(float);
		long double logl(long double);

		double      log10(double);
		float       log10f(float);
		long double log10l(long double);

		double      log1p(double);
		float       log1pf(float);
		long double log1pl(long double);

		double      log2(double);
		float       log2f(float);
		long double log2l(long double);

		double      logb(double);
		float       logbf(float);
		long double logbl(long double);

		long        lrint(double);
		long        lrintf(float);
		long        lrintl(long double);

		long        lround(double);
		long        lroundf(float);
		long        lroundl(long double);

		double      modf(double, double *);
		float       modff(float, float *);
		long double modfl(long double, long double *);

		double      nan(const char *);
		float       nanf(const char *);
		long double nanl(const char *);

		double      nearbyint(double);
		float       nearbyintf(float);
		long double nearbyintl(long double);

		double      nextafter(double, double);
		float       nextafterf(float, float);
		long double nextafterl(long double, long double);

		double      nexttoward(double, long double);
		float       nexttowardf(float, long double);
		long double nexttowardl(long double, long double);

		double      pow(double, double);
		float       powf(float, float);
		long double powl(long double, long double);

		double      remainder(double, double);
		float       remainderf(float, float);
		long double remainderl(long double, long double);

		double      remquo(double, double, int *);
		float       remquof(float, float, int *);
		long double remquol(long double, long double, int *);

		double      rint(double);
		float       rintf(float);
		long double rintl(long double);

		double      round(double);
		float       roundf(float);
		long double roundl(long double);

		double      scalbln(double, long);
		float       scalblnf(float, long);
		long double scalblnl(long double, long);

		double      scalbn(double, int);
		float       scalbnf(float, int);
		long double scalbnl(long double, int);

		double      sin(double);
		float       sinf(float);
		long double sinl(long double);

		double      sinh(double);
		float       sinhf(float);
		long double sinhl(long double);

		double      sqrt(double);
		float       sqrtf(float);
		long double sqrtl(long double);

		double      tan(double);
		float       tanf(float);
		long double tanl(long double);

		double      tanh(double);
		float       tanhf(float);
		long double tanhl(long double);

		double      tgamma(double);
		float       tgammaf(float);
		long double tgammal(long double);

		double      trunc(double);
		float       truncf(float);
		long double truncl(long double);

#if defined(_XOPEN_SOURCE) || defined(_GNU_SOURCE) || defined(_BSD_SOURCE)

		//extern int signgam;

		double      j0(double);
		double      j1(double);
		double      jn(int, double);

		double      y0(double);
		double      y1(double);
		double      yn(int, double);
#endif

#if defined(_GNU_SOURCE) || defined(_BSD_SOURCE)

		double      drem(double, double);
		float       dremf(float, float);

		int         finite(double);
		int         finitef(float);

		double      scalb(double, double);
		float       scalbf(float, float);

		double      significand(double);
		float       significandf(float);

		double      lgamma_r(double, int*);
		float       lgammaf_r(float, int*);

		float       j0f(float);
		float       j1f(float);
		float       jnf(int, float);

		float       y0f(float);
		float       y1f(float);
		float       ynf(int, float);
#endif

#ifdef _GNU_SOURCE
		long double lgammal_r(long double, int*);

		void        sincos(double, double*, double*);
		void        sincosf(float, float*, float*);
		void        sincosl(long double, long double*, long double*);

		double      exp10(double);
		float       exp10f(float);
		long double exp10l(long double);

		double      pow10(double);
		float       pow10f(float);
		long double pow10l(long double);
#endif


	private:

		Cmath( const Cmath& );
		Cmath& operator = ( const Cmath& );

	};

}//nsLinux

#endif//SYSTEMQOR_LIN_MATH_H_3
