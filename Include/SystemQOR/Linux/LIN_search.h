//LIN_search.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Linux overrides for search

#ifndef SYSTEMQOR_LIN_SEARCH_H_3
#define SYSTEMQOR_LIN_SEARCH_H_3

#include "SystemQOR/Linux/types/search_types.h"
//#include "SystemQOR/Posix/Baseregex.h"

//--------------------------------------------------------------------------------
namespace nsLinux
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __QSYS ) Csearch //: public nsBaseCRT::Cregex
	{
	public:

		Csearch(){}
		~Csearch(){}

		virtual int hcreate(size_t);
		virtual void hdestroy(void);
		virtual ENTRY *hsearch(ENTRY, ACTION);

#ifdef _GNU_SOURCE
		virtual int hcreate_r(size_t, struct hsearch_data *);
		virtual void hdestroy_r(struct hsearch_data *);
		virtual int hsearch_r(ENTRY, ACTION, ENTRY **, struct hsearch_data *);
#endif

		virtual void insque(void *, void *);
		virtual void remque(void *);

		virtual void *lsearch(const void *, void *, size_t *, size_t, int (*)(const void *, const void *));
		virtual void *lfind(const void *, const void *, size_t *, size_t, int (*)(const void *, const void *));

		virtual void *tdelete(const void *__restrict, void **__restrict, int(*)(const void *, const void *));
		virtual void *tfind(const void *, void *const *, int(*)(const void *, const void *));
		virtual void *tsearch(const void *, void **, int (*)(const void *, const void *));
		virtual void twalk(const void *, void (*)(const void *, VISIT, int));

#ifdef _GNU_SOURCE
		virtual void tdestroy(void *, void (*)(void *));
#endif

	private:

		Csearch( const Csearch& );
		Csearch& operator = ( const Csearch& );

	};

}//nsLinux

#endif//SYSTEMQOR_LIN_SEARCH_H_3
