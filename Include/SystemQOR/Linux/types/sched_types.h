//sched_types.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.


#ifndef SYSTEMQOR_LIN_TYPES_SCHED_H_3
#define SYSTEMQOR_LIN_TYPES_SCHED_H_3

#include "SystemQOR/Linux/LIN_features.h"

#define __NEED_struct_timespec
#define __NEED_pid_t
#define __NEED_time_t

#ifdef _GNU_SOURCE
#	define __NEED_size_t
#endif

#include QOR_SYS_ARCHHEADER(alltypes.h)

namespace nsLinux
{
	struct sched_param
	{
		int sched_priority;
		int sched_ss_low_priority;
		timespec sched_ss_repl_period;
		timespec sched_ss_init_budget;
		int sched_ss_max_repl;
	};
}//nsLinux

#define SCHED_OTHER 0
#define SCHED_FIFO 1
#define SCHED_RR 2
#define SCHED_BATCH 3
#define SCHED_IDLE 5
#define SCHED_DEADLINE 6
#define SCHED_RESET_ON_FORK 0x40000000

#ifdef _GNU_SOURCE
#	define CSIGNAL		0x000000ff
#	define CLONE_VM	0x00000100
#	define CLONE_FS	0x00000200
#	define CLONE_FILES	0x00000400
#	define CLONE_SIGHAND	0x00000800
#	define CLONE_PTRACE	0x00002000
#	define CLONE_VFORK	0x00004000
#	define CLONE_PARENT	0x00008000
#	define CLONE_THREAD	0x00010000
#	define CLONE_NEWNS	0x00020000
#	define CLONE_SYSVSEM	0x00040000
#	define CLONE_SETTLS	0x00080000
#	define CLONE_PARENT_SETTID	0x00100000
#	define CLONE_CHILD_CLEARTID	0x00200000
#	define CLONE_DETACHED	0x00400000
#	define CLONE_UNTRACED	0x00800000
#	define CLONE_CHILD_SETTID	0x01000000
#	define CLONE_NEWUTS	0x04000000
#	define CLONE_NEWIPC	0x08000000
#	define CLONE_NEWUSER	0x10000000
#	define CLONE_NEWPID	0x20000000
#	define CLONE_NEWNET	0x40000000
#	define CLONE_IO	0x80000000

namespace nsLinux
{
	typedef struct cpu_set_t
	{
		unsigned long __bits[128/sizeof(long)];
	} cpu_set_t;

}//nsLinux

#	define __CPU_op_S(i, size, set, op) ( (i)/8U >= (size) ? 0 : \
	((set)->__bits[(i)/8/sizeof(long)] op (1UL<<((i)%(8*sizeof(long))))) )

#	define CPU_SET_S(i, size, set) __CPU_op_S(i, size, set, |=)
#	define CPU_CLR_S(i, size, set) __CPU_op_S(i, size, set, &=~)
#	define CPU_ISSET_S(i, size, set) __CPU_op_S(i, size, set, &)

#	define __CPU_op_func_S(func, op) \
__inline void __CPU_##func##_S(size_t __size, cpu_set_t *__dest, \
	const cpu_set_t *__src1, const cpu_set_t *__src2) \
{ \
	size_t __i; \
	for (__i=0; __i<__size/sizeof(long); __i++) \
		__dest->__bits[__i] = __src1->__bits[__i] \
			op __src2->__bits[__i] ; \
}

#	define CPU_AND_S(a,b,c,d) __CPU_AND_S(a,b,c,d)
#	define CPU_OR_S(a,b,c,d) __CPU_OR_S(a,b,c,d)
#	define CPU_XOR_S(a,b,c,d) __CPU_XOR_S(a,b,c,d)

#	define CPU_COUNT_S(size,set) __sched_cpucount(size,set)
#	define CPU_ZERO_S(size,set) memset(set,0,size)
#	define CPU_EQUAL_S(size,set1,set2) (!memcmp(set1,set2,size))

#	define CPU_ALLOC_SIZE(n) (sizeof(long) * ( (n)/(8*sizeof(long)) \
	+ ((n)%(8*sizeof(long)) + 8*sizeof(long)-1)/(8*sizeof(long)) ) )
#	define CPU_ALLOC(n) ((cpu_set_t *)calloc(1,CPU_ALLOC_SIZE(n)))
#	define CPU_FREE(set) free(set)

#	define CPU_SETSIZE 128

#	define CPU_SET(i, set) CPU_SET_S(i,sizeof(cpu_set_t),set)
#	define CPU_CLR(i, set) CPU_CLR_S(i,sizeof(cpu_set_t),set)
#	define CPU_ISSET(i, set) CPU_ISSET_S(i,sizeof(cpu_set_t),set)
#	define CPU_AND(d,s1,s2) CPU_AND_S(sizeof(cpu_set_t),d,s1,s2)
#	define CPU_OR(d,s1,s2) CPU_OR_S(sizeof(cpu_set_t),d,s1,s2)
#	define CPU_XOR(d,s1,s2) CPU_XOR_S(sizeof(cpu_set_t),d,s1,s2)
#	define CPU_COUNT(set) CPU_COUNT_S(sizeof(cpu_set_t),set)
#	define CPU_ZERO(set) CPU_ZERO_S(sizeof(cpu_set_t),set)
#	define CPU_EQUAL(s1,s2) CPU_EQUAL_S(sizeof(cpu_set_t),s1,s2)

#endif


#endif//SYSTEMQOR_LIN_TYPES_SCHED_H_3
