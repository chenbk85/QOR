//float_types.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.


#ifndef SYSTEMQOR_LIN_TYPES_FLOAT_H_3
#define SYSTEMQOR_LIN_TYPES_FLOAT_H_3

#include "SystemQOR.h"

#define FLT_RADIX 2

#define FLT_TRUE_MIN 1.40129846432481707092e-45F
#define FLT_MIN 1.17549435082228750797e-38F
#define FLT_MAX 3.40282346638528859812e+38F
#define FLT_EPSILON 1.1920928955078125e-07F

#define FLT_MAX_EXP 128
#define FLT_HAS_SUBNORM 1

#define FLT_DIG 6
#define FLT_DECIMAL_DIG 9
#define FLT_MIN_10_EXP (-37)
#define FLT_MAX_10_EXP 38

#define DBL_TRUE_MIN 4.94065645841246544177e-324
#define DBL_MIN 2.22507385850720138309e-308
#define DBL_MAX 1.79769313486231570815e+308
#define DBL_EPSILON 2.22044604925031308085e-16

#define DBL_MAX_EXP 1024
#define DBL_HAS_SUBNORM 1

#define DBL_DIG 15
#define DBL_DECIMAL_DIG 17
#define DBL_MIN_10_EXP (-307)
//#define DBL_MAX_10_EXP 308

#define LDBL_HAS_SUBNORM 1
#define LDBL_DECIMAL_DIG DECIMAL_DIG

#include QOR_SYS_ARCHHEADER(float.h)

#include "SystemQOR/Linux/types/stddef_types.h"

namespace nsLinux
{
//#define FLT_MANT_DIG 24
//#define FLT_MIN_EXP (-125)
//#define DBL_MANT_DIG 53
//#define DBL_MIN_EXP (-1021)

    __QCMP_STATIC_CONSTANT( int, FloatMantDigits        = 24 );
    __QCMP_STATIC_CONSTANT( int, FloatMinExponent       = (-125) );
    __QCMP_STATIC_CONSTANT( int, DoubleMantDigits       = 53 );
    __QCMP_STATIC_CONSTANT( int, DoubleMinExponent      = (-1021) );

    __QCMP_STATIC_CONSTANT( int, DoubleMax10Exponent    = 308 );

	//--------------------------------------------------------------------------------
	//compatibility
#	define _CRT_ALIGN(x) __declspec(align(x))

	typedef float           _FP32;
	typedef double          _FP64;
	typedef short           _I16;
	typedef int             _I32;
	typedef unsigned short  _U16;
	typedef unsigned int    _U32;
	typedef Cmp__int64      _Q64;

	//--------------------------------------------------------------------------------
	typedef struct
#if defined(_M_IA64)
		_CRT_ALIGN(16)
#endif
	{
		unsigned short W[5];
	} _FP80;

	//--------------------------------------------------------------------------------
	typedef struct _CRT_ALIGN(16)
	{
		unsigned long W[4];
	} _FP128;

	//--------------------------------------------------------------------------------
	typedef struct _CRT_ALIGN(8)
	{
		unsigned long W[2];
	} _I64;

	//--------------------------------------------------------------------------------
	typedef struct _CRT_ALIGN(8)
	{
		unsigned long W[2];
	} _U64;

	//--------------------------------------------------------------------------------
	typedef struct
#if defined(_M_IA64)
		_CRT_ALIGN(16)
#endif
	{
		unsigned short W[5];
	} _BCD80;

	//--------------------------------------------------------------------------------
	typedef struct _CRT_ALIGN(16)
	{
		_Q64 W[2];
	} _FPQ64;

	//--------------------------------------------------------------------------------
	typedef struct
	{
		union
		{
			_FP32        Fp32Value;
			_FP64        Fp64Value;
			_FP80        Fp80Value;
			_FP128       Fp128Value;
			_I16         I16Value;
			_I32         I32Value;
			_I64         I64Value;
			_U16         U16Value;
			_U32         U32Value;
			_U64         U64Value;
			_BCD80       Bcd80Value;
			char         *StringValue;
			int          CompareValue;
			_Q64         Q64Value;
			_FPQ64       Fpq64Value;
		} Value;

		unsigned int OperandValid : 1;
		unsigned int Format : 4;

	} _FPIEEE_VALUE;

	//--------------------------------------------------------------------------------
	typedef struct
	{
		unsigned int Inexact : 1;
		unsigned int Underflow : 1;
		unsigned int Overflow : 1;
		unsigned int ZeroDivide : 1;
		unsigned int InvalidOperation : 1;
	} _FPIEEE_EXCEPTION_FLAGS;

	typedef struct
	{
		unsigned int RoundingMode : 2;
		unsigned int Precision : 3;
		unsigned int Operation :12;
		_FPIEEE_EXCEPTION_FLAGS Cause;
		_FPIEEE_EXCEPTION_FLAGS Enable;
		_FPIEEE_EXCEPTION_FLAGS Status;
		_FPIEEE_VALUE Operand1;
		_FPIEEE_VALUE Operand2;
		_FPIEEE_VALUE Result;
	#if defined(_M_IA64)
		_FPIEEE_VALUE Operand3;
	#endif
	} _FPIEEE_RECORD, *_PFPIEEE_RECORD;

    //TODO: fix me
    typedef void* _EXCEPTION_POINTERS;
}

#endif//SYSTEMQOR_LIN_TYPES_FLOAT_H_3

