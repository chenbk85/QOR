//complex_types.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef SYSTEMQOR_LIN_TYPES_COMPLEX_H_3
#define SYSTEMQOR_LIN_TYPES_COMPLEX_H_3

#define complex _Complex
#ifdef __GNUC__
#	define _Complex_I (__extension__ (0.0f+1.0fi))
#else
#	define _Complex_I (0.0f+1.0fi)
#endif
#	define I _Complex_I

#ifndef __cplusplus
#	define __CIMAG(x, t) (+(union { _Complex t __z; t __xy[2]; }){(_Complex t)(x)}.__xy[1])
#	define creal(x) ((double)(x))
#	define crealf(x) ((float)(x))
#	define creall(x) ((long double)(x))
#	define cimag(x) __CIMAG(x, double)
#	define cimagf(x) __CIMAG(x, float)
#	define cimagl(x) __CIMAG(x, long double)
#endif

#if __STDC_VERSION__ >= 201112L
#	if defined(_Imaginary_I)
#		define __CMPLX(x, y, t) ((t)(x) + _Imaginary_I*(t)(y)))
#	elif defined(__clang__)
#		define __CMPLX(x, y, t) (+(_Complex t){ (t)(x), (t)(y) })
#	else
#		define __CMPLX(x, y, t) (__builtin_complex((t)(x), (t)(y)))
#	endif
#	define CMPLX(x, y) __CMPLX(x, y, double)
#	define CMPLXF(x, y) __CMPLX(x, y, float)
#	define CMPLXL(x, y) __CMPLX(x, y, long double)
#endif

#endif//SYSTEMQOR_LIN_TYPES_COMPLEX_H_3
