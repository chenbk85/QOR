//LIN_signal.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Linux overrides for signal

#ifndef SYSTEMQOR_LIN_SIGNAL_H_3
#define SYSTEMQOR_LIN_SIGNAL_H_3

#include "SystemQOR/Linux/types/signal_types.h"
//#include "SystemQOR/Posix/Baseregex.h"

//--------------------------------------------------------------------------------
namespace nsLinux
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __QSYS ) Csignal //: public nsBaseCRT::Cregex
	{
	public:

		Csignal(){}
		~Csignal(){}

		virtual int __libc_current_sigrtmin(void);
		virtual int __libc_current_sigrtmax(void);

		virtual int kill(pid_t, int);

		virtual int sigemptyset(sigset_t *);
		virtual int sigfillset(sigset_t *);
		virtual int sigaddset(sigset_t *, int);
		virtual int sigdelset(sigset_t *, int);
		virtual int sigismember(const sigset_t *, int);
		virtual int sigprocmask(int, const sigset_t *__restrict, sigset_t *__restrict);
		virtual int sigsuspend(const sigset_t *);
		virtual int sigaction(int, const struct sigaction *__restrict, struct sigaction *__restrict);
		virtual int sigpending(sigset_t *);
		virtual int sigwait(const sigset_t *__restrict, int *__restrict);
		virtual int sigwaitinfo(const sigset_t *__restrict, siginfo_t *__restrict);
		virtual int sigtimedwait(const sigset_t *__restrict, siginfo_t *__restrict, const struct timespec *__restrict);
		virtual int sigqueue(pid_t, int, const union sigval);

		virtual int pthread_sigmask(int, const sigset_t *__restrict, sigset_t *__restrict);
		virtual int pthread_kill(pthread_t, int);

		virtual void psiginfo(const siginfo_t *, const char *);
		virtual void psignal(int, const char *);
#endif

#if defined(_XOPEN_SOURCE) || defined(_BSD_SOURCE) || defined(_GNU_SOURCE)
		virtual int killpg(pid_t, int);
		virtual int sigaltstack(const stack_t *__restrict, stack_t *__restrict);
		virtual int sighold(int);
		virtual int sigignore(int);
		virtual int siginterrupt(int, int);
		virtual int sigpause(int);
		virtual int sigrelse(int);
		virtual void (*sigset(int, void (*)(int)))(int);
#endif

#ifdef _GNU_SOURCE
		virtual void (*bsd_signal(int, void (*)(int)))(int);
		virtual int sigisemptyset(const sigset_t *);
		virtual int sigorset (sigset_t *, const sigset_t *, const sigset_t *);
		virtual int sigandset(sigset_t *, const sigset_t *, const sigset_t *);
#endif

		virtual void (*signal(int, void (*)(int)))(int);
		virtual int raise(int);

	private:

		Csignal( const Csignal& );
		Csignal& operator = ( const Csignal& );

	};

}//nsLinux

#endif//SYSTEMQOR_LIN_SIGNAL_H_3
