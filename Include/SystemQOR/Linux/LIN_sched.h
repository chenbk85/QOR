//LIN_sched.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Linux overrides for sched

#ifndef SYSTEMQOR_LIN_SCHED_H_3
#define SYSTEMQOR_LIN_SCHED_H_3

#include "SystemQOR/Linux/types/sched_types.h"
//#include "SystemQOR/Posix/Baseregex.h"

//--------------------------------------------------------------------------------
namespace nsLinux
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __QSYS ) Csched //: public nsBaseCRT::Cregex
	{
	public:

		Csched(){}
		~Csched(){}

		virtual int    sched_get_priority_max(int);
		virtual int    sched_get_priority_min(int);
		virtual int    sched_getparam(pid_t, struct sched_param *);
		virtual int    sched_getscheduler(pid_t);
		virtual int    sched_rr_get_interval(pid_t, struct timespec *);
		virtual int    sched_setparam(pid_t, const struct sched_param *);
		virtual int    sched_setscheduler(pid_t, int, const struct sched_param *);
		virtual int     sched_yield(void);

#ifdef _GNU_SOURCE
		virtual int clone (int (*)(void *), void *, int, void *, ...);
		virtual int unshare(int);
		virtual int setns(int, int);

		virtual void *memcpy(void *__restrict, const void *__restrict, size_t);
		virtual int memcmp(const void *, const void *, size_t);
		virtual void *calloc(size_t, size_t);
		virtual void free(void *);

		virtual int __sched_cpucount(size_t, const cpu_set_t *);
		virtual int sched_getaffinity(pid_t, size_t, cpu_set_t *);
		virtual int sched_setaffinity(pid_t, size_t, const cpu_set_t *);

		virtual __CPU_op_func_S(AND, &)
		virtual __CPU_op_func_S(OR, |)
		virtual __CPU_op_func_S(XOR, ^)
#endif

	private:

		Csched( const Csched& );
		Csched& operator = ( const Csched& );

	};

}//nsLinux

#endif//SYSTEMQOR_LIN_SCHED_H_3
