//LIN_unistd.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Linux overrides for unistd

#ifndef SYSTEMQOR_LIN_UNISTD_H_3
#define SYSTEMQOR_LIN_UNISTD_H_3

#include "SystemQOR/Linux/types/unistd_types.h"
//#include "SystemQOR/Posix/Baseregex.h"
#include "CodeQOR/ClassReg/ClassRegEntry.h"

//--------------------------------------------------------------------------------
namespace nsLinux
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __QSYS ) Cunistd //: public nsBaseCRT::Cregex
	{
	public:

        __QOR_DECLARE_OCLASS_ID( Cunistd );

		Cunistd(){}
		~Cunistd(){}

		virtual int pipe(int [2]);
		virtual int pipe2(int [2], int);
		virtual int close(int);
		virtual int posix_close(int, int);
		virtual int dup(int);
		virtual int dup2(int, int);
		virtual int dup3(int, int, int);
		virtual off_t lseek(int, off_t, int);
		virtual int fsync(int);
		virtual int fdatasync(int);

		virtual ssize_t read(int, void *, size_t);
		virtual ssize_t write(int, const void *, size_t);
		virtual ssize_t pread(int, void *, size_t, off_t);
		virtual ssize_t pwrite(int, const void *, size_t, off_t);

		virtual int chown(const char *, uid_t, gid_t);
		virtual int fchown(int, uid_t, gid_t);
		virtual int lchown(const char *, uid_t, gid_t);
		virtual int fchownat(int, const char *, uid_t, gid_t, int);

		virtual int link(const char *, const char *);
		virtual int linkat(int, const char *, int, const char *, int);
		virtual int symlink(const char *, const char *);
		virtual int symlinkat(const char *, int, const char *);
		virtual ssize_t readlink(const char *__restrict, char *__restrict, size_t);
		virtual ssize_t readlinkat(int, const char *__restrict, char *__restrict, size_t);
		virtual int unlink(const char *);
		virtual int unlinkat(int, const char *, int);
		virtual int rmdir(const char *);
		virtual int truncate(const char *, off_t);
		virtual int ftruncate(int, off_t);

		virtual int access(const char *, int);
		virtual int faccessat(int, const char *, int, int);

		virtual int chdir(const char *);
		virtual int fchdir(int);
		virtual char* getcwd( char*, size_t );
		virtual char* getwd( char* );// (LEGACY )

		virtual unsigned alarm(unsigned);
		virtual unsigned sleep(unsigned);
		virtual int pause(void);

		virtual pid_t fork(void);
		virtual int execve(const char *, char *const [], char *const []);
		virtual int execv(const char *, char *const []);
		virtual int execle(const char *, const char *, ...);
		virtual int execl(const char *, const char *, ...);
		virtual int execvp(const char *, char *const []);
		virtual int execlp(const char *, const char *, ...);
		virtual int fexecve(int, char *const [], char *const []);
		_Noreturn virtual void _exit(int);

		virtual pid_t getpid(void);
		virtual pid_t getppid(void);
		virtual pid_t getpgrp(void);
		virtual pid_t getpgid(pid_t);
		virtual int setpgid(pid_t, pid_t);
		virtual pid_t setsid(void);
		virtual pid_t getsid(pid_t);
		virtual char *ttyname(int);
		virtual int ttyname_r(int, char *, size_t);
		virtual int isatty(int);
		virtual pid_t tcgetpgrp(int);
		virtual int tcsetpgrp(int, pid_t);

		virtual uid_t getuid(void);
		virtual uid_t geteuid(void);
		virtual gid_t getgid(void);
		virtual gid_t getegid(void);
		virtual int getgroups(int, gid_t []);
		virtual int setuid(uid_t);
		virtual int setreuid(uid_t, uid_t);
		virtual int seteuid(uid_t);
		virtual int setgid(gid_t);
		virtual int setregid(gid_t, gid_t);
		virtual int setegid(gid_t);

		virtual char *getlogin(void);
		virtual int getlogin_r(char *, size_t);
		virtual int gethostname(char *, size_t);
		virtual char *ctermid(char *);

		virtual int getopt(int, char * const [], const char *);
//extern char *optarg;
//extern int optind, opterr, optopt;

		virtual long pathconf(const char *, int);
		virtual long fpathconf(int, int);
		virtual long sysconf(int);
		virtual size_t confstr(int, char *, size_t);

#if defined(_XOPEN_SOURCE) || defined(_GNU_SOURCE) || defined(_BSD_SOURCE)
		virtual int lockf(int, int, off_t);
		virtual long gethostid(void);
		virtual int nice(int);
		virtual void sync(void);
		virtual pid_t setpgrp(void);
		virtual char *crypt(const char *, const char *);
		virtual void encrypt(char *, int);
		virtual void swab(const void *__restrict, void *__restrict, ssize_t);
#endif

#if defined(_GNU_SOURCE) || defined(_BSD_SOURCE) || (defined(_XOPEN_SOURCE) && _XOPEN_SOURCE+0 < 700)
		virtual int usleep(unsigned);
		virtual unsigned ualarm(unsigned, unsigned);
#endif

#if defined(_GNU_SOURCE) || defined(_BSD_SOURCE)
		virtual int brk(void *);
		virtual void *sbrk(intptr_t);
		virtual pid_t vfork(void);
		virtual int vhangup(void);
		virtual int chroot(const char *);
		virtual int getpagesize(void);
		virtual int getdtablesize(void);
		virtual int sethostname(const char *, size_t);
		virtual int getdomainname(char *, size_t);
		virtual int setdomainname(const char *, size_t);
		virtual int setgroups(size_t, const gid_t *);
		virtual char *getpass(const char *);
		virtual int daemon(int, int);
		virtual void setusershell(void);
		virtual void endusershell(void);
		virtual char *getusershell(void);
		virtual int acct(const char *);
		virtual long syscall(long, ...);
		virtual int execvpe(const char *, char *const [], char *const []);
		virtual int issetugid(void);
#endif

#ifdef _GNU_SOURCE
		virtual int setresuid(uid_t, uid_t, uid_t);
		virtual int setresgid(gid_t, gid_t, gid_t);
		virtual int getresuid(uid_t *, uid_t *, uid_t *);
		virtual int getresgid(gid_t *, gid_t *, gid_t *);
		virtual char *get_current_dir_name(void);
		virtual void syncfs(int);
		virtual int euidaccess(const char *, int);
		virtual int eaccess(const char *, int);
#endif

        virtual ssize_t readv( int fd, const iovec* iov, int count );
        virtual ssize_t writev( int fd, const iovec* iov, int count );
        virtual int renameat( int oldfd, const char* old, int newfd, const char* pnew );

        //--------------------------------------------------------------------------------
        static const int errors[];

        //--------------------------------------------------------------------------------
        struct ctx
        {
            int id, eid, sid;
            int nr, err;
        };

        //--------------------------------------------------------------------------------
        struct ctx2
        {
            int fd;
            const char* filename;
            int amode;
        };

	private:

		Cunistd( const Cunistd& );
		Cunistd& operator = ( const Cunistd& );


        int __dup3( int old, int pnew, int flags );
        //void do_setxid( void* p );
        int __setxid( int nr, int id, int eid, int sid );
	};

}//nsLinux

#endif//SYSTEMQOR_LIN_UNISTD_H_3
