//LIN_pthread.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Linux overrides for pthread

#ifndef SYSTEMQOR_LIN_PTHREAD_H_3
#define SYSTEMQOR_LIN_PTHREAD_H_3

#include "SystemQOR/Linux/types/pthread_types.h"
//#include "SystemQOR/Posix/Baseregex.h"

//--------------------------------------------------------------------------------
namespace nsLinux
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __QSYS ) Cpthread //: public nsBaseCRT::Cregex
	{
	public:

		Cpthread(){}
		~Cpthread(){}

		virtual int create( pthread_t* __restrict, const pthread_attr_t* __restrict, void *(*)(void *), void* __restrict );
		virtual int detach( pthread_t );
		virtual _Noreturn void exit( void* );
		virtual int join( pthread_t, void** );

#ifdef __GNUC__
		__attribute__((const))
#endif
		virtual pthread_t self( void );

		virtual int equal( pthread_t, pthread_t );

		virtual int setcancelstate(int, int *);
		virtual int setcanceltype(int, int *);
		virtual void testcancel(void);
		virtual int cancel(pthread_t);

		virtual int getschedparam(pthread_t, int *__restrict, struct sched_param *__restrict);
		virtual int setschedparam(pthread_t, int, const struct sched_param *);
		virtual int setschedprio(pthread_t, int);

		virtual int once(pthread_once_t *, void (*)(void));

		virtual int mutex_init(pthread_mutex_t *__restrict, const pthread_mutexattr_t *__restrict);
		virtual int mutex_lock(pthread_mutex_t *);
		virtual int mutex_unlock(pthread_mutex_t *);
		virtual int mutex_trylock(pthread_mutex_t *);
		virtual int mutex_timedlock(pthread_mutex_t *__restrict, const struct timespec *__restrict);
		virtual int mutex_destroy(pthread_mutex_t *);
		virtual int mutex_consistent(pthread_mutex_t *);

		virtual int mutex_getprioceiling(const pthread_mutex_t *__restrict, int *__restrict);
		virtual int mutex_setprioceiling(pthread_mutex_t *__restrict, int, int *__restrict);

		virtual int cond_init(pthread_cond_t *__restrict, const pthread_condattr_t *__restrict);
		virtual int cond_destroy(pthread_cond_t *);
		virtual int cond_wait(pthread_cond_t *__restrict, pthread_mutex_t *__restrict);
		virtual int cond_timedwait(pthread_cond_t *__restrict, pthread_mutex_t *__restrict, const struct timespec *__restrict);
		virtual int cond_broadcast(pthread_cond_t *);
		virtual int cond_signal(pthread_cond_t *);

		virtual int rwlock_init(pthread_rwlock_t *__restrict, const pthread_rwlockattr_t *__restrict);
		virtual int rwlock_destroy(pthread_rwlock_t *);
		virtual int rwlock_rdlock(pthread_rwlock_t *);
		virtual int rwlock_tryrdlock(pthread_rwlock_t *);
		virtual int rwlock_timedrdlock(pthread_rwlock_t *__restrict, const struct timespec *__restrict);
		virtual int rwlock_wrlock(pthread_rwlock_t *);
		virtual int rwlock_trywrlock(pthread_rwlock_t *);
		virtual int rwlock_timedwrlock(pthread_rwlock_t *__restrict, const struct timespec *__restrict);
		virtual int rwlock_unlock(pthread_rwlock_t *);

		virtual int spin_init(pthread_spinlock_t *, int);
		virtual int spin_destroy(pthread_spinlock_t *);
		virtual int spin_lock(pthread_spinlock_t *);
		virtual int spin_trylock(pthread_spinlock_t *);
		virtual int spin_unlock(pthread_spinlock_t *);

		virtual int barrier_init(pthread_barrier_t *__restrict, const pthread_barrierattr_t *__restrict, unsigned);
		virtual int barrier_destroy(pthread_barrier_t *);
		virtual int barrier_wait(pthread_barrier_t *);

		virtual int key_create(pthread_key_t *, void (*)(void *));
		virtual int key_delete(pthread_key_t);
		virtual void* getspecific(pthread_key_t);
		virtual int setspecific(pthread_key_t, const void *);

		virtual int attr_init(pthread_attr_t *);
		virtual int attr_destroy(pthread_attr_t *);

		virtual int attr_getguardsize(const pthread_attr_t *__restrict, size_t *__restrict);
		virtual int attr_setguardsize(pthread_attr_t *, size_t);
		virtual int attr_getstackaddr( const pthread_attr_t* p_pthread_attr, void** stackaddr );
		virtual int attr_getstacksize(const pthread_attr_t *__restrict, size_t *__restrict);
        virtual int attr_setstackaddr( pthread_attr_t* p_pthread_attr, void* pStackAddr );
		virtual int attr_setstacksize(pthread_attr_t *, size_t);
		virtual int attr_getdetachstate(const pthread_attr_t *, int *);
		virtual int attr_setdetachstate(pthread_attr_t *, int);
		virtual int attr_getstack(const pthread_attr_t *__restrict, void **__restrict, size_t *__restrict);
		virtual int attr_setstack(pthread_attr_t *, void *, size_t);
		virtual int attr_getscope(const pthread_attr_t *__restrict, int *__restrict);
		virtual int attr_setscope(pthread_attr_t *, int);
		virtual int attr_getschedpolicy(const pthread_attr_t *__restrict, int *__restrict);
		virtual int attr_setschedpolicy(pthread_attr_t *, int);
		virtual int attr_getschedparam(const pthread_attr_t *__restrict, struct sched_param *__restrict);
		virtual int attr_setschedparam(pthread_attr_t *__restrict, const struct sched_param *__restrict);
		virtual int attr_getinheritsched(const pthread_attr_t *__restrict, int *__restrict);
		virtual int attr_setinheritsched(pthread_attr_t *, int);

		virtual int mutexattr_destroy(pthread_mutexattr_t *);
		virtual int mutexattr_getprioceiling(const pthread_mutexattr_t *__restrict, int *__restrict);
		virtual int mutexattr_getprotocol(const pthread_mutexattr_t *__restrict, int *__restrict);
		virtual int mutexattr_getpshared(const pthread_mutexattr_t *__restrict, int *__restrict);
		virtual int mutexattr_getrobust(const pthread_mutexattr_t *__restrict, int *__restrict);
		virtual int mutexattr_gettype(const pthread_mutexattr_t *__restrict, int *__restrict);
		virtual int mutexattr_init(pthread_mutexattr_t *);
		virtual int mutexattr_setprioceiling(pthread_mutexattr_t *, int);
		virtual int mutexattr_setprotocol(pthread_mutexattr_t *, int);
		virtual int mutexattr_setpshared(pthread_mutexattr_t *, int);
		virtual int mutexattr_setrobust(pthread_mutexattr_t *, int);
		virtual int mutexattr_settype(pthread_mutexattr_t *, int);

		virtual int condattr_init(pthread_condattr_t *);
		virtual int condattr_destroy(pthread_condattr_t *);
		virtual int condattr_setclock(pthread_condattr_t *, clockid_t);
		virtual int condattr_setpshared(pthread_condattr_t *, int);
		virtual int condattr_getclock(const pthread_condattr_t *__restrict, clockid_t *__restrict);
		virtual int condattr_getpshared(const pthread_condattr_t *__restrict, int *__restrict);

		virtual int rwlockattr_init(pthread_rwlockattr_t *);
		virtual int rwlockattr_destroy(pthread_rwlockattr_t *);
		virtual int rwlockattr_setpshared(pthread_rwlockattr_t *, int);
		virtual int rwlockattr_getpshared(const pthread_rwlockattr_t *__restrict, int *__restrict);

		virtual int barrierattr_destroy(pthread_barrierattr_t *);
		virtual int barrierattr_getpshared(const pthread_barrierattr_t *__restrict, int *__restrict);
		virtual int barrierattr_init(pthread_barrierattr_t *);
		virtual int barrierattr_setpshared(pthread_barrierattr_t *, int);

		virtual int atfork(void (*)(void), void (*)(void), void (*)(void));

		virtual int getconcurrency(void);
		virtual int setconcurrency(int);

		virtual int getcpuclockid(pthread_t, clockid_t *);

		virtual void _pthread_cleanup_push(struct __ptcb *, void (*)(void *), void *);
		virtual void _pthread_cleanup_pop(struct __ptcb *, int);

#define pthread_cleanup_push(f, x) do { struct __ptcb __cb; _pthread_cleanup_push(&__cb, f, x);
#define pthread_cleanup_pop(r) _pthread_cleanup_pop(&__cb, (r)); } while(0)

#ifdef _GNU_SOURCE
		virtual int getaffinity_np(pthread_t, size_t, struct cpu_set_t *);
		virtual int setaffinity_np(pthread_t, size_t, const struct cpu_set_t *);
		virtual int getattr_np(pthread_t, pthread_attr_t *);
#endif

	private:

		Cpthread( const Cpthread& );
		Cpthread& operator = ( const Cpthread& );

	};

}//nsLinux

#endif//SYSTEMQOR_LIN_PTHREAD_H_3
