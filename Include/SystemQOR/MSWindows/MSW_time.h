//MSW_time.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//MSWindows overrides for time

#ifndef SYSTEMQOR_MSW_TIME_H_3
#define SYSTEMQOR_MSW_TIME_H_3

#include "SystemQOR/Posix/Basetime.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __QSYS ) Ctime : public nsBaseCRT::Ctime
	{
	public:

        Ctime();
		virtual ~Ctime();

		void crtInit( void );
		void crtCleanup( void );

		virtual char* asctime( const tm* timeptr );
		virtual char* asctime_r( const tm* timeptr, char* szBuf );
		virtual errno_t asctime_s( char* pBuf, size_t SizeInBytes, const tm* pTm );
        virtual clock_t clock( void );
		virtual int clock_getcpuclockid( pid_t, clockid_t* );
		virtual int clock_getres( clockid_t, timespec* );
		virtual int clock_gettime( clockid_t, timespec* );
		virtual int clock_nanosleep( clockid_t, int, const timespec*, timespec* );
		virtual int clock_settime( clockid_t, const timespec* );
		virtual char* ctime( const time_t* timer );
		virtual char* ctime_r( const time_t*, char* );
        virtual double difftime( time_t time1, time_t time0 );
		virtual tm* getdate( const char* );
		virtual tm* gmtime( const time_t* timer );
		virtual tm* gmtime_r( const time_t*, tm* );
		virtual tm* localtime( const time_t* timer );
		virtual tm* localtime_r( const time_t* , tm* );
		virtual time_t mktime( tm* timeptr );
		virtual int nanosleep( const timespec*, timespec* );
		virtual size_t strftime( char* s, size_t maxsize, const char* format, const tm* timeptr );
		virtual size_t strftime_l( char*, size_t, const char*, const tm*, locale_t );
		virtual char* strptime( const char*, const char*, tm* );
		virtual time_t time( time_t* timer );
		virtual int timer_create( clockid_t, sigevent*, timer_t* );
		virtual int timer_delete( timer_t );
		virtual int timer_gettime( timer_t, itimerspec* );
		virtual int timer_getoverrun( timer_t );
		virtual int timer_settime( timer_t, int, const itimerspec*, itimerspec* );
		virtual void tzset( void );

		virtual int& daylight( void );
		virtual long& timezone( void );
		virtual char**& tzname( void );

    private:

		Ctime( const Ctime& );
		Ctime& operator = ( const Ctime& );

        Cmp_unsigned__int64 m_start_tics;
	};
}//nsWin32


#endif//SYSTEMQOR_MSW_TIME_H_3

