//MSW_string.h

// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//MSWindows overrides for string

#ifndef SYSTEMQOR_MSW_STRING_H_3
#define SYSTEMQOR_MSW_STRING_H_3

#include "SystemQOR/Posix/Basestring.h"
#include "WinQL/CodeServices/Locale/WinQLLocaleUpdate.h"

__QCMP_STARTLINKAGE_C
	int __cdecl __ascii_strnicmp( const char* _Str1, const char* _Str2, size_t _MaxCount);
__QCMP_ENDLINKAGE_C

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __QSYS ) Cstring : public nsBaseCRT::Cstring
	{
	public:

		__QCMP_STATIC_CONSTANT( int, _NLSCMPERROR = 2147483647 );

		Cstring();
		virtual ~Cstring();

		/*
		void* memmove( void* s1, const void* s2, size_t n );
		char* strcpy( char* s1, const char* s2 );
		char* strncpy( char* s1, const char* s2, size_t n );
		char* strcat( char* s1, const char* s2 );
		char* strncat( char* s1, const char* s2, size_t n );
		int memcmp( const void* s1, const void* s2, size_t n );
		int strcmp( const char* s1, const char* s2 );
		int strncmp( const char* s1, const char* s2, size_t n );
		void* memchr( const void* s, int c, size_t n );
		char* strchr( const char* s, int c );
		size_t strcspn( const char* s1, const char* s2 );
		char* strpbrk( const char* s1, const char* s2 );
		char* strrchr( const char* s, int c );
		size_t strspn( const char* s1, const char* s2 );
		char* strstr( const char* s1, const char* s2 );
		void* memset( void* s, int c, size_t n );
		char* strerror( int errnum );
		size_t strlen( const char* s );
		*/

		//virtual size_t strxfrm( char* s1, const char* s2, size_t n );
		virtual char* strtok( char* s1, const char* s2 );
		//virtual int stricmp( const char* s1, const char* s2 );
		//virtual int strnicmp( const char* s1, const char* s2, size_t n );
		//virtual int strcoll( const char* s1, const char* s2 );
		virtual int strnicoll ( const char* _string1, const char* _string2, size_t count );

	protected:

		//virtual int _strcoll_l( const char* _string1, const char* _string2, nsWin32::CLocaleThreadData* plocinfo );

		virtual int __crtCompareStringA( nsWin32::CLocaleThreadData* plocinfo, unsigned long Locale, unsigned long dwCmpFlags, const char* lpString1, int cchCount1, const char* lpString2, int cchCount2, int code_page )
		{
			nsWin32::CLocaleUpdate _loc_update( plocinfo );
			return 0;//__crtCompareStringA_stat( _loc_update.GetLocaleT(), Locale, dwCmpFlags, lpString1, cchCount1, lpString2, cchCount2, code_page );
		}

		//static int __crtCompareStringA_stat( nsWin32::CLocaleThreadData* plocinfo, unsigned long Locale, unsigned long dwCmpFlags, const char* lpString1, int cchCount1, const char* lpString2, int cchCount2, int code_page );
		static int __ansicp( int lcid );

		int _strnicmp_l( const char* dst, const char* src, size_t count, nsWin32::CLocaleThreadData* plocinfo );
		int _tolower_l( int c, nsWin32::CLocaleThreadData* plocinfo );
		int _isleadbyte_l( int c, nsWin32::CLocaleThreadData* plocinfo );
		int _ischartype_l( int c, int _Flag, nsWin32::CLocaleThreadData* _Locale );
		int _chvalidchk_l( int _Char, int _Flag, nsWin32::CLocaleThreadData* _Locale );
		int _chvalidator( int c, int mask );
		int _chvalidator_l( nsWin32::CLocaleThreadData* plocinfo, int c, int mask );
		int _isctype_l ( int c, int mask, nsWin32::CLocaleThreadData* plocinfo );

		bool __crtGetStringTypeA( nsWin32::CLocaleThreadData* plocinfo, unsigned long dwInfoType, const char* lpSrcStr, int cchSrc, unsigned short* lpCharType, int code_page, int lcid, bool bError )
		{
			nsWin32::CLocaleUpdate _loc_update( plocinfo );
			return __crtGetStringTypeA_stat( _loc_update.GetLocaleT(), dwInfoType, lpSrcStr, cchSrc, lpCharType, code_page, lcid, bError );
		}

		static bool __crtGetStringTypeA_stat( nsWin32::CLocaleThreadData* plocinfo, unsigned long dwInfoType, const char* lpSrcStr, int cchSrc, unsigned short* lpCharType, int code_page, int lcid, bool bError );

		int __crtLCMapStringA( nsWin32::CLocaleThreadData* plocinfo, unsigned long Locale, unsigned long dwMapFlags, const char* lpSrcStr, int cchSrc, char* lpDestStr, int cchDest, nsWin32::CCodePage& code_page, bool bError );
		static int __crtLCMapStringA_stat( nsWin32::CLocaleThreadData* plocinfo, unsigned long Locale, unsigned long dwMapFlags, const char* lpSrcStr, int cchSrc, char* lpDestStr, int cchDest, nsWin32::CCodePage& code_page, bool bError );

		size_t _strxfrm_l( char* _string1, const char* _string2, size_t _count, nsWin32::CLocaleThreadData* plocinfo );

	private:

		Cstring( const Cstring& );
		Cstring& operator = ( const Cstring& );
	};

}//nsWin32

#endif//SYSTEMQOR_MSW_STRING_H_3

