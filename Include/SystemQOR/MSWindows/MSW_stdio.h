//MSW_stdio.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//MSWindows overrides for stdio

#ifndef SYSTEMQOR_MSW_STDIO_H_3
#define SYSTEMQOR_MSW_STDIO_H_3

#include "SystemQOR/Posix/Basestdio.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
    //--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __QSYS ) Cstdio : public nsBaseCRT::Cstdio
	{
	public:

		Cstdio();
		virtual ~Cstdio();

		virtual FILE* _stdin( void );
        virtual FILE* _stdout( void );
        virtual FILE* _stderr( void );

		virtual void clearerr( FILE* stream );	
		virtual errno_t clearerr_s( FILE* stream );
		virtual char* ctermid( char* );
		virtual int dprintf( int fd, const char* format, va_list args );
		virtual int fclose( FILE* stream );
		virtual FILE* fdopen( int fd, const char* mode );
		virtual int feof( FILE* stream );
		virtual int ferror( FILE* stream );
		virtual int fflush( FILE* stream );
		virtual int fgetc( FILE* stream );
		virtual int fgetpos( FILE* stream, fpos_t* pos );
		virtual char* fgets( char* s, int n, FILE* stream );
		virtual int fileno( FILE* );
		virtual void flockfile( FILE* );
		virtual FILE* fmemopen( void* buf, size_t size, const char* szMode );
		virtual FILE* fopen( const char* filename, const char* mode );
		virtual errno_t fopen_s( FILE** ppFile, const char* szFilename, const char* szMode );
		virtual int fprintf( FILE* stream, const char* format, va_list vargs );
		virtual int fprintf_s( FILE* stream, const char* format, va_list vargs );
		virtual int fputc( int c, FILE* stream );
		virtual int fputs( const char* s, FILE* stream );
		virtual size_t fread( void* ptr, size_t size, size_t nmemb, FILE* stream );
		virtual size_t fread_s( void* ptr, size_t DstSize, size_t ElementSize, size_t Count, FILE* pFile );
		virtual FILE* freopen( const char* filename, const char* mode, FILE* stream );
		virtual errno_t freopen_s( FILE** ppFile, const char* szFilename, const char* szMode, FILE* pOldFile );
		virtual int fscanf( FILE* stream, const char* format, va_list vargs );
		virtual int fscanf_s( FILE* pFile, const char* format, va_list vargs );
		virtual int fseek( FILE* stream, long int offset, int whence );
		virtual int fseeko( FILE* stream , off_t offset , int whence );
		virtual int fsetpos( FILE* stream, const fpos_t* pos );
		virtual long int ftell( FILE* stream );
		virtual off_t ftello( FILE* );
		virtual int ftrylockfile( FILE* );
		virtual void funlockfile( FILE* );
		virtual size_t fwrite( const void* ptr, size_t size, size_t nmemb, FILE* stream );
		virtual int getc( FILE* stream );
		virtual int getchar( void );
		virtual int getc_unlocked( FILE* );
		virtual int getchar_unlocked( void );
		virtual ssize_t getdelim( char** lineptr, size_t* n, int delimiter, FILE* stream );
		virtual ssize_t getline( char** lineptr, size_t* n, FILE* stream );
		virtual char* gets( char* s );
		virtual char* gets_s( char* s, size_t _Size );
		virtual FILE* open_memstream( char** bufp, size_t* sizep );
		virtual int pclose( FILE* );
		virtual void perror( const char* s );
		virtual FILE* popen( const char*, const char* );
		virtual int printf( const char* format, va_list vargs );
		virtual int printf_s( const char* format, va_list vargs );
		virtual int putc( int c, FILE* stream );
		virtual int putchar( int c );
		virtual int putc_unlocked( int, FILE* );
		virtual int putchar_unlocked( int );
		virtual int puts( const char* s );
		virtual int remove( const char* filename );
	#ifndef OS_EXPORTS_STDIO_RENAME
		virtual int rename( const char* old, const char* pnew );
	#endif
		virtual int renameat( int ofd, const char* szOld, int newfd, const char* szNew );
		void rewind( FILE* stream );
		int scanf( const char* format, va_list vargs );
		int scanf_s( const char* format, va_list vargs );
		void setbuf( FILE* stream, char* buf );
		int setvbuf( FILE* stream, char* buf, int mode, size_t size );
		int snprintf( char* s, size_t n, const char* format, va_list vargs );
		int sprintf( char* s, const char* format, va_list vargs );
		int sprintf_s( char* s, size_t SizeInBytes, const char* format, va_list vargs );
		int sscanf( const char* s, const char* format, va_list vargs );
		int sscanf_s( const char* s, const char* format, va_list vargs );
		char* tempnam( const char*, const char* );
		FILE* tmpfile( void );
		errno_t tmpfile_s( FILE** ppFile );
		char* tmpnam( char* s );
		errno_t tmpnam_s( char* s, size_t Size );
		int ungetc( int c, FILE* stream );
		int vfprintf( FILE* stream, const char* format, va_list arg );
		int vfprintf_s( FILE* stream, const char* format, va_list arg );
		int vfscanf( FILE* stream, const char* format, va_list arg );
		int vprintf( const char* format, va_list arg );
		int vprintf_s( const char* format, va_list arg );
		int vscanf( const char* format, va_list arg );
		int vsnprintf( char* s, size_t n, const char* format, va_list arg );
		int vsprintf( char* s, const char* format, va_list arg );
		int vsprintf_s( char* s, size_t SizeInBytes, const char* format, va_list arg );
		int vsscanf( const char* s, const char* format, va_list arg );

	protected:

		static unsigned char s_ucBufferDefaultFill;

	private:

		Cstdio( const Cstdio& );
		Cstdio& operator = ( const Cstdio& );

	};

}//nsWin32

#endif//SYSTEMQOR_MSW_STDIO_H_3

