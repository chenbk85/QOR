//MSW_signal.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//MSWindows overrides for signal

#ifndef SYSTEMQOR_MSW_SIGNAL_H_3
#define SYSTEMQOR_MSW_SIGNAL_H_3

#include "SystemQOR/Posix/Basesignal.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __QSYS ) Csignal : public nsBaseCRT::Csignal
	{
	public:
	
		Csignal();
		virtual ~Csignal();

		virtual void signal( int sig, psig_func );
		virtual int raise( int sig );
		virtual int kill( pid_t, int );
		virtual int killpg( pid_t, int );
		virtual void psiginfo( const siginfo_t*, const char * );
		virtual void psignal( int, const char * );
		virtual int pthread_kill( pthread_t, int );
		virtual int pthread_sigmask( int, const sigset_t*, sigset_t* );
		virtual int sigaction_( int, const sigaction*, sigaction* );
		virtual int sigaddset( sigset_t*, int );
		virtual int sigaltstack( const stack_t*, stack_t* );
		virtual int sigdelset( sigset_t*, int );
		virtual int sigemptyset( sigset_t* );
		virtual int sigfillset( sigset_t* );
		virtual int sighold( int );
		virtual int sigignore( int );
		virtual int siginterrupt( int, int );
		virtual int sigismember( const sigset_t*, int );
		virtual int sigpause( int );
		virtual int sigpending( sigset_t* );
		virtual int sigprocmask( int, const sigset_t*, sigset_t* );
		virtual int sigqueue( pid_t, int, const union sigval );
		virtual int sigrelse( int );
		virtual void sigset( int, psig_func );
		virtual int sigsuspend( const sigset_t* );
		virtual int sigtimedwait( const sigset_t*, siginfo_t*, const timespec* );
		virtual int sigwait( const sigset_t*, int* );
		virtual int sigwaitinfo( const sigset_t*, siginfo_t* );

	private:

		Csignal( const Csignal& );
		Csignal& operator = ( const Csignal& );
	};

}//nsWin32

#endif//SYSTEMQOR_MSW_SIGNAL_H_3

