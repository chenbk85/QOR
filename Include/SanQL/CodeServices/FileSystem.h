//FileSystem.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//SanOS Code Services File System class

#ifndef SANQL_CODESERV_FILESYSTEM_H_1
#define SANQL_CODESERV_FILESYSTEM_H_1

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "CodeQOR/Modules/ProcessBase.h"
#include "CodeQOR/Macros/ClassIdentityMacros.h"
#include "CodeQOR/Threading/ThreadContext.h"
#include "SanQL/CodeServices/String.h"

//------------------------------------------------------------------------------
namespace nsSanQAPI
{
	class __QOR_INTERFACE( __SANQAPI ) COS;
}//nsSanQAPI

//------------------------------------------------------------------------------
namespace nsSanOS
{	
	__QCMP_STATIC_CONSTANT( int, MFSNameLen = 16 );		// Length of fs type name

	//------------------------------------------------------------------------------
	struct statfs 
	{
		unsigned int bsize;        // Fundamental file system block size
		unsigned int iosize;       // Optimal transfer block size
		unsigned int blocks;       // Total data blocks in file system
		unsigned int bfree;        // Free blocks in fs
		unsigned int files;        // Total file nodes in file system
		unsigned int ffree;        // Free file nodes in fs
		unsigned int cachesize;    // Cache buffers
		char fstype[MFSNameLen];   // File system type name
		char mntto[MaxPath];       // Directory on which mounted
		char mntfrom[MaxPath];     // Mounted file system
	};

	class __QOR_INTERFACE( __SANQL ) CDirectory;
	class __QOR_INTERFACE( __SANQL ) CFile;

	//------------------------------------------------------------------------------
	class __QOR_INTERFACE( __SANQL ) CFileSystem
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CFileSystem );

		CFileSystem();
		~CFileSystem();

		int MakeFileSystem( const CString& strDeviceName, const CString& strType, const CString& strOptions );
		int Mount( const CString& strType, const CString& strMountTo, const CString& strMountFrom, const CString& strOptions );
		int UnMount( const CString& strPath );
		int GetFSStat( statfs& Buffer, size_t Size );
		int ChangeMode( const CString& strName, int iMode );
		int ChangeOwner( const CString& strName, int iOwner, int iGroup );
		int ChangeDirectory( const CString& strName );
		CString GetCurrentWorkingDirectory( CString strBuffer );
		int MakeDirectory( const CString& strName, int iMode );
		int RemoveDirectory( const CString& strName );
		int Rename( const CString& strOldName, const CString& strNewName );
		int Link( const CString& strOldName, const CString& strNewName );
		int Unlink( const CString& name );
		CDirectory OpenDirectory( const CString& strName );
		int Canonicalize( const CString& strFilename, CString strBuffer );
		CFile Create( const CString& strName, int iMode );

	private:

		nsSanQAPI::COS& m_Library;

		CFileSystem( const CFileSystem& );
		CFileSystem& operator = ( const CFileSystem& );
	};

}//nsSanOS

#endif//SANQL_CODESERV_FILESYSTEM_H_1
