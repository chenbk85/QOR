//Process.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//SanOS Code Services process class

#ifndef SANQL_CODESERV_PROCESS_H_1
#define SANQL_CODESERV_PROCESS_H_1

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "CodeQOR/Modules/ProcessBase.h"
#include "CodeQOR/Macros/ClassIdentityMacros.h"
#include "CodeQOR/Threading/ThreadContext.h"
//------------------------------------------------------------------------------
namespace nsSanOS
{
	//------------------------------------------------------------------------------
	struct ImageDOSHeader
	{												// DOS .EXE header
		unsigned short e_magic;                     // Magic number
		unsigned short e_cblp;                      // Bytes on last page of file
		unsigned short e_cp;                        // Pages in file
		unsigned short e_crlc;                      // Relocations
		unsigned short e_cparhdr;                   // Size of header in paragraphs
		unsigned short e_minalloc;                  // Minimum extra paragraphs needed
		unsigned short e_maxalloc;                  // Maximum extra paragraphs needed
		unsigned short e_ss;                        // Initial (relative) SS value
		unsigned short e_sp;                        // Initial SP value
		unsigned short e_csum;                      // Checksum
		unsigned short e_ip;                        // Initial IP value
		unsigned short e_cs;                        // Initial (relative) CS value
		unsigned short e_lfarlc;                    // File address of relocation table
		unsigned short e_ovno;                      // Overlay number
		unsigned short e_res[4];                    // Reserved words
		unsigned short e_oemid;                     // OEM identifier (for e_oeminfo)
		unsigned short e_oeminfo;                   // OEM information; e_oemid specific
		unsigned short e_res2[10];                  // Reserved words
		long e_lfanew;								// File address of new exe header
	};

#ifdef __MINGW32__
#	define __ImageBase _image_base__
#endif

	__QCMP_LINKAGE_C const nsSanOS::ImageDOSHeader __ImageBase;//This must be injected by the Compiler for PE targets

	class __QOR_INTERFACE( __SANQL ) CProcess;

	//------------------------------------------------------------------------------
	class __QOR_INTERFACE( __SANQL ) CProcessModuleInitializer
	{
	public:

		CProcessModuleInitializer();
		~CProcessModuleInitializer();
	};

	//------------------------------------------------------------------------------
	//class to represent the running SanOS process
	class __QOR_INTERFACE( __SANQL ) CProcess : public nsCodeQOR::CProcessBase//, public CSanModule
	{

	public:

		__QOR_DECLARE_OCLASS_ID( CProcess );

		CProcess();
		virtual ~CProcess();
		virtual nsCodeQOR::CThreadContextBase* ThreadContext( void );
		
		void Exit( unsigned int uExitCode );			//Exit this process with the supplied return code
		static CProcess* GetCurrent( void );			//Get a pointer to the CProcess object for this process
		static unsigned long GetCurrentId( void );		//Get the process identifier for this process
		unsigned long GetId( void );
		//bool Break();								//Cause a 'break' in any attached debugger

		static CProcess* ThisProcess( void );		//Return a pointer to the process object for this process
		char* Name( void );						//Return the process name

		//------------------------------------------------------------------------------
		char* GetCommandLine(void)
		{
			char* strResult = 0;
			//strResult = m_Win32Helper.GetCommandLineT();
			return strResult;
		}

		//--------------------------------------------------------------------------------
		static void __QCMP_CALLCON Init();
		static void __QCMP_CALLCON Term();
		static CProcess& __QCMP_CALLCON GetInstance();
/*
		//--------------------------------------------------------------------------------
		CHeap& Heap()
		{
			return m_Heap;
		}
*/
		int ProcessCommandLine( int& argc, char**& argv );

		//nsCodeQOR::CSTMember< CErrorSystem > ErrorSystem;

	protected:

		//CHeap m_Heap;		//The first non-stack or image thing the process must have is a heap

		void* m_hProcess;
		char* m_Name;

		void ParseCommandLine( char** argv,  char* args, int* piArgumentCount, int* piCharacterCount );
		bool ParseArgument( char** argv, char* args, int* piArgumentCount, int* piCharacterCount, char* p, bool& bInQuote, bool& bCopyChar, unsigned int& numslash );
		bool ParseOneArgument( char* args, int* piCharacterCount, bool& bInQuote, bool& bCopyChar, unsigned int& numslash, char* p );

	private:

		//CProcessHelper m_Win32Helper;
		//InstanceHandle m_hInstance;

		unsigned m_RefCount;
		//CTerminate m_TerminateHandler;
		//nsWin32::CMutex m_TypeInfoMutex;

		// Not to be implemented
		CProcess( CProcess const& );
		CProcess& operator = ( CProcess const& );

	};

}//nsSanOS

#endif//SANQL_CODESERV_PROCESS_H_1
