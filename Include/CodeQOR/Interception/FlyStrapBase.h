//FlyStrapBase.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Approximately a 'point cut' base class in AOP terminology

#ifndef CODEQOR_FLYSTRAPBASE_H_1
#define CODEQOR_FLYSTRAPBASE_H_1

#include "CodeQOR/ClassReg/TFlyer.h"
#include "CodeQOR.h"
#include "CodeQOR/DataStructures/TFLink.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
	class __QOR_INTERFACE( __CODEQOR ) CFlyStrapBase;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __CODEQOR ) CFlyStrapBase : public CTFLink< CFlyStrapBase* >
	{
	public:

		CFlyStrapBase();
		virtual ~CFlyStrapBase();

		void StrapOn( CFlyStrapBase* pStrap );		
		virtual void UnStrap( void );

		virtual void OnDeactivate( void );
		virtual void OnReactivate( void );
		virtual void OnActivate( void );

		//--------------------------------------------------------------------------------
		template< class TFSDerived > TFSDerived* Next( TFSDerived* pdummy = 0 )
		{
			TFSDerived* pNext = 0;
			if( m_pNext )
			{
				pNext = dynamic_cast< TFSDerived* >( m_pNext->Item() );
			}
			return pNext;
		}

	protected:

		virtual void BeforeStrapOn( CFlyStrapBase* pStrap );
		virtual void AfterStrapOn( CFlyStrapBase* pStrap );

	};

}//nsCodeQOR

#endif//CODEQOR_FLYSTRAPBASE_H_1
