//CodingMacros.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//General use code services macros

#ifndef CODEQOR_CODINGMACROS_H_1
#define CODEQOR_CODINGMACROS_H_1

//--------------------------------------------------------------------------------
#define __QCS_DECLARE_NONASSIGNABLE( __TYPE__ )									\
private:																		\
  __TYPE__& operator = ( const __TYPE__& )

//--------------------------------------------------------------------------------
#	if	( __QCMP_COMPILER == __QCMP_BORLAND )
#	define __QCS_DECLARE_NONCOPYABLE( __TYPE__ )								\
__TYPE__( const __TYPE__& )
#	else
#	define __QCS_DECLARE_NONCOPYABLE( __TYPE__ )								\
private:																		\
  __TYPE__( const __TYPE__& );													\
  __TYPE__& operator = ( const __TYPE__& )
#	endif

#define __QCS_ARRAY_SIZE( _A ) ( sizeof( _A ) / sizeof( *_A ) )
#define	__QCS_STATIC_ASSERT( _x )	{ typedef int _AI[ ( _x ) ]; }
#define __QCS_UNUSED( _x )

#endif//CODEQOR_CODINGMACROS_H_1
