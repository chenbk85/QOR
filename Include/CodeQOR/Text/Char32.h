//Char32.h

// Copyright Querysoft Limited 2015 - . All rights reserved.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.


#ifndef CODEQOR_CHAR32_H_3
#define CODEQOR_CHAR32_H_3

#include "CompilerQOR.h"
#include "TChar.h"
#include "CodeQOR/Text/TString.h"

//------------------------------------------------------------------------------
namespace nsCodeQOR
{

	class CChar16;
	class CChar8;

	//------------------------------------------------------------------------------
	class __QOR_INTERFACE( __CODEQOR ) CChar32 : public CChar< unsigned int >
	{
		friend class CChar8;
		friend class CChar16;

	public:

		CChar32();
		CChar32( unsigned int ch );
		CChar32( int rc );
		CChar32( CChar8 ch );
		CChar32( CChar16 ch );
		CChar32( const CChar32& ch );
		CChar32( unsigned short usLowWord, unsigned short usHighWord );
		CChar32( eSpecialCharacter sc );
		CChar32 MirroredChar() const;
		CTString< CChar32 > Decomposition() const;
		CChar32 ToLower() const;
		CChar32 ToUpper() const;
		CChar32 ToTitleCase() const;
		CChar32 ToCaseFolded() const;
		const char ToAscii() const;
		static CChar32 FromAscii( char c );
		inline const unsigned int Unicode() const;
		inline unsigned int& Unicode( void );
		CChar8 ToLocal8Bit( void ) const;

		//------------------------------------------------------------------------------
		inline operator unsigned int( void )
		{
			return m;
		}

		//friend __QOR_INTERFACE( __CODEQOR ) bool operator == ( const CChar32& x0, const CChar32& x1 );
		friend __QOR_INTERFACE( __CODEQOR ) bool operator != ( const CChar32& x0, const CChar32& x1 );
		friend __QOR_INTERFACE( __CODEQOR ) bool operator <= ( const CChar32& x0, const CChar32& x1 );
		friend __QOR_INTERFACE( __CODEQOR ) bool operator >= ( const CChar32& x0, const CChar32& x1 );
		friend __QOR_INTERFACE( __CODEQOR ) bool operator < ( const CChar32& x0, const CChar32& x1 );
		friend __QOR_INTERFACE( __CODEQOR ) bool operator > ( const CChar32& x0, const CChar32& x1 );

		friend __QOR_INTERFACE( __CODEQOR ) bool operator != ( const CChar32& x0, const int x1 );

	};

	//__QOR_INTERFACE( __CODEQOR ) bool operator == ( const CChar32& x0, const CChar32& x1 );
	__QOR_INTERFACE( __CODEQOR ) bool operator != ( const CChar32& x0, const CChar32& x1 );
	__QOR_INTERFACE( __CODEQOR ) bool operator <= ( const CChar32& x0, const CChar32& x1 );
	__QOR_INTERFACE( __CODEQOR ) bool operator >= ( const CChar32& x0, const CChar32& x1 );
	__QOR_INTERFACE( __CODEQOR ) bool operator < ( const CChar32& x0, const CChar32& x1 );
	__QOR_INTERFACE( __CODEQOR ) bool operator > ( const CChar32& x0, const CChar32& x1 );

	__QOR_INTERFACE( __CODEQOR ) bool operator != ( const CChar32& x0, const int x1 );

}//nsCodeQOR

#include "CodeQOR/Text/TExtString.h"

#endif//CODEQOR_CHAR32_H_3
