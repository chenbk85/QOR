//UTF16Char.h

// Copyright Querysoft Limited 2015 - . All rights reserved.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//UTF-16 Variable length character type

#ifndef CODEQOR_STRINGS_UTF16CHAR_H_3
#define CODEQOR_STRINGS_UTF16CHAR_H_3

#include "CodeQOR/Text/Char16.h"

//------------------------------------------------------------------------------
namespace nsCodeQOR
{
	//--------------------------------------------------------------------------------
	//Provides a wrapper over a reference into an unsigned short string
	//Always acts as a weak reference, never owns any character data
	//User must ensure the underlying string data remains accessible
	class CUTF16Char
	{
	public:

		CUTF16Char();										//Construct a null reference
		CUTF16Char( CChar16* pChar );						//Construct a reference to 1 to 2 CChar16
		CUTF16Char( const CUTF16Char& Src );				//Copy an exisiting reference
		CUTF16Char& operator = ( const CUTF16Char& Src );	//Assign from an existing reference
		bool operator == ( const CUTF16Char& Cmp ) const;	//Compare referenced UTF-16 characters
		CUTF16Char& operator++( void );						//Move the reference to the next UTF-16 character - not gaurenteed to be valid
		CUTF16Char& operator--( void );						//Move the reference to the previous UTF-16 character - not gaurenteed to be valid
		CUTF16Char& operator += ( unsigned short usOffset );//Move the reference forward in the string by N UTF-16 characters
		CUTF16Char& operator -= ( unsigned short usOffset ); //Move the reference backward in the string by B UTF-16 characters
		operator CChar16*() const;							//Automatic conversion to a CChar16 pointer
		CChar16* operator -> () const;						//CUTF16Char acts like a pointer to CChar16
		inline CChar16* ptr( void ) const					//Explicit conversion to a CChar16 pointer
		{
			return m_pChar;
		}
		~CUTF16Char();										//Destructor
		void Dispose( void );								//Throw away refence returning this to a NULL reference
		void Attach( CChar16* p );							//Set the CChar16 reference 
        CChar16* Detach();									//Return and clear the CChar16 reference
		bool IsNull( void ) const;							//Is this a NULL reference or a reference to NULL. Either will return true.
		bool IsOwner( void );								//Will always return false. CUTF16Char is a weak reference type
		unsigned char Len( void ) const;					//Return the byte count of reference UTF-16 character 2 or 4
		bool IsInvalid( void );								//Returns true if the referenced UTF16-character is not valid
	
		unsigned int ToCodePoint( void ) const;
		static CChar16::eUnicodeVersion CurrentUnicodeVersion( void );

		CChar16::eCategory Category() const;
		CChar16::eDirection Direction() const;
		CChar16::eJoining Joining() const;

		bool HasMirrored() const;
		unsigned char CombiningClass() const;
		int DigitValue() const;
		CChar16::eUnicodeVersion UnicodeVersion() const;
		bool IsPrint() const;
		bool IsPunct() const;
		bool IsSpace() const;
		bool IsMark() const;
		bool IsLetter() const;
		bool IsNumber() const;
		bool IsLetterOrNumber() const;
		bool IsDigit() const;
		bool IsSymbol() const;
		inline bool IsLower() const;
		inline bool IsUpper() const;
		inline bool IsTitleCase() const;
		CChar16::eDecomposition DecompositionTag() const;

	private:

		CChar16* m_pChar;
	};

}//nsCodeQOR

#endif//CODEQOR_STRINGS_UTF16CHAR_H_3
