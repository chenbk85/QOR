//TRangeChecks.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Validation range check templates for parameters

#ifndef CODEQOR_PCHECKING_TRANGE_H_1
#define CODEQOR_PCHECKING_TRANGE_H_1

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma __QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "CodeQOR/Parameters/ParamChecking.h"
#include "CodeQOR.h"

//--------------------------------------------------------------------------------
namespace nsParamChecking
{
    //--------------------------------------------------------------------------------
    class __QOR_INTERFACE( __CODEQOR ) CRangeCheck;

    //--------------------------------------------------------------------------------
    //Template for value range checks
    template< typename T, T Min, T Max >
    class CTRangeCheck
    {
    public:

		//------------------------------------------------------------------------------
        static void Check( T Val )
		{
			if( Val < Min || Val > Max )
			{
				//TODO: report Error 
			}
		}
    };

    //--------------------------------------------------------------------------------
    ///Larger than check implementations
    class __QOR_INTERFACE( __CODEQOR ) CLargerCheck
    {
    public:

        static void Check( int i, int iMin );
        static void Check( long l, long lMin );
    };

    //--------------------------------------------------------------------------------
    ///Template for larger than checks
    template< typename T, T TMin >
    class CTLargerCheck
    {
    public:

		//------------------------------------------------------------------------------
        static void Check( T v )
        {
            CLargerCheck::Check( v, TMin );
        }
    };

    //--------------------------------------------------------------------------------
    ///Larger than or equal check implementations
    class __QOR_INTERFACE( __CODEQOR ) CLargerEqualCheck
    {
    public:

        static void Check( int i, int iMin );
        static void Check( long l, long lMin );
    };

    //--------------------------------------------------------------------------------
    ///Smaller than or equal check implementations
    class __QOR_INTERFACE( __CODEQOR ) CSmallerEqualCheck
    {
    public:

        static void Check( int i, int iMin );
        static void Check( long l, long lMin );
    };

	//--------------------------------------------------------------------------------
    //Template for >= checks
    template< typename T, T TMin >
    class CTLargerEqualCheck
    {
    public:

		//------------------------------------------------------------------------------
        static void Check( T v )
        {
            CLargerEqualCheck::Check( v, TMin );
        }
    };

    //--------------------------------------------------------------------------------
    //Equal check implementations
    class __QOR_INTERFACE( __CODEQOR ) CEqualCheck
    {
    public:

        static void Check( long l, long lMin );
    };

    //--------------------------------------------------------------------------------
    //Template for == checks
    template< typename T, T TVal >
    class CTEqualCheck
    {
    public:

		//------------------------------------------------------------------------------
        static void Check( T v )
        {
            CEqualCheck::Check( v, TVal );
        }
    };


}//nsParamChecking

#endif//CODEQOR_PCHECKING_TRANGE_H_1
