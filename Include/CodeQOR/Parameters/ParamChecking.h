//ParamChecking.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Templates for validating parameter values on function entry

#ifndef CODEQOR_PARAMCHECKING_H_1
#define CODEQOR_PARAMCHECKING_H_1

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma __QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "CodeQOR/Parameters/ParamRegister.h"
#include "CodeQOR/Parameters/PChecks/FlagChecks.h"

//--------------------------------------------------------------------------------
namespace nsParamChecking
{
	//--------------------------------------------------------------------------------
	//Generic parameter validation class
	//TParam is the type of the parameter being passed
	//TCheck is the type of the check to be performed
	template< class TParam, class TCheck = CNoCheck >
	class CCheckParam : public CParamRegister
	{
	public:

#if		( __QOR_PARAMETER_CHECKING_ == __QCS_YES_ )
			typedef CCheckParam< TParam, TCheck > TType;
#else
			typedef TParam TType;
#endif

		//--------------------------------------------------------------------------------
		//Caller will initiate check on parameter construction
		CCheckParam( TParam param ) : CParamRegister( &m_Param ), m_Param( param )
		{	
			TCheck::Check( m_Param );
		}

		//--------------------------------------------------------------------------------
		//Callee will get the paramter it needs via this type cast operator
		operator TParam()
		{		
			return  m_Param;//return the internal parameter instance
		}

		//--------------------------------------------------------------------------------
		TParam* operator &()
		{
			return &m_Param;
		}

		//--------------------------------------------------------------------------------
		TParam operator ->()
		{
			return m_Param.operator->();
		}

	protected:

		TParam m_Param;			//Instance of parameter type

	};

	//--------------------------------------------------------------------------------
	//A parameter validation template for reference parameters
	template< class TParam, class TCheck >
	class CCheckRefParam : public CParamRegister
	{
	public:

		//--------------------------------------------------------------------------------
		CCheckRefParam( TParam& param ) : CParamRegister( &param ), m_Param( param )
		{
			TCheck::Check( m_Param );
		}

		//--------------------------------------------------------------------------------
		operator TParam()
		{
			return m_Param;
		}

		//--------------------------------------------------------------------------------
		TParam* operator &()
		{
			return &m_Param;
		}

		//--------------------------------------------------------------------------------
		TParam operator ->()
		{
			return m_Param.operator->();
		}

	private:

		TParam& m_Param;
	};

	//--------------------------------------------------------------------------------
	//Generic const parameter validation class
	//const TParam is the type of the parameter being passed
	//TCheck is the type of the check to be performed
	template< class TParam, class TCheck >
	class CConstCheckParam : public CParamRegister
	{
	public:

		typedef typename CCheckParam< TParam, TCheck >::TType TType;
			
		//--------------------------------------------------------------------------------
		//Caller will initiate check on parameter construction
		CConstCheckParam( const TParam param ) : CParamRegister( &m_Param ), m_Param( const_cast< TParam >( param ) )
		{
			TCheck::Check( m_Param );
		}

		//--------------------------------------------------------------------------------
		//Callee will get the paramter it needs via this type cast operator
		operator TParam()
		{		
			return const_cast< const TParam >( m_Param );//return the internal parameter instance
		}

		//--------------------------------------------------------------------------------
		TParam operator ->()
		{
			return const_cast< const TParam >( m_Param.operator->() );
		}

	protected:

		TParam m_Param;			//Instance of parameter type

	};

}//nsParamChecking

#endif//CODEQOR_PARAMCHECKING_H_1
