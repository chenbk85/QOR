//ReturnCheck.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Checked return value template

#ifndef CODEQOR_RETURNCHECK_H_1
#define CODEQOR_RETURNCHECK_H_1

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma __QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "CodeQOR/Parameters/ParamChecking.h"
#include "CodeQOR/Tracing/FunctionContextBase.h"
#include "CodeQOR/ErrorSystem/Error.h"
#include "CodeQOR/ErrorSystem/ParamErrorDomain.h"

//--------------------------------------------------------------------------------
namespace nsParamChecking
{
	template< typename TValue > class CNoReturnCheck;

	//--------------------------------------------------------------------------------
	//Generic validated return value class
	//TReturn is the type of the return value
	//TCheck is the type of validation check to be performed
	template<class TReturn, class TCheck = CNoReturnCheck< TReturn > >
	class CCheckReturn : public CReturnRegister
	{
	public:

//Allow return value checking to be turned off making it disappear completely from compiled code
#if		( __QOR_PARAMETER_CHECKING_ == __QCS_YES_ )
		typedef CCheckReturn< TReturn, TCheck > TType;
#else
		typedef TReturn TType;
#endif
		
		//--------------------------------------------------------------------------------
		CCheckReturn() : CReturnRegister( &m_Param ), m_bInitialised( false )
		{
			TCheck AutoCheck;
			TCheck::Init( m_Param, &AutoCheck );
		}

		//--------------------------------------------------------------------------------
		CCheckReturn( TReturn param ) : CReturnRegister( &m_Param ), m_Param( param ), m_bInitialised( true )
		{		
			TCheck AutoCheck;
			TCheck::Check( m_Param, &AutoCheck );
			OnAssignment();
		}

		//--------------------------------------------------------------------------------
		CCheckReturn& operator = ( TReturn& value )
		{
			m_Param = value;
			m_bInitialised = true;
			TCheck AutoCheck;
			TCheck::Check( m_Param, &AutoCheck );
			OnAssignment();
			return *this;
		}

		//--------------------------------------------------------------------------------
		operator TReturn()
		{		
			if( !m_bInitialised )
			{
				nsCodeQOR::CError::Raise( nsCodeQOR::CParamErrorDomain::UNINITIALIZED_RETURN, &( nsCodeQOR::ParamErrorDomain() ), nsCodeQOR::CError::ERR_LVL_WARNING );
			}
			return m_Param;
		}

	protected:

		TReturn m_Param;			//Instance of parameter type

	private:

		bool m_bInitialised;
	};

	//--------------------------------------------------------------------------------
	//A base class for return checks
	template< typename TValue >
	class CReturnCheckBase
	{
	public:

		//--------------------------------------------------------------------------------
		CReturnCheckBase()
		{
		}

		//--------------------------------------------------------------------------------
		virtual ~CReturnCheckBase()
		{
		}

		//--------------------------------------------------------------------------------
		virtual bool Test( TValue& value )
		{
			return false;
		}

		//--------------------------------------------------------------------------------
		virtual void DefaultInit( TValue& value )
		{
		}

		//--------------------------------------------------------------------------------
		static void Check( TValue& value, CReturnCheckBase* pInstance )
		{
			if( !pInstance->Test( value ) )
			{				
				nsCodeQOR::CError::Raise( nsCodeQOR::CParamErrorDomain::GENERAL_CHECK_FAILURE, &(nsCodeQOR::ParamErrorDomain()), nsCodeQOR::CError::ERR_LVL_CONTINUE );
			}
		}

		//--------------------------------------------------------------------------------
		static void Init( TValue& value, CReturnCheckBase* pInstance )
		{
			pInstance->DefaultInit( value );
		}
	};

	//--------------------------------------------------------------------------------
	//A return check that does no actual checking 
	template< typename TValue >
	class CNoReturnCheck : public CReturnCheckBase< TValue >
	{
	public:

		//--------------------------------------------------------------------------------
		virtual bool Test( TValue& value )
		{
			return true;
		}
	};

}//nsParamChecking

#endif//CODEQOR_RETURNCHECK_H_1

