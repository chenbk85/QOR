//TInstancePtr.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//A factory based, stack only, smart pointer that uses the Class Registry

#ifndef CODEQOR_TINSTPOINTER_H_1
#define CODEQOR_TINSTPOINTER_H_1

#include "CodeQOR/ClassReg/ClassReg.h"
#include "CodeQOR/Modules/ProcessBase.h"
#include "CodeQOR/Traits/Policy.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

//------------------------------------------------------------------------------
namespace nsCodeQOR
{
	//------------------------------------------------------------------------------
	template< class T >
	class CTInstancePtr  
	{
	private:

		//NEVER CALLED private overrides to prevent heap allocation of instances of this class
		void* operator new( size_t ){}
		void operator delete( void* ){}

	protected:

		T* m_pT;								//pointer to instance

	public:

		//------------------------------------------------------------------------------
		CTInstancePtr( T* pT ) : m_pT( pT )
		{
		}

		//------------------------------------------------------------------------------
		CTInstancePtr()
		{
			CClassInstanceFactory* pFactory = ThisModule().ClassReg().GetFactory( T::ClassID() );	

			if( pFactory != 0 )
			{
				m_pT = reinterpret_cast< T* >( pFactory->Instance() );	//get the instance pointer on creation
			}
			else
			{
				m_pT = 0;
			}
		}

		//------------------------------------------------------------------------------
		virtual ~CTInstancePtr()
		{
			CClassInstanceFactory* pFactory = ThisModule().ClassReg().GetFactory( T::ClassID() );	
			if( pFactory != 0 && m_pT != 0 )
			{
				pFactory->Release( m_pT );			//release it on destruction
			}
			m_pT = 0;		
		}

		//------------------------------------------------------------------------------
		T* Detach()
		{
			T* pT = m_pT;
			m_pT = 0;
			return pT;
		}

		//------------------------------------------------------------------------------
		T* operator ->()
		{
			return m_pT;						//provide member pointer access to the instance
		}

		//------------------------------------------------------------------------------
		T& operator()()
		{
			return *m_pT;						//provide functor style access to the instance
		}

		//------------------------------------------------------------------------------
		bool IsNull( void )
		{
			return m_pT == 0 ? true : false;
		}

	};

}//nsCodeQOR

#endif//CODEQOR_TINSTPOINTER_H_1
