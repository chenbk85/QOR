//What.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Declares CWhat. A class to represent what happened as part of an incident or error

#ifndef CODEQOR_ERR_WHAT_H_1
#define CODEQOR_ERR_WHAT_H_1

#include "CodeQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "CodeQOR/Text/TString.h"
#include "CodeQOR/ErrorSystem/Error.h"

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __CODEQOR ) CWhat : public CErrorPropertyBase
	{
	public:

		CWhat();
		CWhat( const CWhat& );
		CWhat& operator = ( const CWhat& );
		virtual ~CWhat();
		virtual CErrorPropertyBase* Clone( void );

		CError::Level GetLevel( unsigned int* puiCustLevel = 0 );		//Get the severity level/category of the incident
		void SetLevel( CError::Level l, unsigned int uiCustomLevel = 0 );
		unsigned int Code();		
		void SetCode( unsigned int uiCode );
		virtual void SetParams( CError::CBaseErrorParams& Params );
		void* Parameter( unsigned char ucParam );
		CError::CBaseErrorParams** Params();

	protected:

		CError::Level m_iLevel;
		unsigned int m_uiCustomLevel;
		unsigned int m_uiErrorCode;	//index used to look up the error description from the Error Domain
		CError::CBaseErrorParams* m_pParams;
	};

}//nsCodeQOR

#endif//CODEQOR_ERR_WHAT_H_1
