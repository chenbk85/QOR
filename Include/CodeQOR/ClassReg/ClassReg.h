//ClassReg.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//A registry of per class factories by Locally Unique ID

#ifndef CODEQOR_CLASSREG_H_1
#define CODEQOR_CLASSREG_H_1

#include "CodeQOR/DataTypes/GUID.h"
#include "CodeQOR/DataStructures/TMap.h"
#include "CodeQOR/Traits/Policy.h"
#include "CodeQOR/ClassReg/AbstractFactory.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

//------------------------------------------------------------------------------
namespace nsCodeQOR
{
	//------------------------------------------------------------------------------
	class __QOR_INTERFACE(__CODEQOR) CClassReg
	{

	public:

		//------------------------------------------------------------------------------
		CClassReg(){}

		//------------------------------------------------------------------------------
		virtual ~CClassReg(){}

		//------------------------------------------------------------------------------
		//Register a mapping between a class ID and a factory for creating instances
		virtual void Register( mxGUID* ClassID, CClassInstanceFactory* pFactory )
		{
			TItem item( ClassID, pFactory );
			m_RegMap.Insert( ClassID, pFactory );
		}

		//------------------------------------------------------------------------------
		//Remove a class id and its factory from the class registry
		virtual void UnRegister( mxGUID* ClassID )
		{
			m_RegMap.Remove( ClassID );
		}

		//------------------------------------------------------------------------------
		//Get the factory for creating instances of a class by ID
		virtual CClassInstanceFactory* GetFactory( mxGUID* ClassID )
		{
			return m_RegMap.Find( ClassID );
		}

	protected:

		//A map from class identifiers to factories for creating instances
		nsCodeQOR::CTMap<
				mxGUID*,
				CClassInstanceFactory*,
				CPolicy,
				nsCodeQOR::mem_traits< nsCodeQOR::CTMapPair< mxGUID*, CClassInstanceFactory* > >::CTAllocator
			> m_RegMap;

		//A named type for the items within the map
		typedef nsCodeQOR::CTMap<
				mxGUID*,
				CClassInstanceFactory*,
				CPolicy,
				nsCodeQOR::mem_traits< nsCodeQOR::CTMapPair< mxGUID*, CClassInstanceFactory* > >::CTAllocator
			>::TItem TItem;

	};

}//nsCodeQOR

#endif//CODEQOR_CLASSREG_H_1

