//ClassRegEntry.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//An association class to register classes with the class registry
//Extends the abstract factory with self registration

#ifndef CODEQOR_CLASSREGENTRY_H_1
#define CODEQOR_CLASSREGENTRY_H_1

#include "ClassReg.h"
#include "CodeQOR/Modules/ProcessBase.h"
#include <new>
#include "CodeQOR/Macros/ClassIdentityMacros.h"
#include "CodeQOR/Traits/MemoryTraits.h"

//------------------------------------------------------------------------------
namespace nsCodeQOR
{
	//--------------------------------------------------------------------------------
	template< class T >
	class CTClassRegEntry : public CClassInstanceFactory
	{

	public:

		//--------------------------------------------------------------------------------
		//Default constructor registers class T
		CTClassRegEntry()
		{
			//Add T::ClassID to the reg table along with this factory that can create a T
			CProcessBase::ThisProcess()->ClassReg().Register( T::ClassID(), this );
		}

		//--------------------------------------------------------------------------------
		//Default destructor unregisters class T
		virtual ~CTClassRegEntry()
		{
			//Remove T::ClassID from the reg table along with this T factory
			CProcessBase::ThisProcess()->ClassReg().UnRegister( T::ClassID() );
		}

		//--------------------------------------------------------------------------------
		//Return a 'typeless' pointer to a new instance of T
		virtual void* Instance( void )
		{
			return _new( T );
		}

		//--------------------------------------------------------------------------------
		//Delete a T passed by typeless pointer
		virtual void Release( void* pInstance )
		{
			T* pT = reinterpret_cast< T* >( pInstance );
			_delete( T, pT );
		}

	private:

		CTClassRegEntry( const CTClassRegEntry& );
		CTClassRegEntry& operator = ( const CTClassRegEntry& );

	};

	//--------------------------------------------------------------------------------
	template< class T >
	class CTExternalRegEntry : public CClassInstanceFactory
	{

	public:

		//--------------------------------------------------------------------------------
		//Default constructor registers class T
		CTExternalRegEntry()
		{
			//Add T::ClassID to the reg table along with this factory that can create a T
			CProcessBase::ThisProcess()->ExternalClassReg().Register( T::ClassID(), this );
		}

		//--------------------------------------------------------------------------------
		//Default destructor unregisters class T
		virtual ~CTExternalRegEntry()
		{
			//Remove T::ClassID from the reg table along with this T factory
			CProcessBase::ThisProcess()->ExternalClassReg().UnRegister( T::ClassID() );
		}

		//--------------------------------------------------------------------------------
		//Return a 'typeless' pointer to a new instance of T
		virtual void* Instance( void )
		{
			return _new( T );
		}

		//--------------------------------------------------------------------------------
		//Delete a T passed by typeless pointer
		virtual void Release( void* pInstance )
		{
			T* pT = reinterpret_cast< T* >( pInstance );
			_delete( T, pT );
		}

	private:

		CTExternalRegEntry( const CTExternalRegEntry& );
		CTExternalRegEntry& operator = ( const CTExternalRegEntry& );

	};

}//nsCodeQOR

#endif//CODEQOR_CLASSREGENTRY_H_1
