//TBitArray.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Array class for bit fields

#ifndef CODEQOR_DATASTRUCTS_BITARRAY_H_2
#define CODEQOR_DATASTRUCTS_BITARRAY_H_2

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "CodeQOR/MemoryManagement/DefaultAllocator.h"
#include "CodeQOR/Traits/MemoryTraits.h"
#include "CodeQOR/Traits/Policy.h"
#include "CodeQOR/DataStructures/TArray.h"

//------------------------------------------------------------------------------
//An array of individually adressable bits
//Memory is a single contiguous block, units of 32 bits

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
	//------------------------------------------------------------------------------
	template< class TPolicy = CPolicy, class TAllocator = __QCMP_FEATURE_TONDTIDTP( typename ) mem_traits< Cmp_unsigned__int32 >::CTAllocator >
	class CTBitArray
	{
		
	public:

		__QCMP_STATIC_CONSTANT( unsigned long, INVALID = (unsigned long)(-1) );

		//------------------------------------------------------------------------------
		//Construct a CBitArray with a default allocation count
		CTBitArray() : m_ulCurrentSize( 0 ) 
		, m_ulMaxSize( 32 )
		, m_Blocks( 1 )
		{			
		}

		//------------------------------------------------------------------------------
		//Construct a CBitArray with an initial empty allocation
		CTBitArray( unsigned long size ) : m_ulCurrentSize( 0 ) 
		, m_ulMaxSize( size )
		, m_Blocks( ( size / 32 ) + 1 )
		{
		}

		//------------------------------------------------------------------------------
		//Copy construct
		CTBitArray( const CTBitArray& srcArray ) : m_ulCurrentSize( srcArray.m_ulCurrentSize ) 
		, m_ulMaxSize( srcArray.m_ulMaxSize )
		{
			srcArray.AcquireAccess();
			m_Blocks = srcArray.m_Blocks;
			srcArray.ReleaseAccess();
		}

		//------------------------------------------------------------------------------
		//Two CTBitArray are equivalent if their contents are equivalent
		bool operator == ( const CTBitArray& Comperand )
		{
			Comperand.AcquireAccess();
			CLockPrimitive Lock( m_ThreadSyncPrimitive );
			
			bool bResult = true;
			if( Comperand.m_ulCurrentSize != m_ulCurrentSize )
			{
				bResult = false;
			}
			else
			{
				unsigned int k = 0;
				while ( k < m_ulCurrentSize )
				{
					if( Comperand[ k ] != operator[]( k ) )
					{
						bResult = false;
						break;
					}
					k++;
				}
			}
			Comperand.ReleaseAccess();
			return bResult;
		}

		//------------------------------------------------------------------------------
		//Assignment from another Bit Array
		CTBitArray& operator = ( const CTBitArray& srcArray )
		{
			srcArray.AcquireAccess();
			CLockPrimitive Lock( m_ThreadSyncPrimitive );
			m_ulCurrentSize = srcArray.m_ulCurrentSize;		
			m_ulMaxSize = srcArray.m_ulMaxSize;
			m_Blocks = srcArray.m_Blocks;			
			srcArray.ReleaseAccess();
			return *this;
		}

		//------------------------------------------------------------------------------
		//Default virtual destructor frees array data
		virtual ~CTBitArray()
		{ 		
		}

		//------------------------------------------------------------------------------
		//Free the array data and reset the allocation and usage sizes to 0
		virtual void Free()
		{
			m_ulCurrentSize = 0;
			m_ulMaxSize = 0;
		}

		//------------------------------------------------------------------------------
		//Return an array element
		bool operator[]( unsigned long k ) const
		{
			Cmp_unsigned__int32 uiBlock = m_Blocks[ ( k / 32 ) ];
			Cmp_unsigned__int32 uiMask = 1 << ( k % 32 );
			bool bResult = uiBlock & uiMask ? true : false;
			return bResult;
		}

		//------------------------------------------------------------------------------
		void SetAt( unsigned long k, bool bValue )
		{
			Cmp_unsigned__int32 uiBlock = m_Blocks[ ( k / 32 ) ];

			Cmp_unsigned__int32 uiMask;
			uiMask = 1 << ( k % 32 );
			if( bValue )
			{				
				uiBlock |= uiMask;
			}
			else
			{
				uiMask = ~uiMask;
				uiBlock &= uiMask;
			}
			m_Blocks[ ( k / 32 ) ] = uiBlock;
		}

		//------------------------------------------------------------------------------
		//Append a single array element
		void Append( bool newInfo )
		{
			CLockPrimitive Lock( m_ThreadSyncPrimitive );

			if ( m_ulCurrentSize == m_ulMaxSize ) 
			{
				unsigned long ulOldCount = m_ulMaxSize;
				m_ulMaxSize += 32;			
				Cmp_unsigned__int32 uiBlock = 0;
				m_Blocks.Append( uiBlock );				
			}
			
			m_ulCurrentSize += 1;
			unsigned long k = ( m_ulCurrentSize / 32 ) + 1;
			Cmp_unsigned__int32 uiBlock = m_Blocks[ k ];
			Cmp_unsigned__int32 uiMask = 1 << ( m_ulCurrentSize % 32 );
			uiBlock |= uiMask;
			m_Blocks[ k ] = uiBlock;
		}

		//------------------------------------------------------------------------------
		void Append( const CTBitArray& ArrayToAdd )
		{
			ArrayToAdd.AcquireAccess();
			CLockPrimitive Lock( m_ThreadSyncPrimitive );

			for ( unsigned long i = 0, k = ArrayToAdd.Size(); i < k; i++ )
			{
				bool bValue = ArrayToAdd[ i ];
				Append( bValue );
			}
			ArrayToAdd.ReleaseAccess();
		}

		//------------------------------------------------------------------------------
		//Is the array empty?
		bool Empty() const
		{
			return( m_ulCurrentSize == 0 );
		}

		//------------------------------------------------------------------------------
		//Is the array not empty?
		bool NotEmpty() const
		{
			return( m_ulCurrentSize > 0 );
		}

		//------------------------------------------------------------------------------
		//return the in use size
		unsigned long Size() const 
		{
			CLockPrimitive Lock( m_ThreadSyncPrimitive );
			unsigned long ulResult = m_ulCurrentSize;
			return ulResult;
		}

		//------------------------------------------------------------------------------
		//return the allocation count
		unsigned long Capacity() const 
		{
			CLockPrimitive Lock( m_ThreadSyncPrimitive );
			unsigned long ulResult = m_ulMaxSize;
			return ulResult;
		}

		//------------------------------------------------------------------------------
		//Set the in use size to 0 without affecting the allocation
		virtual void Clear()
		{
			CLockPrimitive Lock( m_ThreadSyncPrimitive );
			m_ulCurrentSize = 0;
		} 

		//------------------------------------------------------------------------------
		//Set the allocated size of the array without affecting the in use size unless 
		// you reduce it below the current in use size
		virtual void SetCapacity( const unsigned long ulNewSize )
		{
			CLockPrimitive Lock( m_ThreadSyncPrimitive );
			
			if ( ulNewSize != m_ulMaxSize ) 
			{							
				m_ulMaxSize = ulNewSize;			
				m_Blocks.SetCapacity( ( m_ulMaxSize / 32 ) + 1 );
			}

			if( m_ulMaxSize <= m_ulCurrentSize )
			{
				m_ulCurrentSize = m_ulMaxSize - 1;
			}
		}

		//------------------------------------------------------------------------------
		void AcquireAccess( void ) const
		{
			m_ThreadSyncPrimitive.Acquire();
		}

		//------------------------------------------------------------------------------
		void ReleaseAccess( void ) const
		{
			m_ThreadSyncPrimitive.Release();
		}

	protected:	

		unsigned long m_ulCurrentSize;		//number of array items in use
		unsigned long m_ulMaxSize;			//allocated size of the array
		CTArray< Cmp_unsigned__int32, TPolicy, TAllocator > m_Blocks;

		typedef typename TPolicy::TThreadSyncSinglePrimitive CSyncPrimitive;
		typedef typename TPolicy::TThreadSyncSingleLock CLockPrimitive;

		mutable CSyncPrimitive m_ThreadSyncPrimitive;
	};

}//nsCodeQOR

#endif//CODEQOR_DATASTRUCTS_BITARRAY_H_2
