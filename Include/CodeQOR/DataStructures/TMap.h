//TMap.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Map template
//A simple and reasonably fast map implementation using an indexed array of pairs
//NOTE: use std::map rather than nsCodeQOR::CTMap where possible

#ifndef CODEQOR_DATASTRUCTS_MAP_H_1
#define CODEQOR_DATASTRUCTS_MAP_H_1

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "TIndexedArray.h"
#include "TMapPair.h"
#include "CodeQOR/Traits/Policy.h"

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
    //--------------------------------------------------------------------------------
    //A map implemented as an indexed array of first biased pairs
    template < class TFirst, class TSecond, class TPolicy = CPolicy, class TAllocator = __QCMP_FEATURE_TONDTIDTP( typename ) mem_traits< CTMapPair< TFirst, TSecond > >::CTAllocator >
    class CTMap : public CTIndexedArray< CTMapPair< TFirst, TSecond >, TPolicy, TAllocator >
    {
    public:

		typedef CTMapPair< TFirst, TSecond > TItem;
		typedef CTIndexedArray< TItem, TPolicy, TAllocator > BaseName;

		__QCMP_USING_BASE( m_ThreadSyncPrimitive );

        //--------------------------------------------------------------------------------
        CTMap(){}

        //--------------------------------------------------------------------------------
        virtual ~CTMap(){}

        //--------------------------------------------------------------------------------
        bool operator != ( CTMap< TFirst, TSecond, TPolicy, TAllocator >& Comperand )
        {
                return !( BaseName::operator == ( Comperand ) );
        }

        //--------------------------------------------------------------------------------
        TSecond Find( const TFirst& first )
        {
            TSecond second( 0 );
            TItem item;
            item.First() = first;
            typename BaseName::CLockPrimitive Lock( m_ThreadSyncPrimitive );
            unsigned long ulIndex = BaseName::Find( item );
            if( ulIndex != BaseName::INVALID )
            {
                item = BaseName::operator[]( ulIndex );
                second = item.Second();
            }
            return second;
        }

        //--------------------------------------------------------------------------------
        void Remove( const TFirst& first )
        {
            TItem item;
            item.First() = first;
            typename BaseName::CLockPrimitive Lock( m_ThreadSyncPrimitive );
            unsigned long ulIndex = BaseName::Find( item );
            if( ulIndex != BaseName::INVALID )
            {
				BaseName::RemoveAt( ulIndex ) ;
            }
        }

        //--------------------------------------------------------------------------------
        unsigned long Insert( const TFirst& first, const TSecond& second )
        {
            TItem item;
            item.First() = first;
            item.Second() = second;
            typename BaseName::CLockPrimitive Lock( m_ThreadSyncPrimitive );
            unsigned long ulIndex = BaseName::Find( item );
            if( ulIndex == BaseName::INVALID )
            {
				ulIndex = BaseName::Append( item );
            }
			else
			{
				BaseName::operator[]( ulIndex ).Second() = second;
			}
			return ulIndex;
        }
    };

}// nsCodeQOR

#endif//CODEQOR_DATASTRUCTS_MAP_H_1
