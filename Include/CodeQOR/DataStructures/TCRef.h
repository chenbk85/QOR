//TCRef.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//An intrusive reference counting pointer that requires the referenced object to implement AddRef and Release COM style
//The pointee is expected to manage it own deletion when its reference count hits 0

#ifndef CODEQOR_DATASTRUCTS_TCREF_H_1
#define CODEQOR_DATASTRUCTS_TCREF_H_1

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
	//--------------------------------------------------------------------------------	
	template< class T > class CTCRef
	{
	public:

		//--------------------------------------------------------------------------------
		CTCRef( T* pt = 0 ) : m_p( pt )
		{
			if( m_p )
			{
				m_p->AddRef();
			}
		}

		//--------------------------------------------------------------------------------
		CTCRef( const CTCRef< T >& Src )
		{
			if( Src.m_p )
			{
				Src.m_p->AddRef();
			}
			m_p = Src.m_p;
		}

		//--------------------------------------------------------------------------------
		CTCRef& operator = ( const CTCRef< T >& Src )
		{
			if( &Src != this && Src.m_p != m_p )
			{				
				if( Src.m_p )
				{
					Src.m_p->AddRef();
				}
				this->Detach();
				m_p = Src.m_p;
			}
			return *this;
		}

		//--------------------------------------------------------------------------------
		operator T*() const
		{
			return m_p;
		}

		//--------------------------------------------------------------------------------
		T* operator -> () const
		{
			return m_p;
		}

		//--------------------------------------------------------------------------------
		template< class TDerived >
		TDerived* As( void )
		{
			return dynamic_cast< TDerived* >( m_p );
		}

		//--------------------------------------------------------------------------------
		operator T&() const
		{
			return *m_p;
		}

		//--------------------------------------------------------------------------------
		~CTCRef()
        {
			if( m_p )
			{
				m_p->Release();
			}
			m_p = 0;
        }
	
		//--------------------------------------------------------------------------------
		bool IsNull( void )
		{
			return m_p == 0;
		}

		//--------------------------------------------------------------------------------
		T* Detach( void )
		{			
			if( m_p )
			{
				m_p->Release();
			}
			T* pt = m_p;
			m_p = 0;
			return pt;
		}

	protected:

		T* m_p;

	};

}//nsCodeQOR

#endif//CODEQOR_DATASTRUCTS_TCREF_H_1
