//TFLink.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Minimal singly linked list structure

#ifndef CODEQOR_DATASTRUCTS_TFLINK_H_1
#define CODEQOR_DATASTRUCTS_TFLINK_H_1

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
	//--------------------------------------------------------------------------------
	//A minimal forward only singly linked list template with no allocation, deletion, iterators or even removal
	//Turn T into a list of T by deriving it from CTFLink< T >. e.g. class Chain : public CTFLink< Chain >{...};
	template< class T >
	class CTFLink
	{
	public:	

		//--------------------------------------------------------------------------------
		CTFLink()
		{
			m_pNext = 0;
		}

		//--------------------------------------------------------------------------------
		CTFLink( T _t ) : m_Item( _t )
		{
			m_pNext = 0;
		}
		
		//--------------------------------------------------------------------------------
		//A slow but simple append implementation.
		//Appending to any item in the list always appends at the end.
		void Append( CTFLink< T >* ptNext )
		{
			CTFLink< T >* pEnd = this;

			while( pEnd->m_pNext != 0 )
			{
				pEnd = pEnd->m_pNext;
			}

			pEnd->m_pNext = ptNext;
		}

		//--------------------------------------------------------------------------------
		T& Item()
		{
			return m_Item;
		}

		T m_Item;

	protected:

		CTFLink< T >* m_pNext;
		
	};

}//nsCodeQOR

#endif//CODEQOR_DATASTRUCTS_TFLINK_H_1
