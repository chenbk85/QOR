//TMapPair.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//A pair class designed to provide elements for a map
//Use for anything else is not recommended

#ifndef CODEQOR_DATASTRUCTS_TMAPPAIR_H_1
#define CODEQOR_DATASTRUCTS_TMAPPAIR_H_1

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "TPair.h"

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
    //--------------------------------------------------------------------------------        
    template< class TFirst, class TSecond >
    class CTMapPair : public CTPair< TFirst, TSecond >
    {
		typedef CTPair< TFirst, TSecond > BaseName;
        
    public:
			
		__QCMP_USING_BASE( m_first );
		__QCMP_USING_BASE( m_second );

        //--------------------------------------------------------------------------------              
        CTMapPair()
		{
		}

        //--------------------------------------------------------------------------------
        //Construct from first and second items
        CTMapPair( const TFirst& afirst, const TSecond& asecond ) : CTPair< TFirst, TSecond >( afirst, asecond )
        {
        }

        //--------------------------------------------------------------------------------
        //copy construct from a pair of identical type
        CTMapPair( const CTPair< TFirst, TSecond >& srcPair ) : CTPair< TFirst, TSecond >( srcPair )
        {
        }

        //--------------------------------------------------------------------------------
        //copy construct from a map pair of identical type
        CTMapPair( const CTMapPair< TFirst, TSecond >& srcMapPair ) : CTPair< TFirst, TSecond >( srcMapPair )
        {
        }

        //--------------------------------------------------------------------------------
        virtual ~CTMapPair()
        {
        }

        //--------------------------------------------------------------------------------
        CTMapPair& operator = ( const CTPair< TFirst, TSecond >& aPair )
        {
            CTPair< TFirst, TSecond >* pPair = const_cast< CTPair< TFirst, TSecond >* >( &aPair );
            m_first = pPair->First();
            m_second = pPair->Second();
            return *this;
        }


        //--------------------------------------------------------------------------------
        CTMapPair& operator = ( const CTMapPair< TFirst, TSecond >& aPair )
        {
            CTMapPair< TFirst, TSecond >* pPair = const_cast< CTMapPair< TFirst, TSecond >* >( &aPair );
            m_first = pPair->First();
            m_second = pPair->Second();
            return *this;
        }

        //--------------------------------------------------------------------------------
        //Not equal operator override for comparison with a pair or map pair of identical type
        virtual bool operator != ( CTPair< TFirst, TSecond >& aPair )
        {
			return ( aPair.First() == m_first ) ? false : true;
        }

        //--------------------------------------------------------------------------------
        //Equal operator override for comparison with a pair or map pair of identical type
        virtual bool operator == ( CTPair< TFirst, TSecond >& aPair )
        {
            return aPair.First() == m_first;
        }
                
        //--------------------------------------------------------------------------------
        //Greater than operator for comparison with a pair or map pair of identical type
        virtual bool operator > ( CTPair< TFirst, TSecond >& aPair )
        {
            return aPair.First() < m_first;
        }

        //--------------------------------------------------------------------------------
        //Less than operator for comparison with a pair or map pair of identical type
        virtual bool operator < ( CTPair< TFirst, TSecond >& aPair )
        {
            return m_first < aPair.First();
        }

    };

}//nsCodeQOR

#endif//CODEQOR_DATASTRUCTS_TMAPPAIR_H_1
