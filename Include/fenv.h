//fenv.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_FENV_H_3
#define QOR_FENV_H_3

#include "SystemQOR.h"
#include QOR_SYS_PLATFORMTYPES(fenv)

typedef nsPlatform::fexcept_t fexcept_t;
typedef nsPlatform::fenv_t fenv_t;

//TODO:These defines should only exist if the platform supports them. 
//Needs a universal way to tell outside of defines themselves before we can define these here
/*
#define FE_DIVBYZERO		( nsPlatform::FEDivideByZero )
#define FE_INEXACT			( nsPlatform::FEInExact )
#define FE_INVALID			( nsPlatform::FEInvalid )
#define FE_OVERFLOW			( nsPlatform::FEOverflow )
#define FE_UNDERFLOW		( nsPlatform::FEUnderflow )

#define FE_DOWNWARD			( nsPlatform::FEDownward )
#define FE_TONEAREST		( nsPlatform::FEToNearest )
#define FE_TOWARDZERO		( nsPlatform::FEToZero )
#define FE_UPWARD			( nsPlatform::FEUpward )

#define FE_DFL_ENV			nsPlatform::DefaultFPEnv
*/
__QCMP_STARTLINKAGE_C

    __QOR_INTERFACE( __CQOR ) int feclearexcept( int excepts );
	__QOR_INTERFACE( __CQOR ) int fegetenv(fenv_t *envp);
    __QOR_INTERFACE( __CQOR ) int fegetexceptflag( fexcept_t* flagp, int excepts );
	__QOR_INTERFACE( __CQOR ) int fegetround( void );
	__QOR_INTERFACE( __CQOR ) int feholdexcept( fenv_t* envp );
	__QOR_INTERFACE( __CQOR ) int feraiseexcept( int excepts );
    __QOR_INTERFACE( __CQOR ) int fesetenv( const fenv_t* envp );
	__QOR_INTERFACE( __CQOR ) int fesetexceptflag( const fexcept_t* flagp, int excepts );
    __QOR_INTERFACE( __CQOR ) int fesetround( int round );
    __QOR_INTERFACE( __CQOR ) int fetestexcept( int excepts );
    __QOR_INTERFACE( __CQOR ) int feupdateenv( const fenv_t* envp );

__QCMP_ENDLINKAGE_C

#endif//QOR_FENV_H_3

