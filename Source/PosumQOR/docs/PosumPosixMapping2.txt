
Posum objects:

CHostProcess
    __QOR_INTERFACE( __CQOR ) ::pid_t	wait( int* );
    __QOR_INTERFACE( __CQOR ) int		waitid( ::idtype_t, ::id_t, ::siginfo_t*, int );
    __QOR_INTERFACE( __CQOR ) ::pid_t	waitpid( ::pid_t, int*, int );
	__QOR_INTERFACE( __CQOR ) int posix_spawn( pid_t* __QCMP_RESTRICT, const char* __QCMP_RESTRICT, const posix_spawn_file_actions_t*, const posix_spawnattr_t* __QCMP_RESTRICT, char* const[], char* const[] );
	__QOR_INTERFACE( __CQOR ) int posix_spawn_file_actions_addclose( posix_spawn_file_actions_t*, int );
	__QOR_INTERFACE( __CQOR ) int posix_spawn_file_actions_adddup2( posix_spawn_file_actions_t*, int, int );
	__QOR_INTERFACE( __CQOR ) int posix_spawn_file_actions_addopen( posix_spawn_file_actions_t* __QCMP_RESTRICT, int, const char* __QCMP_RESTRICT, int, mode_t );
	__QOR_INTERFACE( __CQOR ) int posix_spawn_file_actions_destroy( posix_spawn_file_actions_t* );
	__QOR_INTERFACE( __CQOR ) int posix_spawn_file_actions_init( posix_spawn_file_actions_t* );
	__QOR_INTERFACE( __CQOR ) int posix_spawnattr_destroy( posix_spawnattr_t* );
	__QOR_INTERFACE( __CQOR ) int posix_spawnattr_getflags( const posix_spawnattr_t* __QCMP_RESTRICT, short* __QCMP_RESTRICT );
	__QOR_INTERFACE( __CQOR ) int posix_spawnattr_getpgroup( const posix_spawnattr_t* __QCMP_RESTRICT, pid_t* __QCMP_RESTRICT );
	__QOR_INTERFACE( __CQOR ) int posix_spawnattr_getschedparam( const posix_spawnattr_t* __QCMP_RESTRICT, sched_param* __QCMP_RESTRICT );
	__QOR_INTERFACE( __CQOR ) int posix_spawnattr_getschedpolicy( const posix_spawnattr_t* __QCMP_RESTRICT, int* __QCMP_RESTRICT );
	__QOR_INTERFACE( __CQOR ) int posix_spawnattr_getsigdefault( const posix_spawnattr_t* __QCMP_RESTRICT, sigset_t* __QCMP_RESTRICT );
	__QOR_INTERFACE( __CQOR ) int posix_spawnattr_getsigmask( const posix_spawnattr_t* __QCMP_RESTRICT, sigset_t* __QCMP_RESTRICT );
	__QOR_INTERFACE( __CQOR ) int posix_spawnattr_init( posix_spawnattr_t* );
	__QOR_INTERFACE( __CQOR ) int posix_spawnattr_setflags( posix_spawnattr_t*, short );
	__QOR_INTERFACE( __CQOR ) int posix_spawnattr_setpgroup( posix_spawnattr_t*, pid_t );
	__QOR_INTERFACE( __CQOR ) int posix_spawnattr_setschedparam( posix_spawnattr_t* __QCMP_RESTRICT, const sched_param* __QCMP_RESTRICT );
	__QOR_INTERFACE( __CQOR ) int posix_spawnattr_setschedpolicy( posix_spawnattr_t*, int );
	__QOR_INTERFACE( __CQOR ) int posix_spawnattr_setsigdefault( posix_spawnattr_t* __QCMP_RESTRICT, const sigset_t* __QCMP_RESTRICT );
	__QOR_INTERFACE( __CQOR ) int posix_spawnattr_setsigmask( posix_spawnattr_t* __QCMP_RESTRICT, const sigset_t* __QCMP_RESTRICT );
	__QOR_INTERFACE( __CQOR ) int posix_spawnp( pid_t* __QCMP_RESTRICT, const char* __QCMP_RESTRICT, const posix_spawn_file_actions_t*, const posix_spawnattr_t* __QCMP_RESTRICT, char* const[], char* const[] );

CHostSystem
	__QOR_INTERFACE( __CQOR ) int uname( ::utsname* );

CFileSystem
	__QOR_INTERFACE( __CQOR ) int poll( pollfd fds[], nfds_t nfds, int timeout );
    __QOR_INTERFACE( __CQOR ) int ftw( const char* szPath, int (*fn)( const char*, const stat*, int ), int ndirs );
    __QOR_INTERFACE( __CQOR ) int nftw( const char* szPath, int (*fn)( const char*, const stat*, int, FTW* ), int fd_limit, int flags );
	__QOR_INTERFACE( __CQOR ) void FD_CLR( int fd, ::fd_set* fdset )
	__QOR_INTERFACE( __CQOR ) int FD_ISSET( int fd, ::fd_set* fdset )
	__QOR_INTERFACE( __CQOR ) void FD_SET( int fd, ::fd_set* fdset )
	__QOR_INTERFACE( __CQOR ) void FD_ZERO( ::fd_set* fdset )
	__QOR_INTERFACE( __CQOR ) int pselect( int nfds, ::fd_set* __QCMP_RESTRICT readfds, ::fd_set* __QCMP_RESTRICT writefds, ::fd_set* __QCMP_RESTRICT errorfds, const ::timespec* __QCMP_RESTRICT timeout, const ::sigset_t* __QCMP_RESTRICT sigmask )
	__QOR_INTERFACE( __CQOR ) int select( int nfds, ::fd_set* __QCMP_RESTRICT readfds, ::fd_set* __QCMP_RESTRICT writefds, ::fd_set* __QCMP_RESTRICT errorfds, ::timeval* __QCMP_RESTRICT timeout )
	__QOR_INTERFACE( __CQOR ) int statvfs( const char* __QCMP_RESTRICT path, ::sstatvfs* __QCMP_RESTRICT buf )
	__QOR_INTERFACE( __CQOR ) int chmod( const char* path, ::mode_t mode )
	__QOR_INTERFACE( __CQOR ) int lstat( const char* __QCMP_RESTRICT path, ::stat* __QCMP_RESTRICT buf )
	__QOR_INTERFACE( __CQOR ) int mkdir( const char* path, ::mode_t mode )
	__QOR_INTERFACE( __CQOR ) int mkfifo( const char* path, ::mode_t mode )
	__QOR_INTERFACE( __CQOR ) int mknod( const char* path, ::mode_t mode, ::dev_t dev )
	__QOR_INTERFACE( __CQOR ) int _stat( const char* __QCMP_RESTRICT path, ::stat* __QCMP_RESTRICT buf )
	__QOR_INTERFACE( __CQOR ) ::mode_t umask( ::mode_t cmask )
	__QOR_INTERFACE( __CQOR ) int _umask( int pmode )
	__QOR_INTERFACE( __CQOR ) ::errno_t _umask_s( int mode, int* pOldMode )
	__QOR_INTERFACE( __CQOR ) int _stat( const char* path, _sstat* buffer )
	__QOR_INTERFACE( __CQOR ) int _stat64( const char* path, __sstat64* buffer )
	__QOR_INTERFACE( __CQOR ) int _stati64( const char* path, _sstati64* buffer )
    __QOR_INTERFACE( __CQOR ) int creat( const char*, mode_t );
    __QOR_INTERFACE( __CQOR ) int open( const char*, int, ... );
	CGlob
		__QOR_INTERFACE( __CQOR ) int glob( const char* __QCMP_RESTRICT szPattern, int iFlags, int (*ErrFunc)( const char*, int ), glob_t* __QCMP_RESTRICT pGlob );
		__QOR_INTERFACE( __CQOR ) void globfree( glob_t* pGlob );
	
CFile
    __QOR_INTERFACE( __CQOR ) int posix_fadvise( int, off_t, off_t, int );
    __QOR_INTERFACE( __CQOR ) int posix_fallocate( int, off_t, off_t );
	__QOR_INTERFACE( __CQOR ) int openat( int, const char*, int, ... );
    __QOR_INTERFACE( __CQOR ) int fcntl( int, int, ... );
	__QOR_INTERFACE( __CQOR ) ::ssize_t readv( int fildes, const ::iovec*, int );
	__QOR_INTERFACE( __CQOR ) ::ssize_t writev( int fildes, const ::iovec*, int );
	__QOR_INTERFACE( __CQOR ) int fstatvfs( int fildes, ::sstatvfs* buf )
	__QOR_INTERFACE( __CQOR ) int fchmod( int fildes, ::mode_t mode )
	__QOR_INTERFACE( __CQOR ) int fchmodat( int fd, const char* path, ::mode_t mode, int flag )
	__QOR_INTERFACE( __CQOR ) int fstat( int fildes, ::stat* buf )
	__QOR_INTERFACE( __CQOR ) int fstatat( int fd, const char* __QCMP_RESTRICT path, ::stat* __QCMP_RESTRICT buf, int flag )
	__QOR_INTERFACE( __CQOR ) int futimens( int fd, const ::timespec times[ 2 ] )
	__QOR_INTERFACE( __CQOR ) int mkdirat( int fd, const char* path, ::mode_t mode )
	__QOR_INTERFACE( __CQOR ) int mkfifoat( int fd, const char* path, ::mode_t mode )
	__QOR_INTERFACE( __CQOR ) int mknodat( int fd, const char* path, ::mode_t mode, ::dev_t dev )
	__QOR_INTERFACE( __CQOR ) int utimensat( int fd, const char* path, const ::timespec times[ 2 ], int flag )
    __QOR_INTERFACE( __CQOR ) FILE* _stdin( void );
    __QOR_INTERFACE( __CQOR ) FILE* _stdout( void );
    __QOR_INTERFACE( __CQOR ) FILE* _stderr( void );
	__QOR_INTERFACE( __CQOR ) void clearerr( FILE* stream );
    __QOR_INTERFACE( __CQOR ) errno_t clearerr_s( FILE* stream );
    __QOR_INTERFACE( __CQOR ) char* ctermid( char* );
	__QOR_INTERFACE( __CQOR ) int dprintf(int, const char *__QCMP_RESTRICT, ...);
    __QOR_INTERFACE( __CQOR ) int fclose( FILE* stream );
    __QOR_INTERFACE( __CQOR ) FILE* fdopen( int, const char* );
    __QOR_INTERFACE( __CQOR ) int feof( FILE* stream );
    __QOR_INTERFACE( __CQOR ) int ferror( FILE* stream );
    __QOR_INTERFACE( __CQOR ) int fflush( FILE* stream );
    __QOR_INTERFACE( __CQOR ) int fgetc( FILE* stream );
    __QOR_INTERFACE( __CQOR ) int fgetpos( FILE* __QCMP_RESTRICT stream, fpos_t* __QCMP_RESTRICT pos );
    __QOR_INTERFACE( __CQOR ) char* fgets( char* __QCMP_RESTRICT s, int n, FILE* __QCMP_RESTRICT stream );
    __QOR_INTERFACE( __CQOR ) int fileno( FILE* );
    __QOR_INTERFACE( __CQOR ) void flockfile( FILE* );
	__QOR_INTERFACE( __CQOR ) FILE* fmemopen( void * __QCMP_RESTRICT, size_t, const char * __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) FILE* fopen( const char* __QCMP_RESTRICT filename, const char* __QCMP_RESTRICT mode );
    __QOR_INTERFACE( __CQOR ) errno_t fopen_s( FILE** ppFile, const char* szFilename, const char* szMode );
    __QOR_INTERFACE( __CQOR ) int fprintf( FILE* __QCMP_RESTRICT stream, const char* __QCMP_RESTRICT format, ... );
    __QOR_INTERFACE( __CQOR ) int fprintf_s( FILE* stream, const char* format, ... );
    __QOR_INTERFACE( __CQOR ) int fputc( int c, FILE* stream );
    __QOR_INTERFACE( __CQOR ) int fputs( const char* __QCMP_RESTRICT s, FILE* __QCMP_RESTRICT stream );
    __QOR_INTERFACE( __CQOR ) size_t fread( void* __QCMP_RESTRICT ptr, size_t size, size_t nmemb, FILE* __QCMP_RESTRICT stream );
    __QOR_INTERFACE( __CQOR ) size_t fread_s( void* ptr, size_t DstSize, size_t ElementSize, size_t Count, FILE* pFile );
    __QOR_INTERFACE( __CQOR ) FILE* freopen( const char* __QCMP_RESTRICT filename, const char* __QCMP_RESTRICT mode, FILE* __QCMP_RESTRICT stream );
    __QOR_INTERFACE( __CQOR ) errno_t freopen_s( FILE** ppFile, const char* szFilename, const char* szMode, FILE* pOldFile );
    __QOR_INTERFACE( __CQOR ) int fscanf( FILE* __QCMP_RESTRICT stream, const char* __QCMP_RESTRICT format, ... );
    __QOR_INTERFACE( __CQOR ) int fscanf_s( FILE* pFile, const char* format, ... );
    __QOR_INTERFACE( __CQOR ) int fseek( FILE* stream, long int offset, int whence );
    __QOR_INTERFACE( __CQOR ) int fseeko( FILE*, off_t, int );
    __QOR_INTERFACE( __CQOR ) int fsetpos( FILE* stream, const fpos_t* pos );
    __QOR_INTERFACE( __CQOR ) long int ftell( FILE* stream );
    __QOR_INTERFACE( __CQOR ) off_t ftello( FILE* );
    __QOR_INTERFACE( __CQOR ) int ftrylockfile( FILE* );
    __QOR_INTERFACE( __CQOR ) void funlockfile( FILE* );
    __QOR_INTERFACE( __CQOR ) size_t fwrite( const void* __QCMP_RESTRICT ptr, size_t size, size_t nmemb, FILE* __QCMP_RESTRICT stream );
    __QOR_INTERFACE( __CQOR ) int getc( FILE* stream );
    __QOR_INTERFACE( __CQOR ) int getchar( void );
    __QOR_INTERFACE( __CQOR ) int getc_unlocked( FILE* );
    __QOR_INTERFACE( __CQOR ) int getchar_unlocked( void );
	__QOR_INTERFACE( __CQOR ) ssize_t getdelim( char** __QCMP_RESTRICT, size_t* __QCMP_RESTRICT, int, FILE* __QCMP_RESTRICT );
	__QOR_INTERFACE( __CQOR ) ssize_t  getline( char** __QCMP_RESTRICT, size_t* __QCMP_RESTRICT, FILE* __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) char* gets( char* s );
    __QOR_INTERFACE( __CQOR ) char* gets_s( char* s, size_t _Size );
	__QOR_INTERFACE( __CQOR ) FILE* open_memstream( char**, size_t* );
    __QOR_INTERFACE( __CQOR ) int pclose( FILE* );
    __QOR_INTERFACE( __CQOR ) void perror( const char* s );
    __QOR_INTERFACE( __CQOR ) FILE* popen( const char*, const char* );
	__QOR_INTERFACE( __CQOR ) FILE* _popen( const char* command, const char* mode );

    __QOR_INTERFACE( __CQOR ) int printf( const char* __QCMP_RESTRICT format, ... );
    __QOR_INTERFACE( __CQOR ) int printf_s( const char* format, ... );
    __QOR_INTERFACE( __CQOR ) int putc( int c, FILE* stream );
    __QOR_INTERFACE( __CQOR ) int putchar( int c );
    __QOR_INTERFACE( __CQOR ) int putc_unlocked( int, FILE* );
    __QOR_INTERFACE( __CQOR ) int putchar_unlocked( int );
    __QOR_INTERFACE( __CQOR ) int puts( const char* s );
    __QOR_INTERFACE( __CQOR ) int remove( const char* filename );
#ifndef OS_EXPORTS_STDIO_RENAME
    __QOR_INTERFACE( __CQOR ) int rename( const char* old, const char* pnew );
#endif
	__QOR_INTERFACE( __CQOR ) int renameat( int, const char*, int, const char* );
    __QOR_INTERFACE( __CQOR ) void rewind( FILE* stream );
    __QOR_INTERFACE( __CQOR ) int scanf( const char* __QCMP_RESTRICT format, ... );
    __QOR_INTERFACE( __CQOR ) int scanf_s( const char* format, ... );
    __QOR_INTERFACE( __CQOR ) void setbuf( FILE* __QCMP_RESTRICT stream, char* __QCMP_RESTRICT buf );
    __QOR_INTERFACE( __CQOR ) int setvbuf( FILE* __QCMP_RESTRICT stream, char* __QCMP_RESTRICT buf, int mode, size_t size );
    __QOR_INTERFACE( __CQOR ) int snprintf( char* __QCMP_RESTRICT s, size_t n, const char* __QCMP_RESTRICT format, ... );
    __QOR_INTERFACE( __CQOR ) int sprintf( char* __QCMP_RESTRICT s, const char* __QCMP_RESTRICT format, ... );
    __QOR_INTERFACE( __CQOR ) int sprintf_s( char* s, size_t SizeInBytes, const char* format, ... );
    __QOR_INTERFACE( __CQOR ) int sscanf( const char* __QCMP_RESTRICT s, const char* __QCMP_RESTRICT format, ... );
    __QOR_INTERFACE( __CQOR ) int sscanf_s( const char* s, const char* format, ... );
    __QOR_INTERFACE( __CQOR ) char* tempnam( const char*, const char* );
    __QOR_INTERFACE( __CQOR ) FILE* tmpfile( void );
    __QOR_INTERFACE( __CQOR ) errno_t tmpfile_s( FILE** ppFile );
    __QOR_INTERFACE( __CQOR ) char* tmpnam( char* s );
    __QOR_INTERFACE( __CQOR ) errno_t tmpnam_s( char* s, size_t Size );
    __QOR_INTERFACE( __CQOR ) int ungetc( int c, FILE* stream );
    __QOR_INTERFACE( __CQOR ) int vfprintf( FILE* __QCMP_RESTRICT stream, const char* __QCMP_RESTRICT format, va_list arg );
    __QOR_INTERFACE( __CQOR ) int vfprintf_s( FILE* stream, const char* format, va_list arg );
    __QOR_INTERFACE( __CQOR ) int vfscanf( FILE* __QCMP_RESTRICT stream, const char* __QCMP_RESTRICT format, va_list arg );
    __QOR_INTERFACE( __CQOR ) int vprintf( const char* __QCMP_RESTRICT format, va_list arg );
    __QOR_INTERFACE( __CQOR ) int vprintf_s( const char* format, va_list arg );
    __QOR_INTERFACE( __CQOR ) int vscanf( const char* __QCMP_RESTRICT format, va_list arg );
    __QOR_INTERFACE( __CQOR ) int vsnprintf( char* __QCMP_RESTRICT s, size_t n, const char* __QCMP_RESTRICT format, va_list arg );
    __QOR_INTERFACE( __CQOR ) int vsprintf( char* __QCMP_RESTRICT s, const char* __QCMP_RESTRICT format, va_list arg );
    __QOR_INTERFACE( __CQOR ) int vsprintf_s( char* s, size_t SizeInBytes, const char* format, va_list arg );
    __QOR_INTERFACE( __CQOR ) int vsscanf( const char* __QCMP_RESTRICT s, const char* __QCMP_RESTRICT format, va_list arg );

	__QOR_INTERFACE( __CQOR ) int _ungetch( int c  );
	__QOR_INTERFACE( __CQOR ) ::wint_t _ungetwch( wint_t c );
	__QOR_INTERFACE( __CQOR ) int _ungetch_nolock( int c );
	__QOR_INTERFACE( __CQOR ) ::wint_t _ungetwch_nolock( wint_t c );
	__QOR_INTERFACE( __CQOR ) char* _tempnam( const char* dir, const char* prefix );
	__QOR_INTERFACE( __CQOR ) char* _tempnam_dbg( const char* dir, const char* prefix, int blockType, const char* filename, int linenumber );
	__QOR_INTERFACE( __CQOR ) wchar_t* _wtempnam_dbg( const wchar_t* dir, const wchar_t* prefix, int blockType, const char* filename, int linenumber );
	__QOR_INTERFACE( __CQOR ) long _tell( int handle );
	__QOR_INTERFACE( __CQOR ) Cmp__int64 _telli64( int handle );

	__QOR_INTERFACE( __CQOR ) int _sprintf_l( char* buffer, const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _sprintf_p_l( char* buffer, size_t sizeOfBuffer, const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _sprintf_s_l( char* buffer, size_t sizeOfBuffer, const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _sscanf_l( const char* buffer, const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _sscanf_s_l( const char* buffer, const char* format, ::locale_t locale, ... );

	__QOR_INTERFACE( __CQOR ) ::intptr_t _spawnl( int mode, const char* cmdname, const char* arg0, ... );
	__QOR_INTERFACE( __CQOR ) ::intptr_t _spawnle( int mode, const char* cmdname, const char* arg0, ... );
	__QOR_INTERFACE( __CQOR ) ::intptr_t _spawnlp( int mode, const char* cmdname, const char* arg0, ... );
	__QOR_INTERFACE( __CQOR ) ::intptr_t _spawnlpe( int mode, const char* cmdname, const char* arg0, ... );
	__QOR_INTERFACE( __CQOR ) ::intptr_t _spawnv( int mode, const char* cmdname, const char* const* argv );
	__QOR_INTERFACE( __CQOR ) ::intptr_t _spawnve( int mode, const char* cmdname, const char* const* argv, const char* const* envp );
	__QOR_INTERFACE( __CQOR ) ::intptr_t _spawnvp( int mode, const char* cmdname, const char* const* argv );
	__QOR_INTERFACE( __CQOR ) ::intptr_t _spawnvpe( int mode, const char* cmdname, const char* const* argv, const char* const* envp );

	__QOR_INTERFACE( __CQOR ) int _sopen( const char* filename, int oflag, int shflag, int pmode );
	__QOR_INTERFACE( __CQOR ) errno_t _sopen_s( int* pfh, const char* filename, int oflag, int shflag, int pmode );

	__QOR_INTERFACE( __CQOR ) int _snprintf( char* buffer, size_t count, const char* format, ... );

	//_snprintf_c
	//_snprintf_c_l

	__QOR_INTERFACE( __CQOR ) int _snprintf_l( char* buffer, size_t count, const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _snprintf_s( char* buffer, size_t sizeOfBuffer, size_t count, const char* format, ... );
	__QOR_INTERFACE( __CQOR ) int _snprintf_s_l( char* buffer, size_t sizeOfBuffer, size_t count, const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _snscanf( const char* input, size_t length, const char* format, ... );
	__QOR_INTERFACE( __CQOR ) int _snscanf_l( const char* input, size_t length, const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int  _snscanf_s( const char* input, size_t length, const char* format, ... );
	__QOR_INTERFACE( __CQOR ) int  _snscanf_s_l( const char* input, size_t length, const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _snwprintf( wchar_t* buffer, size_t count, const wchar_t* format, ... );
	__QOR_INTERFACE( __CQOR ) int _snwprintf_l( wchar_t* buffer, size_t count, const wchar_t* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _snwprintf_s( wchar_t* buffer, size_t sizeOfBuffer, size_t count, const wchar_t* format, ... );
	__QOR_INTERFACE( __CQOR ) int _snwprintf_s_l( wchar_t* buffer, size_t sizeOfBuffer, size_t count, const wchar_t* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int  _snwscanf( const wchar_t* input, size_t length, const wchar_t* format, ... );
	__QOR_INTERFACE( __CQOR ) int  _snwscanf_l( const wchar_t* input, size_t length, const wchar_t* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int  _snwscanf_s( const wchar_t* input, size_t length, const wchar_t* format, ... );
	__QOR_INTERFACE( __CQOR ) int  _snwscanf_s_l( const wchar_t* input, size_t length, const wchar_t* format, ::locale_t locale, ... );

	__QOR_INTERFACE( __CQOR ) int _setmode( int fd, int mode );
	__QOR_INTERFACE( __CQOR ) int _setmaxstdio( int newmax );
	__QOR_INTERFACE( __CQOR ) unsigned int _set_output_format( unsigned int format );
	__QOR_INTERFACE( __CQOR ) int _scanf_l( const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _scanf_s_l( const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _scprintf( const char* format, ... );
	__QOR_INTERFACE( __CQOR ) int _scprintf_l( const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _scprintf_p_l( const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _scwprintf( const wchar_t* format, ... );
	__QOR_INTERFACE( __CQOR ) int _scwprintf_l( const wchar_t* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _scwprintf_p_l( const wchar_t* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _rmtmp( void );
	__QOR_INTERFACE( __CQOR ) int _rmdir( const char* dirname );

	__QOR_INTERFACE( __CQOR ) int _putws( const wchar_t* str );
	__QOR_INTERFACE( __CQOR ) ::wint_t _putwch( wchar_t c );
	__QOR_INTERFACE( __CQOR ) int _putw( int binint, ::FILE* stream );
	__QOR_INTERFACE( __CQOR ) int _putch( int c );

	__QOR_INTERFACE( __CQOR ) int _printf_l( const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _printf_p( const char* format, ... );
	__QOR_INTERFACE( __CQOR ) int _printf_p_l( const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _printf_s_l( const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _outp( unsigned short port, int databyte );
	__QOR_INTERFACE( __CQOR ) unsigned long _outpd( unsigned short port, unsigned long dataword );
	__QOR_INTERFACE( __CQOR ) unsigned short _outpw( unsigned short port, unsigned short dataword );

	__QOR_INTERFACE( __CQOR ) int _open_osfhandle( intptr_t osfhandle, int flags );
	__QOR_INTERFACE( __CQOR ) int _open( const char* filename, int oflag, int pmode );
	__QOR_INTERFACE( __CQOR ) char* _mktemp( char* szTemplate );
	__QOR_INTERFACE( __CQOR ) errno_t _mktemp_s( char* szTemplate, size_t sizeInChars );
	__QOR_INTERFACE( __CQOR ) long _lseek( int fd, long offset, int origin );
	__QOR_INTERFACE( __CQOR ) Cmp__int64 _lseeki64( int fd, Cmp__int64 offset, int origin );

	__QOR_INTERFACE( __CQOR ) void* _lsearch( const void* key, void* base, unsigned int* num, unsigned int width, int ( *compare )( const void*, const void*) );
	__QOR_INTERFACE( __CQOR ) void* _lsearch_s( const void* key, void* base, unsigned int* num, size_t size, int ( *compare )( void*, const void*, const void* ), void* context );

	__QOR_INTERFACE( __CQOR ) int _locking( int fd, int mode, long nbytes );
	__QOR_INTERFACE( __CQOR ) void  _lock( int locknum );

	__QOR_INTERFACE( __CQOR ) void* _lfind( const void* key, const void* base, unsigned int* num, unsigned int width, int ( *compare )( const void*, const void* ) );
	__QOR_INTERFACE( __CQOR ) void* _lfind_s( const void* key, const void* base, unsigned int* num, size_t size, int ( *compare )( void*, const void*, const void* ), void* context );
	__QOR_INTERFACE( __CQOR ) int _kbhit( void );

	__QOR_INTERFACE( __CQOR ) int _inp( unsigned short port );
	__QOR_INTERFACE( __CQOR ) unsigned short _inpw( unsigned short port );
	__QOR_INTERFACE( __CQOR ) unsigned long _inpd( unsigned short port );

	__QOR_INTERFACE( __CQOR ) int _getw( ::FILE* stream );
	__QOR_INTERFACE( __CQOR ) ::wint_t _getwch( void );
	__QOR_INTERFACE( __CQOR ) ::wint_t _getwche( void );
	__QOR_INTERFACE( __CQOR ) wchar_t* _getws( wchar_t* buffer );
	__QOR_INTERFACE( __CQOR ) int _getmbcp( void );
	__QOR_INTERFACE( __CQOR ) int _getmaxstdio( void );
	__QOR_INTERFACE( __CQOR ) int _getch( void );
	__QOR_INTERFACE( __CQOR ) int _getche( void );
	__QOR_INTERFACE( __CQOR ) char* _getcwd( char* buffer, int maxlen );
	__QOR_INTERFACE( __CQOR ) char* _getdcwd( int drive, char* buffer, int maxlen );
	__QOR_INTERFACE( __CQOR ) unsigned int _get_output_format();
	__QOR_INTERFACE( __CQOR ) intptr_t _get_osfhandle( int fd );
	__QOR_INTERFACE( __CQOR ) errno_t _get_fileinfo( int* pFileInfo);
	__QOR_INTERFACE( __CQOR ) errno_t _get_fmode( int* pmode );
	__QOR_INTERFACE( __CQOR ) int _fwprintf_l( ::FILE* stream, const wchar_t* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _fwprintf_p( ::FILE* stream, const wchar_t* format, ...);
	__QOR_INTERFACE( __CQOR ) int _fwprintf_p_l( ::FILE* stream, const wchar_t* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _fwprintf_s_l( ::FILE* stream, const wchar_t* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _fwscanf_l( ::FILE* stream, const wchar_t* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _fwscanf_s_l( ::FILE* stream, const wchar_t* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _fscanf_l( ::FILE* stream, const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _fscanf_s_l( ::FILE* stream, const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _fseeki64( ::FILE* stream, Cmp__int64 offset, int origin );
	__QOR_INTERFACE( __CQOR ) ::FILE* _fsopen( const char* filename, const char* mode, int shflag );
	__QOR_INTERFACE( __CQOR ) int _fstat( int fd, ::_sstat* buffer );
	__QOR_INTERFACE( __CQOR ) int _fstat64( int fd, ::__sstat64* buffer );
	__QOR_INTERFACE( __CQOR ) int _fstati64( int fd, ::_sstati64* buffer );
	__QOR_INTERFACE( __CQOR ) int _fprintf_l( ::FILE* stream, const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _fprintf_p( ::FILE* stream, const char* format, ...);
	__QOR_INTERFACE( __CQOR ) int _fprintf_p_l( ::FILE* stream, const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _fprintf_s_l( ::FILE* stream, const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _fputchar( int c );
	__QOR_INTERFACE( __CQOR ) ::wint_t _fputwchar( wchar_t c );
	__QOR_INTERFACE( __CQOR ) int _flushall( void );
	__QOR_INTERFACE( __CQOR ) int _findclose( intptr_t handle );
	__QOR_INTERFACE( __CQOR ) ::intptr_t _findfirst( const char* filespec, ::_finddata_t* fileinfo );
	__QOR_INTERFACE( __CQOR ) ::intptr_t _findfirst64( const char* filespec, ::__finddata64_t* fileinfo );
	__QOR_INTERFACE( __CQOR ) ::intptr_t _findfirsti64( const char* filespec, ::__finddatai64_t* fileinfo );
	__QOR_INTERFACE( __CQOR ) int _findnext( intptr_t handle, ::_finddata_t* fileinfo );
	__QOR_INTERFACE( __CQOR ) int _findnext64( intptr_t handle, ::__finddata64_t* fileinfo );
	__QOR_INTERFACE( __CQOR ) int _findnexti64( intptr_t handle, ::__finddatai64_t* fileinfo );

	__QOR_INTERFACE( __CQOR ) ::FILE* _fdopen( int fd, const char* mode );
	__QOR_INTERFACE( __CQOR ) int _fgetchar( void );
	__QOR_INTERFACE( __CQOR ) wint_t _fgetwchar( void );
	__QOR_INTERFACE( __CQOR ) long _filelength( int fd );
	__QOR_INTERFACE( __CQOR ) Cmp__int64 _filelengthi64( int fd );
	__QOR_INTERFACE( __CQOR ) int _fileno( ::FILE* stream );
	__QOR_INTERFACE( __CQOR ) int _fcloseall( void );
	__QOR_INTERFACE( __CQOR ) int _eof( int fd );
	__QOR_INTERFACE( __CQOR ) int _dup( int fd );
	__QOR_INTERFACE( __CQOR ) int _dup2( int fd1, int fd2 );
	__QOR_INTERFACE( __CQOR ) int _cwprintf( const wchar_t* format, ... );
	__QOR_INTERFACE( __CQOR ) int _cwprintf_l( const wchar_t* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _cwprintf_p( const wchar_t* format, ... );
	__QOR_INTERFACE( __CQOR ) int _cwprintf_p_l( const wchar_t* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _cwprintf_s( const wchar_t* format, ... );
	__QOR_INTERFACE( __CQOR ) int _cwprintf_s_l( const wchar_t* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _cwscanf(  const wchar_t* format, ... );
	__QOR_INTERFACE( __CQOR ) int _cwscanf_l( const wchar_t* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _cwscanf_s( const wchar_t* format, ... );
	__QOR_INTERFACE( __CQOR ) int _cwscanf_s_l( const wchar_t* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _cscanf( const char* format, ... );
	__QOR_INTERFACE( __CQOR ) int _cscanf_l( const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _cscanf_s( const char* format, ... );
	__QOR_INTERFACE( __CQOR ) int _cscanf_s_l( const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _cprintf( const char* format, ... );
	__QOR_INTERFACE( __CQOR ) int _cprintf_l( const char* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _cprintf_p( const char* format, ... );
	__QOR_INTERFACE( __CQOR ) int _cprintf_p_l( const char* format, ::locale_t locale, ...);
	__QOR_INTERFACE( __CQOR ) int _cprintf_s( const char* format, ... );
	__QOR_INTERFACE( __CQOR ) int _cprintf_s_l( const char* format, ::locale_t locale, ...);
	__QOR_INTERFACE( __CQOR ) int _cputs( const char* str );
	__QOR_INTERFACE( __CQOR ) int _cputws( const wchar_t* str );
	__QOR_INTERFACE( __CQOR ) int _creat( const char* filename, int pmode );
	__QOR_INTERFACE( __CQOR ) int _close( int fd );
	__QOR_INTERFACE( __CQOR ) int _commit( int fd );
	__QOR_INTERFACE( __CQOR ) int _chsize( int fd, long size );
	__QOR_INTERFACE( __CQOR ) errno_t _chsize_s( int fd, Cmp__int64 size );
	__QOR_INTERFACE( __CQOR ) int _chmod( const char* filename, int pmode );
	__QOR_INTERFACE( __CQOR ) char* _cgets( char* buffer );
	__QOR_INTERFACE( __CQOR ) wchar_t* _cgetws( wchar_t* buffer );
	__QOR_INTERFACE( __CQOR ) errno_t _cgets_s( char* buffer, size_t numberOfElements, size_t* pSizeRead );
	__QOR_INTERFACE( __CQOR ) errno_t _cgetws_s( wchar_t* buffer, size_t numberOfElements, size_t* pSizeRead );
	__QOR_INTERFACE( __CQOR ) int _access( const char* path, int mode );
	__QOR_INTERFACE( __CQOR ) errno_t _access_s( const char* path, int mode );
	__QOR_INTERFACE( __CQOR ) int __isascii( int c );
	__QOR_INTERFACE( __CQOR ) int __iscsym( int c );
	__QOR_INTERFACE( __CQOR ) int __iscsymf( int c );


	__QOR_INTERFACE( __CQOR ) int sscanf_l( const char* buffer, ::locale_t locale, const char* format, ...); //int _sscanf_l( const char* buffer, const char* format, ::locale_t locale, ... );
	//__QOR_INTERFACE( __CQOR ) vsscanf_l( __s, __l, __f, ...) _sscanf_l( __s, __f, __l, __VA_ARGS__ )
	__QOR_INTERFACE( __CQOR ) int sprintf_l( char* buffer, ::locale_t locale, const char* format, ... );// _sprintf_l( , __f, __l, __VA_ARGS__ )
	__QOR_INTERFACE( __CQOR ) int snprintf_l( char* buffer, size_t count, ::locale_t locale, const char* format, ... );// _snprintf_l( __s, __n, __f, __l, __VA_ARGS__ ) int _snprintf_l( char* buffer, size_t count, const char* format, ::locale_t locale, ... );
	//__QOR_INTERFACE( __CQOR ) vsprintf_l( __s, __l, __f, ... ) _vsprintf_l( __s, __f, __l, __VA_ARGS__ )
	//__QOR_INTERFACE( __CQOR ) vsnprintf_l( __s, __n, __l, __f, ... ) _vsnprintf_l( __s, __n, __f, __l, __VA_ARGS__ )

	__QOR_INTERFACE( __CQOR ) int asprintf_l( char **ret, ::locale_t loc, const char* format, ... );
	__QOR_INTERFACE( __CQOR ) int vasprintf_l( char **ret, ::locale_t loc, const char* format, va_list ap );

CTerminal
	__QOR_INTERFACE( __CQOR ) ::speed_t cfgetispeed( const ::termios* );
	__QOR_INTERFACE( __CQOR ) ::speed_t cfgetospeed( const ::termios* );
	__QOR_INTERFACE( __CQOR ) int     cfsetispeed( ::termios*, ::speed_t );
	__QOR_INTERFACE( __CQOR ) int     cfsetospeed( ::termios*, ::speed_t );
	__QOR_INTERFACE( __CQOR ) int     tcdrain( int );
	__QOR_INTERFACE( __CQOR ) int     tcflow( int, int );
	__QOR_INTERFACE( __CQOR ) int     tcflush( int, int );
	__QOR_INTERFACE( __CQOR ) int     tcgetattr( int, ::termios* );
	__QOR_INTERFACE( __CQOR ) ::pid_t  tcgetsid( int );
	__QOR_INTERFACE( __CQOR ) int     tcsendbreak( int, int );
	__QOR_INTERFACE( __CQOR ) int     tcsetattr( int, int, const ::termios* );

CClock
	__QOR_INTERFACE( __CQOR ) clock_t times( tms* buffer )
	__QOR_INTERFACE( __CQOR ) void _ftime64( __timeb64* time )
	__QOR_INTERFACE( __CQOR ) void _ftime32( __timeb32* time )
	__QOR_INTERFACE( __CQOR ) int getitimer( int, ::itimerval* );
	__QOR_INTERFACE( __CQOR ) int gettimeofday( ::timeval* __QCMP_RESTRICT, void* __QCMP_RESTRICT );
	__QOR_INTERFACE( __CQOR ) int setitimer( int, const ::itimerval* __QCMP_RESTRICT, ::itimerval* __QCMP_RESTRICT );
	//__QOR_INTERFACE( __CQOR ) int select( int, ::fd_set* __QCMP_RESTRICT, ::fd_set* __QCMP_RESTRICT, ::fd_set* __QCMP_RESTRICT, ::timeval* __QCMP_RESTRICT );
	__QOR_INTERFACE( __CQOR ) int utimes( const char*, const ::timeval[ 2 ] );
	
CSocket
	__QOR_INTERFACE( __CQOR ) int accept( int socket, ::sockaddr* __QCMP_RESTRICT address, ::socklen_t* __QCMP_RESTRICT address_len )
	__QOR_INTERFACE( __CQOR ) int bind( int socket, const ::sockaddr* address, ::socklen_t address_len )
	__QOR_INTERFACE( __CQOR ) int connect( int socket, const ::sockaddr* address, ::socklen_t address_len )
	__QOR_INTERFACE( __CQOR ) int getpeername( int socket, ::sockaddr* __QCMP_RESTRICT address, ::socklen_t* __QCMP_RESTRICT address_len )
	__QOR_INTERFACE( __CQOR ) int getsockname( int socket, ::sockaddr* __QCMP_RESTRICT address, ::socklen_t* __QCMP_RESTRICT address_len )
	__QOR_INTERFACE( __CQOR ) int getsockopt( int socket, int level, int option_name, void* __QCMP_RESTRICT option_value, ::socklen_t* __QCMP_RESTRICT option_len )
	__QOR_INTERFACE( __CQOR ) int listen( int socket, int backlog )
	__QOR_INTERFACE( __CQOR ) ::ssize_t recv( int socket, void* buffer, size_t length , int flags )
	__QOR_INTERFACE( __CQOR ) ::ssize_t recvfrom( int socket, void* __QCMP_RESTRICT buffer, size_t length, int flags, ::sockaddr* __QCMP_RESTRICT address, ::socklen_t* __QCMP_RESTRICT address_len )
	__QOR_INTERFACE( __CQOR ) ::ssize_t recvmsg( int socket, ::msghdr* message, int flags )
	__QOR_INTERFACE( __CQOR ) ::ssize_t send( int socket, const void* buffer, size_t length, int flags )
	__QOR_INTERFACE( __CQOR ) ::ssize_t sendmsg( int socket, const ::msghdr* message, int flags )
	__QOR_INTERFACE( __CQOR ) ::ssize_t sendto( int socket, const void* buffer, ::size_t length, int flags, const ::sockaddr* dest_addr, ::socklen_t dest_len )
	__QOR_INTERFACE( __CQOR ) int setsockopt( int socket, int level, int option_name, const void* option_value, ::socklen_t option_len )
	__QOR_INTERFACE( __CQOR ) int shutdown( int socket, int how )
	__QOR_INTERFACE( __CQOR ) int sockatmark( int socket )
	__QOR_INTERFACE( __CQOR ) int socket( int domain, int type, int protocol )
	__QOR_INTERFACE( __CQOR ) int socketpair( int domain, int type, int protocol, int socket_vector[ 2 ] )

CMemoryManager
    __QOR_INTERFACE( __CQOR ) int mlock( const void*, size_t );
    __QOR_INTERFACE( __CQOR ) int mlockall( int );
    __QOR_INTERFACE( __CQOR ) void* mmap( void*, size_t, int, int, int, ::off_t );
    __QOR_INTERFACE( __CQOR ) int mprotect( void*, size_t, int );
    __QOR_INTERFACE( __CQOR ) int msync( void*, size_t, int );
    __QOR_INTERFACE( __CQOR ) int munlock( const void*, size_t );
    __QOR_INTERFACE( __CQOR ) int munlockall( void );
    __QOR_INTERFACE( __CQOR ) int munmap( void*, size_t );
    __QOR_INTERFACE( __CQOR ) int posix_madvise( void*, size_t, int );
    __QOR_INTERFACE( __CQOR ) int posix_mem_offset( const void* __QCMP_RESTRICT, size_t, ::off_t* __QCMP_RESTRICT, size_t* __QCMP_RESTRICT, int* __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) int posix_typed_mem_get_info( int, ::posix_typed_mem_info* );
    __QOR_INTERFACE( __CQOR ) int posix_typed_mem_open( const char*, int, int );
    __QOR_INTERFACE( __CQOR ) int shm_open( const char*, int, ::mode_t );
    __QOR_INTERFACE( __CQOR ) int shm_unlink( const char* );
	
CSharedMemoryManager
	__QOR_INTERFACE( __CQOR ) void* shmat( int, const void*, int );
	__QOR_INTERFACE( __CQOR ) int shmctl( int, int, ::shmid_ds* );
	__QOR_INTERFACE( __CQOR ) int shmdt( const void* );
	__QOR_INTERFACE( __CQOR ) int shmget( ::key_t, size_t, int );

CSharedMemoryItem

CSemaphore
	__QOR_INTERFACE( __CQOR ) int semctl( int semid, int semnum, int cmd, ... )
	__QOR_INTERFACE( __CQOR ) int semget( ::key_t key, int nsems, int semflg )
	__QOR_INTERFACE( __CQOR ) int semop( int semid, ::sembuf* sops, size_t nsops )
	
CResourceManager
    __QOR_INTERFACE( __CQOR ) int getpriority( int, ::id_t );
    __QOR_INTERFACE( __CQOR ) int getrlimit( int, ::rlimit* );
    __QOR_INTERFACE( __CQOR ) int getrusage( int, ::rusage* );
    __QOR_INTERFACE( __CQOR ) int setpriority( int, ::id_t, int );
    __QOR_INTERFACE( __CQOR ) int setrlimit( int, const ::rlimit* );
	
CMessenger
    __QOR_INTERFACE( __CQOR ) int msgctl( int, int, ::msqid_ds* );
    __QOR_INTERFACE( __CQOR ) int msgget( ::key_t, int );
    __QOR_INTERFACE( __CQOR ) ::ssize_t msgrcv( int, void*, size_t, long, int );
    __QOR_INTERFACE( __CQOR ) int msgsnd( int, const void*, size_t, int );

CIPCNode
	__QOR_INTERFACE( __CQOR ) key_t ftok( const char* path, int id )

CNetworkNode
    __QOR_INTERFACE( __CQOR ) unsigned            if_nametoindex( const char* );
    __QOR_INTERFACE( __CQOR ) char*               if_indextoname( unsigned, char* );
    __QOR_INTERFACE( __CQOR ) if_nameindex*       _if_nameindex( void );
    __QOR_INTERFACE( __CQOR ) void                if_freenameindex( if_nameindex* );
	__QOR_INTERFACE( __CQOR ) int dbm_clearerr( DBM* );
    __QOR_INTERFACE( __CQOR ) void dbm_close( DBM* );
    __QOR_INTERFACE( __CQOR ) int dbm_delete( DBM*, datum );
    __QOR_INTERFACE( __CQOR ) int dbm_error( DBM* );
    __QOR_INTERFACE( __CQOR ) datum dbm_fetch( DBM*, datum );
    __QOR_INTERFACE( __CQOR ) datum dbm_firstkey( DBM* );
    __QOR_INTERFACE( __CQOR ) datum dbm_nextkey( DBM* );
    __QOR_INTERFACE( __CQOR ) DBM* dbm_open( const char *, int, mode_t );
    __QOR_INTERFACE( __CQOR ) int dbm_store( DBM*, datum, datum, int );
    __QOR_INTERFACE( __CQOR ) void endhostent( void );
    __QOR_INTERFACE( __CQOR ) void endnetent( void );
    __QOR_INTERFACE( __CQOR ) void endprotoent( void );
    __QOR_INTERFACE( __CQOR ) void endservent( void );
    __QOR_INTERFACE( __CQOR ) void freeaddrinfo( addrinfo* );
    __QOR_INTERFACE( __CQOR ) const char* gai_strerror( int );
    __QOR_INTERFACE( __CQOR ) int getaddrinfo( const char* __QCMP_RESTRICT, const char* __QCMP_RESTRICT, const addrinfo* __QCMP_RESTRICT, addrinfo**  __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) hostent* gethostbyaddr( const void*, socklen_t, int );
    __QOR_INTERFACE( __CQOR ) hostent* gethostbyname( const char* );
    __QOR_INTERFACE( __CQOR ) hostent* gethostent( void );
    __QOR_INTERFACE( __CQOR ) int getnameinfo( const sockaddr* __QCMP_RESTRICT, socklen_t, char* __QCMP_RESTRICT, socklen_t, char* __QCMP_RESTRICT, socklen_t, int );
    __QOR_INTERFACE( __CQOR ) netent* getnetbyaddr( uint32_t, int );
    __QOR_INTERFACE( __CQOR ) netent* getnetbyname( const char* );
    __QOR_INTERFACE( __CQOR ) netent* getnetent( void );
    __QOR_INTERFACE( __CQOR ) protoent* getprotobyname( const char* );
    __QOR_INTERFACE( __CQOR ) protoent* getprotobynumber( int );
    __QOR_INTERFACE( __CQOR ) protoent* getprotoent( void );
    __QOR_INTERFACE( __CQOR ) servent* getservbyname( const char*, const char* );
    __QOR_INTERFACE( __CQOR ) servent* getservbyport( int, const char* );
    __QOR_INTERFACE( __CQOR ) servent* getservent( void );
    __QOR_INTERFACE( __CQOR ) void sethostent( int );
    __QOR_INTERFACE( __CQOR ) void setnetent( int );
    __QOR_INTERFACE( __CQOR ) void setprotoent( int );
    __QOR_INTERFACE( __CQOR ) void setservent( int );

CInternetNode
    __QOR_INTERFACE( __CQOR ) uint32_t    htonl( uint32_t );
    __QOR_INTERFACE( __CQOR ) uint16_t    htons( uint16_t );
    __QOR_INTERFACE( __CQOR ) uint32_t    ntohl( uint32_t );
    __QOR_INTERFACE( __CQOR ) uint16_t    ntohs( uint16_t );
    __QOR_INTERFACE( __CQOR ) in_addr_t   inet_addr( const char* );
    __QOR_INTERFACE( __CQOR ) char*       inet_ntoa( in_addr );
    __QOR_INTERFACE( __CQOR ) const char* inet_ntop( int, const void* __QCMP_RESTRICT, char* __QCMP_RESTRICT, socklen_t );
    __QOR_INTERFACE( __CQOR ) int         inet_pton( int, const char* __QCMP_RESTRICT, void* __QCMP_RESTRICT );
	
CErrorSystem
	__QOR_INTERFACE( __CQOR ) int* __QCMP_CALLCON _errno( void )
	
CAsyncIOSession
	__QOR_INTERFACE( __CQOR ) int      aio_cancel( int, aiocb* );
	__QOR_INTERFACE( __CQOR ) int      aio_error( const aiocb* );
	__QOR_INTERFACE( __CQOR ) int      aio_fsync( int, aiocb* );
	__QOR_INTERFACE( __CQOR ) int      aio_read( aiocb* );
	__QOR_INTERFACE( __CQOR ) ssize_t  aio_return( aiocb* );
	__QOR_INTERFACE( __CQOR ) int      aio_suspend( const aiocb* const[], int, const timespec* );
	__QOR_INTERFACE( __CQOR ) int      aio_write( aiocb* );
	__QOR_INTERFACE( __CQOR ) int      lio_listio( int, aiocb* __QCMP_RESTRICT const[], int, sigevent* __QCMP_RESTRICT );

CFloatComplex
CDoubleComplex
CLongDoubleComplex

CCharacter
CWideCharacter

CDirectory
CDirectoryEntry
CLibraryLoader

CFloatingPointEnvironment
    __QOR_INTERFACE( __CQOR ) int feclearexcept( int excepts );
	__QOR_INTERFACE( __CQOR ) int fegetenv(fenv_t *envp);
    __QOR_INTERFACE( __CQOR ) int fegetexceptflag( fexcept_t* flagp, int excepts );
	__QOR_INTERFACE( __CQOR ) int fegetround( void );
	__QOR_INTERFACE( __CQOR ) int feholdexcept( fenv_t* envp );
	__QOR_INTERFACE( __CQOR ) int feraiseexcept( int excepts );
    __QOR_INTERFACE( __CQOR ) int fesetenv( const fenv_t* envp );
	__QOR_INTERFACE( __CQOR ) int fesetexceptflag( const fexcept_t* flagp, int excepts );
    __QOR_INTERFACE( __CQOR ) int fesetround( int round );
    __QOR_INTERFACE( __CQOR ) int fetestexcept( int excepts );
    __QOR_INTERFACE( __CQOR ) int feupdateenv( const fenv_t* envp );
	__QOR_INTERFACE( __CQOR ) unsigned int _statusfp( void );
	__QOR_INTERFACE( __CQOR ) void __cdecl _set_controlfp( unsigned int newControl, unsigned int mask );
	__QOR_INTERFACE( __CQOR ) double _nextafter( double x, double y );
	__QOR_INTERFACE( __CQOR ) double _logb( double x );
	__QOR_INTERFACE( __CQOR ) void _fpreset( void );
	__QOR_INTERFACE( __CQOR ) int _fpclass( double x );
	__QOR_INTERFACE( __CQOR ) int _fpieee_flt( unsigned long excCode, nsPlatform::_EXCEPTION_POINTERS* excInfo, int handler( ::_FPIEEE_RECORD* ) );
	__QOR_INTERFACE( __CQOR ) int _finite( double x );
	__QOR_INTERFACE( __CQOR ) double _copysign( double x, double y );
	__QOR_INTERFACE( __CQOR ) unsigned int _control87( unsigned int New, unsigned int mask );
	__QOR_INTERFACE( __CQOR ) unsigned int _controlfp( unsigned int New, unsigned int mask );
	__QOR_INTERFACE( __CQOR ) int __control87_2( unsigned int New, unsigned int mask, unsigned int* x86_cw, unsigned int* sse2_cw );
	__QOR_INTERFACE( __CQOR ) nsPlatform::errno_t _controlfp_s( unsigned int* currentControl, unsigned int newControl, unsigned int mask );
	__QOR_INTERFACE( __CQOR ) unsigned int _clear87( void );
	__QOR_INTERFACE( __CQOR ) unsigned int _clearfp( void );
	__QOR_INTERFACE( __CQOR ) double _chgsign( double x );

CSystemMessage
	__QOR_INTERFACE( __CQOR ) int fmtmsg( long classification, const char* label, int severity , const char* text, const char* action, const char* tag );
	
CMatch
	__QOR_INTERFACE( __CQOR ) int fnmatch( const char* pattern, const char* str, int flags );
	
CGroup
	__QOR_INTERFACE( __CQOR ) void endgrent( void );
	__QOR_INTERFACE( __CQOR ) group* getgrent( void );
    __QOR_INTERFACE( __CQOR ) group* getgrgid( gid_t );
	__QOR_INTERFACE( __CQOR ) int getgrgid_r( gid_t, group*, char*, size_t, group** );
    __QOR_INTERFACE( __CQOR ) group* getgrnam( const char* );
    __QOR_INTERFACE( __CQOR ) int getgrnam_r( const char*, group*, char*, size_t, group** );
    __QOR_INTERFACE( __CQOR ) void setgrent( void );
	
CIConv
    __QOR_INTERFACE( __CQOR ) iconv_t iconv_open( const char*, const char* );
    __QOR_INTERFACE( __CQOR ) size_t iconv( iconv_t, char** __QCMP_RESTRICT, size_t* __QCMP_RESTRICT, char** __QCMP_RESTRICT, size_t* __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) int iconv_close( iconv_t );

CIntergerEnvironment
    __QOR_INTERFACE( __CQOR ) intmax_t imaxabs(intmax_t j);
    __QOR_INTERFACE( __CQOR ) imaxdiv_t imaxdiv(intmax_t numer, intmax_t denom);
    __QOR_INTERFACE( __CQOR ) intmax_t strtoimax(const char* __QCMP_RESTRICT nptr, char ** __QCMP_RESTRICT endptr, int base);
    __QOR_INTERFACE( __CQOR ) uintmax_t strtoumax(const char* __QCMP_RESTRICT nptr, char ** __QCMP_RESTRICT endptr, int base);
    __QOR_INTERFACE( __CQOR ) intmax_t wcstoimax(const wchar_t* __QCMP_RESTRICT nptr, wchar_t ** __QCMP_RESTRICT endptr, int base);
    __QOR_INTERFACE( __CQOR ) uintmax_t wcstoumax(const wchar_t* __QCMP_RESTRICT nptr, wchar_t ** __QCMP_RESTRICT endptr, int base);

CNationalLanguageInfo
    __QOR_INTERFACE( __CQOR ) char* nl_langinfo( nl_item );
	__QOR_INTERFACE( __CQOR ) char* nl_langinfo_l( nl_item, locale_t );
    __QOR_INTERFACE( __CQOR ) int catclose( nl_catd catd );
    __QOR_INTERFACE( __CQOR ) char* catgets( nl_catd catd, int set_id, int msg_id, const char* s );
    __QOR_INTERFACE( __CQOR ) nl_catd catopen( const char* szName, int iFlags );

CLibGen
    __QOR_INTERFACE( __CQOR ) char* basename( char* );
    __QOR_INTERFACE( __CQOR ) char* dirname( char* );

CLocale
	__QOR_INTERFACE( __CQOR ) ::locale_t duplocale( ::locale_t l );
	__QOR_INTERFACE( __CQOR ) void freelocale( ::locale_t l );
	__QOR_INTERFACE( __CQOR ) ::lconv* localeconv( void );
	__QOR_INTERFACE( __CQOR ) ::locale_t newlocale( int, const char*, ::locale_t );
    __QOR_INTERFACE( __CQOR ) char* setlocale( int category, const char* szLocale );
    __QOR_INTERFACE( __CQOR ) ::locale_t uselocale( ::locale_t l );
	__QOR_INTERFACE( __CQOR ) ::lconv* localeconv_l( ::locale_t loc );

CMathOperations

CMonetary
    __QOR_INTERFACE( __CQOR ) ssize_t strfmon( char* __QCMP_RESTRICT, size_t, const char* __QCMP_RESTRICT, ... );
	__QOR_INTERFACE( __CQOR ) ssize_t strfmon_l( char* __QCMP_RESTRICT, size_t, locale_t, const char* __QCMP_RESTRICT, ... );

CMessageQueue
    __QOR_INTERFACE( __CQOR ) int mq_close( mqd_t );
    __QOR_INTERFACE( __CQOR ) int mq_getattr( mqd_t, mq_attr* );
    __QOR_INTERFACE( __CQOR ) int mq_notify( mqd_t, const sigevent* );
    __QOR_INTERFACE( __CQOR ) mqd_t mq_open( const char*, int, ... );
    __QOR_INTERFACE( __CQOR ) ssize_t mq_receive( mqd_t, char*, size_t, unsigned* );
    __QOR_INTERFACE( __CQOR ) int mq_send( mqd_t, const char*, size_t, unsigned );
    __QOR_INTERFACE( __CQOR ) int mq_setattr( mqd_t, const mq_attr* __QCMP_RESTRICT, mq_attr* __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) ssize_t mq_timedreceive( mqd_t, char* __QCMP_RESTRICT, size_t, unsigned* __QCMP_RESTRICT, const timespec* __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) int mq_timedsend( mqd_t, const char*, size_t, unsigned, const timespec* );
    __QOR_INTERFACE( __CQOR ) int mq_unlink( const char* );

CThread
    __QOR_INTERFACE( __CQOR ) int   pthread_atfork( void (*)(void), void (*)(void), void(*)(void) );
    __QOR_INTERFACE( __CQOR ) int   pthread_cancel( ::pthread_t );
    //__QOR_INTERFACE( __CQOR ) void  pthread_cleanup_push( void (*)(void *), void * );
    //__QOR_INTERFACE( __CQOR ) void  pthread_cleanup_pop( int );
    __QOR_INTERFACE( __CQOR ) int   pthread_create( ::pthread_t* __QCMP_RESTRICT, const ::pthread_attr_t* __QCMP_RESTRICT, void *(*)(void *), void* __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) int   pthread_detach( ::pthread_t );
    __QOR_INTERFACE( __CQOR ) int   pthread_equal( ::pthread_t, ::pthread_t );
    __QOR_INTERFACE( __CQOR ) void  pthread_exit( void* );
    __QOR_INTERFACE( __CQOR ) int   pthread_getconcurrency( void );
    __QOR_INTERFACE( __CQOR ) int   pthread_getcpuclockid( ::pthread_t, ::clockid_t* );
    //__QOR_INTERFACE( __CQOR ) int   pthread_getschedparam( ::pthread_t, int* __QCMP_RESTRICT, sched_param* __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) void* pthread_getspecific( ::pthread_key_t );
    __QOR_INTERFACE( __CQOR ) int   pthread_join( ::pthread_t, void** );
    __QOR_INTERFACE( __CQOR ) int   pthread_key_create( ::pthread_key_t*, void (*)(void *) );
    __QOR_INTERFACE( __CQOR ) int   pthread_key_delete( ::pthread_key_t );
    __QOR_INTERFACE( __CQOR ) ::pthread_t pthread_self( void );
    __QOR_INTERFACE( __CQOR ) int   pthread_setcancelstate( int, int* );
    __QOR_INTERFACE( __CQOR ) int   pthread_setcanceltype( int, int* );
    __QOR_INTERFACE( __CQOR ) int   pthread_setconcurrency( int );
    __QOR_INTERFACE( __CQOR ) int   pthread_setschedparam( ::pthread_t, int, const ::sched_param* );
    __QOR_INTERFACE( __CQOR ) int   pthread_setschedprio( ::pthread_t, int );
    __QOR_INTERFACE( __CQOR ) int   pthread_setspecific( ::pthread_key_t, const void* );
    __QOR_INTERFACE( __CQOR ) void  pthread_testcancel( void );
	
CThreadAttribute
    __QOR_INTERFACE( __CQOR ) int   pthread_attr_destroy( ::pthread_attr_t* );
    __QOR_INTERFACE( __CQOR ) int   pthread_attr_getdetachstate( const ::pthread_attr_t*, int* );
    __QOR_INTERFACE( __CQOR ) int   pthread_attr_getguardsize( const ::pthread_attr_t* __QCMP_RESTRICT, size_t* __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) int   pthread_attr_getinheritsched( const ::pthread_attr_t* __QCMP_RESTRICT, int* __QCMP_RESTRICT );
    //__QOR_INTERFACE( __CQOR ) int   pthread_attr_getschedparam( const ::pthread_attr_t* __QCMP_RESTRICT, sched_param* __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) int   pthread_attr_getschedpolicy( const ::pthread_attr_t* __QCMP_RESTRICT, int* __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) int   pthread_attr_getscope( const ::pthread_attr_t* __QCMP_RESTRICT, int* __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) int   pthread_attr_getstack( const ::pthread_attr_t* __QCMP_RESTRICT, void** __QCMP_RESTRICT, size_t* __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) int   pthread_attr_getstackaddr( const ::pthread_attr_t* __QCMP_RESTRICT, void** __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) int   pthread_attr_getstacksize( const ::pthread_attr_t* __QCMP_RESTRICT, size_t* __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) int   pthread_attr_init( ::pthread_attr_t* );
    __QOR_INTERFACE( __CQOR ) int   pthread_attr_setdetachstate( ::pthread_attr_t*, int );
    __QOR_INTERFACE( __CQOR ) int   pthread_attr_setguardsize( ::pthread_attr_t*, size_t );
    __QOR_INTERFACE( __CQOR ) int   pthread_attr_setinheritsched( ::pthread_attr_t*, int );
    __QOR_INTERFACE( __CQOR ) int   pthread_attr_setschedparam( ::pthread_attr_t* __QCMP_RESTRICT, const ::sched_param* __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) int   pthread_attr_setschedpolicy( ::pthread_attr_t*, int );
    __QOR_INTERFACE( __CQOR ) int   pthread_attr_setscope( ::pthread_attr_t*, int );
    __QOR_INTERFACE( __CQOR ) int   pthread_attr_setstack( ::pthread_attr_t*, void*, size_t );
    __QOR_INTERFACE( __CQOR ) int   pthread_attr_setstackaddr( ::pthread_attr_t*, void* );
    __QOR_INTERFACE( __CQOR ) int   pthread_attr_setstacksize( ::pthread_attr_t*, size_t );
	
CBarrier
    __QOR_INTERFACE( __CQOR ) int   pthread_barrier_destroy( ::pthread_barrier_t* );
    __QOR_INTERFACE( __CQOR ) int   pthread_barrier_init( ::pthread_barrier_t* __QCMP_RESTRICT, const ::pthread_barrierattr_t* __QCMP_RESTRICT, unsigned );
    __QOR_INTERFACE( __CQOR ) int   pthread_barrier_wait( ::pthread_barrier_t* );
	
CBarrierAttribute
    __QOR_INTERFACE( __CQOR ) int   pthread_barrierattr_destroy( ::pthread_barrierattr_t* );
    __QOR_INTERFACE( __CQOR ) int   pthread_barrierattr_getpshared( const ::pthread_barrierattr_t* __QCMP_RESTRICT, int* __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) int   pthread_barrierattr_init( ::pthread_barrierattr_t* );
    __QOR_INTERFACE( __CQOR ) int   pthread_barrierattr_setpshared( ::pthread_barrierattr_t*, int );
	
CConditionVariable
    __QOR_INTERFACE( __CQOR ) int   pthread_cond_broadcast( ::pthread_cond_t* );
    __QOR_INTERFACE( __CQOR ) int   pthread_cond_destroy( ::pthread_cond_t* );
    __QOR_INTERFACE( __CQOR ) int   pthread_cond_init( ::pthread_cond_t* __QCMP_RESTRICT, const ::pthread_condattr_t* __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) int   pthread_cond_signal( ::pthread_cond_t* );
    __QOR_INTERFACE( __CQOR ) int   pthread_cond_timedwait( ::pthread_cond_t* __QCMP_RESTRICT, ::pthread_mutex_t* __QCMP_RESTRICT, const ::timespec* __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) int   pthread_cond_wait( ::pthread_cond_t* __QCMP_RESTRICT, ::pthread_mutex_t* __QCMP_RESTRICT );
	
CConditionVariableAttribute
    __QOR_INTERFACE( __CQOR ) int   pthread_condattr_destroy( ::pthread_condattr_t* );
    __QOR_INTERFACE( __CQOR ) int   pthread_condattr_getclock( const ::pthread_condattr_t* __QCMP_RESTRICT, ::clockid_t* __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) int   pthread_condattr_getpshared( const ::pthread_condattr_t* __QCMP_RESTRICT, int* __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) int   pthread_condattr_init( ::pthread_condattr_t* );
    __QOR_INTERFACE( __CQOR ) int   pthread_condattr_setclock( ::pthread_condattr_t*, ::clockid_t );
    __QOR_INTERFACE( __CQOR ) int   pthread_condattr_setpshared( ::pthread_condattr_t*, int );

CMutex	
	__QOR_INTERFACE( __CQOR ) int   pthread_mutex_consistent( ::pthread_mutex_t* );
    __QOR_INTERFACE( __CQOR ) int   pthread_mutex_destroy( ::pthread_mutex_t* );
    __QOR_INTERFACE( __CQOR ) int   pthread_mutex_getprioceiling( const ::pthread_mutex_t* __QCMP_RESTRICT, int* __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) int   pthread_mutex_init( ::pthread_mutex_t* __QCMP_RESTRICT, const ::pthread_mutexattr_t* __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) int   pthread_mutex_lock( ::pthread_mutex_t* );
    __QOR_INTERFACE( __CQOR ) int   pthread_mutex_setprioceiling( ::pthread_mutex_t* __QCMP_RESTRICT, int, int* __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) int   pthread_mutex_timedlock( ::pthread_mutex_t*, const ::timespec* );
    __QOR_INTERFACE( __CQOR ) int   pthread_mutex_trylock( ::pthread_mutex_t* );
    __QOR_INTERFACE( __CQOR ) int   pthread_mutex_unlock( ::pthread_mutex_t* );
	
CMutexAttribute
    __QOR_INTERFACE( __CQOR ) int   pthread_mutexattr_destroy( ::pthread_mutexattr_t* );
    __QOR_INTERFACE( __CQOR ) int   pthread_mutexattr_getprioceiling( const ::pthread_mutexattr_t* __QCMP_RESTRICT, int* __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) int   pthread_mutexattr_getprotocol( const ::pthread_mutexattr_t* __QCMP_RESTRICT, int* __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) int   pthread_mutexattr_getpshared( const ::pthread_mutexattr_t* __QCMP_RESTRICT, int* __QCMP_RESTRICT );
	__QOR_INTERFACE( __CQOR ) int   pthread_mutexattr_getrobust( const ::pthread_mutexattr_t* __QCMP_RESTRICT, int* __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) int   pthread_mutexattr_gettype( const ::pthread_mutexattr_t* __QCMP_RESTRICT, int* __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) int   pthread_mutexattr_init( ::pthread_mutexattr_t* );
    __QOR_INTERFACE( __CQOR ) int   pthread_mutexattr_setprioceiling( ::pthread_mutexattr_t*, int );
    __QOR_INTERFACE( __CQOR ) int   pthread_mutexattr_setprotocol( ::pthread_mutexattr_t*, int );
    __QOR_INTERFACE( __CQOR ) int   pthread_mutexattr_setpshared( ::pthread_mutexattr_t*, int );
	__QOR_INTERFACE( __CQOR ) int   pthread_mutexattr_setrobust( ::pthread_mutexattr_t*, int );
    __QOR_INTERFACE( __CQOR ) int   pthread_mutexattr_settype( ::pthread_mutexattr_t*, int );

COnce	
    __QOR_INTERFACE( __CQOR ) int   pthread_once( ::pthread_once_t*, void (*)(void) );
	
CReadWriteLock
    __QOR_INTERFACE( __CQOR ) int   pthread_rwlock_destroy( ::pthread_rwlock_t* );
    __QOR_INTERFACE( __CQOR ) int   pthread_rwlock_init( ::pthread_rwlock_t* __QCMP_RESTRICT, const ::pthread_rwlockattr_t* __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) int   pthread_rwlock_rdlock( ::pthread_rwlock_t* );
    __QOR_INTERFACE( __CQOR ) int   pthread_rwlock_timedrdlock( ::pthread_rwlock_t* __QCMP_RESTRICT, const ::timespec* __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) int   pthread_rwlock_timedwrlock( ::pthread_rwlock_t* __QCMP_RESTRICT, const ::timespec* __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) int   pthread_rwlock_tryrdlock( ::pthread_rwlock_t* );
    __QOR_INTERFACE( __CQOR ) int   pthread_rwlock_trywrlock( ::pthread_rwlock_t* );
    __QOR_INTERFACE( __CQOR ) int   pthread_rwlock_unlock( ::pthread_rwlock_t* );
    __QOR_INTERFACE( __CQOR ) int   pthread_rwlock_wrlock( ::pthread_rwlock_t* );

CReadWriteLockAttribute
    __QOR_INTERFACE( __CQOR ) int   pthread_rwlockattr_destroy( ::pthread_rwlockattr_t* );
    __QOR_INTERFACE( __CQOR ) int   pthread_rwlockattr_getpshared( const ::pthread_rwlockattr_t* __QCMP_RESTRICT, int* __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) int   pthread_rwlockattr_init( ::pthread_rwlockattr_t* );
    __QOR_INTERFACE( __CQOR ) int   pthread_rwlockattr_setpshared( ::pthread_rwlockattr_t*, int );

CSpinLock	
    __QOR_INTERFACE( __CQOR ) int   pthread_spin_destroy( ::pthread_spinlock_t* );
    __QOR_INTERFACE( __CQOR ) int   pthread_spin_init( ::pthread_spinlock_t*, int );
    __QOR_INTERFACE( __CQOR ) int   pthread_spin_lock( ::pthread_spinlock_t* );
    __QOR_INTERFACE( __CQOR ) int   pthread_spin_trylock( ::pthread_spinlock_t* );
    __QOR_INTERFACE( __CQOR ) int   pthread_spin_unlock( ::pthread_spinlock_t* );

CUser
    __QOR_INTERFACE( __CQOR ) passwd* getpwnam( const char* );
    __QOR_INTERFACE( __CQOR ) passwd* getpwuid( uid_t );
    __QOR_INTERFACE( __CQOR ) int getpwnam_r( const char*, passwd*, char *, size_t, passwd** );
    __QOR_INTERFACE( __CQOR ) int getpwuid_r( uid_t, passwd*, char*, size_t, passwd** );
    __QOR_INTERFACE( __CQOR ) void endpwent( void );
    __QOR_INTERFACE( __CQOR ) passwd* getpwent( void );
    __QOR_INTERFACE( __CQOR ) void setpwent( void );

CRegularExpressions
	__QOR_INTERFACE( __CQOR ) int regcomp( regex_t* __QCMP_RESTRICT, const char* __QCMP_RESTRICT, int );
	__QOR_INTERFACE( __CQOR ) size_t regerror( int, const regex_t* __QCMP_RESTRICT, char* __QCMP_RESTRICT, size_t );
	__QOR_INTERFACE( __CQOR ) int regexec( const regex_t* __QCMP_RESTRICT, const char* __QCMP_RESTRICT, size_t, regmatch_t [/*__QCMP_RESTRICT*/], int );
	__QOR_INTERFACE( __CQOR ) void regfree( regex_t* );

CSheduler
	__QOR_INTERFACE( __CQOR ) int sched_get_priority_max( int );
	__QOR_INTERFACE( __CQOR ) int sched_get_priority_min( int );
	__QOR_INTERFACE( __CQOR ) int sched_getparam( ::pid_t, ::sched_param* );
	__QOR_INTERFACE( __CQOR ) int sched_getscheduler( ::pid_t );
	__QOR_INTERFACE( __CQOR ) int sched_rr_get_interval( ::pid_t, ::timespec* );
	__QOR_INTERFACE( __CQOR ) int sched_setparam( ::pid_t, const ::sched_param* );
	__QOR_INTERFACE( __CQOR ) int sched_setscheduler( ::pid_t, int, const ::sched_param* );
	__QOR_INTERFACE( __CQOR ) int sched_yield( void );

CSearch
	__QOR_INTERFACE( __CQOR ) int hcreate( size_t );
	__QOR_INTERFACE( __CQOR ) void hdestroy( void );
	__QOR_INTERFACE( __CQOR ) ENTRY* hsearch( ENTRY, ACTION );
	__QOR_INTERFACE( __CQOR ) void insque( void*, void* );
	__QOR_INTERFACE( __CQOR ) void* lfind( const void*, const void*, size_t*, size_t, int (*)( const void*, const void* ) );
	__QOR_INTERFACE( __CQOR ) void* lsearch( const void*, void*, size_t*, size_t, int (*)( const void*, const void* ) );
	__QOR_INTERFACE( __CQOR ) void remque( void* );
	__QOR_INTERFACE( __CQOR ) void* tdelete( const void* __QCMP_RESTRICT, void** __QCMP_RESTRICT, int(*)( const void*, const void* ) );
	__QOR_INTERFACE( __CQOR ) void* tfind( const void*, void* const* , int(*)( const void*, const void* ) );
	__QOR_INTERFACE( __CQOR ) void* tsearch( const void*, void**, int(*)( const void*, const void* ) );
	__QOR_INTERFACE( __CQOR ) void twalk( const void*, void (*)( const void*, VISIT, int ) );

CSemaphore
    __QOR_INTERFACE( __CQOR ) int sem_close( ::sem_t* pSem );
    __QOR_INTERFACE( __CQOR ) int sem_destroy( ::sem_t* pSem );
    __QOR_INTERFACE( __CQOR ) int sem_getvalue( ::sem_t* __QCMP_RESTRICT pSem, int* __QCMP_RESTRICT piValue );
    __QOR_INTERFACE( __CQOR ) int sem_init( ::sem_t* pSem, int iPShared, unsigned uValue );
    __QOR_INTERFACE( __CQOR ) ::sem_t* sem_open( const char* szName, int iOFlags, ... );
    __QOR_INTERFACE( __CQOR ) int sem_post( ::sem_t* pSem );
    __QOR_INTERFACE( __CQOR ) int sem_timedwait( ::sem_t* __QCMP_RESTRICT pSem, const ::timespec* __QCMP_RESTRICT pAbs_Timeout );
    __QOR_INTERFACE( __CQOR ) int sem_trywait( ::sem_t* pSem );
    __QOR_INTERFACE( __CQOR ) int sem_unlink( const char* szName );
    __QOR_INTERFACE( __CQOR ) int sem_wait( ::sem_t* pSem );

CJump
    __QOR_INTERFACE( __CQOR ) int setjmp( jmp_buf env );
    __QOR_INTERFACE( __CQOR ) int sigsetjmp( sigjmp_buf, int );
	__QOR_INTERFACE( __CQOR ) int _setjmp( jmp_buf env );
    __QOR_INTERFACE( __CQOR ) __QCMP_NORETURN void longjmp( jmp_buf env, int val );
    __QOR_INTERFACE( __CQOR ) __QCMP_NORETURN void siglongjmp( sigjmp_buf, int );
	__QOR_INTERFACE( __CQOR ) __QCMP_NORETURN void _longjmp( jmp_buf env, int val );
	__QOR_INTERFACE( __CQOR ) int _setjmp3( jmp_buf env, int count );

CSignaller
	__QOR_INTERFACE( __CQOR ) void signal( int sig, void (*func)( int ) );
    __QOR_INTERFACE( __CQOR ) int raise( int sig );
	__QOR_INTERFACE( __CQOR ) int kill( pid_t, int );
	__QOR_INTERFACE( __CQOR ) int killpg( pid_t, int );
	__QOR_INTERFACE( __CQOR ) void psiginfo( const siginfo_t*, const char * );
	__QOR_INTERFACE( __CQOR ) void psignal( int, const char * );
	__QOR_INTERFACE( __CQOR ) int pthread_kill( pthread_t, int );
	__QOR_INTERFACE( __CQOR ) int pthread_sigmask( int, const sigset_t* __QCMP_RESTRICT, sigset_t* __QCMP_RESTRICT );
	__QOR_INTERFACE( __CQOR ) int sigaction( int, const nsPlatform::sigaction* __QCMP_RESTRICT, nsPlatform::sigaction* __QCMP_RESTRICT );
	__QOR_INTERFACE( __CQOR ) int sigaddset( sigset_t*, int );
	__QOR_INTERFACE( __CQOR ) int sigaltstack( const stack_t* __QCMP_RESTRICT, stack_t* __QCMP_RESTRICT );
	__QOR_INTERFACE( __CQOR ) int sigdelset( sigset_t*, int );
	__QOR_INTERFACE( __CQOR ) int sigemptyset( sigset_t* );
	__QOR_INTERFACE( __CQOR ) int sigfillset( sigset_t* );
	__QOR_INTERFACE( __CQOR ) int sighold( int );
	__QOR_INTERFACE( __CQOR ) int sigignore( int );
	__QOR_INTERFACE( __CQOR ) int siginterrupt( int, int );
	__QOR_INTERFACE( __CQOR ) int sigismember( const sigset_t*, int );
	__QOR_INTERFACE( __CQOR ) int sigpause( int );
	__QOR_INTERFACE( __CQOR ) int sigpending( sigset_t* );
	__QOR_INTERFACE( __CQOR ) int sigprocmask( int, const sigset_t* __QCMP_RESTRICT, sigset_t* __QCMP_RESTRICT );
	__QOR_INTERFACE( __CQOR ) int sigqueue( pid_t, int, const sigval );
	__QOR_INTERFACE( __CQOR ) int sigrelse( int );
	__QOR_INTERFACE( __CQOR ) void sigset( nsPlatform::psig_func, int );
	__QOR_INTERFACE( __CQOR ) int sigsuspend( const sigset_t* __QCMP_RESTRICT );
	__QOR_INTERFACE( __CQOR ) int sigtimedwait( const sigset_t* __QCMP_RESTRICT, siginfo_t* __QCMP_RESTRICT, const timespec* __QCMP_RESTRICT );
	__QOR_INTERFACE( __CQOR ) int sigwait( const sigset_t* __QCMP_RESTRICT, int* __QCMP_RESTRICT );
	__QOR_INTERFACE( __CQOR ) int sigwaitinfo( const sigset_t* __QCMP_RESTRICT, siginfo_t* __QCMP_RESTRICT );

CString
CWideString

CStringCompare

CSysLog
	__QOR_INTERFACE( __CQOR ) void  closelog( void );
	__QOR_INTERFACE( __CQOR ) void  openlog( const char*, int, int );
	__QOR_INTERFACE( __CQOR ) int   setlogmask( int );
	__QOR_INTERFACE( __CQOR ) void  syslog( int, const char *, ... );

CTrace

CTraceAttribute

CTraceEvent

CWordExp
	__QOR_INTERFACE( __CQOR ) int  wordexp( const char* __QCMP_RESTRICT words, wordexp_t* __QCMP_RESTRICT pwordexp, int flags );
	__QOR_INTERFACE( __CQOR ) void wordfree( wordexp_t* pwordexp );
