//PosumDescriptor.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "PosumQOR.h"
#include "SystemQOR.h"
#include "PosumQOR/Descriptor.h"

//--------------------------------------------------------------------------------
namespace nsPosum
{
	__QOR_IMPLEMENT_OCLASS_LUID( CDescriptor );

	CDescriptor::CDescriptor()
	{
	}

	CDescriptor::CDescriptor( int nFD )
	{
		m_iDescriptor = nFD;
	}

	CDescriptor::~CDescriptor()
	{
	}

	CDescriptor& CDescriptor::operator = ( const CDescriptor& src )
	{
		m_iDescriptor = src.m_iDescriptor;
		return *this;
	}

	CDescriptor::CDescriptor( int nFD, CDescriptor* pImpl ) : m_iDescriptor( nFD ), m_pDescriptorImpl( pImpl )
	{
	}



	CIODescriptor::CIODescriptor()
	{
	}

	CIODescriptor::CIODescriptor( int nFD ) : CDescriptor( nFD )
	{
	}

	CIODescriptor::~CIODescriptor()
	{
	}

	CIODescriptor& CIODescriptor::operator = ( const CIODescriptor& src )
	{
		return *this;
	}


	int CIODescriptor::Close( void )
	{
		return 0;
	}
		
		//dup
		//dup2
	int CIODescriptor::FSync( void )
	{
		return 0;
	}

	int CIODescriptor::IsATTY( void )
	{
		return 0;
	}

	ssize_t CIODescriptor::Read( void* pBuffer, size_t nBytes )
	{
		return 0;
	}

	ssize_t CIODescriptor::Write( const void* pBuffer, size_t nBytes )
	{
		return 0;
	}

//protected:

	CIODescriptor::CIODescriptor( int nFD, CIODescriptor* pImpl )
	{
	}

//private:

	CIODescriptor* CIODescriptor::PImpl( void )
	{
		return dynamic_cast< CIODescriptor* >( m_pDescriptorImpl );
	}

}//nsPosum
