//signal.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Generic signal implementation

#include "CQOR/CQORPolicy.h"
#include <signal.h>
#include <errno.h>
#include "SystemQOR.h"
#include QOR_SYS_PLATFORMHEADER(signal.h)
#include "CodeQOR/Tracing/FunctionContextBase.h"
#include "CodeQOR/ErrorSystem/Error.h"
#include "CQOR.h"

//--------------------------------------------------------------------------------
namespace
{
	nsPlatform::Csignal _signal;
}//anonymous


__QCMP_STARTLINKAGE_C

//--------------------------------------------------------------------------------
#ifndef OS_EXPORTS_SIGNAL_SIGNAL
__QOR_INTERFACE( __CQOR ) void signal( int sig, void (*func)(int) )
{
    __QCS_FCONTEXT( "signal" );

    _signal.signal( sig, func );
}
#endif

//--------------------------------------------------------------------------------
#ifndef OS_EXPORTS_SIGNAL_RAISE
__QOR_INTERFACE( __CQOR ) int raise( int sig )
{
    __QCS_FCONTEXT( "raise" );

    return _signal.raise( sig );
}
#endif

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int kill( pid_t pid, int sig )
{
    __QCS_FCONTEXT( "kill" );

	int iResult = -1;
    __QCS_PROTECT
    {
		iResult = _signal.kill( pid, sig );
    }__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int killpg( pid_t pid , int sig )
{
    __QCS_FCONTEXT( "killpg" );

	int iResult = -1;
    __QCS_PROTECT
    {
		iResult = _signal.killpg( pid, sig );
    }__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) void psiginfo( const siginfo_t* pinfo, const char* message )
{
    __QCS_FCONTEXT( "psiginfo" );

    __QCS_PROTECT
    {
		_signal.psiginfo( pinfo, message );
    }__QCS_ENDPROTECT
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) void psignal( int signum, const char* message )
{
    __QCS_FCONTEXT( "psignal" );

    __QCS_PROTECT
    {
		_signal.psignal( signum, message );
    }__QCS_ENDPROTECT
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int pthread_kill( pthread_t thread, int sig )
{
    __QCS_FCONTEXT( "pthread_kill" );

	int iResult = -1;
    __QCS_PROTECT
    {
		iResult = _signal.pthread_kill( thread, sig );
    }__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int pthread_sigmask( int how, const sigset_t* __QCMP_RESTRICT set, sigset_t* __QCMP_RESTRICT oset )
{
    __QCS_FCONTEXT( "pthread_sigmask" );

	int iResult = -1;
    __QCS_PROTECT
    {
		iResult = _signal.pthread_sigmask( how, set, oset );
    }__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int sigaction( int sig, const nsPlatform::sigaction* __QCMP_RESTRICT act, nsPlatform::sigaction* __QCMP_RESTRICT oact )
{
    __QCS_FCONTEXT( "sigaction" );

	int iResult = -1;
    __QCS_PROTECT
    {
		iResult = _signal.sigaction_( sig, act, oact );
    }__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int sigaddset( sigset_t* set, int signo )
{
    __QCS_FCONTEXT( "sigaddset" );

	int iResult = -1;
    __QCS_PROTECT
    {
		iResult = _signal.sigaddset( set, signo );
    }__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int sigaltstack( const stack_t* __QCMP_RESTRICT ss, stack_t* __QCMP_RESTRICT oss )
{
    __QCS_FCONTEXT( "sigaltstack" );

	int iResult = -1;
    __QCS_PROTECT
    {
		iResult = _signal.sigaltstack( ss, oss );
    }__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int sigdelset( sigset_t* set, int signo )
{
    __QCS_FCONTEXT( "sigdelset" );

	int iResult = -1;
    __QCS_PROTECT
    {
		iResult = _signal.sigdelset( set, signo );
    }__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int sigemptyset( sigset_t* set )
{
    __QCS_FCONTEXT( "sigemptyset" );

	int iResult = -1;
    __QCS_PROTECT
    {
		iResult = _signal.sigemptyset( set );
    }__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int sigfillset( sigset_t* set )
{
    __QCS_FCONTEXT( "sigfillset" );

	int iResult = -1;
    __QCS_PROTECT
    {
		iResult = _signal.sigfillset( set );
    }__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int sighold( int sig )
{
    __QCS_FCONTEXT( "sighold" );

	int iResult = -1;
    __QCS_PROTECT
    {
		iResult = _signal.sighold( sig );
    }__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int sigignore( int sig )
{
    __QCS_FCONTEXT( "sigignore" );

	int iResult = -1;
    __QCS_PROTECT
    {
		iResult = _signal.sigignore( sig );
    }__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int siginterrupt( int sig, int flag )
{
    __QCS_FCONTEXT( "siginterrupt" );

	int iResult = -1;
    __QCS_PROTECT
    {
		iResult = _signal.siginterrupt( sig, flag );
    }__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int sigismember( const sigset_t* set, int signo )
{
    __QCS_FCONTEXT( "sigismember" );

	int iResult = -1;
    __QCS_PROTECT
    {
		iResult = _signal.sigismember( set, signo );
    }__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int sigpause( int sig )
{
    __QCS_FCONTEXT( "sigpause" );

	int iResult = -1;
    __QCS_PROTECT
    {
		iResult = _signal.sigpause( sig );
    }__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int sigpending( sigset_t* set )
{
    __QCS_FCONTEXT( "sigpending" );

	int iResult = -1;
    __QCS_PROTECT
    {
		iResult = _signal.sigpending( set );
    }__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int sigprocmask( int how, const sigset_t* __QCMP_RESTRICT set, sigset_t* __QCMP_RESTRICT oset )
{
    __QCS_FCONTEXT( "sigprocmask" );

	int iResult = -1;
    __QCS_PROTECT
    {
		iResult = _signal.sigprocmask( how, set, oset );
    }__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int sigqueue( pid_t pid, int signo, const sigval value )
{
    __QCS_FCONTEXT( "sigqueue" );

	int iResult = -1;
    __QCS_PROTECT
    {
		iResult = _signal.sigqueue( pid, signo, value );
    }__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int sigrelse( int sig )
{
    __QCS_FCONTEXT( "sigrelse" );

	int iResult = -1;
    __QCS_PROTECT
    {
		iResult = _signal.sigrelse( sig );
    }__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) void sigset( nsPlatform::psig_func disp, int sig )//( *sigset(int sig, void (*disp)( int ) ) )( int )
{
    __QCS_FCONTEXT( "sigset" );

    __QCS_PROTECT
    {
		_signal.sigset( sig, disp );
    }__QCS_ENDPROTECT
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int sigsuspend( const sigset_t* __QCMP_RESTRICT set )
{
    __QCS_FCONTEXT( "sigsuspend" );

	int iResult = -1;
    __QCS_PROTECT
    {
		iResult = _signal.sigsuspend( set );
    }__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int sigtimedwait( const sigset_t* __QCMP_RESTRICT set, siginfo_t* __QCMP_RESTRICT info, const timespec* __QCMP_RESTRICT timeout )
{
    __QCS_FCONTEXT( "sigtimedwait" );

	int iResult = -1;
    __QCS_PROTECT
    {
		iResult = _signal.sigtimedwait( set, info, timeout );
    }__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int sigwait( const sigset_t* __QCMP_RESTRICT set, int* __QCMP_RESTRICT sig )
{
    __QCS_FCONTEXT( "sigwait" );

	int iResult = -1;
    __QCS_PROTECT
    {
		iResult = _signal.sigwait( set, sig );
    }__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int sigwaitinfo( const sigset_t* __QCMP_RESTRICT set, siginfo_t* __QCMP_RESTRICT info )
{
    __QCS_FCONTEXT( "sigwaitinfo" );

	int iResult = -1;
    __QCS_PROTECT
    {
		iResult = _signal.sigwaitinfo( set, info );
    }__QCS_ENDPROTECT
	return iResult;
}

__QCMP_ENDLINKAGE_C

