//fcntl.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Generic fcntl implementation

#include "CQOR/CQORPolicy.h"
#include <fcntl.h>
#include <errno.h>
#include <stdlib.h>
#include <stdarg.h>
#include "SystemQOR.h"
#include QOR_SYS_PLATFORMHEADER(fcntl.h)
#include "CodeQOR/Tracing/FunctionContextBase.h"
#include "CodeQOR/ErrorSystem/Error.h"
#include "CQOR.h"

//--------------------------------------------------------------------------------
namespace
{
	nsPlatform::Cfcntl _fcntl;
}//anonymous

__QCMP_STARTLINKAGE_C

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int creat( const char* path, mode_t mode )
{
    __QCS_FCONTEXT( "creat" );
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _fcntl.creat( path, mode );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int fcntl( int fildes, int cmd, ... )
{
    __QCS_FCONTEXT( "fcntl" );
    int iResult = 0;
    __QCS_PROTECT
    {
        va_list args;
        va_start( args, cmd );		
        iResult = _fcntl.fcntl( fildes, cmd, args );
        va_end( args );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int open( const char* path, int oflag, ... )
{
    __QCS_FCONTEXT( "open" );
    int iResult = 0;
    __QCS_PROTECT
    {
        va_list args;
        va_start( args, oflag );
        iResult = _fcntl.open( path, oflag, args );
        va_end( args );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int openat( int fd, const char* path, int oflag, ... )
{
	__QCS_FCONTEXT( "openat" );
	int iResult = 0;
	__QCS_PROTECT
	{
		va_list args;
		va_start( args, oflag );
		iResult = _fcntl.openat( fd, path, oflag, args );
		va_end( args );
	}__QCS_PROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int posix_fadvise( int fd, off_t offset, off_t len, int advice )
{
    __QCS_FCONTEXT( "posix_fadvise" );
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _fcntl.posix_fadvise( fd, offset, len, advice );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int posix_fallocate( int fd, off_t offset, off_t len )
{
    __QCS_FCONTEXT( "posix_fallocate" );
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _fcntl.posix_fallocate( fd, offset, len );
    }__QCS_ENDPROTECT
    return iResult;
}

__QCMP_ENDLINKAGE_C

