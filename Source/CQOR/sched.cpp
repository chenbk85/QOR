//sched.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CQOR/CQORPolicy.h"
#include <sched.h>
#include <errno.h>
#include "SystemQOR.h"
#include QOR_SYS_PLATFORMHEADER(sched.h)
#include "CodeQOR/Tracing/FunctionContextBase.h"
#include "CodeQOR/ErrorSystem/Error.h"
#include "CQOR.h"

//--------------------------------------------------------------------------------
namespace
{
	nsPlatform::Csched _sched;
}//anonymous

__QCMP_STARTLINKAGE_C

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int sched_get_priority_max( int iPolicy )
{
    __QCS_FCONTEXT( "sched_get_priority_max" );
	int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _sched.sched_get_priority_max( iPolicy );
    }__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int sched_get_priority_min( int iPolicy )
{
    __QCS_FCONTEXT( "sched_get_priority_min" );
	int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _sched.sched_get_priority_min( iPolicy );
    }__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int sched_getparam( pid_t pid, sched_param* pParam )
{
    __QCS_FCONTEXT( "sched_getparam" );
	int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _sched.sched_getparam( pid, pParam );
    }__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int sched_getscheduler( pid_t pid )
{
    __QCS_FCONTEXT( "sched_getscheduler" );
	int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _sched.sched_getscheduler( pid );
    }__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int sched_rr_get_interval( pid_t pid, timespec* interval )
{
    __QCS_FCONTEXT( "sched_rr_get_interval" );
	int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _sched.sched_rr_get_interval( pid, interval );
    }__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int sched_setparam( pid_t pid, const sched_param* pParam )
{
    __QCS_FCONTEXT( "sched_setparam" );
	int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _sched.sched_setparam( pid, pParam );
    }__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int sched_setscheduler( pid_t pid, int iPolicy, const sched_param* pParam )
{
    __QCS_FCONTEXT( "sched_setscheduler" );
	int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _sched.sched_setscheduler( pid, iPolicy, pParam );
    }__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int sched_yield( void )
{
    __QCS_FCONTEXT( "sched_yield" );
	int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _sched.sched_yield();
    }__QCS_ENDPROTECT
	return iResult;
}

__QCMP_ENDLINKAGE_C


