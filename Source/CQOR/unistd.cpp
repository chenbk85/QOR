//unistd.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Generic unistd implementation
//An exported standard C interface which forwards calls to the matching C++ implementaion for the platform

#include "CQOR/CQORPolicy.h"
#include <unistd.h>
#include <errno.h>
#include <stdarg.h>
#include "SystemQOR.h"
#include QOR_SYS_PLATFORMHEADER(unistd.h)
#include "CodeQOR/Tracing/FunctionContextBase.h"
#include "CodeQOR/ErrorSystem/Error.h"
#include "CQOR.h"

typedef nsPlatform::gid_t gid_t;

//--------------------------------------------------------------------------------
namespace
{
	nsPlatform::Cunistd _unistd;
	char* p_optarg = "";
	int g_opterr = 0;
	int g_optind = 0;
	int g_optopt = 0;
}//anonymous

__QCMP_STARTLINKAGE_C

//__QOR_INTERFACE( __CQOR ) char*		optarg = "";
//__QOR_INTERFACE( __CQOR ) int		opterr = 0;
//__QOR_INTERFACE( __CQOR ) int		optind = 0;
//__QOR_INTERFACE( __CQOR ) int		optopt = 0;

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) char*& f_optarg()
{
	return p_optarg;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int& f_opterr()
{
	return g_opterr;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int& f_optind()
{
	return g_optind;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int& f_optopt()
{
	return g_optopt;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int access( const char* path, int amode )
{
    __QCS_FCONTEXT( "access" );

    int iResult = 0;
    __QCS_PROTECT
    {
        _unistd.access( path, amode );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) unsigned alarm( unsigned seconds )
{
    __QCS_FCONTEXT( "alarm" );

    unsigned Result = 0;
    __QCS_PROTECT
    {
        Result = _unistd.alarm( seconds );
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int chdir( const char* path )
{
    __QCS_FCONTEXT( "chdir" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _unistd.chdir( path );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int chown( const char* path, uid_t owner, gid_t group )
{
    __QCS_FCONTEXT( "chown" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _unistd.chown( path, owner, group );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int close( int fildes )
{
    __QCS_FCONTEXT( "close" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _unistd.close( fildes );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) size_t confstr( int name, char* buf, size_t len )
{
    __QCS_FCONTEXT( "confstr" );

    size_t Result = 0;
    __QCS_PROTECT
    {
        Result = _unistd.confstr( name, buf, len );
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
//[XSI]
__QOR_INTERFACE( __CQOR ) char* crypt( const char* key, const char* salt )
{
    __QCS_FCONTEXT( "crypt" );

    char* pResult = 0;
    __QCS_PROTECT
    {
        pResult = _unistd.crypt( key, salt );
    }__QCS_ENDPROTECT
    return pResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) char* ctermid( char* s )
{
    __QCS_FCONTEXT( "ctermid" );

    char* pResult = 0;
    __QCS_PROTECT
    {
        pResult = _unistd.ctermid( s );
    }__QCS_ENDPROTECT
    return pResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int dup( int fildes )
{
    __QCS_FCONTEXT( "dup" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _unistd.dup( fildes );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int dup2( int fildes, int fildes2 )
{
    __QCS_FCONTEXT( "dup2" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _unistd.dup2( fildes, fildes2 );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
//[XSI]
__QOR_INTERFACE( __CQOR ) void encrypt( char block[64], int edflag )
{
    __QCS_FCONTEXT( "encrypt" );

    __QCS_PROTECT
    {
        _unistd.encrypt( block, edflag );
    }__QCS_ENDPROTECT
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int execl( const char* path, const char* arg0, ... )
{
    __QCS_FCONTEXT( "execl" );

    int iResult = 0;
    __QCS_PROTECT
    {
        va_list args;
        va_start( args, arg0 );
        iResult = _unistd.execl( path, arg0, args );
        va_end( args );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int execle( const char* path, const char* arg0, ... )
{
    __QCS_FCONTEXT( "execle" );

    int iResult = 0;
    __QCS_PROTECT
    {
        va_list args;
        va_start( args, arg0 );
        iResult = _unistd.execle( path, arg0, args );
        va_end( args );
    }__QCS_ENDPROTECT
    return iResult;

}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int execlp( const char* file, const char* arg0, ... )
{
    __QCS_FCONTEXT( "execlp" );

    int iResult = 0;
    __QCS_PROTECT
    {
        va_list args;
        va_start( args, arg0 );
        iResult = _unistd.execlp( file, arg0, args );
        va_end( args );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int execv( const char* path, char* const argv[] )
{
    __QCS_FCONTEXT( "execv" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _unistd.execv( path, argv );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int execve( const char* path, char* const argv[], char* const envp[] )
{
    __QCS_FCONTEXT( "execve" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _unistd.execve( path, argv, envp );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int execvp( const char* file, char* const argv[] )
{
    __QCS_FCONTEXT( "execvp" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _unistd.execvp( file, argv );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) void _exit( int status )
{
    __QCS_FCONTEXT( "_exit" );

    __QCS_PROTECT
    {
        _unistd._exit( status );
    }__QCS_ENDPROTECT
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int fchown( int fildes, uid_t owner, gid_t group )
{
    __QCS_FCONTEXT( "fchown" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _unistd.fchown( fildes, owner, group );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
//[XSI]
__QOR_INTERFACE( __CQOR ) int fchdir( int fildes )
{
    __QCS_FCONTEXT( "fchdir" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _unistd.fchdir( fildes );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
//[SIO]
__QOR_INTERFACE( __CQOR ) int fdatasync( int fildes )
{
    __QCS_FCONTEXT( "fdatasync" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _unistd.fdatasync( fildes );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) pid_t fork( void )
{
    __QCS_FCONTEXT( "fork" );

    pid_t Result = 0;
    __QCS_PROTECT
    {
        Result = _unistd.fork();
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) long fpathconf( int fildes, int name )
{
    __QCS_FCONTEXT( "fpathconf" );

    long lResult = 0;
    __QCS_PROTECT
    {
        lResult = _unistd.fpathconf( fildes, name );
    }__QCS_ENDPROTECT
    return lResult;
}

//--------------------------------------------------------------------------------
//[FSC]
__QOR_INTERFACE( __CQOR ) int fsync( int fildes )
{
    __QCS_FCONTEXT( "fsync" );

    int iResult = 0;
    __QCS_PROTECT
    {
        _unistd.fsync( fildes );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int ftruncate( int fildes, off_t length )
{
    __QCS_FCONTEXT( "ftruncate" );

    int iResult = 0;
    __QCS_PROTECT
    {
        _unistd.ftruncate( fildes, length );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) char* getcwd( char* buf, size_t size )
{
    __QCS_FCONTEXT( "getcwd" );

    char* pResult = 0;
    __QCS_PROTECT
    {
        pResult = _unistd.getcwd( buf, size );
    }__QCS_ENDPROTECT
    return pResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) gid_t getegid( void )
{
    __QCS_FCONTEXT( "getegid" );

    gid_t Result = 0;
    __QCS_PROTECT
    {
        Result = _unistd.getegid();
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) uid_t geteuid( void )
{
    __QCS_FCONTEXT( "geteuid" );

    uid_t Result = 0;
    __QCS_PROTECT
    {
        Result = _unistd.geteuid();
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) gid_t getgid( void )
{
    __QCS_FCONTEXT( "getgid" );

    gid_t Result = 0;
    __QCS_PROTECT
    {
        Result = _unistd.getgid();
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int getgroups( int gidsetsize, gid_t grouplist[] )
{
    __QCS_FCONTEXT( "getgroups" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _unistd.getgroups( gidsetsize, grouplist );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
//[XSI]
__QOR_INTERFACE( __CQOR ) long gethostid( void )
{
    __QCS_FCONTEXT( "gethostid" );

    long lResult = 0;
    __QCS_PROTECT
    {
        lResult = _unistd.gethostid();
    }__QCS_ENDPROTECT
    return lResult;
}

//--------------------------------------------------------------------------------
#ifndef OS_EXPORTS_UNISTD_GETHOSTNAME
__QOR_INTERFACE( __CQOR ) int gethostname( char* name, size_t namelen )
{
    __QCS_FCONTEXT( "gethostname" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _unistd.gethostname( name, namelen );
    }__QCS_ENDPROTECT
    return iResult;
}
#endif//OS_EXPORTS_UNISTD_GETHOSTNAME

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) char* getlogin( void )
{
    __QCS_FCONTEXT( "getlogin" );

    char* pResult = 0;
    __QCS_PROTECT
    {
        pResult = _unistd.getlogin();
    }__QCS_ENDPROTECT
    return pResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int getlogin_r( char* name, size_t namesize )
{
    __QCS_FCONTEXT( "getlogin_r" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _unistd.getlogin_r( name, namesize );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int getopt( int argc, char* const argv[], const char* optstring )
{
    __QCS_FCONTEXT( "getopt" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _unistd.getopt( argc, argv, optstring );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
//[XSI]
__QOR_INTERFACE( __CQOR ) pid_t getpgid( pid_t pid )
{
    __QCS_FCONTEXT( "getpgid" );

    pid_t Result = 0;
    __QCS_PROTECT
    {
        Result = _unistd.getpgid( pid );
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) pid_t getpgrp( void )
{
    __QCS_FCONTEXT( "getpgrp" );

    pid_t Result = 0;
    __QCS_PROTECT
    {
        Result = _unistd.getpgrp();
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) pid_t getpid( void )
{
    __QCS_FCONTEXT( "getpid" );

    pid_t Result = 0;
    __QCS_PROTECT
    {
        Result = _unistd.getpid();
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) pid_t getppid( void )
{
    __QCS_FCONTEXT( "getppid" );

    pid_t Result = 0;
    __QCS_PROTECT
    {
        Result = _unistd.getppid();
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
//[XSI]
__QOR_INTERFACE( __CQOR ) pid_t getsid( pid_t pid )
{
    __QCS_FCONTEXT( "getsid" );

    pid_t Result = 0;
    __QCS_PROTECT
    {
        Result = _unistd.getsid( pid );
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) uid_t getuid( void )
{
    __QCS_FCONTEXT( "getuid" );

    uid_t Result = 0;
    __QCS_PROTECT
    {
        Result = _unistd.getuid();
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
//[XSI]
__QOR_INTERFACE( __CQOR ) char* getwd( char* path_name )// (LEGACY )
{
    __QCS_FCONTEXT( "getwd" );

    char* pResult = 0;
    __QCS_PROTECT
    {
        pResult = _unistd.getwd( path_name );
    }__QCS_ENDPROTECT
    return pResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int isatty( int fildes )
{
    __QCS_FCONTEXT( "isatty" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _unistd.isatty( fildes );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
//[XSI]
__QOR_INTERFACE( __CQOR ) int lchown( const char* path, uid_t owner, gid_t group )
{
    __QCS_FCONTEXT( "lchown" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _unistd.lchown( path, owner, group );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int link( const char* path1, const char* path2 )
{
    __QCS_FCONTEXT( "link" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _unistd.link( path1, path2 );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
//[XSI]
__QOR_INTERFACE( __CQOR ) int lockf( int fildes, int function, off_t size )
{
    __QCS_FCONTEXT( "lockf" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _unistd.lockf( fildes, function, size );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) off_t lseek( int fildes, off_t offset, int whence )
{
    __QCS_FCONTEXT( "lseek" );

    off_t Result = 0;
    __QCS_PROTECT
    {
        Result = _unistd.lseek( fildes, offset, whence );
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
//[XSI]
__QOR_INTERFACE( __CQOR ) int nice( int incr )
{
    __QCS_FCONTEXT( "nice" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _unistd.nice( incr );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) long pathconf( const char* path, int name )
{
    __QCS_FCONTEXT( "pathconf" );

    long lResult = 0;
    __QCS_PROTECT
    {
        lResult = _unistd.pathconf( path, name );
    }__QCS_ENDPROTECT
    return lResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int pause( void )
{
    __QCS_FCONTEXT( "pause" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _unistd.pause();
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int pipe( int fildes[ 2 ] )
{
    __QCS_FCONTEXT( "pipe" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _unistd.pipe( fildes );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
//[XSI]
__QOR_INTERFACE( __CQOR ) ssize_t pread( int fildes, void* buf, size_t nbyte, off_t offset )
{
    __QCS_FCONTEXT( "pread" );

    ssize_t Result = 0;
    __QCS_PROTECT
    {
        Result = _unistd.pread( fildes, buf, nbyte, offset );
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) ssize_t pwrite( int fildes, const void* buf, size_t nbyte, off_t offset )
{
    __QCS_FCONTEXT( "pwrite" );

    ssize_t Result = 0;
    __QCS_PROTECT
    {
        Result = _unistd.pwrite( fildes, buf, nbyte, offset );
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) ssize_t read( int fildes, void* buf, size_t nbyte )
{
    __QCS_FCONTEXT( "read" );

    ssize_t Result = 0;
    __QCS_PROTECT
    {
        Result = _unistd.read( fildes, buf, nbyte );
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) ssize_t readlink( const char* __QCMP_RESTRICT path, char* __QCMP_RESTRICT buf, size_t bufsize )
{
    __QCS_FCONTEXT( "readlink" );

    ssize_t Result = 0;
    __QCS_PROTECT
    {
        Result = _unistd.readlink( path, buf, bufsize );
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int rmdir( const char* path )
{
    __QCS_FCONTEXT( "rmdir" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _unistd.rmdir( path );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int setegid( gid_t gid )
{
    __QCS_FCONTEXT( "setegid" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _unistd.setegid( gid );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int seteuid( uid_t uid )
{
    __QCS_FCONTEXT( "seteuid" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _unistd.seteuid( uid );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int setgid( gid_t gid )
{
    __QCS_FCONTEXT( "setgid" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _unistd.setgid( gid );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int setpgid( pid_t pid, pid_t pgid )
{
    __QCS_FCONTEXT( "setpgid" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _unistd.setpgid( pid, pgid );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
//[XSI]
__QOR_INTERFACE( __CQOR ) pid_t setpgrp( void )
{
    __QCS_FCONTEXT( "setpgrp" );

    pid_t Result = 0;
    __QCS_PROTECT
    {
        Result = _unistd.setpgrp();
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int setregid( gid_t rgid, gid_t egid )
{
    __QCS_FCONTEXT( "setregid" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _unistd.setregid( rgid, egid );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int setreuid( uid_t ruid, uid_t euid )
{
    __QCS_FCONTEXT( "setreuid" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _unistd.setreuid( ruid, euid );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) pid_t setsid( void )
{
    __QCS_FCONTEXT( "setsid" );

    pid_t Result = 0;
    __QCS_PROTECT
    {
        Result = _unistd.setsid();
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int setuid( uid_t uid )
{
    __QCS_FCONTEXT( "setuid" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _unistd.setuid( uid );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) unsigned sleep( unsigned seconds )
{
    __QCS_FCONTEXT( "sleep" );

    unsigned Result = 0;
    __QCS_PROTECT
    {
        Result = _unistd.sleep( seconds );
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
//[XSI]
__QOR_INTERFACE( __CQOR ) void swab( const void* __QCMP_RESTRICT src, void* __QCMP_RESTRICT dest, ssize_t nbytes )
{
    __QCS_FCONTEXT( "swab" );

    __QCS_PROTECT
    {
        _unistd.swab( src, dest, nbytes );
    }__QCS_ENDPROTECT
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) void _swab( char* src, char* dst, int n )
{
    __QCS_FCONTEXT( "_swab" );
	_unistd.swab( src, dst, n );
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int symlink( const char* path1, const char* path2 )
{
    __QCS_FCONTEXT( "symlink" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _unistd.symlink( path1, path2 );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
//[XSI]
__QOR_INTERFACE( __CQOR ) void sync( void )
{
    __QCS_FCONTEXT( "sync" );

    __QCS_PROTECT
    {
        _unistd.sync();
    }__QCS_ENDPROTECT
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) long sysconf( int name )
{
    __QCS_FCONTEXT( "sysconf" );

    long lResult = 0;
    __QCS_PROTECT
    {
        lResult = _unistd.sysconf( name );
    }__QCS_ENDPROTECT
    return lResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) pid_t tcgetpgrp( int fildes )
{
    __QCS_FCONTEXT( "tcgetpgrp" );

    pid_t Result = 0;
    __QCS_PROTECT
    {
        Result = _unistd.tcgetpgrp( fildes );
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int tcsetpgrp( int fildes, pid_t pgid_id )
{
    __QCS_FCONTEXT( "tcsetpgrp" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _unistd.tcsetpgrp( fildes, pgid_id );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
//[XSI]
__QOR_INTERFACE( __CQOR ) int truncate( const char* path, off_t length )
{
    __QCS_FCONTEXT( "truncate" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _unistd.truncate( path, length );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) char* ttyname( int fildes )
{
    __QCS_FCONTEXT( "ttyname" );

    char* pResult = 0;
    __QCS_PROTECT
    {
        pResult = _unistd.ttyname( fildes );
    }__QCS_ENDPROTECT
    return pResult;

}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int ttyname_r( int fildes, char* name, size_t namesize )
{
    __QCS_FCONTEXT( "ttyname_r" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _unistd.ttyname_r( fildes, name, namesize );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
//[XSI]
__QOR_INTERFACE( __CQOR ) useconds_t ualarm( useconds_t useconds, useconds_t interval )
{
    __QCS_FCONTEXT( "ualarm" );

    useconds_t Result = 0;
    __QCS_PROTECT
    {
        Result = _unistd.ualarm( useconds, interval  );
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int unlink( const char* path )
{
    __QCS_FCONTEXT( "unlink" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _unistd.unlink( path );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
//[XSI]
__QOR_INTERFACE( __CQOR ) int usleep( useconds_t useconds )
{
    __QCS_FCONTEXT( "usleep" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _unistd.usleep( useconds );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) pid_t vfork( void )
{
    __QCS_FCONTEXT( "vfork" );

    pid_t Result = 0;
    __QCS_PROTECT
    {
        Result = _unistd.vfork();
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) ssize_t write( int fildes, const void* buf, size_t nbyte )
{
    __QCS_FCONTEXT( "write" );

    ssize_t Result = 0;
    __QCS_PROTECT
    {
        Result = _unistd.write( fildes, buf, nbyte );
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) void* sbrk( intptr_t delta )
{
	__QCS_FCONTEXT( "sbrk" );

	void* pResult = 0;
	__QCS_PROTECT
	{
		pResult = _unistd.sbrk( delta );
	}__QCS_ENDPROTECT
	return pResult;
}

__QCMP_ENDLINKAGE_C


