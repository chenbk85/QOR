//inet.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Generic arpa/inet implementation
//An exported standard C interface which forwards calls to the matching C++ implementaion for the platform

#include "CQOR/CQORPolicy.h"
#include <arpa/inet.h>
#include <errno.h>
#include "SystemQOR.h"
#include QOR_SYS_PLATFORMARPAHEADER(inet.h)
#include "CodeQOR/Tracing/FunctionContextBase.h"
#include "CodeQOR/ErrorSystem/Error.h"
#include "CQOR.h"

//--------------------------------------------------------------------------------
namespace
{
	nsPlatform::Cinet inet;
}//anonymous

__QCMP_STARTLINKAGE_C

//--------------------------------------------------------------------------------
__QOR_INTERFACE(__CQOR) uint32_t htonl(uint32_t n)
{
	__QCS_FCONTEXT("htonl");
	uint32_t uiResult = 0;
	__QCS_PROTECT
	{
		uiResult = inet.htonl(n);
	}__QCS_ENDPROTECT
	return uiResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE(__CQOR) uint16_t htons(uint16_t n)
{
	__QCS_FCONTEXT("htons");
	uint16_t uiResult = 0;
	__QCS_PROTECT
	{
		uiResult = inet.htons(n);
	}__QCS_ENDPROTECT
	return uiResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE(__CQOR) uint32_t ntohl(uint32_t n)
{
	__QCS_FCONTEXT("ntohl");
	uint32_t uiResult = 0;
	__QCS_PROTECT
	{
		uiResult = inet.ntohl(n);
	}__QCS_ENDPROTECT
	return uiResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE(__CQOR) uint16_t ntohs(uint16_t n)
{
	__QCS_FCONTEXT("ntohs");
	uint16_t uiResult = 0;
	__QCS_PROTECT
	{
		uiResult = inet.ntohs(n);
	}__QCS_ENDPROTECT
	return uiResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE(__CQOR) in_addr_t inet_addr(const char* szAddress)
{
	__QCS_FCONTEXT("inet_addr");
	in_addr_t Result = 0;
	__QCS_PROTECT
	{
		Result = inet.inet_addr(szAddress);
	}__QCS_ENDPROTECT
	return Result;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE(__CQOR) char* inet_ntoa(in_addr addr)
{
	__QCS_FCONTEXT("inet_ntoa");
	char* szResult = 0;
	__QCS_PROTECT
	{
		szResult = inet.inet_ntoa(addr);
	}__QCS_ENDPROTECT
	return szResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE(__CQOR) const char* inet_ntop(int af, const void* __QCMP_RESTRICT a0, char* __QCMP_RESTRICT s, socklen_t l)
{
	__QCS_FCONTEXT("inet_ntop");
	const char* szResult = 0;
	__QCS_PROTECT
	{
		szResult = inet.inet_ntop(af, a0, s, l);
	}__QCS_ENDPROTECT
	return szResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE(__CQOR) int inet_pton(int af, const char* __QCMP_RESTRICT s, void* __QCMP_RESTRICT a0)
{
	__QCS_FCONTEXT("inet_pton");
	int iResult = 0;
	__QCS_PROTECT
	{
		iResult = inet.inet_pton(af, s, a0);
	}__QCS_ENDPROTECT
	return iResult;
}

__QCMP_ENDLINKAGE_C

