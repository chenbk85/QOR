//socket.cpp

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Generic socket implementation
//An exported standard C interface which forwards calls to the matching C++ implementaion for the platform

#include "CQOR/CQORPolicy.h"
#include <sys/socket.h>
#include <errno.h>
#include "SystemQOR.h"
#include QOR_SYS_PLATFORMSYSHEADER(socket.h)
#include "CodeQOR/Tracing/FunctionContextBase.h"
#include "CodeQOR/ErrorSystem/Error.h"
#include "CQOR.h"

//--------------------------------------------------------------------------------
namespace
{
	nsPlatform::Csocket _socket;
}//anonymous

__QCMP_STARTLINKAGE_C

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int accept( int socket, ::sockaddr* __QCMP_RESTRICT address, ::socklen_t* __QCMP_RESTRICT address_len )
{
    __QCS_FCONTEXT( "accept" );
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _socket.accept( socket, address, address_len );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int bind( int socket, const ::sockaddr* address, ::socklen_t address_len )
{
    __QCS_FCONTEXT( "bind" );
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _socket.bind( socket, address, address_len );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int connect( int socket, const ::sockaddr* address, ::socklen_t address_len )
{
    __QCS_FCONTEXT( "connect" );
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _socket.connect( socket, address, address_len );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int getpeername( int socket, ::sockaddr* __QCMP_RESTRICT address, ::socklen_t* __QCMP_RESTRICT address_len )
{
    __QCS_FCONTEXT( "getpeername" );
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _socket.getpeername( socket, address, address_len );
    }__QCS_ENDPROTECT
    return iResult;

}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int getsockname( int socket, ::sockaddr* __QCMP_RESTRICT address, ::socklen_t* __QCMP_RESTRICT address_len )
{
    __QCS_FCONTEXT( "getsockname" );
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _socket.getsockname( socket, address, address_len );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int getsockopt( int socket, int level, int option_name, void* __QCMP_RESTRICT option_value, ::socklen_t* __QCMP_RESTRICT option_len )
{
    __QCS_FCONTEXT( "getsockopt" );
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _socket.getsockopt( socket, level, option_name, option_value, option_len );
    }__QCS_ENDPROTECT
    return iResult;

}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int listen( int socket, int backlog )
{
    __QCS_FCONTEXT( "listen" );
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _socket.listen( socket, backlog );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) ::ssize_t recv( int socket, void* buffer, size_t length , int flags )
{
    __QCS_FCONTEXT( "recv" );
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _socket.recv( socket, buffer, length, flags );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) ::ssize_t recvfrom( int socket, void* __QCMP_RESTRICT buffer, size_t length, int flags, ::sockaddr* __QCMP_RESTRICT address, ::socklen_t* __QCMP_RESTRICT address_len )
{
    __QCS_FCONTEXT( "recvfrom" );
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _socket.recvfrom( socket, buffer, length, flags, address, address_len );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) ::ssize_t recvmsg( int socket, ::msghdr* message, int flags )
{
    __QCS_FCONTEXT( "recvmsg" );
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _socket.recvmsg( socket, message, flags );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) ::ssize_t send( int socket, const void* buffer, size_t length, int flags )
{
    __QCS_FCONTEXT( "send" );
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _socket.send( socket, buffer, length, flags );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) ::ssize_t sendmsg( int socket, const ::msghdr* message, int flags )
{
    __QCS_FCONTEXT( "sendmsg" );
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _socket.sendmsg( socket, message, flags );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) ::ssize_t sendto( int socket, const void* buffer, ::size_t length, int flags, const ::sockaddr* dest_addr, ::socklen_t dest_len )
{
    __QCS_FCONTEXT( "sendto" );
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _socket.sendto( socket, buffer, length, flags, dest_addr, dest_len );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int setsockopt( int socket, int level, int option_name, const void* option_value, ::socklen_t option_len )
{
    __QCS_FCONTEXT( "setsockopt" );
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _socket.setsockopt( socket, level, option_name, option_value, option_len );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int shutdown( int socket, int how )
{
    __QCS_FCONTEXT( "shutdown" );
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _socket.shutdown( socket, how );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int sockatmark( int socket )
{
    __QCS_FCONTEXT( "sockatmark" );
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _socket.sockatmark( socket );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int socket( int domain, int type, int protocol )
{
    __QCS_FCONTEXT( "socket" );
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _socket.socket( domain, type, protocol );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int socketpair( int domain, int type, int protocol, int socket_vector[ 2 ] )
{
    __QCS_FCONTEXT( "socketpair" );
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _socket.socketpair( domain, type, protocol, socket_vector );
    }__QCS_ENDPROTECT
    return iResult;
}

__QCMP_ENDLINKAGE_C
