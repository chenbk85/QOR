//mman.cpp

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Generic mman implementation
//An exported standard C interface which forwards calls to the matching C++ implementaion for the platform

#include "CQOR/CQORPolicy.h"
#include <sys/mman.h>
#include <errno.h>
#include "SystemQOR.h"
#include QOR_SYS_PLATFORMSYSHEADER(mman.h)
#include "CodeQOR/Tracing/FunctionContextBase.h"
#include "CodeQOR/ErrorSystem/Error.h"
#include "CQOR.h"

//--------------------------------------------------------------------------------
namespace
{
	nsPlatform::Cmman _mman;
}//anonymous

__QCMP_STARTLINKAGE_C

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int mlock( const void* addr, size_t len )
{
	__QCS_FCONTEXT( "mlock" );
	int iResult = 0;
	__QCS_PROTECT
	{
		iResult = _mman.mlock( addr, len );
	}__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int mlockall( int flags )
{
	__QCS_FCONTEXT( "mlockall" );
	int iResult = 0;
	__QCS_PROTECT
	{
		iResult = _mman.mlockall( flags );
	}__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) void* mmap( void* addr, size_t len, int prot, int flags, int fildes, ::off_t off )
{
	__QCS_FCONTEXT( "mmap" );
	void* pResult = 0;
	__QCS_PROTECT
	{
		pResult = _mman.mmap( addr, len, prot, flags, fildes, off );
	}__QCS_ENDPROTECT
	return pResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int mprotect( void* addr, size_t len, int prot )
{
	__QCS_FCONTEXT( "mprotect" );
	int iResult = 0;
	__QCS_PROTECT
	{
		iResult = _mman.mprotect( addr, len, prot );
	}__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int msync( void* addr, size_t len, int flags )
{
	__QCS_FCONTEXT( "msync" );
	int iResult = 0;
	__QCS_PROTECT
	{
		iResult = _mman.msync( addr, len, flags );
	}__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int munlock( const void* addr, size_t len )
{
	__QCS_FCONTEXT( "munlock" );
	int iResult = 0;
	__QCS_PROTECT
	{
		iResult = _mman.munlock( addr, len );
	}__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int munlockall( void )
{
	__QCS_FCONTEXT( "munlockall" );
	int iResult = 0;
	__QCS_PROTECT
	{
		iResult = _mman.munlockall();
	}__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int munmap( void* addr, size_t len )
{
	__QCS_FCONTEXT( "munmap" );
	int iResult = 0;
	__QCS_PROTECT
	{
		iResult = _mman.munmap( addr, len );
	}__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int posix_madvise( void* addr, size_t len, int advice )
{
	__QCS_FCONTEXT( "posix_madvise" );
	int iResult = 0;
	__QCS_PROTECT
	{
		iResult = _mman.posix_madvise( addr, len, advice );
	}__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int posix_mem_offset( const void* __QCMP_RESTRICT addr, size_t len, ::off_t* __QCMP_RESTRICT off, size_t* __QCMP_RESTRICT contig_len, int* __QCMP_RESTRICT fildes )
{
	__QCS_FCONTEXT( "posix_mem_offset" );
	int iResult = 0;
	__QCS_PROTECT
	{
		iResult = _mman.posix_mem_offset( addr, len, off, contig_len, fildes );
	}__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int posix_typed_mem_get_info( int fildes, ::posix_typed_mem_info* info )
{
	__QCS_FCONTEXT( "posix_typed_mem_get_info" );
	int iResult = 0;
	__QCS_PROTECT
	{
		iResult = _mman.posix_typed_mem_get_info( fildes, info );
	}__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int posix_typed_mem_open( const char* name, int oflag, int tflag )
{
	__QCS_FCONTEXT( "posix_typed_mem_open" );
	int iResult = 0;
	__QCS_PROTECT
	{
		iResult = _mman.posix_typed_mem_open( name, oflag, tflag );
	}__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int shm_open( const char* name, int oflag, ::mode_t mode )
{
	__QCS_FCONTEXT( "shm_open" );
	int iResult = 0;
	__QCS_PROTECT
	{
		iResult = _mman.shm_open( name, oflag, mode );
	}__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int shm_unlink( const char* name )
{
	__QCS_FCONTEXT( "shm_unlink" );
	int iResult = 0;
	__QCS_PROTECT
	{
		iResult = _mman.shm_unlink( name );
	}__QCS_ENDPROTECT
	return iResult;
}

__QCMP_ENDLINKAGE_C
