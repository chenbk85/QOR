//fenv.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Generic fenv implementation

#include "CQOR/CQORPolicy.h"
#include <fenv.h>
#include <errno.h>
#include "SystemQOR.h"
#include QOR_SYS_PLATFORMHEADER(fenv.h)
#include "CodeQOR/Tracing/FunctionContextBase.h"
#include "CodeQOR/ErrorSystem/Error.h"
#include "CQOR.h"

//--------------------------------------------------------------------------------
namespace
{
	nsPlatform::Cfenv _fenv;
}//anonymous

__QCMP_STARTLINKAGE_C

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int feclearexcept( int excepts )
{
    __QCS_FCONTEXT( "feclearexcept" );
    
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _fenv.feclearexcept( excepts );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int fegetexceptflag( fexcept_t* flagp, int excepts )
{
    __QCS_FCONTEXT( "fegetexceptflag" );
    
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _fenv.fegetexceptflag( flagp, excepts );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int feraiseexcept( int excepts )
{
    __QCS_FCONTEXT( "feraiseexcept" );
    
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _fenv.feraiseexcept( excepts );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int fesetexceptflag( const fexcept_t* flagp, int excepts )
{
    __QCS_FCONTEXT( "fesetexceptflag" );
    
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _fenv.fesetexceptflag( flagp, excepts );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int fetestexcept( int excepts )
{
    __QCS_FCONTEXT( "fetestexcept" );
    
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _fenv.fetestexcept( excepts );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int fegetround( void )
{
    __QCS_FCONTEXT( "fegetround" );
    
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _fenv.fegetround();
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int fesetround( int round )
{
    __QCS_FCONTEXT( "fesetround" );
    
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _fenv.fesetround( round );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int fegetenv( fenv_t* envp )
{
    __QCS_FCONTEXT( "fegetenv" );
    
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _fenv.fegetenv( envp );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int feholdexcept( fenv_t* envp )
{
    __QCS_FCONTEXT( "feholdexcept" );
    
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _fenv.feholdexcept( envp );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int fesetenv( const fenv_t* envp )
{
    __QCS_FCONTEXT( "fesetenv" );
    
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _fenv.fesetenv( envp );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int feupdateenv( const fenv_t* envp )
{
    __QCS_FCONTEXT( "feupdateenv" );
    
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _fenv.feupdateenv( envp );
    }__QCS_ENDPROTECT
    return iResult;
}

__QCMP_ENDLINKAGE_C
