//ctype.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Generic ctype implementation
//An exported standard C interface which forwards calls to the matching C++ implementaion for the platform

#include "CQOR/CQORPolicy.h"
#include <ctype.h>
#include <errno.h>
#include "SystemQOR.h"
#include QOR_SYS_PLATFORMHEADER(ctype.h)
#include "CodeQOR/Tracing/FunctionContextBase.h"
#include "CodeQOR/ErrorSystem/Error.h"
#include "CQOR.h"

//--------------------------------------------------------------------------------
namespace
{
	nsPlatform::Cctype _ctype;
}//anonymous

__QCMP_STARTLINKAGE_C

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int isalnum( int c )
{
    __QCS_FCONTEXT( "isalnum" );
    
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _ctype.isalnum( c );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int isalnum_l( int c, locale_t l )
{
	__QCS_FCONTEXT( "isalnum_l" );
	
	int iResult = 0;
	__QCS_PROTECT
	{
		iResult = _ctype.isalnum_l( c, l );
	}__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int isalpha( int c )
{
    __QCS_FCONTEXT( "isalpha" );
    
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _ctype.isalpha( c );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int isalpha_l( int c, locale_t l )
{
	__QCS_FCONTEXT( "isalpha_l" );
	
	int iResult = 0;
	__QCS_PROTECT
	{
		iResult = _ctype.isalpha_l( c, l );
	}__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int isblank( int c )
{
    __QCS_FCONTEXT( "isblank" );
    
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _ctype.isblank( c );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int isblank_l(int c, locale_t l )
{
	__QCS_FCONTEXT( "isblank_l" );
	
	int iResult = 0;
	__QCS_PROTECT
	{
		iResult = _ctype.isblank_l( c, l );
	}__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int iscntrl( int c )
{
    __QCS_FCONTEXT( "iscntrl" );
    
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _ctype.iscntrl( c );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int iscntrl_l( int c, locale_t l )
{
	__QCS_FCONTEXT( "iscntrl_l" );
	
	int iResult = 0;
	__QCS_PROTECT
	{
		iResult = _ctype.iscntrl_l( c, l );
	}__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int isdigit( int c )
{
    __QCS_FCONTEXT( "isdigit" );
    
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _ctype.isdigit( c );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int isdigit_l( int c, locale_t l )
{
    __QCS_FCONTEXT( "isdigit_l" );
    
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _ctype.isdigit_l( c, l );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int isgraph( int c )
{
    __QCS_FCONTEXT( "isgraph" );
    
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _ctype.isgraph( c );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int isgraph_l( int c, locale_t l )
{
	__QCS_FCONTEXT( "isgraph_l" );
	
	int iResult = 0;
	__QCS_PROTECT
	{
		iResult = _ctype.isgraph_l( c, l );
	}__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int islower( int c )
{
    __QCS_FCONTEXT( "islower" );
    
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _ctype.islower( c );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int islower_l( int c, locale_t l )
{
    __QCS_FCONTEXT( "islower_l" );
    
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _ctype.islower_l( c, l );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int isprint( int c )
{
    __QCS_FCONTEXT( "isprint" );
    
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _ctype.isprint( c );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int isprint_l( int c, locale_t l )
{
    __QCS_FCONTEXT( "isprint_l" );
    
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _ctype.isprint_l( c, l );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int ispunct( int c )
{
    __QCS_FCONTEXT( "ispunct" );
    
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _ctype.ispunct( c );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int ispunct_l( int c, locale_t l )
{
	__QCS_FCONTEXT( "ispunct_l" );
    
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _ctype.ispunct_l( c, l );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int isspace( int c )
{
    __QCS_FCONTEXT( "isspace" );
    
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _ctype.isspace( c );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int isspace_l( int c, locale_t l )
{
	__QCS_FCONTEXT( "isspace_l" );
	
	int iResult = 0;
	__QCS_PROTECT
	{
		iResult = _ctype.isspace_l( c, l );
	}__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int isupper( int c )
{
    __QCS_FCONTEXT( "isupper" );
    
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _ctype.isupper( c );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int isupper_l( int c, locale_t l )
{
	__QCS_FCONTEXT( "isupper_l" );
	
	int iResult = 0;
	__QCS_PROTECT
	{
		iResult = _ctype.isupper_l( c, l );
	}__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int isxdigit( int c )
{
    __QCS_FCONTEXT( "isxdigit" );
    
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _ctype.isxdigit( c );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int isxdigit_l( int c , locale_t l )
{
    __QCS_FCONTEXT( "isxdigit_l" );
    
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _ctype.isxdigit_l( c, l );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int tolower( int c )
{
    __QCS_FCONTEXT( "tolower" );
    
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _ctype.tolower( c );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int tolower_l( int c, locale_t l )
{
	__QCS_FCONTEXT( "tolower_l" );
    
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _ctype.tolower_l( c, l );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int toupper( int c )
{
    __QCS_FCONTEXT( "toupper" );
    
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _ctype.toupper( c );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int toupper_l( int c, locale_t l )
{
	__QCS_FCONTEXT( "toupper_l" );
	
	int iResult = 0;
	__QCS_PROTECT
	{
		iResult = _ctype.toupper_l( c, l );
	}__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int isascii( int c )
{
    __QCS_FCONTEXT( "isascii" );
    
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = ( 0 <= c && c <= 0177 ) ? 1 : 0;
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int toascii( int c )
{
    __QCS_FCONTEXT( "toascii" );
    
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = ( c & 0x7F );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int _isatty( int fd )
{
	__QCS_FCONTEXT( "isatty" );

	int iResult = 0;
	__QCS_PROTECT
	{
		iResult = _ctype.isatty( fd );
	}__QCS_ENDPROTECT
	return iResult;
}


//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int _ismbbalnum( unsigned int c )
{
	__QCS_FCONTEXT( "_ismbbalnum" );

	int iResult = 0;
	__QCS_PROTECT
	{
		iResult = _ctype._ismbbalnum( c );
	}__QCS_ENDPROTECT
	return iResult;
}


__QCMP_ENDLINKAGE_C
