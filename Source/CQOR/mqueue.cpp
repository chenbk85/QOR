//mqueue.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CQOR/CQORPolicy.h"
#include <mqueue.h>
#include <errno.h>
#include <stdarg.h>
#include "SystemQOR.h"
#include QOR_SYS_PLATFORMHEADER(mqueue.h)
#include "CodeQOR/Tracing/FunctionContextBase.h"
#include "CodeQOR/ErrorSystem/Error.h"
#include "CQOR.h"

namespace 
{
	nsPlatform::Cmqueue _mqueue;
}//anonymous

__QCMP_STARTLINKAGE_C

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int mq_close( mqd_t mqdes )
{
    __QCS_FCONTEXT( "mq_close" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _mqueue.mq_close( mqdes );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int mq_getattr( mqd_t mqdes, mq_attr* mqstat )
{
    __QCS_FCONTEXT( "mq_getattr" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _mqueue.mq_getattr( mqdes, mqstat );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int mq_notify( mqd_t mqdes, const sigevent* pNotification )
{
    __QCS_FCONTEXT( "mq_notify" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _mqueue.mq_notify( mqdes, pNotification );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) mqd_t mq_open( const char* szName, int oFlag, ... )
{
    __QCS_FCONTEXT( "mq_open" );

    mqd_t Result = 0;
    __QCS_PROTECT
    {
        va_list args;
        va_start( args, oFlag );
        Result = _mqueue.mq_open( szName, oFlag, args );
		va_end( args );
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) ssize_t mq_receive( mqd_t mqdes, char* szMessage, size_t MsgLen, unsigned* pPriority )
{
    __QCS_FCONTEXT( "mq_receive" );

    ssize_t Result = 0;
    __QCS_PROTECT
    {
        Result = _mqueue.mq_receive( mqdes, szMessage, MsgLen, pPriority );
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int mq_send( mqd_t mqdes, const char*szMessage, size_t MsgLen, unsigned uiPriority )
{
    __QCS_FCONTEXT( "mq_send" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _mqueue.mq_send( mqdes, szMessage, MsgLen, uiPriority );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int mq_setattr( mqd_t mqdes, const mq_attr* __QCMP_RESTRICT mqstat, mq_attr* __QCMP_RESTRICT omqstat )
{
    __QCS_FCONTEXT( "mq_setattr" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _mqueue.mq_setattr( mqdes, mqstat, omqstat );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) ssize_t mq_timedreceive( mqd_t mqdes, char* __QCMP_RESTRICT szMessage, size_t MsgLen, unsigned* __QCMP_RESTRICT puiPriority, const timespec* __QCMP_RESTRICT abstime )
{
    __QCS_FCONTEXT( "mq_timedreceive" );

    ssize_t Result = 0;
    __QCS_PROTECT
    {
        Result = _mqueue.mq_timedreceive( mqdes, szMessage, MsgLen, puiPriority, abstime );
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int mq_timedsend( mqd_t mqdes, const char* szMessage, size_t MsgLen, unsigned uiPriority, const timespec* abstime )
{
    __QCS_FCONTEXT( "mq_timedsend" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _mqueue.mq_timedsend( mqdes, szMessage, MsgLen, uiPriority, abstime );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int mq_unlink( const char* szMQueue )
{
    __QCS_FCONTEXT( "mq_unlink" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _mqueue.mq_unlink( szMQueue );
    }__QCS_ENDPROTECT
    return iResult;
}

__QCMP_ENDLINKAGE_C


