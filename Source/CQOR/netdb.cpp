//netdb.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CQOR/CQORPolicy.h"
#include <netdb.h>
#include <errno.h>
#include "SystemQOR.h"
#include QOR_SYS_PLATFORMHEADER(netdb.h)
#include "CodeQOR/Tracing/FunctionContextBase.h"
#include "CodeQOR/ErrorSystem/Error.h"
#include "CQOR.h"

//--------------------------------------------------------------------------------
namespace
{
	nsPlatform::Cnetdb _netdb;
}//anonymous

__QCMP_STARTLINKAGE_C

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) void endhostent( void )
{
    __QCS_FCONTEXT( "endhostent" );

    __QCS_PROTECT
    {
        _netdb.endhostent();
    }__QCS_ENDPROTECT
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) void endnetent( void )
{
    __QCS_FCONTEXT( "endnetent" );

    __QCS_PROTECT
    {
        _netdb.endnetent();
    }__QCS_ENDPROTECT
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) void endprotoent( void )
{
    __QCS_FCONTEXT( "endprotoent" );

    __QCS_PROTECT
    {
        _netdb.endprotoent();
    }__QCS_ENDPROTECT
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) void endservent( void )
{
    __QCS_FCONTEXT( "endservent" );

    __QCS_PROTECT
    {
        _netdb.endservent();
    }__QCS_ENDPROTECT
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) void freeaddrinfo( addrinfo* pInfo )
{
    __QCS_FCONTEXT( "freeaddrinfo" );

    __QCS_PROTECT
    {
        _netdb.freeaddrinfo( pInfo );
    }__QCS_ENDPROTECT
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) const char* gai_strerror( int iError )
{
    __QCS_FCONTEXT( "gai_strerror" );

	const char* pResult = 0;
    __QCS_PROTECT
    {
        pResult = _netdb.gai_strerror( iError );
    }__QCS_ENDPROTECT
	return pResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int getaddrinfo( const char* __QCMP_RESTRICT nodename, const char* __QCMP_RESTRICT servname, const addrinfo* __QCMP_RESTRICT hints, addrinfo** __QCMP_RESTRICT res )
{
    __QCS_FCONTEXT( "getaddrinfo" );

	int iResult = -1;
    __QCS_PROTECT
    {
        iResult = _netdb.getaddrinfo( nodename, servname, hints, res );
    }__QCS_ENDPROTECT
	return iResult;
}

#ifndef OS_EXPORTS_NETDB_GETHOSTBYADDR
//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) hostent* gethostbyaddr( const void* p1, socklen_t s2, int i3 )
{
    __QCS_FCONTEXT( "gethostbyaddr" );

    __QCS_PROTECT
    {
        _netdb.gethostbyaddr( p1, s2, i3 );
    }__QCS_ENDPROTECT
}
#endif

#ifndef OS_EXPORTS_NETDB_GETHOSTBYNAME
//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) hostent* gethostbyname( const char* szName )
{
    __QCS_FCONTEXT( "gethostbyname" );

    __QCS_PROTECT
    {
        _netdb.gethostbyname( szName );
    }__QCS_ENDPROTECT
}
#endif

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) hostent* gethostent( void )
{
    __QCS_FCONTEXT( "gethostent" );

	hostent* pHostEnt = 0;
    __QCS_PROTECT
    {
        pHostEnt = _netdb.gethostent();
    }__QCS_ENDPROTECT
	return pHostEnt;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int getnameinfo( const sockaddr* __QCMP_RESTRICT sa, socklen_t salen, char* __QCMP_RESTRICT node, socklen_t nodelen, char* __QCMP_RESTRICT service, socklen_t servicelen, int flags )
{
    __QCS_FCONTEXT( "setservent" );

	int iResult = -1;
    __QCS_PROTECT
    {
        iResult = _netdb.getnameinfo( sa, salen, node, nodelen, service, servicelen, flags );
    }__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) netent* getnetbyaddr( uint32_t net, int type )
{
    __QCS_FCONTEXT( "getnetbyaddr" );

	netent* pNetEnt = 0;
    __QCS_PROTECT
    {
        pNetEnt = _netdb.getnetbyaddr( net, type );
    }__QCS_ENDPROTECT
	return pNetEnt;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) netent* getnetbyname( const char* szName )
{
    __QCS_FCONTEXT( "getnetbyname" );

	netent* pNetEnt = 0;
    __QCS_PROTECT
    {
        pNetEnt = _netdb.getnetbyname( szName );
    }__QCS_ENDPROTECT
	return pNetEnt;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) netent* getnetent( void )
{
    __QCS_FCONTEXT( "getnetent" );

	netent* pNetEnt = 0;
    __QCS_PROTECT
    {
        pNetEnt =_netdb.getnetent();
    }__QCS_ENDPROTECT
	return pNetEnt;
}

#ifndef OS_EXPORTS_NETDB_GETPROTOBYNAME
//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) protoent* getprotobyname( const char* szName )
{
    __QCS_FCONTEXT( "getprotobyname" );

	protoent* pProtoEnt = 0;
    __QCS_PROTECT
    {
        pProtoEnt = _netdb.getprotobyname( szName );
    }__QCS_ENDPROTECT
	return pProtoEnt;
}
#endif

#ifndef OS_EXPORTS_NETDB_GETPROTOBYNUMBER
//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) protoent* getprotobynumber( int iProto )
{
    __QCS_FCONTEXT( "getprotobynumber" );

	protoent* pProtoEnt = 0;
    __QCS_PROTECT
    {
        pProtoEnt = _netdb.getprotobynumber( iProto );
    }__QCS_ENDPROTECT
	return pProtoEnt;
}
#endif

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) protoent* getprotoent( void )
{
    __QCS_FCONTEXT( "getprotoent" );

	protoent* pProtoEnt = 0;
    __QCS_PROTECT
    {
        pProtoEnt = _netdb.getprotoent();
    }__QCS_ENDPROTECT
	return pProtoEnt;
}

#ifndef OS_EXPORTS_NETDB_GETSERVBYNAME
//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) servent* getservbyname( const char* name, const char* proto )
{
    __QCS_FCONTEXT( "getservbyname" );

	servent* pServEnt = 0;
    __QCS_PROTECT
    {
        pServEnt = _netdb.getservbyname( name, proto );
    }__QCS_ENDPROTECT
	return pServEnt;
}
#endif

#ifndef OS_EXPORTS_NETDB_GETSERVBYPORT
//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) servent* getservbyport( int port, const char* proto )
{
    __QCS_FCONTEXT( "getservbyport" );

	servent* pServEnt = 0;
    __QCS_PROTECT
    {
        pServEnt = _netdb.getservbyport( port, proto );
    }__QCS_ENDPROTECT
	return pServEnt;
}
#endif

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) servent* getservent( void )
{
    __QCS_FCONTEXT( "getservent" );

	servent* pServEnt = 0;
    __QCS_PROTECT
    {
        pServEnt = _netdb.getservent();
    }__QCS_ENDPROTECT
	return pServEnt;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) void sethostent( int i )
{
    __QCS_FCONTEXT( "sethostent" );

    __QCS_PROTECT
    {
        _netdb.sethostent( i );
    }__QCS_ENDPROTECT
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) void setnetent( int i )
{
    __QCS_FCONTEXT( "setnetent" );

    __QCS_PROTECT
    {
        _netdb.setnetent( i );
    }__QCS_ENDPROTECT
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) void setprotoent( int i )
{
    __QCS_FCONTEXT( "setprotoent" );

    __QCS_PROTECT
    {
        _netdb.setprotoent( i );
    }__QCS_ENDPROTECT
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) void setservent( int i )
{
    __QCS_FCONTEXT( "setservent" );

    __QCS_PROTECT
    {
        _netdb.setservent( i );
    }__QCS_ENDPROTECT
}

__QCMP_ENDLINKAGE_C

