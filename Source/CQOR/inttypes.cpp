//inttypes.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Generic inttypes implementation

#include "CQOR/CQORPolicy.h"
#include <inttypes.h>
#include <errno.h>
#include "SystemQOR.h"
#include QOR_SYS_PLATFORMHEADER(inttypes.h)
#include "CodeQOR/Tracing/FunctionContextBase.h"
#include "CodeQOR/ErrorSystem/Error.h"
#include "CQOR.h"

//--------------------------------------------------------------------------------
namespace
{
	nsPlatform::Cinttypes _inttypes;
}//anonymous

__QCMP_STARTLINKAGE_C

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) intmax_t imaxabs( intmax_t j )
{
    __QCS_FCONTEXT( "imaxabs" );
    
    intmax_t Result = 0;
    __QCS_PROTECT
    {
        Result = _inttypes.imaxabs( j );
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) imaxdiv_t imaxdiv( intmax_t numer, intmax_t denom )
{
    __QCS_FCONTEXT( "imaxdiv" );
    
    imaxdiv_t Result = {0};
    __QCS_PROTECT
    {
        Result = _inttypes.imaxdiv( numer, denom );
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) intmax_t strtoimax( const char* __QCMP_RESTRICT nptr, char** __QCMP_RESTRICT endptr, int base )
{
    __QCS_FCONTEXT( "strtoimax" );
    
    intmax_t Result = 0;
    __QCS_PROTECT
    {
        Result = _inttypes.strtoimax( nptr, endptr, base );
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) uintmax_t strtoumax( const char* __QCMP_RESTRICT nptr, char** __QCMP_RESTRICT endptr, int base )
{
    __QCS_FCONTEXT( "strtoumax" );
    
    uintmax_t Result = 0;
    __QCS_PROTECT
    {
        Result = _inttypes.strtoumax( nptr, endptr, base );
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) intmax_t wcstoimax( const wchar_t* __QCMP_RESTRICT nptr, wchar_t** __QCMP_RESTRICT endptr, int base )
{
    __QCS_FCONTEXT( "wcstoimax" );
    
    intmax_t Result = 0;
    __QCS_PROTECT
    {
        Result = _inttypes.wcstoimax( nptr, endptr, base );
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) uintmax_t wcstoumax( const wchar_t* __QCMP_RESTRICT nptr, wchar_t** __QCMP_RESTRICT endptr, int base )
{
    __QCS_FCONTEXT( "wcstoumax" );
    
    uintmax_t Result = 0;
    __QCS_PROTECT
    {
        Result = _inttypes.wcstoumax( nptr, endptr, base );
    }__QCS_ENDPROTECT
    return Result;
}

__QCMP_ENDLINKAGE_C
