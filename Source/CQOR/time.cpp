//time.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Generic time implementation

#include "CQOR/CQORPolicy.h"
#include <time.h>
#include <errno.h>
#include "SystemQOR.h"
#include QOR_SYS_PLATFORMHEADER(time.h)
#include "CodeQOR/Tracing/FunctionContextBase.h"
#include "CodeQOR/ErrorSystem/Error.h"
#include "CQOR.h"

//--------------------------------------------------------------------------------
namespace
{
	nsPlatform::Ctime _time;
}//anonymous

__QCMP_STARTLINKAGE_C

//--------------------------------------------------------------------------------
///asctime
__QOR_INTERFACE( __CQOR ) char* asctime( const tm* timeptr )
{
    __QCS_FCONTEXT( "asctime" );

    char* pResult = 0;
    __QCS_PROTECT
    {
        pResult = _time.asctime( timeptr );
    }__QCS_ENDPROTECT
    return pResult;
}

//--------------------------------------------------------------------------------
///asctime_r
__QOR_INTERFACE( __CQOR ) char* asctime_r( const ::tm* timeptr, char* szBuf )
{
    __QCS_FCONTEXT( "asctime_r" );

    char* pResult = 0;
    __QCS_PROTECT
    {
        pResult = _time.asctime_r( timeptr, szBuf );
    }__QCS_ENDPROTECT
    return pResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) ::errno_t asctime_s( char* pBuf, size_t SizeInBytes, const ::tm* pTm )
{
    __QCS_FCONTEXT( "asctime_s" );

    ::errno_t Result = 0;
    __QCS_PROTECT
    {
        Result = _time.asctime_s( pBuf, SizeInBytes, pTm );
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
///clock
#ifndef OS_EXPORTS_TIME_CLOCK
__QOR_INTERFACE( __CQOR ) clock_t clock( void )
{
    __QCS_FCONTEXT( "clock" );

    clock_t Result = 0;
    __QCS_PROTECT
    {
        Result = _time.clock();
    }__QCS_ENDPROTECT
    return Result;
}
#endif

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int clock_getcpuclockid( ::pid_t pid, ::clockid_t* pClockID )
{
    __QCS_FCONTEXT( "clock_getcpuclockid" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _time.clock_getcpuclockid( pid, pClockID );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int clock_getres( ::clockid_t clock, ::timespec* pTimeSpec )
{
    __QCS_FCONTEXT( "clock_getres" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _time.clock_getres( clock, pTimeSpec );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int clock_gettime( ::clockid_t clock, ::timespec* pTimeSpec )
{
    __QCS_FCONTEXT( "clock_gettime" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _time.clock_gettime( clock, pTimeSpec );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int clock_nanosleep( ::clockid_t clockid, int flags, const ::timespec* rqtp, ::timespec* rmtp )
{
    __QCS_FCONTEXT( "clock_nanosleep" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _time.clock_nanosleep( clockid, flags, rqtp, rmtp );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///difftime
__QOR_INTERFACE( __CQOR ) double difftime( time_t time1, time_t time0 )
{
    __QCS_FCONTEXT( "difftime" );

    double dResult = 0;
    __QCS_PROTECT
    {
        dResult = _time.difftime( time1, time0 );
    }__QCS_ENDPROTECT
    return dResult;
}

//--------------------------------------------------------------------------------
///mktime
__QOR_INTERFACE( __CQOR ) time_t mktime( tm* timeptr )
{
    __QCS_FCONTEXT( "mktime" );

    time_t Result = 0;
    __QCS_PROTECT
    {
        Result = _time.mktime( timeptr );
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
///nanosleep
__QOR_INTERFACE( __CQOR ) int nanosleep( const ::timespec* rqtp, ::timespec* rmtp )
{
    __QCS_FCONTEXT( "nanosleep" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _time.nanosleep( rqtp, rmtp );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///time
#ifndef OS_EXPORTS_TIME_TIME
__QOR_INTERFACE( __CQOR ) time_t time( time_t* timer )
{
    __QCS_FCONTEXT( "time" );

    time_t Result = 0;
    __QCS_PROTECT
    {
        Result = _time.time( timer );
    }__QCS_ENDPROTECT
    return Result;
}
#endif

//--------------------------------------------------------------------------------
///ctime
__QOR_INTERFACE( __CQOR ) char* ctime( const time_t* timer )
{
    __QCS_FCONTEXT( "ctime" );

    char* pResult = 0;
    __QCS_PROTECT
    {
        pResult = _time.ctime( timer );
    }__QCS_ENDPROTECT
    return pResult;
}

//--------------------------------------------------------------------------------
///gmtime
__QOR_INTERFACE( __CQOR ) tm* gmtime( const time_t* timer )
{
    __QCS_FCONTEXT( "gmtime" );

    tm* pResult = 0;
    __QCS_PROTECT
    {
        pResult = _time.gmtime( timer );
    }__QCS_ENDPROTECT
    return pResult;
}

//--------------------------------------------------------------------------------
///localtime
__QOR_INTERFACE( __CQOR ) tm* localtime( const time_t* timer )
{
    __QCS_FCONTEXT( "localtime" );

    tm* pResult = 0;
    __QCS_PROTECT
    {
        pResult = _time.localtime( timer );
    }__QCS_ENDPROTECT
    return pResult;
}

//--------------------------------------------------------------------------------
///strftime
__QOR_INTERFACE( __CQOR ) size_t strftime( char* __QCMP_RESTRICT s, size_t maxsize, const char* __QCMP_RESTRICT format, const tm* __QCMP_RESTRICT timeptr )
{
    __QCS_FCONTEXT( "strftime" );

    size_t Result = 0;
    __QCS_PROTECT
    {
        Result = _time.strftime( s, maxsize, format, timeptr );
    }__QCS_ENDPROTECT
    return Result;
}

__QOR_INTERFACE( __CQOR ) size_t strftime_l( char* __QCMP_RESTRICT, size_t, const char* __QCMP_RESTRICT, const ::tm* __QCMP_RESTRICT, ::locale_t )
{
	//TODO:
	return 0;
}

__QOR_INTERFACE( __CQOR ) size_t _strftime_l( char* strDest, size_t maxsize, const char* format, const ::tm* timeptr, ::locale_t locale )
{
	//TODO:
	return 0;
}

__QCMP_ENDLINKAGE_C
