//pthread.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//POSIX threads implementation

#include "CQOR/CQORPolicy.h"
#include <pthread.h>
#include <errno.h>
#include "SystemQOR.h"
#include QOR_SYS_PLATFORMHEADER(pthread.h)
#include "CodeQOR/Tracing/FunctionContextBase.h"
#include "CodeQOR/ErrorSystem/Error.h"
#include "CQOR.h"

//--------------------------------------------------------------------------------
namespace
{
	nsPlatform::Cpthread _pthread;
}//anonymous

__QCMP_STARTLINKAGE_C
       
//--------------------------------------------------------------------------------
///pthread_atfork
__QOR_INTERFACE( __CQOR ) int pthread_atfork( void (*p1)(void), void (*p2)(void), void(*p3)(void) )
{
    __QCS_FCONTEXT( "pthread_atfork" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.atfork( p1, p2, p3 );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_attr_destroy
__QOR_INTERFACE( __CQOR ) int pthread_attr_destroy( pthread_attr_t* p_pthread_attr )
{
    __QCS_FCONTEXT( "pthread_attr_destroy" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.attr_destroy( p_pthread_attr );
    }__QCS_ENDPROTECT
    return iResult;
}


//--------------------------------------------------------------------------------
///pthread_attr_getdetachstate
__QOR_INTERFACE( __CQOR ) int pthread_attr_getdetachstate( const pthread_attr_t* p_pthread_attr, int* pDetachState )
{
    __QCS_FCONTEXT( "pthread_attr_getdetachstate" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.attr_getdetachstate( p_pthread_attr, pDetachState );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_attr_getguardsize
///[XSI]
__QOR_INTERFACE( __CQOR ) int pthread_attr_getguardsize( const pthread_attr_t* p_pthread_attr, size_t* guardsize )
{
    __QCS_FCONTEXT( "pthread_attr_getguardsize" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.attr_getguardsize( p_pthread_attr, guardsize );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_attr_getinheritsched
///[TPS]
__QOR_INTERFACE( __CQOR ) int pthread_attr_getinheritsched( const pthread_attr_t* p_pthread_attr, int* inheritsched )
{
    __QCS_FCONTEXT( "pthread_attr_getinheritsched" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.attr_getinheritsched( p_pthread_attr, inheritsched );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_attr_getschedparam
///[TPS]
__QOR_INTERFACE( __CQOR ) int pthread_attr_getschedparam( const pthread_attr_t* p_pthread_attr, sched_param* param )
{
    __QCS_FCONTEXT( "pthread_attr_getschedparam" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.attr_getschedparam( p_pthread_attr, param );
    }__QCS_ENDPROTECT
    return iResult;
}
//--------------------------------------------------------------------------------
///pthread_attr_getschedpolicy
///[TPS]
__QOR_INTERFACE( __CQOR ) int pthread_attr_getschedpolicy( const pthread_attr_t* p_pthread_attr, int* policy )
{
    __QCS_FCONTEXT( "pthread_attr_getschedpolicy" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.attr_getschedpolicy( p_pthread_attr, policy );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_attr_getscope
///[TPS]
__QOR_INTERFACE( __CQOR ) int pthread_attr_getscope( const pthread_attr_t* p_pthread_attr, int* contentionscope )
{
    __QCS_FCONTEXT( "pthread_attr_getscope" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.attr_getscope( p_pthread_attr, contentionscope );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_attr_getstack
///[TSA TSS]
__QOR_INTERFACE( __CQOR ) int pthread_attr_getstack( const pthread_attr_t* p_pthread_attr, void** stackaddr, size_t* stacksize )
{
    __QCS_FCONTEXT( "pthread_attr_getstack" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.attr_getstack( p_pthread_attr, stackaddr, stacksize );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_attr_getstackaddr
///[TSA]
__QOR_INTERFACE( __CQOR ) int pthread_attr_getstackaddr( const pthread_attr_t* p_pthread_attr, void** stackaddr )
{
    __QCS_FCONTEXT( "pthread_attr_getstackaddr" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.attr_getstackaddr( p_pthread_attr, stackaddr );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_attr_getstacksize
///[TSS]
__QOR_INTERFACE( __CQOR ) int pthread_attr_getstacksize( const pthread_attr_t* p_pthread_attr, size_t* stacksize )
{
    __QCS_FCONTEXT( "pthread_attr_getstacksize" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.attr_getstacksize( p_pthread_attr, stacksize );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_attr_init
__QOR_INTERFACE( __CQOR ) int pthread_attr_init( pthread_attr_t* p_pthread_attr )
{
    __QCS_FCONTEXT( "pthread_attr_init" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.attr_init( p_pthread_attr );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_attr_setdetachstate
__QOR_INTERFACE( __CQOR ) int pthread_attr_setdetachstate( pthread_attr_t* p_pthread_attr, int iDetachState )
{
    __QCS_FCONTEXT( "pthread_attr_setdetachstate" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.attr_setdetachstate( p_pthread_attr, iDetachState );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_attr_setguardsize
///[XSI]
__QOR_INTERFACE( __CQOR ) int pthread_attr_setguardsize( pthread_attr_t* p_pthread_attr, size_t guardsize )
{
    __QCS_FCONTEXT( "pthread_attr_setguardsize" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.attr_setguardsize( p_pthread_attr, guardsize );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_attr_setinheritsched
///[TPS]
__QOR_INTERFACE( __CQOR ) int pthread_attr_setinheritsched( pthread_attr_t* p_pthread_attr, int inheritsched )
{
    __QCS_FCONTEXT( "pthread_attr_setinheritsched" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.attr_setinheritsched( p_pthread_attr, inheritsched );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_attr_setschedparam
__QOR_INTERFACE( __CQOR ) int pthread_attr_setschedparam( pthread_attr_t* p_pthread_attr, const sched_param* param )
{
    __QCS_FCONTEXT( "pthread_attr_setschedparam" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.attr_setschedparam( p_pthread_attr, param );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_attr_setschedpolicy
///[TPS]
__QOR_INTERFACE( __CQOR ) int pthread_attr_setschedpolicy( pthread_attr_t* p_pthread_attr, int iPolicy )
{
    __QCS_FCONTEXT( "pthread_attr_setschedpolicy" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.attr_setschedpolicy( p_pthread_attr, iPolicy );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_attr_setscope
///[TPS]
__QOR_INTERFACE( __CQOR ) int pthread_attr_setscope( pthread_attr_t* p_pthread_attr, int iContentionScope )
{
    __QCS_FCONTEXT( "pthread_attr_setscope" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.attr_setscope( p_pthread_attr, iContentionScope );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_attr_setstack
///[TSA TSS]
__QOR_INTERFACE( __CQOR ) int pthread_attr_setstack( pthread_attr_t* p_pthread_attr, void* stackaddr, size_t stacksize )
{
    __QCS_FCONTEXT( "pthread_attr_setstack" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.attr_setstack( p_pthread_attr, stackaddr, stacksize );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_attr_setstackaddr
///[TSA]
__QOR_INTERFACE( __CQOR ) int pthread_attr_setstackaddr( pthread_attr_t* p_pthread_attr, void* pStackAddr )
{
    __QCS_FCONTEXT( "pthread_attr_setstackaddr" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.attr_setstackaddr( p_pthread_attr, pStackAddr );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_attr_setstacksize
///[TSS]
__QOR_INTERFACE( __CQOR ) int pthread_attr_setstacksize( pthread_attr_t* p_pthread_attr, size_t StackSize )
{
    __QCS_FCONTEXT( "pthread_attr_setstacksize" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.attr_setstacksize( p_pthread_attr, StackSize );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_barrier_destroy
///[BAR]
__QOR_INTERFACE( __CQOR ) int pthread_barrier_destroy( pthread_barrier_t* p_pthread_barrier )
{
    __QCS_FCONTEXT( "pthread_barrier_destroy" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.barrier_destroy( p_pthread_barrier );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_barrier_init
///[BAR]
__QOR_INTERFACE( __CQOR ) int pthread_barrier_init( pthread_barrier_t* pp_barrier, const pthread_barrierattr_t* pp_barrier_attr, unsigned uiCount )
{
    __QCS_FCONTEXT( "pthread_barrier_init" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.barrier_init( pp_barrier, pp_barrier_attr, uiCount );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_barrier_wait
///[BAR]
__QOR_INTERFACE( __CQOR ) int pthread_barrier_wait( pthread_barrier_t* pp_barrier )
{
    __QCS_FCONTEXT( "pthread_barrier_wait" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.barrier_wait( pp_barrier );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_barrierattr_destroy
///[BAR]
__QOR_INTERFACE( __CQOR ) int pthread_barrierattr_destroy( pthread_barrierattr_t* pp_barrierattr )
{
    __QCS_FCONTEXT( "pthread_barrierattr_destroy" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.barrierattr_destroy( pp_barrierattr );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
//[BAR TSH]
///pthread_barrierattr_getpshared
__QOR_INTERFACE( __CQOR ) int pthread_barrierattr_getpshared( const pthread_barrierattr_t* pp_barrierattr, int* p_pshared )
{
    __QCS_FCONTEXT( "pthread_barrierattr_getpshared" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.barrierattr_getpshared( pp_barrierattr, p_pshared );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///[BAR]
__QOR_INTERFACE( __CQOR ) int pthread_barrierattr_init( pthread_barrierattr_t* pp_barrierattr )
{
    __QCS_FCONTEXT( "pthread_barrierattr_init" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.barrierattr_init( pp_barrierattr );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
//[BAR TSH]
__QOR_INTERFACE( __CQOR ) int pthread_barrierattr_setpshared( pthread_barrierattr_t* pp_barrierattr, int iPShared )
{
    __QCS_FCONTEXT( "pthread_barrierattr_setpshared" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.barrierattr_setpshared( pp_barrierattr, iPShared );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_cancel
__QOR_INTERFACE( __CQOR ) int pthread_cancel( pthread_t hpthread )
{
    __QCS_FCONTEXT( "pthread_cancel" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.cancel( hpthread );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_cleanup_push
/*
__QOR_INTERFACE( __CQOR ) void pthread_cleanup_push( void ( *routine )(void *), void* arg )
{
    __QCS_FCONTEXT( "pthread_cleanup_push" );

    __QCS_PROTECT
    {
        _pthread.cleanup_push( routine, arg );
    }__QCS_ENDPROTECT
}
*/

//--------------------------------------------------------------------------------
/*
///pthread_cleanup_pop
__QOR_INTERFACE( __CQOR ) void pthread_cleanup_pop( int iExecute )
{
    __QCS_FCONTEXT( "pthread_cleanup_pop" );

    __QCS_PROTECT
    {
        _pthread.cleanup_pop( iExecute );
    }__QCS_ENDPROTECT
}
*/

//--------------------------------------------------------------------------------
///pthread_cond_broadcast
__QOR_INTERFACE( __CQOR ) int pthread_cond_broadcast( pthread_cond_t* pp_pthread_cond )
{
    __QCS_FCONTEXT( "pthread_cond_broadcast" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.cond_broadcast( pp_pthread_cond );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_cond_destroy
__QOR_INTERFACE( __CQOR ) int pthread_cond_destroy( pthread_cond_t* pp_pthread_cond )
{
    __QCS_FCONTEXT( "pthread_cond_destroy" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.cond_destroy( pp_pthread_cond );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_cond_init
__QOR_INTERFACE( __CQOR ) int pthread_cond_init( pthread_cond_t* pp_pthread_cond, const pthread_condattr_t* pp_pthread_condattr )
{
    __QCS_FCONTEXT( "pthread_cond_init" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.cond_init( pp_pthread_cond, pp_pthread_condattr );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_cond_signal
__QOR_INTERFACE( __CQOR ) int pthread_cond_signal( pthread_cond_t* pp_pthread_cond )
{
    __QCS_FCONTEXT( "pthread_cond_signal" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.cond_signal( pp_pthread_cond );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_cond_timedwait
__QOR_INTERFACE( __CQOR ) int pthread_cond_timedwait( pthread_cond_t* pp_pthread_cond, pthread_mutex_t* pp_pthread_mutex, const timespec* ptimespec )
{
    __QCS_FCONTEXT( "pthread_cond_timedwait" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.cond_timedwait( pp_pthread_cond, pp_pthread_mutex, ptimespec );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_cond_wait
__QOR_INTERFACE( __CQOR ) int pthread_cond_wait( pthread_cond_t* pp_pthread_cond, pthread_mutex_t* pp_pthread_mutex )
{
    __QCS_FCONTEXT( "pthread_cond_wait" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.cond_wait( pp_pthread_cond, pp_pthread_mutex );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_condattr_destroy
__QOR_INTERFACE( __CQOR ) int pthread_condattr_destroy( pthread_condattr_t* pp_pthread_condattr )
{
    __QCS_FCONTEXT( "pthread_condattr_destroy" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.condattr_destroy( pp_pthread_condattr );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_condattr_getclock
///[CS]
__QOR_INTERFACE( __CQOR ) int pthread_condattr_getclock( const pthread_condattr_t* pp_pthread_condattr, clockid_t* pClockId )
{
    __QCS_FCONTEXT( "pthread_condattr_getclock" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.condattr_getclock( pp_pthread_condattr, pClockId );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_condattr_getpshared
///[TSH]
__QOR_INTERFACE( __CQOR ) int pthread_condattr_getpshared( const pthread_condattr_t* pp_pthread_condattr, int* piPShared )
{
    __QCS_FCONTEXT( "pthread_condattr_getpshared" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.condattr_getpshared( pp_pthread_condattr, piPShared );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_condattr_init
__QOR_INTERFACE( __CQOR ) int pthread_condattr_init( pthread_condattr_t* pp_pthread_condattr )
{
    __QCS_FCONTEXT( "pthread_condattr_init" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.condattr_init( pp_pthread_condattr );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_condattr_setclock
///[CS]
__QOR_INTERFACE( __CQOR ) int pthread_condattr_setclock( pthread_condattr_t* pp_pthread_condattr, clockid_t ClockId )
{
    __QCS_FCONTEXT( "pthread_condattr_setclock" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.condattr_setclock( pp_pthread_condattr, ClockId );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_condattr_setpshared
///[TSH]
__QOR_INTERFACE( __CQOR ) int pthread_condattr_setpshared( pthread_condattr_t* pp_pthread_condattr, int iPShared )
{
    __QCS_FCONTEXT( "pthread_condattr_setpshared" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.condattr_setpshared( pp_pthread_condattr, iPShared );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_create
__QOR_INTERFACE( __CQOR ) int pthread_create( pthread_t* phThread, const pthread_attr_t* pp_threadattr, void *(*start_routine)(void *), void* arg )
{
    __QCS_FCONTEXT( "pthread_create" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.create( phThread, pp_threadattr, start_routine, arg );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_detach
__QOR_INTERFACE( __CQOR ) int pthread_detach( pthread_t hThread )
{
    __QCS_FCONTEXT( "pthread_detach" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.detach( hThread );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_equal
__QOR_INTERFACE( __CQOR ) int pthread_equal( pthread_t hThread1, pthread_t hThread2 )
{
    __QCS_FCONTEXT( "pthread_equal" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.equal( hThread1, hThread2 );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_exit
__QOR_INTERFACE( __CQOR ) void pthread_exit( void* value_ptr )
{
    __QCS_FCONTEXT( "pthread_exit" );

    __QCS_PROTECT
    {
        _pthread.exit( value_ptr );
    }__QCS_ENDPROTECT
}

//--------------------------------------------------------------------------------
///pthread_getconcurrency
///[XSI]
__QOR_INTERFACE( __CQOR ) int pthread_getconcurrency( void )
{
    __QCS_FCONTEXT( "pthread_getconcurrency" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.getconcurrency();
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_getcpuclockid
///[TCT]
__QOR_INTERFACE( __CQOR ) int pthread_getcpuclockid( pthread_t hThread, clockid_t* pClockId )
{
    __QCS_FCONTEXT( "pthread_getcpuclockid" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.getcpuclockid( hThread, pClockId );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_getschedparam
///[TPS]
__QOR_INTERFACE( __CQOR ) int pthread_getschedparam( pthread_t hThread, int* pPolicy, sched_param* pParam )
{
    __QCS_FCONTEXT( "pthread_getschedparam" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.getschedparam( hThread, pPolicy, pParam );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_getspecific
__QOR_INTERFACE( __CQOR ) void* pthread_getspecific( pthread_key_t p_pthreadkey )
{
    __QCS_FCONTEXT( "pthread_getspecific" );

    void* pResult = 0;
    __QCS_PROTECT
    {
        pResult = _pthread.getspecific( p_pthreadkey );
    }__QCS_ENDPROTECT
    return pResult;
}

//--------------------------------------------------------------------------------
///pthread_join
__QOR_INTERFACE( __CQOR ) int pthread_join( pthread_t hThread, void** ppValue )
{
    __QCS_FCONTEXT( "pthread_join" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.join( hThread, ppValue );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_key_create
__QOR_INTERFACE( __CQOR ) int pthread_key_create( pthread_key_t* pp_pthreadkey, void (*destructor)(void *) )
{
    __QCS_FCONTEXT( "pthread_key_create" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.key_create( pp_pthreadkey, destructor );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_key_delete
__QOR_INTERFACE( __CQOR ) int pthread_key_delete( pthread_key_t p_pthreadkey )
{
    __QCS_FCONTEXT( "pthread_key_delete" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.key_delete( p_pthreadkey );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_mutex_consistent
__QOR_INTERFACE( __CQOR ) int pthread_mutex_consistent( pthread_mutex_t* pp_pthreadmutex)
{
    __QCS_FCONTEXT( "pthread_mutex_consistent" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.mutex_consistent( pp_pthreadmutex );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_mutex_destroy
__QOR_INTERFACE( __CQOR ) int pthread_mutex_destroy( pthread_mutex_t* pp_pthreadmutex )
{
    __QCS_FCONTEXT( "pthread_mutex_destroy" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.mutex_destroy( pp_pthreadmutex );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_mutex_getprioceiling
///[TPP]
__QOR_INTERFACE( __CQOR ) int pthread_mutex_getprioceiling( const pthread_mutex_t* pp_pthreadmutex, int* pPrioCeiling )
{
    __QCS_FCONTEXT( "pthread_mutex_getprioceiling" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.mutex_getprioceiling( pp_pthreadmutex, pPrioCeiling );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_mutex_init
__QOR_INTERFACE( __CQOR ) int pthread_mutex_init( pthread_mutex_t* pp_pthreadmutex, const pthread_mutexattr_t* pp_pthreadmutexattr )
{
    __QCS_FCONTEXT( "pthread_mutex_init" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.mutex_init( pp_pthreadmutex, pp_pthreadmutexattr );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_mutex_lock
__QOR_INTERFACE( __CQOR ) int pthread_mutex_lock( pthread_mutex_t* pp_pthreadmutex )
{
    __QCS_FCONTEXT( "pthread_mutex_lock" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.mutex_lock( pp_pthreadmutex );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_mutex_setprioceiling
///[TPP]
__QOR_INTERFACE( __CQOR ) int pthread_mutex_setprioceiling( pthread_mutex_t* pp_pthreadmutex, int iPrioCeiling, int* pOldCieling )
{
    __QCS_FCONTEXT( "pthread_mutex_setprioceiling" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.mutex_setprioceiling( pp_pthreadmutex, iPrioCeiling, pOldCieling );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_mutex_timedlock
///[TMO]
__QOR_INTERFACE( __CQOR ) int pthread_mutex_timedlock( pthread_mutex_t* pp_pthreadmutex, const timespec* ptimespec )
{
    __QCS_FCONTEXT( "pthread_mutex_setprioceiling" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.mutex_timedlock( pp_pthreadmutex, ptimespec );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_mutex_trylock
__QOR_INTERFACE( __CQOR ) int pthread_mutex_trylock( pthread_mutex_t* pp_pthreadmutex )
{
    __QCS_FCONTEXT( "pthread_mutex_trylock" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.mutex_trylock( pp_pthreadmutex );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_mutex_unlock
__QOR_INTERFACE( __CQOR ) int pthread_mutex_unlock( pthread_mutex_t* pp_pthreadmutex )
{
    __QCS_FCONTEXT( "pthread_mutex_unlock" );
    ////__QCRT_ERRDOMAIN;
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.mutex_unlock( pp_pthreadmutex );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_mutexattr_destroy
__QOR_INTERFACE( __CQOR ) int pthread_mutexattr_destroy( pthread_mutexattr_t* pp_pthreadmutexattr )
{
    __QCS_FCONTEXT( "pthread_mutexattr_destroy" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.mutexattr_destroy( pp_pthreadmutexattr );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_mutexattr_getprioceiling
///[TPP]
__QOR_INTERFACE( __CQOR ) int pthread_mutexattr_getprioceiling( const pthread_mutexattr_t* pp_pthreadmutexattr, int* piPrioCeiling )
{
    __QCS_FCONTEXT( "pthread_mutexattr_getprioceiling" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.mutexattr_getprioceiling( pp_pthreadmutexattr, piPrioCeiling );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_mutexattr_getprotocol
///[TPP|TPI]
__QOR_INTERFACE( __CQOR ) int pthread_mutexattr_getprotocol( const pthread_mutexattr_t* pp_pthreadmutexattr, int* piProtocol )
{
    __QCS_FCONTEXT( "pthread_mutexattr_getprotocol" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.mutexattr_getprotocol( pp_pthreadmutexattr, piProtocol );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_mutexattr_getpshared
///[TSH]
__QOR_INTERFACE( __CQOR ) int pthread_mutexattr_getpshared( const pthread_mutexattr_t* pp_pthreadmutexattr, int* piPShared )
{
    __QCS_FCONTEXT( "pthread_mutexattr_getpshared" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.mutexattr_getpshared( pp_pthreadmutexattr, piPShared );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
//pthread_mutexattr_getrobust
__QOR_INTERFACE( __CQOR ) int pthread_mutexattr_getrobust( const pthread_mutexattr_t* __QCMP_RESTRICT pp_pthreadmutexattr, int* __QCMP_RESTRICT piPRobust )
{
    __QCS_FCONTEXT( "pthread_mutexattr_getrobust" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.mutexattr_getrobust( pp_pthreadmutexattr, piPRobust );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_mutexattr_gettype
///[XSI]
__QOR_INTERFACE( __CQOR ) int pthread_mutexattr_gettype( const pthread_mutexattr_t* pp_pthreadmutexattr, int* piType )
{
    __QCS_FCONTEXT( "pthread_mutexattr_gettype" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.mutexattr_gettype( pp_pthreadmutexattr, piType );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_mutexattr_init
__QOR_INTERFACE( __CQOR ) int pthread_mutexattr_init( pthread_mutexattr_t* pp_pthreadmutexattr )
{
    __QCS_FCONTEXT( "pthread_mutexattr_init" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.mutexattr_init( pp_pthreadmutexattr );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_mutexattr_setprioceiling
///[TPP]
__QOR_INTERFACE( __CQOR ) int pthread_mutexattr_setprioceiling( pthread_mutexattr_t* pp_pthreadmutexattr, int iPrioCeiling )
{
    __QCS_FCONTEXT( "pthread_mutexattr_setprioceiling" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.mutexattr_setprioceiling( pp_pthreadmutexattr, iPrioCeiling );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_mutexattr_setprotocol
///[TPP|TPI]
__QOR_INTERFACE( __CQOR ) int pthread_mutexattr_setprotocol( pthread_mutexattr_t* pp_pthreadmutexattr, int iProtocol )
{
    __QCS_FCONTEXT( "pthread_mutexattr_setprotocol" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.mutexattr_setprotocol( pp_pthreadmutexattr, iProtocol );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_mutexattr_setpshared
///[TSH]
__QOR_INTERFACE( __CQOR ) int pthread_mutexattr_setpshared( pthread_mutexattr_t* pp_pthreadmutexattr, int iPShared )
{
    __QCS_FCONTEXT( "pthread_mutexattr_setpshared" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.mutexattr_setpshared( pp_pthreadmutexattr, iPShared );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int pthread_mutexattr_setrobust( pthread_mutexattr_t* pp_pthreadmutexattr, int iRobust )
{
    __QCS_FCONTEXT( "pthread_mutexattr_setrobust" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.mutexattr_settype( pp_pthreadmutexattr, iRobust );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_mutexattr_settype
///[XSI]
__QOR_INTERFACE( __CQOR ) int pthread_mutexattr_settype( pthread_mutexattr_t* pp_pthreadmutexattr, int iType )
{
    __QCS_FCONTEXT( "pthread_mutexattr_settype" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.mutexattr_settype( pp_pthreadmutexattr, iType );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_once
__QOR_INTERFACE( __CQOR ) int pthread_once( pthread_once_t* pp_pthreadonce, void (*init_routine)( void ) )
{
    __QCS_FCONTEXT( "pthread_once" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.once( pp_pthreadonce, init_routine );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_rwlock_destroy
__QOR_INTERFACE( __CQOR ) int pthread_rwlock_destroy( pthread_rwlock_t* pp_pthreadrwlock )
{
    __QCS_FCONTEXT( "pthread_rwlock_destroy" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.rwlock_destroy( pp_pthreadrwlock );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_rwlock_init
__QOR_INTERFACE( __CQOR ) int pthread_rwlock_init( pthread_rwlock_t* pp_pthreadrwlock, const pthread_rwlockattr_t* pp_pthreadrwlockattr )
{
    __QCS_FCONTEXT( "pthread_rwlock_init" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.rwlock_init( pp_pthreadrwlock, pp_pthreadrwlockattr );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
//pthread_rwlock_rdlock
__QOR_INTERFACE( __CQOR ) int pthread_rwlock_rdlock( pthread_rwlock_t* pp_pthreadrwlock )
{
    __QCS_FCONTEXT( "pthread_rwlock_rdlock" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.rwlock_rdlock( pp_pthreadrwlock );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_rwlock_timedrdlock
///[TMO]
__QOR_INTERFACE( __CQOR ) int pthread_rwlock_timedrdlock( pthread_rwlock_t* pp_pthreadrwlock, const timespec* ptimespec )
{
    __QCS_FCONTEXT( "pthread_rwlock_timedrdlock" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.rwlock_timedrdlock( pp_pthreadrwlock, ptimespec );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_rwlock_timedwrlock
///[TMO]
__QOR_INTERFACE( __CQOR ) int pthread_rwlock_timedwrlock( pthread_rwlock_t* pp_pthreadrwlock, const timespec* ptimespec )
{
    __QCS_FCONTEXT( "pthread_rwlock_timedwrlock" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.rwlock_timedwrlock( pp_pthreadrwlock, ptimespec );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_rwlock_tryrdlock
__QOR_INTERFACE( __CQOR ) int pthread_rwlock_tryrdlock( pthread_rwlock_t* pp_pthreadrwlock )
{
    __QCS_FCONTEXT( "pthread_rwlock_tryrdlock" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.rwlock_tryrdlock( pp_pthreadrwlock );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_rwlock_trywrlock
__QOR_INTERFACE( __CQOR ) int pthread_rwlock_trywrlock( pthread_rwlock_t* pp_pthreadrwlock )
{
    __QCS_FCONTEXT( "pthread_rwlock_trywrlock" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.rwlock_trywrlock( pp_pthreadrwlock );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_rwlock_unlock
__QOR_INTERFACE( __CQOR ) int pthread_rwlock_unlock( pthread_rwlock_t* pp_pthreadrwlock )
{
    __QCS_FCONTEXT( "pthread_rwlock_unlock" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.rwlock_unlock( pp_pthreadrwlock );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_rwlock_wrlock
__QOR_INTERFACE( __CQOR ) int pthread_rwlock_wrlock( pthread_rwlock_t* pp_pthreadrwlock )
{
    __QCS_FCONTEXT( "pthread_rwlock_wrlock" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.rwlock_wrlock( pp_pthreadrwlock );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_rwlockattr_destroy
__QOR_INTERFACE( __CQOR ) int pthread_rwlockattr_destroy( pthread_rwlockattr_t* pp_pthreadrwlockattr )
{
    __QCS_FCONTEXT( "pthread_rwlockattr_destroy" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.rwlockattr_destroy( pp_pthreadrwlockattr );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_rwlockattr_getpshared
///[TSH]
__QOR_INTERFACE( __CQOR ) int pthread_rwlockattr_getpshared( const pthread_rwlockattr_t* pp_pthreadrwlockattr, int* piPShared )
{
    __QCS_FCONTEXT( "pthread_rwlockattr_getpshared" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.rwlockattr_getpshared( pp_pthreadrwlockattr, piPShared );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_rwlockattr_init
__QOR_INTERFACE( __CQOR ) int pthread_rwlockattr_init( pthread_rwlockattr_t* pp_pthreadrwlockattr )
{
    __QCS_FCONTEXT( "pthread_rwlockattr_getpshared" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.rwlockattr_init( pp_pthreadrwlockattr );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_rwlockattr_setpshared
///[TSH]
__QOR_INTERFACE( __CQOR ) int pthread_rwlockattr_setpshared( pthread_rwlockattr_t* pp_pthreadrwlockattr, int iPShared )
{
    __QCS_FCONTEXT( "pthread_rwlockattr_setpshared" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.rwlockattr_setpshared( pp_pthreadrwlockattr, iPShared );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_self
__QOR_INTERFACE( __CQOR ) pthread_t pthread_self( void )
{
    __QCS_FCONTEXT( "pthread_rwlockattr_setpshared" );
    ////__QCRT_ERRDOMAIN;
    pthread_t Result = 0;
    __QCS_PROTECT
    {
        Result = _pthread.self();
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
///pthread_setcancelstate
__QOR_INTERFACE( __CQOR ) int pthread_setcancelstate( int iState, int* piOldState )
{
    __QCS_FCONTEXT( "pthread_setcancelstate" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.setcancelstate( iState, piOldState );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_setcanceltype
__QOR_INTERFACE( __CQOR ) int pthread_setcanceltype( int iType, int* piOldType )
{
    __QCS_FCONTEXT( "pthread_setcanceltype" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.setcanceltype( iType, piOldType );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_setconcurrency
///[XSI]
__QOR_INTERFACE( __CQOR ) int pthread_setconcurrency( int iConcurrency )
{
    __QCS_FCONTEXT( "pthread_setconcurrency" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.setconcurrency( iConcurrency );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_setschedparam
///[TPS]
__QOR_INTERFACE( __CQOR ) int pthread_setschedparam( pthread_t hThread, int iPolicy, const sched_param* pParam )
{
    __QCS_FCONTEXT( "pthread_setschedparam" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.setschedparam( hThread, iPolicy, pParam );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_setschedprio
///[TPS]
__QOR_INTERFACE( __CQOR ) int pthread_setschedprio( pthread_t hThread, int iPriority )
{
    __QCS_FCONTEXT( "pthread_setschedprio" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.setschedprio( hThread, iPriority );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_setspecific
__QOR_INTERFACE( __CQOR ) int pthread_setspecific( pthread_key_t key, const void* pValue )
{
    __QCS_FCONTEXT( "pthread_setspecific" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.setspecific( key, pValue );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_spin_destroy
///[SPI]
__QOR_INTERFACE( __CQOR ) int pthread_spin_destroy( pthread_spinlock_t* pp_pthreadspinlock )
{
    __QCS_FCONTEXT( "pthread_spin_destroy" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.spin_destroy( pp_pthreadspinlock );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_spin_init
///[SPI]
__QOR_INTERFACE( __CQOR ) int pthread_spin_init( pthread_spinlock_t* pp_pthreadspinlock, int iPShared )
{
    __QCS_FCONTEXT( "pthread_spin_init" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.spin_init( pp_pthreadspinlock, iPShared );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_spin_lock
///[SPI]
__QOR_INTERFACE( __CQOR ) int pthread_spin_lock( pthread_spinlock_t* pp_pthreadspinlock )
{
    __QCS_FCONTEXT( "pthread_spin_lock" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.spin_lock( pp_pthreadspinlock );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_spin_trylock
///[SPI]
__QOR_INTERFACE( __CQOR ) int pthread_spin_trylock( pthread_spinlock_t* pp_pthreadspinlock )
{
    __QCS_FCONTEXT( "pthread_spin_trylock" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.spin_trylock( pp_pthreadspinlock );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_spin_unlock
///[SPI]
__QOR_INTERFACE( __CQOR ) int pthread_spin_unlock( pthread_spinlock_t* pp_pthreadspinlock )
{
    __QCS_FCONTEXT( "pthread_spin_unlock" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _pthread.spin_unlock( pp_pthreadspinlock );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///pthread_testcancel
__QOR_INTERFACE( __CQOR ) void pthread_testcancel( void )
{
    __QCS_FCONTEXT( "pthread_testcancel" );

    __QCS_PROTECT
    {
        _pthread.testcancel();
    }__QCS_ENDPROTECT
}

__QCMP_ENDLINKAGE_C
