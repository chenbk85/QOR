//semaphore.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//POSIX semaphore implementation

#include "CQOR/CQORPolicy.h"
#include <errno.h>
#include <semaphore.h>
#include "SystemQOR.h"
#include QOR_SYS_PLATFORMHEADER(semaphore.h)
#include "CodeQOR/Tracing/FunctionContextBase.h"
#include "CodeQOR/ErrorSystem/Error.h"
#include "CQOR.h"

//--------------------------------------------------------------------------------
namespace 
{
	nsPlatform::Csemaphore _semaphore;
}//anonymous


__QCMP_STARTLINKAGE_C

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int sem_close( sem_t* pSem )
{
    __QCS_FCONTEXT( "sem_close" );
    int iResult = 0;
	__QCS_PROTECT
	{
		iResult = _semaphore.sem_close( pSem );
	}__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int sem_destroy( sem_t* pSem )
{
    __QCS_FCONTEXT( "sem_destroy" );
    int iResult = 0;
	__QCS_PROTECT
	{
		iResult = _semaphore.sem_destroy( pSem );
	}__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int sem_getvalue( sem_t* __QCMP_RESTRICT pSem, int* __QCMP_RESTRICT piValue )
{
    __QCS_FCONTEXT( "sem_getvalue" );
    int iResult = 0;
	__QCS_PROTECT
	{
		iResult = _semaphore.sem_getvalue( pSem, piValue );
	}__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int sem_init( sem_t* pSem, int iPShared, unsigned uValue )
{
    __QCS_FCONTEXT( "sem_init" );
    int iResult = 0;
	__QCS_PROTECT
	{
		iResult = _semaphore.sem_init( pSem, iPShared, uValue );
	}__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) sem_t* sem_open( const char* szName, int iOFlags, ... )
{
    __QCS_FCONTEXT( "sem_open" );

    sem_t* pSem = 0;
	__QCS_PROTECT
	{
		//TODO: vargs
		pSem = _semaphore.sem_open( szName, iOFlags );
	}__QCS_ENDPROTECT
    return pSem;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int sem_post( sem_t* pSem )
{
    __QCS_FCONTEXT( "sem_post" );

    int iResult = 0;
	__QCS_PROTECT
	{
		iResult = _semaphore.sem_post( pSem );
	}__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
//[TMO]
__QOR_INTERFACE( __CQOR ) int sem_timedwait( sem_t* __QCMP_RESTRICT pSem, const timespec* __QCMP_RESTRICT pAbs_Timeout )
{
    __QCS_FCONTEXT( "sem_timedwait" );

    int iResult = 0;
	__QCS_PROTECT
	{
		iResult = _semaphore.sem_timedwait( pSem, pAbs_Timeout );
	}__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int sem_trywait( sem_t* pSem )
{
    __QCS_FCONTEXT( "sem_trywait" );

    int iResult = 0;
	__QCS_PROTECT
	{
		iResult = _semaphore.sem_trywait( pSem );
	}__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int sem_unlink( const char* szName )
{
    __QCS_FCONTEXT( "sem_unlink" );

    int iResult = 0;
	__QCS_PROTECT
	{
		iResult = _semaphore.sem_unlink( szName );
	}__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int sem_wait( sem_t* pSem )
{
    __QCS_FCONTEXT( "sem_wait" );

	int iResult = 0;
	__QCS_PROTECT
	{
		iResult = _semaphore.sem_wait( pSem );
	}__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
//extension
__QOR_INTERFACE( __CQOR ) int sem_post_multiple( sem_t* psem, int count )
{
    __QCS_FCONTEXT( "sem_post_multiple" );
    int iResult = 0;
    __QCS_PROTECT
    {
		iResult = _semaphore.sem_post_multiple( psem, count );
    }__QCS_ENDPROTECT
    return iResult;
}

__QCMP_ENDLINKAGE_C
