//stdlib.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Generic stdlib implementation

#include "CQOR/CQORPolicy.h"
#include <stdlib.h>
#include <errno.h>
#include "SystemQOR.h"
#include QOR_SYS_PLATFORMHEADER(stdlib.h)
#include "CodeQOR/Tracing/FunctionContextBase.h"
#include "CodeQOR/ErrorSystem/Error.h"
#include "CQOR.h"

//--------------------------------------------------------------------------------
namespace
{
	nsPlatform::Cstdlib _stdlib;
	char** g_environ = 0;
	char* g_acmdln = 0;
	wchar_t* g_wcmdln = 0;
	char* g_aenvptr = 0;
	wchar_t* g_wenvptr = 0;
}//anonymous

__QCMP_STARTLINKAGE_C

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) char**& f_environ()
{
	return g_environ;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) char*& f_acmdln()
{
	return g_acmdln;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) wchar_t*& f_wcmdln()
{
	return g_wcmdln;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) char*& f_aenvptr()
{
	return g_aenvptr;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) wchar_t*& f_wenvptr()
{
	return g_wenvptr;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) errno_t _get_doserrno( int* pValue )
{
	__QCS_FCONTEXT( "_get_doserrno" );

	errno_t Result = 0;
	__QCS_PROTECT
	{
		Result = _stdlib._get_doserrno( pValue );
	}__QCS_ENDPROTECT
	return Result;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) errno_t _set_doserrno( int value )
{
	__QCS_FCONTEXT( "_set_doserrno" );

	errno_t Result = 0;
	__QCS_PROTECT
	{
		Result = _stdlib._set_doserrno( value );
	}__QCS_ENDPROTECT
	return Result;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) double atof( const char* nptr )
{
    __QCS_FCONTEXT( "atof" );

    double dResult = 0;
    __QCS_PROTECT
    {
        dResult = _stdlib.atof( nptr );
    }__QCS_ENDPROTECT
    return dResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int atoi( const char* nptr )
{
    __QCS_FCONTEXT( "atoi" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _stdlib.atoi( nptr );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) long int atol( const char* nptr )
{
    __QCS_FCONTEXT( "atol" );

    long int liResult = 0;
    __QCS_PROTECT
    {
        liResult = _stdlib.atol( nptr );
    }__QCS_ENDPROTECT
    return liResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) long long int atoll( const char* nptr )
{
    __QCS_FCONTEXT( "atoll" );

    long long int lliResult = 0;
    __QCS_PROTECT
    {
        lliResult = _stdlib.atoll( nptr );
    }__QCS_ENDPROTECT
    return lliResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) double strtod( const char* __QCMP_RESTRICT nptr, char** __QCMP_RESTRICT endptr )
{
    __QCS_FCONTEXT( "strtod" );

    double dResult = 0;
    __QCS_PROTECT
    {
        dResult = _stdlib.strtod( nptr, endptr );
    }__QCS_ENDPROTECT
    return dResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) float strtof( const char* __QCMP_RESTRICT nptr, char** __QCMP_RESTRICT endptr )
{
    __QCS_FCONTEXT( "strtof" );

    float fResult = 0;
    __QCS_PROTECT
    {
        fResult = _stdlib.strtof( nptr, endptr );
    }__QCS_ENDPROTECT
    return fResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) long double strtold( const char* __QCMP_RESTRICT nptr, char** __QCMP_RESTRICT endptr )
{
    __QCS_FCONTEXT( "strtold" );

    long double ldResult = 0;
    __QCS_PROTECT
    {
        ldResult = _stdlib.strtold( nptr, endptr);
    }__QCS_ENDPROTECT
    return ldResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) long int strtol( const char* __QCMP_RESTRICT nptr, char** __QCMP_RESTRICT endptr, int base )
{
    __QCS_FCONTEXT( "strtol" );

    long int liResult = 0;
    __QCS_PROTECT
    {
        liResult = _stdlib.strtol( nptr, endptr, base);
    }__QCS_ENDPROTECT
    return liResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) long long int strtoll( const char* __QCMP_RESTRICT nptr, char** __QCMP_RESTRICT endptr, int base )
{
    __QCS_FCONTEXT( "strtoll" );

    long long int lliResult = 0;
    __QCS_PROTECT
    {
        lliResult = _stdlib.strtoll( nptr, endptr, base );
    }__QCS_ENDPROTECT
    return lliResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) unsigned long int strtoul( const char* __QCMP_RESTRICT nptr, char** __QCMP_RESTRICT endptr, int base )
{
    __QCS_FCONTEXT( "strtoul" );

    unsigned long int uliResult = 0;
    __QCS_PROTECT
    {
        uliResult = _stdlib.strtoul( nptr, endptr, base);
    }__QCS_ENDPROTECT
    return uliResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) unsigned long long int strtoull( const char* __QCMP_RESTRICT nptr, char** __QCMP_RESTRICT endptr, int base )
{
    __QCS_FCONTEXT( "strtoull" );

    unsigned long long int ulliResult = 0;
    __QCS_PROTECT
    {
        ulliResult = _stdlib.strtoull( nptr, endptr, base);
    }__QCS_ENDPROTECT
    return ulliResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int rand( void )
{
    __QCS_FCONTEXT( "rand" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _stdlib.rand();
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) void srand( unsigned int seed )
{
    __QCS_FCONTEXT( "srand" );

    __QCS_PROTECT
    {
        _stdlib.srand( seed );
    }__QCS_ENDPROTECT
}

//--------------------------------------------------------------------------------
#ifndef OS_EXPORTS_STDLIB_CALLOC
__QOR_INTERFACE( __CQOR ) void* calloc( size_t nmemb, size_t size )
{
    __QCS_FCONTEXT( "calloc" );

    void* pResult = 0;
    __QCS_PROTECT
    {
		if( nsPlatform::Cstdlib::Thestdlib() == 0 )
		{
			nsPlatform::Cstdlib Stdlib;
			pResult = Stdlib.calloc( nmemb, size );
		}
		else
		{
			pResult = _stdlib.calloc( nmemb, size );
		}
    }__QCS_ENDPROTECT
    return pResult;
}
#endif

//--------------------------------------------------------------------------------
#ifndef OS_EXPORTS_STDLIB_FREE
__QOR_INTERFACE( __CQOR ) void free( void* ptr )
{
    //__QCS_FCONTEXT( "free" );

    __QCS_PROTECT
    {
        if( ptr )
        {
			if( nsPlatform::Cstdlib::Thestdlib() == 0 )
			{
				nsPlatform::Cstdlib Stdlib;
		        Stdlib.free( ptr );
			}
			else
			{
				_stdlib.free( ptr );
			}
        }
    }__QCS_ENDPROTECT
}
#endif

//--------------------------------------------------------------------------------
#ifndef OS_EXPORTS_STDLIB_MALLOC
__QOR_INTERFACE( __CQOR ) void* malloc( size_t size )
{
    //__QCS_FCONTEXT( "malloc" );

    void* pResult = 0;
    __QCS_PROTECT
    {
		if( nsPlatform::Cstdlib::Thestdlib() == 0 )
		{
			nsPlatform::Cstdlib Stdlib;
		    pResult = Stdlib.malloc( size );
		}
		else
		{
			pResult = _stdlib.malloc( size );
		}
    }__QCS_ENDPROTECT
    return pResult;
}
#endif

//--------------------------------------------------------------------------------
#ifndef OS_EXPORTS_STDLIB_REALLOC
__QOR_INTERFACE( __CQOR ) void* realloc( void* ptr, size_t size )
{
    //__QCS_FCONTEXT( "realloc" );

    void* pResult = 0;
    __QCS_PROTECT
    {
        pResult =  _stdlib.realloc( ptr, size );
    }__QCS_ENDPROTECT
    return pResult;
}
#endif

//--------------------------------------------------------------------------------
__QCMP_NORETURN __QOR_INTERFACE( __CQOR ) void abort( void )
{
    //__QCS_FCONTEXT( "abort" );

    __QCS_PROTECT
    {
        _stdlib.abort();
    }__QCS_ENDPROTECT
}

//--------------------------------------------------------------------------------
/*
int atexit( void (*func)( void ) )
{
    __QCS_FCONTEXT( "atexit" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _stdlib.atexit( func );
    }__QCS_ENDPROTECT
    return iResult;
}
*/
//--------------------------------------------------------------------------------
__QOR_INTERFACE(__CQOR) int __cxa_atexit(void(*func)(void))
{
	__QCS_FCONTEXT("atexit");
	int iResult = 0;
	__QCS_PROTECT
	{
		iResult = _stdlib.atexit(func);
	}__QCS_ENDPROTECT
		return iResult;
}

//--------------------------------------------------------------------------------
#ifndef OS_EXPORTS_STDLIB_EXIT
__QCMP_NORETURN __QOR_INTERFACE( __CQOR ) void exit( int status )
{
    __QCS_FCONTEXT( "exit" );

    __QCS_PROTECT
    {
        _stdlib.exit( status );
    }__QCS_ENDPROTECT
}
#endif

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) void _Exit( int status )
{
    __QCS_FCONTEXT( "_Exit" );

    __QCS_PROTECT
    {
        _stdlib._Exit( status );
    }__QCS_ENDPROTECT
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) char* getenv( const char* name )
{
    __QCS_FCONTEXT( "getenv" );

    char* pszResult = 0;
    __QCS_PROTECT
    {
        pszResult =  _stdlib.getenv( name );
    }__QCS_ENDPROTECT
    return pszResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int system( const char* string )
{
    __QCS_FCONTEXT( "system" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _stdlib.system( string );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) void* bsearch( const void* key, const void* base, size_t nmemb, size_t size, int (*compar)( const void*, const void* ) )
{
    __QCS_FCONTEXT( "bsearch" );

    void* pResult = 0;
    __QCS_PROTECT
    {
        pResult = _stdlib.bsearch( key, base, nmemb, size, compar );
    }__QCS_ENDPROTECT
    return pResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) void* bsearch_s( const void* key, const void* base, size_t nmemb, size_t SizeOfElements, int ( *pFuncCompare )( void*, const void*, const void* ), void* pvContext )
{
    __QCS_FCONTEXT( "bsearch_s" );

    void* pResult = 0;
    __QCS_PROTECT
    {
        pResult = _stdlib.bsearch_s( key, base, nmemb, SizeOfElements, pFuncCompare, pvContext );
    }__QCS_ENDPROTECT
    return pResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) void qsort( void* base, size_t nmemb, size_t size, int (*compar)( const void*, const void* ) )
{
    __QCS_FCONTEXT( "qsort" );

    __QCS_PROTECT
    {
        _stdlib.qsort( base, nmemb, size, compar );
    }__QCS_ENDPROTECT
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) void qsort_s( void* base, size_t nmemb, size_t SizeOfElements, int ( *pFuncCompare )( void*, const void*, const void* ), void* pvContext )
{
    __QCS_FCONTEXT( "qsort_s" );

    __QCS_PROTECT
    {
        _stdlib.qsort_s( base, nmemb, SizeOfElements, pFuncCompare, pvContext );
    }__QCS_ENDPROTECT
}

//--------------------------------------------------------------------------------
//#if (!__QCMP_DECLS_ABS)
//#endif
__QOR_INTERFACE( __CQOR ) int abs( int j )
{
    __QCS_FCONTEXT( "abs" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _stdlib.abs( j );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
//#if (!__QCMP_DECLS_LABS)
//#endif
__QOR_INTERFACE( __CQOR ) long int labs( long int j )
{
    __QCS_FCONTEXT( "labs" );

    long int liResult = 0;
    __QCS_PROTECT
    {
        liResult = _stdlib.labs( j );
    }__QCS_ENDPROTECT
    return liResult;
}

//--------------------------------------------------------------------------------
//#if (!__QCMP_DECLS_LLABS)
//#endif
__QOR_INTERFACE( __CQOR ) Cmp_long_long llabs( long long int j )
{
    __QCS_FCONTEXT( "llabs" );

    long long int lliResult = 0;
    __QCS_PROTECT
    {
        lliResult = _stdlib.llabs( j );
    }__QCS_ENDPROTECT
    return lliResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) div_t div( int numer, int denom )
{
    __QCS_FCONTEXT( "div" );

    div_t Result = {0, 0};
    __QCS_PROTECT
    {
        Result = _stdlib.div( numer, denom );
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) ldiv_t ldiv( long int numer, long int denom )
{
    __QCS_FCONTEXT( "ldiv" );

    ldiv_t Result = {0, 0};
    __QCS_PROTECT
    {
        Result = _stdlib.ldiv( numer, denom);
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) lldiv_t lldiv( long long int numer, long long int denom )
{
    __QCS_FCONTEXT( "lldiv" );

    lldiv_t Result = {0, 0};
    __QCS_PROTECT
    {
        Result = _stdlib.lldiv( numer, denom );
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int mblen( const char* s, size_t n )
{
    __QCS_FCONTEXT( "mblen" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _stdlib.mblen( s, n );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int mbtowc( wchar_t* __QCMP_RESTRICT pwc, const char* __QCMP_RESTRICT s, size_t n )
{
    __QCS_FCONTEXT( "mbtowc" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _stdlib.mbtowc( pwc, s, n );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) errno_t mbstowcs_s( size_t* pNumOfCharConverted, wchar_t* pDstBuf, size_t SizeInWords, const char* s, size_t MaxCount )
{
    __QCS_FCONTEXT( "mbstowcs_s" );

    errno_t errResult = 0;
    __QCS_PROTECT
    {
        errResult = _stdlib.mbstowcs_s( pNumOfCharConverted, pDstBuf, SizeInWords, s, MaxCount );
    }__QCS_ENDPROTECT
    return errResult;
}

//--------------------------------------------------------------------------------
//[EBADF] The fildes argument is not a file descriptor open for writing.
//[EINVAL] The fildes argument is not associated with a master pseudo-terminal device.
__QOR_INTERFACE( __CQOR ) int unlockpt( int iFileDes )
{
    __QCS_FCONTEXT( "unlockpt" );

    int iResult = -1;
    __QCS_PROTECT
    {
        iResult = _stdlib.unlockpt( iFileDes );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int setenv( const char* envname, const char* envval, int overwrite )
{
    __QCS_FCONTEXT( "setenv" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _stdlib.setenv( envname, envval, overwrite );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int unsetenv( const char* pszName )
{
    __QCS_FCONTEXT( "unsetenv" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _stdlib.unsetenv( pszName );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///\addtogroup testable
__QOR_INTERFACE( __CQOR ) int wctomb( char* s, wchar_t wchar )
{
    __QCS_FCONTEXT( "wctomb" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _stdlib.wctomb( s, wchar );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
///\addtogroup testable
__QOR_INTERFACE( __CQOR ) errno_t wctomb_s( int* pRetValue, char* mbchar, size_t sizeInBytes, wchar_t wchar )
{
    __QCS_FCONTEXT( "wctomb_s" );

    errno_t errResult = 0;
    __QCS_PROTECT
    {
        errResult = _stdlib.wctomb_s( pRetValue, mbchar, sizeInBytes, wchar );
    }__QCS_ENDPROTECT
    return errResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) size_t mbstowcs( wchar_t* __QCMP_RESTRICT pwcs, const char* __QCMP_RESTRICT s, size_t n )
{
    __QCS_FCONTEXT( "mbstowcs" );

    size_t Result = 0;
    __QCS_PROTECT
    {
        Result = _stdlib.mbstowcs( pwcs, s, n);
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
///\addtogroup testable
__QOR_INTERFACE( __CQOR ) size_t wcstombs( char* __QCMP_RESTRICT s, const wchar_t* __QCMP_RESTRICT pwcs, size_t n )
{
    __QCS_FCONTEXT( "wcstombs" );

    size_t Result = 0;
    __QCS_PROTECT
    {
        Result = _stdlib.wcstombs( s, pwcs, n );
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
///\addtogroup testable
__QOR_INTERFACE( __CQOR ) errno_t wcstombs_s( size_t* pReturnValue, char* mbstr, size_t sizeInBytes, const wchar_t* wcstr, size_t count )
{
    __QCS_FCONTEXT( "wcstombs_s" );

    errno_t errResult = 0;
    __QCS_PROTECT
    {
        errResult = _stdlib.wcstombs_s( pReturnValue, mbstr, sizeInBytes, wcstr, count );
    }__QCS_ENDPROTECT
    return errResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) void srandom( unsigned int uiSeed )
{
    __QCS_FCONTEXT( "srandom" );

    __QCS_PROTECT
    {
        _stdlib.srandom( uiSeed );
    }__QCS_ENDPROTECT
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) void srand48( long lSeed )
{
    __QCS_FCONTEXT( "srand48" );

    __QCS_PROTECT
    {
        _stdlib.srand48( lSeed );
    }__QCS_ENDPROTECT
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) char* setstate( const char* state )
{
    __QCS_FCONTEXT( "setstate" );

    char* pResult = 0;
    __QCS_PROTECT
    {
        pResult = _stdlib.setstate( state );
    }__QCS_ENDPROTECT
    return pResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) void setkey( const char* pszKey )
{
    __QCS_FCONTEXT( "setkey" );

    __QCS_PROTECT
    {
        _stdlib.setkey( pszKey );
    }__QCS_ENDPROTECT
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) unsigned short* seed48( unsigned short seed16v[ 3 ] )
{
    __QCS_FCONTEXT( "seed48" );

    unsigned short* pusResult = 0;
    __QCS_PROTECT
    {
        pusResult = _stdlib.seed48( seed16v );
    }__QCS_ENDPROTECT
    return pusResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) char* realpath( const char* __QCMP_RESTRICT file_name, char* __QCMP_RESTRICT resolved_name )
{
    __QCS_FCONTEXT( "realpath" );

    char* pszResult = 0;
    __QCS_PROTECT
    {
        pszResult = _stdlib.realpath( file_name, resolved_name );
    }__QCS_ENDPROTECT
    return pszResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) long random( void )
{
    __QCS_FCONTEXT( "random" );

    long lResult = 0;
    __QCS_PROTECT
    {
        lResult = _stdlib.random();
    }__QCS_ENDPROTECT
    return lResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int rand_r( unsigned int* pSeed )
{
    __QCS_FCONTEXT( "rand_r" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _stdlib.rand_r( pSeed );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) errno_t rand_s( unsigned int* puiRandomValue )
{
    __QCS_FCONTEXT( "rand_s" );

    errno_t errResult = 0;
    __QCS_PROTECT
    {
        errResult = _stdlib.rand_s( puiRandomValue );
    }__QCS_ENDPROTECT
    return errResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int putenv( const char* envstring )
{
	__QCS_FCONTEXT( "putenv" );
	int iResult = 0;
	__QCS_PROTECT
	{
		iResult = _stdlib.putenv( envstring );
	}__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int _putenv( const char* envstring )
{
    __QCS_FCONTEXT( "_putenv" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _stdlib._putenv( envstring );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) char* ptsname( int iFileDes )
{
    __QCS_FCONTEXT( "ptsname" );

    char* pszResult = 0;
    __QCS_PROTECT
    {
        pszResult = _stdlib.ptsname( iFileDes );
    }__QCS_ENDPROTECT
    return pszResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int posix_openpt( int oflag )
{
    __QCS_FCONTEXT( "posix_openpt" );

    int iResult = -1;
    __QCS_PROTECT
    {
        iResult = _stdlib.posix_openpt( oflag );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int posix_memalign( void** memptr, size_t alignment, size_t size )
{
    __QCS_FCONTEXT( "posix_memalign" );

    int iResult = -1;
    __QCS_PROTECT
    {
        iResult = _stdlib.posix_memalign( memptr, alignment, size );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) long nrand48( unsigned short xsubi[ 3 ] )
{
    __QCS_FCONTEXT( "nrand48" );

    long lResult = 0;
    __QCS_PROTECT
    {
        lResult = _stdlib.nrand48( xsubi );
    }__QCS_ENDPROTECT
    return lResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) long mrand48( void )
{
    __QCS_FCONTEXT( "mrand48" );

    long lResult = 0;
    __QCS_PROTECT
    {
        lResult = _stdlib.mrand48();
    }__QCS_ENDPROTECT
    return lResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int mkstemp( char* pszTemplate )
{
    __QCS_FCONTEXT( "mkstemp" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _stdlib.mkstemp( pszTemplate );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) char* mktemp( char* pszTemplate )
{
    __QCS_FCONTEXT( "mktemp" );

    char* pszResult = 0;
    __QCS_PROTECT
    {
        pszResult = _stdlib.mktemp( pszTemplate );
    }__QCS_ENDPROTECT
    return pszResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) long lrand48( void )
{
    __QCS_FCONTEXT( "lrand48" );

    long lResult = 0;
    __QCS_PROTECT
    {
        lResult = _stdlib.lrand48();
    }__QCS_ENDPROTECT
    return lResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) void lcong48( unsigned short param[ 7 ] )
{
    __QCS_FCONTEXT( "lcong48" );

    __QCS_PROTECT
    {
        _stdlib.lcong48( param );
    }__QCS_ENDPROTECT
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) char* l64a( long lValue )
{
    __QCS_FCONTEXT( "l64a" );

    char* pszResult = 0;
    __QCS_PROTECT
    {
        pszResult = _stdlib.l64a( lValue );
    }__QCS_ENDPROTECT
    return pszResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) long jrand48( unsigned short xsubi[ 3 ] )
{
    __QCS_FCONTEXT( "jrand48" );

    long lResult = 0;
    __QCS_PROTECT
    {
        lResult = _stdlib.jrand48( xsubi );
    }__QCS_ENDPROTECT
    return lResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) char* initstate( unsigned int uiSeed, char* pState, size_t Size )
{
    __QCS_FCONTEXT( "initstate" );

    char* pResult = 0;
    __QCS_PROTECT
    {
        pResult = _stdlib.initstate( uiSeed, pState, Size );
    }__QCS_ENDPROTECT
    return pResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int grantpt( int iFileDes )
{
    __QCS_FCONTEXT( "grantpt" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _stdlib.grantpt( iFileDes );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int getsubopt( char** optionp, char* const* keylistp, char** valuep )
{
    __QCS_FCONTEXT( "getsubopt" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _stdlib.getsubopt( optionp, keylistp, valuep );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) errno_t getenv_s( size_t* pReturnSize, char* pDstBuf, size_t DstSize, const char* pszVarName )
{
    __QCS_FCONTEXT( "getenv_s" );

    errno_t errResult = 0;
    __QCS_PROTECT
    {
        errResult = _stdlib.getenv_s( pReturnSize, pDstBuf, DstSize, pszVarName );
    }__QCS_ENDPROTECT
    return errResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) char* gcvt( double dValue, int iDigit, char* pBuf )
{
    __QCS_FCONTEXT( "gcvt" );

    char* pszResult = 0;
    __QCS_PROTECT
    {
        pszResult = _stdlib.gcvt( dValue, iDigit, pBuf );
    }__QCS_ENDPROTECT
    return pszResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) char* fcvt( double dValue, int iDigit, int* __QCMP_RESTRICT pDecpt, int* __QCMP_RESTRICT pSign )
{
    __QCS_FCONTEXT( "fcvt" );

    char* pszResult = 0;
    __QCS_PROTECT
    {
        pszResult = _stdlib.fcvt( dValue, iDigit, pDecpt, pSign );
    }__QCS_ENDPROTECT
    return pszResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) double erand48( unsigned short xsubi[ 3 ] )
{
    __QCS_FCONTEXT( "erand48" );

    double dResult = 0;
    __QCS_PROTECT
    {
        dResult = _stdlib.erand48( xsubi );
    }__QCS_ENDPROTECT
    return dResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) char* ecvt( double dValue, int iDigit, int* __QCMP_RESTRICT pDecpt, int* __QCMP_RESTRICT pSign )
{
    __QCS_FCONTEXT( "ecvt" );

    char* pszResult = 0;
    __QCS_PROTECT
    {
        pszResult = _stdlib.ecvt( dValue, iDigit, pDecpt, pSign );
    }__QCS_ENDPROTECT
    return pszResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) double drand48( void )
{
    __QCS_FCONTEXT( "drand48" );

    double dResult = 0;
    __QCS_PROTECT
    {
        dResult = _stdlib.drand48();
    }__QCS_ENDPROTECT
    return dResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) long a64l( const char* s )
{
    __QCS_FCONTEXT( "a64l" );

    long lResult = 0;
    __QCS_PROTECT
    {
        lResult = _stdlib.a64l( s );
    }__QCS_ENDPROTECT
    return lResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int WaitExitStatus( int status )
{
	__QCS_FCONTEXT( "WaitExitStatus" );
	int iResult = 0;
	__QCS_PROTECT
	{
		iResult = _stdlib.WaitExitStatus( status );
	}__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int WaitIfExited( int status )
{
	__QCS_FCONTEXT( "WaitIfExited" );
	int iResult = 0;
	__QCS_PROTECT
	{
		iResult = _stdlib.WaitIfExited( status );
	}__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int WaitIfSignaled( int status )
{
	__QCS_FCONTEXT( "WaitIfSignaled" );
	int iResult = 0;
	__QCS_PROTECT
	{
		iResult = _stdlib.WaitIfSignaled( status );
	}__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int WaitIfStopped( int status )
{
	__QCS_FCONTEXT( "WaitIfStopped" );
	int iResult = 0;
	__QCS_PROTECT
	{
		iResult = _stdlib.WaitIfStopped( status );
	}__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int WaitStopSignal( int status )
{
	__QCS_FCONTEXT( "WaitStopSignal" );
	int iResult = 0;
	__QCS_PROTECT
	{
		iResult = _stdlib.WaitStopSignal( status );
	}__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int WaitTermSignal( int status )
{
	__QCS_FCONTEXT( "WaitTermSignal" );
	int iResult = 0;
	__QCS_PROTECT
	{
		iResult = _stdlib.WaitTermSignal( status );
	}__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int WaitUntraced( void )
{
	__QCS_FCONTEXT( "WaitUntraced" );
	int iResult = 0;
	__QCS_PROTECT
	{
		//iResult = _stdlib.WaitUntraced();
	}__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int WaitNoHang( void )
{
	__QCS_FCONTEXT( "WaitNoHang" );
	int iResult = 0;
	__QCS_PROTECT
	{
		//iResult = _stdlib.WaitNoHang();
	}__QCS_ENDPROTECT
	return iResult;
}

__QCMP_ENDLINKAGE_C
