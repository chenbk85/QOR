//aio.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Generic aio implementation
//An exported standard C interface which forwards calls to the matching C++ implementaion for the platform

#include "CQOR/CQORPolicy.h"
#include <aio.h>
#include <errno.h>
#include "SystemQOR.h"
#include QOR_SYS_PLATFORMHEADER(aio.h)
#include "CodeQOR/Tracing/FunctionContextBase.h"
#include "CodeQOR/ErrorSystem/Error.h"
#include "CQOR.h"

//--------------------------------------------------------------------------------
namespace
{
	nsPlatform::Caio aio;
}//anonymous

__QCMP_STARTLINKAGE_C

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int aio_cancel( int fildes, aiocb* aiocbp )
{
    __QCS_FCONTEXT( "aio_cancel" );
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = aio.cancel( fildes, aiocbp );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int aio_error( const aiocb* aiocbp )
{
    __QCS_FCONTEXT( "aio_error" );
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = aio.error( aiocbp );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int aio_fsync( int op, aiocb* aiocbp )
{
    __QCS_FCONTEXT( "aio_fsync" );
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = aio.fsync( op, aiocbp );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int aio_read( aiocb* aiocbp )
{
    __QCS_FCONTEXT( "aio_read" );
    int iResult = 0;
    __QCS_PROTECT
	{
        iResult = aio.read( aiocbp );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) ssize_t aio_return( aiocb* aiocbp )
{
    __QCS_FCONTEXT( "aio_return" );
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = aio._return( aiocbp );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int aio_suspend( const aiocb* const list[], int nent, const timespec* timeout)
{
    __QCS_FCONTEXT( "aio_suspend" );
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = aio.suspend( list, nent, timeout );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int aio_write( aiocb* aiocbp )
{
    __QCS_FCONTEXT( "aio_write" );
    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = aio.write( aiocbp );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int lio_listio( int mode, aiocb* __QCMP_RESTRICT const list[], int nent, sigevent* __QCMP_RESTRICT sig )
{
    __QCS_FCONTEXT( "lio_listio" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = aio.lio_listio( mode, list, nent, sig );
    }__QCS_ENDPROTECT
    return iResult;
}

__QCMP_ENDLINKAGE_C

