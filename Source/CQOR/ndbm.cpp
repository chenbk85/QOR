//ndbm.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CQOR/CQORPolicy.h"
#include <ndbm.h>
#include <errno.h>
#include "SystemQOR.h"
#include QOR_SYS_PLATFORMHEADER(ndbm.h)
#include "CodeQOR/Tracing/FunctionContextBase.h"
#include "CodeQOR/ErrorSystem/Error.h"
#include "CQOR.h"

//--------------------------------------------------------------------------------
namespace 
{
	nsPlatform::Cndbm _ndbm;
}//anonymous

__QCMP_STARTLINKAGE_C

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int dbm_clearerr( DBM* db )
{
    __QCS_FCONTEXT( "dbm_clearerr" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _ndbm.dbm_clearerr( db );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) void dbm_close( DBM* db )
{
    __QCS_FCONTEXT( "dbm_close" );

    __QCS_PROTECT
    {
        _ndbm.dbm_close( db );
    }__QCS_ENDPROTECT
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int dbm_delete( DBM* db, datum key )
{
    __QCS_FCONTEXT( "dbm_delete" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _ndbm.dbm_delete( db, key );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int dbm_error( DBM* db )
{
    __QCS_FCONTEXT( "dbm_error" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _ndbm.dbm_error( db );
    }__QCS_ENDPROTECT
    return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) datum dbm_fetch( DBM* db, datum key )
{
    __QCS_FCONTEXT( "dbm_fetch" );

    datum Result;
    __QCS_PROTECT
    {
        Result = _ndbm.dbm_fetch( db, key );
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) datum dbm_firstkey( DBM* db )
{
    __QCS_FCONTEXT( "dbm_firstkey" );

    datum Result;
    __QCS_PROTECT
    {
        Result = _ndbm.dbm_firstkey( db );
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) datum dbm_nextkey( DBM* db )
{
    __QCS_FCONTEXT( "mq_close" );

    datum Result;
    __QCS_PROTECT
    {
        Result = _ndbm.dbm_nextkey( db );
    }__QCS_ENDPROTECT
    return Result;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) DBM* dbm_open( const char* szFile, int iFlags, mode_t iMode )
{
    __QCS_FCONTEXT( "dbm_open" );

    DBM* pResult = 0;
    __QCS_PROTECT
    {
        pResult = _ndbm.dbm_open( szFile, iFlags, iMode );
    }__QCS_ENDPROTECT
    return pResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int dbm_store( DBM* db, datum key, datum content, int iStoreMode )
{
    __QCS_FCONTEXT( "dbm_store" );

    int iResult = 0;
    __QCS_PROTECT
    {
        iResult = _ndbm.dbm_store( db, key, content, iStoreMode );
    }__QCS_ENDPROTECT
    return iResult;
}

__QCMP_ENDLINKAGE_C


