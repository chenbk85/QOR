//search.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CQOR/CQORPolicy.h"
#include <search.h>
#include <errno.h>
#include "SystemQOR.h"
#include QOR_SYS_PLATFORMHEADER(search.h)
#include "CodeQOR/Tracing/FunctionContextBase.h"
#include "CodeQOR/ErrorSystem/Error.h"
#include "CQOR.h"

//--------------------------------------------------------------------------------
namespace
{
	nsPlatform::Csearch _search;
}//anonymous

__QCMP_STARTLINKAGE_C

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) int hcreate( size_t nel )
{
    __QCS_FCONTEXT( "hcreate" );
	int iResult = -1;
    __QCS_PROTECT
    {
        iResult = _search.hcreate( nel );
    }__QCS_ENDPROTECT
	return iResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) void hdestroy( void )
{
    __QCS_FCONTEXT( "hdestroy" );
    __QCS_PROTECT
    {
        _search.hdestroy();
    }__QCS_ENDPROTECT
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) ENTRY* hsearch( ENTRY item , ACTION action )
{
    __QCS_FCONTEXT( "hsearch" );
	ENTRY* pResult = 0;
    __QCS_PROTECT
    {
        pResult = _search.hsearch( item, action );
    }__QCS_ENDPROTECT
	return pResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) void insque( void* element, void* pred )
{
    __QCS_FCONTEXT( "insque" );
    __QCS_PROTECT
    {
        _search.insque( element, pred );
    }__QCS_ENDPROTECT
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) void* lfind( const void* key, const void* base, size_t* nelp, size_t width, int (*compar)( const void*, const void* ) )
{
    __QCS_FCONTEXT( "lfind" );
	void* pResult = 0;
    __QCS_PROTECT
    {
        pResult = _search.lfind( key, base, nelp, width, compar );
    }__QCS_ENDPROTECT
	return pResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) void* lsearch( const void* key, void* base, size_t* nelp, size_t width, int (*compar)( const void*, const void* ) )
{
    __QCS_FCONTEXT( "lsearch" );
	void* pResult = 0;
    __QCS_PROTECT
    {
        pResult = _search.lsearch( key, base, nelp, width, compar );
    }__QCS_ENDPROTECT
	return pResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) void remque( void* element )
{
    __QCS_FCONTEXT( "remque" );
    __QCS_PROTECT
    {
        _search.remque( element );
    }__QCS_ENDPROTECT
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) void* tdelete( const void* __QCMP_RESTRICT key, void** __QCMP_RESTRICT rootp, int(*compar)( const void*, const void* ) )
{
    __QCS_FCONTEXT( "tdelete" );
	void* pResult = 0;
    __QCS_PROTECT
    {
        pResult = _search.tdelete( key, rootp, compar );
    }__QCS_ENDPROTECT
	return pResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) void* tfind( const void* key, void* const* rootp, int(*compar)( const void*, const void* ) )
{
    __QCS_FCONTEXT( "tfind" );
	void* pResult = 0;
    __QCS_PROTECT
    {
        pResult = _search.tfind( key, rootp, compar );
    }__QCS_ENDPROTECT
	return pResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) void* tsearch( const void* key, void** rootp, int(*compar)( const void*, const void* ) )
{
    __QCS_FCONTEXT( "tsearch" );
	void* pResult = 0;
    __QCS_PROTECT
    {
        pResult = _search.tsearch( key, rootp, compar );
    }__QCS_ENDPROTECT
	return pResult;
}

//--------------------------------------------------------------------------------
__QOR_INTERFACE( __CQOR ) void twalk( const void* root, void (*action)( const void*, VISIT, int ) )
{
    __QCS_FCONTEXT( "twalk" );
    __QCS_PROTECT
    {
        _search.twalk( root, action );
    }__QCS_ENDPROTECT
}

__QCMP_ENDLINKAGE_C


