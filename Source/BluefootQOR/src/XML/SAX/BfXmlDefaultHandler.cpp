//BfXmlDefaultHandler.cpp

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//

#include "BluefootQOR/XML/SAX/BfXmlDefaultHandler.h"

//------------------------------------------------------------------------------
namespace nsBluefoot
{
	//------------------------------------------------------------------------------
	void CXmlDefaultHandler::setDocumentLocator( CXmlLocator* )
	{
	}

	//------------------------------------------------------------------------------
	bool CXmlDefaultHandler::startDocument()
	{
		return true;
	}

	//------------------------------------------------------------------------------
	bool CXmlDefaultHandler::endDocument()
	{
		return true;
	}

	//------------------------------------------------------------------------------
	bool CXmlDefaultHandler::startPrefixMapping(const nsCodeQOR::CUCS2String&, const nsCodeQOR::CUCS2String&)
	{
		return true;
	}

	//------------------------------------------------------------------------------
	bool CXmlDefaultHandler::endPrefixMapping(const nsCodeQOR::CUCS2String&)
	{
		return true;
	}

	//------------------------------------------------------------------------------
	bool CXmlDefaultHandler::startElement( const nsCodeQOR::CUCS2String&, const nsCodeQOR::CUCS2String&, const nsCodeQOR::CUCS2String&, const CXmlAttributes& )
	{
		return true;
	}

	//------------------------------------------------------------------------------
	bool CXmlDefaultHandler::endElement(const nsCodeQOR::CUCS2String&, const nsCodeQOR::CUCS2String&,
			const nsCodeQOR::CUCS2String&)
	{
		return true;
	}

	//------------------------------------------------------------------------------
	bool CXmlDefaultHandler::characters( const nsCodeQOR::CUCS2String& )
	{
		return true;
	}

	//------------------------------------------------------------------------------
	bool CXmlDefaultHandler::ignorableWhitespace( const nsCodeQOR::CUCS2String& )
	{
		return true;
	}

	//------------------------------------------------------------------------------
	bool CXmlDefaultHandler::processingInstruction( const nsCodeQOR::CUCS2String&, const nsCodeQOR::CUCS2String& )
	{
		return true;
	}

	//------------------------------------------------------------------------------
	bool CXmlDefaultHandler::skippedEntity(const nsCodeQOR::CUCS2String&)
	{
		return true;
	}

	//------------------------------------------------------------------------------
	bool CXmlDefaultHandler::warning( const CXmlParseException& )
	{
		return true;
	}

	//------------------------------------------------------------------------------
	bool CXmlDefaultHandler::error( const CXmlParseException& )
	{
		return true;
	}

	//------------------------------------------------------------------------------
	bool CXmlDefaultHandler::fatalError( const CXmlParseException& )
	{
		return true;
	}

	//------------------------------------------------------------------------------
	bool CXmlDefaultHandler::notationDecl(const nsCodeQOR::CUCS2String&, const nsCodeQOR::CUCS2String&,
			const nsCodeQOR::CUCS2String&)
	{
		return true;
	}

	//------------------------------------------------------------------------------
	bool CXmlDefaultHandler::unparsedEntityDecl(const nsCodeQOR::CUCS2String&, const nsCodeQOR::CUCS2String&,
			const nsCodeQOR::CUCS2String&, const nsCodeQOR::CUCS2String&)
	{
		return true;
	}

	//------------------------------------------------------------------------------
	//Sets ret to 0, so that the reader uses the system identifier provided in the XML document.
	bool CXmlDefaultHandler::resolveEntity( const nsCodeQOR::CUCS2String&, const nsCodeQOR::CUCS2String&, CXmlInputSource*& ret)
	{
		ret = 0;
		return true;
	}

	//------------------------------------------------------------------------------
	nsCodeQOR::CString CXmlDefaultHandler::errorString() const
	{
		return nsCodeQOR::CString( _TXT( "error triggered by consumer" ) );
	}

	//------------------------------------------------------------------------------
	bool CXmlDefaultHandler::startDTD(const nsCodeQOR::CUCS2String&, const nsCodeQOR::CUCS2String&, const nsCodeQOR::CUCS2String&)
	{
		return true;
	}

	//------------------------------------------------------------------------------
	bool CXmlDefaultHandler::endDTD()
	{
		return true;
	}

	//------------------------------------------------------------------------------
	bool CXmlDefaultHandler::startEntity(const nsCodeQOR::CUCS2String&)
	{
		return true;
	}

	//------------------------------------------------------------------------------
	bool CXmlDefaultHandler::endEntity(const nsCodeQOR::CUCS2String&)
	{
		return true;
	}


	//------------------------------------------------------------------------------
	bool CXmlDefaultHandler::startCDATA()
	{
		return true;
	}

	//------------------------------------------------------------------------------
	bool CXmlDefaultHandler::endCDATA()
	{
		return true;
	}

	//------------------------------------------------------------------------------
	bool CXmlDefaultHandler::comment(const nsCodeQOR::CUCS2String&)
	{
		return true;
	}

	//------------------------------------------------------------------------------
	bool CXmlDefaultHandler::attributeDecl(const nsCodeQOR::CUCS2String&, const nsCodeQOR::CUCS2String&, const nsCodeQOR::CUCS2String&, const nsCodeQOR::CUCS2String&, const nsCodeQOR::CUCS2String&)
	{
		return true;
	}

	//------------------------------------------------------------------------------
	bool CXmlDefaultHandler::internalEntityDecl(const nsCodeQOR::CUCS2String&, const nsCodeQOR::CUCS2String&)
	{
		return true;
	}

	//------------------------------------------------------------------------------
	bool CXmlDefaultHandler::externalEntityDecl(const nsCodeQOR::CUCS2String&, const nsCodeQOR::CUCS2String&, const nsCodeQOR::CUCS2String&)
	{
		return true;
	}

}//nsBluefoot

