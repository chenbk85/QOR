//BfXmlNamespaceSupport.cpp

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//

#include "BluefootQOR/XML/SAX/BfXmlAttributes.h"
#include "CodeQOR/Tracing/FunctionContextBase.h"

//------------------------------------------------------------------------------
namespace nsBluefoot
{
	//------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CXmlAttributes );

	//------------------------------------------------------------------------------
	CXmlAttributes::CXmlAttributes()
	{
		__QCS_MEMBER_FCONTEXT( "CXmlAttributes::CXmlAttributes" );		
	}

	//------------------------------------------------------------------------------
	CXmlAttributes::~CXmlAttributes()
	{
		__QCS_MEMBER_FCONTEXT( "CXmlAttributes::~CXmlAttributes" );		
	}

	//------------------------------------------------------------------------------
	//Looks up the index of an attribute by the qualified name
	//Returns the index of the attribute or -1 if it wasn't found.
	int CXmlAttributes::Index( const nsCodeQOR::CUCS2String& QName ) const
	{
		__QCS_MEMBER_FCONTEXT( "CXmlAttributes::Index" );		
		int i = 0;
		for( AttributeList::const_iterator it = m_AttList.cbegin(); it != m_AttList.cend(); ++i, ++it ) 
		{
			if( it->qname == QName )
			{
				return i;
			}
		}
		return -1;
	}

	//------------------------------------------------------------------------------
	/*
	int CXmlAttributes::index( const QLatin1String& qName) const
	{
		for (int i = 0; i < attList.size(); ++i) {
			if (attList.at(i).qname == qName)
				return i;
		}
		return -1;
	}
	*/

	//------------------------------------------------------------------------------
	// Looks up the index of an attribute by a namespace name.
	// uri specifies the namespace URI, or an empty string if the name
	// has no namespace URI. \a localPart specifies the attribute's local name.
	// Returns the index of the attribute, or -1 if it wasn't found.
	int CXmlAttributes::Index( const nsCodeQOR::CUCS2String& uri, const nsCodeQOR::CUCS2String& localPart ) const
	{
		__QCS_MEMBER_FCONTEXT( "CXmlAttributes::Index" );		
		int i = 0;
		for( AttributeList::const_iterator it = m_AttList.cbegin(); it != m_AttList.cend(); ++i, ++it ) 
		{
			if( uri == it->uri && localPart == it->localname )
			{
				return i;
			}
		}
		return -1;
	}

	//------------------------------------------------------------------------------
	//Returns the number of attributes in the list.
	int CXmlAttributes::Length() const
	{
		__QCS_MEMBER_FCONTEXT( "CXmlAttributes::Length" );		
		return m_AttList.size();
	}

	//------------------------------------------------------------------------------
	//Looks up an attribute's local name for the attribute at position index. If no namespace processing is done, the local name is an empty string.
	nsCodeQOR::CUCS2String CXmlAttributes::LocalName( int index ) const
	{
		__QCS_MEMBER_FCONTEXT( "CXmlAttributes::LocalName" );		
		return m_AttList.at( index ).localname;
	}

	//------------------------------------------------------------------------------
	//Looks up an attribute's XML 1.0 qualified name for the attribute at position index.
	nsCodeQOR::CUCS2String CXmlAttributes::QName( int index ) const
	{
		__QCS_MEMBER_FCONTEXT( "CXmlAttributes::QName" );		
		return m_AttList.at( index ).qname;
	}

	//------------------------------------------------------------------------------
	//Looks up an attribute's namespace URI for the attribute at position index. If no namespace processing is done or if the attribute has no namespace, the namespace URI is an empty string.
	nsCodeQOR::CUCS2String CXmlAttributes::Uri( int index ) const
	{
		__QCS_MEMBER_FCONTEXT( "CXmlAttributes::Uri" );		
		return m_AttList.at( index ).uri;
	}

	//------------------------------------------------------------------------------
	//Looks up an attribute's type for the attribute at position index. Currently only "CDATA" is returned.
	nsCodeQOR::CUCS2String CXmlAttributes::Type( int ) const
	{
		__QCS_MEMBER_FCONTEXT( "CXmlAttributes::Type" );		
		return nsCodeQOR::CUCS2String( _TXT( "CDATA" ) );
	}

	//------------------------------------------------------------------------------
	nsCodeQOR::CUCS2String CXmlAttributes::Type( const nsCodeQOR::CUCS2String& ) const
	{
		__QCS_MEMBER_FCONTEXT( "CXmlAttributes::Type" );		
		return nsCodeQOR::CUCS2String( _TXT( "CDATA" ) );
	}

	//------------------------------------------------------------------------------
	// Looks up an attribute's type by namespace name. uri specifies the namespace URI and \a localName specifies the local name. If the name has no namespace URI, use an empty string for uri.
	// Currently only "CDATA" is returned.
	nsCodeQOR::CUCS2String CXmlAttributes::Type( const nsCodeQOR::CUCS2String&, const nsCodeQOR::CUCS2String& ) const
	{
		__QCS_MEMBER_FCONTEXT( "CXmlAttributes::Type" );		
		return nsCodeQOR::CUCS2String( _TXT( "CDATA" ) );
	}

	//------------------------------------------------------------------------------
	//Returns an attribute's value for the attribute at position index. The index must be a valid position (i.e., 0 <= \a index < count()).
	nsCodeQOR::CUCS2String CXmlAttributes::Value( int index ) const
	{
		__QCS_MEMBER_FCONTEXT( "CXmlAttributes::Value" );		
		return m_AttList.at( index ).value;
	}

	//------------------------------------------------------------------------------
	//Returns an attribute's value for the qualified name \a qName, or an empty string if no attribute exists for the name given.
	nsCodeQOR::CUCS2String CXmlAttributes::Value( const nsCodeQOR::CUCS2String& qName ) const
	{
		__QCS_MEMBER_FCONTEXT( "CXmlAttributes::Value" );		
		int i = Index( qName );
		if (i == -1)
		{
			return nsCodeQOR::CUCS2String();
		}
		return m_AttList.at( i ).value;
	}

	/*
	// Returns an attribute's value for the qualified name \a qName, or an empty string if no attribute exists for the name given.
	std::string CXmlAttributes::value( const std::string& qName) const
	{
		int i = index(qName);
		if (i == -1)
			return QString();
		return attList.at(i).value;
	}
	*/

	//------------------------------------------------------------------------------
	//Returns an attribute's value by namespace name. uri specifies the namespace URI, or an empty string if the name has no namespace URI. \a localName specifies the attribute's local name.
	nsCodeQOR::CUCS2String CXmlAttributes::Value( const nsCodeQOR::CUCS2String& uri, const nsCodeQOR::CUCS2String& localName) const
	{
		__QCS_MEMBER_FCONTEXT( "CXmlAttributes::Value" );		
		int i = Index( uri, localName );
		if (i == -1)
		{
			return nsCodeQOR::CUCS2String();
		}
		return m_AttList.at(i).value;
	}

	//------------------------------------------------------------------------------
	//Clears the list of attributes.
	void CXmlAttributes::Clear()
	{
		__QCS_MEMBER_FCONTEXT( "CXmlAttributes::Clear" );		
		m_AttList.clear();
	}

	//------------------------------------------------------------------------------
	//Appends a new attribute entry to the list of attributes. The qualified name of the attribute is \a qName, the namespace URI is uri and the local name is localPart. The value of the attribute is value.
	void CXmlAttributes::Append(const nsCodeQOR::CUCS2String& qName, const nsCodeQOR::CUCS2String& uri, const nsCodeQOR::CUCS2String& localPart, const nsCodeQOR::CUCS2String& value )
	{
		__QCS_MEMBER_FCONTEXT( "CXmlAttributes::Append" );		
		Attribute att;
		att.qname = qName;
		att.uri = uri;
		att.localname = localPart;
		att.value = value;

		m_AttList.push_back( att );
	}

}//nsBluefoot
