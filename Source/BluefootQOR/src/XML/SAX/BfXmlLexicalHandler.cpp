//BfXmlLexicalHandler.cpp

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//

#include "BluefootQOR/XML/SAX/BfXmlLexicalHandler.h"
#include "CodeQOR/Tracing/FunctionContextBase.h"

//------------------------------------------------------------------------------
namespace nsBluefoot
{
	__QOR_IMPLEMENT_OCLASS_LUID( CXmlLexicalHandler );

	//------------------------------------------------------------------------------
	CXmlLexicalHandler::CXmlLexicalHandler()
	{
		__QCS_MEMBER_FCONTEXT( "CXmlLexicalHandler::CXmlLexicalHandler" );
	}

	//------------------------------------------------------------------------------
	nsCodeQOR::CString CXmlLexicalHandler::ErrorString() const
	{
		__QCS_MEMBER_FCONTEXT( "CXmlLexicalHandler::ErrorString" );
		return nsCodeQOR::CString( _TXT( "error triggered by consumer" ) );
	}

	//------------------------------------------------------------------------------
	bool CXmlLexicalHandler::StartDTD(const nsCodeQOR::CUCS2String&, const nsCodeQOR::CUCS2String&, const nsCodeQOR::CUCS2String&)
	{
		__QCS_MEMBER_FCONTEXT( "CXmlLexicalHandler::StartDTD" );
		return true;
	}

	//------------------------------------------------------------------------------
	bool CXmlLexicalHandler::EndDTD()
	{
		__QCS_MEMBER_FCONTEXT( "CXmlLexicalHandler::EndDTD" );
		return true;
	}

	//------------------------------------------------------------------------------
	bool CXmlLexicalHandler::StartEntity(const nsCodeQOR::CUCS2String&)
	{
		__QCS_MEMBER_FCONTEXT( "CXmlLexicalHandler::StartEntity" );
		return true;
	}

	//------------------------------------------------------------------------------
	bool CXmlLexicalHandler::EndEntity(const nsCodeQOR::CUCS2String&)
	{
		__QCS_MEMBER_FCONTEXT( "CXmlLexicalHandler::EndEntity" );
		return true;
	}


	//------------------------------------------------------------------------------
	bool CXmlLexicalHandler::StartCDATA()
	{
		__QCS_MEMBER_FCONTEXT( "CXmlLexicalHandler::StartCDATA" );
		return true;
	}

	//------------------------------------------------------------------------------
	bool CXmlLexicalHandler::EndCDATA()
	{
		__QCS_MEMBER_FCONTEXT( "CXmlLexicalHandler::EndCDATA" );
		return true;
	}

	//------------------------------------------------------------------------------
	bool CXmlLexicalHandler::Comment( const nsCodeQOR::CUCS2String& )
	{
		__QCS_MEMBER_FCONTEXT( "CXmlLexicalHandler::Comment" );
		return true;
	}

}//nsBluefoot
