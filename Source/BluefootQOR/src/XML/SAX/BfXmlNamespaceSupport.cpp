//BfXmlNamespaceSupport.cpp

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//

#include "CodeQOR/Text/Char.h"
#include "BluefootQOR/XML/SAX/BfXmlNamespaceSupport.h"
#include "CodeQOR/Tracing/FunctionContextBase.h"

//------------------------------------------------------------------------------
namespace nsBluefoot
{
	//------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CXmlNamespaceSupport );

	//------------------------------------------------------------------------------
	CXmlNamespaceSupport::CXmlNamespaceSupport()
	{
		__QCS_MEMBER_FCONTEXT( "CXmlNamespaceSupport::CXmlNamespaceSupport" );
		m_Ns.insert( std::make_pair( nsCodeQOR::CUCS2String( _TXT( "xml" ) ), nsCodeQOR::CUCS2String( _TXT( "http://www.w3.org/XML/1998/namespace" ) ) ) ); // the XML namespace
	}

	//------------------------------------------------------------------------------
	CXmlNamespaceSupport::~CXmlNamespaceSupport()
	{
		__QCS_MEMBER_FCONTEXT( "CXmlNamespaceSupport::~CXmlNamespaceSupport" );
	}

	//------------------------------------------------------------------------------
	void CXmlNamespaceSupport::SetPrefix( const nsCodeQOR::CUCS2String& Pre, const nsCodeQOR::CUCS2String& Uri )
	{
		__QCS_MEMBER_FCONTEXT( "CXmlNamespaceSupport::SetPrefix" );
		if( Pre.IsEmpty() ) 
		{
			m_Ns.insert( std::make_pair( nsCodeQOR::CUCS2String( _TXT( "" ) ), Uri ) );
		} 
		else 
		{
			m_Ns.insert( std::make_pair( Pre, Uri ) );
		}
	}

	//------------------------------------------------------------------------------
	nsCodeQOR::CUCS2String CXmlNamespaceSupport::Prefix( const nsCodeQOR::CUCS2String& uri ) const
	{
		__QCS_MEMBER_FCONTEXT( "CXmlNamespaceSupport::Prefix" );
		NamespaceMap::const_iterator itc, it = m_Ns.cbegin();
		while( ( itc = it ) != m_Ns.cend() ) 
		{
			++it;
			if( itc->second == uri && !itc->first.IsEmpty() )
			{
				return itc->first;
			}
		}
		return nsCodeQOR::CUCS2String( _TXT( "" ) );
	}

	//------------------------------------------------------------------------------
	nsCodeQOR::CUCS2String CXmlNamespaceSupport::Uri( const nsCodeQOR::CUCS2String& Prefix ) const
	{
		__QCS_MEMBER_FCONTEXT( "CXmlNamespaceSupport::Uri" );
		return m_Ns.at( Prefix );
	}
	//------------------------------------------------------------------------------
	void CXmlNamespaceSupport::SplitName( const nsCodeQOR::CUCS2String& Name, nsCodeQOR::CUCS2String& Prefix, nsCodeQOR::CUCS2String& Localname ) const
	{
		__QCS_MEMBER_FCONTEXT( "CXmlNamespaceSupport::SplitName" );
		int pos = Name.Find( nsCodeQOR::CUCS2String( _TXT( ":" ) ) );//find_first_of( ':' );
		if (pos == -1)
		{
			pos = Name.Len();
		}

		Prefix = Name.Mid( 0, static_cast< short >( pos ) );
		Localname = Name.Mid( static_cast< unsigned short >( pos + 1 ) );
	}

	//------------------------------------------------------------------------------
	void CXmlNamespaceSupport::ProcessName( const nsCodeQOR::CUCS2String& Name, bool IsAttribute, nsCodeQOR::CUCS2String& NSUri, nsCodeQOR::CUCS2String& Localname) const
	{
		__QCS_MEMBER_FCONTEXT( "CXmlNamespaceSupport::ProcessName" );
		int len = Name.Len();
		const nsCodeQOR::CUCS2String::char_type* pData = const_cast< nsCodeQOR::CUCS2String& >( Name ).GetNullableBuffer();		

		for( int pos = 0; pos < len; ++pos ) 
		{
			if( pData[ pos ] == ':' ) 
			{
				NSUri = Uri( Name.Mid( 0, static_cast< short >( pos ) ) );
				Localname = Name.Mid( static_cast< unsigned short >( pos + 1 ) );
				return;
			}
		}

		const_cast< nsCodeQOR::CUCS2String& >( Name ).ReleaseBuffer();

		// there was no ':'
		NSUri.Clear();
		// attributes don't take default namespace
		if( !IsAttribute && !m_Ns.empty()) 
		{
		/*	We want to access m_Ns.value(""), but as an optimization
			we use the fact that "" compares less than any other
			string, so it's either first in the map or not there.
		*/
			NamespaceMap::const_iterator it = m_Ns.cbegin();
			if( (*it).first.IsEmpty() )
			{
				NSUri = (*it).second; // get default namespace
			}
		}
		Localname = Name;
	}

	//------------------------------------------------------------------------------
	std::vector< nsCodeQOR::CUCS2String > CXmlNamespaceSupport::Prefixes() const
	{
		__QCS_MEMBER_FCONTEXT( "CXmlNamespaceSupport::Prefixes" );
		std::vector< nsCodeQOR::CUCS2String > List;

		NamespaceMap::const_iterator itc, it = m_Ns.cbegin();
		while( ( itc = it ) != m_Ns.cend() ) 
		{
			++it;
			if( !itc->first.IsEmpty() )
			{
				List.push_back( itc->first );
			}
		}
		return List;
	}

	//------------------------------------------------------------------------------
	std::vector< nsCodeQOR::CUCS2String > CXmlNamespaceSupport::Prefixes( const nsCodeQOR::CUCS2String& uri ) const
	{
		__QCS_MEMBER_FCONTEXT( "CXmlNamespaceSupport::Prefixes" );
		std::vector< nsCodeQOR::CUCS2String > List;

		NamespaceMap::const_iterator itc, it = m_Ns.cbegin();
		while( ( itc = it ) != m_Ns.cend() ) 
		{
			++it;
			if( itc->second == uri && !itc->first.IsEmpty() )
			{
				List.push_back( itc->first );
			}
		}
		return List;
	}

	//------------------------------------------------------------------------------
	void CXmlNamespaceSupport::PushContext()
	{
		__QCS_MEMBER_FCONTEXT( "CXmlNamespaceSupport::PushContext" );
		m_NsStack.push( m_Ns );
	}

	//------------------------------------------------------------------------------
	void CXmlNamespaceSupport::PopContext()
	{
		__QCS_MEMBER_FCONTEXT( "CXmlNamespaceSupport::PopContext" );
		m_Ns.clear();
		if( !m_NsStack.empty() )
		{
			m_Ns = m_NsStack.top();
			m_NsStack.pop();
		}
	}

	//------------------------------------------------------------------------------
	void CXmlNamespaceSupport::Reset()
	{
		__QCS_MEMBER_FCONTEXT( "CXmlNamespaceSupport::Reset" );
		while( !m_NsStack.empty() )
		{
			m_NsStack.pop();
		}
		m_Ns.clear();
	}

}//nsBluefoot

