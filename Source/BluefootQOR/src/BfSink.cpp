//BfSink.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Implements the base class for Bluefoot pipeline sinks

#include "BluefootQOR/BFSink.h"
#include "BluefootQOR/BfSource.h"

//------------------------------------------------------------------------------
namespace nsBluefoot
{
	//------------------------------------------------------------------------------
	CBFSink::CBFSink() : m_pSource( 0 )
	{
	}

	//------------------------------------------------------------------------------
	CBFSink::~CBFSink()
	{

	}

	//------------------------------------------------------------------------------
	CBFSink::CBFSink( const CBFSink& src )
	{
		*this = src;
	}

	//------------------------------------------------------------------------------
	CBFSink& CBFSink::operator = ( const CBFSink& src )
	{
		if( &src != this )
		{
			m_pSource = src.m_pSource;
		}
		return *this;
	}

	//------------------------------------------------------------------------------
	void CBFSink::SetSource( CBFSource* pSource )
	{
		m_pSource = pSource;
	}

	//------------------------------------------------------------------------------
	CBFSource* CBFSink::GetSource(void)
	{
		return m_pSource;
	}

	//------------------------------------------------------------------------------
	unsigned long CBFSink::GetData( nsCodeQOR::CTLRef< byte >& Data, unsigned long ulUnitsRequired )
	{
		bool bContinue = true;
		unsigned long ulUnitsAvailable = GetBuffer() ? GetBuffer()->ReadCapacity() : 0;

		if( GetMode() == ePull && ulUnitsAvailable < ulUnitsRequired )
		{
			unsigned long ulNewUnitsRequired = ulUnitsRequired - ulUnitsAvailable;
			unsigned long ulNewUnits = 0;
			bContinue = GetSource()->Read( ulNewUnits, ulNewUnitsRequired );
		}
		
		if( GetBuffer() )
		{
			Data.Attach( GetBuffer()->ReadRequest( ulUnitsRequired ), false );
		}
		else
		{
			ulUnitsRequired = bContinue ? 1 : 0;
		}

		return ulUnitsRequired;
	}

	//------------------------------------------------------------------------------
	bool CBFSink::Write( unsigned long& ulUnitsWritten, unsigned long ulUnitsToWrite )
	{
		unsigned long ulUnitsRead = 0;
		if( GetMode() == ePull )
		{			
			GetSource()->Read( ulUnitsRead, ulUnitsToWrite );
		}

		/*byte* pBuffer = */m_pBuffer->ReadRequest( ulUnitsToWrite );

		m_pBuffer->ReadAcknowledge( ulUnitsWritten );

		return true;
	}

}//nsBluefoot

