//BfPipeline.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "BluefootQOR/BFPipeline.h"
#include "BluefootQOR/BFSink.h"
#include "BluefootQOR/BFSource.h"

//------------------------------------------------------------------------------
namespace nsBluefoot
{
	//------------------------------------------------------------------------------
	CBFPipeline::CBFPipeline() : m_FlowMode( ePull ), m_pSource( 0 ), m_pSink( 0 )
	{
	}

	//------------------------------------------------------------------------------
	CBFPipeline::~CBFPipeline()
	{

	}

	//------------------------------------------------------------------------------
	CBFPipeline::CBFPipeline( const CBFPipeline& src )
	{
		*this = src;
	}

	//------------------------------------------------------------------------------
	CBFPipeline& CBFPipeline::operator = ( const CBFPipeline& src )
	{
		if (&src != this)
		{
			m_FlowMode = src.m_FlowMode;
			m_pSource = src.m_pSource;
			m_pSink = src.m_pSink;
		}
		return *this;
	}

	//------------------------------------------------------------------------------
	void CBFPipeline::SetSource( CBFSource* pSource )
	{
		m_pSource = pSource;
		m_pSource->SetParent( this );

		if( m_pSink && !m_pSink->GetSource() )
		{
			m_pSink->SetSource( m_pSource );
		}

		if( m_pSource && !m_pSource->GetSink() )
		{
			m_pSource->SetSink( m_pSink );
		}
	}

	//------------------------------------------------------------------------------
	CBFSource* CBFPipeline::GetSource(void)
	{
		return m_pSource;
	}
	//------------------------------------------------------------------------------
	void CBFPipeline::SetSink( CBFSink* pSink )
	{
		m_pSink = pSink;
		m_pSink->SetParent( this );

		if( m_pSource && !m_pSource->GetSink() )
		{
			m_pSource->SetSink( m_pSink );
		}

		if( m_pSink && !m_pSink->GetSource() )
		{
			m_pSink->SetSource( m_pSource );
		}
	}

	//------------------------------------------------------------------------------
	CBFSink* CBFPipeline::GetSink()
	{
		return m_pSink;
	}

	//------------------------------------------------------------------------------
	void CBFPipeline::Run()
	{
		while( Pump() )
		{
		}
	}

	//------------------------------------------------------------------------------
	bool CBFPipeline::Pump()
	{
		unsigned long ulUnitsPumped = 0;
		return Pump( ulUnitsPumped );
	}

	//------------------------------------------------------------------------------
	bool CBFPipeline::Pump( unsigned long& ulUnitsPumped, unsigned long ulUnitsToPump )
	{
		return m_FlowMode == ePush ? m_pSource->Read( ulUnitsPumped, ulUnitsToPump ) : m_pSink->Write( ulUnitsPumped, ulUnitsToPump );
	}

	//------------------------------------------------------------------------------
	void CBFPipeline::InsertFilter( CBFFilter* pFilter, eFilterPos Pos )
	{
		if( Pos == eBeforeSink )
		{
			pFilter->SetSource( GetSink()->GetSource() );
			pFilter->SetSink( GetSink() );
			pFilter->SetParent( this );
			GetSink()->GetSource()->SetSink( pFilter->AsSink() );
			GetSink()->SetSource( pFilter->AsSource() );			
		}
		else
		{
			pFilter->SetSource( GetSource() );
			pFilter->SetSink( GetSource()->GetSink() );
			pFilter->SetParent( this );
			GetSource()->GetSink()->SetSource( pFilter->AsSource() );
			GetSource()->SetSink( pFilter->AsSink() );
		}
	}

}//nsBluefoot

