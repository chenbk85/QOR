//Imm.cpp

// Copyright (c) 2008-2010, Petr Kobalicek <kobalicek.petr@gmail.com>
// Copyright (c) Querysoft Limited 2012
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//x86 Immediate operand implementation

#include "ArchQOR.h"

#if		( QOR_ARCH == QOR_ARCH_X86_32 || QOR_ARCH == QOR_ARCH_X86_64 )

#include "ArchQOR/x86/Assembler/Operands/Imm.h"
#include <new>

//------------------------------------------------------------------------------
namespace nsArch
{
	//------------------------------------------------------------------------------
	namespace nsx86
	{
	    //------------------------------------------------------------------------------
        CImm::~CImm() __QCMP_THROW
        {

        }

		//------------------------------------------------------------------------------
		// Create a new immediate value (initial value is 0).
		CImm::CImm() __QCMP_THROW : COperand( nsCodeQOR::_DontInitialize() )
		{
			m_Op = EOPERAND_IMM;
			m_Size = 0;
			m_Id = static_cast< Cmp_unsigned__int32 >( INVALID_VALUE );
			m_bIsUnsigned = false;
			m_Value = 0;
		}

		//------------------------------------------------------------------------------
		// Create a new signed immediate value, assigning the value from i.
		CImm::CImm( Cmp_int_ptr i ) __QCMP_THROW : COperand( nsCodeQOR::_DontInitialize() )
		{
			m_Op = EOPERAND_IMM;
			m_Size = 0;
			m_Id = static_cast< Cmp_unsigned__int32 >( INVALID_VALUE );
			m_bIsUnsigned = false;
			m_Value = i;
		}

		//------------------------------------------------------------------------------
		// Create a new signed or unsigned immediate value, assigning the value from i.
		CImm::CImm( Cmp_int_ptr i, bool isUnsigned ) __QCMP_THROW : COperand( nsCodeQOR::_DontInitialize() )
		{
			m_Op = EOPERAND_IMM;
			m_Size = 0;
			m_Id = static_cast< Cmp_unsigned__int32 >( INVALID_VALUE );
			m_bIsUnsigned = isUnsigned;
			m_Value = i;
		}

		//------------------------------------------------------------------------------
		// Create a new immediate value from other.
		CImm::CImm( const CImm& other ) __QCMP_THROW : COperand( other )
		{
		}

		//------------------------------------------------------------------------------
		// Get whether an immediate is unsigned value.
		bool CImm::isUnsigned() const __QCMP_THROW
		{
			return m_bIsUnsigned;
		}

		//------------------------------------------------------------------------------
		// Get signed immediate value.
		Cmp_int_ptr CImm::getValue() const __QCMP_THROW
		{
			return m_Value;
		}

		//------------------------------------------------------------------------------
		// Get unsigned immediate value.
		Cmp_uint_ptr CImm::getUValue() const __QCMP_THROW
		{
			return (Cmp_uint_ptr)m_Value;
		}

		//------------------------------------------------------------------------------
		// Set immediate value as signed type to val.
		void CImm::setValue( Cmp_int_ptr val, bool isUnsigned ) __QCMP_THROW
		{
			m_Value = val;
			isUnsigned = isUnsigned;
		}

		//------------------------------------------------------------------------------
		// Set immediate value as unsigned type to val.
		void CImm::setUValue( Cmp_uint_ptr val ) __QCMP_THROW
		{
			m_Value = (Cmp_int_ptr)val;
			m_bIsUnsigned = true;
		}


		//------------------------------------------------------------------------------
		// Assign a signed value val to the immediate operand.
		CImm& CImm::operator = ( Cmp_int_ptr val ) __QCMP_THROW
		{
			setValue( val );
			return *this;
		}

		//------------------------------------------------------------------------------
		// Assign other to the immediate operand.
		CImm& CImm::operator = ( const CImm& other ) __QCMP_THROW
		{
			Init( other );
			return *this;
		}

		//------------------------------------------------------------------------------
		//Create signed immediate value operand.
		CImm imm( Cmp_int_ptr i ) __QCMP_THROW
		{
			return CImm( i, false );
		}

		//------------------------------------------------------------------------------
		//Create unsigned immediate value operand.
		CImm uimm( Cmp_uint_ptr i ) __QCMP_THROW
		{
			return CImm( (Cmp_int_ptr)i, true );
		}

		//------------------------------------------------------------------------------
		COperand* CImm::Clone( CZone& zone ) const
		{
			CImm* pNewOperand = new( zone.zalloc( sizeof( CImm ) ) ) CImm( m_Value );
			if (pNewOperand)
			{
				*pNewOperand = *this;
			}
			return pNewOperand;
		}

		//------------------------------------------------------------------------------
		void CImm::Init( const COperand& other ) __QCMP_THROW
		{
			const CImm& ImmOther = dynamic_cast< const CImm& >( other );
			m_Op = EOPERAND_IMM;
			m_Size = static_cast< Cmp_unsigned__int8 >( other.getSize() );
			m_Id = other.getId();
			m_bIsUnsigned = ImmOther.m_bIsUnsigned;
			m_Value = ImmOther.getValue();
		}

	}//nsx86
}//nsArch

#endif//( QOR_ARCH == QOR_ARCH_X86_32 || QOR_ARCH == QOR_ARCH_X86_64 )
