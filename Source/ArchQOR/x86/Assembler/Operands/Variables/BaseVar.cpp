//BaseVar.cpp

// Copyright (c) 2008-2010, Petr Kobalicek <kobalicek.petr@gmail.com>
// Copyright (c) Querysoft Limited 2012
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "ArchQOR.h"

#if		( QOR_ARCH == QOR_ARCH_X86_32 || QOR_ARCH == QOR_ARCH_X86_64 )

#include "ArchQOR/x86/Assembler/Operands/Variables/BaseVar.h"
#include "ArchQOR/x86/Assembler/Operands/Variables/GPVar.h"
#include <new>

//------------------------------------------------------------------------------
namespace nsArch
{
	//------------------------------------------------------------------------------
	namespace nsx86
	{
		//------------------------------------------------------------------------------
		CBaseVar::CBaseVar( const nsCodeQOR::_DontInitialize& dontInitialize ) __QCMP_THROW : COperand( dontInitialize )
		{
		}

		//------------------------------------------------------------------------------
		CBaseVar::CBaseVar() __QCMP_THROW : COperand( nsCodeQOR::_DontInitialize() )
		{
			m_Op = EOPERAND_VAR;
			m_Size = 0;
			m_Id = static_cast< Cmp_unsigned__int32 >( INVALID_VALUE );
			m_RegisterCode = static_cast< Cmp_unsigned__int32 >( INVALID_VALUE );
			m_VariableType = static_cast< Cmp_unsigned__int32 >( INVALID_VALUE );
		}

		//------------------------------------------------------------------------------
		CBaseVar::CBaseVar( const CBaseVar& other ) __QCMP_THROW : COperand( other )
		{
			m_RegisterCode = other.m_RegisterCode;
			m_VariableType = other.m_VariableType;
		}

		//------------------------------------------------------------------------------
		CBaseVar::CBaseVar( const CBaseVar& other, Cmp_unsigned__int32 registerCode, Cmp_unsigned__int32 size ) __QCMP_THROW : COperand( nsCodeQOR::_DontInitialize() )
		{
			m_Op = EOPERAND_VAR;
			m_Size = (Cmp_unsigned__int8)size;
			m_Id = other.m_Id;
			m_RegisterCode = registerCode;
			m_VariableType = other.m_VariableType;
		}

        //------------------------------------------------------------------------------
        CBaseVar::~CBaseVar() __QCMP_THROW
        {

        }

		//------------------------------------------------------------------------------
		Cmp_unsigned__int32 CBaseVar::getVariableType() const __QCMP_THROW
		{
			return m_VariableType;
		}

		//------------------------------------------------------------------------------
		void CBaseVar::setVariableType( Cmp_unsigned__int32 uiVarType ) __QCMP_THROW
		{
			m_VariableType = uiVarType;
		}

		//------------------------------------------------------------------------------
		Cmp_unsigned__int32 CBaseVar::getRegisterCode( void ) const __QCMP_THROW
		{
			return m_RegisterCode;
		}

		//------------------------------------------------------------------------------
		void CBaseVar::setRegisterCode( Cmp_unsigned__int32 uiRegCode ) __QCMP_THROW
		{
			m_RegisterCode = uiRegCode;
		}

		//------------------------------------------------------------------------------
		bool CBaseVar::isGPVar() const __QCMP_THROW
		{
			return m_VariableType <= VARIABLE_TYPE_GPQ;
		}

		//------------------------------------------------------------------------------
		bool CBaseVar::isX87Var() const __QCMP_THROW
		{
			return m_VariableType >= VARIABLE_TYPE_X87 && m_VariableType <= VARIABLE_TYPE_X87_1D;
		}

		//------------------------------------------------------------------------------
		bool CBaseVar::isMMVar() const __QCMP_THROW
		{
			return m_VariableType == VARIABLE_TYPE_MM;
		}

		//------------------------------------------------------------------------------
		bool CBaseVar::isXMMVar() const __QCMP_THROW
		{
			return m_VariableType >= VARIABLE_TYPE_XMM && m_VariableType <= VARIABLE_TYPE_XMM_2D;
		}

		//------------------------------------------------------------------------------
		// Get whether this variable is general purpose BYTE register.
		bool CBaseVar::isGPB() const __QCMP_THROW
		{
			return ( m_RegisterCode & REG_TYPE_MASK ) <= REG_TYPE_GPB_HI;
		}

		//------------------------------------------------------------------------------
		// Get whether this variable is general purpose BYTE.LO register.
		bool CBaseVar::isGPBLo() const __QCMP_THROW
		{
			return ( m_RegisterCode & REG_TYPE_MASK ) == REG_TYPE_GPB_LO;
		}

		//------------------------------------------------------------------------------
		// Get whether this variable is general purpose BYTE.HI register.
		bool CBaseVar::isGPBHi() const __QCMP_THROW
		{
			return ( m_RegisterCode & REG_TYPE_MASK ) == REG_TYPE_GPB_HI;
		}

		//------------------------------------------------------------------------------
		// Get whether this variable is general purpose WORD register.
		bool CBaseVar::isGPW() const __QCMP_THROW
		{
			return ( m_RegisterCode & REG_TYPE_MASK ) == REG_TYPE_GPW;
		}

		//------------------------------------------------------------------------------
		// Get whether this variable is general purpose DWORD register.
		bool CBaseVar::isGPD() const __QCMP_THROW
		{
			return ( m_RegisterCode & REG_TYPE_MASK ) == REG_TYPE_GPD;
		}

		//------------------------------------------------------------------------------
		// Get whether this variable is general purpose QWORD (only 64-bit) register.
		bool CBaseVar::isGPQ() const __QCMP_THROW
		{
			return ( m_RegisterCode & REG_TYPE_MASK ) == REG_TYPE_GPQ;
		}

		//------------------------------------------------------------------------------
		COperand* CBaseVar::Clone( CZone& zone ) const
		{
			CBaseVar* pNewOperand = new( zone.zalloc( sizeof( CBaseVar ) ) ) CBaseVar();
			if (pNewOperand)
			{
				*pNewOperand = *this;
			}
			return pNewOperand;
		}

		//------------------------------------------------------------------------------
		void CBaseVar::Init( const COperand& other ) __QCMP_THROW
		{
			const CBaseVar& otherBase = dynamic_cast< const CBaseVar& >( other );
			m_Op = static_cast< Cmp_unsigned__int8 >( other.getType() );
			m_Size = static_cast< Cmp_unsigned__int8 >( other.getSize() );
			m_Id = other.getId();
			m_RegisterCode = otherBase.m_RegisterCode;
			m_VariableType = otherBase.m_VariableType;			// Type of variable. See VARIABLE_TYPE enum.
		}


		// --------------------------------------------------------------------------
		// Cast this variable to memory operand.
		// Note Size of operand depends to native variable type, you can use other variants if you want specific one.
		CMem CBaseVar::m() const __QCMP_THROW
		{
			return _BaseVarMem( *this, static_cast< Cmp_unsigned__int32 >( INVALID_VALUE ) );
		}

		//------------------------------------------------------------------------------
		//overload.
		CMem CBaseVar::m( Cmp_int_ptr disp ) const __QCMP_THROW
		{
			return _BaseVarMem( *this, static_cast< Cmp_unsigned__int32 >( INVALID_VALUE ), disp );
		}

		//------------------------------------------------------------------------------
		//overload.
		CMem CBaseVar::m( const CGPVar& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp ) const __QCMP_THROW
		{
			return _BaseVarMem( *this, static_cast< Cmp_unsigned__int32 >( INVALID_VALUE ), index, shift, disp );
		}

		//------------------------------------------------------------------------------
		// Cast this variable to 8-bit memory operand.
		CMem CBaseVar::m8() const __QCMP_THROW
		{
			return _BaseVarMem( *this, 1 );
		}

		//------------------------------------------------------------------------------
		//overload.
		CMem CBaseVar::m8( Cmp_int_ptr disp ) const __QCMP_THROW
		{
			return _BaseVarMem( *this, 1, disp );
		}

		//------------------------------------------------------------------------------
		//overload.
		CMem CBaseVar::m8( const CGPVar& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp ) const __QCMP_THROW
		{
			return _BaseVarMem( *this, 1, index, shift, disp );
		}

		//------------------------------------------------------------------------------
		// Cast this variable to 16-bit memory operand.
		CMem CBaseVar::m16() const __QCMP_THROW
		{
			return _BaseVarMem( *this, 2 );
		}

		//------------------------------------------------------------------------------
		//overload.
		CMem CBaseVar::m16( Cmp_int_ptr disp ) const __QCMP_THROW
		{
			return _BaseVarMem( *this, 2, disp );
		}

		//------------------------------------------------------------------------------
		//overload.
		CMem CBaseVar::m16( const CGPVar& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp ) const __QCMP_THROW
		{
			return _BaseVarMem( *this, 2, index, shift, disp );
		}

		//------------------------------------------------------------------------------
		// Cast this variable to 32-bit memory operand.
		CMem CBaseVar::m32() const __QCMP_THROW
		{
			return _BaseVarMem( *this, 4 );
		}

		//------------------------------------------------------------------------------
		//overload.
		CMem CBaseVar::m32( Cmp_int_ptr disp ) const __QCMP_THROW
		{
			return _BaseVarMem( *this, 4, disp );
		}

		//------------------------------------------------------------------------------
		//overload.
		CMem CBaseVar::m32( const CGPVar& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp ) const __QCMP_THROW
		{
			return _BaseVarMem( *this, 4, index, shift, disp );
		}

		//------------------------------------------------------------------------------
		// Cast this variable to 64-bit memory operand.
		CMem CBaseVar::m64() const __QCMP_THROW
		{
			return _BaseVarMem( *this, 8 );
		}

		//------------------------------------------------------------------------------
		//overload.
		CMem CBaseVar::m64( Cmp_int_ptr disp ) const __QCMP_THROW
		{
			return _BaseVarMem( *this, 8, disp );
		}

		//------------------------------------------------------------------------------
		//overload.
		CMem CBaseVar::m64( const CGPVar& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp ) const __QCMP_THROW
		{
			return _BaseVarMem( *this, 8, index, shift, disp );
		}

		//------------------------------------------------------------------------------
		// Cast this variable to 80-bit memory operand (long double).
		CMem CBaseVar::m80() const __QCMP_THROW
		{
			return _BaseVarMem( *this, 10 );
		}

		//------------------------------------------------------------------------------
		//overload.
		CMem CBaseVar::m80( Cmp_int_ptr disp ) const __QCMP_THROW
		{
			return _BaseVarMem( *this, 10, disp );
		}

		//------------------------------------------------------------------------------
		//overload.
		CMem CBaseVar::m80( const CGPVar& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp ) const __QCMP_THROW
		{
			return _BaseVarMem( *this, 10, index, shift, disp );
		}

		//------------------------------------------------------------------------------
		// Cast this variable to 128-bit memory operand.
		CMem CBaseVar::m128() const __QCMP_THROW
		{
			return _BaseVarMem( *this, 16 );
		}

		//------------------------------------------------------------------------------
		//overload.
		CMem CBaseVar::m128( Cmp_int_ptr disp ) const __QCMP_THROW
		{
			return _BaseVarMem( *this, 16, disp );
		}

		//------------------------------------------------------------------------------
		//overload.
		CMem CBaseVar::m128( const CGPVar& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp ) const __QCMP_THROW
		{
			return _BaseVarMem( *this, 16, index, shift, disp );
		}

		//------------------------------------------------------------------------------
		CBaseVar& CBaseVar::operator = ( const CBaseVar& other ) __QCMP_THROW
		{
			Init( other );
			return *this;
		}

		//------------------------------------------------------------------------------
		bool CBaseVar::operator == ( const CBaseVar& other ) const __QCMP_THROW
		{
			return m_Id == other.m_Id && m_RegisterCode == other.m_RegisterCode;
		}

		//------------------------------------------------------------------------------
		bool CBaseVar::operator != ( const CBaseVar& other ) const __QCMP_THROW
		{
			return m_Id != other.m_Id || m_RegisterCode != other.m_RegisterCode;
		}



		//------------------------------------------------------------------------------
		CMem _BaseVarMem( const CBaseVar& var, Cmp_unsigned__int32 ptrSize ) __QCMP_THROW
		{
			CMem m;

			m.setSize( ( ptrSize == INVALID_VALUE ) ? static_cast< Cmp_unsigned__int8 >( var.getSize() ) : static_cast< Cmp_unsigned__int8 >(ptrSize) );
			m.setMemType( OPERAND_MEM_NATIVE );
			m.setSegmentPrefix( SEGMENT_NONE );
			m.setSizePrefix( 0 );
			m.setShift( 0 );

			m.setId( var.getId() );

			m.setBase( static_cast< Cmp_unsigned__int32 >( INVALID_VALUE ) );
			m.setIndex( static_cast< Cmp_unsigned__int32 >( INVALID_VALUE ) );

			m.setTarget( 0 );
			m.setDisplacement( 0 );

			return m;
		}

		//------------------------------------------------------------------------------
		CMem _BaseVarMem( const CBaseVar& var, Cmp_unsigned__int32 ptrSize, Cmp_int_ptr disp ) __QCMP_THROW
		{
			CMem m;

			m.setSize( ptrSize == INVALID_VALUE ? static_cast< Cmp_unsigned__int8 >( var.getSize() ) : static_cast< Cmp_unsigned__int8 >( ptrSize ) );
			m.setMemType( OPERAND_MEM_NATIVE );
			m.setSegmentPrefix( SEGMENT_NONE );
			m.setSizePrefix( 0 );
			m.setShift( 0 );
			m.setId( var.getId() );
			m.setBase( static_cast< Cmp_unsigned__int32 >( INVALID_VALUE ) );
			m.setIndex( static_cast< Cmp_unsigned__int32 >( INVALID_VALUE ) );

			m.setTarget( 0 );
			m.setDisplacement( disp );

			return m;
		}

		//------------------------------------------------------------------------------
		CMem _BaseVarMem( const CBaseVar& var, Cmp_unsigned__int32 ptrSize, const CGPVar& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp ) __QCMP_THROW
		{
			CMem m;

			m.setSize( ( ptrSize == INVALID_VALUE ) ? static_cast< Cmp_unsigned__int8 >( var.getSize() ) : static_cast< Cmp_unsigned__int8 >( ptrSize ) );
			m.setMemType( OPERAND_MEM_NATIVE );
			m.setSegmentPrefix( SEGMENT_NONE );
			m.setSizePrefix( 0 );
			m.setShift( static_cast< Cmp_unsigned__int8 >( shift ) );
			m.setId( var.getId() );
			m.setBase( static_cast< Cmp_unsigned__int32 >( INVALID_VALUE ) );
			m.setIndex( index.getId() );

			m.setTarget( 0 );
			m.setDisplacement( disp );

			return m;
		}

	}//nsx86
}//nsArch

#endif//( QOR_ARCH == QOR_ARCH_X86_32 || QOR_ARCH == QOR_ARCH_X86_64 )
