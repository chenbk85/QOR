//x87Reg.cpp

// Copyright (c) 2008-2010, Petr Kobalicek <kobalicek.petr@gmail.com>
// Copyright (c) Querysoft Limited 2012
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "ArchQOR.h"

#if		( QOR_ARCH == QOR_ARCH_X86_32 || QOR_ARCH == QOR_ARCH_X86_64 )

#include "ArchQOR/x86/Assembler/Operands/Registers/x87Reg.h"
#include <assert.h>
#include <new>

//------------------------------------------------------------------------------
namespace nsArch
{
	namespace nsx86
	{
	    //------------------------------------------------------------------------------
        CX87Reg::~CX87Reg() __QCMP_THROW
        {

        }

		//------------------------------------------------------------------------------
		// Create non-initialized x87 register.
		CX87Reg::CX87Reg() __QCMP_THROW : CBaseReg( static_cast< Cmp_unsigned__int32 >( INVALID_VALUE ), 10 )
		{
		}

		//------------------------------------------------------------------------------
		// Create a reference to other x87 register.
		CX87Reg::CX87Reg( const CX87Reg& other ) __QCMP_THROW : CBaseReg( other )
		{
		}

		//------------------------------------------------------------------------------
		CX87Reg::CX87Reg( const nsCodeQOR::_DontInitialize& dontInitialize ) __QCMP_THROW : CBaseReg( dontInitialize )
		{
		}

		//------------------------------------------------------------------------------
		CX87Reg::CX87Reg( const nsCodeQOR::_Initialize&, Cmp_unsigned__int32 code ) __QCMP_THROW : CBaseReg( code | REG_TYPE_X87, 10 )
		{
		}

		// [Overloaded Operators]

		//------------------------------------------------------------------------------
		CX87Reg& CX87Reg::operator = ( const CX87Reg& other ) __QCMP_THROW
		{
			Init( other );
			return *this;
		}

		//------------------------------------------------------------------------------
		bool CX87Reg::operator == ( const CX87Reg& other ) const __QCMP_THROW
		{
			return getRegCode() == other.getRegCode();
		}

		//------------------------------------------------------------------------------
		bool CX87Reg::operator != ( const CX87Reg& other ) const __QCMP_THROW
		{
			return getRegCode() != other.getRegCode();
		}

		//------------------------------------------------------------------------------
		COperand* CX87Reg::Clone( CZone& zone ) const
		{
			CX87Reg* pNewOperand = new( zone.zalloc( sizeof( CX87Reg ) ) ) CX87Reg( nsCodeQOR::_DontInitialize() );
			if (pNewOperand)
			{
				*pNewOperand = *this;
			}
			return pNewOperand;
		}

		//------------------------------------------------------------------------------
		// Get x87 register with index i.
		CX87Reg st( Cmp_unsigned__int32 i ) __QCMP_THROW
		{
			assert( i < 8 );
			return CX87Reg( nsCodeQOR::_Initialize(), static_cast< Cmp_unsigned__int32 >( i ) );
		}


	}//nsx86
}//nsArch

#endif//( QOR_ARCH == QOR_ARCH_X86_32 || QOR_ARCH == QOR_ARCH_X86_64 )
