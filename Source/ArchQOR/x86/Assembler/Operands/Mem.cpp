//Mem.cpp

// Copyright (c) 2008-2010, Petr Kobalicek <kobalicek.petr@gmail.com>
// Copyright (c) Querysoft Limited 2012
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Implement mempory operand for x86

#include "ArchQOR.h"

#if		( QOR_ARCH == QOR_ARCH_X86_32 || QOR_ARCH == QOR_ARCH_X86_64 )

#include "ArchQOR/x86/Assembler/Operands/Mem.h"
#include "ArchQOR/x86/Assembler/Operands/Variables/GPVar.h"
#include <assert.h>
#include <new>

//------------------------------------------------------------------------------
namespace nsArch
{
	//------------------------------------------------------------------------------
	namespace nsx86
	{
	    //------------------------------------------------------------------------------
        CMem::~CMem() __QCMP_THROW
        {

        }

		//------------------------------------------------------------------------------
		CMem::CMem() __QCMP_THROW : COperand( nsCodeQOR::_DontInitialize() )
		{
			m_Op = EOPERAND_MEM;
			m_Size = 0;
			m_Type = OPERAND_MEM_NATIVE;
			m_SegmentPrefix = SEGMENT_NONE;
			m_SizePrefix = 0;
			m_Shift = 0;
			m_Id = static_cast< Cmp_unsigned__int32 >( INVALID_VALUE );

			m_Base = static_cast< Cmp_unsigned__int32 >( INVALID_VALUE );
			m_Index = static_cast< Cmp_unsigned__int32 >( INVALID_VALUE );

			m_pTarget = 0;
			m_Displacement = 0;
		}

		//------------------------------------------------------------------------------
		CMem::CMem( const CLabel& label, Cmp_int_ptr displacement, Cmp_unsigned__int32 size ) __QCMP_THROW : COperand( nsCodeQOR::_DontInitialize() )
		{
			m_Op = EOPERAND_MEM;
			m_Size = (Cmp_unsigned__int8)size;
			m_Type = OPERAND_MEM_LABEL;
			m_SegmentPrefix = SEGMENT_NONE;
			m_SizePrefix = 0;
			m_Shift = 0;
			m_Id = static_cast< Cmp_unsigned__int32 >( INVALID_VALUE );

			m_Base = (reinterpret_cast< const COperand& > (label )).getId();
			m_Index = static_cast< Cmp_unsigned__int32 >( INVALID_VALUE );

			m_pTarget = 0;
			m_Displacement = displacement;
		}

		//------------------------------------------------------------------------------
		CMem::CMem( const CGPReg& base, Cmp_int_ptr displacement, Cmp_unsigned__int32 size ) __QCMP_THROW : COperand( nsCodeQOR::_DontInitialize() )
		{
			m_Op = EOPERAND_MEM;
			m_Size = (Cmp_unsigned__int8)size;
			m_Type = OPERAND_MEM_NATIVE;
			m_SegmentPrefix = SEGMENT_NONE;
#if ( QOR_ARCH_WORDSIZE == 32 )
			m_SizePrefix = base.getSize() != 4;
#else
			m_SizePrefix = base.getSize() != 8;
#endif
			m_Shift = 0;
			m_Id = static_cast< Cmp_unsigned__int32 >( INVALID_VALUE );

			m_Base = base.getRegCode() & REG_INDEX_MASK;
			m_Index = static_cast< Cmp_unsigned__int32 >( INVALID_VALUE );

			m_pTarget = 0;
			m_Displacement = displacement;
		}

		//------------------------------------------------------------------------------
		CMem::CMem( const CGPReg& base, const CGPReg& index, Cmp_unsigned__int32 shift, Cmp_int_ptr displacement, Cmp_unsigned__int32 size/* = 0*/ ) __QCMP_THROW : COperand( nsCodeQOR::_DontInitialize() )
		{
			assert( shift <= 3 );

			m_Op = EOPERAND_MEM;
			m_Size = (Cmp_unsigned__int8)size;
			m_Type = OPERAND_MEM_NATIVE;
			m_SegmentPrefix = SEGMENT_NONE;
#if defined(ASMJIT_X86)
			m_SizePrefix = ( base.getSize() | index.getSize() ) != 4;
#else
			m_SizePrefix = ( base.getSize() | index.getSize() ) != 8;
#endif
			m_Shift = (Cmp_unsigned__int8)shift;
			m_Id = static_cast< Cmp_unsigned__int32 >( INVALID_VALUE );
			m_Base = base.getRegIndex();
			m_Index = index.getRegIndex();
			m_pTarget = 0;
			m_Displacement = displacement;
		}

		//------------------------------------------------------------------------------
		CMem::CMem( const CGPVar& base, const CGPVar& index, Cmp_unsigned__int32 shift, Cmp_int_ptr displacement, Cmp_unsigned__int32 size/* = 0*/ ) __QCMP_THROW : COperand( nsCodeQOR::_DontInitialize() )
		{
			assert( shift <= 3 );

			m_Op = EOPERAND_MEM;
			m_Size = (Cmp_unsigned__int8)size;
			m_Type = OPERAND_MEM_NATIVE;
			m_SegmentPrefix = SEGMENT_NONE;
#if defined(ASMJIT_X86)
			m_SizePrefix = ( base.m_Size | index.m_Size ) != 4;
#else
			m_SizePrefix = ( base.getSize() | index.getSize() ) != 8;
#endif
			m_Shift = (Cmp_unsigned__int8)shift;
			m_Id = static_cast< Cmp_unsigned__int32 >( INVALID_VALUE );
			m_Base = base.getId();
			m_Index = index.getId();
			m_pTarget = 0;
			m_Displacement = displacement;
		}

		//------------------------------------------------------------------------------
		CMem::CMem( const CGPVar& base, Cmp_int_ptr displacement, Cmp_unsigned__int32 size ) __QCMP_THROW : COperand( nsCodeQOR::_DontInitialize() )
		{
			m_Op = EOPERAND_MEM;
			m_Size = (Cmp_unsigned__int8)size;
			m_Type = OPERAND_MEM_NATIVE;
			m_SegmentPrefix = SEGMENT_NONE;
#if defined(ASMJIT_X86)
			m_SizePrefix = base.m_Size != 4;
#else
			m_SizePrefix = base.getSize() != 8;
#endif
			m_Shift = 0;
			m_Id = static_cast< Cmp_unsigned__int32 >( INVALID_VALUE );
			m_Base = base.getId();
			m_Index = static_cast< Cmp_unsigned__int32 >( INVALID_VALUE );
			m_pTarget = 0;
			m_Displacement = displacement;
		}

		//------------------------------------------------------------------------------
		CMem::CMem( const CMem& other ) __QCMP_THROW : COperand( other )
		{
			Init( other );
		}

		//------------------------------------------------------------------------------
		CMem::CMem( const nsCodeQOR::_DontInitialize& dontInitialize ) __QCMP_THROW : COperand( dontInitialize )
		{
		}

		//------------------------------------------------------------------------------
		void CMem::Init( const COperand& other ) __QCMP_THROW		// Initialize operand to another (used by constructors and assigment operators).
		{
			const CMem& otherMem = dynamic_cast< const CMem& >( other );
			m_Op = static_cast< Cmp_unsigned__int8 >( other.getType() );
			m_Size = static_cast< Cmp_unsigned__int8 >( other.getSize() );
			m_Id = other.getId();
			m_Type = otherMem.m_Type;
			m_SegmentPrefix = otherMem.m_SegmentPrefix;
			m_SizePrefix = otherMem.m_SizePrefix;
			m_Shift = otherMem.m_Shift;
			m_Base = otherMem.m_Base;
			m_Index = otherMem.m_Index;
			m_pTarget = otherMem.m_pTarget;
			m_Displacement = otherMem.m_Displacement;

		}

		//------------------------------------------------------------------------------
		COperand* CMem::Clone( CZone& zone ) const					//Clone this operand into Zone memory
		{
			CMem* pNewOperand = new( zone.zalloc( sizeof( CMem ) ) ) CMem();
			if (pNewOperand)
			{
				*pNewOperand = *this;
			}
			return pNewOperand;
		}

		//------------------------------------------------------------------------------
		// Get type of memory operand, see OPERAND_MEM_TYPE enum.
		Cmp_unsigned__int32 CMem::getMemType() const __QCMP_THROW
		{
			return m_Type;
		}

		//------------------------------------------------------------------------------
		void CMem::setMemType( Cmp_unsigned__int32 uiType ) __QCMP_THROW
		{
			m_Type = static_cast< Cmp_unsigned__int8 >( uiType );
		}

		//------------------------------------------------------------------------------
		// Get memory operand segment prefix, see SEGMENT_PREFIX enum.
		Cmp_unsigned__int32 CMem::getSegmentPrefix() const __QCMP_THROW
		{
			return m_SegmentPrefix;
		}

		//------------------------------------------------------------------------------
		void CMem::setSegmentPrefix( Cmp_unsigned__int32 uiSegmentPrefix ) __QCMP_THROW
		{
			m_SegmentPrefix = uiSegmentPrefix;
		}

		//------------------------------------------------------------------------------
		// Get whether the memory operand has base register.
		bool CMem::hasBase() const __QCMP_THROW
		{
			return m_Base != INVALID_VALUE;
		}

		//------------------------------------------------------------------------------
		// Get whether the memory operand has index.
		bool CMem::hasIndex() const __QCMP_THROW
		{
			return m_Index != INVALID_VALUE;
		}

		//------------------------------------------------------------------------------
		// Get whether the memory operand has shift used.
		bool CMem::hasShift() const __QCMP_THROW
		{
			return m_Shift != 0;
		}

		//------------------------------------------------------------------------------
		// Get memory operand base register or INVALID_VALUE.
		Cmp_unsigned__int32 CMem::getBase() const __QCMP_THROW
		{
			return m_Base;
		}

		//------------------------------------------------------------------------------
		void CMem::setBase( Cmp_unsigned__int32 uiBase ) __QCMP_THROW
		{
			m_Base = uiBase;
		}

		//------------------------------------------------------------------------------
		// Get memory operand index register or INVALID_VALUE.
		Cmp_unsigned__int32 CMem::getIndex() const __QCMP_THROW
		{
			return m_Index;
		}

		//------------------------------------------------------------------------------
		// Get memory operand index scale (0, 1, 2 or 3).
		Cmp_unsigned__int32 CMem::getShift() const __QCMP_THROW
		{
			return m_Shift;
		}

		//------------------------------------------------------------------------------
		// Get memory operand index scale (0, 1, 2 or 3).
		void CMem::setShift( Cmp_unsigned__int8 uiShift ) __QCMP_THROW
		{
			m_Shift = uiShift;
		}

		//------------------------------------------------------------------------------
		bool CMem::getSizePrefix() const __QCMP_THROW
		{
			return m_SizePrefix;
		}

		//------------------------------------------------------------------------------
		//Set whether to use size-override prefix.
		void CMem::setSizePrefix( bool b ) __QCMP_THROW
		{
			m_SizePrefix = b;
		}

		//------------------------------------------------------------------------------
		// Get absolute target address.
		//Note You should always check if operand contains address by getMemType().
		void* CMem::getTarget() const __QCMP_THROW
		{
			return m_pTarget;
		}

		//------------------------------------------------------------------------------
		// Set memory operand size.
		void CMem::setSize( Cmp_unsigned__int32 size ) __QCMP_THROW
		{
			m_Size = static_cast< Cmp_unsigned__int8 >( size );
		}

		//------------------------------------------------------------------------------
		// Set absolute target address.
		void CMem::setTarget( void* target ) __QCMP_THROW
		{
			m_pTarget = target;
		}

		//------------------------------------------------------------------------------
		// Get memory operand relative displacement.
		Cmp_int_ptr CMem::getDisplacement() const __QCMP_THROW
		{
			return m_Displacement;
		}

		//------------------------------------------------------------------------------
		// Set memory operand relative displacement.
		void CMem::setDisplacement( Cmp_int_ptr displacement ) __QCMP_THROW
		{
			m_Displacement = displacement;
		}

		//------------------------------------------------------------------------------
		// Adjust memory operand relative displacement by displacement.
		void CMem::adjust( Cmp_int_ptr displacement ) __QCMP_THROW
		{
			m_Displacement += displacement;
		}

		//------------------------------------------------------------------------------
		// Return new memory operand adjusted by displacement.
		CMem CMem::adjusted( Cmp_int_ptr displacement ) const __QCMP_THROW
		{
			CMem result( *this );
			result.adjust( displacement );
			return result;
		}

		//------------------------------------------------------------------------------
		void CMem::setIndex( Cmp_unsigned__int32 uiIndex ) __QCMP_THROW
		{
			m_Index = uiIndex;
		}

		// --------------------------------------------------------------------------
		CMem& CMem::operator = ( const CMem& other ) __QCMP_THROW
		{
			Init( other );
			return *this;
		}

		//------------------------------------------------------------------------------
		bool CMem::operator == ( const CMem& other ) const __QCMP_THROW
		{
			return
			m_Size == other.m_Size &&
			m_Type == other.m_Type &&
			m_SegmentPrefix == other.m_SegmentPrefix &&
			m_Base == other.m_Base &&
			m_Index == other.m_Index &&
			m_Shift == other.m_Shift &&
			m_pTarget == other.m_pTarget &&
			m_Displacement == other.m_Displacement;
		}

		//------------------------------------------------------------------------------
		bool CMem::operator != ( const CMem& other ) const __QCMP_THROW
		{
			return !(*this == other);
		}



		//------------------------------------------------------------------------------
		__QOR_INTERFACE( __ARCHQOR ) CMem _MemPtrBuild( const CLabel& label, Cmp_int_ptr disp, Cmp_unsigned__int32 ptrSize ) __QCMP_THROW
		{
			return CMem( label, disp, ptrSize );
		}

		//------------------------------------------------------------------------------
		__QOR_INTERFACE( __ARCHQOR ) CMem _MemPtrBuild( const CLabel& label, const CGPReg& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp, Cmp_unsigned__int32 ptrSize ) __QCMP_THROW
		{
			CMem m( label, disp, ptrSize );

			m.setIndex( index.getRegIndex() );
			m.setShift( static_cast< Cmp_unsigned__int8 >( shift ) );

			return m;
		}

		//------------------------------------------------------------------------------
		__QOR_INTERFACE( __ARCHQOR ) CMem _MemPtrBuild( const CLabel& label, const CGPVar& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp, Cmp_unsigned__int32 ptrSize ) __QCMP_THROW
		{
			CMem m( label, disp, ptrSize );

			m.setIndex( index.getId() );
			m.setShift( static_cast< Cmp_unsigned__int8 >( shift ) );

			return m;
		}

		// Mem - ptr[] - Absolute Addressing
		//------------------------------------------------------------------------------
		__QOR_INTERFACE( __ARCHQOR ) CMem _MemPtrAbs( void* target, Cmp_int_ptr disp, Cmp_unsigned__int32 segmentPrefix, Cmp_unsigned__int32 ptrSize ) __QCMP_THROW
		{
			CMem m;
			m.setSize( static_cast< Cmp_unsigned__int8 >( ptrSize ) );
			m.setMemType( OPERAND_MEM_ABSOLUTE );
			m.setSegmentPrefix( segmentPrefix );
			m.setTarget( target );
			m.setDisplacement( disp );
			return m;
		}

		//------------------------------------------------------------------------------
		__QOR_INTERFACE( __ARCHQOR ) CMem _MemPtrAbs( void* target, const CGPReg& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp, Cmp_unsigned__int32 segmentPrefix, Cmp_unsigned__int32 ptrSize ) __QCMP_THROW
		{
			CMem m;

			m.setSize( static_cast< Cmp_unsigned__int8 >( ptrSize ) );
			m.setMemType( OPERAND_MEM_ABSOLUTE );
			m.setSegmentPrefix( (Cmp_unsigned__int8)segmentPrefix );

#if defined(ASMJIT_X86)
			m.m_SizePrefix = index.getSize() != 4;
#else
			m.setSizePrefix( index.getSize() != 8 );
#endif

			m.setShift( static_cast< Cmp_unsigned__int8 >( shift ) );
			m.setBase( static_cast< Cmp_unsigned__int32 >( INVALID_VALUE ) );
			m.setIndex( index.getRegIndex() );
			m.setTarget( target );
			m.setDisplacement( disp );
			return m;
		}

		//------------------------------------------------------------------------------
		__QOR_INTERFACE( __ARCHQOR ) CMem _MemPtrAbs( void* target, const CGPVar& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp, Cmp_unsigned__int32 segmentPrefix, Cmp_unsigned__int32 ptrSize ) __QCMP_THROW
		{
			CMem m;

			m.setSize( static_cast< Cmp_unsigned__int8 >( ptrSize ) );
			m.setMemType( OPERAND_MEM_ABSOLUTE );
			m.setSegmentPrefix( (Cmp_unsigned__int8)segmentPrefix );

#if defined(ASMJIT_X86)
			m.m_SizePrefix = index.getSize() != 4;
#else
			m.setSizePrefix( index.getSize() != 8 );
#endif

			m.setShift( static_cast< Cmp_unsigned__int8 >( shift ) );
			m.setBase( static_cast< Cmp_unsigned__int32 >( INVALID_VALUE ) );
			m.setIndex( index.getId() );
			m.setTarget( target );
			m.setDisplacement( disp );

			return m;
		}

		// CMem - ptr[base + displacement]
		//------------------------------------------------------------------------------
		__QOR_INTERFACE( __ARCHQOR ) CMem _MemPtrBuild( const CGPReg& base, Cmp_int_ptr disp, Cmp_unsigned__int32 ptrSize ) __QCMP_THROW
		{
			return CMem( base, disp, ptrSize );
		}

		//------------------------------------------------------------------------------
		__QOR_INTERFACE( __ARCHQOR ) CMem _MemPtrBuild( const CGPReg& base, const CGPReg& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp, Cmp_unsigned__int32 ptrSize ) __QCMP_THROW
		{
			return CMem( base, index, shift, disp, ptrSize );
		}

		//------------------------------------------------------------------------------
		__QOR_INTERFACE( __ARCHQOR ) CMem _MemPtrBuild( const CGPVar& base, Cmp_int_ptr disp, Cmp_unsigned__int32 ptrSize ) __QCMP_THROW
		{
			return CMem( base, disp, ptrSize );
		}

		//------------------------------------------------------------------------------
		__QOR_INTERFACE( __ARCHQOR ) CMem _MemPtrBuild( const CGPVar& base, const CGPVar& index, Cmp_unsigned__int32 shift, Cmp_int_ptr disp, Cmp_unsigned__int32 ptrSize ) __QCMP_THROW
		{
			return CMem( base, index, shift, disp, ptrSize );
		}

	}//nsx86
}//nsArch

#endif//( QOR_ARCH == QOR_ARCH_X86_32 || QOR_ARCH == QOR_ARCH_X86_64 )
