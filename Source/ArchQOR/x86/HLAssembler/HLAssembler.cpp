//HLAssembler.cpp

// Copyright (c) 2008-2010, Petr Kobalicek <kobalicek.petr@gmail.com>
// Copyright (c) Querysoft Limited 2012, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Implement High level assembler for x86PC platform

#include "ArchQOR.h"

#if		( QOR_ARCH == QOR_ARCH_X86_32 || QOR_ARCH == QOR_ARCH_X86_64 )

#include "ArchQOR/x86/HLAssembler/HLAssembler.h"
#include <string.h>
#include <assert.h>
#include <stdarg.h>

//------------------------------------------------------------------------------
namespace nsArch
{
	//------------------------------------------------------------------------------
	namespace nsx86
	{
		//------------------------------------------------------------------------------
		bool CompilerUtil::isStack16ByteAligned()
		{
		  // Stack is always aligned to 16-bytes when using 64-bit OS.
		  bool result = (sizeof(Cmp_uint_ptr) == 8);

		  //TODO: Get this properly from a generic interface on the System library

		  // Modern Linux, APPLE and UNIX guarantees stack alignment to 16 bytes by
		  // default. I'm really not sure about all UNIX operating systems, because
		  // 16-byte alignment is an addition to the older specification.
#		if (defined(__linux__)   || \
			 defined(__linux)     || \
			 defined(linux)       || \
			 defined(__unix__)    || \
			 defined(__FreeBSD__) || \
			 defined(__NetBSD__)  || \
			 defined(__OpenBSD__) || \
			 defined(__DARWIN__)  || \
			 defined(__APPLE__)   )
		  result = true;
#		endif // __linux__

		  return result;
		}

		//------------------------------------------------------------------------------
		void StateData::clear() __QCMP_THROW
		{
			usedGP = 0;
			usedMM = 0;
			usedXMM = 0;
			changedGP = 0;
			changedMM = 0;
			changedXMM = 0;
			memVarsCount = 0;
			memset( regs, 0, sizeof( VarData* ) * NUM_REGS );
			memset( memVarsData, 0, sizeof( memVarsData ) );
		}

		//------------------------------------------------------------------------------
		Cmp_unsigned__int32 getVariableClass( Cmp_unsigned__int32 type )
		{
			assert( type < __QCS_ARRAY_SIZE( variableInfo ) );
			return variableInfo[ type ].clazz;
		}

		//------------------------------------------------------------------------------
		bool isVariableInteger( Cmp_unsigned__int32 type )
		{
			assert(type < __QCS_ARRAY_SIZE( variableInfo ) );
			return ( variableInfo[ type ].clazz & VariableInfo::CLASS_GP ) != 0;
		}

		//------------------------------------------------------------------------------
		bool isVariableFloat( Cmp_unsigned__int32 type )
		{
			assert( type < __QCS_ARRAY_SIZE( variableInfo ) );
			return ( variableInfo[ type ].flags & ( VariableInfo::FLAG_SP_FP | VariableInfo::FLAG_DP_FP ) ) != 0;
		}

		//------------------------------------------------------------------------------
		Cmp_unsigned__int32 getVariableSize( Cmp_unsigned__int32 type )
		{
			assert( type < __QCS_ARRAY_SIZE( variableInfo ) );
			return variableInfo[type].size;
		}

		//------------------------------------------------------------------------------
		CGPVar GPVarFromData( VarData* vdata )
		{
			CGPVar var;
			var.setId( vdata->id );
			var.setSize( static_cast< Cmp_unsigned__int8 >( vdata->size ) );
			var.setRegisterCode( variableInfo[ vdata->type ].code );
			var.setVariableType( vdata->type );
			return var;
		}

		//------------------------------------------------------------------------------
		Cmp_unsigned__int32 getVariableRegisterCode( Cmp_unsigned__int32 type, Cmp_unsigned__int32 index )
		{
			assert( type < __QCS_ARRAY_SIZE( variableInfo ) );
			return variableInfo[ type ].code | index;
		}

	}//nsx86
}//nsArch

#endif//( QOR_ARCH == QOR_ARCH_X86_32 || QOR_ARCH == QOR_ARCH_X86_64 )
