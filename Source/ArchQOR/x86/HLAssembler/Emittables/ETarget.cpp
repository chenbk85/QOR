//ETarget.cpp

// Copyright (c) 2008-2010, Petr Kobalicek <kobalicek.petr@gmail.com>
// Copyright (c) Querysoft Limited 2012
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Implements an x86 jump target

#include "ArchQOR.h"

#if		( QOR_ARCH == QOR_ARCH_X86_32 || QOR_ARCH == QOR_ARCH_X86_64 )

#include "ArchQOR/x86/HLAssembler/Emittables/ETarget.h"
#include "ArchQOR/x86/HLAssembler/x86HLAContext.h"
#include <assert.h>

//------------------------------------------------------------------------------
namespace nsArch
{
	namespace nsx86
	{		

		//------------------------------------------------------------------------------
		CETarget::CETarget( nsArch::CHighLevelAssemblerBase* c, const CLabel& label ) __QCMP_THROW : nsArch::CEmittable( c, EMITTABLE_TARGET ),
		m_Label( label ),
		m_pFrom( 0 ),
		m_pState( 0 ),
		m_uiJumpsCount( 0 )
		{
		}

		//------------------------------------------------------------------------------
		CETarget::~CETarget() __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		void CETarget::prepare( CHLAssemblerContextBase& cc) __QCMP_THROW
		{
			m_uiOffset = cc.IncrementCurrentOffset();
		}

		//------------------------------------------------------------------------------
		nsArch::CEmittable* CETarget::translate( CHLAssemblerContextBase& hlac ) __QCMP_THROW
		{
			// If this CETarget was already translated, it's needed to change the current
			// state and return 0 to tell HLAContext to process next untranslated
			// emittable.
			Cx86HLAContext& cc = dynamic_cast< Cx86HLAContext& >( hlac );
			if( m_ucTranslated )
			{
				cc._restoreState( m_pState );
				return 0;
			}

			if( cc.getUnreachable() )
			{
				cc.setUnreachable( 0 );

				// Assign state to the compiler context. 
				assert( m_pState != 0 );
				cc._assignState( m_pState );
			}
			else
			{
				m_pState = cc._saveState();
			}

			return translated();
		}

		//------------------------------------------------------------------------------
		void CETarget::emit( CHighLevelAssemblerBase& ab ) __QCMP_THROW
		{
			Cx86HLAIntrinsics& a = dynamic_cast< Cx86HLAIntrinsics& >( ab );
			a.getContext()->getAssembler()->bind( m_Label );
		}

		//------------------------------------------------------------------------------
		int CETarget::getMaxSize() const __QCMP_THROW
		{
			return 0;
		}

	}//nsx86
}//nsArch

#endif//( QOR_ARCH == QOR_ARCH_X86_32 || QOR_ARCH == QOR_ARCH_X86_64 )
