//EJmp.cpp

// Copyright (c) 2008-2010, Petr Kobalicek <kobalicek.petr@gmail.com>
// Copyright (c) Querysoft Limited 2012
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Implement x86 Jump emittable

#include "ArchQOR.h"

#if		( QOR_ARCH == QOR_ARCH_X86_32 || QOR_ARCH == QOR_ARCH_X86_64 )

#include "ArchQOR/x86/HLAssembler/Emittables/EJmp.h"
#include "ArchQOR/x86/HLAssembler/x86HLAContext.h"
#include <assert.h>

//------------------------------------------------------------------------------
namespace nsArch
{
	//------------------------------------------------------------------------------
	namespace nsx86
	{
		//------------------------------------------------------------------------------
		CEJmp::CEJmp( Cx86HLAIntrinsics* c, Cmp_unsigned__int32 code, COperand** paOperandsData, Cmp_unsigned__int32 operandsCount ) __QCMP_THROW : CEInstruction( c, code, paOperandsData, operandsCount )
		{
			m_pJumpTarget = ( dynamic_cast< Cx86HLAssembler* >( m_pHLAssembler ) )->_getTarget( m_pOperands[ 0 ]->getId() );
			m_pJumpTarget->IncrementJumpsCount();

			m_pJumpNext = m_pJumpTarget->getFrom();
			m_pJumpTarget->setFrom( this );

			// The 'jmp' is always taken, conditional jump can contain hint, we detect it.
			m_bIsTaken = ( getCode() == INST_JMP ) ||  ( operandsCount > 1 && paOperandsData[1]->isImm() && reinterpret_cast< CImm* >( paOperandsData[ 1 ] )->getValue() == HINT_TAKEN );
		}

		//------------------------------------------------------------------------------
		CEJmp::~CEJmp() __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		void CEJmp::prepare( CHLAssemblerContextBase& hlac ) __QCMP_THROW
		{
			Cx86HLAContext& cc = dynamic_cast< Cx86HLAContext& >( hlac );
			m_uiOffset = cc.GetCurrentOffset();

			// Update m_bIsTaken to true if this is conditional backward jump. This behavior
			// can be overriden by using HINT_NOT_TAKEN when using the instruction.
			if( getCode() != INST_JMP && m_uiOperandsCount == 1 && m_pJumpTarget->getOffset() < getOffset() )
			{
				m_bIsTaken = true;
			}

			// Now patch all variables where jump location is in the active range.
			if( m_pJumpTarget->getOffset() != INVALID_VALUE && cc.getActive() )
			{
				VarData* first = cc.getActive();
				VarData* var = first;
				Cmp_unsigned__int32 jumpOffset = m_pJumpTarget->getOffset();

				do 
				{
					if( var->firstEmittable )
					{
						assert( var->lastEmittable != 0 );
						Cmp_unsigned__int32 start = var->firstEmittable->getOffset();
						Cmp_unsigned__int32 end = var->lastEmittable->getOffset();

						if( jumpOffset >= start && jumpOffset <= end )
						{
							var->lastEmittable = this;
						}
					}
					var = var->nextActive;
				} while( var != first );
			}

			cc.IncrementCurrentOffset();
		}

		//------------------------------------------------------------------------------
		nsArch::CEmittable* CEJmp::translate( CHLAssemblerContextBase& hlac ) __QCMP_THROW
		{
			Cx86HLAContext& cc = dynamic_cast< Cx86HLAContext& >( hlac );

			// Translate using EInstruction.
			nsArch::CEmittable* ret = CEInstruction::translate( cc );

			// We jump with emittable if its INST_JUMP (not based on condiiton) and it points into yet unknown location.
			if( m_uiCode == INST_JMP && !m_pJumpTarget->isTranslated() )
			{
				cc.addBackwardCode( this );
				ret = m_pJumpTarget;
			}
			else
			{
				m_pState = cc._saveState();
				if( m_pJumpTarget->isTranslated() )
				{
					DoJump( cc );
				}
				else
				{
					// State is not known, so we need to call DoJump() later. Compiler will do it for us.
					cc.addForwardJump( this );
					m_pJumpTarget->setState( m_pState );
				}

				// Mark next code as unrecheable, cleared by a next label (CETarget).
				if( m_uiCode == INST_JMP )
				{
					cc.setUnreachable( 1 );
				}
			}

			// Need to traverse over all active variables and unuse them if their scope ends here. 
			if( cc.getActive() )
			{
				VarData* first = cc.getActive();
				VarData* var = first;

				do 
				{
					cc._unuseVarOnEndOfScope( this, var );
					var = var->nextActive;
				} while( var != first );
			}

			return ret;
		}

		//------------------------------------------------------------------------------
		void CEJmp::emit( CHighLevelAssemblerBase& ab ) __QCMP_THROW
		{

			static const Cmp_unsigned_int MAXIMUM_SHORT_JMP_SIZE = 127;

			// Try to minimize size of jump using SHORT jump (8-bit displacement) by 
			// traversing into the target and calculating the maximum code size. We
			// end when code size reaches MAXIMUM_SHORT_JMP_SIZE.
			if( !( m_uiEmitOptions & EMIT_OPTION_SHORT_JUMP ) && getJumpTarget()->getOffset() > getOffset() )
			{
				// Calculate the code size.
				Cmp_unsigned_int codeSize = 0;
				CEmittable* cur = this->getNext();
				CEmittable* target = getJumpTarget();

				while( cur )
				{
					if( cur == target )
					{
						// Target found, we can tell assembler to generate short form of jump.
						m_uiEmitOptions |= EMIT_OPTION_SHORT_JUMP;
						break;
					}

					int s = cur->getMaxSize();
					if( s == -1 )
					{
						break;
					}

					codeSize += (Cmp_unsigned_int)s;
					if( codeSize > MAXIMUM_SHORT_JMP_SIZE )
					{
						break;
					}

					cur = cur->getNext();
				}
			}

	//end:
			CEInstruction::emit( ab );
		}

		//------------------------------------------------------------------------------
		void CEJmp::DoJump( Cx86HLAContext& cc ) __QCMP_THROW
		{
			// The state have to be already known. The DoJump() method is called by
			// translate() or by Compiler in case that it's forward jump.
			assert( m_pJumpTarget->getState() );

			if( getCode() == INST_JMP || ( isTaken() && m_pJumpTarget->getOffset() < getOffset() ) )
			{
				// Instruction type is JMP or conditional jump that should be taken (likely).
				// We can set state here instead of jumping out, setting state and jumping
				// to m_pJumpTarget.
				//
				// NOTE: We can't use this technique if instruction is forward conditional
				// jump. The reason is that when generating code we can't change state here,
				// because next instruction depends to it.
				cc._restoreState( m_pJumpTarget->getState(), m_pJumpTarget->getOffset() );
			}
			else
			{
				// Instruction type is JMP or conditional jump that should be not normally
				// taken. If we need add code that will switch between different states we
				// add it after the end of function body (after epilog, using 'ExtraBlock').
				Cx86HLAIntrinsics* compiler = dynamic_cast< Cx86HLAIntrinsics* >( cc.getHighLevelAssembler() );

				nsArch::CEmittable* ext = cc.getExtraBlock();
				nsArch::CEmittable* old = compiler->setCurrentEmittable(ext);

				cc._restoreState( m_pJumpTarget->getState(), m_pJumpTarget->getOffset() );

				if( compiler->getCurrentEmittable() != ext )
				{
					// Add the jump to the target.
					compiler->jmp( m_pJumpTarget->getLabel() );
					ext = compiler->getCurrentEmittable();

					// The cc._restoreState() method emitted some instructions so we need to patch the jump.
					CLabel* pL = dynamic_cast< CLabel* >( ( compiler->newLabel() ).Clone( ( dynamic_cast< Cx86HLAIntrinsics* >( getHLA() ) )->getZone() ) );
					compiler->setCurrentEmittable( cc.getExtraBlock() );
					compiler->bind( *pL );

					// Finally, patch the jump target.
					assert( m_uiOperandsCount > 0 );
					m_pOperands[ 0 ] = pL;                              // Operand part (Label).
					m_pJumpTarget = compiler->_getTarget( pL->getId() ); // Emittable part (CETarget).
				}

				cc.setExtraBlock( ext );
				compiler->setCurrentEmittable( old );

				// Assign state back.
				cc._assignState( m_pState );
			}
		}

		//------------------------------------------------------------------------------
		CETarget* CEJmp::getJumpTarget() const __QCMP_THROW
		{
			return m_pJumpTarget;
		}

	}//nsx86
}//nsArch

#endif//( QOR_ARCH == QOR_ARCH_X86_32 || QOR_ARCH == QOR_ARCH_X86_64 )
