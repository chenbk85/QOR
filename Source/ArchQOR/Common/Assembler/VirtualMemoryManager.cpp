//VirtualMemoryManager.cpp

// Copyright (c) 2008-2010, Petr Kobalicek <kobalicek.petr@gmail.com>
// Copyright (c) Querysoft Limited 2012, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "ArchQOR.h"
#include "ArchQOR/Common/Assembler/VirtualMemoryManager.h"
#include "ArchQOR/Common/Assembler/MemoryManagerPrivate.h"
#include "ArchQOR/Common/HLAssembler/Defs.h"
#include <string.h>
#include <assert.h>
#include "SystemQOR.h"
#include <new>
#include "CodeQOR/Tracing/FunctionContextBase.h"

//------------------------------------------------------------------------------
namespace nsArch
{
	//------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID(CVirtualMemoryManager);

	//------------------------------------------------------------------------------
	CVirtualMemoryManager::CVirtualMemoryManager() __QCMP_THROW
	{
		__QCS_MEMBER_FCONTEXT("CVirtualMemoryManager::CVirtualMemoryManager");

		MemoryManagerPrivate* d = new/*(std::nothrow)*/ MemoryManagerPrivate( nsCodeQOR::CProcessBase::ThisProcess() );
		_d = (void*)d;
	}

	//------------------------------------------------------------------------------
	CVirtualMemoryManager::CVirtualMemoryManager( nsCodeQOR::CProcessBase* pProcess ) __QCMP_THROW
	{
		__QCS_MEMBER_FCONTEXT("CVirtualMemoryManager::CVirtualMemoryManager");
		MemoryManagerPrivate* d = new/*(std::nothrow)*/ MemoryManagerPrivate( pProcess );
		_d = (void*)d;
	}

	//------------------------------------------------------------------------------
	CVirtualMemoryManager::~CVirtualMemoryManager() __QCMP_THROW
	{
		__QCS_MEMBER_FCONTEXT("CVirtualMemoryManager::~CVirtualMemoryManager");
		MemoryManagerPrivate* d = reinterpret_cast<MemoryManagerPrivate*>(_d);
		delete d;
	}

	//------------------------------------------------------------------------------
	void* CVirtualMemoryManager::alloc(Cmp_uint_ptr size, Cmp_unsigned__int32 type) __QCMP_THROW
	{
		__QCS_MEMBER_FCONTEXT("CVirtualMemoryManager::alloc");
		MemoryManagerPrivate* d = reinterpret_cast<MemoryManagerPrivate*>(_d);

		if (type == MEMORY_ALLOC_PERMANENT)
		{
			return d->allocPermanent(size);
		}
		else
		{
			return d->allocFreeable(size);
		}
	}

	//------------------------------------------------------------------------------
	bool CVirtualMemoryManager::free(void* address) __QCMP_THROW
	{
		__QCS_MEMBER_FCONTEXT("CVirtualMemoryManager::free");
		MemoryManagerPrivate* d = reinterpret_cast<MemoryManagerPrivate*>(_d);
		return d->free(address);
	}

	//------------------------------------------------------------------------------
	bool CVirtualMemoryManager::shrink(void* address, Cmp_uint_ptr used) __QCMP_THROW
	{
		__QCS_MEMBER_FCONTEXT("CVirtualMemoryManager::shrink");
		MemoryManagerPrivate* d = reinterpret_cast<MemoryManagerPrivate*>(_d);
		return d->shrink(address, used);
	}

	//------------------------------------------------------------------------------
	void CVirtualMemoryManager::freeAll() __QCMP_THROW
	{
		__QCS_MEMBER_FCONTEXT("CVirtualMemoryManager::freeAll");
		MemoryManagerPrivate* d = reinterpret_cast<MemoryManagerPrivate*>(_d);

		// Calling MemoryManager::freeAll() will never keep allocated memory.
		d->freeAll(false);
	}

	//------------------------------------------------------------------------------
	Cmp_uint_ptr CVirtualMemoryManager::getUsedBytes() __QCMP_THROW
	{
		__QCS_MEMBER_FCONTEXT("CVirtualMemoryManager::getUsedBytes");
		MemoryManagerPrivate* d = reinterpret_cast<MemoryManagerPrivate*>(_d);
		return d->_used;
	}

	//------------------------------------------------------------------------------
	Cmp_uint_ptr CVirtualMemoryManager::getAllocatedBytes() __QCMP_THROW
	{
		__QCS_MEMBER_FCONTEXT("CVirtualMemoryManager::getAllocatedBytes");
		MemoryManagerPrivate* d = reinterpret_cast<MemoryManagerPrivate*>(_d);
		return d->_allocated;
	}

	//------------------------------------------------------------------------------
	bool CVirtualMemoryManager::getKeepVirtualMemory() const __QCMP_THROW
	{
		__QCS_MEMBER_FCONTEXT("CVirtualMemoryManager::getKeepVirtualMemory");
		MemoryManagerPrivate* d = reinterpret_cast<MemoryManagerPrivate*>(_d);
		return d->_keepVirtualMemory;
	}

	//------------------------------------------------------------------------------
	void CVirtualMemoryManager::setKeepVirtualMemory(bool keepVirtualMemory) __QCMP_THROW
	{
		__QCS_MEMBER_FCONTEXT("CVirtualMemoryManager::setKeepVirtualMemory");
		MemoryManagerPrivate* d = reinterpret_cast<MemoryManagerPrivate*>(_d);
		d->_keepVirtualMemory = keepVirtualMemory;
	}

}//nsArch
