//Zone.cpp

// Copyright (c) 2008-2010, Petr Kobalicek <kobalicek.petr@gmail.com>
// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//A specialist allocator for the JIT Assemblers
//Code is generic over standard C library interface

#include "SystemQOR.h"
#include "ArchQOR/Common/Assembler/Zone.h"
#include <string.h>
#include "CodeQOR/Tracing/FunctionContextBase.h"

//--------------------------------------------------------------------------------
namespace nsArch
{
	//------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID(CZone);

	//------------------------------------------------------------------------------
	CZone::CZone( Cmp_uint_ptr chunkSize ) __QCMP_THROW
	{
		__QCS_MEMBER_FCONTEXT("CZone::CZone");
		m_pChunks = 0;
		m_uiTotal = 0;
		m_uiChunkSize = chunkSize;
	}

	//------------------------------------------------------------------------------
	CZone::~CZone() __QCMP_THROW
	{
		__QCS_MEMBER_FCONTEXT("CZone::~CZone");
		freeAll();
	}

	//------------------------------------------------------------------------------
	void* CZone::zalloc( Cmp_uint_ptr size ) __QCMP_THROW
	{
		__QCS_MEMBER_FCONTEXT("CZone::zalloc");
		// Align to 4 or 8 bytes depending on 32 or 64 bit target
		size = ( size + sizeof( Cmp_int_ptr ) - 1 ) & ~( sizeof( Cmp_int_ptr ) - 1 );

		Chunk* cur = m_pChunks;

		if( !cur || cur->getRemainingBytes() < size )
		{
			Cmp_uint_ptr chSize = m_uiChunkSize;
			if( chSize < size )
			{
				chSize = size;
			}

			cur = (Chunk*)::malloc( sizeof( Chunk ) - sizeof( void* ) + chSize );

			if( !cur ) 
			{
				return 0;
			}

			cur->prev = m_pChunks;
			cur->pos = 0;
			cur->size = m_uiChunkSize;
			m_pChunks = cur;
		}

		Cmp_unsigned__int8* p = cur->data + cur->pos;
		cur->pos += size;
		m_uiTotal += size;
		return (void*)p;
	}

	//------------------------------------------------------------------------------
	char* CZone::zstrdup( const char* str ) __QCMP_THROW
	{
		__QCS_MEMBER_FCONTEXT("CZone::zstrdup");
		if( str == 0 ) 
		{
			return 0;
		}

		Cmp_uint_ptr len = strlen( str );
		if( len == 0 )
		{
			return 0;
		}

		// Include NULL terminator.
		len++;

		// Limit string length.
		if( len > 256 )
		{
			len = 256;
		}

		char* m = reinterpret_cast< char* >( zalloc( ( len + 15 ) & ~15 ) );
		if( !m )
		{
			return 0;
		}

		memcpy( m, str, len );
		m[ len - 1 ] = '\0';
		return m;
	}

	//------------------------------------------------------------------------------
	void CZone::clear() __QCMP_THROW
	{
		__QCS_MEMBER_FCONTEXT("CZone::clear");
		Chunk* cur = m_pChunks;
		if( !cur )
		{
			return;
		}

		m_pChunks->pos = 0;
		m_pChunks->prev = 0;
		m_uiTotal = 0;

		cur = cur->prev;
		while (cur)
		{
			Chunk* prev = cur->prev;
			::free( cur );
			cur = prev;
		}
	}

	//------------------------------------------------------------------------------
	void CZone::freeAll() __QCMP_THROW
	{
		__QCS_MEMBER_FCONTEXT("CZone::freeAll");
		Chunk* cur = m_pChunks;

		m_pChunks = 0;
		m_uiTotal = 0;

		while( cur )
		{
			Chunk* prev = cur->prev;
			::free( cur );
			cur = prev;
		}
	}

}//nsArch

