//Logger.cpp

// Copyright (c) 2008-2010, Petr Kobalicek <kobalicek.petr@gmail.com>
// Copyright (c) Querysoft Limited 2012, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Logger for assembler

#include "ArchQOR.h"
#include "ArchQOR/Common/Assembler/Logger.h"
#include <stdarg.h>
#include <stdio.h>
#include <string.h>

//------------------------------------------------------------------------------
namespace nsArch
{
	//------------------------------------------------------------------------------
	struct LogFile : public ::FILE
	{
	};

	//------------------------------------------------------------------------------
	CLogger::CLogger() __QCMP_THROW :
		m_bEnabled( true ),
		m_bUsed( true ),
		m_bLogBinary( false )
	{
	}

	//------------------------------------------------------------------------------
	CLogger::~CLogger() __QCMP_THROW
	{
	}

	//------------------------------------------------------------------------------
	void CLogger::logFormat( const char* fmt, ... ) __QCMP_THROW
	{
		char buf[ 1024 ];
		Cmp_uint_ptr len;

		va_list ap;
		va_start( ap, fmt );
		len = vsnprintf( buf, 1023, fmt, ap );
		va_end( ap );

		logString( buf, len );
	}

	//------------------------------------------------------------------------------
	void CLogger::setEnabled( bool enabled ) __QCMP_THROW
	{
		m_bEnabled = enabled;
		m_bUsed = enabled;
	}
	

	//------------------------------------------------------------------------------
	CFileLogger::CFileLogger( LogFile* stream ) __QCMP_THROW : m_pStream(0)
	{
		setStream( stream );
	}

	//------------------------------------------------------------------------------
	void CFileLogger::logString( const char* buf, Cmp_uint_ptr len) __QCMP_THROW
	{
		if( !m_bUsed ) 
		{
			return;
		}

		if( len == (Cmp_uint_ptr)-1 ) 
		{
			len = strlen( buf );
		}
		fwrite( buf, 1, len, m_pStream );
	}

	//------------------------------------------------------------------------------
	void CFileLogger::setEnabled( bool enabled ) __QCMP_THROW
	{
		m_bEnabled = enabled;
		m_bUsed = ( m_bEnabled == true ) & ( m_pStream != 0 );
	}

	//------------------------------------------------------------------------------
	//Set file stream.
	void CFileLogger::setStream( LogFile* stream ) __QCMP_THROW
	{
		m_pStream = stream;
		m_bUsed = ( m_bEnabled == true ) & ( m_pStream != 0 );
	}

}//nsArch
