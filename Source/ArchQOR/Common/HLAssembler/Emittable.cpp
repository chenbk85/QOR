//Emittable.cpp

// Copyright (c) 2008-2010, Petr Kobalicek <kobalicek.petr@gmail.com>
// Copyright (c) Querysoft Limited 2012, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Implement generic emittable

#include "ArchQOR.h"
#include "ArchQOR/Common/HLAssembler/Emittables/Emittable.h"
#include "ArchQOR/Common/HLAssembler/HLAssemblerContext.h"
#include "ArchQOR/Common/HLAssembler/HighLevelAssembler.h"
#include <stdarg.h>
#include <stdio.h>
#include "CodeQOR/Tracing/FunctionContextBase.h"

//------------------------------------------------------------------------------
namespace nsArch
{
	//------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID(CEmittable);

	//------------------------------------------------------------------------------
	CEmittable::CEmittable( nsArch::CHighLevelAssemblerBase* c, Cmp_unsigned__int32 type ) __QCMP_THROW :
		m_pHLAssembler( c ),
		m_pNext( 0 ),
		m_pPrev( 0 ),
		m_szComment( 0 ),
		m_ucType( static_cast< Cmp_unsigned__int8 >( type ) ),
		m_ucTranslated( false ),
		m_ucReserved0( 0 ),
		m_ucReserved1( 0 ),
		m_uiOffset( static_cast< Cmp_unsigned__int32 >( INVALID_VALUE ) )
	{
		__QCS_MEMBER_FCONTEXT("CEmittable::CEmittable");
	}

	//------------------------------------------------------------------------------
	CEmittable::CEmittable( const CEmittable& src ) __QCMP_THROW
	{
		__QCS_MEMBER_FCONTEXT("CEmittable::CEmittable");
		*this = src;
	}

	//------------------------------------------------------------------------------
	CEmittable& CEmittable::operator = ( const CEmittable& src ) __QCMP_THROW
	{
		__QCS_MEMBER_FCONTEXT("CEmittable::operator =");
		if( &src != this )
		{
			m_pHLAssembler = src.m_pHLAssembler;
			m_pNext = src.m_pNext;
			m_pPrev = src.m_pPrev;
			m_szComment = m_pHLAssembler->getZone().zstrdup( src.m_szComment );
			m_ucType = src.m_ucType;
			m_ucTranslated = src.m_ucTranslated;
			m_ucReserved0 = src.m_ucReserved0;
			m_ucReserved1 = src.m_ucReserved1;
			m_uiOffset = src.m_uiOffset;
		}
		return *this;
	}

	//------------------------------------------------------------------------------
	CEmittable::~CEmittable() __QCMP_THROW
	{
		__QCS_MEMBER_FCONTEXT("CEmittable::~CEmittable");
	}

	//------------------------------------------------------------------------------
	void CEmittable::prepare( CHLAssemblerContextBase& cc ) __QCMP_THROW
	{
		__QCS_MEMBER_FCONTEXT("CEmittable::prepare");
		m_uiOffset = cc.GetCurrentOffset();
	}

	//------------------------------------------------------------------------------
	CEmittable* CEmittable::translate( CHLAssemblerContextBase& cc ) __QCMP_THROW
	{
		__QCS_MEMBER_FCONTEXT("CEmittable::translate");
		return translated();
	}

	//------------------------------------------------------------------------------
	void CEmittable::emit( CHighLevelAssemblerBase& a ) __QCMP_THROW
	{
		__QCS_MEMBER_FCONTEXT("CEmittable::emit");
	}

	//------------------------------------------------------------------------------
	void CEmittable::post( CHighLevelAssemblerBase& a ) __QCMP_THROW
	{
		__QCS_MEMBER_FCONTEXT("CEmittable::post");
	}

	//------------------------------------------------------------------------------
	int CEmittable::getMaxSize() const __QCMP_THROW
	{
		__QCS_MEMBER_FCONTEXT("CEmittable::getMaxSize");
		return -1;		// Default maximum size is -1 which means that it's not known.
	}

	//------------------------------------------------------------------------------
	bool CEmittable::tryUnuseVar( CommonVarData* v ) __QCMP_THROW
	{
		__QCS_MEMBER_FCONTEXT("CEmittable::tryUnuseVar");
		return false;
	}

	//------------------------------------------------------------------------------
	void CEmittable::setComment( const char* str ) __QCMP_THROW
	{
		__QCS_MEMBER_FCONTEXT("CEmittable::setComment");
		m_szComment = m_pHLAssembler->getZone().zstrdup( str );
	}

	//------------------------------------------------------------------------------
	void CEmittable::setCommentF( const char* fmt, ... ) __QCMP_THROW
	{
		__QCS_MEMBER_FCONTEXT("CEmittable::SetCommentF");
		char buf[ 512 ];

		va_list ap;
		va_start( ap, fmt );
		vsnprintf( buf, 511, fmt, ap );
		va_end( ap );

		buf[ 511 ] = '\0';
		setComment( buf );
	}

}//nsArch
