//HighLevelAssemblerBase.cpp

// Copyright (c) 2008-2010, Petr Kobalicek <kobalicek.petr@gmail.com>
// Copyright (c) Querysoft Limited 2012, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Generic high level assembler

#include "ArchQOR.h"
#include "ArchQOR/Common/HLAssembler/HighLevelAssemblerBase.h"
#include "ArchQOR/Common/Assembler/CodeGenerator.h"
#include "ArchQOR/Common/HLAssembler/Emittables/EAlign.h"
#include <assert.h>
#include <new>
#include "CodeQOR/Tracing/FunctionContextBase.h"

//------------------------------------------------------------------------------
namespace nsArch
{
	//------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID(CHighLevelAssemblerBase);

	//------------------------------------------------------------------------------
	CHighLevelAssemblerBase::CHighLevelAssemblerBase( nsArch::CCodeGeneratorBase* codeGenerator ) :
	m_pCodeGenerator( codeGenerator != 0 ? codeGenerator : nsArch::CCodeGeneratorBase::getGlobal() ),
	m_Zone( 16384 - sizeof( CZone::Chunk ) - 32 ),
	m_pLogger(0),
	m_pFirst( 0 ),
	m_pLast( 0 ),
	m_pCurrent( 0 )
	{
		__QCS_MEMBER_FCONTEXT("CHighLevelAssemblerBase::CHighLevelAssemblerBase");
	}

	//------------------------------------------------------------------------------
	CHighLevelAssemblerBase::~CHighLevelAssemblerBase()
	{
		__QCS_MEMBER_FCONTEXT("CHighLevelAssemblerBase::~CHighLevelAssemblerBase");
	}

	//------------------------------------------------------------------------------
	// Align target buffer to m bytes.
	// Typical usage of this is to align labels at start of the inner loops.
	// Inserts nop() instructions or CPU optimized NOPs.
	void CHighLevelAssemblerBase::align( Cmp_unsigned__int32 m ) __QCMP_THROW
	{
		__QCS_MEMBER_FCONTEXT("CHighLevelAssemblerBase::align");
		CEAlign* pAlign = HLA_newObject< CEAlign >( this, m );
		addEmittable( pAlign );
	}

	//------------------------------------------------------------------------------
	void CHighLevelAssemblerBase::addEmittable( nsArch::CEmittable* emittable ) __QCMP_THROW
	{
		__QCS_MEMBER_FCONTEXT("CHighLevelAssemblerBase::addEmittable");
		assert( emittable != 0 );
		assert( emittable->getPrev() == 0 );
		assert( emittable->getNext() == 0 );

		if( m_pCurrent == 0 )
		{
			if( !m_pFirst )
			{
				m_pFirst = emittable;
				m_pLast = emittable;
			}
			else
			{
				emittable->setNext( m_pFirst );
				m_pFirst->setPrev( emittable );
				m_pFirst = emittable;
			}
		}
		else
		{
			nsArch::CEmittable* prev = m_pCurrent;
			nsArch::CEmittable* next = m_pCurrent->getNext();

			emittable->setPrev( prev );
			emittable->setNext( next );

			prev->setNext( emittable );
			if( next )
			{
				next->setPrev( emittable );
			}
			else
			{
				m_pLast = emittable;
			}
		}

		m_pCurrent = emittable;
	}

	//------------------------------------------------------------------------------
	void CHighLevelAssemblerBase::addEmittableAfter( nsArch::CEmittable* emittable, nsArch::CEmittable* ref ) __QCMP_THROW
	{
		__QCS_MEMBER_FCONTEXT("CHighLevelAssemblerBase::addEmittableAfter");
		assert( emittable != 0 );
		assert( emittable->getPrev() == 0 );
		assert( emittable->getNext() == 0 );
		assert( ref != 0 );

		nsArch::CEmittable* prev = ref;
		nsArch::CEmittable* next = ref->getNext();

		emittable->setPrev( prev );
		emittable->setNext( next );

		prev->setNext( emittable );
		if( next )
		{
			next->setPrev( emittable );
		}
		else
		{
			m_pLast = emittable;
		}
	}

	//------------------------------------------------------------------------------
	void CHighLevelAssemblerBase::removeEmittable( nsArch::CEmittable* emittable ) __QCMP_THROW
	{
		__QCS_MEMBER_FCONTEXT("CHighLevelAssemblerBase::removeEmittable");
		nsArch::CEmittable* prev = emittable->getPrev();
		nsArch::CEmittable* next = emittable->getNext();

		if( m_pFirst == emittable ) 
		{ 
			m_pFirst = next; 
		} 
		else 
		{ 
			prev->setNext( next ); 
		}

		if( m_pLast == emittable ) 
		{ 
			m_pLast  = prev; 
		} 
		else 
		{ 
			next->setPrev( prev ); 
		}

		emittable->setPrev( 0 );
		emittable->setNext( 0 );

		if( emittable == m_pCurrent )
		{
			m_pCurrent = prev;
		}
	}

}//nsArch
