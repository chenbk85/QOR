//ZCPUCore.cpp

// Copyright (c) 2008-2010, Petr Kobalicek <kobalicek.petr@gmail.com>
// Copyright (c) Querysoft Limited 2012, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Implement virtual processor for Z architecture

#include "ArchQOR.h"

#if		( QOR_ARCH == QOR_ARCH_Z )

#include "ArchQOR/Zarch/Assembler/BatchCPU/ZCPUCore.h"
#include "ArchQOR/Zarch/Assembler/Operands/Registers/ZBaseReg.h"
#include "ArchQOR/Common/Assembler/CodeGenerator.h"
#include "ArchQOR/Common/Assembler/Logger.h"
#include "ArchQOR/Zarch/Assembler/Operands/ZOperand.h"
#include "ArchQOR/Zarch/ZCPUInfo.h"
#include "ArchQOR/Zarch/Assembler/BatchCPU/InstEmitter.h"
#include <assert.h>
#include <string.h>
#include <stdio.h>

//------------------------------------------------------------------------------
namespace nsArch
{
	//------------------------------------------------------------------------------
	namespace nsZ
	{

		//------------------------------------------------------------------------------
		CZCPUCore::CZCPUCore( nsArch::CCodeGeneratorBase* pCodeGenerator ) __QCMP_THROW : CCPUBase( pCodeGenerator ),
		m_uiProperties( ( 1 << PROPERTY_OPTIMIZE_ALIGN ) ),
		m_uiEmitOptions( 0 ),
		m_iTrampolineSize( 0 ),
		m_pUnusedLinks( 0 )
		{
		}

		//------------------------------------------------------------------------------
		CZCPUCore::~CZCPUCore() __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		Cmp_unsigned__int32 CZCPUCore::getProperty( Cmp_unsigned__int32 propertyId )
		{
			return ( m_uiProperties & ( 1 << propertyId ) ) != 0;
		}

		//------------------------------------------------------------------------------
		void CZCPUCore::setProperty( Cmp_unsigned__int32 propertyId, Cmp_unsigned__int32 value )
		{
			if( value )
			{
				m_uiProperties |= ( 1 << propertyId );
			}
			else
			{
				m_uiProperties &= ~( 1 << propertyId );
			}
		}

		//------------------------------------------------------------------------------
		void CZCPUCore::clear() __QCMP_THROW
		{
			m_Buffer.clear();
			m_LabelData.clear();
			m_RelocData.clear();
			m_Zone.clear();

			if( m_uiError )
			{
				setError( ERROR_NONE );
			}

			m_pUnusedLinks = 0;
		}

		//------------------------------------------------------------------------------
		void CZCPUCore::free() __QCMP_THROW
		{
			m_Zone.freeAll();
			m_Buffer.free();
			m_LabelData.free();
			m_RelocData.free();

			if( m_uiError )
			{
				setError( ERROR_NONE );
			}
		}

		//------------------------------------------------------------------------------
		Cmp_unsigned__int8* CZCPUCore::takeCode() __QCMP_THROW
		{
			Cmp_unsigned__int8* code = m_Buffer.take();
			m_RelocData.clear();
			m_Zone.clear();

			if( m_uiError )
			{
				setError( ERROR_NONE );
			}
			return code;
		}
		/*
		//------------------------------------------------------------------------------
		Cmp_uint_ptr CZCPUCore::relocCode( void* _dst, Cmp_uint_ptr addressBase ) const __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		void* CZCPUCore::make() __QCMP_THROW
		{
			return 0;
		}
		*/

		//------------------------------------------------------------------------------
		char* dumpInstruction( char* buf, Cmp_unsigned__int32 code, Cmp_unsigned__int32 emitOptions, const COperand* o0, const COperand* o1, const COperand* o2, Cmp_unsigned__int32 memRegType ) __QCMP_THROW
		{
			return 0;
		}

		//------------------------------------------------------------------------------
		char* dumpComment( char* buf, Cmp_uint_ptr len, const Cmp_unsigned__int8* binaryData, Cmp_uint_ptr binaryLen, const char* comment )
		{
			return 0;
		}

		//------------------------------------------------------------------------------
		char* dumpInstructionName( char* buf, Cmp_unsigned__int32 code) __QCMP_THROW
		{
			return 0;
		}

	}//nsZ
}//nsArch

#endif//( QOR_ARCH == QOR_ARCH_Z )
