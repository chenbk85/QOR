//Z_ERet.cpp

// Copyright (c) 2008-2010, Petr Kobalicek <kobalicek.petr@gmail.com>
// Copyright (c) Querysoft Limited 2012, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//implements a Z function ret emittable

#include "ArchQOR.h"

#if		( QOR_ARCH == QOR_ARCH_Z )

#include "ArchQOR/Zarch/HLAssembler/Emittables/Z_ERet.h"
#include "ArchQOR/Zarch/HLAssembler/ZHLAContext.h"
#include <assert.h>

//------------------------------------------------------------------------------
namespace nsArch
{
	//------------------------------------------------------------------------------
	namespace nsZ
	{
		//------------------------------------------------------------------------------
		CERet::CERet( nsArch::CHighLevelAssemblerBase* c, CEFunction* function, const COperand* first, const COperand* second ) __QCMP_THROW : CEmittable( c, EMITTABLE_RET ),
		m_pFunction( function )
		{
			if( first ) 
			{
				m_apRet[ 0 ] = const_cast< COperand* >( first );
			}
			else
			{
				m_apRet[ 0 ] = 0;
			}

			if( second )
			{
				m_apRet[ 1 ] = const_cast< COperand* >( second );
			}
			else
			{
				m_apRet[ 1 ] = 0;
			}

			/*
			// TODO:?

			// Check whether the return value is compatible.
			Cmp_unsigned__int32 retValType = function->getPrototype().getReturnValue();
			bool valid = false;

			switch (retValType)
			{
			case VARIABLE_TYPE_GPD:
			case VARIABLE_TYPE_GPQ:
			if ((m_aRet[0].isVar() && (reinterpret_cast<const BaseVar&>(m_aRet[0]).isGPVar())) ||
			(m_aRet[0].isImm()))
			{
			valid = true;
			}
			break;

			case VARIABLE_TYPE_X87:
			case VARIABLE_TYPE_X87_1F:
			case VARIABLE_TYPE_X87_1D:
			if ((m_aRet[0].isVar() && (reinterpret_cast<const BaseVar&>(m_aRet[0]).isX87Var() ||
							reinterpret_cast<const BaseVar&>(m_aRet[0]).isXMMVar() )) )
			{
			valid = true;
			}
			break;

			case VARIABLE_TYPE_MM:
			break;

			case INVALID_VALUE:
			if (m_aRet[0].isNone() && 
			m_aRet[1].isNone())
			{
			valid = true;
			}
			break;

			default:
			break;
			}

			// Incompatible return value.
			if (!valid)
			{
			c->setError(ERROR_INCOMPATIBLE_RETURN_VALUE);
			}
			*/
		}

		//------------------------------------------------------------------------------
		CERet::~CERet() __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		void CERet::prepare( CHLAssemblerContextBase& hlac ) __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		nsArch::CEmittable* CERet::translate( CHLAssemblerContextBase& hlac ) __QCMP_THROW
		{
			return translated();
		}

		//------------------------------------------------------------------------------
		void CERet::emit( CHighLevelAssemblerBase& ab ) __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		int CERet::getMaxSize() const __QCMP_THROW
		{
			return shouldEmitJumpToEpilog() ? 15 : 0;
		}

		//------------------------------------------------------------------------------
		bool CERet::shouldEmitJumpToEpilog() const __QCMP_THROW
		{
			// Iterate over next emittables. If we found emittable that emits real 
			// instruction then we must return @c true.
			nsArch::CEmittable* e = this->getNext();

			while( e )
			{
				switch( e->getType() )
				{
				// Non-interesting emittables.
				case EMITTABLE_COMMENT:
				case EMITTABLE_DUMMY:
				case EMITTABLE_ALIGN:
				case EMITTABLE_BLOCK:
				case EMITTABLE_VARIABLE_HINT:
				case EMITTABLE_TARGET:
					break;

					// Interesting emittables.
				case EMITTABLE_EMBEDDED_DATA:
				case EMITTABLE_INSTRUCTION:
				case EMITTABLE_JUMP_TABLE:
				case EMITTABLE_CALL:
				case EMITTABLE_RET:
					return true;

					// These emittables shouldn't be here. We are inside function, after
					// prolog.
				case EMITTABLE_FUNCTION:
				case EMITTABLE_PROLOG:
					break;

				// Stop station, we can't go forward from here.
				case EMITTABLE_EPILOG:
					return false;
				}
				e = e->getNext();
			}

			return false;
		}

	}//nsZ
}//nsArch

#endif//( QOR_ARCH == QOR_ARCH_Z )
