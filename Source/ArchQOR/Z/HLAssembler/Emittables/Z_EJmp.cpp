//Z_EJmp.cpp

// Copyright (c) 2008-2010, Petr Kobalicek <kobalicek.petr@gmail.com>
// Copyright (c) Querysoft Limited 2012
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Implement Z Jump emittable

#include "ArchQOR.h"

#if		( QOR_ARCH == QOR_ARCH_Z )

#include "ArchQOR/Zarch/HLAssembler/Emittables/Z_EJmp.h"
#include "ArchQOR/Zarch/HLAssembler/ZHLAContext.h"
#include <assert.h>

//------------------------------------------------------------------------------
namespace nsArch
{
	//------------------------------------------------------------------------------
	namespace nsZ
	{
		//------------------------------------------------------------------------------
		CEJmp::CEJmp( CZHLAIntrinsics* c, Cmp_unsigned__int32 code, COperand** paOperandsData, Cmp_unsigned__int32 operandsCount ) __QCMP_THROW : CEInstruction( c, code, paOperandsData, operandsCount )
		{
		}

		//------------------------------------------------------------------------------
		CEJmp::~CEJmp() __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		void CEJmp::prepare( CHLAssemblerContextBase& hlac ) __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		nsArch::CEmittable* CEJmp::translate( CHLAssemblerContextBase& hlac ) __QCMP_THROW
		{
			// Translate using EInstruction.
			nsArch::CEmittable* ret = 0;

			return ret;
		}

		//------------------------------------------------------------------------------
		void CEJmp::emit( CHighLevelAssemblerBase& ab ) __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		void CEJmp::DoJump( CZHLAContext& cc ) __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		CETarget* CEJmp::getJumpTarget() const __QCMP_THROW
		{
			return m_pJumpTarget;
		}

	}//nsZ
}//nsArch

#endif//( QOR_ARCH == QOR_ARCH_Z )
