//Z_ECall.cpp

// Copyright (c) 2008-2010, Petr Kobalicek <kobalicek.petr@gmail.com>
// Copyright (c) Querysoft Limited 2012, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Z specific high level call implementation

#include "ArchQOR.h"

#if		( QOR_ARCH == QOR_ARCH_Z )

#include "ArchQOR/Zarch/HLAssembler/Emittables/Z_ECall.h"
#include "ArchQOR/Zarch/HLAssembler/Emittables/Z_EFunction.h"
#include "ArchQOR/Zarch/HLAssembler/ZHLAContext.h"
#include <string.h>
#include <assert.h>
#include <new>

//------------------------------------------------------------------------------
namespace nsArch
{
	//------------------------------------------------------------------------------
	namespace nsZ
	{
		//------------------------------------------------------------------------------
		CECall::CECall( nsArch::CHighLevelAssemblerBase* c, CEFunction* caller, const COperand* target ) __QCMP_THROW : CEmittable( c, EMITTABLE_CALL ),
		m_pCaller( caller ),
		m_paArgs( 0 ),
		m_GPParams( 0 ),
		m_MMParams( 0 ),
		m_XmmParams( 0 ),
		m_uiVariablesCount( 0 ),
		m_pVariables( 0 )
		{
		}

		//------------------------------------------------------------------------------
		CECall::~CECall() __QCMP_THROW
		{
			memset( m_aArgumentToVarRecord, 0, sizeof( VarCallRecord* ) * FUNC_MAX_ARGS );
		}

		//------------------------------------------------------------------------------
		void CECall::prepare( CHLAssemblerContextBase& hlac ) __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		nsArch::CEmittable* CECall::translate( CHLAssemblerContextBase& hlac ) __QCMP_THROW
		{

			return translated();
		}

		//------------------------------------------------------------------------------
		int CECall::getMaxSize() const __QCMP_THROW
		{
			// TODO: Not optimal.
			return 15;
		}

		//------------------------------------------------------------------------------
		bool CECall::tryUnuseVar( nsArch::CommonVarData* vdata ) __QCMP_THROW
		{

			return false;
		}

		//------------------------------------------------------------------------------
		// Prototype & Arguments Management.
		void CECall::_setPrototype( Cmp_unsigned__int32 callingConvention, const Cmp_unsigned__int32* arguments, Cmp_unsigned__int32 argumentsCount, Cmp_unsigned__int32 returnValue ) __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		bool CECall::setArgument( Cmp_unsigned__int32 i, const COperand* pArg ) __QCMP_THROW
		{
			return true;
		}

		//------------------------------------------------------------------------------
		bool CECall::setReturn( const COperand& first, const COperand& second ) __QCMP_THROW
		{
			return true;
		}

	}//nsZ

}//nsArch

#endif//( QOR_ARCH == QOR_ARCH_Z )
