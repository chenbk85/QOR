//ZHLAContext.cpp

// Copyright (c) 2008-2010, Petr Kobalicek <kobalicek.petr@gmail.com>
// Copyright (c) Querysoft Limited 2012, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Implement core state management for Z high level assembler

#include "ArchQOR.h"

#if		( QOR_ARCH == QOR_ARCH_Z )

#include "ArchQOR/Zarch/HLAssembler/ZHLAContext.h"
#include "ArchQOR/Zarch/HLAssembler/Emittables/Z_EFunction.h"
#include "ArchQOR/Zarch/HLAssembler/Emittables/Z_ECall.h"
#include "ArchQOR/Common/HLAssembler/Emittables/EComment.h"
#include <assert.h>
#include <new>

//------------------------------------------------------------------------------
namespace nsArch
{
	//------------------------------------------------------------------------------
	namespace nsZ
	{
		//------------------------------------------------------------------------------
		CZHLAContext::CZHLAContext( nsArch::CHighLevelAssemblerBase* pHLA ) __QCMP_THROW :
		m_Zone( 8192 - sizeof( CZone::Chunk ) - 32 )
		{
			m_pHLA = pHLA;
			m_pCPU = 0;
			_clear();

			m_bEmitComments = m_pHLA->getLogger() != 0;
		}

		//------------------------------------------------------------------------------
		CZHLAContext::~CZHLAContext() __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		void CZHLAContext::_clear() __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		void CZHLAContext::allocVar( VarData* vdata, Cmp_unsigned__int32 regMask, Cmp_unsigned__int32 vflags ) __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		void CZHLAContext::saveVar( VarData* vdata ) __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		void CZHLAContext::spillVar( VarData* vdata ) __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		void CZHLAContext::unuseVar( VarData* vdata, Cmp_unsigned__int32 toState ) __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		void CZHLAContext::allocGPVar( VarData* vdata, Cmp_unsigned__int32 regMask, Cmp_unsigned__int32 vflags ) __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		void CZHLAContext::saveGPVar( VarData* vdata ) __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		void CZHLAContext::spillGPVar( VarData* vdata ) __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		void CZHLAContext::allocMMVar( VarData* vdata, Cmp_unsigned__int32 regMask, Cmp_unsigned__int32 vflags ) __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		void CZHLAContext::saveMMVar( VarData* vdata ) __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		void CZHLAContext::spillMMVar( VarData* vdata ) __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		void CZHLAContext::allocXMMVar( VarData* vdata, Cmp_unsigned__int32 regMask, Cmp_unsigned__int32 vflags ) __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		void CZHLAContext::saveXMMVar( VarData* vdata ) __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		void CZHLAContext::spillXMMVar( VarData* vdata ) __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		void CZHLAContext::emitLoadVar( VarData* vdata, Cmp_unsigned__int32 regIndex ) __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		void CZHLAContext::emitSaveVar( VarData* vdata, Cmp_unsigned__int32 regIndex ) __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		void CZHLAContext::emitMoveVar( VarData* vdata, Cmp_unsigned__int32 regIndex, Cmp_unsigned__int32 vflags ) __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		void CZHLAContext::emitExchangeVar( VarData* vdata, Cmp_unsigned__int32 regIndex, Cmp_unsigned__int32 vflags, VarData* other ) __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		void CZHLAContext::_postAlloc( VarData* vdata, Cmp_unsigned__int32 vflags ) __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		void CZHLAContext::_markMemoryUsed( VarData* vdata ) __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		void CZHLAContext::translateOperands( COperand** operands, Cmp_unsigned__int32 count ) __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		void CZHLAContext::addBackwardCode( CEJmp* from ) __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		void CZHLAContext::addForwardJump( CEJmp* inst ) __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		void CZHLAContext::_assignState( StateData* state ) __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		void CZHLAContext::_restoreState( StateData* state, Cmp_unsigned__int32 targetOffset ) __QCMP_THROW
		{
		}

	}//nsZ

}//nsArch

#endif//( QOR_ARCH == QOR_ARCH_Z )
