//MTDOMElement.cpp

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "MammutQOR/Models/DOM/MTDOMElement.h"

#define ATT_TAGNAME _TXT( "TagName" )

//------------------------------------------------------------------------------
namespace nsMammut
{
	//------------------------------------------------------------------------------
	CElement::CElement(CModel* pContainer) : CDOMNode(pContainer)
	, m_TagName(this, ATT_TAGNAME)
	{
		m_NodeType.Set(CMUint16(ELEMENT_NODE));
	}

	//------------------------------------------------------------------------------
	CElement::CElement(const CElement& src) : CDOMNode(src)
	, m_TagName(this, src.m_TagName)
	{
	}

	//--------------------------------------------------------------------------------
	//Construct from a generic PropertySet
	CElement::CElement(CPropertySet& src) : CDOMNode(src)
	, m_TagName(this, ATT_TAGNAME, src[ATT_TAGNAME])
	{
		m_NodeType.Set(CMUint16(ELEMENT_NODE));
	}

	//------------------------------------------------------------------------------
	CElement::~CElement()
	{
	}

	//------------------------------------------------------------------------------
	CElement& CElement::operator = (const CElement& src)
	{
		if (&src != this)
		{
			CDOMNode::operator=(src);
			m_TagName = src.m_TagName;
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	//assign from a generic property set
	CElement& CElement::operator = (CPropertySet& src)
	{
		if (&src != this)
		{
			CDOMNode::operator=(src);
			m_TagName = src[ATT_TAGNAME];
		}
		return *this;
	}

	//------------------------------------------------------------------------------
	bool CElement::operator == (const CElement& src)
	{
		return &(const_cast< CElement& >(src)) == this ? true : false;
	}

	//------------------------------------------------------------------------------
	nsCodeQOR::CUCS2String CElement::GetAttribute(nsCodeQOR::CUCS2String& Name)
	{
		//TODO:
		nsCodeQOR::CUCS2String Attr;
		return Attr;
	}

	//------------------------------------------------------------------------------
	void CElement::SetAttribute(const nsCodeQOR::CUCS2String& Name, nsCodeQOR::CUCS2String& Value)
	{
		m_Attributes.Value().find(Name);
		//()->As< CAttr >().m_Value.Set(Value);
	}

	//------------------------------------------------------------------------------
	void CElement::RemoveAttribute(nsCodeQOR::CUCS2String& Name)
	{
		m_Attributes.Value().erase(Name);
	}

	//------------------------------------------------------------------------------
	CAttr& CElement::GetAttributeNode(nsCodeQOR::CUCS2String& Name)
	{
		return m_Attributes.Value().find(Name)->As< CAttr >();
	}

	//------------------------------------------------------------------------------
	CAttr& CElement::SetAttributeNode(CAttr& newAttr)
	{
		m_Attributes.Value().find(newAttr.m_Name.Value())->As< CAttr >().operator=(newAttr);
		return newAttr;
	}

	//------------------------------------------------------------------------------
	CAttr& CElement::RemoveAttributeNode(CAttr& oldAttr)
	{
		m_Attributes.Value().erase(oldAttr.m_Name.Value());
		return oldAttr;
	}

	//------------------------------------------------------------------------------
	CVectorModel< CDOMNode > CElement::GetElementsByTagName(nsCodeQOR::CUCS2String& Name)
	{
		//TODO:
		CVectorModel< CDOMNode > Collection;
		return Collection;
	}

	//------------------------------------------------------------------------------
	void CElement::Normalize()
	{

	}

	//------------------------------------------------------------------------------
	bool CElement::ValidChildType( CMUint16 NodeType )
	{
		return ( NodeType == ELEMENT_NODE || NodeType == TEXT_NODE || NodeType == COMMENT_NODE || NodeType == PROCESSING_INSTRUCTION_NODE || NodeType == CDATA_SECTION_NODE || NodeType == ENTITY_REFERENCE_NODE );
	}

}//nsMammut

