//MTDOMAttr.cpp

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "MammutQOR/Models/DOM/MTDOMAttr.h"

#define ATT_NAME _TXT( "Name" )
#define ATT_SPECIFIED _TXT( "Specified" )
#define ATT_VALUE _TXT( "Value" )

//------------------------------------------------------------------------------
namespace nsMammut
{
	//------------------------------------------------------------------------------
	CAttr::CAttr(CModel* pContainer) : CDOMNode(pContainer)
	, m_Name(this, ATT_NAME)
	, m_bSpecified( this, ATT_SPECIFIED )
	, m_Value(this, ATT_VALUE)
	{
		m_NodeType.Set( CMUint16( ATTRIBUTE_NODE ) );
	}

	//------------------------------------------------------------------------------
	CAttr::CAttr(const CAttr& src) : CDOMNode(src)
	, m_Name(this, src.m_Name )
	, m_bSpecified( this, src.m_bSpecified )
	, m_Value( this, src.m_Value )
	{
	}

	//--------------------------------------------------------------------------------
	//Construct from a generic PropertySet
	CAttr::CAttr(CPropertySet& src) : CDOMNode(src)
	, m_Name(this, ATT_NAME, src[ATT_NAME])
	, m_bSpecified(this, ATT_SPECIFIED, src[ ATT_SPECIFIED] )
	, m_Value( this, ATT_VALUE, src[ ATT_VALUE ])
	{
		m_NodeType.Set( CMUint16( ATTRIBUTE_NODE ) );
	}

	//------------------------------------------------------------------------------
	CAttr::~CAttr()
	{
	}

	//------------------------------------------------------------------------------
	CAttr& CAttr::operator = (const CAttr& src)
	{
		if (&src != this)
		{
			CDOMNode::operator=(src);
			m_Name = src.m_Name;
			m_bSpecified = src.m_bSpecified;
			m_Value = src.m_Value;
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	//assign from a generic property set
	CAttr& CAttr::operator = (CPropertySet& src)
	{
		if (&src != this)
		{
			CDOMNode::operator=(src);
			m_Name = src[ATT_NAME];
			m_bSpecified = src[ATT_SPECIFIED];
			m_Value = src[ATT_VALUE];
		}
		return *this;
	}

	//------------------------------------------------------------------------------
	bool CAttr::operator == (const CAttr& src)
	{
		return &(const_cast< CAttr& >(src)) == this ? true : false;
	}

	//------------------------------------------------------------------------------
	bool CAttr::ValidChildType( CMUint16 NodeType )
	{
		return ( NodeType == TEXT_NODE || NodeType == ENTITY_REFERENCE_NODE );
	}
}//nsMammut

