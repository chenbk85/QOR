//MTDOMNotation.cpp

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "MammutQOR/Models/DOM/MTDOMNotation.h"

#define ATT_PUBLICID _TXT( "PublicID" )
#define ATT_SYSTEMID _TXT( "SystemID" )

//------------------------------------------------------------------------------
namespace nsMammut
{
	//------------------------------------------------------------------------------
	CNotation::CNotation(CModel* pContainer) : CDOMNode(pContainer)
	, m_PublicID( this, ATT_PUBLICID )
	, m_SystemID( this, ATT_SYSTEMID )
	{
		m_NodeType.Set( CMUint16( NOTATION_NODE ) );
	}

	//------------------------------------------------------------------------------
	CNotation::CNotation(const CNotation& src) : CDOMNode(src)
	, m_PublicID(this, src.m_PublicID)
	, m_SystemID(this, src.m_SystemID)
	{
	}

	//--------------------------------------------------------------------------------
	//Construct from a generic PropertySet
	CNotation::CNotation(CPropertySet& src) : CDOMNode(src)
	, m_PublicID(this, ATT_PUBLICID, src[ATT_PUBLICID])
	, m_SystemID(this, ATT_SYSTEMID, src[ATT_SYSTEMID])
	{
		m_NodeType.Set(CMUint16(NOTATION_NODE));
	}

	//------------------------------------------------------------------------------
	CNotation::~CNotation()
	{
	}

	//------------------------------------------------------------------------------
	CNotation& CNotation::operator = (const CNotation& src)
	{
		if (&src != this)
		{
			CDOMNode::operator=(src);
			m_PublicID = src.m_PublicID;
			m_SystemID = src.m_SystemID;
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	//assign from a generic property set
	CNotation& CNotation::operator = ( CPropertySet& src )
	{
		if (&src != this)
		{
			CDOMNode::operator=(src);
			m_PublicID = src[ATT_PUBLICID];
			m_SystemID = src[ATT_SYSTEMID];
		}
		return *this;
	}

	//------------------------------------------------------------------------------
	bool CNotation::operator == (const CNotation& src)
	{
		return &(const_cast< CNotation& >(src)) == this ? true : false;
	}

	//------------------------------------------------------------------------------
	CDOMNode& CNotation::InsertBefore( CDOMNode& newChild, CDOMNode& refChild )
	{
		//TODO: Raise error
		return newChild;
	}

	//------------------------------------------------------------------------------
	CDOMNode& CNotation::ReplaceChild( CDOMNode& newChild, CDOMNode& oldChild )
	{
		//TODO: Raise error
		return newChild;
	}

	//------------------------------------------------------------------------------
	CDOMNode& CNotation::RemoveChild( CDOMNode& oldChild )
	{
		//TODO: Raise Error
		return oldChild;
	}

	//------------------------------------------------------------------------------
	CDOMNode& CNotation::AppendChild( CDOMNode& newChild )
	{
		//TODO: Raise Error HIERARCHY_REQUEST_ERR
		return newChild;
	}

	//------------------------------------------------------------------------------
	bool CNotation::HasChildNodes( void )
	{
		return false;
	}

}//nsMammut

