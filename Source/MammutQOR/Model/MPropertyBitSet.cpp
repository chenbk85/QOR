//MPropertyBitSet.cpp

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "MammutQOR.h"
#include "MammutQOR/Model/MPropertyBitSet.h"
#include "MammutQOR/Model/MBitSetIterator.h"

//------------------------------------------------------------------------------
namespace nsMammut
{
	//------------------------------------------------------------------------------
	CPropertyBitSet::CPropertyBitSet() : CModel()
	{
	}

	//------------------------------------------------------------------------------
	CPropertyBitSet::CPropertyBitSet( CModel* pContainer ) : CModel( pContainer )
	{
	}

	//------------------------------------------------------------------------------
	CPropertyBitSet::~CPropertyBitSet()
	{
	}

	//------------------------------------------------------------------------------
	CPropertyBitSet::CPropertyBitSet( const CPropertyBitSet& src) : CModel( src )
	{
	}

	//------------------------------------------------------------------------------
	CPropertyBitSet& CPropertyBitSet::operator = ( const CPropertyBitSet& src )
	{
		CModel::operator=( src );

		return *this;
	}
	
	//------------------------------------------------------------------------------
	CModelItem::refType CPropertyBitSet::CreateProperty( const nsCodeQOR::CString& strName, const bool& InitialValue )
	{
		CModelItem::refType Property( new CBitRefProperty( this, strName, InitialValue ), true );
		return Property;
	}

	//------------------------------------------------------------------------------
	CPropertyBitSet::iterator CPropertyBitSet::insert( CModel::refType Item )
	{
		CPropertyBase* pPropBase = dynamic_cast< CPropertyBase* >( Item.operator nsMammut::CModelItem *() );
		if( pPropBase != 0 )
		{
			unsigned long ulResult = AddProperty( pPropBase->Name(), Item );
			return CBitSetIterator( *this, iterator::CModelNode( this, ulResult ) );
		}
		else
		{
			return end();
		}
	}
		
	//------------------------------------------------------------------------------
	CModelItem::refType CPropertyBitSet::operator[]( const nsCodeQOR::CString& strName ) const
	{
		return m_PropertyMap.Find( strName );
	}

	//------------------------------------------------------------------------------
	CPropertyBitSet::iterator CPropertyBitSet::begin()
	{
		CBitSetIterator it( *this, iterator::CModelNode( this, 0 ) );
		return it;
	}

	//------------------------------------------------------------------------------
	CPropertyBitSet::iterator CPropertyBitSet::end()
	{
		CBitSetIterator it( *this, iterator::CModelNode( this, m_PropertyMap.Size() ) );
		return it;
	}

//protected:

		
	//------------------------------------------------------------------------------
	void CPropertyBitSet::OnChanged( CModelItem::refType Prop )
	{
		m_Observable.Update();
	}

	//------------------------------------------------------------------------------
	unsigned long CPropertyBitSet::AddProperty( const nsCodeQOR::CString& strName, CModelItem::refType Prop )
	{
		unsigned long ulResult = m_PropertyMap.Insert( strName, Prop );
		OnChanged( Prop );
		return ulResult;
	}

	//------------------------------------------------------------------------------
	bool CPropertyBitSet::operator[]( unsigned long ulIndex )
	{
		return m_BitArray[ ulIndex ];
	}

	//------------------------------------------------------------------------------
	void CPropertyBitSet::SetAt( unsigned long ulIndex, bool bValue )
	{
		m_BitArray.SetAt( ulIndex, bValue );
	}

}//nsMammut


