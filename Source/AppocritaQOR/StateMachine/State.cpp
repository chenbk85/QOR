//State.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "AppocritaQOR/StateMachine/State.h"
#include "AppocritaQOR/StateMachine/StateMachine.h"
#include "AppocritaQOR/StateMachine/AbstractTransition.h"

//------------------------------------------------------------------------------
namespace nsAppocrita
{
	//------------------------------------------------------------------------------
	CState::CState( CState::eChildMode ChildMode ) : CAbstractState( CAbstractState::StandardState )
	,	m_pErrorState( 0 )
	,	m_pInitialState( 0 )
	,	m_ChildMode( ChildMode )
	,	m_bChildStatesListNeedsRefresh( true )
	,	m_bTransitionsListNeedsRefresh( true )
	{
	}

	//------------------------------------------------------------------------------
	CState::CState( CState* parent, eChildMode ChildMode ) : CAbstractState( parent )
	,	m_pErrorState( 0 )
	,	m_pInitialState( 0 )
	,	m_ChildMode( ChildMode )
	,	m_bChildStatesListNeedsRefresh( true )
	,	m_bTransitionsListNeedsRefresh( true )
	{
	}

	//------------------------------------------------------------------------------
	CState::~CState()
	{
	}

	//------------------------------------------------------------------------------
	nsCodeQOR::CTLinkedList< CAbstractState* > CState::childStates() const
	{
		nsCodeQOR::CTLinkedList< CAbstractState* > ResultList;

		if( m_bChildStatesListNeedsRefresh ) 
		{
			childStatesList.Clear();
			unsigned int uiIndex = 1;
			while( uiIndex <= childStatesList.GetCount() )
			{
				CAbstractState** s = childStatesList.GetItem( uiIndex );
				if( s != 0 && *s != 0 && ( dynamic_cast< CState* >( *s ) != 0 ) )
				{
					ResultList.Append( s );
				}
				uiIndex++;
			}
			m_bChildStatesListNeedsRefresh = false;
		}

		return ResultList;
	}

	//------------------------------------------------------------------------------
	nsCodeQOR::CTLinkedList< CHistoryState* > CState::historyStates() const
	{
		nsCodeQOR::CTLinkedList< CHistoryState* > ResultList;
		/*
		QList<QObject*>::const_iterator it;
		for (it = children.constBegin(); it != children.constEnd(); ++it) {
			QHistoryState *h = qobject_cast<QHistoryState*>(*it);
			if (h)
				result.append(h);
		}
		*/
		return ResultList;
	}

	//------------------------------------------------------------------------------
	CAbstractState* CState::errorState() const
	{
		return m_pErrorState;
	}

	//------------------------------------------------------------------------------
	void CState::setErrorState( CAbstractState* state )
	{
		//TODO: Lots of error checking
		m_pErrorState = state;
	}

	//------------------------------------------------------------------------------
	void CState::addTransition( CAbstractTransition* transition )
	{
		//iterate the targets checking for validity, i.e. in the same state machine and not NULL
	}

	//CSignalTransition* addTransition( QObject* sender, const char* signal, CAbstractState* target );

	//------------------------------------------------------------------------------
	CAbstractTransition* CState::addTransition( CAbstractState* target )
	{
		if (!target) 
		{
			//qWarning("QState::addTransition: cannot add transition to null state");
			return 0;
		}

		CUnconditionalTransition* trans = new CUnconditionalTransition( target );
		addTransition(trans);
		return trans;
	}

	//------------------------------------------------------------------------------
	void CState::removeTransition( CAbstractTransition* transition )
	{
	}

	//------------------------------------------------------------------------------
	nsCodeQOR::CTLinkedList< CAbstractTransition* > CState::transitions() const
	{
		if (m_bTransitionsListNeedsRefresh ) 
		{
			transitionsList.Clear();
			/*
			QList<QObject*>::const_iterator it;
			for (it = children.constBegin(); it != children.constEnd(); ++it) {
				QAbstractTransition *t = qobject_cast<QAbstractTransition*>(*it);
				if (t)
					transitionsList.append(t);
			}
			*/
			m_bTransitionsListNeedsRefresh = false;
		}
		return transitionsList;
	}

	CAbstractState* CState::initialState() const
	{
		return m_pInitialState;
	}

	void CState::setInitialState( CAbstractState* state )
	{
		//TODO: Lots of error checking
		m_pInitialState = state;
	}

	CState::eChildMode CState::childMode() const
	{
		return m_ChildMode;
	}


	void CState::setChildMode( eChildMode mode )
	{
		m_ChildMode = mode;
	}

	void CState::onEntry( void )
	{
	}

	void CState::onExit( void )
	{
	}

}//nsAppocrita