//Basefenv.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "SystemQOR/Posix/Basefenv.h"
#include <errno.h>
#include "CodeQOR/Tracing/FunctionContextBase.h"

//--------------------------------------------------------------------------------
namespace nsBaseCRT
{
	__QOR_IMPLEMENT_OCLASS_LUID(Cfenv);

    //--------------------------------------------------------------------------------
    int Cfenv::feclearexcept( int excepts )
	{
		__QCS_MEMBER_FCONTEXT( "Cfenv::feclearexcept" );
		errno = ENOSYS;
		return 0;
	}

    //--------------------------------------------------------------------------------
    int Cfenv::fegetexceptflag( fexcept_t *flagp, int excepts )
	{
		__QCS_MEMBER_FCONTEXT( "Cfenv::fegetexceptflag" );
		errno = ENOSYS;
		return 0;
	}

    //--------------------------------------------------------------------------------
    int Cfenv::feraiseexcept( int excepts )
	{
		__QCS_MEMBER_FCONTEXT( "Cfenv::feraiseexcept" );
		errno = ENOSYS;
		return 0;
	}

    //--------------------------------------------------------------------------------
    int Cfenv::fesetexceptflag( const fexcept_t *flagp, int excepts )
	{
		__QCS_MEMBER_FCONTEXT( "Cfenv::fesetexceptflag" );
		errno = ENOSYS;
		return 0;
	}

    //--------------------------------------------------------------------------------
    int Cfenv::fetestexcept( int excepts )
	{
		__QCS_MEMBER_FCONTEXT( "Cfenv::fetestexcept" );
		errno = ENOSYS;
		return 0;
	}

    //--------------------------------------------------------------------------------
    int Cfenv::fegetround(void)
	{
		__QCS_MEMBER_FCONTEXT( "Cfenv::fegetround" );
		errno = ENOSYS;
		return 0;
	}

    //--------------------------------------------------------------------------------
    int Cfenv::fesetround( int round )
	{
		__QCS_MEMBER_FCONTEXT( "Cfenv::fesetround" );
		errno = ENOSYS;
		return 0;
	}

    //--------------------------------------------------------------------------------
    int Cfenv::fegetenv( fenv_t* envp )
	{
		__QCS_MEMBER_FCONTEXT( "Cfenv::fegetenv" );
		errno = ENOSYS;
		return 0;
	}

    //--------------------------------------------------------------------------------
    int Cfenv::feholdexcept( fenv_t* envp )
	{
		__QCS_MEMBER_FCONTEXT( "Cfenv::feholdexcept" );
		errno = ENOSYS;
		return 0;
	}

    //--------------------------------------------------------------------------------
    int Cfenv::fesetenv( const fenv_t* envp )
	{
		__QCS_MEMBER_FCONTEXT( "Cfenv::fesetenv" );
		errno = ENOSYS;
		return 0;
	}

    //--------------------------------------------------------------------------------
    int Cfenv::feupdateenv( const fenv_t* envp )
	{
		__QCS_MEMBER_FCONTEXT( "Cfenv::feupdateenv" );
		errno = ENOSYS;
		return 0;
	}

}//nsBaseCRT
