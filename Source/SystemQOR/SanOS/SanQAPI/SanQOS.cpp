//SanQOS.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include <stdarg.h>
#include "SanQAPI/SanQOS.h"

//------------------------------------------------------------------------------
namespace nsSanQAPI
{
	//------------------------------------------------------------------------------
	COS::COS()
	{
		m_hModule = ::dlopen( "os.dll", RTLD_NOW /*??*/ );
	}

	//------------------------------------------------------------------------------
	COS::~COS()
	{
		::dlclose( m_hModule );
	}

	//------------------------------------------------------------------------------
	COS& COS::Instance()
	{
		static COS _OS;
		return _OS;
	}

	//------------------------------------------------------------------------------
	int COS::syscall( int syscallno, void* params )
	{
		return ::syscall( syscallno, params );
	}

	//------------------------------------------------------------------------------
	int COS::mkfs( const char* devname, const char* type, const char* opts )
	{
		_SANQ_USESAPI( mkfs );
		int iResult = Call< int, const char*, const char*, const char* >( pFunc, devname, type, opts );
		return iResult;
	}

	//------------------------------------------------------------------------------
	int COS::mount( const char* type, const char* mntto, const char* mntfrom, const char* opts )
	{
		_SANQ_USESAPI( mount );
		int iResult = Call< int, const char*, const char*, const char*, const char* >( pFunc, type, mntto, mntfrom, opts );
		return iResult;
	}

	//------------------------------------------------------------------------------
	int COS::umount( const char* path )
	{
		_SANQ_USESAPI( umount );
		int iResult = Call< int, const char* >( pFunc, path );
		return iResult;
	}

	//------------------------------------------------------------------------------
	int COS::getfsstat( struct ::statfs* buf, size_t size )
	{
		_SANQ_USESAPI( getfsstat );
		int iResult = Call< int, struct ::statfs*, size_t >( pFunc, buf, size );
		return iResult;
	}

	//------------------------------------------------------------------------------
	int COS::fstatfs( ::handle_t f, struct ::statfs* buf )
	{
		_SANQ_USESAPI( fstatfs );
		int iResult = Call< int, ::handle_t, struct ::statfs* >( pFunc, f, buf );
		return iResult;
	}

	//------------------------------------------------------------------------------
	int COS::statfs( const char* name, struct ::statfs* buf )
	{
		_SANQ_USESAPI( statfs );
		int iResult = Call< int, const char*, struct ::statfs* >( pFunc, name, buf );
		return iResult;
	}

	//------------------------------------------------------------------------------
	::handle_t COS::open( const char* name, int flags, ... )
	{
		handle_t result = (handle_t)-1;
		va_list args;
		va_start( args, flags );
		result = ::open( name, flags/*, ...*/ );
		va_end( args );
		return result;
	}

	//------------------------------------------------------------------------------
	::handle_t COS::sopen( const char* name, int flags, int shflags, ... )
	{
		return ::sopen( name, flags, shflags/*, ...*/ );
	}

	//------------------------------------------------------------------------------
	::handle_t COS::creat( const char* name, int mode )
	{
		return ::creat( name, mode );
	}

	//------------------------------------------------------------------------------
	int COS::close( ::handle_t h )
	{
		return ::close( h );
	}

	//------------------------------------------------------------------------------
	int COS::fsync( ::handle_t f )
	{
		return ::fsync( f );
	}

	//------------------------------------------------------------------------------
	::handle_t COS::dup( ::handle_t h )
	{
		return ::dup( h );
	}

	//------------------------------------------------------------------------------
	::handle_t COS::dup2( ::handle_t h1, ::handle_t h2 )
	{
		return ::dup2( h1, h2 );
	}

	//------------------------------------------------------------------------------
	int COS::read( ::handle_t f, void* data, size_t size )
	{
		return ::read( f, data, size );
	}

	//------------------------------------------------------------------------------
	int COS::write( ::handle_t f, const void* data, size_t size )
	{
		_SANQ_USESAPI( write );
		int iResult = Call< int, ::handle_t, const void*, size_t >( pFunc, f, data, size );
		return iResult;
	}

	//------------------------------------------------------------------------------
	int COS::pread( ::handle_t f, void* data, size_t size, ::off64_t offset )
	{
		return ::pread( f, data, size, offset );
	}

	//------------------------------------------------------------------------------
	int COS::pwrite( ::handle_t f, const void* data, size_t size, ::off64_t offset )
	{
		return ::pwrite( f, data, size, offset );
	}

	//------------------------------------------------------------------------------
	int COS::ioctl( ::handle_t f, int cmd, const void* data, size_t size )
	{
		return ::ioctl( f, cmd, data, size );
	}

	//------------------------------------------------------------------------------
	int COS::readv( ::handle_t f, const struct ::iovec* iov, int count )
	{
		return ::readv( f, iov, count );
	}

	//------------------------------------------------------------------------------
	int COS::writev( ::handle_t f, const struct ::iovec* iov, int count )
	{
		return ::writev( f, iov, count );
	}

	//------------------------------------------------------------------------------
	::loff_t COS::tell( ::handle_t f )
	{
		return ::tell( f );
	}

	//------------------------------------------------------------------------------
	::off64_t COS::tell64( ::handle_t f )
	{
		return ::tell64( f );
	}

	//------------------------------------------------------------------------------
	::loff_t COS::lseek( ::handle_t f, ::loff_t offset, int origin )
	{
		return ::lseek( f, offset, origin );
	}

	//------------------------------------------------------------------------------
	::off64_t COS::lseek64( ::handle_t f, ::off64_t offset, int origin )
	{
		return ::lseek64( f, offset, origin );
	}

	//------------------------------------------------------------------------------
	int COS::ftruncate( ::handle_t f, ::loff_t size )
	{
		return ::ftruncate( f, size );
	}

	//------------------------------------------------------------------------------
	int COS::ftruncate64( ::handle_t f, ::off64_t size )
	{
		return ::ftruncate64( f, size );
	}

	//------------------------------------------------------------------------------
	int COS::futime( ::handle_t f, ::utimbuf* times )
	{
		return ::futime( f, times );
	}

	//------------------------------------------------------------------------------
	int COS::utime( const char* name, ::utimbuf* times )
	{
		return ::utime( name, times );
	}

	//------------------------------------------------------------------------------
	int COS::fstat( ::handle_t f, struct ::stat* buffer )
	{
		return ::fstat( f, buffer );
	}

	//------------------------------------------------------------------------------
	int COS::fstat64( ::handle_t f, struct ::stat64* buffer )
	{
		return ::fstat64( f, buffer );
	}

	//------------------------------------------------------------------------------
	int COS::stat( const char* name, struct ::stat* buffer )
	{
		return ::stat( name, buffer );
	}

	//------------------------------------------------------------------------------
	int COS::stat64( const char* name, struct ::stat64* buffer )
	{
		return ::stat64( name, buffer );
	}

	//------------------------------------------------------------------------------
	int COS::lstat( const char* name, struct ::stat* buffer )
	{
		return ::lstat( name, buffer );
	}

	//------------------------------------------------------------------------------
	int COS::lstat64( const char* name, struct ::stat64* buffer )
	{
		_SANQ_USESAPI( lstat64 );
		return Call< int, const char*, struct ::stat64* >( pFunc, name, buffer );
	}

	//------------------------------------------------------------------------------
	int COS::access( const char* name, int mode )
	{
		return ::access( name, mode );
	}

	//------------------------------------------------------------------------------
	::loff_t COS::filelength( ::handle_t f )
	{
		return ::filelength( f );
	}

	//------------------------------------------------------------------------------
	::off64_t COS::filelength64( ::handle_t f )
	{
		return ::filelength64( f );
	}

	//------------------------------------------------------------------------------
	int COS::isatty( handle_t f )
	{
		return ::isatty( f );
	}

	//------------------------------------------------------------------------------
	int COS::eof( ::handle_t f )
	{
		return ::eof( f );
	}

	//------------------------------------------------------------------------------
	int COS::umask( int mask )
	{
		return ::umask( mask );
	}

	//------------------------------------------------------------------------------
	int COS::setmode( ::handle_t f, int mode )
	{
		return ::setmode( f, mode );
	}

	//------------------------------------------------------------------------------
	int COS::chmod( const char* name, int mode )
	{
		return ::chmod( name, mode );
	}

	//------------------------------------------------------------------------------
	int COS::fchmod( ::handle_t f, int mode )
	{
		return ::fchmod( f, mode );
	}

	//------------------------------------------------------------------------------
	int COS::chown( const char* name, int owner, int group )
	{
		return ::chown( name, owner, group );
	}

	//------------------------------------------------------------------------------
	int COS::fchown( ::handle_t f, int owner, int group )
	{
		_SANQ_USESAPI( fchown );
		return Call< int, ::handle_t, int, int >( pFunc, f, owner, group );
	}

	//------------------------------------------------------------------------------
	int COS::chdir( const char* name )
	{
		return ::chdir( name );
	}

	//------------------------------------------------------------------------------
	char* COS::getcwd( char* buf, size_t size )
	{
		return ::getcwd( buf, size );
	}

	//------------------------------------------------------------------------------
	int COS::mkdir( const char* name, int mode )
	{
		return ::mkdir( name, mode );
	}

	//------------------------------------------------------------------------------
	int COS::rmdir( const char* name )
	{
		return ::rmdir( name );
	}

	//------------------------------------------------------------------------------
	int COS::rename( const char* oldname, const char* newname )
	{
		return ::rename( oldname, newname );
	}

	//------------------------------------------------------------------------------
	int COS::link( const char* oldname, const char* newname )
	{
		return ::link( oldname, newname );
	}

	//------------------------------------------------------------------------------
	int COS::unlink( const char* name )
	{
		return ::unlink( name );
	}

	//------------------------------------------------------------------------------
	::handle_t COS::_opendir( const char* name )
	{
		return ::_opendir( name );
	}

	//------------------------------------------------------------------------------
	int COS::_readdir( handle_t f, ::direntry* dirp, int count )
	{
		return ::_readdir( f, dirp, count );
	}

	//------------------------------------------------------------------------------
	int COS::pipe( ::handle_t fildes[ 2 ] )
	{
		return ::pipe( fildes );
	}
	/*
	//------------------------------------------------------------------------------
	void* COS::mmap( void* addr, unsigned long size, int type, int protect, unsigned long tag )
	{
		return ::mmap( addr, size, type, protect, tag );
	}

	//------------------------------------------------------------------------------
	int COS::munmap( void* addr, unsigned long size, int type )
	{
		return ::munmap( addr, size, type );
	}

	//------------------------------------------------------------------------------
	void* COS::mremap( void* addr, unsigned long oldsize, unsigned long newsize, int type, int protect, unsigned long tag )
	{
		return ::mremap( addr, oldsize, newsize, type, protect, tag );
	}

	//------------------------------------------------------------------------------
	int COS::mprotect( void* addr, unsigned long size, int protect )
	{
		return ::mprotect( addr, size, protect );
	}

	//------------------------------------------------------------------------------
	int COS::mlock( void* addr, unsigned long size )
	{
		return ::mlock( addr, size );
	}

	//------------------------------------------------------------------------------
	int COS::munlock( void* addr, unsigned long size )
	{
		return ::munlock( addr, size );
	}
	*/
	//------------------------------------------------------------------------------
	int COS::waitone( ::handle_t h, int timeout )
	{
		return ::waitone( h, timeout );
	}

	//------------------------------------------------------------------------------
	int COS::waitall( ::handle_t* h, int count, int timeout )
	{
		return ::waitall( h, count, timeout );
	}

	//------------------------------------------------------------------------------
	int COS::waitany( handle_t* h, int count, int timeout )
	{
		return ::waitany( h, count, timeout );
	}

	//------------------------------------------------------------------------------
	::handle_t COS::mkevent( int manual_reset, int initial_state )
	{
		return ::mkevent( manual_reset, initial_state );
	}

	//------------------------------------------------------------------------------
	int COS::epulse( handle_t h )
	{
		return ::epulse( h );
	}

	//------------------------------------------------------------------------------
	int COS::eset( handle_t h )
	{
		return ::eset( h );
	}

	//------------------------------------------------------------------------------
	int COS::ereset( handle_t h )
	{
		return ::ereset( h );
	}

	//------------------------------------------------------------------------------
	handle_t COS::mksem( int initial_count )
	{
		return ::mksem( initial_count );
	}

	//------------------------------------------------------------------------------
	int COS::semrel( ::handle_t h, int count )
	{
		return ::semrel( h, count );
	}

	//------------------------------------------------------------------------------
	::handle_t COS::mkmutex( int owned )
	{
		return ::mkmutex( owned );
	}

	//------------------------------------------------------------------------------
	int COS::mutexrel( ::handle_t h )
	{
		return ::mutexrel( h );
	}

	//------------------------------------------------------------------------------
	handle_t COS::mkiomux( int flags )
	{
		return ::mkiomux( flags );
	}

	//------------------------------------------------------------------------------
	int COS::dispatch( handle_t iomux, handle_t h, int events, int context )
	{
		return ::dispatch( iomux, h, events, context );
	}

	//------------------------------------------------------------------------------
	int COS::select( int nfds, fd_set* readfds, fd_set* writefds, fd_set* exceptfds, const ::timeval* timeout )
	{
		return ::select( nfds, readfds, writefds, exceptfds, timeout );
	}

	//------------------------------------------------------------------------------
	int COS::poll( ::pollfd fds[], unsigned int nfds, int timeout )
	{
		_SANQ_USESAPI( poll );
		return Call< int, ::pollfd[], unsigned int, int >( pFunc, fds, nfds, timeout );
	}

	//------------------------------------------------------------------------------
	int COS::sysinfo( int cmd, void* data, size_t size )
	{
		return ::sysinfo( cmd, data, size );
	}

	//------------------------------------------------------------------------------
	int COS::uname( ::utsname* buf )
	{
		return ::uname( buf );
	}

	//------------------------------------------------------------------------------
	::handle_t COS::self()
	{
		return ::self();
	}

	//------------------------------------------------------------------------------
	void COS::exitos( int mode )
	{
		::exitos( mode );
	}

	//------------------------------------------------------------------------------
	void COS::dbgbreak()
	{
		::dbgbreak();
	}

	//------------------------------------------------------------------------------
	char* COS::strerror( int errnum )
	{
		return ::strerror( errnum );
	}

	//------------------------------------------------------------------------------
	char* COS::crypt( const char* key, const char* salt )
	{
		return ::crypt( key, salt );
	}

	//------------------------------------------------------------------------------
	char* COS::crypt_r( const char* key, const char* salt, char* buf )
	{
		_SANQ_USESAPI( crypt_r );
		return Call< char*, const char*, const char*, char* >( pFunc, key, salt, buf );
	}

	//------------------------------------------------------------------------------
	::passwd* COS::getpwnam( const char* name )
	{
		return ::getpwnam( name );
	}

	//------------------------------------------------------------------------------
	::passwd* COS::getpwuid( ::uid_t uid )
	{
		return ::getpwuid( uid );
	}

	//------------------------------------------------------------------------------
	::group* COS::getgrnam( const char* name )
	{
		return ::getgrnam( name );
	}

	//------------------------------------------------------------------------------
	::group* COS::getgrgid( ::uid_t uid )
	{
		return ::getgrgid( uid );
	}

	//------------------------------------------------------------------------------
	int COS::initgroups( const char* user, ::gid_t basegid )
	{
		_SANQ_USESAPI( initgroups );
		return Call< int, const char*, ::gid_t >( pFunc, user, basegid );
	}

	//------------------------------------------------------------------------------
	int COS::getuid()
	{
		return ::getuid();
	}

	//------------------------------------------------------------------------------
	int COS::getgid()
	{
		return ::getgid();
	}

	//------------------------------------------------------------------------------
	int COS::setuid( ::uid_t uid )
	{
		_SANQ_USESAPI( setuid );
		return Call< int, ::uid_t >( pFunc, uid );
	}

	//------------------------------------------------------------------------------
	int COS::setgid( ::gid_t gid )
	{
		_SANQ_USESAPI( setgid );
		return Call< int, ::gid_t >( pFunc, gid );
	}

	//------------------------------------------------------------------------------
	int COS::geteuid()
	{
		_SANQ_USESAPI( geteuid );
		return Call< int >( pFunc );
	}

	//------------------------------------------------------------------------------
	int COS::getegid()
	{
		_SANQ_USESAPI( getegid );
		return Call< int >( pFunc );
	}

	//------------------------------------------------------------------------------
	int COS::seteuid( ::uid_t uid )
	{
		_SANQ_USESAPI( seteuid );
		return Call< int, ::uid_t >( pFunc, uid );
	}

	//------------------------------------------------------------------------------
	int COS::setegid( ::gid_t gid )
	{
		_SANQ_USESAPI( setegid );
		return Call< int, ::gid_t >( pFunc, gid );
	}

	//------------------------------------------------------------------------------
	int COS::getgroups( int size, ::gid_t list[] )
	{
		_SANQ_USESAPI( getgroups );
		return Call< int, int, ::gid_t* >( pFunc, size, list );
	}

	//------------------------------------------------------------------------------
	int COS::setgroups( int size, const ::gid_t list[] )
	{
		_SANQ_USESAPI( setgroups );
		return Call< int, int, const ::gid_t * >( pFunc, size, list );
	}

	//------------------------------------------------------------------------------
	handle_t COS::beginthread( void ( __stdcall *startaddr )( void* ), unsigned int stacksize, void* arg, int flags, ::tib** ptib )
	{
		return ::beginthread( startaddr, stacksize, arg, flags, ptib );
	}

	//------------------------------------------------------------------------------
	int COS::suspend( ::handle_t thread )
	{
		return ::suspend( thread );
	}

	//------------------------------------------------------------------------------
	int COS::resume( ::handle_t thread )
	{
		return ::resume( thread );
	}

	//------------------------------------------------------------------------------
	::tib* COS::getthreadblock( ::handle_t thread )
	{
		return ::gettib();
	}

	//------------------------------------------------------------------------------
	handle_t COS::getprochandle( ::pid_t pid )
	{
		return ::getprochandle( pid );
	}

	//------------------------------------------------------------------------------
	void COS::endthread( int status )
	{
		::endthread( status );
	}

	//------------------------------------------------------------------------------
	::tid_t COS::gettid()
	{
		return ::gettid();
	}

	//------------------------------------------------------------------------------
	::pid_t COS::getpid()
	{
		return ::getpid();
	}

	//------------------------------------------------------------------------------
	::pid_t COS::getppid()
	{
		_SANQ_USESAPI( getppid );
		return Call< ::pid_t >( pFunc );
	}

	//------------------------------------------------------------------------------
	int COS::getchildstat( ::pid_t pid, int* status )
	{
		return ::getchildstat( pid, status );
	}

	//------------------------------------------------------------------------------
	int COS::setchildstat( ::pid_t pid, int status )
	{
		return ::setchildstat( pid, status );
	}

	//------------------------------------------------------------------------------
	int COS::setcontext( ::handle_t thread, void* context )
	{
		return ::setcontext( thread, context );
	}

	//------------------------------------------------------------------------------
	int COS::getcontext( handle_t thread, void* context )
	{
		return ::getcontext( thread, context );
	}

	//------------------------------------------------------------------------------
	int COS::getprio( handle_t thread )
	{
		return ::getprio( thread );
	}

	//------------------------------------------------------------------------------
	int COS::setprio( handle_t thread, int priority )
	{
		return ::setprio( thread, priority );
	}

	//------------------------------------------------------------------------------
	int COS::msleep( int millisecs )
	{
		return ::msleep( millisecs );
	}

	//------------------------------------------------------------------------------
	unsigned COS::sleep( unsigned seconds )
	{
		return ::sleep( seconds );
	}

	//------------------------------------------------------------------------------
	::tib* COS::gettib()
	{
		return ::gettib();
	}

	//------------------------------------------------------------------------------
	int COS::spawn( int mode, const char* pgm, const char* cmdline, char** env, ::tib** tibptr )
	{
		return ::spawn( mode, pgm, cmdline, env, tibptr );
	}

	//------------------------------------------------------------------------------
	void COS::exit( int status )
	{
		_SANQ_USESAPI( exit );
		voidCall< int >( pFunc, status );
	}

	//------------------------------------------------------------------------------
	sighandler_t COS::signal( int signum, sighandler_t handler )
	{
		return ::signal( signum, handler );
	}

	//------------------------------------------------------------------------------
	int COS::raise( int signum )
	{
		return ::raise( signum );
	}

	//------------------------------------------------------------------------------
	int COS::kill( pid_t pid, int signum )
	{
		return ::kill( pid, signum );
	}

	//------------------------------------------------------------------------------
	int COS::sendsig( handle_t thread, int signum )
	{
		return ::sendsig( thread, signum );
	}

	//------------------------------------------------------------------------------
	void COS::sigexit( ::siginfo* info, int action )
	{
		::sigexit( info, action );
	}

	//------------------------------------------------------------------------------
	char* COS::strsignal( int signum )
	{
		_SANQ_USESAPI( strsignal );
		return Call< char*, int >( pFunc, signum );
	}

	//------------------------------------------------------------------------------
	int COS::sigemptyset( ::sigset_t* set )
	{
		return ::sigemptyset( set );
	}

	//------------------------------------------------------------------------------
	int COS::sigfillset( ::sigset_t* set )
	{
		_SANQ_USESAPI( sigfillset );
		return Call< int, ::sigset_t* >( pFunc, set );
	}

	//------------------------------------------------------------------------------
	int COS::sigaddset( ::sigset_t* set, int signum )
	{
		return ::sigaddset( set, signum );
	}

	//------------------------------------------------------------------------------
	int COS::sigdelset( ::sigset_t* set, int signum )
	{
		_SANQ_USESAPI( sigdelset );
		return Call< int, ::sigset_t*, int >( pFunc, set, signum );
	}

	//------------------------------------------------------------------------------
	int COS::sigismember( ::sigset_t* set, int signum )
	{
		_SANQ_USESAPI( sigismember );
		return Call< int, ::sigset_t*, int >( pFunc, set, signum );
	}

	//------------------------------------------------------------------------------
	int COS::sigaction( int signum, const struct ::sigaction* act, struct ::sigaction* oldact )
	{
		return ::sigaction( signum, act, oldact );
	}

	//------------------------------------------------------------------------------
	int COS::sigprocmask( int how, const ::sigset_t* set, ::sigset_t* oldset )
	{
		_SANQ_USESAPI( sigprocmask );
		return Call< int, int, const ::sigset_t*, ::sigset_t* >( pFunc, how, set, oldset );
	}

	//------------------------------------------------------------------------------
	int COS::sigpending( ::sigset_t* set )
	{
		_SANQ_USESAPI( sigpending );
		return Call< int, ::sigset_t* >( pFunc, set );
	}

	//------------------------------------------------------------------------------
	int COS::sigsuspend( const ::sigset_t* mask )
	{
		_SANQ_USESAPI( sigsuspend );
		return Call< int, const ::sigset_t* >( pFunc, mask );
	}

	//------------------------------------------------------------------------------
	unsigned COS::alarm( unsigned seconds )
	{
		return ::alarm( seconds );
	}

	//------------------------------------------------------------------------------
	time_t COS::time( time_t* timeptr )
	{
		return ::time( timeptr );
	}

	//------------------------------------------------------------------------------
	int COS::gettimeofday( ::timeval* tv, void* tzp )
	{
		return ::gettimeofday( tv, tzp );
	}

	//------------------------------------------------------------------------------
	int COS::settimeofday( ::timeval* tv )
	{
		return ::settimeofday( tv );
	}

	//------------------------------------------------------------------------------
	clock_t COS::clock()
	{
		return ::clock();
	}

	//------------------------------------------------------------------------------
	void COS::openlog( char* ident, int option, int facility )
	{
		::openlog( ident, option, facility );
	}

	//------------------------------------------------------------------------------
	void COS::closelog()
	{
		return ::closelog();
	}

	//------------------------------------------------------------------------------
	int COS::setlogmask( int mask )
	{
		return ::setlogmask( mask );
	}

	//------------------------------------------------------------------------------
	void COS::syslog( int pri, const char* fmt, ... )
	{
        va_list args;
        va_start( args, fmt );
        ::vsyslog( pri, fmt, args );
        va_end(args);		
	}

	//------------------------------------------------------------------------------
	void COS::vsyslog( int pri, const char* fmt, va_list args )
	{
		::vsyslog( pri, fmt, args );
	}

	//------------------------------------------------------------------------------
	void COS::panic( const char* msg )
	{
		::panic( msg );
	}

	//------------------------------------------------------------------------------
	int COS::canonicalize( const char* filename, char* buffer, int size )
	{
		return ::canonicalize( filename, buffer, size );
	}

	//------------------------------------------------------------------------------
	void COS::mkcs( critsect_t cs )
	{
		::mkcs( cs );
	}

	//------------------------------------------------------------------------------
	void COS::csfree( critsect_t cs )
	{
		::csfree( cs );
	}

	//------------------------------------------------------------------------------
	void COS::enter( critsect_t cs )
	{
		::enter( cs );
	}

	//------------------------------------------------------------------------------
	void COS::leave( critsect_t cs )
	{
		::leave( cs );
	}

	//------------------------------------------------------------------------------
	void* COS::_lmalloc( size_t size )
	{
		return ::_lmalloc( size );
	}

	//------------------------------------------------------------------------------
	void* COS::_lrealloc( void* mem, size_t size )
	{
		return ::_lrealloc( mem, size );
	}

	//------------------------------------------------------------------------------
	void* COS::_lcalloc( size_t num, size_t size )
	{
		return ::_lcalloc( num, size );
	}

	//------------------------------------------------------------------------------
	void COS::_lfree( void* p )
	{
		return ::_lfree( p );
	}

//#ifdef USE_LOCAL_HEAP

//#define malloc(n) _lmalloc(n)
//#define realloc(p, n) _lrealloc((p), (n))
//#define calloc(n, s) _lcalloc((n), (s))
//#define free(p) _lfree(p)

//#else
//osapi void *malloc(size_t size);
//osapi void *realloc(void *mem, size_t size);
//osapi void *calloc(size_t num, size_t size);
//osapi void free(void *p);
//#endif

	//------------------------------------------------------------------------------
	struct ::mallinfo COS::mallinfo()
	{
		return ::mallinfo();
	}

	//------------------------------------------------------------------------------
	int COS::malloc_usable_size( void* p )
	{
		_SANQ_USESAPI( malloc_usable_size );
		return Call< int, void* >( pFunc, p );
	}

	//------------------------------------------------------------------------------
	hmodule_t COS::dlopen( const char* name, int mode )
	{
		return ::dlopen( name, mode );
	}

	//------------------------------------------------------------------------------
	int COS::dlclose( hmodule_t hmod )
	{
		return ::dlclose( hmod );
	}

	//------------------------------------------------------------------------------
	void* COS::dlsym( hmodule_t hmod, const char* procname )
	{
		return ::dlsym( hmod, procname );
	}

	//------------------------------------------------------------------------------
	char* COS::dlerror()
	{
		return ::dlerror();
	}

	//------------------------------------------------------------------------------
	hmodule_t COS::getmodule( const char* name )
	{
		return ::getmodule( name );
	}

	//------------------------------------------------------------------------------
	int COS::getmodpath( hmodule_t hmod, char* buffer, int size )
	{
		return ::getmodpath( hmod, buffer, size );
	}

	//------------------------------------------------------------------------------
	int COS::exec( hmodule_t hmod, const char* args, char** env )
	{
		return ::exec( hmod, args, env );
	}

	//------------------------------------------------------------------------------
	void* COS::getresdata( hmodule_t hmod, int type, char* name, int lang, int* len )
	{
		return ::getresdata( hmod, type, name, lang, len );
	}

	//------------------------------------------------------------------------------
	int COS::getreslen( hmodule_t hmod, int type, char* name, int lang )
	{
		return ::getreslen( hmod, type, name, lang );
	}

	//------------------------------------------------------------------------------
	::verinfo* COS::getverinfo( ::hmodule_t hmod )
	{
		_SANQ_USESAPI( getverinfo );
		return Call< ::verinfo*, ::hmodule_t >( pFunc, hmod );
	}

	//------------------------------------------------------------------------------
	int COS::getvervalue( ::hmodule_t hmod, char* name, char* buf, int size )
	{
		_SANQ_USESAPI( getvervalue );
		return Call< int, ::hmodule_t, char*, char*, int >( pFunc, hmod, name, buf, size );
	}

	//------------------------------------------------------------------------------
	tls_t COS::tlsalloc()
	{
		return ::tlsalloc();
	}

	//------------------------------------------------------------------------------
	void COS::tlsfree( tls_t index )
	{
		return ::tlsfree( index );
	}

	//------------------------------------------------------------------------------
	void* COS::tlsget( ::tls_t index )
	{
		return ::tlsget( index );
	}

	//------------------------------------------------------------------------------
	int COS::tlsset( ::tls_t index, void* value )
	{
		return ::tlsset( index, value );
	}

	//------------------------------------------------------------------------------
	int COS::accept( int s, ::sockaddr* addr, int* addrlen )
	{
		return ::accept( s, addr, addrlen );
	}

	//------------------------------------------------------------------------------
	int COS::bind( int s, const ::sockaddr* name, int namelen )
	{
		return ::bind( s, name, namelen );
	}

	//------------------------------------------------------------------------------
	int COS::connect( int s, const ::sockaddr* name, int namelen )
	{
		return ::connect( s, name, namelen );
	}

	//------------------------------------------------------------------------------
	int COS::getpeername( int s, ::sockaddr* name, int* namelen )
	{
		return ::getpeername( s, name, namelen );
	}

	//------------------------------------------------------------------------------
	int COS::getsockname( int s, ::sockaddr* name, int* namelen )
	{
		return ::getsockname( s, name, namelen );
	}

	//------------------------------------------------------------------------------
	int COS::getsockopt( int s, int level, int optname, char* optval, int* optlen )
	{
		return ::getsockopt( s, level, optname, optval, optlen );
	}

	//------------------------------------------------------------------------------
	int COS::listen( int s, int backlog )
	{
		return ::listen( s, backlog );
	}

	//------------------------------------------------------------------------------
	int COS::recv( int s, void* data, int size, unsigned int flags )
	{
		return ::recv( s, data, size, flags );
	}

	//------------------------------------------------------------------------------
	int COS::recvfrom( int s, void* data, int size, unsigned int flags, struct sockaddr* from, int* fromlen )
	{
		return ::recvfrom( s, data, size, flags, from, fromlen );
	}

	//------------------------------------------------------------------------------
	int COS::recvmsg( int s, struct msghdr* hdr, unsigned int flags )
	{
		return ::recvmsg( s, hdr, flags );
	}

	//------------------------------------------------------------------------------
	int COS::send( int s, const void* data, int size, unsigned int flags )
	{
		return ::send( s, data, size, flags );
	}

	//------------------------------------------------------------------------------
	int COS::sendto( int s, const void* data, int size, unsigned int flags, const ::sockaddr* to, int tolen )
	{
		return ::sendto( s, data, size, flags, to, tolen );
	}

	//------------------------------------------------------------------------------
	int COS::sendmsg( int s, struct msghdr* hdr, unsigned int flags )
	{
		return ::sendmsg( s, hdr, flags );
	}

	//------------------------------------------------------------------------------
	int COS::setsockopt( int s, int level, int optname, const char* optval, int optlen )
	{
		return ::setsockopt( s, level, optname, optval, optlen );
	}

	//------------------------------------------------------------------------------
	int COS::shutdown( int s, int how )
	{
		return ::shutdown( s, how );
	}

	//------------------------------------------------------------------------------
	int COS::socket( int domain, int type, int protocol )
	{
		return ::socket( domain, type, protocol );
	}

	//------------------------------------------------------------------------------
	int COS::res_send( const char* buf, int buflen, char* answer, int anslen )
	{
		return ::res_send( buf, buflen, answer, anslen );
	}

	//------------------------------------------------------------------------------
	int COS::res_query( const char* dname, int cls, int type, unsigned char* answer, int anslen )
	{
		return ::res_query( dname, cls, type, answer, anslen );
	}

	//------------------------------------------------------------------------------
	int COS::res_search( const char* name, int cls, int type, unsigned char* answer, int anslen )
	{
		return ::res_search( name, cls, type, answer, anslen );
	}

	//------------------------------------------------------------------------------
	int COS::res_querydomain( const char* name, const char* domain, int cls, int type, unsigned char* answer, int anslen )
	{
		return ::res_querydomain( name, domain, cls, type, answer, anslen );
	}

	//------------------------------------------------------------------------------
	int COS::res_mkquery( int op, const char* dname, int cls, int type, char* data, int datalen, unsigned char* newrr, char* buf, int buflen )
	{
		return ::res_mkquery( op, dname, cls, type, data, datalen, newrr, buf, buflen );
	}

	//------------------------------------------------------------------------------
	int COS::dn_comp( const char* src, unsigned char* dst, int dstsiz, unsigned char** dnptrs, unsigned char** lastdnptr )
	{
		return ::dn_comp( src, dst, dstsiz, dnptrs, lastdnptr );
	}

	//------------------------------------------------------------------------------
	int COS::dn_expand( const unsigned char* msg, const unsigned char* eom, const unsigned char* src,  char* dst, int dstsiz )
	{
		return ::dn_expand( msg, eom, src, dst, dstsiz );
	}

	//------------------------------------------------------------------------------
	::hostent* COS::gethostbyname( const char* name )
	{
		return ::gethostbyname( name );
	}

	//------------------------------------------------------------------------------
	::hostent* COS::gethostbyaddr( const char* addr, int len, int type )
	{
		return ::gethostbyaddr( addr, len, type );
	}

	//------------------------------------------------------------------------------
	char* COS::inet_ntoa( ::in_addr in )
	{
		return ::inet_ntoa( in );
	}

	//------------------------------------------------------------------------------
	unsigned long COS::inet_addr( const char* cp )
	{
		return ::inet_addr( cp );
	}

	//------------------------------------------------------------------------------
	int COS::gethostname(char *name, int namelen)
	{
		return ::gethostname( name, namelen );
	}

	//------------------------------------------------------------------------------
	::protoent* COS::getprotobyname( const char* name )
	{
		return ::getprotobyname( name );
	}

	//------------------------------------------------------------------------------
	::protoent* COS::getprotobynumber( int proto )
	{
		return ::getprotobynumber( proto );
	}

	//------------------------------------------------------------------------------
	::servent* COS::getservbyname( const char* name, const char* proto )
	{
		return ::getservbyname( name, proto );
	}

	//------------------------------------------------------------------------------
	::servent* COS::getservbyport( int port, const char* proto )
	{
		return ::getservbyport( port, proto );
	}

	//------------------------------------------------------------------------------
	char* COS::getenv(const char *name)
	{
		return ::getenv( name );
	}

	//------------------------------------------------------------------------------
	int COS::setenv(const char *name, const char *value, int rewrite)
	{
		return ::setenv( name, value, rewrite );
	}

	//------------------------------------------------------------------------------
	void COS::unsetenv( const char* name )
	{
		_SANQ_USESAPI( unsetenv );
		return voidCall< const char* >( pFunc, name );
	}

	//------------------------------------------------------------------------------
	int COS::putenv(const char *str)
	{
		return ::putenv( str );
	}

	//------------------------------------------------------------------------------
	int COS::__getstdhndl( int n )
	{
		return ::__getstdhndl( n );
	}

}//nsSanQAPI

