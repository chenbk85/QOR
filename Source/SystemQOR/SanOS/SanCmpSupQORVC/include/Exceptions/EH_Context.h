//EH_Context.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINCMPSUPVC_EXCEPT_CONTEXT_H_1
#define WINCMPSUPVC_EXCEPT_CONTEXT_H_1

#include "EH_Data.h"
#include "ExceptionHandling.h"

//--------------------------------------------------------------------------------
namespace nsCompiler
{
	//--------------------------------------------------------------------------------
	namespace EH
	{
		class GuardDescriptor;
		
		//--------------------------------------------------------------------------------
		class ExceptionContext //: private ExceptData
		{
			//--------------------------------------------------------------------------------
			friend nsWin32::EXCEPTION_DISPOSITION CallHandler( HandlerPtr pfn, ExceptionContext& context, const GuardDescriptor& guard, BasicRegistrationNode* pMarkerRN, int recursive );

		private:

			ExceptData m_Data;

		public:

			//--------------------------------------------------------------------------------
			ExceptionContext()// : ExceptData()
			{
			}

			//--------------------------------------------------------------------------------
			ExceptionContext( const ExceptData& Src )
			{
				*this = Src;
			}

			//--------------------------------------------------------------------------------
			ExceptionContext( ExceptionRecord* pExcept, Context* pContext, void* pDC ) : m_Data( (void*)pExcept, (void*)pContext, (void*)pDC )
			{
			}

			//--------------------------------------------------------------------------------
			ExceptionContext& operator = ( const ExceptData& Src )
			{
				m_Data.m_pRecord = Src.m_pRecord;
				m_Data.m_pContext = Src.m_pContext;
				m_Data.m_pDispatcherContext = Src.m_pDispatcherContext;
				return *this;
			}

			//--------------------------------------------------------------------------------
			int IsValid() const 
			{ 
				return m_Data.m_pRecord != 0; 
			}

			//--------------------------------------------------------------------------------
			int IsCppException() const 
			{
				return Record()->IsCpp(); 
			}

			//--------------------------------------------------------------------------------
			const ThrownObject& ExceptionObject() const 
			{ 
				return Record()->Object(); 
			}

			//--------------------------------------------------------------------------------
			ThrownObject& ExceptionObject() 
			{ 
				return Record()->Object(); 
			}
			
			//--------------------------------------------------------------------------------
			unsigned long ExceptionCode() const 
			{
				return Record()->ExceptionCode; 
			}

			//--------------------------------------------------------------------------------
			unsigned long ExceptionFlags() const 
			{
				return Record()->ExceptionFlags; 
			}

			//--------------------------------------------------------------------------------
			HandlerPtr CustomHandler() const
			{
				if ( Record()->IsCppCompatible() )
				{
					return Record()->Object().CustomHandler();
				}
				return 0;
			}

			//--------------------------------------------------------------------------------
			__QCMP_NORETURN void Rethrow() const 
			{
				Record()->Throw(); 
			}

			//--------------------------------------------------------------------------------
			void CopyExceptionObject( RegistrationNode* pRN, const HandlerType* pCatch, const CatchableType* pConv ) 
			{
				Record()->CopyObject( pRN, pCatch, pConv ); 
			}

			
			nsWin32::EXCEPTION_DISPOSITION CallHandler( HandlerPtr pfn, const GuardDescriptor& guard, BasicRegistrationNode* pMarkerRN, unsigned char recursive );

			//--------------------------------------------------------------------------------
			void UnwindNestedFrames( CExceptionFrame* pFrame ) 
			{ 
				pFrame->UnwindNestedFrames( Record() ); 
			}

		protected:

			//--------------------------------------------------------------------------------
			ExceptionRecord* Record() const
			{
				return reinterpret_cast< ExceptionRecord* >( m_Data.m_pRecord );
			}

			//--------------------------------------------------------------------------------
			Context* Context() const
			{
				return reinterpret_cast< nsCompiler::EH::Context* >( m_Data.m_pContext );
			}

			//--------------------------------------------------------------------------------
			void* DispatcherContext() const
			{
				return reinterpret_cast< void* >( m_Data.m_pDispatcherContext );
			}

		};

	}//EH

}//nsCompiler

#endif//WINCMPSUPVC_EXCEPT_CONTEXT_H_1
