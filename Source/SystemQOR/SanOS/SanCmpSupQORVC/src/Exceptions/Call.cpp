//Call.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "SystemQOR.h"

#ifndef _WIN64		//This doesn't apply to 64bit Windows
//--------------------------------------------------------------------------------
namespace nsCompiler
{
#pragma warning(push)
#pragma warning(disable:4100) 

		//--------------------------------------------------------------------------------
		__QCMP_DECLARE_NAKED void CallMemberFunction( void* pObject, void* pfn, ... )
		{
			__asm
			{
				pop         eax						// eax = ret addr
				pop         ecx						// ecx = pObject
				xchg        eax,dword ptr [esp]		// eax = pfn, ret addr on stack = our ret addr
				jmp         eax						// goto pfn 
			}
		}
#pragma warning(push)
#pragma warning(disable:4731) 

		//--------------------------------------------------------------------------------
		__QCMP_DECLARE_NAKED void JumpToFunction( void* target, void* targetStack, void* targetEBP )
		{
			__asm
			{
				mov         eax,[esp + 0x4] // target
				mov         ebp,[esp + 0xC] // targetEBP
				mov         esp,[esp + 0x8] // targetStack
				jmp         eax
			}
		}


		//--------------------------------------------------------------------------------
		__QCMP_DECLARE_NAKED void* __stdcall CallOnFrame0( void* addr, void* new_frame, 
									  void* temp1, //will hold old ebp
									  void* temp2 )//will hold retaddr
		{
			__asm
			{
				mov [esp + 0Ch], ebp	//temp1 = ebp
				mov eax, [esp]			//eax = retaddr
				mov [esp + 10h], eax	//temp2 = retaddr
				add esp, 4				//remove retaddr from stack
				pop eax					//eax = addr
				pop ebp					//ebp = new_frame
				call eax				//call addr
				pop ebp					//restore ebp from temp1
				ret						//return to temp2
			}
		}

		//--------------------------------------------------------------------------------
		__QCMP_DECLARE_NAKED void* __stdcall CallOnFrame2( void* addr, void* new_frame, void* arg1, void* arg2, 
									  void* temp1, //will hold old ebp
									  void* temp2 )//will hold retaddr
		{
			__asm
			{
				mov [esp + 14h], ebp	//temp1 = ebp
				mov eax, [esp]			//eax = retaddr
				mov [esp + 18h], eax	//temp2 = retaddr
				add esp, 4				//remove retaddr from stack
				pop eax					//eax = addr
				pop ebp					//ebp = new_frame, arg1 on top of stack
				call eax				//call addr
				add esp, 8				//clean arg1 and arg2
				pop ebp					//restore ebp from temp1
				ret						//return to temp2
			}
		}
#pragma warning(pop) //enable 4731
#pragma warning(pop) //enable 4100
		
}//nsCompiler

#else

namespace nsCompiler
{
	//--------------------------------------------------------------------------------
	void CallMemberFunction( void* pObject, void* pfn, ... )
	{

	}

	//--------------------------------------------------------------------------------
	void* __cdecl CallOnFrame0( void* addr, void* new_frame, void* temp1, void* temp2 )
	{
		return 0;
	}

	//--------------------------------------------------------------------------------
	void* __cdecl CallOnFrame2( void* addr, void* new_frame, void* arg1, void* arg2, void* temp1, void* temp2 )
	{
		return 0;
	}

}//nsCompiler

#endif//_WIN64
