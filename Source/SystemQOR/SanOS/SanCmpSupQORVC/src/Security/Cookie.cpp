//Cookie.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "SystemQOR.h"
#include <stdlib.h>

//Default init the security cookie

#ifdef _WIN64
#	define DEFAULT_SECURITY_COOKIE 0x00002B992DDFA232
#else
#	define DEFAULT_SECURITY_COOKIE 0xBB40E64E
#endif

// The global security cookie.  This name is known to the compiler.
// Initialize to a garbage non-zero value just in case we have a buffer overrun
// in any code that gets run before __security_init_cookie() has a chance to
// initialize the cookie to the final value.

__QCMP_STARTLINKAGE_C

__QCMP_DECLARE_MERGE_INITIALIZERS Cmp_uint_ptr __security_cookie = DEFAULT_SECURITY_COOKIE;

__QCMP_DECLARE_MERGE_INITIALIZERS Cmp_uint_ptr __security_cookie_complement = ~(DEFAULT_SECURITY_COOKIE);

	//--------------------------------------------------------------------------------
	//VS 2012 /GS enhancements
	__QCMP_NORETURN void __cdecl __report_rangecheckfailure( void )
	{
		abort();
	}

#ifdef _M_IX86

	//--------------------------------------------------------------------------------
	__QCMP_NORETURN void __cdecl __report_gsfailure(void)
	{
		__asm { push eax }
		if( __security_cookie != __security_cookie_complement )
		{
			//Report stack corruption
			abort();
		}
		__asm { pop eax }
	}

	//--------------------------------------------------------------------------------
	__QCMP_LOCAL void __QCMP_DECLARE_NAKED __fastcall __security_check_cookie( Cmp_uint_ptr _StackCookie )
	{
		QOR_PP_UNREF( _StackCookie );
		// x86 version written in asm to preserve all regs
		__asm {
			cmp ecx, __security_cookie
			jne failure
			rep ret // REP to avoid AMD branch prediction penalty
		failure:
			jmp __report_gsfailure
		}
	}
#elif defined _M_X64

	//--------------------------------------------------------------------------------
	__QCMP_LOCAL void __cdecl __security_check_cookie( Cmp_uint_ptr _StackCookie )
	{
	}

#endif

__QCMP_ENDLINKAGE_C
