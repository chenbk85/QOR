//TLS_DTor.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/WinQL.h"
#include "SystemQOR.h"
#include "WinQL/CodeServices/CriticalSection.h"
#include "../SystemQOR/MSWindows/WinCmpSupQORVC/include/PE/Sections.h"
#include "../SystemQOR/MSWindows/WinCmpSupQORVC/include/TLS/TLS.h"
#include "WinQL/CodeServices/SEH.h"
#include <stdlib.h>

#define DLL_THREAD_DETACH    3    
#define DLL_PROCESS_DETACH   0    

__QCMP_STARTLINKAGE_C

//--------------------------------------------------------------------------------
//Node for destructor registration list
typedef struct TlsDtorNode 
{
	__QCMP_STATIC_CONSTANT( int, FuncsPerNode = 30 );
	int count;
	struct TlsDtorNode* next;
	_PVFV funcs[ TlsDtorNode::FuncsPerNode ];
} TlsDtorNode;

//--------------------------------------------------------------------------------
//List
static __QCMP_DECLARE_PERTHREAD TlsDtorNode* dtor_list;		//current list pointer
static __QCMP_DECLARE_PERTHREAD TlsDtorNode dtor_list_head;	//statically allocated first element

//--------------------------------------------------------------------------------
// Register a destructor for a __declspec(thread) variable
//	doesn't require heap memory allocation.
int __QCMP_CALLCON __tlregdtor( _PVFV func )
{
    if( dtor_list == 0 ) 
	{
        dtor_list = &dtor_list_head;
        dtor_list_head.count = 0;
    }
    else if( dtor_list->count == TlsDtorNode::FuncsPerNode ) 
	{
        TlsDtorNode *pnode = ( TlsDtorNode* )malloc( sizeof( TlsDtorNode ) );
        if (pnode == 0) 
		{
            return -1;
        }
        pnode->count = 0;
        pnode->next = dtor_list;
        dtor_list = pnode;        
        dtor_list->count = 0;
    }
    dtor_list->funcs[ dtor_list->count++ ] = func;
    return 0;
}

//--------------------------------------------------------------------------------
//Handle destruction of __declspec(thread) variables
static void __QCMP_STDCALLCONVENTION __dyn_tls_dtor( void* /*hDllHandle*/, unsigned long dwReason, void* /*lpreserved*/ )
{
    TlsDtorNode *pnode, *pnext;
    int i;

	if (dwReason != DLL_THREAD_DETACH && dwReason != DLL_PROCESS_DETACH) 
	{
        return ;
    }

    for (pnode = dtor_list; pnode != 0; pnode = pnext) 
	{
        for (i = pnode->count - 1; i >= 0; --i) 
		{
            if ( pnode->funcs[i] != 0 ) 
			{
				__try
				{
					(*pnode->funcs[i])();
				}
				__except ( nsWin32::Exception_Execute_Handler )
				{
					//TODO: Possibly report throwing destructor
				}
            }
        }

		pnext = pnode->next;
        //Free every TlsDtorNode except the original one, which is statically allocated.
		__try
		{
			if( pnext != 0 ) 
			{
				free( (void*)pnode );
			}
		}
		__except ( nsWin32::Exception_Execute_Handler )
		{
			//TODO: Possibly report heap corruption
		}
    }

    return ;
}


//--------------------------------------------------------------------------------
static _CRTALLOC(".CRT$XLD") nsWin32::fpImage_TLS_Callback __xl_d = __dyn_tls_dtor;

__QCMP_ENDLINKAGE_C

