//BootStrap.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "../SystemQOR/SanOS/SanUsrExeBoot/include/BootStrap.h"


int __cdecl main( int _Argc, char** _Argv, char** _Env );

//Ensure reserved space for static initializers is allocated at compile time and zeroed so static initialisation can find the end of the list

// C initializers
#pragma __QCMP_DATA_SEGMENT(".CRT$XIA")
CBootStrap::InitFunc CBootStrap::CInit_a[] __attribute__((section (".CRT$XIA" ))) = { 0 };
#pragma __QCMP_DATA_SEGMENT(".CRT$XIZ")
CBootStrap::InitFunc CBootStrap::CInit_z[] __attribute__((section (".CRT$XIZ" ))) = { 0 };

// C++ initializers
#pragma __QCMP_DATA_SEGMENT(".CRT$XCA")
CBootStrap::InitFunc CBootStrap::CppInit_a[] __attribute__((section (".CRT$XCA" ))) = { 0 };
#pragma __QCMP_DATA_SEGMENT(".CRT$XCZ")
CBootStrap::InitFunc CBootStrap::CppInit_z[] __attribute__((section (".CRT$XCZ" ))) = { 0 };

#pragma __QCMP_DATA_SEGMENT()

//Tell the compiler to merge the reserved data sections above into the general data section

#pragma comment(linker, "/merge:.CRT=.rdata")

//The executable bootstrap static library is represented by a library object
nsCodeQOR::CLibraryBase SanOSExecutableBootstrapLibrary( "SanOS Executable Bootstrap library", false );

//--------------------------------------------------------------------------------
//Construct a SanOS process bootstrap
CBootStrap::CBootStrap() : nsSanOS::CProcessBootStrap()
{	
	//Initialize all the statics
	InitTerm( CInit_a, CInit_z );		//Initialise 'C' statics so the process can use 'C' code if desired
	InitTerm( CppInit_a, CppInit_z );	//Initialise C++ statics belonging to this process module
	ParseCommandLine();					//Get the command line parameters to pass to the user code entry point
}

//--------------------------------------------------------------------------------
int CBootStrap::Execute( void )
{	
	return main( m_iArgCount, m_pArgsList, m_pEnvList );
}

//--------------------------------------------------------------------------------
CBootStrap::~CBootStrap()
{
}

//--------------------------------------------------------------------------------
//The Process is neither a static library nor a shared library so we must provide access to a 'Module' Context which is in fact the Process object
nsCodeQOR::CLoadableModuleBase& ThisModule( void )
{
	nsCodeQOR::CLoadableModuleBase& Module( *( nsSanOS::CProcess::ThisProcess() ) );
	return Module;
}
