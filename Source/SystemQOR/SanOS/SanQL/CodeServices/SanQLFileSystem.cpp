//SanQLFileSystem.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Implements the high level SanOS FileSystem class

#include "SanQL/CodeServices/FileSystem.h"
#include "SanQL/CodeServices/Directory.h"
#include "SanQL/CodeServices/Handle.h"
#include "SanQL/CodeServices/File.h"

#include "SanQAPI/SanQOS.h"

//------------------------------------------------------------------------------
namespace nsSanOS
{
	__QOR_IMPLEMENT_OCLASS_LUID( CFileSystem );

	//--------------------------------------------------------------------------------
	CFileSystem::CFileSystem() : m_Library( nsSanQAPI::COS::Instance() )
	{
	}

	//--------------------------------------------------------------------------------
	CFileSystem::~CFileSystem()
	{
	}

	//--------------------------------------------------------------------------------
	int CFileSystem::MakeFileSystem( const CString& strDeviceName, const CString& strType, const CString& strOptions )
	{
		int iResult = m_Library.mkfs( strDeviceName, strType, strOptions );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CFileSystem::Mount( const CString& strType, const CString& strMountTo, const CString& strMountFrom, const CString& strOptions )
	{
		int iResult = m_Library.mount( strType, strMountTo, strMountFrom, strOptions );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CFileSystem::UnMount( const CString& strPath )
	{
		int iResult = m_Library.umount( strPath );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CFileSystem::GetFSStat( statfs& Buffer, size_t Size )
	{
		int iResult = m_Library.getfsstat( reinterpret_cast< struct ::statfs* >( &Buffer ), Size );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CFileSystem::ChangeMode( const CString& strName, int iMode )
	{
		int iResult = m_Library.chmod( strName, iMode );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CFileSystem::ChangeOwner( const CString& strName, int iOwner, int iGroup )
	{
		int iResult = m_Library.chown( strName, iOwner, iGroup );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CFileSystem::ChangeDirectory( const CString& strName )
	{
		int iResult = m_Library.chdir( strName );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	CString CFileSystem::GetCurrentWorkingDirectory( CString strBuffer )
	{
		CString strResult( m_Library.getcwd( strBuffer.GetBufferSetLength( MaxPath ), MaxPath ) );
		strBuffer.ReleaseBuffer();
		return strResult;
	}

	//--------------------------------------------------------------------------------
	int CFileSystem::MakeDirectory( const CString& strName, int iMode )
	{
		int iResult = m_Library.mkdir( strName, iMode );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CFileSystem::RemoveDirectory( const CString& strName )
	{
		int iResult = m_Library.rmdir( strName );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CFileSystem::Rename( const CString& strOldName, const CString& strNewName )
	{
		int iResult = m_Library.rename( strOldName, strNewName );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CFileSystem::Link( const CString& strOldName, const CString& strNewName )
	{
		int iResult = m_Library.link( strOldName, strNewName );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CFileSystem::Unlink( const CString& strName )
	{
		int iResult = m_Library.unlink( strName );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	CDirectory CFileSystem::OpenDirectory( const CString& strName )
	{
		CDirectory Directory( new CHandle( static_cast< int >( m_Library._opendir( strName ) ) ) );
		return Directory;
	}

	//--------------------------------------------------------------------------------
	int CFileSystem::Canonicalize( const CString& strFilename, CString strBuffer )
	{
		int iResult = m_Library.canonicalize( strFilename, strBuffer.GetBufferSetLength( MaxPath ), MaxPath );
		strBuffer.ReleaseBuffer();
		return iResult;
	}

	//--------------------------------------------------------------------------------
	CFile CFileSystem::Create( const CString& strName, int iMode )
	{
		CFile File( new CHandle( static_cast< int >( m_Library.creat( strName, iMode ) ) ) );
		return File;
	}

}//nsSanOS

