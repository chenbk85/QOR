//BootStrap.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "BootStrap.h"
#include "SanQAPI/SanQOS.h"
#include <new>

//The module global pointer to the module bootstrap object
CSharedBootStrap* g_pBootStrap;

//__QCMP_STARTLINKAGE_C
////The module global security cookie from the Compiler C++ support library
//extern Cmp_uint_ptr __security_cookie;
//extern Cmp_uint_ptr __security_cookie_complement;
//__QCMP_ENDLINKAGE_C

//The following reserves space within special sections of the module image for static initialisers

// C initializers
#pragma __QCMP_DATA_SEGMENT(".CRT$XIA")
CSanQORSharedBootStrap::InitFunc CSanQORSharedBootStrap::CInit_a[] __attribute__((section (".CRT$XIA"))) = { 0 };

#pragma __QCMP_DATA_SEGMENT(".CRT$XIZ")
CSanQORSharedBootStrap::InitFunc CSanQORSharedBootStrap::CInit_z[] __attribute__((section (".CRT$XIZ"))) = { 0 };

// C++ initializers
#pragma __QCMP_DATA_SEGMENT(".CRT$XCA")
CSanQORSharedBootStrap::InitFunc CSanQORSharedBootStrap::CppInit_a[] __attribute__((section (".CRT$XCA"))) = { 0 };

#pragma __QCMP_DATA_SEGMENT(".CRT$XCZ")
CSanQORSharedBootStrap::InitFunc CSanQORSharedBootStrap::CppInit_z[] __attribute__((section (".CRT$XCZ"))) = { 0 };

#pragma __QCMP_DEFAULT_DATA_SEGMENT		//Puts subsequent declarations into the default segment

//Tell the linker to merge the .CRT section into the regular data or read only data section
//Needs to be a writable data section for 32 bit Windows so we can tweak the loader to make
//per thread initialisation work later on

#pragma comment(linker, "/merge:.CRT=.rdata")

nsCodeQOR::CLibraryBase SanOSSharedLibraryBootstrapLibrary( "SanOS DLL Bootstrap library", false );

unsigned char SharedBootStrapMem[ sizeof( CSanQORSharedBootStrap ) + 16 ];

//Fake new and delete operators because we don't know whether OS.dll is loaded yet.
//--------------------------------------------------------------------------------
void* CSanQORSharedBootStrap::operator new( size_t )
{
	return &SharedBootStrapMem;
}

//--------------------------------------------------------------------------------
void CSanQORSharedBootStrap::operator delete( void* pInstance )
{
}

//--------------------------------------------------------------------------------
//Construct the bootstrap object
CSanQORSharedBootStrap::CSanQORSharedBootStrap() : CSharedBootStrap()
{
	ProcessAttach();
}

//--------------------------------------------------------------------------------
//Deconstruct the bootstrap to clean up when the library is unloaded
CSanQORSharedBootStrap::~CSanQORSharedBootStrap()
{
}

//--------------------------------------------------------------------------------
//Initialise all the C and C++ static objects. 
//This is called by the Process after all implicitly linked libraries are loaded
// which allows static objects to depend on other libraries.
void CSanQORSharedBootStrap::InitStatic()
{
	InitTerm( CInit_a, CInit_z );
	InitTerm( CppInit_a, CppInit_z );
	m_bStaticInitialised = true;
}

