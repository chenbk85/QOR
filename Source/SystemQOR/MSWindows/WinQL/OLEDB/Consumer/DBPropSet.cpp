//DBPropSet.cpp

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include <assert.h>
#include "WinQL/OLEDB/DBPropSet.h"
#include "WinQL/COM/ClientBase.h"
#include "WinQAPI/OLE32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	extern const DBID DB_NULLID;
	extern const GUID DBPROPSET_DBINIT;

	//--------------------------------------------------------------------------------
	CDBPropSet::CDBPropSet() : m_p( 0 )
	, m_bOwnsPropSet( false )
	{
	}

	//--------------------------------------------------------------------------------
	CDBPropSet::CDBPropSet( const CDBPropSet& src )
	{
		*this = src;
	}

	//--------------------------------------------------------------------------------
	CDBPropSet& CDBPropSet::operator = ( const CDBPropSet& src )
	{		
		if( &src != this )
		{
			if( !m_p )
			{
				Initialize( src.m_p->cProperties, src.m_p->guidPropertySet );
			}
			else
			{
				Free();
			}
			Alloc();
			for( unsigned long iProp = 0; iProp < m_p->cProperties; iProp++ )
			{
				m_p->rgProperties[ iProp ].colid = src.m_p->rgProperties[ iProp ].colid;
				m_p->rgProperties[ iProp ].dwOptions = src.m_p->rgProperties[ iProp ].dwOptions;
				m_p->rgProperties[ iProp ].dwPropertyID = src.m_p->rgProperties[ iProp ].dwPropertyID;
				m_p->rgProperties[ iProp ].dwStatus = src.m_p->rgProperties[ iProp ].dwStatus;
				VariantCopy( reinterpret_cast<VARIANTARG*>( &m_p->rgProperties[ iProp ].vValue ), reinterpret_cast<const VARIANTARG*>( &src.m_p->rgProperties[ iProp ].vValue ) );
			}
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	void CDBPropSet::Initialize( void )
	{
		m_p = new DBPROPSET;
		m_bOwnsPropSet = true;
	}

	//--------------------------------------------------------------------------------
	void CDBPropSet::Initialize( unsigned long ulSize, const GUID& guid )
	{
		m_p = new DBPROPSET;
		m_bOwnsPropSet = true;
		SetSize( ulSize );
		SetGUID( guid );
	}

	//--------------------------------------------------------------------------------
	CDBPropSet::~CDBPropSet()
	{
		Free();
		if( m_bOwnsPropSet )
		{
			delete m_p;
		}
	}

	//--------------------------------------------------------------------------------
	void CDBPropSet::SetGUID( const GUID& RefGUID )
	{
		m_p->guidPropertySet = RefGUID;
	}

	//--------------------------------------------------------------------------------
	void CDBPropSet::SetSize( unsigned long ulSize )
	{
		Free();
		m_p->cProperties = ulSize;
		Alloc();
	}

	//--------------------------------------------------------------------------------
	void CDBPropSet::Alloc( void )
	{
		CComPtr< IMalloc > pIMalloc;
		m_Helper.GetMalloc( 1, reinterpret_cast<void**>( &pIMalloc ) );
		m_p->rgProperties = reinterpret_cast<DBPROP*>( pIMalloc->Alloc( sizeof( DBPROP ) * m_p->cProperties ) );
	}

	//--------------------------------------------------------------------------------
	void CDBPropSet::Free( void )
	{
		if( m_p->rgProperties )
		{
			CComPtr< IMalloc > pIMalloc;
			m_Helper.GetMalloc( 1, reinterpret_cast<void**>( &pIMalloc ) );
			for( unsigned long iProp = 0; iProp < m_p->cProperties; iProp++ )
			{
				VariantClear( reinterpret_cast<VARIANTARG*>( &( m_p->rgProperties[ iProp ].vValue ) ) );
			}
			pIMalloc->Free( m_p->rgProperties );
		}
	}

	//--------------------------------------------------------------------------------
	DBPROPSET* CDBPropSet::ptr( void )
	{
		return m_p;
	}

	//--------------------------------------------------------------------------------
	DBPROPSET** CDBPropSet::pptr( void )
	{
		return &m_p;
	}

	//--------------------------------------------------------------------------------
	bool CDBPropSet::GetProperty( unsigned long ulIndex, DBPROP& Property )
	{
		bool bResult = false;
		if( m_p && ulIndex < m_p->cProperties )
		{
			Property.colid = m_p->rgProperties[ ulIndex ].colid;
			Property.dwOptions = m_p->rgProperties[ ulIndex ].dwOptions;
			Property.dwPropertyID = m_p->rgProperties[ ulIndex ].dwPropertyID;
			Property.dwStatus = m_p->rgProperties[ ulIndex ].dwStatus;
			VariantCopy( reinterpret_cast<VARIANTARG*>( &Property.vValue ), reinterpret_cast<const VARIANTARG*>( &m_p->rgProperties[ ulIndex ].vValue ) );
			bResult = true;
		}
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDBPropSet::SetProperty( unsigned long ulIndex, const DBPROP& Property )
	{
		bool bResult = false;
		if( m_p && ulIndex < m_p->cProperties )
		{
			m_p->rgProperties[ ulIndex ].colid = Property.colid;
			m_p->rgProperties[ ulIndex ].dwOptions = Property.dwOptions;
			m_p->rgProperties[ ulIndex ].dwPropertyID = Property.dwPropertyID;
			m_p->rgProperties[ ulIndex ].dwStatus = Property.dwStatus;
			VariantCopy( reinterpret_cast<VARIANTARG*>( &m_p->rgProperties[ ulIndex ].vValue ), reinterpret_cast<const VARIANTARG*>( &Property.vValue ) );
			bResult = true;
		}
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDBPropSet::SetPropertyValue( unsigned long ulIndex, bool bValue )
	{
		bool bResult = false;
		if( m_p && ulIndex < m_p->cProperties )
		{
			m_p->rgProperties[ ulIndex ].vValue.boolVal = ( bValue ? Variant_True : Variant_False );
			bResult = true;
		}
		return bResult;
	}

	//--------------------------------------------------------------------------------
	CDBInitializationPropSet::CDBInitializationPropSet() : CDBPropSet()
	{
	}

	//--------------------------------------------------------------------------------
	CDBInitializationPropSet::~CDBInitializationPropSet()
	{
	}
	
	//--------------------------------------------------------------------------------
	bool CDBInitializationPropSet::SetCacheAuthentication( bool bAllowedToCache )
	{
		return SetPropertyValue( 0, bAllowedToCache );
	}

	//--------------------------------------------------------------------------------
	void CDBInitializationPropSet::Initialize( void )
	{
		CDBPropSet::Initialize( 24, DBPROPSET_DBINIT );

		{	//Cache Authentication
			DBPROP Auth_Cache_Authinfo;
			Auth_Cache_Authinfo.dwPropertyID = DBPROP_AUTH_CACHE_AUTHINFO;
			Auth_Cache_Authinfo.dwOptions = DBPROPOPTIONS_OPTIONAL;
			Auth_Cache_Authinfo.dwStatus = DBPROPSTATUS_OK;
			Auth_Cache_Authinfo.colid = DB_NULLID;
			Auth_Cache_Authinfo.vValue.vt = VT_BOOL;
			SetProperty( 0, Auth_Cache_Authinfo );
		}

		{
			DBPROP Auth_Encrypt_Password;
			Auth_Encrypt_Password.dwPropertyID = DBPROP_AUTH_ENCRYPT_PASSWORD;
			Auth_Encrypt_Password.dwOptions = DBPROPOPTIONS_OPTIONAL;
			Auth_Encrypt_Password.dwStatus = DBPROPSTATUS_OK;
			Auth_Encrypt_Password.colid = DB_NULLID;
			Auth_Encrypt_Password.vValue.vt = VT_BOOL;
			SetProperty( 1, Auth_Encrypt_Password );
		}

		{
			DBPROP Auth_Integrated;
			Auth_Integrated.dwPropertyID = DBPROP_AUTH_INTEGRATED;
			Auth_Integrated.dwOptions = DBPROPOPTIONS_OPTIONAL;
			Auth_Integrated.dwStatus = DBPROPSTATUS_OK;
			Auth_Integrated.colid = DB_NULLID;
			Auth_Integrated.vValue.vt = VT_BSTR;
			SetProperty( 2, Auth_Integrated );
		}

		{
			DBPROP Auth_Mask_Password;
			Auth_Mask_Password.dwPropertyID = DBPROP_AUTH_MASK_PASSWORD;
			Auth_Mask_Password.dwOptions = DBPROPOPTIONS_OPTIONAL;
			Auth_Mask_Password.dwStatus = DBPROPSTATUS_OK;
			Auth_Mask_Password.colid = DB_NULLID;
			Auth_Mask_Password.vValue.vt = VT_BOOL;
			SetProperty( 3, Auth_Mask_Password );
		}

		{
			DBPROP Auth_Password;
			Auth_Password.dwPropertyID = DBPROP_AUTH_PASSWORD;
			Auth_Password.dwOptions = DBPROPOPTIONS_OPTIONAL;
			Auth_Password.dwStatus = DBPROPSTATUS_OK;
			Auth_Password.colid = DB_NULLID;
			Auth_Password.vValue.vt = VT_BSTR;
			SetProperty( 4, Auth_Password );
		}

		{
			DBPROP Auth_Persist_Encrypted;
			Auth_Persist_Encrypted.dwPropertyID = DBPROP_AUTH_PERSIST_ENCRYPTED;
			Auth_Persist_Encrypted.dwOptions = DBPROPOPTIONS_OPTIONAL;
			Auth_Persist_Encrypted.dwStatus = DBPROPSTATUS_OK;
			Auth_Persist_Encrypted.colid = DB_NULLID;
			Auth_Persist_Encrypted.vValue.vt = VT_BOOL;
			SetProperty( 5, Auth_Persist_Encrypted );
		}

		{
			DBPROP Auth_Persist_Sensitive_Authinfo;
			Auth_Persist_Sensitive_Authinfo.dwPropertyID = DBPROP_AUTH_PERSIST_SENSITIVE_AUTHINFO;
			Auth_Persist_Sensitive_Authinfo.dwOptions = DBPROPOPTIONS_OPTIONAL;
			Auth_Persist_Sensitive_Authinfo.dwStatus = DBPROPSTATUS_OK;
			Auth_Persist_Sensitive_Authinfo.colid = DB_NULLID;
			Auth_Persist_Sensitive_Authinfo.vValue.vt = VT_BOOL;
			SetProperty( 6, Auth_Persist_Sensitive_Authinfo );
		}

		{
			DBPROP Auth_Userid;
			Auth_Userid.dwPropertyID = DBPROP_AUTH_USERID;
			Auth_Userid.dwOptions = DBPROPOPTIONS_OPTIONAL;
			Auth_Userid.dwStatus = DBPROPSTATUS_OK;
			Auth_Userid.colid = DB_NULLID;
			Auth_Userid.vValue.vt = VT_BSTR;
			SetProperty( 7, Auth_Userid );
		}

		{
			DBPROP Init_Asych;
			Init_Asych.dwPropertyID = DBPROP_INIT_ASYNCH;
			Init_Asych.dwOptions = DBPROPOPTIONS_OPTIONAL;
			Init_Asych.dwStatus = DBPROPSTATUS_OK;
			Init_Asych.colid = DB_NULLID;
			Init_Asych.vValue.vt = VT_I4;
			SetProperty( 8, Init_Asych );
		}

		{
			DBPROP Init_Bindflags;
			Init_Bindflags.dwPropertyID = DBPROP_INIT_BINDFLAGS;
			Init_Bindflags.dwOptions = DBPROPOPTIONS_OPTIONAL;
			Init_Bindflags.dwStatus = DBPROPSTATUS_OK;
			Init_Bindflags.colid = DB_NULLID;
			Init_Bindflags.vValue.vt = VT_I4;
			SetProperty( 9, Init_Bindflags );
		}

		{
			DBPROP Init_Catalog;
			Init_Catalog.dwPropertyID = DBPROP_INIT_CATALOG;
			Init_Catalog.dwOptions = DBPROPOPTIONS_OPTIONAL;
			Init_Catalog.dwStatus = DBPROPSTATUS_OK;
			Init_Catalog.colid = DB_NULLID;
			Init_Catalog.vValue.vt = VT_BSTR;
			SetProperty( 10, Init_Catalog );
		}

		{
			DBPROP Init_Datasource;
			Init_Datasource.dwPropertyID = DBPROP_INIT_DATASOURCE;
			Init_Datasource.dwOptions = DBPROPOPTIONS_OPTIONAL;
			Init_Datasource.dwStatus = DBPROPSTATUS_OK;
			Init_Datasource.colid = DB_NULLID;
			Init_Datasource.vValue.vt = VT_BSTR;
			SetProperty( 10, Init_Datasource );
		}
	}

	/*
	//--------------------------------------------------------------------------------
	CDBPropSetArray::CDBPropSetArray()
	{
		m_p = 0;
		m_ulCount = 0;
	}

	//--------------------------------------------------------------------------------
	CDBPropSetArray::~CDBPropSetArray()
	{
		for( unsigned long iPropSet = 0; iPropSet < m_ulCount; iPropSet++ )
		{
			assert( ( m_p[ iPropSet ].cProperties == 0 ) || ( m_p[ iPropSet ].rgProperties != NULL ) );

			m_p[ iPropSet ].Free();
		}
		CCOHelper Helper;
		CComPtr< IMalloc > pIMalloc;
		Helper.GetMalloc( 1, reinterpret_cast<void**>( &pIMalloc ) );
		pIMalloc->Free( reinterpret_cast< DBPROPSET* >( m_p ) );
	}

	//--------------------------------------------------------------------------------
	DBPROPSET* CDBPropSetArray::ptr( void )
	{
		return reinterpret_cast< DBPROPSET* >( m_p );
	}

	//--------------------------------------------------------------------------------
	DBPROPSET** CDBPropSetArray::pptr( void )
	{
		return reinterpret_cast< DBPROPSET** >( &m_p );
	}

	//--------------------------------------------------------------------------------
	unsigned long* CDBPropSetArray::pCount( void )
	{
		return &m_ulCount;
	}
*/
}//nsWin32

