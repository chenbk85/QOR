//WinQLApplication.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "SystemQOR.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: saved in member for later use" );
#include "WinQL/System/FileSystem/WinQLCRTFile.h"
__QCMP_WARNING_POP
#include "WinQL/Application/WinQLApplication.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_OCLASS_LUID( CWin32Application );

	CWin32Application::refType g_Win32Application( 0 );

	//--------------------------------------------------------------------------------
	CWin32Application::refType CWin32Application::TheWin32Application( void )
	{
		return g_Win32Application;
	}

	//--------------------------------------------------------------------------------
	CWin32Application::CWin32Application() :
		m_Role( eOffice )
	{
		g_Win32Application.Attach( this, false );
	}

	//--------------------------------------------------------------------------------
	CWin32Application::~CWin32Application()
	{
		g_Win32Application.Detach();
	}

	//--------------------------------------------------------------------------------
	CConsole::refType CWin32Application::Console( void )
	{
		return CConsole::TheWin32Console();
	}

	//--------------------------------------------------------------------------------
	void CWin32Application::SetRole( CWin32Application::eRole Role )
	{
		m_Role = Role;
	}

	//--------------------------------------------------------------------------------
	CWin32Application::eRole CWin32Application::GetRole( void )
	{
		return m_Role;
	}

	//--------------------------------------------------------------------------------
	bool CWin32Application::SetAutoRestart( const CWString& strCommandLine, unsigned long ulFlags )
	{
		if( m_Restart.IsNull() )
		{
			m_Restart.Attach( new CAppRestart( strCommandLine, ulFlags ), true );
			return true;
		}
		return false;
	}

	//--------------------------------------------------------------------------------
	void CWin32Application::ClearAutoRestart( void )
	{
		m_Restart.Dispose();
	}

	//--------------------------------------------------------------------------------
	bool CWin32Application::SetAutoRecovery( unsigned long ulPingIntervalMilliseconds )
	{
		if( m_Recovery.IsNull() )
		{
			m_Recovery.Attach( new CAppRecovery( ulPingIntervalMilliseconds ), true );
			return true;
		}
		return false;
	}

	//--------------------------------------------------------------------------------
	void CWin32Application::ClearAutoRecovery( void )
	{
		m_Recovery.Dispose();
	}

	/*
	//--------------------------------------------------------------------------------
	bool CBaseApplication::GetStartupInfo( void )
	{
		bool bStartupInfo = true;

        __QCMP_TRY
		{
			//GetStartupInfo can throw unspecified SEH
            ThisProcess()->GetStartupInfo( &m_StartupInfo );
        }
		__QCMP_EXCEPT( nsWin32::eEXCEPTION_EXECUTE_HANDLER ) 
		{
            bStartupInfo = false;
        }

		return bStartupInfo;
	}
	*/

}//nsWin32

