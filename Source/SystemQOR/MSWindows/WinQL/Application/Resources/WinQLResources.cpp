//WinQLResources.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/Resources/WinQLResources.h"
#include "WinQAPI/Kernel32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CResourceUpdate );

	//------------------------------------------------------------------------------
	CResourceUpdate::CResourceUpdate( const TCHAR* pFileName, bool bDeleteExistingResources )
	{
		_WINQ_FCONTEXT( "CResourceUpdate::CResourceUpdate" );
		m_fDiscard = false;
		__QOR_PROTECT
		{
			m_Handle = CKernel32::BeginUpdateResource( pFileName, bDeleteExistingResources ? TRUE : FALSE );
		}__QOR_ENDPROTECT
	}

	//------------------------------------------------------------------------------
	CResourceUpdate::~CResourceUpdate()
	{
		_WINQ_FCONTEXT( "CResourceUpdate::~CResourceUpdate" );
		__QOR_PROTECT
		{
			CKernel32::EndUpdateResource( m_Handle.Use(), m_fDiscard ? TRUE : FALSE );
		}__QOR_ENDPROTECT
	}

	//------------------------------------------------------------------------------
	bool CResourceUpdate::Update( const TCHAR* lpType, const TCHAR* lpName, unsigned short wLanguage, void* lpData, unsigned long cbData )
	{
		_WINQ_FCONTEXT( "CResourceUpdate::Update" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::UpdateResource( m_Handle.Use(), lpType, lpName, wLanguage, lpData, cbData ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	void CResourceUpdate::Discard()
	{
		_WINQ_FCONTEXT( "CResourceUpdate::Discard" );
		m_fDiscard = true;
		delete this;
	}

	//-- Resource Helper------------------------------------------------------------

	__QOR_IMPLEMENT_OCLASS_LUID( CResourceHelper );

	//------------------------------------------------------------------------------
	CResourceHelper::CResourceHelper()
	{
		_WINQ_FCONTEXT( "CResourceHelper::CResourceHelper" );
	}

	//------------------------------------------------------------------------------
	CResourceHelper::CResourceHelper( const CResourceHelper& src )
	{
		_WINQ_FCONTEXT( "CResourceHelper::CResourceHelper" );
		*this = src;
	}

	//------------------------------------------------------------------------------
	CResourceHelper& CResourceHelper::operator = ( const CResourceHelper& src )
	{
		_WINQ_FCONTEXT( "CResourceHelper::operator =" );

		if( &src != this )
		{
		}

		return *this;
	}

	//------------------------------------------------------------------------------
	CResourceHelper::~CResourceHelper()
	{
		_WINQ_FCONTEXT( "CResourceHelper::~CResourceHelper" );
	}

	//------------------------------------------------------------------------------
	bool CResourceHelper::EnumLanguages( ModuleHandle hModule, const TCHAR* lpType, const TCHAR* lpName, nsWin32::fpEnumResLangProc lpEnumFunc, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CResourceHelper::EnumLanguages" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::EnumResourceLanguages( reinterpret_cast< ::HMODULE >( hModule ), lpType, lpName, reinterpret_cast< ::ENUMRESLANGPROC >( lpEnumFunc ), lParam ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CResourceHelper::EnumLanguagesEx( ModuleHandle hModule, const TCHAR* lpType, const TCHAR* lpName, nsWin32::fpEnumResLangProc lpEnumFunc, Cmp_long_ptr lParam, unsigned long dwFlags, unsigned short LangId )
	{
		_WINQ_FCONTEXT( "CResourceHelper::EnumLanguagesEx" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::EnumResourceLanguagesEx( reinterpret_cast< ::HMODULE >( hModule ), lpType, lpName, reinterpret_cast< ::ENUMRESLANGPROC >( lpEnumFunc ), lParam, dwFlags, LangId ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CResourceHelper::EnumNames( ModuleHandle hModule, const TCHAR* lpszType, nsWin32::fpEnumResNameProc lpEnumFunc, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CResourceHelper::EnumNames" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::EnumResourceNames( reinterpret_cast< ::HMODULE >( hModule ), lpszType, reinterpret_cast< ::ENUMRESNAMEPROC >( lpEnumFunc ), lParam ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CResourceHelper::EnumNamesEx( ModuleHandle hModule, const TCHAR* lpszType, nsWin32::fpEnumResNameProc lpEnumFunc, Cmp_long_ptr lParam, unsigned long dwFlags, unsigned short LangId )
	{
		_WINQ_FCONTEXT( "CResourceHelper::EnumNamesEx" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::EnumResourceNamesEx( reinterpret_cast< ::HMODULE >( hModule ), lpszType, reinterpret_cast< ::ENUMRESNAMEPROC >( lpEnumFunc ), lParam, dwFlags, LangId ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CResourceHelper::EnumTypes( ModuleHandle hModule, nsWin32::fpEnumResTypeProc lpEnumFunc, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CResourceHelper::EnumTypes" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::EnumResourceTypes( reinterpret_cast< ::HMODULE >( hModule ), reinterpret_cast< ::ENUMRESTYPEPROC >( lpEnumFunc ), lParam ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CResourceHelper::EnumTypesEx( ModuleHandle hModule, nsWin32::fpEnumResTypeProc lpEnumFunc, Cmp_long_ptr lParam, unsigned long dwFlags, unsigned short LangId )
	{
		_WINQ_FCONTEXT( "CResourceHelper::EnumTypesEx" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::EnumResourceTypesEx( reinterpret_cast< ::HMODULE >( hModule ), reinterpret_cast< ::ENUMRESTYPEPROC >( lpEnumFunc ), lParam, dwFlags, LangId ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	ResourceHandle CResourceHelper::Find( ModuleHandle hModule, const TCHAR* lpName, const TCHAR* lpType )
	{
		_WINQ_FCONTEXT( "CResourceHelper::Find" );
		ResourceHandle Result = 0;
		__QOR_PROTECT
		{
			Result = reinterpret_cast< ResourceHandle >( CKernel32::FindResource( reinterpret_cast< ::HMODULE >( hModule ), lpName, lpType ) );
		}__QOR_ENDPROTECT
		return Result;
	}

	//------------------------------------------------------------------------------
	ResourceHandle CResourceHelper::FindEx( ModuleHandle hModule, const TCHAR* lpType, const TCHAR* lpName, unsigned short wLanguage )
	{
		_WINQ_FCONTEXT( "CResourceHelper::FindEx" );
		ResourceHandle Result = 0;
		__QOR_PROTECT
		{
			Result = reinterpret_cast< ResourceHandle >( CKernel32::FindResourceEx( reinterpret_cast< ::HMODULE >( hModule ), lpType, lpName, wLanguage ) );
		}__QOR_ENDPROTECT
		return Result;
	}

	//------------------------------------------------------------------------------
	bool CResourceHelper::Free( void* hglbResource )
	{
		_WINQ_FCONTEXT( "CResourceHelper::Free" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::FreeResource( hglbResource ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	void* CResourceHelper::Load( ModuleHandle hModule, ResourceHandle hResInfo )
	{
		_WINQ_FCONTEXT( "CResourceHelper::Load" );
		HGLOBAL Result = 0;
		__QOR_PROTECT
		{
			Result = CKernel32::LoadResource( reinterpret_cast< ::HMODULE >( hModule ), reinterpret_cast< ::HRSRC >( hResInfo ) );
		}__QOR_ENDPROTECT
		return Result;
	}

	//------------------------------------------------------------------------------
	void* CResourceHelper::Lock( void* hResData )
	{
		_WINQ_FCONTEXT( "CResourceHelper::Lock" );
		LPVOID pResult = 0;
		__QOR_PROTECT
		{
			pResult = CKernel32::LockResource( hResData );
		}__QOR_ENDPROTECT
		return pResult;
	}

	//------------------------------------------------------------------------------
	unsigned long CResourceHelper::Size( ModuleHandle hModule, ResourceHandle hResInfo )
	{
		_WINQ_FCONTEXT( "CResourceHelper::Size" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::SizeofResource( reinterpret_cast< ::HMODULE >( hModule ), reinterpret_cast< ::HRSRC >( hResInfo ) );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CResourceHelper::VerLanguageNameT( unsigned long wLang, TCHAR* szLang, unsigned long nSize )
	{
		_WINQ_FCONTEXT( "CResourceHelper::VerLanguageName" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::VerLanguageName( wLang, szLang, nSize );
		}__QOR_ENDPROTECT
		return dwResult;
	}

}//nsWin32
