//WinQLFLS.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/Threading/WinQLFLS.h"
#include "WinQAPI/Kernel32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CFLSHelper );

	//--------------------------------------------------------------------------------
	CFLSHelper::CFLSHelper()
	{
		_WINQ_FCONTEXT( "CFLSHelper::CFLSHelper" );
	}

	//--------------------------------------------------------------------------------
	CFLSHelper::CFLSHelper( const CFLSHelper& src )
	{
		_WINQ_FCONTEXT( "CFLSHelper::CFLSHelper" );
		*this = src;
	}

	//--------------------------------------------------------------------------------
	CFLSHelper::~CFLSHelper()
	{
		_WINQ_FCONTEXT( "CFLSHelper::~CFLSHelper" );
	}
		
	//--------------------------------------------------------------------------------
	CFLSHelper& CFLSHelper::operator = ( const CFLSHelper& src )
	{
		_WINQ_FCONTEXT( "CFLSHelper::operator =" );
		if( &src != this )
		{
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	unsigned long CFLSHelper::Alloc( nsWin32::PFLS_CALLBACK_FUNCTION lpCallback )
	{
		_WINQ_FCONTEXT( "CFLSHelper::Alloc" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::FlsAlloc( reinterpret_cast< ::PFLS_CALLBACK_FUNCTION >( lpCallback ) );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	bool CFLSHelper::Free( unsigned long dwFlsIndex )
	{
		_WINQ_FCONTEXT( "CFLSHelper::Free" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::FlsFree( dwFlsIndex ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void* CFLSHelper::GetValue( unsigned long dwFlsIndex )
	{
		_WINQ_FCONTEXT( "CFLSHelper::GetValue" );
		PVOID pResult = 0;
		__QOR_PROTECT
		{
			pResult = CKernel32::FlsGetValue( dwFlsIndex );
		}__QOR_ENDPROTECT
		return pResult;
	}

	//--------------------------------------------------------------------------------
	bool CFLSHelper::SetValue( unsigned long dwFlsIndex, void* lpFlsData )
	{
		_WINQ_FCONTEXT( "CFLSHelper::SetValue" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::FlsSetValue( dwFlsIndex, lpFlsData ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}
		
}//nsWin32
