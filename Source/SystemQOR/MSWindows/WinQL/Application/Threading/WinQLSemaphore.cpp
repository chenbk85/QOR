//WinQLSemaphore.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/Threading/WinQLSemaphore.h"
#include "WinQL/Application/Threading/WinQLWait.h"
#include "WinQAPI/Kernel32.h"

//------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CSemaphore );

	//--------------------------------------------------------------------------------
	CSemaphore::CSemaphore( CSyncHandle& ExistingHandle ) : m_Handle( ExistingHandle )
	{
		_WINQ_FCONTEXT( "CSemaphore::CSemaphore" );
	}

	//--------------------------------------------------------------------------------
	CSemaphore::CSemaphore( nsWin32::LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, long lInitialCount, long lMaximumCount, const TCHAR* lpName, unsigned long dwFlags, unsigned long dwDesiredAccess, bool* pbAlreadyExists )
	{
		_WINQ_FCONTEXT( "CSemaphore::CSemaphore" );
		__QOR_PROTECT
		{					
			static DWORD dwMajorVersion = ( DWORD )( LOBYTE( LOWORD( CKernel32::GetVersion() ) ) );
			bool bAlreadyExists = false;
#			if ( _WIN32_WINNT >= 0x0600 )					
			if( dwMajorVersion >= 6 )
			{
				m_Handle = CKernel32::CreateSemaphoreEx( reinterpret_cast< ::LPSECURITY_ATTRIBUTES >( lpSemaphoreAttributes ), lInitialCount, lMaximumCount, lpName, dwFlags, dwDesiredAccess, bAlreadyExists );				
			}
			else
			{
#			else
				__QCMP_UNREF( dwFlags );
				__QCMP_UNREF( dwDesiredAccess );
#			endif
				m_Handle = CKernel32::CreateSemaphore( reinterpret_cast< ::LPSECURITY_ATTRIBUTES >( lpSemaphoreAttributes ), lInitialCount, lMaximumCount, lpName, bAlreadyExists );
#			if ( _WIN32_WINNT >= 0x0600 )
			}
#			endif

			m_Handle.SetCanBeSignaled( true );

			if( pbAlreadyExists != 0 )
			{
				*pbAlreadyExists = bAlreadyExists;
			}

		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CSemaphore::CSemaphore( const TCHAR* lpName, unsigned long dwDesiredAccess, bool bInheritHandle )
	{
		_WINQ_FCONTEXT( "CSemaphore::CSemaphore" );
		__QOR_PROTECT
		{
			m_Handle = CKernel32::OpenSemaphore( dwDesiredAccess, bInheritHandle ? TRUE : FALSE, lpName );
			m_Handle.SetCanBeSignaled( true );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CSemaphore::~CSemaphore()
	{
		_WINQ_FCONTEXT( "CSemaphore::~CSemaphore" );
	}
		
	//--------------------------------------------------------------------------------
	bool CSemaphore::Release( long lReleaseCount, long* lpPreviousCount )
	{
		_WINQ_FCONTEXT( "CSemaphore::Release" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::ReleaseSemaphore( m_Handle.Use(), lReleaseCount, lpPreviousCount ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//protected:

	//--------------------------------------------------------------------------------
	nsCodeQOR::CTCRef< CSyncHandle > CSemaphore::Handle() const
	{
		nsCodeQOR::CTCRef< CSyncHandle > RefHandle( const_cast< CSyncHandle* >( &m_Handle ) );
		return RefHandle;
	}

	//--------------------------------------------------------------------------------
	unsigned long CSemaphore::Wait( unsigned long dwMilliseconds )
	{
		_WINQ_FCONTEXT( "CSemaphore::Wait" );
		unsigned long dwResult = 0;
		__QOR_PROTECT
		{
			CWaitHelper WaitHelper;
			dwResult = WaitHelper.WaitForSingleObject( m_Handle, dwMilliseconds );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	CSessionSemaphore::CSessionSemaphore( const TCHAR* lpName, SECURITY_ATTRIBUTES* pSemaphoreAttributes, long lInitialCount, long lMaximumCount, unsigned long dwDesiredAccess ) : CSemaphore( pSemaphoreAttributes, lInitialCount, lMaximumCount, SessionName( lpName ), 0, dwDesiredAccess )
	{
		_WINQ_SFCONTEXT( "CSessionSemaphore::CSessionSemaphore" );
	}

	//--------------------------------------------------------------------------------
	CTString CSessionSemaphore::SessionName( const TCHAR* lpName )
	{
		_WINQ_SFCONTEXT( "CSessionSemaphore::SessionName" );
		CTString NameBuff( _TXT( "Local\\" ) );
		NameBuff.Append( lpName );
		return NameBuff;
	}



	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CSessionSemaphoreLock );

	//--------------------------------------------------------------------------------
	CSessionSemaphoreLock::CSessionSemaphoreLock( const TCHAR* lpName, SECURITY_ATTRIBUTES* pSemaphoreAttributes, long lInitialCount, long lMaximumCount, unsigned long dwDesiredAccess ) : m_Semaphore( lpName, pSemaphoreAttributes, lInitialCount, lMaximumCount, dwDesiredAccess )
	{
		_WINQ_FCONTEXT( "CSessionSemaphoreLock::CSessionSemaphoreLock" );
		m_nPreviousCount = lInitialCount;
	}

	//--------------------------------------------------------------------------------
	CSessionSemaphoreLock::~CSessionSemaphoreLock()
	{
		_WINQ_FCONTEXT( "CSessionSemaphoreLock::~CSessionSemaphoreLock" );
	}

	//--------------------------------------------------------------------------------
	unsigned long CSessionSemaphoreLock::Lock()
	{
		_WINQ_FCONTEXT( "CSessionSemaphoreLock::Lock" );
		unsigned long dwResult = m_Semaphore.Wait( nsWin32::Infinite );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	bool CSessionSemaphoreLock::Unlock()
	{
		_WINQ_FCONTEXT( "CSessionSemaphoreLock::Unlock" );
		bool bResult = m_Semaphore.Release( 1, &m_nPreviousCount );
		return bResult;
	};



	//--------------------------------------------------------------------------------
	CGlobalSemaphore::CGlobalSemaphore( const TCHAR* lpName, SECURITY_ATTRIBUTES* pSemaphoreAttributes, long lInitialCount, long lMaximumCount, unsigned long dwDesiredAccess  ) : CSemaphore( pSemaphoreAttributes, lInitialCount, lMaximumCount, GlobalName( lpName ), 0, dwDesiredAccess )
	{
		_WINQ_FCONTEXT( "CGlobalSemaphore::CGlobalSemaphore" );
	}

	//--------------------------------------------------------------------------------
	CTString CGlobalSemaphore::GlobalName( const TCHAR* lpName )
	{
		_WINQ_SFCONTEXT( "CSessionSemaphore::GlobalName" );
		CTString NameBuff( _TXT( "Global\\" ) );
		NameBuff.Append( lpName );
		return NameBuff;
	}


	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CGlobalSemaphoreLock );

	//--------------------------------------------------------------------------------
	CGlobalSemaphoreLock::CGlobalSemaphoreLock( const TCHAR* lpName, SECURITY_ATTRIBUTES* pSemaphoreAttributes, long lInitialCount, long lMaximumCount, unsigned long dwDesiredAccess ) : m_Semaphore( lpName, pSemaphoreAttributes, lInitialCount, lMaximumCount, dwDesiredAccess )
	{
		_WINQ_FCONTEXT( "CGlobalSemaphoreLock::CGlobalSemaphoreLock" );
		m_nPreviousCount = lInitialCount;
	}

	//--------------------------------------------------------------------------------
	CGlobalSemaphoreLock::~CGlobalSemaphoreLock()
	{
		_WINQ_FCONTEXT( "CGlobalSemaphoreLock::~CGlobalSemaphoreLock" );
	}

	//--------------------------------------------------------------------------------
	unsigned long CGlobalSemaphoreLock::Lock()
	{
		_WINQ_FCONTEXT( "CGlobalSemaphoreLock::Lock" );
		unsigned long dwResult = m_Semaphore.Wait( nsWin32::Infinite );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	bool CGlobalSemaphoreLock::Unlock()
	{
		_WINQ_FCONTEXT( "CGlobalSemaphoreLock::Unlock" );
		bool bResult = m_Semaphore.Release( 1, &m_nPreviousCount );
		return bResult;
	};




	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CSemaphoreLock );

	//--------------------------------------------------------------------------------
	CSemaphoreLock::CSemaphoreLock( CSemaphore& Semaphore ) : m_Semaphore( Semaphore )
	{
		_WINQ_FCONTEXT( "CSemaphoreLock::CSemaphoreLock" );
	}

	//--------------------------------------------------------------------------------
	CSemaphoreLock::~CSemaphoreLock()
	{
		_WINQ_FCONTEXT( "CSemaphoreLock::~CSemaphoreLock" );
	}

	//--------------------------------------------------------------------------------
	unsigned long CSemaphoreLock::Lock()
	{
		_WINQ_FCONTEXT( "CSemaphoreLock::Lock" );
		unsigned long dwResult = m_Semaphore.Wait( nsWin32::Infinite );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	bool CSemaphoreLock::Unlock( long* plPreviousCount )
	{
		_WINQ_FCONTEXT( "CSemaphoreLock::Unlock" );
		long lPreviousCount = 0;
		bool bResult = m_Semaphore.Release( 1, &lPreviousCount );
		if( plPreviousCount != 0 )
		{
			*plPreviousCount = lPreviousCount;
		}
		return bResult;
	}

}//nsWin32
