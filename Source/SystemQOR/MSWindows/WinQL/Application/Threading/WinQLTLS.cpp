//WinQLTLS.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/Threading/WinQLTLS.h"
#include "WinQAPI/Kernel32.h"

//------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CTLSHelper );

	//------------------------------------------------------------------------------
	CTLSHelper::CTLSHelper()
	{
		_WINQ_FCONTEXT( "CTLSHelper::CTLSHelper" );
	}

	//------------------------------------------------------------------------------
	CTLSHelper::~CTLSHelper()
	{
		_WINQ_FCONTEXT( "CTLSHelper::~CTLSHelper" );
	}

	//------------------------------------------------------------------------------
	CTLSHelper::CTLSHelper( const CTLSHelper& src )
	{
		_WINQ_FCONTEXT( "CTLSHelper::CTLSHelper" );
		*this = src;
	}

	//------------------------------------------------------------------------------
	CTLSHelper& CTLSHelper::operator = ( const CTLSHelper& src )
	{
		_WINQ_FCONTEXT( "CTLSHelper::operator =" );
		return *this;
	}

	//------------------------------------------------------------------------------
	unsigned long CTLSHelper::Alloc()
	{
		_WINQ_FCONTEXT( "CTLSHelper::Alloc" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::TlsAlloc();
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//------------------------------------------------------------------------------
	bool CTLSHelper::Free( unsigned long dwTlsIndex )
	{
		_WINQ_FCONTEXT( "CTLSHelper::Free" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::TlsFree( dwTlsIndex ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	void* CTLSHelper::GetValue( unsigned long dwTlsIndex )
	{
		_WINQ_FCONTEXT( "CTLSHelper::GetValue" );
		LPVOID pResult = 0;
		__QOR_PROTECT
		{
			pResult = CKernel32::TlsGetValue( dwTlsIndex );
		}__QOR_ENDPROTECT
		return pResult;
	}

	//------------------------------------------------------------------------------
	bool CTLSHelper::SetValue( unsigned long dwTlsIndex, void* lpTlsValue )
	{
		_WINQ_FCONTEXT( "CTLSHelper::SetValue" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::TlsSetValue( dwTlsIndex, lpTlsValue ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

}//nsWin32
