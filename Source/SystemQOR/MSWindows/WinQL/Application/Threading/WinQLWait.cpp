//WinQLWait.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/Threading/WinQLWait.h"
#include "WinQAPI/Kernel32.h"
#include "WinQAPI/User32.h"

//------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CWaitHelper );

	//------------------------------------------------------------------------------
	CWaitHelper::CWaitHelper()
	{
		_WINQ_FCONTEXT( "CWaitHelper::CWaitHelper" );
	}

	//------------------------------------------------------------------------------
	CWaitHelper::CWaitHelper( const CWaitHelper& src )
	{
		_WINQ_FCONTEXT( "CWaitHelper::CWaitHelper" );
		*this = src;
	}

	//------------------------------------------------------------------------------
	CWaitHelper& CWaitHelper::operator = ( const CWaitHelper& src )
	{
		_WINQ_FCONTEXT( "CWaitHelper::operator =" );
		return *this;
	}
	//------------------------------------------------------------------------------
	CWaitHelper::~CWaitHelper()
	{
		_WINQ_FCONTEXT( "CWaitHelper::~CWaitHelper" );
	}

	//------------------------------------------------------------------------------
	bool CWaitHelper::RegisterWaitForSingleObject( void** phNewWaitObject, CSyncHandle& Object, nsWin32::WAITORTIMERCALLBACK Callback, void* Context, unsigned long dwMilliseconds, unsigned long dwFlags )
	{
		_WINQ_FCONTEXT( "CWaitHelper::RegisterWaitForSingleObject" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::RegisterWaitForSingleObject( phNewWaitObject, Object.Use(), reinterpret_cast< ::WAITORTIMERCALLBACK >( Callback ), Context, dwMilliseconds, dwFlags ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	unsigned long CWaitHelper::SignalObjectAndWait( CSyncHandle& ObjectToSignal, CSyncHandle& ObjectToWaitOn, unsigned long dwMilliseconds, bool bAlertable )
	{
		_WINQ_FCONTEXT( "CWaitHelper::SignalObjectAndWait" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::SignalObjectAndWait( ObjectToSignal.Use(), ObjectToWaitOn.Use(), dwMilliseconds, bAlertable ? TRUE : FALSE );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//------------------------------------------------------------------------------
	bool CWaitHelper::UnregisterWait( void* WaitHandle )
	{
		_WINQ_FCONTEXT( "CWaitHelper::UnregisterWait" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::UnregisterWait( WaitHandle ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CWaitHelper::UnregisterWaitEx( void* WaitHandle, void* CompletionEvent )
	{
		_WINQ_FCONTEXT( "CWaitHelper::UnregisterWaitEx" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::UnregisterWaitEx( WaitHandle, CompletionEvent ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	unsigned long CWaitHelper::WaitForMultipleObjects( CSyncHandleSet& Handles, bool bWaitAll, unsigned long dwMilliseconds )
	{
		_WINQ_FCONTEXT( "CWaitHelper::WaitForMultipleObjects" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::WaitForMultipleObjects( Handles.Count(), Handles.Use(), bWaitAll ? TRUE : FALSE, dwMilliseconds );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//------------------------------------------------------------------------------
	unsigned long CWaitHelper::WaitForMultipleObjectsEx( CSyncHandleSet& Handles, bool bWaitAll, unsigned long dwMilliseconds, bool bAlertable )
	{
		_WINQ_FCONTEXT( "CWaitHelper::WaitForMultipleObjectsEx" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::WaitForMultipleObjectsEx( Handles.Count(), Handles.Use(), bWaitAll ? TRUE : FALSE, dwMilliseconds, bAlertable ? TRUE : FALSE );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//------------------------------------------------------------------------------
	unsigned long CWaitHelper::WaitForSingleObject( CSyncHandle& Handle, unsigned long dwMilliseconds )
	{
		_WINQ_FCONTEXT( "CWaitHelper::WaitForSingleObject" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::WaitForSingleObject( Handle.Use(), dwMilliseconds );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//------------------------------------------------------------------------------
	unsigned long CWaitHelper::WaitForSingleObjectEx( CSyncHandle& Handle, unsigned long dwMilliseconds, bool bAlertable )
	{
		_WINQ_FCONTEXT( "CWaitHelper::WaitForSingleObjectEx" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::WaitForSingleObjectEx( Handle.Use(), dwMilliseconds, bAlertable ? TRUE : FALSE );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//-- Message Wait Helper----------------------------------------------------------

	__QOR_IMPLEMENT_OCLASS_LUID( CMsgWaitHelper );

	//--------------------------------------------------------------------------------
	CMsgWaitHelper::CMsgWaitHelper() : m_Library( CUser32::Instance() )
	{
		_WINQ_FCONTEXT( "CMsgWaitHelper::CMsgWaitHelper" );

	}

	//--------------------------------------------------------------------------------
	CMsgWaitHelper::~CMsgWaitHelper()
	{
		_WINQ_FCONTEXT( "CMsgWaitHelper::~CMsgWaitHelper" );
	}

	//--------------------------------------------------------------------------------
	unsigned long CMsgWaitHelper::Wait( CSyncHandleSet& Handles, bool bWaitAll, unsigned long dwMilliseconds, unsigned long dwWakeMask )
	{
		_WINQ_FCONTEXT( "CMsgWaitHelper::Wait" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = m_Library.MsgWaitForMultipleObjects( Handles.Count(), reinterpret_cast< HANDLE* >( Handles.Use() ), bWaitAll ? TRUE : FALSE, dwMilliseconds, dwWakeMask );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CMsgWaitHelper::WaitEx( CSyncHandleSet& Handles, unsigned long dwMilliseconds, unsigned long dwWakeMask, unsigned long dwFlags )
	{
		_WINQ_FCONTEXT( "CMsgWaitHelper::WaitEx" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = m_Library.MsgWaitForMultipleObjectsEx( Handles.Count(), Handles.Use(), dwMilliseconds, dwWakeMask, dwFlags );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CRegisteredWait );

	CWaitHelper CRegisteredWait::s_WaitHelper;
/*	Can wait for
Change notification
Console input
Event
Memory resource notification
Mutex
Process
Semaphore
Thread
Waitable timer
*/
	//--------------------------------------------------------------------------------
	CRegisteredWait::CRegisteredWait( CSyncHandle& Object, unsigned long dwMilliseconds, unsigned long dwFlags, void* pCompletionEvent, bool* pResult ) : m_pCompletionEvent( pCompletionEvent )
	,	m_pResult( pResult )
	{
		_WINQ_FCONTEXT( "CRegisteredWait::CRegisteredWait" );
		m_bRegistered = s_WaitHelper.RegisterWaitForSingleObject( &m_pWaitHandle, Object, &CRegisteredWait::StaticCallback, this, dwMilliseconds, dwFlags );
	}

	//--------------------------------------------------------------------------------
	CRegisteredWait::~CRegisteredWait()
	{
		_WINQ_FCONTEXT( "CRegisteredWait::~CRegisteredWait" );
		if( m_bRegistered )
		{
			bool bResult = s_WaitHelper.UnregisterWaitEx( m_pWaitHandle, m_pCompletionEvent );
			if( m_pResult )
			{
				*m_pResult = bResult;
			}
		}
	}

	//--------------------------------------------------------------------------------
	void CRegisteredWait::SetCompletionEvent( void* pCompletionEvent )
	{
		_WINQ_FCONTEXT( "CRegisteredWait::SetCompletionEvent" );
		m_pCompletionEvent = pCompletionEvent;
	}

	//--------------------------------------------------------------------------------
	void __stdcall CRegisteredWait::StaticCallback( void* pData1 , unsigned char ucData2 )
	{
		_WINQ_SFCONTEXT( "CRegisteredWait::StaticCallback" );
		CRegisteredWait* pWait = reinterpret_cast< CRegisteredWait* >( pData1 );
		if( pWait )
		{
			pWait->InstanceCallback( ucData2 );
		}
	}

	//--------------------------------------------------------------------------------
	void CRegisteredWait::InstanceCallback( unsigned char ucData )
	{
		_WINQ_SFCONTEXT( "CRegisteredWait::InstanceCallback" );
	}

}//nsWin32
