//WinQLInitOnce.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Definitions/Constants.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/Threading/WinQLInitOnce.h"
#include "WinQAPI/Kernel32.h"

//------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CInitOnceHelper );

	//--------------------------------------------------------------------------------
	CInitOnceHelper::CInitOnceHelper()
	{
		_WINQ_FCONTEXT( "CInitOnceHelper::CInitOnceHelper" );
		__QOR_PROTECT
		{
			Initialize();
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CInitOnceHelper::CInitOnceHelper( bool bInit )
	{
		_WINQ_FCONTEXT( "CInitOnceHelper::CInitOnceHelper" );
		__QOR_PROTECT
		{
			if( bInit )
			{
				Initialize();
			}
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CInitOnceHelper::~CInitOnceHelper()
	{
		_WINQ_FCONTEXT( "CInitOnceHelper::~CInitOnceHelper" );
	}

	//--------------------------------------------------------------------------------
	bool CInitOnceHelper::BeginInitialize( unsigned long dwFlags, int* fPending, void** lpContext )
	{
		_WINQ_FCONTEXT( "CInitOnceHelper::BeginInitialize" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::InitOnceBeginInitialize( reinterpret_cast< ::INIT_ONCE* >( &m_InitOnce ), dwFlags, fPending, lpContext ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CInitOnceHelper::Complete( unsigned long dwFlags, void* lpContext )
	{
		_WINQ_FCONTEXT( "CInitOnceHelper::Complete" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::InitOnceComplete( reinterpret_cast< ::INIT_ONCE* >( &m_InitOnce ), dwFlags, lpContext ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CInitOnceHelper::ExecuteOnce( nsWin32::fpInitOnce InitFn, void* Parameter, void** Context )
	{
		_WINQ_FCONTEXT( "CInitOnceHelper::ExecuteOnce" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::InitOnceExecuteOnce( reinterpret_cast< ::INIT_ONCE* >( &m_InitOnce ), reinterpret_cast< ::PINIT_ONCE_FN >( InitFn ), Parameter, Context ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//private:

	//--------------------------------------------------------------------------------
	void CInitOnceHelper::Initialize()
	{
		_WINQ_FCONTEXT( "CInitOnceHelper::Initialize" );
		__QOR_PROTECT
		{
			CKernel32::InitOnceInitialize( reinterpret_cast< ::INIT_ONCE* >( &m_InitOnce ) );
		}__QOR_ENDPROTECT
	}



	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CASyncInitOnce );

	//--------------------------------------------------------------------------------
	CASyncInitOnce::CASyncInitOnce() : m_Win32InitOnce( false ), m_bPending( 1 ), m_bStatus( false )
	{
		_WINQ_FCONTEXT( "CASyncInitOnce::CASyncInitOnce" );
	}

	//--------------------------------------------------------------------------------
	CASyncInitOnce::~CASyncInitOnce()
	{
		_WINQ_FCONTEXT( "CASyncInitOnce::~CASyncInitOnce" );
	}

	//--------------------------------------------------------------------------------
	bool CASyncInitOnce::Execute( void** pContext )
	{
		_WINQ_FCONTEXT( "CASyncInitOnce::Execute" );
		bool bResult = false;
		m_bStatus = m_Win32InitOnce.BeginInitialize( nsWin32::Init_Once_Async, &m_bPending, pContext );

		if( m_bStatus == true )
		{
			if( !m_bPending )
			{
				bResult = true;
			}
			else
			{
				bResult = Init( pContext );
				if( bResult == true )
				{
					m_bStatus = m_Win32InitOnce.Complete( nsWin32::Init_Once_Async, pContext );
                    if( m_bStatus == false )
					{
						UnInit( pContext );
						m_bStatus = m_Win32InitOnce.BeginInitialize( nsWin32::Init_Once_Check_Only, &m_bPending, pContext );
						if( m_bStatus && !m_bPending )
						{
							bResult = true;
						}
						else
						{
							bResult = false;
						}
					}
				}
			}
		}

		return bResult;
	}



	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CInitOnce );

	//--------------------------------------------------------------------------------
	CInitOnce::CInitOnce() : m_Win32InitOnce()
	{
		_WINQ_FCONTEXT( "CInitOnce::CInitOnce" );
	}

	//--------------------------------------------------------------------------------
	CInitOnce::~CInitOnce()
	{
		_WINQ_FCONTEXT( "CInitOnce::~CInitOnce" );
	}

	//--------------------------------------------------------------------------------
	bool CInitOnce::Execute( void** pContext )
	{
		_WINQ_FCONTEXT( "CInitOnce::Execute" );
		bool bResult = false;
		bResult = m_Win32InitOnce.ExecuteOnce( ( nsWin32::fpInitOnce )&InitOnceCallback, reinterpret_cast< void* >( this ), pContext );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CInitOnce::InitOnceCallback( nsWin32::INIT_ONCE* InitOnce, void* Parameter, void** lpContext )
	{
		_WINQ_SFCONTEXT( "CInitOnce::InitOnceCallback" );
		bool bResult = false;
		CInitOnce* pInitOnce = reinterpret_cast< CInitOnce* >( Parameter );
		if( pInitOnce != 0 )
		{
			bResult = pInitOnce->Init( lpContext );
		}
		return bResult;
	}


}//nsWin32
