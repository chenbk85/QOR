//WinQLFiber.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/Threading/WinQLFiber.h"
#include "WinQAPI/Kernel32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CFiber );

	//--------------------------------------------------------------------------------
	CFiber::CFiber( Cmp_ulong_ptr dwStackSize, nsWin32::LPFIBER_START_ROUTINE lpStartAddress, void* lpParameter )
	{
		_WINQ_FCONTEXT( "CFiber::CFiber" );
		__QOR_PROTECT
		{
			m_pFiber = CKernel32::CreateFiber( dwStackSize, lpStartAddress, lpParameter );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CFiber::CFiber( Cmp_ulong_ptr dwStackCommitSize, Cmp_ulong_ptr dwStackReserveSize, unsigned long dwFlags, nsWin32::LPFIBER_START_ROUTINE lpStartAddress, void* lpParameter )
	{
		_WINQ_FCONTEXT( "CFiber::CFiber" );
		__QOR_PROTECT
		{
			m_pFiber = CKernel32::CreateFiberEx( dwStackCommitSize, dwStackReserveSize, dwFlags, lpStartAddress, lpParameter );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CFiber::~CFiber()
	{
		_WINQ_FCONTEXT( "CFiber::~CFiber" );
		__QOR_PROTECT
		{
			CKernel32::DeleteFiber( m_pFiber );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	//TODO: Move this to Thread and add a fiberous property to threads
	bool CFiber::ConvertToThread()
	{
		_WINQ_FCONTEXT( "CFiber::ConvertToThread" );
		return CKernel32::ConvertFiberToThread() ? true : false;
	}

}//nsWin32
