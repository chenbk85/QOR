//WinQLSRWLock.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/Threading/WinQLSRWLock.h"
#include "WinQAPI/Kernel32.h"

//------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CSRWLock );

	//--------------------------------------------------------------------------------
	CSRWLock::CSRWLock()
	{
		_WINQ_FCONTEXT( "CSRWLock::CSRWLock" );
		__QOR_PROTECT
		{
			Initialize();
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CSRWLock::~CSRWLock()
	{
		_WINQ_FCONTEXT( "CSRWLock::~CSRWLock" );
	}

	//--------------------------------------------------------------------------------
	void CSRWLock::AcquireExclusive()
	{
		_WINQ_FCONTEXT( "CSRWLock::AcquireExclusive" );
		__QOR_PROTECT
		{
			CKernel32::AcquireSRWLockExclusive( reinterpret_cast< ::PSRWLOCK >( dynamic_cast< SRWLOCK* >( this ) ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	void CSRWLock::AcquireShared()
	{
		_WINQ_FCONTEXT( "CSRWLock::AcquireShared" );
		__QOR_PROTECT
		{
			CKernel32::AcquireSRWLockShared( reinterpret_cast< ::PSRWLOCK >( this ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	void CSRWLock::ReleaseExclusive()
	{
		_WINQ_FCONTEXT( "CSRWLock::ReleaseExclusive" );
		__QOR_PROTECT
		{
			CKernel32::ReleaseSRWLockExclusive( reinterpret_cast< ::PSRWLOCK >( this ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	void CSRWLock::ReleaseShared()
	{
		_WINQ_FCONTEXT( "CSRWLock::ReleaseShared" );
		__QOR_PROTECT
		{
			CKernel32::ReleaseSRWLockShared( reinterpret_cast< ::PSRWLOCK >( this ) );
		}__QOR_ENDPROTECT
	}

	//private:

	//--------------------------------------------------------------------------------
	void CSRWLock::Initialize()
	{
		_WINQ_FCONTEXT( "CSRWLock::Initialize" );
		__QOR_PROTECT
		{
			CKernel32::InitializeSRWLock( reinterpret_cast< ::PSRWLOCK >( this ) );
		}__QOR_ENDPROTECT
	}

}//nsWin32

