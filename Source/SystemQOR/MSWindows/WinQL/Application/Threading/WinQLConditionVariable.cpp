//WinQLConditionVariable.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/Threading/WinQLConditionVariable.h"
#include "WinQAPI/Kernel32.h"

//------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CConditionVariable );

	//--------------------------------------------------------------------------------
	CConditionVariable::CConditionVariable()
	{
		_WINQ_FCONTEXT( "CConditionVariable::CConditionVariable" );
		__QOR_PROTECT
		{
			Initialize();
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CConditionVariable::~CConditionVariable()
	{
		_WINQ_FCONTEXT( "CConditionVariable::~CConditionVariable" );
	}

	//--------------------------------------------------------------------------------
	bool CConditionVariable::SleepCS( CCriticalSection& CS, unsigned long dwMilliseconds )
	{
		_WINQ_FCONTEXT( "CConditionVariable::SleepCS" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SleepConditionVariableCS( reinterpret_cast< ::CONDITION_VARIABLE* >( this ), reinterpret_cast< ::LPCRITICAL_SECTION >( &CS ), dwMilliseconds ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CConditionVariable::SleepSRW( CSRWLock& SRWLock, unsigned long dwMilliseconds, unsigned long Flags )
	{
		_WINQ_FCONTEXT( "CSRWLock::SleepConditionVariable" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SleepConditionVariableSRW( reinterpret_cast< ::CONDITION_VARIABLE* >( this ), (::SRWLOCK*)&SRWLock, dwMilliseconds, Flags ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CConditionVariable::WakeAll()
	{
		_WINQ_FCONTEXT( "CConditionVariable::WakeAll" );
		__QOR_PROTECT
		{
			CKernel32::WakeAllConditionVariable( reinterpret_cast< ::CONDITION_VARIABLE* >( this ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	void CConditionVariable::Wake()
	{
		_WINQ_FCONTEXT( "CConditionVariable::Wake" );
		__QOR_PROTECT
		{
			CKernel32::WakeConditionVariable( reinterpret_cast< ::CONDITION_VARIABLE* >( this ) );
		}__QOR_ENDPROTECT
	}

	//protected:

	//--------------------------------------------------------------------------------
	void CConditionVariable::Initialize()
	{
		_WINQ_FCONTEXT( "CConditionVariable::Initialize" );
		__QOR_PROTECT
		{
			CKernel32::InitializeConditionVariable( reinterpret_cast< ::CONDITION_VARIABLE* >( dynamic_cast< CONDITION_VARIABLE* >( this ) ) );
		}__QOR_ENDPROTECT
	}

}//nsWin32

