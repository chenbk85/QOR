//WinQLSList.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/Threading/WinQLSList.h"
#include "WinQAPI/Kernel32.h"

//------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CSList );

	//--------------------------------------------------------------------------------
	CSList::CSList()
	{
		_WINQ_FCONTEXT( "CSList::CSList" );
		__QOR_PROTECT
		{
			InitializeHead();
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CSList::~CSList()
	{
		_WINQ_FCONTEXT( "CSList::~CSList" );
		__QOR_PROTECT
		{
			/*TODO:PSLIST_ENTRY pEntry =*/ InterlockedFlush();
		}__QOR_ENDPROTECT
	}

	//------------------------------------------------------------------------------
	nsWin32::PSLIST_ENTRY CSList::InterlockedFlush()
	{
		_WINQ_FCONTEXT( "CSList::InterlockedFlush" );
		nsWin32::PSLIST_ENTRY pEntry = 0;
		__QOR_PROTECT
		{
			pEntry = reinterpret_cast< nsWin32::PSLIST_ENTRY >( CKernel32::InterlockedFlushSList( reinterpret_cast< ::PSLIST_HEADER >( m_pListHeader ) ) );
		}__QOR_ENDPROTECT
		return pEntry;
	}

	//------------------------------------------------------------------------------
	nsWin32::PSLIST_ENTRY CSList::InterlockedPopEntry()
	{
		_WINQ_FCONTEXT( "CSList::InterlockedPopEntry" );
		PSLIST_ENTRY pEntry = 0;
		__QOR_PROTECT
		{
			pEntry = reinterpret_cast< nsWin32::PSLIST_ENTRY >( CKernel32::InterlockedPopEntrySList( reinterpret_cast< ::PSLIST_HEADER >( m_pListHeader ) ) );
		}__QOR_ENDPROTECT
		return pEntry;
	}

	//------------------------------------------------------------------------------
	nsWin32::PSLIST_ENTRY CSList::InterlockedPushEntry( nsWin32::PSLIST_ENTRY ListEntry )
	{
		_WINQ_FCONTEXT( "CSList::InterlockedPushEntry" );
		nsWin32::PSLIST_ENTRY pEntry = 0;
		__QOR_PROTECT
		{
			pEntry = reinterpret_cast< nsWin32::PSLIST_ENTRY >( CKernel32::InterlockedPushEntrySList( reinterpret_cast< ::PSLIST_HEADER >( m_pListHeader ), reinterpret_cast< ::PSINGLE_LIST_ENTRY >( ListEntry ) ) );
		}__QOR_ENDPROTECT
		return pEntry;
	}

	//------------------------------------------------------------------------------
	unsigned short CSList::QueryDepth()
	{
		_WINQ_FCONTEXT( "CSList::QueryDepth" );
		USHORT usResult = 0;
		__QOR_PROTECT
		{
			usResult = CKernel32::QueryDepthSList( reinterpret_cast< ::PSLIST_HEADER >( m_pListHeader ) );
		}__QOR_ENDPROTECT
		return usResult;
	}

	//private:

	//--------------------------------------------------------------------------------
	void CSList::InitializeHead()
	{
		_WINQ_FCONTEXT( "CSList::InitializeHead" );
		__QOR_PROTECT
		{
#	pragma TODO( "Alignment" )
			m_pListHeader = reinterpret_cast< nsWin32::pSListHeader >( /*_aligned_*/malloc( sizeof( SLIST_HEADER )/*, MEMORY_ALLOCATION_ALIGNMENT*/ ) );
			CKernel32::InitializeSListHead( reinterpret_cast< ::PSLIST_HEADER >( m_pListHeader ) );
		}__QOR_ENDPROTECT
	}			
		
}//nsWin32
