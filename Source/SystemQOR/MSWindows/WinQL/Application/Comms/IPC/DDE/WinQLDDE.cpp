//WinQLDDE.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/Comms/IPC/DDE/WinQLDDE.h"
#include "WinQAPI/User32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CDDEStringItem );
	__QOR_IMPLEMENT_OCLASS_LUID( CDDEDataAccess );
	__QOR_IMPLEMENT_OCLASS_LUID( CDDEDataItem );
	__QOR_IMPLEMENT_OCLASS_LUID( CDDEClient );
	__QOR_IMPLEMENT_OCLASS_LUID( CDDEClient::CConversation );
	__QOR_IMPLEMENT_OCLASS_LUID( CDDEClient::CConversationList );
	__QOR_IMPLEMENT_OCLASS_LUID( CDDEClient::CTransaction );


	//--String Item-------------------------------------------------------------------

	//--------------------------------------------------------------------------------
	CDDEStringItem::CDDEStringItem( CDDEAppInstance& Inst, TCHAR* psz, int iCodePage, int* pbResult ) : m_Inst(Inst), m_User32Library( CUser32::Instance() )
	{
		_WINQ_FCONTEXT( "CDDEStringItem::CDDEStringItem" );
		__QOR_PROTECT
		{
			m_pbResult = pbResult;
			m_hItem = m_User32Library.mxDdeCreateStringHandle( Inst.ID(), psz, iCodePage );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CDDEStringItem::~CDDEStringItem()
	{
		_WINQ_FCONTEXT( "CDDEStringItem::~CDDEStringItem" );
		__QOR_PROTECT
		{
			BOOL bResult = m_User32Library.DdeFreeStringHandle( m_Inst.ID(), reinterpret_cast< ::HSZ >( m_hItem ) );
			if( m_pbResult != NULL )
			{
				*m_pbResult = bResult;
			}
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	void* CDDEStringItem::operator()()
	{
		_WINQ_FCONTEXT( "CDDEStringItem::operator()" );
		return m_hItem;
	}

	//--------------------------------------------------------------------------------
	bool CDDEStringItem::operator == ( CDDEStringItem& Cmp2 )
	{
		_WINQ_FCONTEXT( "CDDEStringItem::operator==" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_User32Library.DdeCmpStringHandles( reinterpret_cast< ::HSZ >( m_hItem ), reinterpret_cast< ::HSZ >( Cmp2.m_hItem ) );
		}__QOR_ENDPROTECT
		return iResult == 0 ? false : true;
	}

	//--------------------------------------------------------------------------------
	unsigned long CDDEStringItem::Query( TCHAR* psz, unsigned long cchMax, int iCodePage )
	{
		_WINQ_FCONTEXT( "CDDEStringItem::Query" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = m_User32Library.DdeQueryString( m_Inst.ID(), reinterpret_cast< ::HSZ >( m_hItem ), psz, cchMax, iCodePage );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	bool CDDEStringItem::Keep()
	{
		_WINQ_FCONTEXT( "CDDEStringItem::Keep" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.DdeKeepStringHandle( m_Inst.ID(), reinterpret_cast< ::HSZ >( m_hItem ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}


	//--Data Item---------------------------------------------------------------------

	//--------------------------------------------------------------------------------
	CDDEDataItem::CDDEDataItem( CDDEAppInstance& Inst, unsigned char* pSrc, unsigned long cb, unsigned long cbOff, void* hszItem, unsigned int wFmt, unsigned int afCmd, int* pbResult ) : m_Inst( Inst ), m_User32Library( CUser32::Instance() )
	{
		_WINQ_FCONTEXT( "CDDEDataItem::CDDEDataItem" );
		__QOR_PROTECT
		{
			m_pbResult = pbResult;
			m_bOwned = ( ( afCmd & HDATA_APPOWNED ) != 0 );
			m_hData = ( m_User32Library.DdeCreateDataHandle( Inst.ID(), pSrc, cb, cbOff, reinterpret_cast< ::HSZ >( hszItem ), wFmt, afCmd ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CDDEDataItem::~CDDEDataItem()
	{
		_WINQ_FCONTEXT( "CDDEDataItem::~CDDEDataItem" );
		__QOR_PROTECT
		{
			BOOL bResult = m_User32Library.DdeFreeDataHandle( reinterpret_cast< ::HDDEDATA >( m_hData ), m_Inst.ID() );
			if( m_pbResult != NULL )
			{
				*m_pbResult = bResult;
			}
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	void* CDDEDataItem::operator()()
	{
		_WINQ_FCONTEXT( "CDDEDataItem::operator()" );
		return m_hData;
	}

	//--------------------------------------------------------------------------------
	unsigned long CDDEDataItem::Get( unsigned char* pDst, unsigned long cbMax, unsigned long cbOff )
	{
		_WINQ_FCONTEXT( "CDDEDataItem::Get" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = m_User32Library.DdeGetData( reinterpret_cast< ::HDDEDATA >( m_hData ), pDst, cbMax, cbOff, m_Inst.ID() );
		}__QOR_ENDPROTECT
		return dwResult;
	}


	//--DDE Data Access

	//--------------------------------------------------------------------------------
	CDDEDataAccess::CDDEDataAccess( CDDEAppInstance& Inst, void* hData, int* pbResult ) : m_Inst( Inst ), m_User32Library( CUser32::Instance() )
	{
		_WINQ_FCONTEXT( "CDDEDataAccess::CDDEDataAccess" );
		__QOR_PROTECT
		{
			m_pbResult = pbResult;
			m_cbDataSize = 0;
			m_hData = hData;
			m_pData = m_User32Library.DdeAccessData( reinterpret_cast< ::HDDEDATA >( m_hData ), &m_cbDataSize, m_Inst.ID() );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CDDEDataAccess::~CDDEDataAccess()
	{
		_WINQ_FCONTEXT( "CDDEDataAccess::~CDDEDataAccess" );
		__QOR_PROTECT
		{
			BOOL bResult = m_User32Library.DdeUnaccessData( reinterpret_cast< ::HDDEDATA >( m_hData ), m_Inst.ID() );
			if( m_pbResult != NULL )
			{
				*m_pbResult = bResult;
			}
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	unsigned char* CDDEDataAccess::Data()
	{
		_WINQ_FCONTEXT( "CDDEDataAccess::Data" );
		return m_pData;
	}

	//--------------------------------------------------------------------------------
	unsigned long CDDEDataAccess::Size()
	{
		_WINQ_FCONTEXT( "CDDEDataAccess::Size" );
		return m_cbDataSize;
	}


	//--DDE Client
	//----Conversation

	//--------------------------------------------------------------------------------
	CDDEClient::CConversation::CConversation( CDDEAppInstance& Inst, void* hszService, void* hszTopic, nsWin32::CONVCONTEXT* pContext, int* pbResult ) : m_Inst(Inst), m_User32Library( CUser32::Instance() )
	{
		_WINQ_FCONTEXT( "CConversation::CConversation" );
		__QOR_PROTECT
		{
			m_pbResult = pbResult;
			m_Context.dwLangID = 0;
			m_Context.dwSecurity = 0;
			m_Context.iCodePage = sizeof( TCHAR ) == 1 ? CP_WINANSI : CP_WINUNICODE;
			m_Context.qos.ContextTrackingMode = 0;
			m_Context.qos.EffectiveOnly = 0;
			m_Context.qos.ImpersonationLevel = SecurityAnonymous;
			m_Context.qos.Length = 0;
			m_Context.wCountryID = 0;
			m_Context.wFlags = 0;
			m_Context.cb = sizeof( CONVCONTEXT );

			if( pContext != NULL )
			{
				m_Context = *pContext;
			}

			m_hConv = ( m_User32Library.DdeConnect( Inst.ID(), reinterpret_cast< ::HSZ >( hszService ), reinterpret_cast< ::HSZ >( hszTopic ), reinterpret_cast< ::PCONVCONTEXT >( &m_Context ) ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	void CDDEClient::CConversation::Reconnect()
	{
		_WINQ_FCONTEXT( "CConversation::Reconnect" );
		__QOR_PROTECT
		{
			m_hConv = ( m_User32Library.DdeReconnect( reinterpret_cast< ::HCONV >( m_hConv ), m_Inst.ID() ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CDDEClient::CConversation::~CConversation()
	{
		_WINQ_FCONTEXT( "CConversation::~CConversation" );
		__QOR_PROTECT
		{
			BOOL bResult = m_User32Library.DdeDisconnect( reinterpret_cast< ::HCONV >( m_hConv ), m_Inst.ID() );
			if( m_pbResult != NULL )
			{
				*m_pbResult = bResult;
			}
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	void* CDDEClient::CConversation::operator()()
	{
		_WINQ_FCONTEXT( "CConversation::operator()" );
		return m_hConv;
	}

	//--------------------------------------------------------------------------------
	bool CDDEClient::CConversation::EnableCallback( CDDEAppInstance& Inst, unsigned int wCmd )
	{
		_WINQ_FCONTEXT( "CConversation::EnableCallback" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.DdeEnableCallback( Inst.ID(), reinterpret_cast< ::HCONV >( m_hConv ), wCmd ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDDEClient::CConversation::ImpersonateClient()
	{
		_WINQ_FCONTEXT( "CConversation::ImpersonateClient" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.DdeImpersonateClient( reinterpret_cast< ::HCONV >( m_hConv ), m_Inst.ID() ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned int CDDEClient::CConversation::QueryInfo( unsigned long idTransaction, nsWin32::PCONVINFO pConvInfo )
	{
		_WINQ_FCONTEXT( "CConversation::QueryInfo" );
		UINT uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = m_User32Library.DdeQueryConvInfo( reinterpret_cast< ::HCONV >( m_hConv ), idTransaction, reinterpret_cast< ::PCONVINFO >( pConvInfo ), m_Inst.ID() );
		}__QOR_ENDPROTECT
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	bool CDDEClient::CConversation::SetUserHandle( unsigned long idTransaction, Cmp_ulong_ptr hUser )
	{
		_WINQ_FCONTEXT( "CConversation::SetUserHandle" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.DdeSetUserHandle( reinterpret_cast< ::HCONV >( m_hConv ), idTransaction, hUser, m_Inst.ID() ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}


	//--DDE Client
	//----Conversation List

	//--------------------------------------------------------------------------------
	CDDEClient::CConversationList::CConversationList( CDDEAppInstance& Inst, void* hszService, void* hszTopic, nsWin32::CONVCONTEXT* pContext, int* pbResult ) : m_Inst( Inst ), m_User32Library( CUser32::Instance() )
	{
		_WINQ_FCONTEXT( "CConversationList::CConversationList" );
		__QOR_PROTECT
		{
			m_pbResult = pbResult;
			m_Context.dwLangID = 0;
			m_Context.dwSecurity = 0;
			m_Context.iCodePage = sizeof( TCHAR ) == 1 ? CP_WINANSI : CP_WINUNICODE;
			m_Context.qos.ContextTrackingMode = 0;
			m_Context.qos.EffectiveOnly = 0;
			m_Context.qos.ImpersonationLevel = SecurityAnonymous;
			m_Context.qos.Length = 0;
			m_Context.wCountryID = 0;
			m_Context.wFlags = 0;
			m_Context.cb = sizeof( CONVCONTEXT );

			if( pContext != NULL )
			{
				m_Context = *pContext;
			}

			m_hConvList = ( m_User32Library.DdeConnectList( Inst.ID(), reinterpret_cast< ::HSZ >( hszService ), reinterpret_cast< ::HSZ >( hszTopic ), 0, reinterpret_cast< ::PCONVCONTEXT >( &m_Context ) ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CDDEClient::CConversationList::~CConversationList()
	{
		_WINQ_FCONTEXT( "CConversationList::~CConversationList" );
		__QOR_PROTECT
		{
			BOOL bResult = m_User32Library.DdeDisconnectList( reinterpret_cast< ::HCONVLIST >( m_hConvList ), m_Inst.ID() );
			if( m_pbResult != NULL )
			{
				*m_pbResult = bResult;
			}
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	void* CDDEClient::CConversationList::operator()()
	{
		_WINQ_FCONTEXT( "CConversationList::operator()" );
		return m_hConvList;
	}

	//--------------------------------------------------------------------------------
	void* CDDEClient::CConversationList::QueryNextServer( void* hConvPrev )
	{
		_WINQ_FCONTEXT( "CConversationList::QueryNextServer" );
		void* Result = 0;
		__QOR_PROTECT
		{
			Result = ( m_User32Library.DdeQueryNextServer( reinterpret_cast< ::HCONVLIST >( m_hConvList ), reinterpret_cast< ::HCONV >( hConvPrev ) ) );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--DDE Client
	//----Transaction

	//--------------------------------------------------------------------------------
	CDDEClient::CTransaction::CTransaction( CDDEAppInstance& Inst, unsigned char* pData, unsigned long cbData, void* hConv, void* hszItem, unsigned int wFmt, unsigned int wType, unsigned long dwTimeout, int* pResult ) : m_Inst( Inst ), m_User32Library( CUser32::Instance() )
	{
		_WINQ_FCONTEXT( "CTransaction::CTransaction" );
		__QOR_PROTECT
		{
			m_pResult = pResult;
			m_bCompleted = false;
			m_dwResult = 0;
			m_dwTransaction = 0;
			m_hConv = hConv;
			m_hData = ( m_User32Library.DdeClientTransaction( pData, cbData, reinterpret_cast< ::HCONV >( m_hConv ), reinterpret_cast< ::HSZ >( hszItem ), wFmt, wType, dwTimeout, &m_dwResult, m_Inst.ID() ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CDDEClient::CTransaction::~CTransaction()
	{
		_WINQ_FCONTEXT( "CTransaction::~CTransaction" );
		__QOR_PROTECT
		{						
			if( m_bCompleted == false )
			{
				BOOL bResult = m_User32Library.DdeAbandonTransaction( m_Inst.ID(), reinterpret_cast< ::HCONV >( m_hConv ), m_dwTransaction );
				if( m_pResult != NULL )
				{
					*m_pResult = bResult;
				}
			}
		}__QOR_ENDPROTECT
	}

	//DDE Client

	//--------------------------------------------------------------------------------
	CDDEClient::CDDEClient()
	{
		_WINQ_FCONTEXT( "CDDEClient::CDDEClient" );
	}

	//--------------------------------------------------------------------------------
	CDDEClient::~CDDEClient()
	{				
		_WINQ_FCONTEXT( "CDDEClient::~CDDEClient" );
	}

}//nsWin32
