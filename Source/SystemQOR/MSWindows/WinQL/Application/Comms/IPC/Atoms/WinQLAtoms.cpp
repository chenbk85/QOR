//WinQLAtoms.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/Comms/IPC/Atoms/WinQLAtoms.h"
#include "WinQAPI/Kernel32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CLocalAtomTable );

	//--------------------------------------------------------------------------------
	CLocalAtomTable::CLocalAtomTable( int* pbResult )
	{
		_WINQ_FCONTEXT( "CLocalAtomTable::CLocalAtomTable" );		
		__QOR_PROTECT
		{
			int bResult = CKernel32::InitAtomTable( sDefaultAtomTableHash );
			if( pbResult != 0 )
			{
				*pbResult = bResult;
			}
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CLocalAtomTable::CLocalAtomTable( unsigned long dwHashSize, int* pbResult )
	{
		_WINQ_FCONTEXT( "CLocalAtomTable::CLocalAtomTable" );
		__QOR_PROTECT
		{
			int bResult = CKernel32::InitAtomTable( dwHashSize );
			if( pbResult != 0 )
			{
				*pbResult = bResult;
			}
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CLocalAtomTable::~CLocalAtomTable()
	{
		_WINQ_FCONTEXT( "CLocalAtomTable::~CLocalAtomTable" );
	}

	//--------------------------------------------------------------------------------
	unsigned short CLocalAtomTable::Add( const TCHAR* lpString )
	{
		_WINQ_FCONTEXT( "CLocalAtomTable::Add" );
		//String must be no more than 255 bytes NULL terminated
		//Or it could be a cast integer from MAKEINTATOM
		//0 indicates error
		ATOM atom = 0;
		__QOR_PROTECT
		{
			atom = CKernel32::AddAtom( lpString );
		}__QOR_ENDPROTECT
		return atom;
	}

	//--------------------------------------------------------------------------------
	unsigned short CLocalAtomTable::Delete( unsigned short nAtom )
	{			
		_WINQ_FCONTEXT( "CLocalAtomTable::Delete" );
		ATOM atom = 0;
		__QOR_PROTECT
		{
			atom = CKernel32::DeleteAtom( nAtom );
		}__QOR_ENDPROTECT
		return atom;
	}

	//--------------------------------------------------------------------------------
	unsigned short CLocalAtomTable::Find( const TCHAR* lpString )
	{	
		_WINQ_FCONTEXT( "CLocalAtomTable::Find" );
		ATOM atom = 0;
		__QOR_PROTECT
		{
			atom = CKernel32::FindAtom( lpString );
		}__QOR_ENDPROTECT
		return atom;
	}

	//--------------------------------------------------------------------------------
	unsigned int CLocalAtomTable::GetName ( unsigned short nAtom, TCHAR* lpBuffer, int nSize )
	{	
		_WINQ_FCONTEXT( "CLocalAtomTable::GetName" );
		UINT uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = CKernel32::GetAtomName( nAtom, lpBuffer, nSize );
		}__QOR_ENDPROTECT
		return uiResult;
	}


}//nsWin32

