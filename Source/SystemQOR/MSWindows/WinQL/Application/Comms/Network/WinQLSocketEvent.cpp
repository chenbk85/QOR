//WinQLSocketEvent.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/Comms/Network/WinQLSocketEvent.h"
#include "WinQAPI/WS2_32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CSocketEvent );

	//--------------------------------------------------------------------------------
	CSocketEvent::CSocketEvent() : m_Library( CWS2_32::Instance() )
	{
		_WINQ_FCONTEXT( "CSocketEvent::CSocketEvent" );
		__QOR_PROTECT
		{
			m_Handle = reinterpret_cast< unsigned long >( m_Library.WSACreateEvent() );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CSocketEvent::~CSocketEvent()
	{
		_WINQ_FCONTEXT( "CSocketEvent::~CSocketEvent" );
		m_Library.WSACloseEvent( reinterpret_cast< HANDLE >( m_Handle ) );
	}

	//--------------------------------------------------------------------------------
	unsigned long CSocketEvent::Handle()
	{
		_WINQ_FCONTEXT( "CSocketEvent::Handle" );
		return m_Handle;
	}

	//--------------------------------------------------------------------------------
	bool CSocketEvent::Reset()
	{
		_WINQ_FCONTEXT( "CSocketEvent::Reset" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_Library.WSAResetEvent( reinterpret_cast< HANDLE >( m_Handle ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CSocketEvent::Set()
	{
		_WINQ_FCONTEXT( "CSocketEvent::Set" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_Library.WSASetEvent( reinterpret_cast< HANDLE >( m_Handle ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

}//nsWin32
