//WinQLSocketHelper.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/Comms/Network/WinQLSocketHelper.h"
#include "WinQAPI/WS2_32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CSocketHelper );

	//--------------------------------------------------------------------------------
	CSocketHelper::CSocketHelper() : m_Library( CWS2_32::Instance() )
	{
		_WINQ_FCONTEXT( "CSocketHelper::CSocketHelper" );
	}

	//--------------------------------------------------------------------------------
	CSocketHelper::~CSocketHelper()
	{
		_WINQ_FCONTEXT( "CSocketHelper::~CSocketHelper" );
	}

	//--------------------------------------------------------------------------------
	CSocketHelper& CSocketHelper::operator = ( const CSocketHelper& )
	{
		_WINQ_FCONTEXT( "CSocketHelper::operator = " );
		//There is effectively no state as the library is a singleton
		return *this;
	}

	//--------------------------------------------------------------------------------
	hostent* CSocketHelper::GetHostByAddr( const char* pAddr, int iLen, int iType )
	{
		_WINQ_FCONTEXT( "CSocketHelper::GetHostByAddr" );
		hostent* pResult = 0;
		__QOR_PROTECT
		{
			pResult = reinterpret_cast< hostent* >( m_Library.gethostbyaddr( pAddr, iLen, iType ) );
		}__QOR_ENDPROTECT
		return pResult;
	}

	//--------------------------------------------------------------------------------
	hostent* CSocketHelper::GetHostByName( const char* pName )
	{
		_WINQ_FCONTEXT( "CSocketHelper::GetHostByName" );
		hostent* pResult = 0;
		__QOR_PROTECT
		{
			pResult = reinterpret_cast< hostent* >( m_Library.gethostbyname( pName ) );
		}__QOR_ENDPROTECT
		return pResult;
	}

	//--------------------------------------------------------------------------------
	protoent* CSocketHelper::GetProtoByName( const char* pName )
	{
		_WINQ_FCONTEXT( "CSocketHelper::GetProtoByName" );
		protoent* pResult = 0;
		__QOR_PROTECT
		{
			pResult = reinterpret_cast< protoent* >( m_Library.getprotobyname( pName ) );
		}__QOR_ENDPROTECT
		return pResult;
	}

	//--------------------------------------------------------------------------------
	protoent* CSocketHelper::GetProtoByNumber( int iNumber )
	{
		_WINQ_FCONTEXT( "CSocketHelper::GetProtoByNumber" );
		protoent* pResult = 0;
		__QOR_PROTECT
		{
			pResult = reinterpret_cast< protoent* >( m_Library.getprotobynumber( iNumber ) );
		}__QOR_ENDPROTECT
		return pResult;
	}

	//--------------------------------------------------------------------------------
	servent* CSocketHelper::GetServByName( const char* pName, const char* pProto )
	{
		_WINQ_FCONTEXT( "CSocketHelper::GetServByName" );
		servent* pResult = 0;
		__QOR_PROTECT
		{
			pResult = reinterpret_cast< servent* >( m_Library.getservbyname( pName, pProto ) );
		}__QOR_ENDPROTECT
		return pResult;
	}

	//--------------------------------------------------------------------------------
	servent* CSocketHelper::GetServByPort( int iPort, const char* pProto )
	{
		_WINQ_FCONTEXT( "CSocketHelper::GetServByPort" );
		servent* pResult = 0;
		__QOR_PROTECT
		{
			pResult = reinterpret_cast< servent* >( m_Library.getservbyport( iPort, pProto ) );
		}__QOR_ENDPROTECT
		return pResult;
	}

	//--------------------------------------------------------------------------------
	int CSocketHelper::GetHostName( char* pName, int iNamelen )
	{
		_WINQ_FCONTEXT( "CSocketHelper::GetHostName" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_Library.gethostname( pName, iNamelen );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CSocketHelper::HToNL( unsigned long ulHost )
	{
		_WINQ_FCONTEXT( "CSocketHelper::HToNL" );
		unsigned long ulResult = 0;
		__QOR_PROTECT
		{
			ulResult = m_Library.htonl( ulHost );
		}__QOR_ENDPROTECT
		return ulResult;
	}

	//--------------------------------------------------------------------------------
	unsigned short CSocketHelper::HToNS( unsigned short usHost )
	{
		_WINQ_FCONTEXT( "CSocketHelper::HToNS" );
		unsigned short usResult = 0;
		__QOR_PROTECT
		{
			usResult = m_Library.htons( usHost );
		}__QOR_ENDPROTECT
		return usResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CSocketHelper::Inet_Addr( const char* cp )
	{
		_WINQ_FCONTEXT( "CSocketHelper::Inet_Addr" );
		unsigned long ulResult = 0;
		__QOR_PROTECT
		{
			ulResult = m_Library.inet_addr( cp );
		}__QOR_ENDPROTECT
		return ulResult;
	}

	//--------------------------------------------------------------------------------
	char* CSocketHelper::Inet_NToA( CSocketHelper::In_Addr in )
	{
		_WINQ_FCONTEXT( "CSocketHelper::Inet_NToA" );
		char* pResult = 0;
		__QOR_PROTECT
		{
			pResult = m_Library.inet_ntoa( *( reinterpret_cast< ::in_addr* >( &in ) ) );
		}__QOR_ENDPROTECT
		return pResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CSocketHelper::NToHL( unsigned long ulNet )
	{
		_WINQ_FCONTEXT( "CSocketHelper::NToHL" );
		unsigned long ulResult = 0;
		__QOR_PROTECT
		{
			ulResult = m_Library.ntohl( ulNet );
		}__QOR_ENDPROTECT
		return ulResult;
	}

	//--------------------------------------------------------------------------------
	unsigned short CSocketHelper::NToHS( unsigned short usNet )
	{
		_WINQ_FCONTEXT( "CSocketHelper::NToHS" );
		unsigned short usResult = 0;
		__QOR_PROTECT
		{
			usResult = m_Library.ntohs( usNet );
		}__QOR_ENDPROTECT
		return usResult;
	}

	//--------------------------------------------------------------------------------
	int CSocketHelper::Select( int iNFDs, FDSet* pReadFDs, FDSet* pWriteFDs, FDSet* pExceptFDs, const timeval* pTimeout )
	{
		_WINQ_FCONTEXT( "CSocketHelper::Select" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_Library.select( iNFDs, reinterpret_cast< ::fd_set* >( pReadFDs ), reinterpret_cast< ::fd_set* >( pWriteFDs ), reinterpret_cast< ::fd_set* >( pExceptFDs ), reinterpret_cast< const ::timeval* >( pTimeout ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	const TCHAR* CSocketHelper::InetNToP( int iFamily, void* pAddr, TCHAR* pStringBuf, size_t StringBufSize )
	{
		_WINQ_FCONTEXT( "CSocketHelper::InetNToP" );
		const TCHAR* pResult = 0;
		__QOR_PROTECT
		{
			pResult = m_Library.InetNtop( iFamily, pAddr, pStringBuf, StringBufSize );
		}__QOR_ENDPROTECT
		return pResult;
	}

	//--------------------------------------------------------------------------------
	int CSocketHelper::InetPToN( int iFamily, const TCHAR* pszAddrString, void* pAddrBuf )
	{
		_WINQ_FCONTEXT( "CSocketHelper::InetPToN" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_Library.InetPton( iFamily, pszAddrString, pAddrBuf );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CSocketHelper::AddressToString( CSocket::Address* pAddress, unsigned long ulAddressLength, WSAProtocolInfo* lpProtocolInfo, TCHAR* szAddressString, unsigned long* pulAddressStringLength )
	{
		_WINQ_FCONTEXT( "CSocketHelper::AddressToString" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_Library.WSAAddressToString( reinterpret_cast< ::LPSOCKADDR >( pAddress ), ulAddressLength, reinterpret_cast< ::LPWSAPROTOCOL_INFO >( lpProtocolInfo ), szAddressString, pulAddressStringLength );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CSocketHelper::EnumNameSpaceProviders( unsigned long* pulBufferLength, WSANameSpaceInfo* pNSPBuffer )
	{
		_WINQ_FCONTEXT( "CSocketHelper::EnumNameSpaceProviders" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_Library.WSAEnumNameSpaceProviders( pulBufferLength, reinterpret_cast< ::LPWSANAMESPACE_INFO >( pNSPBuffer ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CSocketHelper::EnumNameSpaceProvidersEx( unsigned long* pulBufferLength, WSANameSpaceInfoEx* pNSPBuffer )
	{
		_WINQ_FCONTEXT( "CSocketHelper::EnumNameSpaceProvidersEx" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_Library.WSAEnumNameSpaceProvidersEx( pulBufferLength, reinterpret_cast< ::LPWSANAMESPACE_INFOEX >( pNSPBuffer ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CSocketHelper::EnumProtocols( int* piProtocols, WSAProtocolInfo* pProtocolBuffer, unsigned long* pulBufferLength )
	{
		_WINQ_FCONTEXT( "CSocketHelper::EnumProtocols" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_Library.WSAEnumProtocols( piProtocols, reinterpret_cast< ::LPWSAPROTOCOL_INFO >( pProtocolBuffer ), pulBufferLength );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CSocketHelper::EnumProtocols( int* piProtocols, WSAProtocolInfo* pProtocolBuffer, unsigned long* pulBufferLength, int* pErrNo )
	{
		_WINQ_FCONTEXT( "CSocketHelper::EnumProtocols" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_Library.WSCEnumProtocols( piProtocols, reinterpret_cast< ::LPWSAPROTOCOL_INFOW >( pProtocolBuffer ), pulBufferLength, pErrNo );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CSocketHelper::GetServiceClassInfo( GUID* pProviderId, GUID* pServiceClassId, unsigned long* pulBufferLength, WSAServiceClassInfo* pServiceClassInfo )
	{
		_WINQ_FCONTEXT( "CSocketHelper::GetServiceClassInfo" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_Library.WSAGetServiceClassInfoA( reinterpret_cast< LPGUID >( pProviderId ), reinterpret_cast< LPGUID >( pServiceClassId ), pulBufferLength, reinterpret_cast< ::LPWSASERVICECLASSINFO >( pServiceClassInfo ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CSocketHelper::GetServiceClssNameByClassId( GUID* pServiceClassId, TCHAR* szServiceClassName, unsigned long* pulBufferLength )
	{
		_WINQ_FCONTEXT( "CSocketHelper::GetServiceClssNameByClassId" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_Library.WSAGetServiceClassNameByClassId( reinterpret_cast< LPGUID >( pServiceClassId ), szServiceClassName, pulBufferLength );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CSocketHelper::Poll( PollFD* fdarray, unsigned long nfds, int iTimeout )
	{
		_WINQ_FCONTEXT( "CSocketHelper::Poll" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_Library.WSAPoll( reinterpret_cast< ::WSAPOLLFD* >( fdarray ), nfds, iTimeout );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	void* CSocketHelper::AsyncGetHostByAddr( CWindowHandle& hWnd, unsigned int uiMsg, const char* Addr, int iLen, int iType, char* pBuffer, int iBufLen )
	{
		_WINQ_FCONTEXT( "CSocketHelper::AsyncGetHostByAddr" );
		void* pResult = 0;
		__QOR_PROTECT
		{
			pResult = m_Library.WSAAsyncGetHostByAddr( reinterpret_cast< ::HWND >( hWnd.Use() ), uiMsg, Addr, iLen, iType, pBuffer, iBufLen );
		}__QOR_ENDPROTECT
		return pResult;
	}

	//--------------------------------------------------------------------------------
	void* CSocketHelper::AsyncGetHostByName( CWindowHandle& hWnd, unsigned int uiMsg, const char* pName, char* pBuffer, int iBufLen )
	{
		_WINQ_FCONTEXT( "CSocketHelper::AsyncGetHostByName" );
		void* pResult = 0;
		__QOR_PROTECT
		{
			pResult = m_Library.WSAAsyncGetHostByName( reinterpret_cast< ::HWND >( hWnd.Use() ), uiMsg, pName, pBuffer, iBufLen );
		}__QOR_ENDPROTECT
		return pResult;
	}

	//--------------------------------------------------------------------------------
	void* CSocketHelper::AsyncGetProtoByNumber( CWindowHandle& hWnd, unsigned int uiMsg, int iNumber, char* pBuffer, int iBufLen )
	{
		_WINQ_FCONTEXT( "CSocketHelper::AsyncGetProtoByNumber" );
		void* pResult = 0;
		__QOR_PROTECT
		{
			pResult = m_Library.WSAAsyncGetProtoByNumber( reinterpret_cast< ::HWND >( hWnd.Use() ), uiMsg, iNumber, pBuffer, iBufLen );
		}__QOR_ENDPROTECT
		return pResult;
	}

	//--------------------------------------------------------------------------------
	void* CSocketHelper::AsyncGetProtoByName( CWindowHandle& hWnd, unsigned int uiMsg, const char* pName, char* pBuffer, int iBufLen )
	{
		_WINQ_FCONTEXT( "CSocketHelper::AsyncGetProtoByName" );
		void* pResult = 0;
		__QOR_PROTECT
		{
			pResult = m_Library.WSAAsyncGetProtoByName( reinterpret_cast< ::HWND >( hWnd.Use() ), uiMsg, pName, pBuffer, iBufLen );
		}__QOR_ENDPROTECT
		return pResult;
	}

	//--------------------------------------------------------------------------------
	void* CSocketHelper::AsyncGetServByPort( CWindowHandle& hWnd, unsigned int uiMsg, int iPort, const char* pProto, char* pBuffer, int iBufLen )
	{
		_WINQ_FCONTEXT( "CSocketHelper::AsyncGetServByPort" );
		void* pResult = 0;
		__QOR_PROTECT
		{
			pResult = m_Library.WSAAsyncGetServByPort( reinterpret_cast< ::HWND >( hWnd.Use() ), uiMsg, iPort, pProto, pBuffer, iBufLen );
		}__QOR_ENDPROTECT
		return pResult;
	}

	//--------------------------------------------------------------------------------
	void* CSocketHelper::AsyncGetServByName( CWindowHandle& hWnd, unsigned int uiMsg, const char* pName, const char* pProto, char* pBuffer, int iBufLen )
	{
		_WINQ_FCONTEXT( "CSocketHelper::AsyncGetServByName" );
		void* pResult = 0;
		__QOR_PROTECT
		{
			pResult = m_Library.WSAAsyncGetServByName( reinterpret_cast< ::HWND >( hWnd.Use() ), uiMsg, pName, pProto, pBuffer, iBufLen );
		}__QOR_ENDPROTECT
		return pResult;
	}

	//--------------------------------------------------------------------------------
	int CSocketHelper::CancelAsyncRequest( void* hAsyncTaskHandle )
	{
		_WINQ_FCONTEXT( "CSocketHelper::CancelAsyncRequest" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_Library.WSACancelAsyncRequest( reinterpret_cast< HANDLE >( hAsyncTaskHandle ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CSocketHelper::GetLastError()
	{
		_WINQ_FCONTEXT( "CSocketHelper::GetLastError" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_Library.WSAGetLastError();
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	void CSocketHelper::SetLastError( int iError )
	{
		_WINQ_FCONTEXT( "CSocketHelper::SetLastError" );
		__QOR_PROTECT
		{
			m_Library.WSASetLastError( iError );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	int CSocketHelper::StringToAddress( TCHAR* AddressString, int iAddressFamily, WSAProtocolInfo* pProtocolInfo, CSocket::Address* pAddress, int* pAddressLength )
	{
		_WINQ_FCONTEXT( "CSocketHelper::StringToAddress" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_Library.WSAStringToAddress( AddressString, iAddressFamily, reinterpret_cast< ::LPWSAPROTOCOL_INFO >( pProtocolInfo ), reinterpret_cast< ::LPSOCKADDR >( pAddress ), pAddressLength );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CSocketHelper::WaitForMultipleEvents( unsigned long cEvents, void* const* lphEvents, int fWaitAll, unsigned long ulTimeout, int fAlertable )
	{
		_WINQ_FCONTEXT( "CSocketHelper::WaitForMultipleEvents" );
		unsigned long ulResult = 0;
		__QOR_PROTECT
		{
			ulResult = m_Library.WSAWaitForMultipleEvents( cEvents, reinterpret_cast< const WSAEVENT* >( lphEvents ), fWaitAll, ulTimeout, fAlertable );
		}__QOR_ENDPROTECT
		return ulResult;
	}

	//--------------------------------------------------------------------------------
	int CSocketHelper::EnableNameSpaceProvider( GUID* pProviderId, int fEnable )
	{
		_WINQ_FCONTEXT( "CSocketHelper::EnableNameSpaceProvider" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_Library.WSCEnableNSProvider( reinterpret_cast< ::LPGUID >( pProviderId ), fEnable );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CSocketHelper::GetApplicationCategory( const wchar_t* Path, unsigned long PathLength, const wchar_t* Extra, unsigned long ExtraLength, unsigned long* pPermittedLSPCategories, int* pErrNo )
	{
		_WINQ_FCONTEXT( "CSocketHelper::GetApplicationCategory" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_Library.WSCGetApplicationCategory( Path, PathLength, Extra, ExtraLength, pPermittedLSPCategories, pErrNo );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CSocketHelper::GetProviderInfo( GUID* pProviderId, WSCProviderInfoType InfoType, unsigned char* Info, size_t* InfoSize, unsigned long ulFlags, int* pErrNo )
	{
		_WINQ_FCONTEXT( "CSocketHelper::GetProviderInfo" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_Library.WSCGetProviderInfo( reinterpret_cast< ::LPGUID >( pProviderId ), static_cast< ::WSC_PROVIDER_INFO_TYPE >( InfoType ), Info, InfoSize, ulFlags, pErrNo );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CSocketHelper::GetProviderPath( GUID* pProviderId, wchar_t* szProviderDllPath, int* pProviderDllPathLen, int* pErrNo )
	{
		_WINQ_FCONTEXT( "CSocketHelper::GetProviderPath" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_Library.WSCGetProviderPath( reinterpret_cast< ::LPGUID >( pProviderId ), szProviderDllPath, pProviderDllPathLen, pErrNo );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CSocketHelper::SetApplicationCategory( const wchar_t* Path, unsigned long PathLength, const wchar_t* Extra, unsigned long ExtraLength, unsigned long ulPermittedLSPCategories, unsigned long* pPrevPermLSPCat, int* pErrNo )
	{
		_WINQ_FCONTEXT( "CSocketHelper::SetApplicationCategory" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_Library.WSCSetApplicationCategory( Path, PathLength, Extra, ExtraLength, ulPermittedLSPCategories, pPrevPermLSPCat, pErrNo );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CSocketHelper::SetProviderInfo( GUID* pProviderId, WSCProviderInfoType InfoType, unsigned char* Info, size_t InfoSize, unsigned long ulFlags, int* pErrNo )
	{
		_WINQ_FCONTEXT( "CSocketHelper::SetProviderInfo" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_Library.WSCSetProviderInfo( reinterpret_cast< ::LPGUID >( pProviderId ), static_cast< ::WSC_PROVIDER_INFO_TYPE >( InfoType ), Info, InfoSize, ulFlags, pErrNo );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CSocketHelper::UpdateProvider( GUID* pProviderId, wchar_t* szProviderDllPath, WSAProtocolInfo* pProtocolInfoList, unsigned long ulNumberOfEntries, int* pErrNo )
	{
		_WINQ_FCONTEXT( "CSocketHelper::UpdateProvider" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_Library.WSCUpdateProvider( reinterpret_cast< ::LPGUID >( pProviderId ), szProviderDllPath, reinterpret_cast< const LPWSAPROTOCOL_INFO >( pProtocolInfoList ), ulNumberOfEntries, pErrNo );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CSocketHelper::WriteNameSpaceOrder( GUID* pProviderId, unsigned long ulNumberOfEntries )
	{
		_WINQ_FCONTEXT( "CSocketHelper::WriteNameSpaceOrder" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_Library.WSCWriteNameSpaceOrder( reinterpret_cast< ::LPGUID >( pProviderId ), ulNumberOfEntries );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CSocketHelper::WriteProviderOrder( unsigned long* pulCatalogEntryId, unsigned long ulNumberOfEntries )
	{
		_WINQ_FCONTEXT( "CSocketHelper::WriteProviderOrder" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_Library.WSCWriteProviderOrder( pulCatalogEntryId, ulNumberOfEntries );
		}__QOR_ENDPROTECT
		return iResult;
	}

}//nsWin32

