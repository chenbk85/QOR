//WinQLVirtualMemory.cpp

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/Memory/WinQLVirtualMemory.h"
#include "WinQAPI/Kernel32.h"

//------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CVirtualHelper );

	//------------------------------------------------------------------------------
	CVirtualHelper::CVirtualHelper()
	{
		_WINQ_FCONTEXT( "CVirtualHelper::CVirtualHelper" );
	}

	//------------------------------------------------------------------------------
	CVirtualHelper::~CVirtualHelper()
	{
		_WINQ_FCONTEXT( "CVirtualHelper::~CVirtualHelper" );
	}

	//------------------------------------------------------------------------------
	void* CVirtualHelper::Alloc( void* lpAddress, Cmp_ulong_ptr dwSize, unsigned long flAllocationType, unsigned long flProtect )
	{
		_WINQ_FCONTEXT( "CVirtualHelper::Alloc" );
		LPVOID pResult = 0;
		__QOR_PROTECT
		{
			pResult = CKernel32::VirtualAlloc( lpAddress, dwSize, flAllocationType, flProtect );
		}__QOR_ENDPROTECT
		return pResult;
	}

	//------------------------------------------------------------------------------
	void* CVirtualHelper::AllocEx( void* hProcess, void* lpAddress, Cmp_ulong_ptr dwSize, unsigned long flAllocationType, unsigned long flProtect )
	{
		_WINQ_FCONTEXT( "CVirtualHelper::AllocEx" );
		LPVOID pResult = 0;
		__QOR_PROTECT
		{
			pResult = CKernel32::VirtualAllocEx( hProcess, lpAddress, dwSize, flAllocationType, flProtect );
		}__QOR_ENDPROTECT
		return pResult;
	}

	//------------------------------------------------------------------------------
	bool CVirtualHelper::Free( void* lpAddress, Cmp_ulong_ptr dwSize, unsigned long dwFreeType )
	{
		_WINQ_FCONTEXT( "CVirtualHelper::Free" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::VirtualFree( lpAddress, dwSize, dwFreeType ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CVirtualHelper::FreeEx( void* hProcess, void* lpAddress, Cmp_ulong_ptr dwSize, unsigned long dwFreeType )
	{
		_WINQ_FCONTEXT( "CVirtualHelper::FreeEx" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::VirtualFreeEx( hProcess, lpAddress, dwSize, dwFreeType ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CVirtualHelper::Lock( void* lpAddress, Cmp_ulong_ptr dwSize )
	{
		_WINQ_FCONTEXT( "CVirtualHelper::Lock" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::VirtualLock( lpAddress, dwSize ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CVirtualHelper::Protect( void* lpAddress, Cmp_ulong_ptr dwSize, unsigned long flNewProtect, unsigned long* lpflOldProtect )
	{
		_WINQ_FCONTEXT( "CVirtualHelper::Protect" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::VirtualProtect( lpAddress, dwSize, flNewProtect, lpflOldProtect ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CVirtualHelper::ProtectEx( void* hProcess, void* lpAddress, Cmp_ulong_ptr dwSize, unsigned long flNewProtect, unsigned long* lpflOldProtect )
	{
		_WINQ_FCONTEXT( "CVirtualHelper::ProtectEx" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::VirtualProtectEx( hProcess, lpAddress, dwSize, flNewProtect, lpflOldProtect ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	Cmp_ulong_ptr CVirtualHelper::Query( const void* lpAddress, nsWin32::PMEMORY_BASIC_INFORMATION lpBuffer, Cmp_ulong_ptr dwLength )
	{
		_WINQ_FCONTEXT( "CVirtualHelper::Query" );
		SIZE_T Result = 0;
		__QOR_PROTECT
		{
			Result = CKernel32::VirtualQuery( lpAddress, reinterpret_cast< ::PMEMORY_BASIC_INFORMATION >( lpBuffer ), dwLength );
		}__QOR_ENDPROTECT
		return Result;
	}

	//------------------------------------------------------------------------------
	Cmp_ulong_ptr CVirtualHelper::QueryEx( void* hProcess, const void* lpAddress, nsWin32::PMEMORY_BASIC_INFORMATION lpBuffer, Cmp_ulong_ptr dwLength )
	{
		_WINQ_FCONTEXT( "CVirtualHelper::QueryEx" );
		SIZE_T Result = 0;
		__QOR_PROTECT
		{
			Result = CKernel32::VirtualQueryEx( hProcess, lpAddress, reinterpret_cast< ::PMEMORY_BASIC_INFORMATION >( lpBuffer ), dwLength );
		}__QOR_ENDPROTECT
		return Result;
	}

	//------------------------------------------------------------------------------
	bool CVirtualHelper::Unlock( void* lpAddress, Cmp_ulong_ptr dwSize )
	{
		_WINQ_FCONTEXT( "CVirtualHelper::Unlock" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::VirtualUnlock( lpAddress, dwSize ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

}//nsWin32

