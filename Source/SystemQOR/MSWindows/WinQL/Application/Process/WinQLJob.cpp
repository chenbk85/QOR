//WinQLJob.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/Process/WinQLJob.h"
#include "WinQL/Application/Process/WinQLProcess.h"
#include "WinQAPI/Kernel32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CJob );

	//--------------------------------------------------------------------------------
	CJob::refType CreateJob( nsWin32::LPSECURITY_ATTRIBUTES lpJobAttributes, const CTString& strJobName )
	{
		_WINQ_SFCONTEXT( "CJob::CreateJob" );
		return CJob::refType( new CJob( lpJobAttributes, strJobName ) );
	}

	//--------------------------------------------------------------------------------
	CJob::refType OpenJob( unsigned long ulAccess, bool bInheritHandles, const CTString& strJobName )
	{
		_WINQ_SFCONTEXT( "CJob::OpenJob" );
		return CJob::refType( new CJob( ulAccess, bInheritHandles, strJobName ) );
	}

	//--------------------------------------------------------------------------------
	CJob::CJob( nsWin32::LPSECURITY_ATTRIBUTES lpJobAttributes, const CTString& strName )
	{
		_WINQ_FCONTEXT( "CJob::CJob" );
		__QOR_PROTECT
		{
			m_Handle = CKernel32::CreateJobObject( reinterpret_cast< ::LPSECURITY_ATTRIBUTES >( lpJobAttributes ), strName );
			m_Handle.Attach( this );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CJob::CJob( unsigned long dwDesiredAccess, bool bInheritHandles, const CTString& strName )
	{
		_WINQ_FCONTEXT( "CJob::CJob" );
		__QOR_PROTECT
		{
			m_Handle = CKernel32::OpenJobObject( dwDesiredAccess, bInheritHandles ? TRUE : FALSE, strName );
			m_Handle.Attach( this );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CJob::~CJob()
	{
		_WINQ_FCONTEXT( "CJob::~CJob" );
		__QOR_PROTECT
		{
			CKernel32::CloseHandle( m_Handle.Use() );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	bool CJob::AssignProcess( CProcess& Process )
	{
		_WINQ_FCONTEXT( "CJob::AssignProcess" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::AssignProcessToJobObject( m_Handle.Use(), const_cast< void* >( Process.ProcessHandle().Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CJob::ContainsProcess( CProcess& Process, int& iResult )
	{
		_WINQ_FCONTEXT( "CJob::ContainsProcess" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::IsProcessInJob( const_cast< void* >( Process.ProcessHandle().Use() ), m_Handle.Use(), &iResult ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CJob::QueryInformation( CJob::eJobObjectInfoClass JobObjectInfoClass, void* lpJobObjectInfo, unsigned long cbJobObjectInfoLength, unsigned long* lpReturnLength )
	{
		_WINQ_FCONTEXT( "CJob::QueryInformation" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::QueryInformationJobObject( m_Handle.Use(), static_cast< ::JOBOBJECTINFOCLASS >( JobObjectInfoClass ), lpJobObjectInfo, cbJobObjectInfoLength, lpReturnLength ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CJob::SetInformationJobObject( CJob::eJobObjectInfoClass JobObjectInfoClass, void* lpJobObjectInfo, unsigned long cbJobObjectInfoLength )
	{
		_WINQ_FCONTEXT( "CJob::SetInformationJobObject" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetInformationJobObject( m_Handle.Use(), static_cast< ::JOBOBJECTINFOCLASS >( JobObjectInfoClass ), lpJobObjectInfo, cbJobObjectInfoLength ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CJob::Terminate( unsigned int uExitCode )
	{
		_WINQ_FCONTEXT( "CJob::Terminate" );				
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::TerminateJobObject( m_Handle.Use(), uExitCode ) ? true : false;
			delete this;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	nsCodeQOR::CTLRef< CJob::sJobObjectBasicAccountInformation > CJob::GetBasicAccountingInformation( void )
	{
		_WINQ_FCONTEXT( "CJob::GetBasicAccountingInformation" );
		nsCodeQOR::CTLRef< CJob::sJobObjectBasicAccountInformation > refResult;
		__QOR_PROTECT
		{
			refResult = new sJobObjectBasicAccountInformation;
			unsigned long ulLenCheck = 0;
			QueryInformation( JobObjectBasicAccountingInformation, refResult.operator nsWin32::CJob::sJobObjectBasicAccountInformation *(), sizeof( sJobObjectBasicAccountInformation ), &ulLenCheck );
			if( ulLenCheck != sizeof( sJobObjectBasicAccountInformation ) )
			{
				//TODO: Raise Error
				refResult.Detach();
			}
		}__QOR_ENDPROTECT
		return refResult;
	}

	//--------------------------------------------------------------------------------
	nsCodeQOR::CTLRef< CJob::sJobObjectBasicAndIOAccountingInformation > CJob::GetBasicAndIOAccountingInformation( void )
	{
		_WINQ_FCONTEXT( "CJob::GetBasicAndIOAccountingInformation" );
		nsCodeQOR::CTLRef< CJob::sJobObjectBasicAndIOAccountingInformation > refResult;
		__QOR_PROTECT
		{
			refResult = new sJobObjectBasicAndIOAccountingInformation;
			unsigned long ulLenCheck = 0;
			QueryInformation( JobObjectBasicAndIoAccountingInformation, refResult.operator nsWin32::CJob::sJobObjectBasicAndIOAccountingInformation *(), sizeof( sJobObjectBasicAndIOAccountingInformation ), &ulLenCheck );
			if( ulLenCheck != sizeof( sJobObjectBasicAndIOAccountingInformation ) )
			{
				//TODO: Raise Error
				refResult.Detach();
			}
		}__QOR_ENDPROTECT
		return refResult;
	}

	//--------------------------------------------------------------------------------
	nsCodeQOR::CTLRef< CJob::sJobObjectBasicLimitInformation > CJob::GetBasicLimitInformation( void )
	{
		_WINQ_FCONTEXT( "CJob::GetBasicLimitInformation" );
		nsCodeQOR::CTLRef< CJob::sJobObjectBasicLimitInformation > refResult;
		__QOR_PROTECT
		{
			refResult = new sJobObjectBasicLimitInformation;
			unsigned long ulLenCheck = 0;
			QueryInformation( JobObjectBasicLimitInformation, refResult.operator nsWin32::CJob::sJobObjectBasicLimitInformation *(), sizeof( sJobObjectBasicLimitInformation ), &ulLenCheck );
			if( ulLenCheck != sizeof( sJobObjectBasicLimitInformation ) )
			{
				//TODO: Raise Error
				refResult.Detach();
			}
		}__QOR_ENDPROTECT
		return refResult;
	}

	//--------------------------------------------------------------------------------
	bool CJob::SetBasicLimitInformation( nsCodeQOR::CTLRef< CJob::sJobObjectBasicLimitInformation > BasicLimitInformation )
	{
		_WINQ_FCONTEXT( "CJob::SetBasicLimitInformation" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = SetInformationJobObject( JobObjectBasicLimitInformation, BasicLimitInformation.operator nsWin32::CJob::sJobObjectBasicLimitInformation *(), sizeof( sJobObjectBasicLimitInformation ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	nsCodeQOR::CTLRef< CJob::sJobObjectExtendedLimitInformation > CJob::GetExtendedLimitInformation( void )
	{
		_WINQ_FCONTEXT( "CJob::GetExtendedLimitInformation" );
		nsCodeQOR::CTLRef< CJob::sJobObjectExtendedLimitInformation > refResult;
		__QOR_PROTECT
		{
			refResult = new sJobObjectExtendedLimitInformation;
			unsigned long ulLenCheck = 0;
			QueryInformation( JobObjectExtendedLimitInformation, refResult.operator nsWin32::CJob::sJobObjectExtendedLimitInformation *(), sizeof( sJobObjectExtendedLimitInformation ), &ulLenCheck );
			if( ulLenCheck != sizeof( sJobObjectExtendedLimitInformation ) )
			{
				//TODO: Raise Error
				refResult.Detach();
			}
		}__QOR_ENDPROTECT
		return refResult;
	}

	//--------------------------------------------------------------------------------
	bool CJob::SetExtendedLimitInformation( nsCodeQOR::CTLRef< sJobObjectExtendedLimitInformation > ExtendedLimitInformation )
	{
		_WINQ_FCONTEXT( "CJob::SetExtendedLimitInformation" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = SetInformationJobObject( JobObjectExtendedLimitInformation, &ExtendedLimitInformation, sizeof(sJobObjectExtendedLimitInformation) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	nsCodeQOR::CTLRef< CJob::sJobObjectNotificationLimitInformation > CJob::GetNotificationLimitInformation( void )
	{
		_WINQ_FCONTEXT( "CJob::GetNotificationLimitInformation" );
		nsCodeQOR::CTLRef< CJob::sJobObjectNotificationLimitInformation > refResult;
		__QOR_PROTECT
		{
			refResult = new sJobObjectNotificationLimitInformation;
			unsigned long ulLenCheck = 0;
			QueryInformation( JobObjectNotificationLimitInformation, refResult.operator nsWin32::CJob::sJobObjectNotificationLimitInformation *(), sizeof( sJobObjectNotificationLimitInformation ), &ulLenCheck );
			if( ulLenCheck != sizeof( sJobObjectNotificationLimitInformation ) )
			{
				//TODO: Raise Error
				refResult.Detach();
			}
		}__QOR_ENDPROTECT
		return refResult;
	}

	//--------------------------------------------------------------------------------
	bool CJob::SetNotificationLimitInformation( nsCodeQOR::CTLRef< CJob::sJobObjectNotificationLimitInformation > NotificationLimitInformation )
	{
		_WINQ_FCONTEXT( "CJob::SetNotificationLimitInformation" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = SetInformationJobObject( JobObjectNotificationLimitInformation, &NotificationLimitInformation, sizeof( sJobObjectNotificationLimitInformation ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	nsCodeQOR::CTLRef< CJob::sJobObjectLimitViolationInformation > CJob::GetLimitViolationInformation( void )
	{
		_WINQ_FCONTEXT( "CJob::GetLimitViolationInformation" );
		nsCodeQOR::CTLRef< CJob::sJobObjectLimitViolationInformation > refResult;
		__QOR_PROTECT
		{
			refResult = new sJobObjectLimitViolationInformation;
			unsigned long ulLenCheck = 0;
			QueryInformation( JobObjectLimitViolationInformation, refResult.operator nsWin32::CJob::sJobObjectLimitViolationInformation *(), sizeof( sJobObjectLimitViolationInformation ), &ulLenCheck );
			if( ulLenCheck != sizeof( sJobObjectLimitViolationInformation ) )
			{
				//TODO: Raise Error
				refResult.Detach();
			}
		}__QOR_ENDPROTECT
		return refResult;
	}

	//--------------------------------------------------------------------------------
	nsCodeQOR::CTLRef< nsCodeQOR::CTArray< Cmp_ulong_ptr > > CJob::GetBasicProcessIDList( void )
	{
		_WINQ_FCONTEXT( "CJob::GetBasicProcessIDList" );
		nsCodeQOR::CTLRef< nsCodeQOR::CTArray< Cmp_ulong_ptr > > refResult;
		__QOR_PROTECT
		{
			sJobObjectBasicProcessIDList ProcessListHeader;
			ProcessListHeader.NumberOfAssignedProcesses = 1;
			ProcessListHeader.NumberOfProcessIdsInList = 0;
			ProcessListHeader.ProcessIdList[ 0 ] = (Cmp_ulong_ptr)(-1);
			unsigned long ulProcessIDCount = 0;

			QueryInformation( JobObjectBasicProcessIdList, &ProcessListHeader, sizeof( ProcessListHeader ), &ulProcessIDCount );
			//This will fail and need to be caught by an Expected handler
			//Then try to find out or guess how many are really needed

			//TODO:

			refResult = new nsCodeQOR::CTArray< Cmp_ulong_ptr >( 256 );
			refResult->Validate( ulProcessIDCount );
		}__QOR_ENDPROTECT
		return refResult;
	}

	//--------------------------------------------------------------------------------
	CJob::sJobObjectBasicUIRestrictions CJob::GetUILimits( void )
	{
		_WINQ_FCONTEXT( "CJob::GetUILimits" );
		sJobObjectBasicUIRestrictions sResult;
		sResult.UIRestrictionsClass = 0;
		__QOR_PROTECT
		{
			unsigned long ulLenCheck = 0;
			QueryInformation( JobObjectBasicUIRestrictions, &sResult, sizeof( sJobObjectBasicUIRestrictions ), &ulLenCheck );

			if( ulLenCheck != sizeof( sJobObjectBasicUIRestrictions ) )
			{
				//TODO: Raise Error
			}
		}__QOR_ENDPROTECT
		return sResult;
	}

	//--------------------------------------------------------------------------------
	bool CJob::SetUILimits( CJob::sJobObjectBasicUIRestrictions& UIRestrictions )
	{
		_WINQ_FCONTEXT( "CJob::SetUILimits" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = SetInformationJobObject( JobObjectBasicUIRestrictions, &UIRestrictions, sizeof( sJobObjectBasicUIRestrictions ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	CJob::sJobObjectEndOfJobTimeInformation CJob::GetEndOfJobTimeInfo( void )
	{
		_WINQ_FCONTEXT( "CJob::GetEndOfJobTimeInfo" );
		sJobObjectEndOfJobTimeInformation sResult;
		__QOR_PROTECT
		{
			unsigned long ulLenCheck = 0;
			QueryInformation( JobObjectEndOfJobTimeInformation, &sResult, sizeof( sJobObjectEndOfJobTimeInformation ), &ulLenCheck );

			if( ulLenCheck != sizeof( sJobObjectEndOfJobTimeInformation ) )
			{
				//TODO: Raise Error
			}
		}__QOR_ENDPROTECT
		return sResult;
	}

	//--------------------------------------------------------------------------------
	bool CJob::SetEndOfJobTimeInfo( CJob::sJobObjectEndOfJobTimeInformation& EndOfJobTimeInformation )
	{
		_WINQ_FCONTEXT( "CJob::SetEndOfJobTimeInfo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = SetInformationJobObject( JobObjectEndOfJobTimeInformation, &EndOfJobTimeInformation, sizeof( sJobObjectEndOfJobTimeInformation ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	CJob::sJobObjectAssociateCompletionPort CJob::GetCompletionPortInfo( void )
	{
		_WINQ_FCONTEXT( "CJob::GetCompletionPortInfo" );
		sJobObjectAssociateCompletionPort sResult;
		__QOR_PROTECT
		{
			unsigned long ulLenCheck = 0;
			QueryInformation( JobObjectAssociateCompletionPortInformation, &sResult, sizeof( sJobObjectAssociateCompletionPort ), &ulLenCheck );

			if( ulLenCheck != sizeof( sJobObjectAssociateCompletionPort ) )
			{
				//TODO: Raise Error
			}
		}__QOR_ENDPROTECT
		return sResult;
	}

	//--------------------------------------------------------------------------------
	bool CJob::SetCompletionPortInfo( CJob::sJobObjectAssociateCompletionPort& AssociateCompletionPort )
	{
		_WINQ_FCONTEXT( "CJob::SetCompletionPortInfo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = SetInformationJobObject( JobObjectAssociateCompletionPortInformation, &AssociateCompletionPort, sizeof( sJobObjectAssociateCompletionPort ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	CJob::sJobObjectJobSetInformation CJob::GetJobSetInfo( void )
	{
		_WINQ_FCONTEXT( "CJob::GetJobSetInfo" );
		sJobObjectJobSetInformation sResult;
		__QOR_PROTECT
		{
			unsigned long ulLenCheck = 0;
			QueryInformation( JobObjectJobSetInformation, &sResult, sizeof( sJobObjectJobSetInformation ), &ulLenCheck );

			if( ulLenCheck != sizeof( sJobObjectJobSetInformation ) )
			{
				//TODO: Raise Error
			}
		}__QOR_ENDPROTECT
		return sResult;
	}

	//--------------------------------------------------------------------------------
	CJob::sJobObjectCPURateControlInformation CJob::GetCPURateControlInfo( void )
	{
		_WINQ_FCONTEXT( "CJob::GetCPURateControlInfo" );
		sJobObjectCPURateControlInformation sResult;
		__QOR_PROTECT
		{
			unsigned long ulLenCheck = 0;
			QueryInformation( JobObjectCpuRateControlInformation, &sResult, sizeof( sJobObjectCPURateControlInformation ), &ulLenCheck );

			if( ulLenCheck != sizeof( sJobObjectCPURateControlInformation ) )
			{
				//TODO: Raise Error
			}
		}__QOR_ENDPROTECT
		return sResult;
	}

	//--------------------------------------------------------------------------------
	bool CJob::SetCPURateControlInfo( CJob::sJobObjectCPURateControlInformation& CPURateControlInformation )
	{
		_WINQ_FCONTEXT( "CJob::SetCPURateControlInfo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = SetInformationJobObject( JobObjectCpuRateControlInformation, &CPURateControlInformation, sizeof( sJobObjectCPURateControlInformation ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CJob::GetUILimitHandles( void )
	{
		_WINQ_FCONTEXT( "CJob::GetUILimitHandles" );
		bool bResult = false;
		__QOR_PROTECT
		{
			sJobObjectBasicUIRestrictions UILimits = GetUILimits();
			bResult = ( ( UILimits.UIRestrictionsClass & eJobObjectUILimit_Handles ) == eJobObjectUILimit_Handles ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}
	
	//--------------------------------------------------------------------------------
	bool CJob::SetUILimitHandles( bool bLimit )
	{
		_WINQ_FCONTEXT( "CJob::SetUILimitHandles" );
		bool bResult = false;
		__QOR_PROTECT
		{
			sJobObjectBasicUIRestrictions UILimits = GetUILimits();
			if( bLimit )
			{
				UILimits.UIRestrictionsClass |= eJobObjectUILimit_Handles;
			}
			else
			{
				UILimits.UIRestrictionsClass &= (~eJobObjectUILimit_Handles);
			}
			bResult = SetInformationJobObject( JobObjectBasicUIRestrictions, &UILimits, sizeof( sJobObjectBasicUIRestrictions ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CJob::GetUILimitReadClipboard( void )
	{
		_WINQ_FCONTEXT( "CJob::GetUILimitReadClipboard" );
		bool bResult = false;
		__QOR_PROTECT
		{
			sJobObjectBasicUIRestrictions UILimits = GetUILimits();
			bResult = ((UILimits.UIRestrictionsClass & eJobObjectUILimit_ReadClipboard ) == eJobObjectUILimit_ReadClipboard ) ? true  : false;
		}__QOR_ENDPROTECT
		return bResult;
	}
		
	//--------------------------------------------------------------------------------
	bool CJob::SetUILimitReadClipboard( bool bLimit )
	{
		_WINQ_FCONTEXT( "CJob::SetUILimitReadClipboard" );
		bool bResult = false;
		__QOR_PROTECT
		{
			sJobObjectBasicUIRestrictions UILimits = GetUILimits();
			if( bLimit )
			{
				UILimits.UIRestrictionsClass |= eJobObjectUILimit_ReadClipboard;
			}
			else
			{
				UILimits.UIRestrictionsClass &= (~eJobObjectUILimit_ReadClipboard);
			}
			bResult = SetInformationJobObject( JobObjectBasicUIRestrictions, &UILimits, sizeof( sJobObjectBasicUIRestrictions ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CJob::GetUILimitWriteClipboard( void )
	{
		_WINQ_FCONTEXT( "CJob::GetUILimitWriteClipboard" );
		bool bResult = false;
		__QOR_PROTECT
		{
			sJobObjectBasicUIRestrictions UILimits = GetUILimits();
			bResult = ((UILimits.UIRestrictionsClass & eJobObjectUILimit_WriteClipboard ) == eJobObjectUILimit_WriteClipboard ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}
		
	//--------------------------------------------------------------------------------
	bool CJob::SetUILimitWriteClipboard( bool bLimit )
	{
		_WINQ_FCONTEXT( "CJob::SetUILimitWriteClipboard" );
		bool bResult = false;
		__QOR_PROTECT
		{
			sJobObjectBasicUIRestrictions UILimits = GetUILimits();
			if( bLimit )
			{
				UILimits.UIRestrictionsClass |= eJobObjectUILimit_WriteClipboard;
			}
			else
			{
				UILimits.UIRestrictionsClass &= (~eJobObjectUILimit_WriteClipboard);
			}
			bResult = SetInformationJobObject( JobObjectBasicUIRestrictions, &UILimits, sizeof( sJobObjectBasicUIRestrictions ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CJob::GetUILimitSystemParameters( void )
	{
		_WINQ_FCONTEXT( "CJob::GetUILimitSystemParameters" );
		bool bResult = false;
		__QOR_PROTECT
		{
			sJobObjectBasicUIRestrictions UILimits = GetUILimits();
			bResult = ((UILimits.UIRestrictionsClass & eJobObjectUILimit_SystemParameters ) == eJobObjectUILimit_SystemParameters ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}
	
	//--------------------------------------------------------------------------------
	bool CJob::SetUILimitSystemParameters( bool bLimit )
	{
		_WINQ_FCONTEXT( "CJob::SetUILimitSystemParameters" );
		bool bResult = false;
		__QOR_PROTECT
		{
			sJobObjectBasicUIRestrictions UILimits = GetUILimits();
			if( bLimit )
			{
				UILimits.UIRestrictionsClass |= eJobObjectUILimit_SystemParameters;
			}
			else
			{
				UILimits.UIRestrictionsClass &= (~eJobObjectUILimit_SystemParameters);
			}
			bResult = SetInformationJobObject( JobObjectBasicUIRestrictions, &UILimits, sizeof( sJobObjectBasicUIRestrictions ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CJob::GetUILimitDisplaySettings( void )
	{
		_WINQ_FCONTEXT("CJob::GetUILimitDisplaySettings" );
		bool bResult = false;
		__QOR_PROTECT
		{
			sJobObjectBasicUIRestrictions UILimits = GetUILimits();
			bResult = ((UILimits.UIRestrictionsClass & eJobObjectUILimit_DisplaySettings ) == eJobObjectUILimit_DisplaySettings ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}
	
	//--------------------------------------------------------------------------------
	bool CJob::SetUILimitDisplaySettings( bool bLimit )
	{
		_WINQ_FCONTEXT( "CJob::SetUILimitDisplaySettings" );
		bool bResult = false;
		__QOR_PROTECT
		{
			sJobObjectBasicUIRestrictions UILimits = GetUILimits();
			if( bLimit )
			{
				UILimits.UIRestrictionsClass |= eJobObjectUILimit_DisplaySettings;
			}
			else
			{
				UILimits.UIRestrictionsClass &= (~eJobObjectUILimit_DisplaySettings);
			}
			bResult = SetInformationJobObject( JobObjectBasicUIRestrictions, &UILimits, sizeof( sJobObjectBasicUIRestrictions ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CJob::GetUILimitGlobalAtoms( void )
	{
		_WINQ_FCONTEXT( "CJob::GetUILimitGlobalAtoms" );
		bool bResult = false;
		__QOR_PROTECT
		{
			sJobObjectBasicUIRestrictions UILimits = GetUILimits();
			bResult = ((UILimits.UIRestrictionsClass & eJobObjectUILimit_GlobalAtoms ) == eJobObjectUILimit_GlobalAtoms ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}
	
	//--------------------------------------------------------------------------------
	bool CJob::SetUILimitGlobalAtoms( bool bLimit )
	{
		_WINQ_FCONTEXT( "CJob::SetUILimitGlobalAtoms" );
		bool bResult = false;
		__QOR_PROTECT
		{
			sJobObjectBasicUIRestrictions UILimits = GetUILimits();
			if( bLimit )
			{
				UILimits.UIRestrictionsClass |= eJobObjectUILimit_GlobalAtoms;
			}
			else
			{
				UILimits.UIRestrictionsClass &= (~eJobObjectUILimit_GlobalAtoms);
			}
			bResult = SetInformationJobObject( JobObjectBasicUIRestrictions, &UILimits, sizeof( sJobObjectBasicUIRestrictions ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CJob::GetUILimitDesktop( void )
	{
		_WINQ_FCONTEXT( "CJob::GetUILimitDesktop" );
		bool bResult = false;
		__QOR_PROTECT
		{
			sJobObjectBasicUIRestrictions UILimits = GetUILimits();
			bResult = ((UILimits.UIRestrictionsClass & eJobObjectUILimit_Desktop ) == eJobObjectUILimit_Desktop ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}
	
	//--------------------------------------------------------------------------------
	bool CJob::SetUILimitDesktop( bool bLimit )
	{
		_WINQ_FCONTEXT( "CJob::SetUILimitDesktop" );
		bool bResult = false;
		__QOR_PROTECT
		{
			sJobObjectBasicUIRestrictions UILimits = GetUILimits();
			if( bLimit )
			{
				UILimits.UIRestrictionsClass |= eJobObjectUILimit_Desktop;
			}
			else
			{
				UILimits.UIRestrictionsClass &= (~eJobObjectUILimit_Desktop);
			}
			bResult = SetInformationJobObject( JobObjectBasicUIRestrictions, &UILimits, sizeof( sJobObjectBasicUIRestrictions ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CJob::GetUILimitExitWindows( void )
	{
		_WINQ_FCONTEXT( "CJob::GetUILimitExitWindows" );
		bool bResult = false;
		__QOR_PROTECT
		{
			sJobObjectBasicUIRestrictions UILimits = GetUILimits();
			bResult = ((UILimits.UIRestrictionsClass & eJobObjectUILimit_ExitWindows ) == eJobObjectUILimit_ExitWindows ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CJob::SetUILimitExitWindows( bool bLimit )
	{
		_WINQ_FCONTEXT( "CJob::SetUILimitExitWindows" );
		bool bResult = false;
		__QOR_PROTECT
		{
			sJobObjectBasicUIRestrictions UILimits = GetUILimits();
			if( bLimit )
			{
				UILimits.UIRestrictionsClass |= eJobObjectUILimit_ExitWindows;
			}
			else
			{
				UILimits.UIRestrictionsClass &= (~eJobObjectUILimit_ExitWindows);
			}
			bResult = SetInformationJobObject( JobObjectBasicUIRestrictions, &UILimits, sizeof( sJobObjectBasicUIRestrictions ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CJob::SetGroupInfo( nsCodeQOR::CTLRef< unsigned short > GroupInfo, unsigned int uiCount )
	{
		_WINQ_FCONTEXT( "CJob::SetGroupInfo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = SetInformationJobObject( JobObjectGroupInformation, GroupInfo.operator unsigned short *(), uiCount * sizeof( unsigned short ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CJob::SetGroupAffinityInfo( nsCodeQOR::CTLRef< CJob::sGroupAffinity > GroupAffinity, unsigned int uiCount )
	{
		_WINQ_FCONTEXT( "CJob::SetGroupAffinityInfo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = SetInformationJobObject( JobObjectGroupInformationEx, GroupAffinity.operator nsWin32::CJob::sGroupAffinity *(), uiCount * sizeof( sGroupAffinity ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

}//nsWin32

