//WinQLAtExit.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/Process/WinQLAtExit.h"
#include <stdlib.h>
#include <stddef.h>

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	CAtExit::CAtExit() : m_Size(0) , m_pBegin(0) , m_pEnd(0), m_Mutex( nsWin32::CMutex::Create_Mutex_Initial_Owner, 0, nsWin32::Standard_Rights_All )
	{
	}

	//--------------------------------------------------------------------------------
	CAtExit::~CAtExit()
	{
		::free( m_pBegin );
	}

	//--------------------------------------------------------------------------------
	int CAtExit::Append( Function func )
	{
#	if	( __CQOR_DEFINED_MULTITHREADED )
		nsSync::CMutexLock __lock( m_Mutex );
#	endif		

		if ( !m_pBegin || m_pEnd - m_pBegin == ptrdiff_t( m_Size - 1 ) )
		{
			if ( !Grow() )
			{
				return 1;
			}
		}

		*m_pEnd++ = func;

		return 0;
	}

	//--------------------------------------------------------------------------------
	void CAtExit::Invoke()
	{
#	if	( __CQOR_DEFINED_MULTITHREADED )
		nsSync::CMutexLock __lock( m_Mutex );
#	endif		

		while( m_pBegin != m_pEnd )
		{
			Function func = *( --m_pEnd );
			if ( func != 0 )
			{
				( *func )();
			}
		}

	}

	//--------------------------------------------------------------------------------
	bool CAtExit::Grow()
	{
		const size_t offset = m_pEnd - m_pBegin;
		Function* pnew = static_cast< Function* >( ::realloc( m_pBegin, ( m_Size + s_ChunkSize ) * sizeof( Function ) ) );

		if( pnew == 0 )
		{
			return false;
		}
		else
		{
			m_Size += s_ChunkSize;
			m_pBegin = pnew;
			m_pEnd = m_pBegin + offset;
			return true;
		}
	}

}//nsWin32

