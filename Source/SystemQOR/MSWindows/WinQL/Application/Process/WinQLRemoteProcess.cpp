//WinQLRemoteProcess.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/Process/WinQLRemoteProcess.h"
#include "WinQAPI/Kernel32.h"
#include "WinQAPI/User32.h"
#include "WinQAPI/PSAPI.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CRemoteProcess );

	//--------------------------------------------------------------------------------
	CRemoteProcess::refType CreateProcess( const TCHAR* lpApplicationName, TCHAR* lpCommandLine, nsWin32::LPSECURITY_ATTRIBUTES lpProcessAttributes, nsWin32::LPSECURITY_ATTRIBUTES lpThreadAttributes, bool bInheritHandles, unsigned long dwCreationFlags, void* lpEnvironment, const TCHAR* lpCurrentDirectory, nsWin32::LPSTARTUPINFO lpStartupInfo, nsWin32::ProcessInformation* lpProcessInformation )
	{
		_WINQ_SFCONTEXT( "CreateProcess" );
		return CRemoteProcess::refType( new CRemoteProcess( lpApplicationName, lpCommandLine, lpProcessAttributes, lpThreadAttributes, bInheritHandles, dwCreationFlags, lpEnvironment, lpCurrentDirectory, lpStartupInfo, lpProcessInformation ) );
	}

	//--------------------------------------------------------------------------------
	CRemoteProcess::refType OpenProcess( unsigned long dwDesiredAccess, bool bInheritHandle, unsigned long dwProcessId )
	{
		_WINQ_SFCONTEXT( "OpenProcess" );
		return CRemoteProcess::refType( new CRemoteProcess( dwDesiredAccess, bInheritHandle, dwProcessId ) );
	}

	//--------------------------------------------------------------------------------
	CRemoteProcess::CRemoteProcess( const TCHAR* lpApplicationName, TCHAR* lpCommandLine, nsWin32::LPSECURITY_ATTRIBUTES lpProcessAttributes, nsWin32::LPSECURITY_ATTRIBUTES lpThreadAttributes, bool bInheritHandles, unsigned long dwCreationFlags, void* lpEnvironment, const TCHAR* lpCurrentDirectory, nsWin32::LPSTARTUPINFO lpStartupInfo, nsWin32::ProcessInformation* lpProcessInformation )
	{
		_WINQ_FCONTEXT( "CRemoteProcess::CRemoteProcess" );
		__QOR_PROTECT
		{
			CKernel32::CreateProcess( lpApplicationName, lpCommandLine, reinterpret_cast< ::LPSECURITY_ATTRIBUTES >( lpProcessAttributes ), reinterpret_cast< ::LPSECURITY_ATTRIBUTES >( lpThreadAttributes ), bInheritHandles ? TRUE : FALSE, dwCreationFlags, lpEnvironment, lpCurrentDirectory, reinterpret_cast< ::LPSTARTUPINFO >( lpStartupInfo ), reinterpret_cast< ::LPPROCESS_INFORMATION >( lpProcessInformation ) );
			if( lpProcessInformation != 0 )
			{
				m_ProcessHandle = lpProcessInformation->hProcess;
				m_ProcessHandle.Attach( this );
				//m_Name = const_cast< TCHAR* >( lpApplicationName );
			}
			else
			{
				//TODO: Raise an error
			}
		}__QOR_ENDPROTECT

	}

	//--------------------------------------------------------------------------------
	CRemoteProcess::CRemoteProcess( unsigned long dwDesiredAccess, bool bInheritHandle, unsigned long dwProcessId )
	{
		_WINQ_FCONTEXT( "CRemoteProcess::CRemoteProcess" );
		m_ProcessHandle = CKernel32::OpenProcess( dwDesiredAccess, bInheritHandle ? TRUE : FALSE, dwProcessId );
		m_ProcessHandle.Attach( this );
	}

	//--------------------------------------------------------------------------------
	CRemoteProcess::~CRemoteProcess()
	{
		_WINQ_FCONTEXT( "CRemoteProcess::~CRemoteProcess" );
	}

	//--------------------------------------------------------------------------------
	bool CRemoteProcess::AssignToJobObject( CJob::refType refJob )
	{
		_WINQ_FCONTEXT( "CRemoteProcess::AssignToJobObject" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::AssignProcessToJobObject( refJob.operator(QOR_PP_SHARED_OBJECT_ACCESS).Handle().Use(), m_ProcessHandle.Use() ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CRemoteProcess::GetExitCode( unsigned long& ulExitCode )
	{
		_WINQ_FCONTEXT( "CRemoteProcess::GetExitCode" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetExitCodeProcess( m_ProcessHandle.Use(), &ulExitCode ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	unsigned long CRemoteProcess::GetPriorityClass()
	{
		_WINQ_FCONTEXT( "CProcess::GetPriorityClass" );
		unsigned long dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::GetPriorityClass( m_ProcessHandle.Use() );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//------------------------------------------------------------------------------
	bool CRemoteProcess::GetAffinityMask( Cmp_ulong_ptr& ulProcessAffinityMask, Cmp_ulong_ptr& ulSystemAffinityMask )
	{
		_WINQ_FCONTEXT( "CRemoteProcess::GetAffinityMask" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetProcessAffinityMask( m_ProcessHandle.Use(), &ulProcessAffinityMask, &ulSystemAffinityMask ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CRemoteProcess::GetHandleCount( unsigned long& ulHandleCount )
	{
		_WINQ_FCONTEXT( "CRemoteProcess::GetHandleCount" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetProcessHandleCount( m_ProcessHandle.Use(), &ulHandleCount ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CRemoteProcess::GetId()
	{
		_WINQ_FCONTEXT( "CRemoteProcess::GetId" );
		unsigned long dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::GetProcessId( m_ProcessHandle.Use() );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//------------------------------------------------------------------------------
	bool CRemoteProcess::GetIoCounters( nsWin32::IOCounters& IoCounters )
	{
		_WINQ_FCONTEXT( "CRemoteProcess::GetIoCounters" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetProcessIoCounters( m_ProcessHandle.Use(), reinterpret_cast< ::PIO_COUNTERS >( &IoCounters ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CRemoteProcess::GetPriorityBoost()
	{
		_WINQ_FCONTEXT( "CProcess::GetPriorityBoost" );
		bool bResult = false;
		__QOR_PROTECT
		{
			int iPriorityBoost = 0;
			bResult = CKernel32::GetProcessPriorityBoost( m_ProcessHandle.Use(), &iPriorityBoost ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CRemoteProcess::GetTimes( nsWin32::FILETIME& CreationTime, nsWin32::FILETIME& ExitTime, nsWin32::FILETIME& KernelTime, nsWin32::FILETIME& UserTime )
	{
		_WINQ_FCONTEXT( "CRemoteProcess::GetTimes" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetProcessTimes( m_ProcessHandle.Use(), reinterpret_cast< ::LPFILETIME >( &CreationTime ), reinterpret_cast< ::LPFILETIME >( &ExitTime ), reinterpret_cast< ::LPFILETIME >( &KernelTime ), reinterpret_cast< ::LPFILETIME >( &UserTime ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	unsigned long CRemoteProcess::GetVersion()
	{
		_WINQ_SFCONTEXT( "CRemoteProcess::GetVersion" );
		unsigned long dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::GetProcessVersion( GetId() );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//------------------------------------------------------------------------------
	bool CRemoteProcess::GetWorkingSetSize( Cmp_ulong_ptr& ulMinimumWorkingSetSize, Cmp_ulong_ptr& ulMaximumWorkingSetSize )
	{
		_WINQ_FCONTEXT( "CRemoteProcess::GetWorkingSetSize" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetProcessWorkingSetSize( m_ProcessHandle.Use(), &ulMinimumWorkingSetSize, &ulMaximumWorkingSetSize ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CRemoteProcess::GetWorkingSetSizeEx( Cmp_ulong_ptr& ulMinimumWorkingSetSize, Cmp_ulong_ptr& ulMaximumWorkingSetSize, unsigned long& ulFlags )
	{
		_WINQ_FCONTEXT( "CRemoteProcess::GetWorkingSetSizeEx" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetProcessWorkingSetSizeEx( m_ProcessHandle.Use(), &ulMinimumWorkingSetSize, &ulMaximumWorkingSetSize, &ulFlags ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CRemoteProcess::IsInJob( CJob::refType refJob, int& iResult )
	{
		_WINQ_FCONTEXT( "CRemoteProcess::IsInJob" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::IsProcessInJob( m_ProcessHandle.Use(), refJob.operator(QOR_PP_SHARED_OBJECT_ACCESS).Handle().Use(), &iResult ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CRemoteProcess::IsWow64( int& Wow64Process )
	{
		_WINQ_FCONTEXT( "CRemoteProcess::IsWow64" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::IsWow64Process( m_ProcessHandle.Use(), &Wow64Process ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CRemoteProcess::QueryFullImageName( unsigned long dwFlags, CTString& strName )
	{
		_WINQ_FCONTEXT( "CRemoteProcess::QueryFullImageName" );
		bool bResult = false;
		__QOR_PROTECT
		{
			unsigned long ulSize = MaxPath;
			bResult = CKernel32::QueryFullProcessImageName( m_ProcessHandle.Use(), dwFlags, strName.GetBufferSetLength( MaxPath ), &ulSize ) ? true : false;

			if( bResult )
			{
				strName.ValidateBuffer( static_cast< unsigned short >( ulSize ) );
			}
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CRemoteProcess::QueryAffinityUpdateMode( unsigned long& ulFlags )
	{
		_WINQ_FCONTEXT( "CRemoteProcess::QueryAffinityUpdateMode" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::QueryProcessAffinityUpdateMode( m_ProcessHandle.Use(), &ulFlags ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CRemoteProcess::QueryCycleTime( Cmp_unsigned__int64& CycleTime )
	{
		_WINQ_FCONTEXT( "CRemoteProcess::QueryCycleTime" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::QueryProcessCycleTime( m_ProcessHandle.Use(), &CycleTime ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CRemoteProcess::SetPriorityClass( unsigned long dwPriorityClass )
	{
		_WINQ_FCONTEXT( "CRemoteProcess::SetPriorityClass" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetPriorityClass( m_ProcessHandle.Use(), dwPriorityClass ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CRemoteProcess::SetAffinityMask( Cmp_ulong_ptr dwProcessAffinityMask )
	{
		_WINQ_FCONTEXT( "CRemoteProcess::SetAffinityMask" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetProcessAffinityMask( m_ProcessHandle.Use(), dwProcessAffinityMask ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CRemoteProcess::SetAffinityUpdateMode( unsigned long dwFlags )
	{
		_WINQ_FCONTEXT( "CRemoteProcess::SetAffinityUpdateMode" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetProcessAffinityUpdateMode( m_ProcessHandle.Use(), dwFlags ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CRemoteProcess::SetPriorityBoost( bool bDisablePriorityBoost )
	{
		_WINQ_FCONTEXT( "CRemoteProcess::SetPriorityBoost" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetProcessPriorityBoost( m_ProcessHandle.Use(), bDisablePriorityBoost ? 1 : 0 ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CRemoteProcess::SetWorkingSetSize( Cmp_ulong_ptr dwMinimumWorkingSetSize, Cmp_ulong_ptr dwMaximumWorkingSetSize )
	{
		_WINQ_FCONTEXT( "CRemoteProcess::SetWorkingSetSize" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetProcessWorkingSetSize( m_ProcessHandle.Use(), dwMinimumWorkingSetSize, dwMaximumWorkingSetSize ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CRemoteProcess::SetWorkingSetSizeEx( Cmp_ulong_ptr dwMinimumWorkingSetSize, Cmp_ulong_ptr dwMaximumWorkingSetSize, unsigned long Flags )
	{
		_WINQ_FCONTEXT( "CRemoteProcess::SetWorkingSetSizeEx" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetProcessWorkingSetSizeEx( m_ProcessHandle.Use(), dwMinimumWorkingSetSize, dwMaximumWorkingSetSize, Flags ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CRemoteProcess::Terminate( unsigned int uExitCode )
	{
		_WINQ_FCONTEXT( "CRemoteProcess::Terminate" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::TerminateProcess( m_ProcessHandle.Use(), uExitCode ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	unsigned long CRemoteProcess::GetGuiResources( unsigned long uiFlags )
	{
		_WINQ_FCONTEXT( "CRemoteProcess::GetGuiResources" );
		unsigned long dwResult = 0;
		__QOR_PROTECT
		{
			CUser32 Library;				
			dwResult = Library.GetGuiResources( m_ProcessHandle.Use(), uiFlags );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//------------------------------------------------------------------------------
	unsigned long CRemoteProcess::WaitForInputIdle( unsigned long dwMilliseconds )
	{
		_WINQ_FCONTEXT( "CRemoteProcess::WaitForInputIdle" );
		unsigned long dwResult = 0;
		__QOR_PROTECT
		{
			CUser32 Library;
			dwResult = Library.WaitForInputIdle( m_ProcessHandle.Use(), dwMilliseconds );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//------------------------------------------------------------------------------
	bool CRemoteProcess::ReadMemory( const void* lpBaseAddress, void* lpBuffer, Cmp_ulong_ptr nSize, Cmp_ulong_ptr& ulNumberOfBytesRead )
	{
		_WINQ_FCONTEXT( "CRemoteProcess::ReadMemory" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::ReadProcessMemory( m_ProcessHandle.Use(), lpBaseAddress, lpBuffer, nSize, &ulNumberOfBytesRead ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CRemoteProcess::WriteMemory( void* lpBaseAddress, const void* lpBuffer, Cmp_ulong_ptr nSize, Cmp_ulong_ptr& ulNumberOfBytesWritten )
	{
		_WINQ_FCONTEXT( "CRemoteProcess::WriteMemory" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::WriteProcessMemory( m_ProcessHandle.Use(), lpBaseAddress, lpBuffer, nSize, &ulNumberOfBytesWritten ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CRemoteProcess::FlushInstructionCache( const void* lpBaseAddress, Cmp_ulong_ptr dwSize )
	{
		_WINQ_FCONTEXT( "CRemoteProcess::FlushInstructionCache" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::FlushInstructionCache( m_ProcessHandle.Use(), lpBaseAddress, dwSize ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CRemoteProcess::IsBeingDebugged( int& DebuggerPresent )
	{
		_WINQ_FCONTEXT( "CRemoteProcess::CheckRemoteDebuggerPresent" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::CheckRemoteDebuggerPresent( m_ProcessHandle.Use(), &DebuggerPresent ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CRemoteProcess::DebugBreak()
	{
		_WINQ_FCONTEXT( "CRemoteProcess::DebugBreak" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::DebugBreakProcess( m_ProcessHandle.Use() ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

}//nsWin32
