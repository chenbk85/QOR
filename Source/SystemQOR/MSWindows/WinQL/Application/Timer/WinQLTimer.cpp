//WinQLTimer.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/WinQL.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: saved in member for later use" );
#include "WinQL/Application/Timer/WinQLTimer.h"
__QCMP_WARNING_POP
#include "WinQAPI/User32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CTimer );

	//--------------------------------------------------------------------------------
	CTimer::CTimer( COSWindow::refType Wnd, Cmp_uint_ptr nIDEvent, unsigned int uElapse, nsWin32::TimerCallback lpTimerFunc, bool* pbResult ) : m_User32Library( CUser32::Instance() )
	{
		_WINQ_FCONTEXT( "CTimer::CTimer" );
		m_pResult = pbResult;
		m_Wnd = Wnd;
		Reset( nIDEvent, uElapse, lpTimerFunc );
	}

	//--------------------------------------------------------------------------------
	CTimer::~CTimer()
	{				
		_WINQ_FCONTEXT( "CTimer::~CTimer" );
		BOOL bResult = FALSE;
		__QOR_PROTECT
		{
			bResult = m_User32Library.KillTimer( reinterpret_cast< HWND >( m_Wnd->Handle()->Use() ), m_uTimerId );
			if( m_pResult != 0 )
			{
				*m_pResult = bResult ? true : false; 
			}
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	void CTimer::Reset( Cmp_uint_ptr nIDEvent, unsigned int uElapse, nsWin32::TimerCallback lpTimerFunc )
	{
		_WINQ_FCONTEXT( "CTimer::Reset" );
		__QOR_PROTECT
		{
			m_uTimerId = m_User32Library.SetTimer( reinterpret_cast< HWND >( m_Wnd->Handle()->Use() ), nIDEvent, uElapse, reinterpret_cast< TIMERPROC >( lpTimerFunc ) );
			if( !m_Wnd->Handle()->IsNull() )
			{
				m_uTimerId = nIDEvent;
			}				
		}__QOR_ENDPROTECT
	}

}//nsWin32
