//WinQLWaitableTimer.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/Timer/WinQLWaitableTimer.h"
#include "WinQAPI/Kernel32.h"

//------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CWaitableTimer );

	//------------------------------------------------------------------------------
	CWaitableTimer::CWaitableTimer( bool bManualReset )
	{
		_WINQ_FCONTEXT( "CWaitableTimer::CWaitableTimer" );
		__QOR_PROTECT
		{
			bool bAlreadyExists = false;
			m_Handle = CKernel32::CreateWaitableTimer( 0, bManualReset ? TRUE : FALSE, 0, bAlreadyExists );
		}__QOR_ENDPROTECT
	}

	//------------------------------------------------------------------------------
	CWaitableTimer::CWaitableTimer( const CWaitableTimer& src )
	{
		_WINQ_FCONTEXT( "CWaitableTimer::CWaitableTimer" );
		__QOR_PROTECT
		{
			*this = src;
		}__QOR_ENDPROTECT
	}

	//------------------------------------------------------------------------------
	CWaitableTimer& CWaitableTimer::operator = ( const CWaitableTimer& src )
	{
		_WINQ_FCONTEXT( "CWaitableTimer::operator =" );
		if( &src != this )
		{
			m_Handle = src.m_Handle;
		}
		return *this;
	}

	//------------------------------------------------------------------------------
	CWaitableTimer::~CWaitableTimer()
	{
		_WINQ_FCONTEXT( "CWaitableTimer::~CWaitableTimer" );
	}

	//------------------------------------------------------------------------------
	CWaitableTimer::CWaitableTimer( nsWin32::LPSECURITY_ATTRIBUTES lpTimerAttributes, bool bManualReset, const TCHAR* lpTimerName, bool& bAlreadyExists )
	{
		_WINQ_FCONTEXT( "CWaitableTimer::CWaitableTimer" );
		__QOR_PROTECT
		{
			m_Handle = CKernel32::CreateWaitableTimer( reinterpret_cast< ::LPSECURITY_ATTRIBUTES >( lpTimerAttributes ), bManualReset ? TRUE : FALSE, lpTimerName, bAlreadyExists );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CWaitableTimer::CWaitableTimer( nsWin32::LPSECURITY_ATTRIBUTES lpTimerAttributes, const TCHAR* lpTimerName, unsigned long dwFlags, unsigned long dwDesiredAccess, bool& bAlreadyExists )
	{
		_WINQ_FCONTEXT( "CWaitableTimer::CWaitableTimer" );
		__QOR_PROTECT
		{
			m_Handle = CKernel32::CreateWaitableTimerEx( reinterpret_cast< ::LPSECURITY_ATTRIBUTES >( lpTimerAttributes ), lpTimerName, dwFlags, dwDesiredAccess, bAlreadyExists );
		}__QOR_ENDPROTECT
	}

	//------------------------------------------------------------------------------
	CWaitableTimer::CWaitableTimer( unsigned long dwDesiredAccess, bool bInheritHandle, const TCHAR* lpTimerName )
	{
		_WINQ_FCONTEXT( "CWaitableTimer::CWaitableTimer" );
		__QOR_PROTECT
		{
			m_Handle = CKernel32::OpenWaitableTimer( dwDesiredAccess, bInheritHandle ? TRUE : FALSE, lpTimerName );
		}__QOR_ENDPROTECT
	}

	//------------------------------------------------------------------------------
	bool CWaitableTimer::Set( const nsWin32::LARGE_INTEGER* pDueTime, long lPeriod, nsWin32::PTIMERAPCROUTINE pfnCompletionRoutine, void* lpArgToCompletionRoutine, bool fResume )
	{
		_WINQ_FCONTEXT( "CWaitableTimer::Set" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetWaitableTimer( m_Handle.Use(), reinterpret_cast< ::LARGE_INTEGER* >( const_cast< nsWin32::LARGE_INTEGER* >( pDueTime ) ), lPeriod, reinterpret_cast< ::PTIMERAPCROUTINE >( pfnCompletionRoutine ), lpArgToCompletionRoutine, fResume ? TRUE : FALSE ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CWaitableTimer::Cancel()
	{
		_WINQ_FCONTEXT( "CWaitableTimer::Cancel" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::CancelWaitableTimer( m_Handle.Use() ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	unsigned long CWaitableTimer::Wait( bool bAlertable )
	{
		_WINQ_FCONTEXT( "CWaitableTimer::Wait" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::WaitForSingleObjectEx( m_Handle.Use(), INFINITE, bAlertable ? TRUE : FALSE );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//------------------------------------------------------------------------------
	nsCodeQOR::CTLRef< CSyncHandle > CWaitableTimer::Handle( void )
	{
		_WINQ_FCONTEXT( "CWaitableTimer::Handle" );
		nsCodeQOR::CTLRef< CSyncHandle > Ref( &m_Handle, false );
		return Ref;
	}

}//nsWin32
