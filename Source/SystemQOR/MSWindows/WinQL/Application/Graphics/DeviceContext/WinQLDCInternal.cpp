//WinQLDCinternal.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "CompilerQOR.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: stored in member for later use" )
#include "WinQL/Application/Graphics/DeviceContext/WinQLDCInternal.h"
__QCMP_WARNING_POP
#include "WinQAPI/User32.h"
#include "WinQAPI/GDI32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	//--IC Internal-------------------------------------------------------------------

	__QOR_IMPLEMENT_OCLASS_LUID( CICInternal );

	__QCMP_WARNING_PUSH
	__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: stored in member for use later" )
	//--------------------------------------------------------------------------------
	CICInternal::CICInternal( const TCHAR* lpszDriver, const TCHAR* lpszDevice, const TCHAR* lpszOutput, const nsWin32::DEVMODE* lpdvmInit ) : m_GDI32Library( CGDI32::Instance() )
	,	m_Handle( this, 0 )
	{
		_WINQ_FCONTEXT( "CICInternal::CICInternal" );
		__QOR_PROTECT
		{
			m_Handle = m_GDI32Library.CreateIC( lpszDriver, lpszDevice, lpszOutput, reinterpret_cast< const ::DEVMODE* >( lpdvmInit ) );
			m_bDelete = true;
		}__QOR_ENDPROTECT
	}

	__QCMP_WARNING_POP

	//--DC Internal

	__QOR_IMPLEMENT_OCLASS_LUID( CDCInternal );

	__QCMP_DECLARE_PERTHREAD CDCHandleMap* p_tDCHandleMap = 0;

	//--------------------------------------------------------------------------------
	CDCHandleMap& CDCInternal::HandleMap( void )
	{
		_WINQ_SFCONTEXT( "CDCInternal::HandleMap" );
		if( p_tDCHandleMap == 0 )
		{
			p_tDCHandleMap = new CDCHandleMap;
		}

		return *p_tDCHandleMap;
	}

    //--------------------------------------------------------------------------------
	CDCInternal::CDCInternal() : CGDIObject< CDCInternal >(), m_User32Library( CUser32::Instance() )
    {
        _WINQ_FCONTEXT( "CDCInternal::CDCInternal" );
        SetHandle( 0 );
        m_bDelete = false;
        m_bOwner = true;
    }

	//--------------------------------------------------------------------------------
	CDCInternal::CDCInternal( CWindowHandle::refType hWnd ) : CGDIObject< CDCInternal >(), m_User32Library( CUser32::Instance() )
	{
		_WINQ_FCONTEXT( "CDCInternal::CDCInternal" );
		__QOR_PROTECT
		{
			SetHandle( m_User32Library.GetDC( reinterpret_cast< ::HWND >( hWnd->Use() ) ) );
		}__QOR_ENDPROTECT
		m_bDelete = false;
		m_bOwner = true;
		m_hWnd = hWnd;
	}

	//--------------------------------------------------------------------------------
	CDCInternal::CDCInternal( CWindowHandle::refType hWnd, CRegion::refType rgnClip, unsigned long flags ) : CGDIObject< CDCInternal >(), m_User32Library( CUser32::Instance() )
	{
		_WINQ_FCONTEXT( "CDCInternal::CDCInternal" );
		__QOR_PROTECT
		{
			SetHandle( m_User32Library.GetDCEx( reinterpret_cast< ::HWND >( hWnd->Use() ), reinterpret_cast< ::HRGN >( rgnClip->Handle()->Use() ), flags ) );
		}__QOR_ENDPROTECT
		m_bDelete = false;
		m_bOwner = true;
		m_hWnd = hWnd;
	}

	//--------------------------------------------------------------------------------
	CDCInternal::CDCInternal( CDCHandle::refType hdc, int /*TODO:iMode*/ ) : CGDIObject< CDCInternal >(), m_User32Library( CUser32::Instance() )
	{
		_WINQ_FCONTEXT( "CDCInternal::CDCInternal" );
		__QOR_PROTECT
		{
			SetHandle( m_GDI32Library.CreateCompatibleDC( reinterpret_cast< ::HDC >( hdc->Use() ) ) );
		}__QOR_ENDPROTECT
		m_bDelete = true;
		m_bOwner = true;
	}

	//--------------------------------------------------------------------------------
	CDCInternal::CDCInternal( const TCHAR* lpszDriver, const TCHAR* lpszDevice, const TCHAR* lpszOutput, const nsWin32::DEVMODE* lpInitData ) : CGDIObject< CDCInternal >(), m_User32Library( CUser32::Instance() )
	{
		_WINQ_FCONTEXT( "CDCInternal::CDCInternal" );
		__QOR_PROTECT
		{
			SetHandle( m_GDI32Library.CreateDC( lpszDriver, lpszDevice, lpszOutput, reinterpret_cast< const ::DEVMODE* >( lpInitData ) ) );
		}__QOR_ENDPROTECT
		m_bDelete = true;
		m_bOwner = true;
	}

	//--------------------------------------------------------------------------------
	CDCInternal::~CDCInternal()
	{
		_WINQ_FCONTEXT( "CDCInternal::~CDCInternal" );
		HRESULT hr = S_OK;
		BOOL bResult = FALSE;
		__QOR_PROTECT
		{
			if( m_bDelete == true && m_bOwner == true )
			{
				bResult = m_GDI32Library.DeleteDC( reinterpret_cast< ::HDC >( Handle()->Use() ) );
				hr = !bResult;
			}
			else if( m_bOwner == true )
			{
				hr = m_User32Library.ReleaseDC( reinterpret_cast< ::HWND >( m_hWnd->Use() ), reinterpret_cast< ::HDC >( Handle()->Use() ) );
			}
			m_iStatus = hr;
		}__QOR_ENDPROTECT
	}

    //--------------------------------------------------------------------------------
    void CDCInternal::GDIDelete( void )
    {
        if( m_bDelete && m_bOwner )
        {
			m_GDI32Library.DeleteDC( reinterpret_cast< ::HDC >( Handle()->Use() ) );
            SetHandle( 0 );
            m_bDelete = false;
            m_bOwner = false;
        }
        else if( m_bOwner && m_hWnd )
        {
			m_User32Library.ReleaseDC( reinterpret_cast< ::HWND >( m_hWnd->Use() ), reinterpret_cast< ::HDC >( Handle()->Use() ) );
        }
    }

    //--------------------------------------------------------------------------------
    bool CDCInternal::CreateCompatibleDC( CDCHandle::refType hdc )
    {
		_WINQ_FCONTEXT( "CDCInternal::CreateCompatibleDC" );
        bool bResult = false;
		__QOR_PROTECT
		{
            if( Handle()->IsNull() )
            {
				SetHandle( m_GDI32Library.CreateCompatibleDC( reinterpret_cast< ::HDC >( hdc->Use() ) ) );
                if( ! Handle()->IsNull() )
                {
                    bResult = true;
			        m_bDelete = true;
			        m_bOwner = true;
                }
            }
		}__QOR_ENDPROTECT
        return bResult;
    }

	//--------------------------------------------------------------------------------
	bool CDCInternal::BitBltTo( CDCInternal& Dest, int nXDest, int nYDest, int nWidth, int nHeight, int nXSrc, int nYSrc, unsigned long dwRop )
	{
		_WINQ_FCONTEXT( "CDCInternal::BitBltTo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.BitBlt( reinterpret_cast< ::HDC >( Dest.Handle()->Use() ), nXDest, nYDest, nWidth, nHeight, reinterpret_cast< ::HDC >( Handle()->Use() ), nXSrc, nYSrc, dwRop ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}
		
	//--------------------------------------------------------------------------------
	bool CDCInternal::MaskBltTo( CDCInternal& Dest, int nXDest, int nYDest, int nWidth, int nHeight, int nXSrc, int nYSrc, CBitmap& Bitmap, int xMask, int yMask, unsigned long dwRop )
	{
		_WINQ_FCONTEXT( "CDCInternal::MaskBltTo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.MaskBlt( reinterpret_cast< ::HDC >( Dest.Handle()->Use() ), nXDest, nYDest, nWidth, nHeight, reinterpret_cast< ::HDC >( Handle()->Use() ), nXSrc, nYSrc, reinterpret_cast< ::HBITMAP >( Bitmap.Handle()->Use() ), xMask, yMask, dwRop ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}
		
	//--------------------------------------------------------------------------------
	bool CDCInternal::PlgBltTo( CDCInternal& Dest, const nsWin32::POINT* lpPoint, int nXSrc, int nYSrc, int nWidth, int nHeight, CBitmap& Bitmap, int xMask, int yMask )
	{
		_WINQ_FCONTEXT( "CDCInternal::PlgBltTo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.PlgBlt( reinterpret_cast< ::HDC >( Dest.Handle()->Use() ), reinterpret_cast< const ::POINT* >( lpPoint ), reinterpret_cast< ::HDC >( Handle()->Use() ), nXSrc, nYSrc, nWidth, nHeight, reinterpret_cast< ::HBITMAP >( Bitmap.Handle()->Use() ), xMask, yMask ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}
		
	//--------------------------------------------------------------------------------
	bool CDCInternal::StretchBltTo( CDCInternal& Dest, int nXOriginDest, int nYOriginDest, int nWidthDest, int nHeightDest, int nXOriginSrc, int nYOriginSrc, int nWidthSrc, int nHeightSrc, unsigned long dwRop ) 
	{
		_WINQ_FCONTEXT( "CDCInternal::StretchBltTo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.StretchBlt( reinterpret_cast< ::HDC >( Dest.Handle()->Use() ), nXOriginDest, nYOriginDest, nWidthDest, nHeightDest, reinterpret_cast< ::HDC >( Handle()->Use() ), nXOriginSrc, nYOriginSrc, nWidthSrc, nHeightSrc, dwRop ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}
		
	//--------------------------------------------------------------------------------
	int CDCInternal::StretchBitsFromDIB( int XDest, int YDest, int nDestWidth, int nDestHeight, int XSrc, int YSrc, int nSrcWidth, int nSrcHeight, const void* lpBits, const nsWin32::BITMAPINFO* lpBitsInfo, unsigned int iUsage, unsigned long dwRop )
	{
		_WINQ_FCONTEXT( "CDCInternal::StretchBitsFromDIB" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_GDI32Library.StretchDIBits( reinterpret_cast< ::HDC >( Handle()->Use() ), XDest, YDest, nDestWidth, nDestHeight, XSrc, YSrc, nSrcWidth, nSrcHeight, lpBits, reinterpret_cast< const ::BITMAPINFO* >( lpBitsInfo ), iUsage, dwRop );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CDCInternal::DrawTextT( const TCHAR* lpString, int nCount, nsWin32::RECT* lpRect, unsigned int uFormat )
	{
		_WINQ_FCONTEXT( "CDCInternal::DrawText" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_User32Library.DrawText( reinterpret_cast< ::HDC >( Handle()->Use() ), lpString, nCount, reinterpret_cast< ::LPRECT >( lpRect ), uFormat );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CDCInternal::DrawTextT( TCHAR* lpchText, int cchText, nsWin32::RECT* lprc, unsigned int dwDTFormat, nsWin32::LPDRAWTEXTPARAMS lpDTParams )
	{
		_WINQ_FCONTEXT( "CDCInternal::DrawText" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_User32Library.DrawTextEx( reinterpret_cast< ::HDC >( Handle()->Use() ), lpchText, cchText, reinterpret_cast< ::LPRECT >( lprc ), dwDTFormat, reinterpret_cast< ::LPDRAWTEXTPARAMS >( lpDTParams ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CDCInternal::GetTabbedTextExtentT( const TCHAR* lpString, int nCount, int nTabPositions, const pInt lpnTabStopPositions )
	{
		_WINQ_FCONTEXT( "CDCInternal::GetTabbedTextExtent" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = m_User32Library.GetTabbedTextExtent( reinterpret_cast< ::HDC >( Handle()->Use() ), lpString, nCount, nTabPositions, lpnTabStopPositions );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	long CDCInternal::TabbedTextOutT( int X, int Y, const TCHAR* lpString, int nCount, int nTabPositions, const pInt lpnTabStopPositions, int nTabOrigin )
	{
		_WINQ_FCONTEXT( "CDCInternal::TabbedTextOut" );
		LONG Result = 0;
		__QOR_PROTECT
		{
			Result = m_User32Library.TabbedTextOut( reinterpret_cast< ::HDC >( Handle()->Use() ), X, Y, lpString, nCount, nTabPositions, lpnTabStopPositions, nTabOrigin );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	bool CDCInternal::DrawEdge( CRectangle* prc, unsigned int edge, unsigned int grfFlags )
	{
		_WINQ_FCONTEXT( "CDCInternal::DrawEdge" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.DrawEdge( reinterpret_cast< ::HDC >( Handle()->Use() ), reinterpret_cast< ::LPRECT >( prc ), edge, grfFlags ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDCInternal::DrawFocusRect( const CRectangle* prc )
	{
		_WINQ_FCONTEXT( "CDCInternal::DrawFocusRect" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.DrawFocusRect( reinterpret_cast< ::HDC >( Handle()->Use() ), reinterpret_cast< const ::RECT* >( prc ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDCInternal::DrawFrameControl( CRectangle* prc, unsigned int uType, unsigned int uState )
	{
		_WINQ_FCONTEXT( "CDCInternal::DrawFrameControl" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.DrawFrameControl( reinterpret_cast< ::HDC >( Handle()->Use() ), reinterpret_cast< ::LPRECT >( prc ), uType, uState ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDCInternal::DrawStateT( CBrushHandle::refType hbr, nsWin32::DRAWSTATEPROC lpOutputFunc, Cmp_long_ptr lData, Cmp_uint_ptr wData, int x, int y, int cx, int cy, unsigned int fuFlags )
	{
		_WINQ_FCONTEXT( "CDCInternal::DrawState" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.DrawState( reinterpret_cast< ::HDC >( Handle()->Use() ), reinterpret_cast< ::HBRUSH >( hbr->Use() ), reinterpret_cast< ::DRAWSTATEPROC >( lpOutputFunc ), lData, wData, x, y, cx, cy, fuFlags ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDCInternal::GrayStringT( CBrushHandle::refType hBrush, nsWin32::GRAYSTRINGPROC lpOutputFunc, Cmp_long_ptr lpData, int nCount, int X, int Y, int nWidth, int nHeight )
	{
		_WINQ_FCONTEXT( "CDCInternal::GrayString" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.GrayString( reinterpret_cast< ::HDC >( Handle()->Use() ), reinterpret_cast< ::HBRUSH >( hBrush->Use() ), reinterpret_cast< ::GRAYSTRINGPROC >( lpOutputFunc ), lpData, nCount, X, Y, nWidth, nHeight ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDCInternal::PaintDesktop()
	{
		_WINQ_FCONTEXT( "CDCInternal::PaintDesktop" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.PaintDesktop( reinterpret_cast< ::HDC >( Handle()->Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CDCInternal::FillRect( const CRectangle* prc, CBrushHandle::refType hbr )
	{
		_WINQ_FCONTEXT( "CDCInternal::FillRect" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_User32Library.FillRect( reinterpret_cast< ::HDC >( Handle()->Use() ), reinterpret_cast< const ::RECT* >( prc ), reinterpret_cast< ::HBRUSH >( hbr->Use() ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CDCInternal::FrameRect( const CRectangle* prc, CBrushHandle::refType hbr )
	{
		_WINQ_FCONTEXT( "CDCInternal::FrameRect" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_User32Library.FrameRect( reinterpret_cast< ::HDC >( Handle()->Use() ), reinterpret_cast< const ::RECT* >( prc ), reinterpret_cast< ::HBRUSH >( hbr->Use() ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	bool CDCInternal::InvertRect( const CRectangle* prc )
	{
		_WINQ_FCONTEXT( "CDCInternal::InvertRect" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.InvertRect( reinterpret_cast< ::HDC >( Handle()->Use() ), reinterpret_cast< const ::RECT* >( prc ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDCInternal::ExtFloodFill( int nXStart, int nYStart, unsigned long crColor, unsigned int fuFillType )
	{
		_WINQ_FCONTEXT( "CDCInternal::ExtFloodFill" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.ExtFloodFill( reinterpret_cast< ::HDC >( Handle()->Use() ), nXStart, nYStart, crColor, fuFillType ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDCInternal::FloodFill( int nXStart, int nYStart, unsigned long crFill )
	{
		_WINQ_FCONTEXT( "CDCInternal::FloodFill" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.FloodFill( reinterpret_cast< ::HDC >( Handle()->Use() ), nXStart, nYStart, crFill ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}
		
	//--------------------------------------------------------------------------------
	unsigned long CDCInternal::GetPixel( int nXPos, int nYPos )
	{
		_WINQ_FCONTEXT( "CDCInternal::GetPixel" );
		COLORREF Result = 0;
		__QOR_PROTECT
		{
			Result = m_GDI32Library.GetPixel( reinterpret_cast< ::HDC >( Handle()->Use() ), nXPos, nYPos );
		}__QOR_ENDPROTECT
		return Result;
	}
		
	//--------------------------------------------------------------------------------
	int CDCInternal::GetStretchBltMode()
	{
		_WINQ_FCONTEXT( "CDCInternal::GetStretchBltMode" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_GDI32Library.GetStretchBltMode( reinterpret_cast< ::HDC >( Handle()->Use() ) );
		}__QOR_ENDPROTECT
		return iResult;
	}
		
	//--------------------------------------------------------------------------------
	int CDCInternal::SetStretchBltMode( int iStretchMode )
	{
		_WINQ_FCONTEXT( "CDCInternal::SetStretchBltMode" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_GDI32Library.SetStretchBltMode( reinterpret_cast< ::HDC >( Handle()->Use() ), iStretchMode );
		}__QOR_ENDPROTECT
		return iResult;
	}
		
	//--------------------------------------------------------------------------------
	int CDCInternal::SetDIBits( int XDest, int YDest, unsigned long dwWidth, unsigned long dwHeight, int XSrc, int YSrc, unsigned int uStartScan, unsigned int cScanLines, const void* lpvBits, const nsWin32::BITMAPINFO* lpbmi, unsigned int fuColourUse )
	{
		_WINQ_FCONTEXT( "CDCInternal::SetDIBits" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_GDI32Library.SetDIBitsToDevice( reinterpret_cast< ::HDC >( Handle()->Use() ), XDest, YDest, dwWidth, dwHeight, XSrc, YSrc, uStartScan, cScanLines, lpvBits, reinterpret_cast< const ::BITMAPINFO* >( lpbmi ), fuColourUse );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------			
	unsigned long CDCInternal::SetPixel( int X, int Y, unsigned long crColour )
	{
		_WINQ_FCONTEXT( "CDCInternal::SetPixel" );
		COLORREF Result = 0;
		__QOR_PROTECT
		{
			Result = m_GDI32Library.SetPixel( reinterpret_cast< ::HDC >( Handle()->Use() ), X, Y, crColour );
		}__QOR_ENDPROTECT
		return Result;
	}
		
	//--------------------------------------------------------------------------------
	bool CDCInternal::SetPixelV( int X, int Y, unsigned long crColour )
	{
		_WINQ_FCONTEXT( "CDCInternal::SetPixelV" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.SetPixelV( reinterpret_cast< ::HDC >( Handle()->Use() ), X, Y, crColour ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}
		
	//--------------------------------------------------------------------------------
	bool CDCInternal::GetColourAdjustment( nsWin32::LPCOLORADJUSTMENT lpca )
	{
		_WINQ_FCONTEXT( "CDCInternal::GetColourAdjustment" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.GetColorAdjustment( reinterpret_cast< ::HDC >( Handle()->Use() ), reinterpret_cast< ::LPCOLORADJUSTMENT >( lpca ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}
		
	//--------------------------------------------------------------------------------
	bool CDCInternal::SetColourAdjustment( const nsWin32::COLORADJUSTMENT* lpca )
	{
		_WINQ_FCONTEXT( "CDCInternal::SetColourAdjustment" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.SetColorAdjustment( reinterpret_cast< ::HDC >( Handle()->Use() ), reinterpret_cast< const ::COLORADJUSTMENT* >( lpca ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}
		
	//--------------------------------------------------------------------------------
	unsigned long CDCInternal::GetNearestColour( unsigned long crColour )
	{
		_WINQ_FCONTEXT( "CDCInternal::GetNearestColour" );
		COLORREF crResult = 0;
		__QOR_PROTECT
		{
			crResult = m_GDI32Library.GetNearestColor( reinterpret_cast< ::HDC >( Handle()->Use() ), crColour );
		}__QOR_ENDPROTECT
		return crResult;
	}

	//--------------------------------------------------------------------------------			
	unsigned int CDCInternal::GetSystemPaletteEntries( unsigned int iStartIndex, unsigned int nEntries, nsWin32::LPPALETTEENTRY lppe )
	{
		_WINQ_FCONTEXT( "CDCInternal::GetSystemPaletteEntries" );
		UINT uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = m_GDI32Library.GetSystemPaletteEntries( reinterpret_cast< ::HDC >( Handle()->Use() ), iStartIndex, nEntries, reinterpret_cast< ::LPPALETTEENTRY >( lppe ) );
		}__QOR_ENDPROTECT
		return uiResult;
	}

	//--------------------------------------------------------------------------------			
	unsigned int CDCInternal::GetSystemPaletteUse()
	{
		_WINQ_FCONTEXT( "CDCInternal::GetSystemPaletteUse" );
		UINT uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = m_GDI32Library.GetSystemPaletteUse( reinterpret_cast< ::HDC >( Handle()->Use() ) );
		}__QOR_ENDPROTECT
		return uiResult;
	}

	//--------------------------------------------------------------------------------						
	unsigned int CDCInternal::SetSystemPaletteUse( unsigned int uUsage )
	{
		_WINQ_FCONTEXT( "CDCInternal::SetSystemPaletteUse" );
		UINT uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = m_GDI32Library.SetSystemPaletteUse( reinterpret_cast< ::HDC >( Handle()->Use() ), uUsage );
		}__QOR_ENDPROTECT
		return uiResult;
	}

	//--------------------------------------------------------------------------------			
	unsigned int CDCInternal::RealizePalette()
	{
		_WINQ_FCONTEXT( "CDCInternal::RealizePalette" );
		UINT uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = m_GDI32Library.RealizePalette( reinterpret_cast< ::HDC >( Handle()->Use() ) );
		}__QOR_ENDPROTECT
		return uiResult;
	}

	//--------------------------------------------------------------------------------			
	CPaletteHandle::refType CDCInternal::SelectPalette( CPaletteHandle::refType hpal, bool bForceBackground )
	{
		_WINQ_FCONTEXT( "CDCInternal::SelectPalette" );
		__QOR_PROTECT
		{
			return CPaletteHandle::refType( new CPaletteHandle( 0, (void*)( m_GDI32Library.SelectPalette( reinterpret_cast< ::HDC >( Handle()->Use() ), reinterpret_cast< ::HPALETTE >( hpal->Use() ), bForceBackground ? TRUE : FALSE ) ) ), true );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	bool CDCInternal::UpdateColours()
	{
		_WINQ_FCONTEXT( "CDCInternal::UpdateColours" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.UpdateColors( reinterpret_cast< ::HDC >( Handle()->Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------						
	bool CDCInternal::GetGammaRamp( void* lpRamp )
	{
		_WINQ_FCONTEXT( "CDCInternal::GetGammaRamp" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.GetDeviceGammaRamp( reinterpret_cast< ::HDC >( Handle()->Use() ), lpRamp ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDCInternal::SetGammaRamp( void* lpRamp )
	{
		_WINQ_FCONTEXT( "CDCInternal::SetGammaRamp" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.SetDeviceGammaRamp( reinterpret_cast< ::HDC >( Handle()->Use() ), lpRamp ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CDCInternal::EnumICMProfilesT( nsWin32::fpICMEnumProc lpEnumICMProfilesFunc, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CDCInternal::EnumICMProfiles" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_GDI32Library.EnumICMProfiles( reinterpret_cast< ::HDC >( Handle()->Use() ) , reinterpret_cast< ::ICMENUMPROC >( lpEnumICMProfilesFunc ), lParam );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	bool CDCInternal::GetICMProfileT( unsigned long* lpcbName, TCHAR* lpszFileName )
	{
		_WINQ_FCONTEXT( "CDCInternal::GetICMProfile" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.GetICMProfile( reinterpret_cast< ::HDC >( Handle()->Use() ), lpcbName, lpszFileName ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------			
	int CDCInternal::SetICMMode( int iEnableICM )
	{
		_WINQ_FCONTEXT( "CDCInternal::SetICMMode" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_GDI32Library.SetICMMode( reinterpret_cast< ::HDC >( Handle()->Use() ), iEnableICM );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------			
	bool CDCInternal::SetICMProfileT( TCHAR*lpFileName )
	{
		_WINQ_FCONTEXT( "CDCInternal::SetICMProfile" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.SetICMProfile( reinterpret_cast< ::HDC >( Handle()->Use() ), lpFileName ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------			
	bool CDCInternal::CheckColorsInGamut( void* lpRGBTriples, void* lpBuffer, unsigned int nCount )
	{
		_WINQ_FCONTEXT( "CDCInternal::CheckColoursInGamut" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.CheckColorsInGamut( reinterpret_cast< ::HDC >( Handle()->Use() ), lpRGBTriples, lpBuffer, nCount ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDCInternal::ColourMatchToTarget( CDCInternal& Target, unsigned long uiAction )
	{
		_WINQ_FCONTEXT( "CDCInternal::ColourMatchToTarget" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.ColorMatchToTarget( reinterpret_cast< ::HDC >( Handle()->Use() ), reinterpret_cast< ::HDC >( Target.Handle()->Use() ), uiAction ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------			
	CColourSpace::refType CDCInternal::SetColourSpace( CColourSpace::refType ColourSpace )
	{
		_WINQ_FCONTEXT( "CDCInternal::SetColourSpace" );
		
		__QOR_PROTECT
		{
			return CColourSpace::FromHandle( 
				CColourSpaceHandle( 
					0, (void*)( m_GDI32Library.SetColorSpace( reinterpret_cast< ::HDC >( Handle()->Use() ), reinterpret_cast< ::HCOLORSPACE >( ColourSpace->Handle()->Use() ) ) ) 
				).Ref() 
			);

		}__QOR_ENDPROTECT
	}
		
	//--------------------------------------------------------------------------------
	bool CDCInternal::GetCurrentPosition( nsWin32::POINT* lpPoint )
	{
		_WINQ_FCONTEXT( "CDCInternal::GetCurrentPosition" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.GetCurrentPositionEx( reinterpret_cast< ::HDC >( Handle()->Use() ), reinterpret_cast< ::LPPOINT >( lpPoint ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDCInternal::DPtoLP( nsWin32::POINT* lpPoints, int nCount )
	{
		_WINQ_FCONTEXT( "CDCInternal::DPtoLP" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.DPtoLP( reinterpret_cast< ::HDC >( Handle()->Use() ), reinterpret_cast< ::LPPOINT >( lpPoints ), nCount ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDCInternal::LPtoDP( nsWin32::POINT* lpPoints, int nCount )
	{
		_WINQ_FCONTEXT( "CDCInternal::LPtoDP" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.LPtoDP( reinterpret_cast< ::HDC >( Handle()->Use() ), reinterpret_cast< ::LPPOINT >( lpPoints ), nCount ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}
		
	//--------------------------------------------------------------------------------
	bool CDCInternal::Cancel()
	{
		_WINQ_FCONTEXT( "CDCInternal::Cancel" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.CancelDC( reinterpret_cast< ::HDC >( Handle()->Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDCInternal::DeleteObject( void* hObject )
	{
		_WINQ_FCONTEXT( "CDCInternal::DeleteObject" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.DeleteObject( hObject ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}
		
	//--------------------------------------------------------------------------------
	int CDCInternal::DrawEscape( int nEscape, int cbInput, const char* lpszInData )
	{
		_WINQ_FCONTEXT( "CDCInternal::DrawEscape" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_GDI32Library.DrawEscape( reinterpret_cast< ::HDC >( Handle()->Use() ), nEscape, cbInput, lpszInData );
		}__QOR_ENDPROTECT
		return iResult;
	}
		
	//--------------------------------------------------------------------------------
	int CDCInternal::EnumObjects( int nObjectType, nsWin32::GOBJENUMPROC lpObjectFunc, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CDCInternal::EnumObjects" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_GDI32Library.EnumObjects( reinterpret_cast< ::HDC >( Handle()->Use() ), nObjectType, lpObjectFunc, lParam );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	void* CDCInternal::GetCurrentObject( unsigned int uObjectType )
	{
		_WINQ_FCONTEXT( "CDCInternal::GetCurrentObject" );
		HGDIOBJ Result = 0;
		__QOR_PROTECT
		{
			Result = m_GDI32Library.GetCurrentObject( reinterpret_cast< ::HDC >( Handle()->Use() ), uObjectType );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------			
	unsigned long CDCInternal::GetBrushColour()
	{
		_WINQ_FCONTEXT( "CDCInternal::GetBrushColour" );
		COLORREF Result = 0;
		__QOR_PROTECT
		{
			Result = m_GDI32Library.GetDCBrushColor( reinterpret_cast< ::HDC >( Handle()->Use() ) );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	bool CDCInternal::GetOrigin( nsWin32::POINT* lpPoint )
	{
		_WINQ_FCONTEXT( "CDCInternal::GetOrigin" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.GetDCOrgEx( reinterpret_cast< ::HDC >( Handle()->Use() ), reinterpret_cast< ::LPPOINT >( lpPoint ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CDCInternal::GetPenColour()
	{
		_WINQ_FCONTEXT( "CDCInternal::GetPenColour" );
		COLORREF Result = 0;
		__QOR_PROTECT
		{
			Result = m_GDI32Library.GetDCPenColor( reinterpret_cast< ::HDC >( Handle()->Use() ) );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------			
	int CDCInternal::GetCapability( int nIndex )
	{
		_WINQ_FCONTEXT( "CDCInternal::GetCapability" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_GDI32Library.GetDeviceCaps( reinterpret_cast< ::HDC >( Handle()->Use() ), nIndex );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CDCInternal::GetLayout()
	{
		_WINQ_FCONTEXT( "CDCInternal::GetLayout" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = m_GDI32Library.GetLayout( reinterpret_cast< ::HDC >( Handle()->Use() ) );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	bool CDCInternal::Reset( const nsWin32::DEVMODE* lpInitData )
	{
		_WINQ_FCONTEXT( "CDCInternal::Reset" );
		bool bResult = false;
		__QOR_PROTECT
		{
			CDCHandle hTemp( 0, m_GDI32Library.ResetDC( reinterpret_cast< ::HDC >( Handle()->Use() ), reinterpret_cast< const ::DEVMODE* >( lpInitData ) ) );
			bResult = ( hTemp.AsHandle().ptr() == Handle()->AsHandle().ptr() );
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------			
	bool CDCInternal::Restore( int nSavedDC )
	{
		_WINQ_FCONTEXT( "CDCInternal::Restore" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.RestoreDC( reinterpret_cast< ::HDC >( Handle()->Use() ), nSavedDC ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CDCInternal::Save()
	{
		_WINQ_FCONTEXT( "CDCInternal::Save" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_GDI32Library.SaveDC( reinterpret_cast< ::HDC >( Handle()->Use() ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------			
	void* CDCInternal::SelectObject( void* hgdiobj )
	{
		_WINQ_FCONTEXT( "CDCInternal::SelectObject" );
		HGDIOBJ Result = 0;
		__QOR_PROTECT
		{
			Result = m_GDI32Library.SelectObject( reinterpret_cast< ::HDC >( Handle()->Use() ), hgdiobj );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------			
	unsigned long CDCInternal::SetBrushColour( unsigned long crColour )
	{
		_WINQ_FCONTEXT( "CDCInternal::SetBrushColour" );
		COLORREF Result = 0;
		__QOR_PROTECT
		{
			Result = m_GDI32Library.SetDCBrushColor( reinterpret_cast< ::HDC >( Handle()->Use() ), crColour );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------			
	unsigned long CDCInternal::SetPenColour( unsigned long crColour )
	{
		_WINQ_FCONTEXT( "CDCInternal::SetPenColour" );
		COLORREF Result = 0;
		__QOR_PROTECT
		{
			Result = m_GDI32Library.SetDCPenColor( reinterpret_cast< ::HDC >( Handle()->Use() ), crColour );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------			
	unsigned long CDCInternal::SetLayout( unsigned long dwLayout )
	{
		_WINQ_FCONTEXT( "CDCInternal::SetLayout" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = m_GDI32Library.SetLayout( reinterpret_cast< ::HDC >( Handle()->Use() ), dwLayout );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	bool CDCInternal::SwapBuffers()
	{
		_WINQ_FCONTEXT( "CDCInternal::SwapBuffers" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.SwapBuffers( reinterpret_cast< ::HDC >( Handle()->Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CDCInternal::GetBkColour()
	{
		_WINQ_FCONTEXT( "CDCInternal::GetBkColour" );
		COLORREF Result = 0;
		__QOR_PROTECT
		{
			Result = m_GDI32Library.GetBkColor( reinterpret_cast< ::HDC >( Handle()->Use() ) );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	int CDCInternal::GetBkMode()
	{
		_WINQ_FCONTEXT( "CDCInternal::GetBkMode" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_GDI32Library.GetBkMode( reinterpret_cast< ::HDC >( Handle()->Use() ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	unsigned int CDCInternal::GetBoundsRect( nsWin32::RECT* lprcBounds, unsigned int flags )
	{
		_WINQ_FCONTEXT( "CDCInternal::GetBoundsRect" );
		UINT uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = m_GDI32Library.GetBoundsRect( reinterpret_cast< ::HDC >( Handle()->Use() ), reinterpret_cast< ::LPRECT >( lprcBounds ), flags );
		}__QOR_ENDPROTECT
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	int CDCInternal::GetROP2()
	{
		_WINQ_FCONTEXT( "CDCInternal::GetROP2" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_GDI32Library.GetROP2( reinterpret_cast< ::HDC >( Handle()->Use() ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CDCInternal::SetBkColour( unsigned long crColour )
	{
		_WINQ_FCONTEXT( "CDCInternal::SetBkColour" );
		COLORREF Result = 0;
		__QOR_PROTECT
		{
			Result = m_GDI32Library.SetBkColor( reinterpret_cast< ::HDC >( Handle()->Use() ), crColour );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	int CDCInternal::SetBkMode( int iBkMode )
	{
		_WINQ_FCONTEXT( "CDCInternal::SetBkMode" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_GDI32Library.SetBkMode( reinterpret_cast< ::HDC >( Handle()->Use() ), iBkMode );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	unsigned int CDCInternal::SetBoundsRect( const nsWin32::RECT* lprcBounds, unsigned int flags )
	{
		_WINQ_FCONTEXT( "CDCInternal::SetBoundsRect" );
		UINT uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = m_GDI32Library.SetBoundsRect( reinterpret_cast< ::HDC >( Handle()->Use() ), reinterpret_cast< const ::RECT* >( lprcBounds ), flags );
		}__QOR_ENDPROTECT
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	int CDCInternal::SetROP2( int fnDrawMode )
	{
		_WINQ_FCONTEXT( "CDCInternal::SetROP2" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_GDI32Library.SetROP2( reinterpret_cast< ::HDC >( Handle()->Use() ), fnDrawMode );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CDCInternal::GetPolyFillMode()
	{
		_WINQ_FCONTEXT( "CDCInternal::GetPolyFillMode" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_GDI32Library.GetPolyFillMode( reinterpret_cast< ::HDC >( Handle()->Use() ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CDCInternal::SetPolyFillMode( int iPolyFillMode )
	{
		_WINQ_FCONTEXT( "CDCInternal::SetPolyFillMode" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_GDI32Library.SetPolyFillMode( reinterpret_cast< ::HDC >( Handle()->Use() ), iPolyFillMode );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CDCInternal::GetMetaRegion( CRegion::refType Rgn )
	{
		_WINQ_FCONTEXT( "CDCInternal::GetMetaRegion" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_GDI32Library.GetMetaRgn( reinterpret_cast< ::HDC >( Handle()->Use() ), reinterpret_cast< ::HRGN >( Rgn->Handle()->Use() ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CDCInternal::SetMetaRegion()
	{
		_WINQ_FCONTEXT( "CDCInternal::SetMetaRegion" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_GDI32Library.SetMetaRgn( reinterpret_cast< ::HDC >( Handle()->Use() ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//protected:

	//--------------------------------------------------------------------------------
	CDCInternal::CDCInternal( CDCHandle& hdc ) : CGDIObject< CDCInternal >(), m_User32Library( CUser32::Instance() )
	{
		_WINQ_FCONTEXT( "CDCInternal::CDCInternal" );
		SetHandle( hdc.AsHandle().ptr() );
		m_bDelete = false;
		m_bOwner = false;
		m_iStatus = 0;
	}

}//nsWin32
