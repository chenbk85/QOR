//WinQLPen.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: saved in member for later use" );
#include "WinQL/Application/Graphics/WinQLPen.h"
#include "WinQL/Application/Graphics/WinQLGDIObj.h"
__QCMP_WARNING_POP
#include "WinQAPI/User32.h"
#include "WinQAPI/GDI32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CPen );

	__QCMP_DECLARE_PERTHREAD CPenHandleMap* p_tPenHandleMap = 0;

	//--------------------------------------------------------------------------------
	CPenHandleMap& CPen::HandleMap( void )
	{
		_WINQ_SFCONTEXT( "CPen::HandleMap" );
		if( p_tPenHandleMap == 0 )
		{
			p_tPenHandleMap = new CPenHandleMap;
		}

		return *p_tPenHandleMap;
	}

	//--------------------------------------------------------------------------------
	CPen::CPen( int fnPenStyle, int nWidth, unsigned long crColour ) : CSelectableGDIObject< CPen >()
	{
		_WINQ_FCONTEXT( "CPen::CPen" );
		m_bOwner = true;
		__QOR_PROTECT
		{
			SetHandle( m_GDI32Library.CreatePen( fnPenStyle, nWidth, crColour ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CPen::CPen( const nsWin32::LOGPEN* lplgpn ) : CSelectableGDIObject< CPen >()
	{
		_WINQ_FCONTEXT( "CPen::CPen" );
		m_bOwner = true;
		__QOR_PROTECT
		{
			SetHandle( m_GDI32Library.CreatePenIndirect( reinterpret_cast< const ::LOGPEN* >( lplgpn ) ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CPen::CPen( unsigned long dwPenStyle, unsigned long dwWidth, const nsWin32::LOGBRUSH* lplb, unsigned long dwStyleCount, const unsigned long* lpStyle ) : CSelectableGDIObject< CPen >()
	{
		_WINQ_FCONTEXT( "CPen::CPen" );
		m_bOwner = true;
		__QOR_PROTECT
		{
			SetHandle( m_GDI32Library.ExtCreatePen( dwPenStyle, dwWidth, reinterpret_cast< const ::LOGBRUSH* >( lplb ), dwStyleCount, lpStyle ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CPen::~CPen()
	{
		_WINQ_FCONTEXT( "CPen::~CPen" );
		if( m_bOwner )
		{
			__QOR_PROTECT
			{
				m_GDI32Library.DeleteObject( Handle() );
			}__QOR_ENDPROTECT
		}				
	}

	//--------------------------------------------------------------------------------
	CPen::CPen() : CSelectableGDIObject< CPen >()
	{
		_WINQ_FCONTEXT( "CPen::CPen" );
		m_bOwner = false;
		SetHandle( 0 );
	}


	//--Stock Pen---------------------------------------------------------------------

	//--------------------------------------------------------------------------------
	CStockPen::CStockPen( int nPen ) : CPen()
	{
		_WINQ_FCONTEXT( "CStockPen::CStockPen" );
		m_bOwner = false;
		__QOR_PROTECT
		{
			SetHandle( m_GDI32Library.GetStockObject( nPen ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CStockPen::~CStockPen()
	{
		_WINQ_FCONTEXT( "CStockPen::~CStockPen" );
	}

}//nsWin32
