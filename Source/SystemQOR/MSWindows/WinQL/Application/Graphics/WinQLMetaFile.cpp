//WinQLMetaFile.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: saved in member for later use" );
#include "WinQL/Application/Graphics/WinQLMetaFile.h"
#include "WinQL/Application/Graphics/DeviceContext/WinQLDCInternal.h"
__QCMP_WARNING_POP
#include "WinQAPI/GDI32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CMetaFile );

	__QCMP_DECLARE_PERTHREAD CMetaFileHandleMap* p_tMetaFileHandleMap = 0;

	//--------------------------------------------------------------------------------
	CMetaFileHandleMap& CMetaFile::HandleMap( void )
	{
		_WINQ_SFCONTEXT( "CMetaFile::HandleMap" );
		if( p_tMetaFileHandleMap == 0 )
		{
			p_tMetaFileHandleMap = new CMetaFileHandleMap;
		}

		return *p_tMetaFileHandleMap;
	}

	//--------------------------------------------------------------------------------
	CMetaFile::CMetaFile( CMetaFileHandle::refType hmfSrc, const TCHAR* lpszFile, int* pResult ) : CGDIObject< CMetaFile >()
	{
		_WINQ_FCONTEXT( "CMetaFile::CMetaFile" );
		m_pResult = pResult;
		__QOR_PROTECT
		{
			m_bOwner = true;
			SetHandle( m_GDI32Library.CopyMetaFile( reinterpret_cast< ::HMETAFILE >( hmfSrc->Use() ), lpszFile ) );
		}__QOR_ENDPROTECT
	}
					
	//--------------------------------------------------------------------------------
	CMetaFile::CMetaFile( unsigned int nSize, const unsigned char* lpData, int* pResult ) : CGDIObject< CMetaFile >()
	{
		_WINQ_FCONTEXT( "CMetaFile::CMetaFile" );
		m_pResult = pResult;
		__QOR_PROTECT
		{
			m_bOwner = true;
			SetHandle( m_GDI32Library.SetMetaFileBitsEx( nSize, lpData ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CMetaFile::~CMetaFile()
	{
		_WINQ_FCONTEXT( "CMetaFile::~CMetaFile" );
		BOOL bResult = !m_bOwner;
		__QOR_PROTECT
		{
			if( m_bOwner )
			{
				bResult = m_GDI32Library.DeleteMetaFile( reinterpret_cast< ::HMETAFILE >( Handle()->Use() ) );
			}
			if( m_pResult != 0 )
			{
				*m_pResult = bResult;
			}
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	bool CMetaFile::Enum( CDCInternal& DC, nsWin32::MFENUMPROC lpMetaFunc, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CMetaFile::Enum" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.EnumMetaFile( reinterpret_cast< ::HDC >( DC.Handle()->Use() ), reinterpret_cast< ::HMETAFILE >( Handle()->Use() ), reinterpret_cast< ::MFENUMPROC >( lpMetaFunc ), lParam ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned int CMetaFile::GetBits( unsigned int nSize, void* lpvData )
	{
		_WINQ_FCONTEXT( "CMetaFile::GetBits" );
		UINT uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = m_GDI32Library.GetMetaFileBitsEx( reinterpret_cast< ::HMETAFILE >( Handle()->Use() ), nSize, lpvData );
		}__QOR_ENDPROTECT
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	bool CMetaFile::Play( CDCInternal& DC )
	{
		_WINQ_FCONTEXT( "CMetaFile::Play" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.PlayMetaFile( reinterpret_cast< ::HDC >( DC.Handle()->Use() ), reinterpret_cast< ::HMETAFILE >( Handle()->Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//protected:

	//--------------------------------------------------------------------------------
	CMetaFile::CMetaFile( CMetaFileHandle::refType hmf, int* pResult, bool bOwnership ) : CGDIObject< CMetaFile >()
	{
		_WINQ_FCONTEXT( "CMetaFile::CMetaFile" );
		m_bOwner = bOwnership;
		m_pResult = pResult;
		SetHandle( hmf->AsHandle().ptr() );
	}



	//--Meta File DC------------------------------------------------------------------

	__QOR_IMPLEMENT_OCLASS_LUID( CMetaFileDC );

	__QCMP_DECLARE_PERTHREAD CMetaFileDCHandleMap* p_tMetaFileDCHandleMap = 0;

	//--------------------------------------------------------------------------------
	CMetaFileDCHandleMap& CMetaFileDC::HandleMap( void )
	{
		_WINQ_SFCONTEXT( "CMetaFileDC::HandleMap" );
		if( p_tMetaFileDCHandleMap == 0 )
		{
			p_tMetaFileDCHandleMap = new CMetaFileDCHandleMap;
		}

		return *p_tMetaFileDCHandleMap;
	}

	//--------------------------------------------------------------------------------			
	CMetaFileDC::CMetaFileDC( const TCHAR* lpszFile ) : CGDIObject< CMetaFileDC >()
	{
		_WINQ_FCONTEXT( "CMetaFileDC::CMetaFileDC" );
		__QOR_PROTECT
		{
			SetHandle( m_GDI32Library.CreateMetaFile( lpszFile ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CMetaFileDC::~CMetaFileDC()
	{
		_WINQ_FCONTEXT( "CMetaFileDC::~CMetaFileDC" );
	}

	//--------------------------------------------------------------------------------
	CMetaFile::refType CMetaFileDC::Close()
	{
		_WINQ_FCONTEXT( "CMetaFileDC::Close" );
		__QOR_PROTECT
		{
			CMetaFile::refType Result( new CMetaFile( CMetaFileHandle( 0, (void*)( m_GDI32Library.CloseMetaFile( reinterpret_cast< ::HDC >( Handle()->Use() ) ) ) ).Ref(), 0, true ), true );
			delete this;
			return Result;
		}__QOR_ENDPROTECT
	}

}//nsWin32
