//WinQLGDIObj.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: saved in member for later use" );
#include "WinQL/Application/Graphics/WinQLGDIObj.h"
#include "WinQL/Application/Graphics/DeviceContext/WinQLDCInternal.h"
__QCMP_WARNING_POP
#include "WinQAPI/User32.h"
#include "WinQAPI/GDI32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CBaseGDIObject );

	//--------------------------------------------------------------------------------
	CBaseGDIObject::CBaseGDIObject() : m_GDI32Library( CGDI32::Instance() )
	{
		_WINQ_FCONTEXT( "CBaseGDIObject::CBaseGDIObject" );
	}

	//--------------------------------------------------------------------------------
	CBaseGDIObject::CBaseGDIObject( const CBaseGDIObject& src ) : m_GDI32Library( CGDI32::Instance() )
	{
		_WINQ_FCONTEXT( "CBaseGDIObject::CBaseGDIObject" );
		*this = src;
	}

	//--------------------------------------------------------------------------------
	CBaseGDIObject& CBaseGDIObject::operator = ( const CBaseGDIObject& src )
	{
		_WINQ_FCONTEXT( "BaseGDIObject::operator =" );
		if( &src != this )
		{
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	CBaseGDIObject::~CBaseGDIObject()
	{
		_WINQ_FCONTEXT( "CBaseGDIObject::~CBaseGDIObject" );
	}

	//--------------------------------------------------------------------------------
	int CBaseGDIObject::GetData( int cbBuffer, void* lpvObject )
	{
		_WINQ_FCONTEXT( "CSelectableGDIObject::GetData" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_GDI32Library.GetObject( Internal_Handle().Use(), cbBuffer, lpvObject );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CBaseGDIObject::GetType( void )
	{
		_WINQ_FCONTEXT( "CBaseGDIObject::GetObjectType" );
		unsigned long ulResult = m_GDI32Library.GetObjectType( Internal_Handle().Use() );
		return ulResult;
	}

	//--------------------------------------------------------------------------------
	void CBaseGDIObject::PreSelect( void )
	{
		_WINQ_FCONTEXT( "CBaseGDIObject::PreSelect" );
	}

	//--------------------------------------------------------------------------------
	CBaseGDIObject::refType CBaseGDIObject::Select( CDCInternal& DC )
	{
		_WINQ_FCONTEXT( "CBaseGDIObject::Select" );
		return FromHandle( m_GDI32Library.SelectObject( reinterpret_cast< ::HDC >( DC.Handle()->Use() ), Internal_Handle().Use() ) );
	}

	//--------------------------------------------------------------------------------
	void CBaseGDIObject::PostSelect( CDCInternal& )
	{
		_WINQ_FCONTEXT( "CBaseGDIObject::PostSelect" );
	}

	//--------------------------------------------------------------------------------
	void CBaseGDIObject::Deselect( CDCInternal& )
	{
		_WINQ_FCONTEXT( "CBaseGDIObject::Deselect" );
	}
	

	__QOR_IMPLEMENT_OCLASS_LUID( CGDIObjectSelection );

	//--------------------------------------------------------------------------------
	CGDIObjectSelection::CGDIObjectSelection( CBaseGDIObject& Object, CDCInternal& DC ) : m_GDI32Library( CGDI32::Instance() )
	,	m_Object( Object )
	,	m_DC( DC )
	{
		Select();
	}

	//--------------------------------------------------------------------------------
	CGDIObjectSelection::~CGDIObjectSelection()
	{
		_WINQ_FCONTEXT( "CGDIObjectSelection::~CGDIObjectSelection" );
	}

	//--------------------------------------------------------------------------------
	void CGDIObjectSelection::Select( void )
	{
		_WINQ_FCONTEXT( "CGDIObjectSelection::Select" );
		__QOR_PROTECT
		{
			m_Object.PreSelect();
			m_Object.Select( m_DC )->Deselect( m_DC );
			m_Object.PostSelect( m_DC );
		}__QOR_ENDPROTECT
	}
	
}//nsWin32
