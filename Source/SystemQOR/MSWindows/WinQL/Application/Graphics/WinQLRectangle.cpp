//WinQLRectangle.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: saved in member for later use" );
#include "WinQL/Application/Graphics/WinQLRectangle.h"
__QCMP_WARNING_POP
#include "WinQAPI/User32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CRectangle );

    //--------------------------------------------------------------------------------
    CRectangle::CRectangle()
    {
		_WINQ_FCONTEXT( "CRectangle::CRectangle" );
		left = 0;
		top = 0;
		right = 0;
		bottom = 0;
    }

	//--------------------------------------------------------------------------------
	CRectangle::CRectangle( int l, int t, int r, int b )
	{
		_WINQ_FCONTEXT( "CRectangle::CRectangle" );
		left = l;
		top = t;
		right = r;
		bottom = b;
	}

	//--------------------------------------------------------------------------------
	CRectangle::CRectangle( const CRectangle& Src )
	{
		_WINQ_FCONTEXT( "CRectangle::CRectangle" );
		left = Src.left;
		right = Src.right;
		top = Src.top;
		bottom = Src.bottom;
	}

	//--------------------------------------------------------------------------------
	bool CRectangle::Copy( CRectangle* pRect )
	{
		_WINQ_FCONTEXT( "CRectangle::Copy" );
		bool bResult = false;
		if( pRect )
		{
			pRect->left = left;
			pRect->right = right;
			pRect->top = top;
			pRect->bottom = bottom;
			bResult = true;
		}
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CRectangle::Equal( const CRectangle* pRect ) const
	{
		_WINQ_FCONTEXT( "CRectangle::Equal" );
		bool bResult = false;
		if( pRect && pRect->left == left && pRect->right == right && pRect->top == top && pRect->bottom == bottom )
		{
			bResult = true;
		}
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CRectangle::Inflate( int dx, int dy )
	{
		_WINQ_FCONTEXT( "CRectangle::Inflate" );
		left -= ( dx / 2 );
		right += ( ( dx / 2 ) + ( dx - ( ( dx / 2 ) * 2 ) ) );
		top -= ( dy / 2 );
		bottom += ( ( dy / 2 ) + ( dy - ( ( dy / 2 ) * 2 ) ) );
		return TRUE;
	}

	//--------------------------------------------------------------------------------
	bool CRectangle::Intersect( CRectangle* lprcDst, const CRectangle* lprcSrc1 )
	{				
		_WINQ_FCONTEXT( "CRectangle::Intersect" );
		bool bResult = false;
		__QOR_PROTECT
		{
			CUser32 Library;
			bResult = Library.IntersectRect( reinterpret_cast< ::LPRECT >( lprcDst ), reinterpret_cast< const ::RECT* >( lprcSrc1 ), reinterpret_cast< const ::RECT* >( this ) ) ? true : false;						
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CRectangle::IsEmpty() const
	{
		_WINQ_FCONTEXT( "CRectangle::IsEmpty" );
		bool bResult = false;
		if( ( right <= left ) || ( bottom <= top ) )
		{
			bResult = true;
		}
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CRectangle::Offset( int dx, int dy )
	{
		_WINQ_FCONTEXT( "CRectangle::Offset" );
		left += dx;
		right += dx;
		top += dy;
		bottom += dy;
		return TRUE;
	}

	//--------------------------------------------------------------------------------
	bool CRectangle::IsPointInside( POINT pt ) const
	{
		_WINQ_FCONTEXT( "CRectangle::IsPointInside" );
		bool bResult = false;
		if( pt.x >= left && pt.x < right && pt.y >= top && pt.y < bottom )
		{
			bResult = true;
		}
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CRectangle::Set( int xLeft, int yTop, int xRight, int yBottom )
	{
		_WINQ_FCONTEXT( "CRectangle::Set" );
		left = xLeft;
		top = yTop;
		right = xRight;
		bottom = yBottom;
		return TRUE;
	}

	//--------------------------------------------------------------------------------
	void CRectangle::SetTop( int y1 )
	{
		_WINQ_FCONTEXT( "CRectangle::SetTop" );
		top = y1;
	}

	//--------------------------------------------------------------------------------
	void CRectangle::SetBottom( int y2 )
	{
		_WINQ_FCONTEXT( "CRectangle::SetBottom" );
		bottom = y2;
	}

	//--------------------------------------------------------------------------------
	void CRectangle::SetLeft( int x1 )
	{
		_WINQ_FCONTEXT( "CRectangle::SetLeft" );
		left = x1;
	}

	//--------------------------------------------------------------------------------
	void CRectangle::SetRight( int x2 )
	{
		_WINQ_FCONTEXT( "CRectangle::SetRight" );
		right = x2;
	}

	//--------------------------------------------------------------------------------
	bool CRectangle::SetEmpty()
	{
		_WINQ_FCONTEXT( "CRectangle::SetEmpty" );
		bottom = 0;
		top = 0;
		left = 0;
		right = 0;
		return TRUE;
	}

	//--------------------------------------------------------------------------------
	bool CRectangle::Subtract( CRectangle* lprcDst, const CRectangle* lprcSrc1 )
	{
		_WINQ_FCONTEXT( "CRectangle::Subtract" );
		bool bResult = false;
		__QOR_PROTECT
		{
			CUser32 Library;			
			bResult = Library.SubtractRect( reinterpret_cast< ::LPRECT >( lprcDst ), reinterpret_cast< const ::RECT* >( lprcSrc1 ), reinterpret_cast< const ::RECT* >( this ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CRectangle::Union( CRectangle* lprcDst, const CRectangle* lprcSrc1 )
	{
		_WINQ_FCONTEXT( "CRectangle::Union" );
		bool bResult = false;
		__QOR_PROTECT
		{
			CUser32 Library;
			bResult = Library.UnionRect( reinterpret_cast< ::LPRECT >( lprcDst ), reinterpret_cast< const ::RECT* >( lprcSrc1 ), reinterpret_cast< const ::RECT* >( this ) ) ? true : false;			
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CRectangle::Fill( CDCHandle::refType hDC, CBrushHandle::refType hbr )
	{
		_WINQ_FCONTEXT( "CRectangle::Fill" );
		int iResult = 0;
		__QOR_PROTECT
		{
			CUser32 Library;
			iResult = Library.FillRect( reinterpret_cast< ::HDC >( hDC->Use() ), reinterpret_cast< const ::RECT* >( this ), reinterpret_cast< ::HBRUSH >( hbr->Use() ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CRectangle::Frame( CDCHandle::refType hDC, CBrushHandle::refType hbr )
	{
		_WINQ_FCONTEXT( "CRectangle::Frame" );
		int iResult = 0;
		__QOR_PROTECT
		{
			CUser32 Library;
			iResult = Library.FrameRect( reinterpret_cast< ::HDC >( hDC->Use() ), reinterpret_cast< const ::RECT* >( this ), reinterpret_cast< ::HBRUSH >( hbr->Use() ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	bool CRectangle::Invert( CDCHandle::refType hDC )
	{
		_WINQ_FCONTEXT( "CRectangle::Invert" );
		bool bResult = false;
		__QOR_PROTECT
		{
			CUser32 Library;
			bResult = Library.InvertRect( reinterpret_cast< ::HDC >( hDC->Use() ), reinterpret_cast< const ::RECT* >( this ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	CRectangle CRectangle::MulDiv( int nMultiplier, int nDivisor )
	{
		_WINQ_FCONTEXT( "CRectangle::MulDiv" );

		return CRectangle( CKernel32::MulDiv( left, nMultiplier, nDivisor ),
			CKernel32::MulDiv( top, nMultiplier, nDivisor ),
			CKernel32::MulDiv( right, nMultiplier, nDivisor ),
			CKernel32::MulDiv( bottom, nMultiplier, nDivisor ) );
	}

    //--------------------------------------------------------------------------------
    int CRectangle::Fill( CDeviceContext& DC, CBrush& Brush )
    {
		_WINQ_FCONTEXT( "CRectangle::Fill" );
		return Fill( DC.Handle(), Brush.Handle() );
    }

}//nsWin32
