//WinQLBitmap.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/Process/Module/WinQLModule.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: saved in member for later use" );
#include "WinQL/Application/Graphics/WinQLBitmap.h"
__QCMP_WARNING_POP
#include "WinQAPI/User32.h"
#include "WinQAPI/GDI32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CBitmap );

	__QCMP_DECLARE_PERTHREAD CBitmapHandleMap* p_tBitmapHandleMap = 0;

	//--------------------------------------------------------------------------------
	CBitmapHandleMap& CBitmap::HandleMap( void )
	{
		_WINQ_SFCONTEXT( "CBitmap::HandleMap" );
		if( p_tBitmapHandleMap == 0 )
		{
			p_tBitmapHandleMap = new CBitmapHandleMap;
		}

		return *p_tBitmapHandleMap;
	}

    //--------------------------------------------------------------------------------
	CBitmap::CBitmap() : CSelectableGDIObject< CBitmap >(), m_User32Library( CUser32::Instance() )
    {
        _WINQ_FCONTEXT( "CBitmap::CBitmap" );
        m_bOwner = false;
        SetHandle( 0 );
    }

	//--------------------------------------------------------------------------------
	CBitmap::CBitmap( CWinModule& Module, const TCHAR* lpBitmapName ) : CSelectableGDIObject< CBitmap >(), m_User32Library( CUser32::Instance() )
	{
		_WINQ_FCONTEXT( "CBitmap::CBitmap" );
		__QOR_PROTECT
		{
			SetHandle( m_User32Library.LoadBitmap( reinterpret_cast< ::HINSTANCE >( Module.ModuleHandle().Use() ), lpBitmapName ) );
			m_bOwner = true;
		}__QOR_ENDPROTECT
	}

    //--------------------------------------------------------------------------------
    CBitmap::CBitmap( CWinModule& Module, const TCHAR* lpszName, int cxDesired, int cyDesired, unsigned int fuLoad ) : CSelectableGDIObject< CBitmap >(), m_User32Library( CUser32::Instance() )
    {
        _WINQ_FCONTEXT( "CBitmap::CBitmap" );
        __QOR_PROTECT
        {
			SetHandle( m_User32Library.LoadImage( reinterpret_cast< ::HINSTANCE >( Module.ModuleHandle().Use() ), lpszName, IMAGE_BITMAP, cxDesired, cyDesired, fuLoad ) );
            m_bOwner = true;
        }__QOR_ENDPROTECT
    }

	//--------------------------------------------------------------------------------
	CBitmap::CBitmap( int nWidth, int nHeight, unsigned int cPlanes, unsigned int cBitsPerPel, const void* lpvBits ) : CSelectableGDIObject< CBitmap >(), m_User32Library( CUser32::Instance() )
	{
		_WINQ_FCONTEXT( "CBitmap::CBitmap" );
		__QOR_PROTECT
		{
			SetHandle( m_GDI32Library.CreateBitmap( nWidth, nHeight, cPlanes, cBitsPerPel, lpvBits ) );
			m_bOwner = true;
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CBitmap::CBitmap( const nsWin32::BITMAP* lpbm ) : CSelectableGDIObject< CBitmap >(), m_User32Library( CUser32::Instance() )
	{
		_WINQ_FCONTEXT( "CBitmap::CBitmap" );
		__QOR_PROTECT
		{
			SetHandle( m_GDI32Library.CreateBitmapIndirect( reinterpret_cast< const ::BITMAP* >( lpbm ) ) );
			m_bOwner = true;
		}__QOR_ENDPROTECT
	}
		
	//--------------------------------------------------------------------------------
	CBitmap::CBitmap( CDCHandle::refType hdc, int nWidth, int nHeight ) : CSelectableGDIObject< CBitmap >(), m_User32Library( CUser32::Instance() )
	{
		_WINQ_FCONTEXT( "CBitmap::CBitmap" );
		__QOR_PROTECT
		{
			SetHandle( m_GDI32Library.CreateCompatibleBitmap( reinterpret_cast< ::HDC >( hdc->Use() ), nWidth, nHeight ) );
			m_bOwner = true;
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------			
	CBitmap::CBitmap( CDCHandle::refType hdc, const nsWin32::BITMAPINFOHEADER* lpbmih, unsigned long fdwInit, const void* lpbInit, const nsWin32::BITMAPINFO* lpbmi, unsigned int fuUsage ) : CSelectableGDIObject(), m_User32Library( CUser32::Instance() )
	{
		_WINQ_FCONTEXT( "CBitmap::CBitmap" );
		__QOR_PROTECT
		{
			SetHandle( m_GDI32Library.CreateDIBitmap( reinterpret_cast< ::HDC >( hdc->Use() ), reinterpret_cast< const ::BITMAPINFOHEADER* >( lpbmih ), fdwInit, lpbInit, reinterpret_cast< const ::BITMAPINFO* >( lpbmi ), fuUsage ) );
			m_bOwner = true;
		}__QOR_ENDPROTECT
	}
					
	//--------------------------------------------------------------------------------
	CBitmap::CBitmap( CDCHandle::refType hdc, const nsWin32::BITMAPINFO* pbmi, unsigned int iUsage, void** ppvBits, void* hSection, unsigned long dwOffset ) : CSelectableGDIObject(), m_User32Library( CUser32::Instance() )
	{
		_WINQ_FCONTEXT( "CBitmap::CBitmap" );
		__QOR_PROTECT
		{
			SetHandle( m_GDI32Library.CreateDIBSection( reinterpret_cast< ::HDC >( hdc->Use() ), reinterpret_cast< const ::BITMAPINFO* >( pbmi ), iUsage, ppvBits, hSection, dwOffset ) );
			m_bOwner = true;
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CBitmap& CBitmap::operator =( const CBitmap& src )
	{
		_WINQ_FCONTEXT( "CBitmap::operator=" );

		if( this != &src )
		{
			if( Handle() != 0 )
			{
				DeleteGDIObject();
				//TODO: Copy from src
			}
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	bool CBitmap::LoadT( CWinModule& Module, const TCHAR* lpBitmapName )
	{
		_WINQ_FCONTEXT( "CBitmap::Load" );
		bool bResult = false;
		__QOR_PROTECT
		{
			if( Handle()->IsNull() )
			{
				SetHandle( m_User32Library.LoadBitmap( reinterpret_cast< ::HINSTANCE >( Module.ModuleHandle().Use() ), lpBitmapName ) );
				if( ! Handle()->IsNull() )
				{
					m_bOwner = true;
					bResult = true;
				}
			}
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
    bool CBitmap::LoadImageT( CWinModule& Module, const TCHAR* lpszName, int cxDesired, int cyDesired, unsigned int fuLoad )
    {
        _WINQ_FCONTEXT( "CBitmap::LoadImage" );
        bool bResult = false;
        __QOR_PROTECT
        {
			if( Handle()->IsNull() )
            {
				SetHandle( m_User32Library.LoadImage( reinterpret_cast< ::HINSTANCE >( Module.ModuleHandle().Use() ), lpszName, IMAGE_BITMAP, cxDesired, cyDesired, fuLoad ) );
				if( ! Handle()->IsNull() )
                {
                    m_bOwner = true;
                    bResult = true;
                }
            }
        }__QOR_ENDPROTECT
        return bResult;
    }

    //--------------------------------------------------------------------------------
    bool CBitmap::CreateCompatibleBitmap( CDCHandle::refType hdc, int nWidth, int nHeight )
    {
        _WINQ_FCONTEXT( "CBitmap::CreateCompatibleBitmap" );
        bool bResult = false;
        __QOR_PROTECT
        {
			if( Handle()->IsNull() )
            {
				SetHandle( m_GDI32Library.CreateCompatibleBitmap( reinterpret_cast< ::HDC >( hdc->Use() ), nWidth, nHeight ) );
                bResult = ( ! Handle()->IsNull() ) ? true : false;
                m_bOwner = bResult;
            }
        }__QOR_ENDPROTECT
        return bResult;
    }

	//--------------------------------------------------------------------------------
	long CBitmap::GetBits( long cbBuffer, void* lpvBits )
	{
		_WINQ_FCONTEXT( "CBitmap::GetBits" );
		LONG lResult = 0;
		__QOR_PROTECT
		{
			lResult = m_GDI32Library.GetBitmapBits( reinterpret_cast< ::HBITMAP >( Handle()->Use() ), cbBuffer, lpvBits );
		}__QOR_ENDPROTECT
		return lResult;
	}

	//--------------------------------------------------------------------------------
	int CBitmap::GetDIBits( CDCHandle::refType hdc, unsigned int uStartScan, unsigned int cScanLines, void* lpvBits, nsWin32::LPBITMAPINFO lpbi, unsigned int uUsage )
	{
		_WINQ_FCONTEXT( "CBitmap::GetDIBits" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_GDI32Library.GetDIBits( reinterpret_cast< ::HDC >( hdc->Use() ), reinterpret_cast< ::HBITMAP >( Handle()->Use() ), uStartScan, cScanLines, lpvBits, reinterpret_cast< ::LPBITMAPINFO >( lpbi ), uUsage );
		}__QOR_ENDPROTECT
		return iResult;
	}
		
	//--------------------------------------------------------------------------------
	long CBitmap::SetBits( unsigned long cBytes, const void* lpBits )
	{
		_WINQ_FCONTEXT( "CBitmap::SetBits" );
		LONG lResult = 0;
		__QOR_PROTECT
		{
			lResult = m_GDI32Library.SetBitmapBits( reinterpret_cast< ::HBITMAP >( Handle()->Use() ), cBytes, lpBits );
		}__QOR_ENDPROTECT
		return lResult;
	}
		
	//--------------------------------------------------------------------------------
	int CBitmap::SetDIBits( CDCHandle::refType hdc, unsigned int uStartScan, unsigned int cScanLines, const void* lpvBits, const nsWin32::BITMAPINFO* lpbmi, unsigned int fuColourUse )
	{
		_WINQ_FCONTEXT( "CBitmap::SetDIBits" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_GDI32Library.SetDIBits( reinterpret_cast< ::HDC >( hdc->Use() ), reinterpret_cast< ::HBITMAP >( Handle()->Use() ), uStartScan, cScanLines, lpvBits, reinterpret_cast< const ::BITMAPINFO* >( lpbmi ), fuColourUse );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	bool CBitmap::GetDimensions( nsWin32::SIZE* lpDimension )
	{
		_WINQ_FCONTEXT( "CBitmap::GetDimensions" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.GetBitmapDimensionEx( reinterpret_cast< ::HBITMAP >( Handle()->Use() ), reinterpret_cast< ::LPSIZE >( lpDimension ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------			
	bool CBitmap::SetDimensions( int nWidth, int nHeight, nsWin32::SIZE* lpSize )
	{
		_WINQ_FCONTEXT( "CBitmap::SetDimensions" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.SetBitmapDimensionEx( reinterpret_cast< ::HBITMAP >( Handle()->Use() ), nWidth, nHeight, reinterpret_cast< ::LPSIZE >( lpSize ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	CBitmap::~CBitmap()
	{
		_WINQ_FCONTEXT( "CBitmap::~CBitmap" );
        DeleteGDIObject();
	}

	//protected:

    //--------------------------------------------------------------------------------
    bool CBitmap::DeleteGDIObject( void )
    {
        _WINQ_FCONTEXT( "CBitmap::DeleteObject" );
        bool bResult = false;
        if( Handle() != 0 )
        {
            __QOR_PROTECT
            {
                m_GDI32Library.DeleteObject( Handle()->Use() );
                SetHandle( 0 );
                bResult = true;
            }__QOR_ENDPROTECT
        }
        return bResult;
    }

	//private:

	//--------------------------------------------------------------------------------
	CBitmap::CBitmap( CBitmap const& src ) : CSelectableGDIObject(), m_User32Library( CUser32::Instance() )
	{
	}

}//nsWin32
