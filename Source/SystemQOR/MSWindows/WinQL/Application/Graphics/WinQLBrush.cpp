//WinQLBrush.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "CompilerQOR.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: stored in member for later use" )
#include "WinQL/Application/Graphics/WinQLBrush.h"
__QCMP_WARNING_POP
#include "WinQAPI/User32.h"
#include "WinQAPI/GDI32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CBrush );

	__QCMP_DECLARE_PERTHREAD CTHandleMap< typename CTypedSessionHandle< CBrush >::refType, CBrush >* p_tBrushHandleMap = 0;

	//--------------------------------------------------------------------------------
	CTHandleMap< typename CTypedSessionHandle< CBrush >::refType, CBrush >& CBrush::HandleMap( void )
	{
		_WINQ_SFCONTEXT( "CBrush::HandleMap" );
		if( p_tBrushHandleMap == 0 )
		{
			p_tBrushHandleMap = new CTHandleMap< typename CTypedSessionHandle< CBrush >::refType, CBrush >;
		}

		return *p_tBrushHandleMap;
	}

	//--------------------------------------------------------------------------------			
	CBrush::CBrush( const nsWin32::LOGBRUSH& lplb ) : CSelectableGDIObject< CBrush >()
	{
		_WINQ_FCONTEXT( "CBrush::CBrush" );
		__QOR_PROTECT
		{
			SetHandle( m_GDI32Library.CreateBrushIndirect( reinterpret_cast< const ::LOGBRUSH* >( &lplb ) ) );
			m_bOwner = true;
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------			
	CBrush::CBrush( void* hglbDIBPacked, unsigned int fuColourSpec ) : CSelectableGDIObject< CBrush >()
	{
		_WINQ_FCONTEXT( "CBrush::CBrush" );
		__QOR_PROTECT
		{
			SetHandle( m_GDI32Library.CreateDIBPatternBrush( hglbDIBPacked, fuColourSpec ) );
			m_bOwner = true;
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CBrush::CBrush( const void* lpPackedDIB, unsigned int iUsage ) : CSelectableGDIObject< CBrush >()
	{
		_WINQ_FCONTEXT( "CBrush::CBrush" );
		__QOR_PROTECT
		{
			SetHandle( m_GDI32Library.CreateDIBPatternBrushPt( lpPackedDIB, iUsage ) );
			m_bOwner = true;
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------			
	CBrush::CBrush( int fnStyle, unsigned long clrref ) : CSelectableGDIObject< CBrush >()
	{
		_WINQ_FCONTEXT( "CBrush::CBrush" );
		__QOR_PROTECT
		{
			SetHandle( m_GDI32Library.CreateHatchBrush( fnStyle, clrref ) );
			m_bOwner = true;
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------			
	CBrush::CBrush( CBitmap& Bitmap ) : CSelectableGDIObject< CBrush >()
	{
		_WINQ_FCONTEXT( "CBrush::CBrush" );
		__QOR_PROTECT
		{
			SetHandle( m_GDI32Library.CreatePatternBrush( reinterpret_cast< ::HBITMAP >( Bitmap.Handle()->Use() ) ) );
			m_bOwner = true;
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------			
	CBrush::CBrush( unsigned long crColour ) : CSelectableGDIObject< CBrush >()
	{
		_WINQ_FCONTEXT( "CBrush::CBrush" );
		__QOR_PROTECT
		{
			SetHandle( m_GDI32Library.CreateSolidBrush( crColour ) );
			m_bOwner = true;
		}__QOR_ENDPROTECT
	}			

	//--------------------------------------------------------------------------------
	CBrush::~CBrush()
	{
		_WINQ_FCONTEXT( "CBrush::~CBrush" );
		if( m_bOwner )
		{
			__QOR_PROTECT
			{
				m_GDI32Library.DeleteObject( Handle()->Use() );
			}__QOR_ENDPROTECT
		}				
	}

	//protected:
			
	//--------------------------------------------------------------------------------
	CBrush::CBrush() : CSelectableGDIObject< CBrush >()
	{
		_WINQ_FCONTEXT( "CBrush::CBrush" );
		m_bOwner = false;
		SetHandle( 0 );
	}



	//--System Colour Brush-----------------------------------------------------------

	__QOR_IMPLEMENT_OCLASS_LUID( CSystemColourBrush );

	//--------------------------------------------------------------------------------
	CSystemColourBrush::CSystemColourBrush( int nIndex ) : CBrush(), m_User32Library( CUser32::Instance() )
	{
		_WINQ_FCONTEXT( "CSystemColourBrush::CSystemColourBrush" );
		__QOR_PROTECT
		{
			SetHandle( m_User32Library.GetSysColorBrush( nIndex ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CSystemColourBrush::~CSystemColourBrush()
	{
		_WINQ_FCONTEXT( "CSystemColourBrush::~CSystemColourBrush" );
	}

		
		
	//--Stock Brush-------------------------------------------------------------------

	__QOR_IMPLEMENT_OCLASS_LUID( CStockBrush );

	//--------------------------------------------------------------------------------
	CStockBrush::CStockBrush( int nBrush ) : CBrush()
	{
		_WINQ_FCONTEXT( "CStockBrush::CStockBrush" );
		__QOR_PROTECT
		{
			SetHandle( m_GDI32Library.GetStockObject( nBrush ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CStockBrush::~CStockBrush()
	{
		_WINQ_FCONTEXT( "CStockBrush::~CStockBrush" );
	}

}//nsWin32
