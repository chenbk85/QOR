//WinQLRegion.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: saved in member for later use" );
#include "WinQL/Application/Graphics/WinQLRegion.h"
#include "WinQL/Application/Graphics/DeviceContext/WinQLDCInternal.h"
__QCMP_WARNING_POP
#include "WinQAPI/GDI32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QCMP_DECLARE_PERTHREAD CRegionHandleMap* p_tRegionHandleMap = 0;

	//--------------------------------------------------------------------------------
	CRegionHandleMap& CRegion::HandleMap( void )
	{
		_WINQ_SFCONTEXT( "CRegion::HandleMap" );
		if( p_tRegionHandleMap == 0 )
		{
			p_tRegionHandleMap = new CRegionHandleMap;
		}

		return *p_tRegionHandleMap;
	}

	//--------------------------------------------------------------------------------
	CRegion::CRegion() : CGDIObject< CRegion >()
	{
		_WINQ_FCONTEXT( "CRegion::CRegion" );
		__QOR_PROTECT
		{
			m_bOwner = true;
			SetHandle( m_GDI32Library.CreateRectRgn( 0, 0, 0, 0 ) );				
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CRegion::CRegion( const CRegion& Src ) : CGDIObject< CRegion >( Src )
	{
		_WINQ_FCONTEXT( "CRegion::CRegion" );
		__QOR_PROTECT
		{
			m_bOwner = true;
			SetHandle( m_GDI32Library.CreateRectRgn( 0, 0, 0, 0 ) );
			m_GDI32Library.CombineRgn( reinterpret_cast< ::HRGN >( Handle()->Use() ), reinterpret_cast< ::HRGN >( ( const_cast< CRegion& >(Src) ).Handle()->Use() ), 0, RGN_COPY );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------			
	CRegion::CRegion( CRegion& Src1, CRegion& Src2, int fnCombineMode, int& iResult ) : CGDIObject< CRegion >()
	{
		_WINQ_FCONTEXT( "CRegion::CRegion" );
		__QOR_PROTECT
		{
			m_bOwner = true;
			SetHandle( m_GDI32Library.CreateRectRgn( 0, 0, 0, 0 ) );
			iResult = m_GDI32Library.CombineRgn( reinterpret_cast< ::HRGN >( Handle()->Use() ), reinterpret_cast< ::HRGN >( Src1.Handle()->Use() ), reinterpret_cast< ::HRGN >( Src2.Handle()->Use() ), fnCombineMode );
		}__QOR_ENDPROTECT
	}
		
	//--------------------------------------------------------------------------------			
	CRegion::CRegion( const nsWin32::XFORM* lpXform, unsigned long nCount, const nsWin32::RGNDATA* lpRgnData ) : CGDIObject< CRegion >()
	{
		_WINQ_FCONTEXT( "CRegion::CRegion" );
		__QOR_PROTECT
		{
			m_bOwner = true;
			SetHandle( m_GDI32Library.ExtCreateRegion( reinterpret_cast< const ::XFORM* >( lpXform ), nCount, reinterpret_cast< const ::RGNDATA* >( lpRgnData ) ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CRegion::~CRegion()
	{
		_WINQ_FCONTEXT( "CRegion::~CRegion" );
		__QOR_PROTECT
		{
			if( m_bOwner && !(Handle().IsNull()) )
			{
				m_GDI32Library.DeleteObject( reinterpret_cast< ::HRGN >( Handle()->Use() ) );
				SetHandle( 0 );
			}
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CRegionHandle::refType CRegion::DetachHandle()
	{
		_WINQ_FCONTEXT( "CRegion::DetachHandle" );

		CRegionHandle::refType Result( new CRegionHandle( this, m_Handle.AsHandle().ptr() ), true );
		SetHandle( 0 );
		m_bOwner = false;
		return Result;
	}

	//--------------------------------------------------------------------------------			
	int CRegion::Combine( CRegion& Src2, int fnCombineMode )
	{
		_WINQ_FCONTEXT( "CRegion::Combine" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_GDI32Library.CombineRgn( reinterpret_cast< ::HRGN >( Handle()->Use() ), reinterpret_cast< ::HRGN >( Handle()->Use() ), reinterpret_cast< ::HRGN >( Src2.Handle()->Use() ), fnCombineMode );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CRegion::Combine( CRegion& Src1, CRegion& Src2, int fnCombineMode )
	{
		_WINQ_FCONTEXT( "CRegion::Combine" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_GDI32Library.CombineRgn( reinterpret_cast< ::HRGN >( Handle()->Use() ), reinterpret_cast< ::HRGN >( Src1.Handle()->Use() ), reinterpret_cast< ::HRGN >( Src2.Handle()->Use() ), fnCombineMode );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	bool CRegion::operator == ( const CRegion& RgnCompare )
	{
		_WINQ_FCONTEXT( "CRegion::operator ==" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.EqualRgn( reinterpret_cast< ::HRGN >( Handle()->Use() ), reinterpret_cast< ::HRGN >( ( const_cast< CRegion& >(RgnCompare) ).Handle()->Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------			
	bool CRegion::Fill( CDCInternal& DC, CBrush& Brush )
	{
		_WINQ_FCONTEXT( "CRegion::Fill" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.FillRgn( reinterpret_cast< ::HDC >( DC.Handle()->Use() ), reinterpret_cast< ::HRGN >( Handle()->Use() ), reinterpret_cast< ::HBRUSH >( Brush.Handle()->Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CRegion::Frame( CDCInternal& DC, CBrush& Brush, int nWidth, int nHeight )
	{
		_WINQ_FCONTEXT( "CRegion::Frame" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.FrameRgn( reinterpret_cast< ::HDC >( DC.Handle()->Use() ), reinterpret_cast< ::HRGN >( Handle()->Use() ), reinterpret_cast< ::HBRUSH >( Brush.Handle()->Use() ), nWidth, nHeight ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CRegion::GetData( unsigned long dwCount, nsWin32::LPRGNDATA lpRgnData )
	{
		_WINQ_FCONTEXT( "CRegion::GetData" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = m_GDI32Library.GetRegionData( reinterpret_cast< ::HRGN >( Handle()->Use() ), dwCount, reinterpret_cast< ::LPRGNDATA >( lpRgnData ) );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	int CRegion::GetBox( nsWin32::RECT* lprc )
	{
		_WINQ_FCONTEXT( "CRegion::GetBox" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_GDI32Library.GetRgnBox( reinterpret_cast< ::HRGN >( Handle()->Use() ), reinterpret_cast< ::LPRECT >( lprc ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	bool CRegion::Invert( CDCInternal& DC )
	{
		_WINQ_FCONTEXT( "CRegion::Invert" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.InvertRgn( reinterpret_cast< ::HDC >( DC.Handle()->Use() ), reinterpret_cast< ::HRGN >( Handle()->Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CRegion::Offset( int nXOffset, int nYOffset )
	{
		_WINQ_FCONTEXT( "CRegion::Offset" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_GDI32Library.OffsetRgn( reinterpret_cast< ::HRGN >( Handle()->Use() ), nXOffset, nYOffset );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------			
	bool CRegion::PointIn( int X, int Y )
	{
		_WINQ_FCONTEXT( "CRegion::PointIn" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.PtInRegion( reinterpret_cast< ::HRGN >( Handle()->Use() ), X, Y ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CRegion::Paint( CDCInternal& DC )
	{
		_WINQ_FCONTEXT( "CRegion::Paint" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.PaintRgn( reinterpret_cast< ::HDC >( DC.Handle()->Use() ), reinterpret_cast< ::HRGN >( Handle()->Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CRegion::RectIn( const nsWin32::RECT* lprc )
	{
		_WINQ_FCONTEXT( "CRegion::RectIn" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.RectInRegion( reinterpret_cast< ::HRGN >( Handle()->Use() ), reinterpret_cast< const ::RECT* >( lprc ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CRegion::SetRect( int nLeftRect, int nTopRect, int nRightRect, int nBottomRect )
	{
		_WINQ_FCONTEXT( "CRegion::SetRect" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.SetRectRgn( reinterpret_cast< ::HRGN >( Handle()->Use() ), nLeftRect, nTopRect, nRightRect, nBottomRect ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}


	//--Elliptic Region

	//--------------------------------------------------------------------------------
	CEllipticRgn::CEllipticRgn( int nLeftRect, int nTopRect, int nRightRect, int nBottomRect ) : CRegion()
	{
		_WINQ_FCONTEXT( "CEllipticRgn::CEllipticRgn" );
		SetHandle( 0 );
		__QOR_PROTECT
		{
			m_GDI32Library.CreateEllipticRgn( nLeftRect, nTopRect, nRightRect, nBottomRect );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CEllipticRgn::CEllipticRgn( const nsWin32::RECT* lprc ) : CRegion()
	{
		_WINQ_FCONTEXT( "CEllipticRgn::CEllipticRgn" );
		SetHandle( 0 );
		__QOR_PROTECT
		{
			m_GDI32Library.CreateEllipticRgnIndirect( reinterpret_cast< const ::RECT* >( lprc ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CEllipticRgn::~CEllipticRgn()
	{
		_WINQ_FCONTEXT( "CEllipticRgn::~CEllipticRgn" );
	}



	//--Polygon Region----------------------------------------------------------------

	//--------------------------------------------------------------------------------
	CPolygonRgn::CPolygonRgn( const nsWin32::POINT* lppt, int cPoints, int fnPolyFillMode ) : CRegion()
	{
		_WINQ_FCONTEXT( "CPolygonRgn::CPolygonRgn" );
		SetHandle( 0 );
		__QOR_PROTECT
		{
			SetHandle( m_GDI32Library.CreatePolygonRgn( reinterpret_cast< const ::POINT* >( lppt ), cPoints, fnPolyFillMode ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CPolygonRgn::CPolygonRgn( const nsWin32::POINT* lppt, const int* lpPolyCounts, int nCount, int fnPolyFillMode ) : CRegion()
	{
		_WINQ_FCONTEXT( "CPolygonRgn::CPolygonRgn" );
		SetHandle( 0 );
		__QOR_PROTECT
		{
			SetHandle( m_GDI32Library.CreatePolyPolygonRgn( reinterpret_cast< const ::POINT* >( lppt ), lpPolyCounts, nCount, fnPolyFillMode ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CPolygonRgn::~CPolygonRgn()
	{
		_WINQ_FCONTEXT( "CPolygonRgn::~CPolygonRgn" );
	}


	//-- Rect Region

	//--------------------------------------------------------------------------------
	CRectRgn::CRectRgn( int nLeftRect, int nTopRect, int nRightRect, int nBottomRect ) : CRegion()
	{
		_WINQ_FCONTEXT( "CRectRgn::CRectRgn" );
		SetHandle( 0 );
		__QOR_PROTECT
		{
			SetHandle( m_GDI32Library.CreateRectRgn( nLeftRect, nTopRect, nRightRect, nBottomRect ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CRectRgn::CRectRgn( const nsWin32::RECT* lprc ) : CRegion()
	{
		_WINQ_FCONTEXT( "CRectRgn::CRectRgn" );
		SetHandle( 0 );
		__QOR_PROTECT
		{
			SetHandle( m_GDI32Library.CreateRectRgnIndirect( reinterpret_cast< const ::RECT* >( lprc ) ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CRectRgn::~CRectRgn()
	{
		_WINQ_FCONTEXT( "CRectRgn::~CRectRgn" );
	}


	//-- Round Rect Region

	//--------------------------------------------------------------------------------
	CRoundRectRgn::CRoundRectRgn( int nLeftRect, int nTopRect, int nRightRect, int nBottomRect, int nWidthEllipse, int nHeightEllipse ) : CRegion()
	{
		_WINQ_FCONTEXT( "CRoundRectRgn::CRoundRectRgn" );
		SetHandle( 0 );
		__QOR_PROTECT
		{
			SetHandle( m_GDI32Library.CreateRoundRectRgn( nLeftRect, nTopRect, nRightRect, nBottomRect, nWidthEllipse, nHeightEllipse ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CRoundRectRgn::~CRoundRectRgn()
	{
		_WINQ_FCONTEXT( "CRoundRectRgn::~CRoundRectRgn" );
	}

}//nsWin32
