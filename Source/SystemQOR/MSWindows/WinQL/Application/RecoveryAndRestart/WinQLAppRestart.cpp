//WinQLAppRestart.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/CodeServices/WinQLPolicy.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQAPI/Kernel32.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/RecoveryAndRestart/WinQLAppRestart.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CAppRestart );

	//--------------------------------------------------------------------------------
	CAppRestart::CAppRestart( const wchar_t* pwszCommandLine, unsigned long ulFlags ) 
	{
		_WINQ_FCONTEXT( "CAppRestart::CAppRestart" );
		RegisterApplicationRestart( pwszCommandLine, ulFlags );
	}

	//--------------------------------------------------------------------------------
	CAppRestart::~CAppRestart()
	{
		_WINQ_FCONTEXT( "CAppRestart::~CAppRestart" );
		UnregisterApplicationRestart();
	}

	//--------------------------------------------------------------------------------
	long CAppRestart::GetApplicationRestartSettings( void* hProcess, wchar_t* pwzCommandline, unsigned long* pcchSize, unsigned long* pdwFlags )
	{
		_WINQ_FCONTEXT( "CAppRestart::GetApplicationRestartSettings" );
		HRESULT hr = E_FAIL;
		__QOR_PROTECT
		{
			hr = CKernel32::GetApplicationRestartSettings( hProcess, pwzCommandline, pcchSize, pdwFlags );
		}__QOR_ENDPROTECT
		return hr;
	}

	//--------------------------------------------------------------------------------
	long CAppRestart::RegisterApplicationRestart( const wchar_t* pwzCommandline, unsigned long dwFlags )
	{
		_WINQ_FCONTEXT( "CAppRestart::RegisterApplicationRestart" );
		HRESULT hr = E_FAIL;
		__QOR_PROTECT
		{
			hr = CKernel32::RegisterApplicationRestart( pwzCommandline, dwFlags );
		}__QOR_ENDPROTECT
		return hr;
	}		

	//--------------------------------------------------------------------------------
	long CAppRestart::UnregisterApplicationRestart()
	{
		_WINQ_FCONTEXT( "CAppRestart::UnregisterApplicationRecoveryCallback" );
		HRESULT hr = E_FAIL;
		__QOR_PROTECT
		{
			hr = CKernel32::UnregisterApplicationRestart();
		}__QOR_ENDPROTECT
		return hr;
	}

}//nsWin32
