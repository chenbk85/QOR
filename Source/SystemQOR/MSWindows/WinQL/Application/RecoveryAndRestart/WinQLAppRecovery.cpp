//WinQLAppRestart.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/CodeServices/WinQLPolicy.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQAPI/Kernel32.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/RecoveryAndRestart/WinQLAppRecovery.h"
#include "WinQL/Application/Timer/WinQLWaitableTimer.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CAppRecovery );

	//--------------------------------------------------------------------------------
	CAppRecovery::CAppRecovery( unsigned long ulRecoveryPingInterval ) : m_ulRecoveryPingInterval( ulRecoveryPingInterval ), m_pTimer( 0 )
	{
		_WINQ_FCONTEXT( "CAppRecovery::CAppRecovery" );
		RegisterApplicationRecoveryCallback( &CAppRecovery::RecoveryCallback, this, m_ulRecoveryPingInterval, 0 );
	}

	//--------------------------------------------------------------------------------
	CAppRecovery::~CAppRecovery()
	{
		_WINQ_FCONTEXT( "CAppRecovery::~CAppRecovery" );
		UnregisterApplicationRecoveryCallback();
	}

	//--------------------------------------------------------------------------------
	bool CAppRecovery::Recover( void )
	{	
		_WINQ_FCONTEXT( "CAppRecovery::Recover" );
		//TODO: This must pass a message up to the main application for it to perform recovery and then wait for a response
		return false;
	}
	
	//--------------------------------------------------------------------------------
	void CAppRecovery::Cancel( void )
	{
		_WINQ_FCONTEXT( "CAppRecovery::Cancel" );
		//TODO: This must pass a message up to the main application for it to cancel recovery and then wait for a response
	}

	//--------------------------------------------------------------------------------
	void CAppRecovery::ApplicationRecoveryFinished( bool bSuccess )
	{
		_WINQ_FCONTEXT( "CAppRecovery::ApplicationRecoveryFinished" );
		__QOR_PROTECT
		{
			CKernel32::ApplicationRecoveryFinished( bSuccess ? TRUE : FALSE );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	long CAppRecovery::ApplicationRecoveryInProgress( int* pbCanceled )
	{
		_WINQ_FCONTEXT( "CAppRecovery::ApplicationRecoveryInProgress" );
		HRESULT hr = E_FAIL;
		__QOR_PROTECT
		{
			hr = CKernel32::ApplicationRecoveryInProgress( pbCanceled );
		}__QOR_ENDPROTECT
		return hr;
	}

	//--------------------------------------------------------------------------------
	long CAppRecovery::GetApplicationRecoveryCallback( void* hProcess, nsWin32::APPLICATION_RECOVERY_CALLBACK* pRecoveryCallback, void** ppvParameter, unsigned long* dwPingInterval, unsigned long* dwFlags )
	{
		_WINQ_FCONTEXT( "CAppRecovery::GetApplicationRecoveryCallback" );
		HRESULT hr = E_FAIL;
		__QOR_PROTECT
		{
			hr = CKernel32::GetApplicationRecoveryCallback( hProcess, pRecoveryCallback, ppvParameter, dwPingInterval, dwFlags );
		}__QOR_ENDPROTECT
		return hr;
	}

	//--------------------------------------------------------------------------------
	void CAppRecovery::ProcessRecover()
	{
		_WINQ_FCONTEXT( "CAppRecovery::ProcessRecover" );

		//Need to set up a Timer to Ping WER until Recovery is Complete
		m_pTimer = new CWaitableTimer;
		m_pTimer->Set( 0, m_ulRecoveryPingInterval * 0.9, &RecoveryPingCallback, this, true );
		
		bool bResult = Recover();

		m_pTimer->Cancel();
		delete m_pTimer;
		m_pTimer = 0;
		ApplicationRecoveryFinished( bResult );
		
	}

	//--------------------------------------------------------------------------------
	void CAppRecovery::RecoveryPingCallback( void* pArg, unsigned long ulTimerLowValue, unsigned long ulTimerHighValue )
	{
		_WINQ_SFCONTEXT( "CAppRecovery::RecoveryPingCallback" );
		CAppRecovery* pRecovery = reinterpret_cast< CAppRecovery* >( pArg );
		if( pRecovery )
		{
			int bCancelled = false;
			pRecovery->ApplicationRecoveryInProgress( &bCancelled );

			if( bCancelled )
			{
				pRecovery->CancelRecovery();
			}
		}
	}

	//--------------------------------------------------------------------------------
	void CAppRecovery::CancelRecovery()
	{
		_WINQ_FCONTEXT( "CAppRecovery::CancelRecovery" );
		m_pTimer->Cancel();
		delete m_pTimer;
		m_pTimer = 0;
		Cancel();
	}

	//--------------------------------------------------------------------------------
	unsigned long __QCMP_STDCALLCONVENTION CAppRecovery::RecoveryCallback( void* pvParameter )
	{
		_WINQ_SFCONTEXT( "CAppRecovery::RecoveryCallback" );

		CAppRecovery* pAppRecoveryInstance = reinterpret_cast< CAppRecovery* >( pvParameter );

		if( pAppRecoveryInstance )
		{
			pAppRecoveryInstance->ProcessRecover();
		}
		return 0;
	}

	//--------------------------------------------------------------------------------
	long CAppRecovery::RegisterApplicationRecoveryCallback( nsWin32::APPLICATION_RECOVERY_CALLBACK pRecoveryCallback, void* pvParameter, unsigned long ulPingInterval, unsigned long dwFlags )
	{
		_WINQ_FCONTEXT( "CAppRecovery::RegisterApplicationRecoveryCallback" );
		HRESULT hr = E_FAIL;
		__QOR_PROTECT
		{
			m_ulRecoveryPingInterval = ulPingInterval;
			hr = CKernel32::RegisterApplicationRecoveryCallback( pRecoveryCallback, pvParameter, m_ulRecoveryPingInterval, dwFlags );
		}__QOR_ENDPROTECT
		return hr;
	}

	//--------------------------------------------------------------------------------
	long CAppRecovery::UnregisterApplicationRecoveryCallback()
	{
		_WINQ_FCONTEXT( "CAppRecovery::UnregisterApplicationRecoveryCallback" );
		HRESULT hr = E_FAIL;
		__QOR_PROTECT
		{
			hr = CKernel32::UnregisterApplicationRecoveryCallback();
		}__QOR_ENDPROTECT
		return hr;
	}

}//nsWin32
