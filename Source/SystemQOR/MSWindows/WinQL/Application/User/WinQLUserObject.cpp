//WinQLUserObject.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/WinQL.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/User/WinQLUserObject.h"
#include "WinQAPI/User32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CUserObject );

	//--------------------------------------------------------------------------------
	CUserObject::CUserObject( CHandle& h ) : m_User32Library( CUser32::Instance() )
	,	m_Handle( h.ptr() )
	{
		_WINQ_FCONTEXT( "CUserObject::CUserObject" );
	}

	//--------------------------------------------------------------------------------
	CUserObject::CUserObject( const CUserObject& Src ) : m_User32Library( CUser32::Instance() )
	,	m_Handle( Src.m_Handle.ptr() )
	{
		_WINQ_FCONTEXT( "CUserObject::CUserObject" );
	}

	//--------------------------------------------------------------------------------
	CUserObject::~CUserObject()
	{
		_WINQ_FCONTEXT( "CUserObject::~CUserObject" );
	}

	//--------------------------------------------------------------------------------
	bool CUserObject::GrantAccess( void* hJob, int bGrant )
	{
		_WINQ_FCONTEXT( "CUserObject::GrantAccess" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.UserHandleGrantAccess( m_Handle.Use(), hJob, bGrant ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CUserObject::GetSecurity( unsigned long* pSIRequested, void* pSD, unsigned long nLength, unsigned long* lpnLengthNeeded )
	{
		_WINQ_FCONTEXT( "CUserObject::GetSecurity" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.GetUserObjectSecurity( m_Handle.Use(), pSIRequested, pSD, nLength, lpnLengthNeeded ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CUserObject::SetSecurity( unsigned long* pSIRequested, void* pSID )
	{
		_WINQ_FCONTEXT( "CUserObject::SetSecurity" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.SetUserObjectSecurity( m_Handle.Use(), pSIRequested, pSID ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

}//nsWin32
