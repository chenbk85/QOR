//WinQLExceptionImpl.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Microsoft Windows compatible implementation of Exception Frame class

#include "WinQL/Application/ErrorSystem/WinQLExceptionImpl.h"
#include "WinQL/Definitions/Data.h"
#include "WinQAPI/Kernel32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
//	//--------------------------------------------------------------------------------
//	IExceptionFrame::IExceptionFrame()
//	{
//	}
//
//	//--------------------------------------------------------------------------------
//	IExceptionFrame::~IExceptionFrame()
//	{
//	}
//
//	//--------------------------------------------------------------------------------
//	__QCMP_NORETURN void IExceptionFrame::RaiseException( const void* prec )
//	{		
//		_EXCEPTION_RECORD* pRec = reinterpret_cast< _EXCEPTION_RECORD* >( const_cast< void* >( prec ) );	
//		//nsWinQAPI::CKernel32::RaiseException( pRec->ExceptionCode, pRec->ExceptionFlags, pRec->NumberParameters, pRec->ExceptionInformation );
//	}
//
//	//--------------------------------------------------------------------------------
//	IExceptionFrame* IExceptionFrame::GetCurrent()
//	{
//		IExceptionFrame* pRet;
////TODO:
//#if	( __QCMP_COMPILER == __QCMP_MSVC )
//		__asm 
//		{
//			mov eax, dword ptr fs:[0];
//			mov pRet, eax
//		}
//#endif
//		return pRet;
//	}
//
//	//--------------------------------------------------------------------------------
//	void __QCMP_STDCALLCONVENTION IExceptionFrame::UnwindNestedFrames( void* pExcpt )
//	{	
//		::EXCEPTION_RECORD* pExcept = reinterpret_cast< ::EXCEPTION_RECORD* >( pExcpt );
//		/*
//		CExceptionFrame* const pDispatcherFrame = GetCurrent();	
//		UnwindStack( pExcept, 0 );
//		pExcept->ExceptionFlags &= 0xFFFFFFFD;
//		pDispatcherFrame->m_pNext = GetCurrent();
//		pDispatcherFrame->SetCurrent();
//		*/
//	}
//
//	//--------------------------------------------------------------------------------
//	void IExceptionFrame::UnwindStack( void* pExceptionRecord, void * ReturnValue )
//	{
//		void * pReturnPoint;
////TODO:
//#if	( __QCMP_COMPILER == __QCMP_MSVC )
//		__asm mov pReturnPoint, offset ReturnPoint;
//		__asm pusha	
//		nsWinQAPI::CKernel32::RtlUnwind( (void*)this, pReturnPoint, reinterpret_cast< EXCEPTION_RECORD* >( pExceptionRecord ), ReturnValue );
//ReturnPoint: 
//		__asm popa;
//#endif
//	}
//
//	//--------------------------------------------------------------------------------
//	void IExceptionFrame::SetCurrent()
//	{
////TODO: AsmJit this assembler via a naked C++ function
//#if	( __QCMP_COMPILER == __QCMP_MSVC )
//		__asm 
//		{				
//			mov eax,this
//			mov dword ptr fs:[0],eax
//		}
//#endif
//	}

}//nsWin32


