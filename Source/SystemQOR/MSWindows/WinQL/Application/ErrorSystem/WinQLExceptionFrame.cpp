//WinQLExceptionFrame.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Implements parts of the C++ and SEH exception mechanism on 32bit Windows

#ifndef _WIN64		//This doesn't apply to 64bit Windows

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/ErrorSystem/WinQLExceptionFrame.h"
#include "WinQAPI/Kernel32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	//--------------------------------------------------------------------------------
	__QCMP_NORETURN __QCMP_ALWAYSINLINE void RaiseException( const nsWin32::EXCEPTION_RECORD* prec)
	{
		CKernel32::RaiseException( prec->ExceptionCode, prec->ExceptionFlags, prec->NumberParameters, prec->ExceptionInformation );
	}

	//--------------------------------------------------------------------------------
	void __QCMP_STDCALLCONVENTION CExceptionFrame::UnwindNestedFrames( nsWin32::EXCEPTION_RECORD* pExcept )
	{	
		CExceptionFrame* const pDispatcherFrame = GetCurrent();	
		UnwindStack( pExcept, 0 );
		pExcept->ExceptionFlags &= 0xFFFFFFFD;
		pDispatcherFrame->m_pNext = GetCurrent();
		pDispatcherFrame->SetCurrent();
	}

	//--------------------------------------------------------------------------------
	__QCMP_ALWAYSINLINE void CExceptionFrame::UnwindStack( nsWin32::EXCEPTION_RECORD * pExceptionRecord, void* ReturnValue )
	{
		void* pReturnPoint;
#pragma TODO ( "asm to be jit generated" )
#if	( __QCMP_COMPILER == __QCMP_MSVC )
		__asm mov pReturnPoint, offset ReturnPoint;
		__asm pusha
		CKernel32::Instance().RtlUnwind( (void*)this, pReturnPoint, reinterpret_cast< ::PEXCEPTION_RECORD >( pExceptionRecord ), ReturnValue );

ReturnPoint: 

		__asm popa;
#endif
	}


}//nsWin32

#endif //_WIN64
