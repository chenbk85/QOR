//WinQLFlagChecks.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/WinQL.h"
#include "WinQL/Application/ErrorSystem/WinQLFlagChecks.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/ErrorSystem/WinQLParamErrorDomain.h"
#include "WinQL/Application/Threading/WinQLThread.h"
#include "WinQL/Application/Threading/WinQLEvent.h"
#include "WinQL/Definitions/Constants.h"

//--------------------------------------------------------------------------------
namespace nsParamChecking
{
	/*
	//--------------------------------------------------------------------------------
	void CRangeCheck::Check( unsigned long dwVal, unsigned long dwMin, unsigned long dwMax )
	{
	}
	*/
}//nsParamChecking

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	namespace nsParamCheck
	{
		//--------------------------------------------------------------------------------
		void CEventFlagsCheck::Check( unsigned long dwFlags )
		{
#		if ( _WIN32_WINNT >= 0x0600 )
			unsigned long dwMask1 = nsWin32::CEvent::_CREATE_EVENT_INITIAL_SET | nsWin32::CEvent::_CREATE_EVENT_MANUAL_RESET;
			if( ( dwMask1 | dwFlags ) != dwMask1 )
			{
				//Error Flags outside mask
			}
#		endif
		}

		//--------------------------------------------------------------------------------
		void CEventSyncAccessFlagsCheck::Check( unsigned long dwFlags )
		{
			unsigned long dwMask1 = Delete | Read_Control | Synchronize | Write_DAC | Write_Owner | Event_All_Access | Event_Modify_State;
			if( ( dwMask1 | dwFlags ) != dwMask1 )
			{
				//Error Flags outside mask
			}
		}

		//--------------------------------------------------------------------------------
		//TODO:
		void CMutexAccessFlagsCheck::Check( unsigned long dwFlags )
		{

		}

		//--------------------------------------------------------------------------------
		void CSemaphoreAccessFlagsCheck::Check( unsigned long dwFlags )
		{
			unsigned long dwMask1 = Standard_Rights_All | Semaphore_All_Access;
			if( ( dwMask1 | dwFlags ) != dwMask1 )
			{
				//Error Flags outside mask
			}
		}

		//--------------------------------------------------------------------------------
		void CTQTCreateFlagsCheck::Check( unsigned long ulFlags )
		{
			unsigned long ulMask = WT_ExecuteInTimerThread | WT_ExecuteInIOThread | WT_ExecuteInPersistentThread | WT_ExecuteLongFunction | WT_ExecuteOnlyOnce
#if		( _WIN32_WINNT > 0x0501 || ( _WIN32_WINNT ==  0x0501 && NTDDI_VERSION >= 0x05010200 ) )
				| WT_Transfer_Impersonation
#endif
				;
			if( ( ulMask | ulFlags ) != ulMask )
			{
				//Error Flags outside mask
			}
		}

		//--------------------------------------------------------------------------------
		void CWaitTmrCreateFlagsCheck::Check( unsigned long dwFlags )
		{
			if( dwFlags != 0 && dwFlags != Create_Waitable_Timer_Manual_Reset )
			{
				//Error Flags outside mask
			}
		}

		//--------------------------------------------------------------------------------
		void CSybcObjAccessFlagsCheck::Check( unsigned long dwFlags )
		{
			unsigned long dwMask = Standard_Rights_All;
			if( ( dwMask | dwFlags ) != dwMask )
			{
				//Error Flags outside mask
			}
		}

		//--------------------------------------------------------------------------------
		void CCritSecCreateFlagsCheck::Check( unsigned long dwFlags )
		{
			if( dwFlags != 0 && dwFlags != Critical_Section_No_Debug_Info )
			{
				//TODO: Error flags outside mask
			}
		}

		//--------------------------------------------------------------------------------
		void CInitOnceBeginFlagsCheck::Check( unsigned long dwFlags )
		{
			unsigned long dwMask = Init_Once_Async | Init_Once_Check_Only;
			if( ( dwFlags | dwMask ) != dwMask )
			{
				//Error flags outside mask
			}
		}

		//--------------------------------------------------------------------------------
		void CInitOnceCompleteFlagsCheck::Check( unsigned long dwFlags )
		{
			unsigned long dwMask = Init_Once_Async | Init_Once_Init_Failed;
			if( ( dwFlags | dwMask ) != dwMask )
			{
				//Error flags outside mask
			}
		}

		//--------------------------------------------------------------------------------
		void CRgstrWaitFlagsCheck::Check( unsigned long ulFlags )
		{
			unsigned long ulMask = WT_ExecuteInIOThread | WT_ExecuteInPersistentThread | WT_ExecuteLongFunction
#if		( _WIN32_WINNT > 0x0501 || ( _WIN32_WINNT ==  0x0501 && NTDDI_VERSION >= 0x05010200 ) )
				| WT_Transfer_Impersonation;
#else
				;
#endif
			if( ( ulFlags | ulMask ) != ulMask )
			{
				//Error flags outside mask
			}
		}

	}//nsParamCheck

}//nsWin32
