//WinQLDebugging.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/ErrorSystem/WinQLDebugging.h"
#include "WinQAPI/Kernel32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CDebuggingHelper );

	//--------------------------------------------------------------------------------
	CDebuggingHelper::CDebuggingHelper()
	{
		_WINQ_FCONTEXT( "CDebuggingHelper::CDebuggingHelper" );
	}

	//--------------------------------------------------------------------------------
	CDebuggingHelper::~CDebuggingHelper()
	{
		_WINQ_FCONTEXT( "CDebuggingHelper::~CDebuggingHelper" );
	}

	//--------------------------------------------------------------------------------
	bool CDebuggingHelper::CheckRemoteDebuggerPresent( void* hProcess, int* pbDebuggerPresent )
	{
		_WINQ_FCONTEXT( "CDebuggingHelper::CheckRemoteDebuggerPresent" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::CheckRemoteDebuggerPresent( hProcess, pbDebuggerPresent ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CDebuggingHelper::ContinueDebugEvent( unsigned long dwProcessId, unsigned long dwThreadId, unsigned long dwContinueStatus )
	{
		_WINQ_FCONTEXT( "CDebuggingHelper::ContinueDebugEvent" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::ContinueDebugEvent( dwProcessId, dwThreadId, dwContinueStatus ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CDebuggingHelper::DebugActiveProcess( unsigned long dwProcessId )
	{
		_WINQ_FCONTEXT( "CDebuggingHelper::DebugActiveProcess" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::DebugActiveProcess( dwProcessId ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CDebuggingHelper::DebugActiveProcessStop( unsigned long dwProcessId )
	{
		_WINQ_FCONTEXT( "CDebuggingHelper::DebugActiveProcessStop" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::DebugActiveProcessStop( dwProcessId ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	void CDebuggingHelper::Break()
	{
		_WINQ_FCONTEXT( "CDebuggingHelper::DebugBreak" );
		CKernel32::DebugBreak();
	}

	//------------------------------------------------------------------------------
	bool CDebuggingHelper::DebugBreakProcess( void* Process )
	{
		_WINQ_FCONTEXT( "CDebuggingHelper::DebugBreakProcess" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::DebugBreakProcess( Process ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CDebuggingHelper::DebugSetProcessKillOnExit( bool KillOnExit )
	{
		_WINQ_FCONTEXT( "CDebuggingHelper::DebugSetProcessKillOnExit" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::DebugSetProcessKillOnExit( KillOnExit ? TRUE : FALSE ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	void CDebuggingHelper::FatalExit( int ExitCode )
	{
		_WINQ_FCONTEXT( "CDebuggingHelper::FatalExit" );
		CKernel32::FatalExit( ExitCode );
	}

	//------------------------------------------------------------------------------
	bool CDebuggingHelper::FlushInstructionCache( void* hProcess, const void* lpBaseAddress, Cmp_ulong_ptr dwSize )
	{
		_WINQ_FCONTEXT( "CDebuggingHelper::FlushInstructionCache" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::FlushInstructionCache( hProcess, lpBaseAddress, dwSize ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CDebuggingHelper::GetThreadContext( void* hThread, nsWin32::CONTEXT* lpContext )
	{
		_WINQ_FCONTEXT( "CDebuggingHelper::GetThreadContext" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetThreadContext( hThread, reinterpret_cast< ::CONTEXT* >( lpContext ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CDebuggingHelper::GetThreadSelectorEntry( void* hThread, unsigned long dwSelector, nsWin32::LPLDT_ENTRY lpSelectorEntry )
	{
		_WINQ_FCONTEXT( "CDebuggingHelper::GetThreadSelectorEntry" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetThreadSelectorEntry( hThread, dwSelector, reinterpret_cast< ::LPLDT_ENTRY >( lpSelectorEntry ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CDebuggingHelper::IsDebuggerPresent()
	{
		_WINQ_FCONTEXT( "CDebuggingHelper::IsDebuggerPresent" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::IsDebuggerPresent() ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	void CDebuggingHelper::OutputDebugStringT( const TCHAR* lpOutputString )
	{
		_WINQ_FCONTEXT( "CDebuggingHelper::OutputDebugString" );
		__QOR_PROTECT
		{
			CKernel32::OutputDebugString( lpOutputString );
		}__QOR_ENDPROTECT
	}

	//------------------------------------------------------------------------------
	bool CDebuggingHelper::ReadProcessMemory( void* hProcess, const void* lpBaseAddress, void* lpBuffer, Cmp_ulong_ptr nSize, Cmp_ulong_ptr* lpNumberOfBytesRead )
	{
		_WINQ_FCONTEXT( "CDebuggingHelper::ReadProcessMemory" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::ReadProcessMemory( hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesRead ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CDebuggingHelper::SetThreadContext( void* hThread, const nsWin32::CONTEXT* lpContext )
	{
		_WINQ_FCONTEXT( "CDebuggingHelper::SetThreadContext" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetThreadContext( hThread, reinterpret_cast< const ::CONTEXT* >( lpContext ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CDebuggingHelper::WaitForDebugEvent( nsWin32::LPDEBUG_EVENT lpDebugEvent, unsigned long dwMilliseconds )
	{
		_WINQ_FCONTEXT( "CDebuggingHelper::WaitForDebugEvent" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::WaitForDebugEvent( reinterpret_cast< ::LPDEBUG_EVENT >( lpDebugEvent ), dwMilliseconds ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CDebuggingHelper::Wow64GetThreadContext( void* hThread, nsWin32::PWOW64_CONTEXT lpContext )
	{
		_WINQ_FCONTEXT( "CDebuggingHelper::Wow64GetThreadContext" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::Wow64GetThreadContext( hThread, reinterpret_cast< ::PWOW64_CONTEXT >( lpContext ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CDebuggingHelper::Wow64SetThreadContext( void* hThread, const nsWin32::WOW64_CONTEXT* lpContext )
	{
		_WINQ_FCONTEXT( "CDebuggingHelper::Wow64SetThreadContext" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::Wow64SetThreadContext( hThread, reinterpret_cast< const ::WOW64_CONTEXT* >( lpContext ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CDebuggingHelper::WriteProcessMemory( void* hProcess, void* lpBaseAddress, const void* lpBuffer, Cmp_ulong_ptr nSize, Cmp_ulong_ptr* lpNumberOfBytesWritten )
	{
		_WINQ_FCONTEXT( "CDebuggingHelper::WriteProcessMemory" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::WriteProcessMemory( hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

#if( _MSC_VER < 1700 && !defined( __MINGW32__ ) )
	//--------------------------------------------------------------------------------
	bool CDebuggingHelper::Toolhelp32ReadProcessMemory( unsigned long th32ProcessID, const void* lpBaseAddress, void* lpBuffer, Cmp_ulong_ptr cbRead, Cmp_ulong_ptr* lpNumberOfBytesRead )
	{
		_WINQ_FCONTEXT( "CDebuggingHelper::Toolhelp32ReadProcessMemory" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::Toolhelp32ReadProcessMemory( th32ProcessID, lpBaseAddress, lpBuffer, cbRead, lpNumberOfBytesRead ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDebuggingHelper::Heap32First( nsWin32::LPHEAPENTRY32 lphe, unsigned long th32ProcessID, Cmp_ulong_ptr th32HeapID )
	{
		_WINQ_FCONTEXT( "CDebuggingHelper::Heap32First" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::Heap32First( reinterpret_cast< ::LPHEAPENTRY32 >( lphe ), th32ProcessID, th32HeapID ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDebuggingHelper::Heap32Next( nsWin32::LPHEAPENTRY32 lphe )
	{
		_WINQ_FCONTEXT( "CDebuggingHelper::Heap32Next" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::Heap32Next( reinterpret_cast< ::LPHEAPENTRY32 >( lphe ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}
#endif//( _MSC_VER < 1700 && !defined( __MINGW32__ ) )
	//--------------------------------------------------------------------------------
	bool CDebuggingHelper::IsBadHugeReadPtr( const void* lp, Cmp_uint_ptr ucb )
	{
		_WINQ_FCONTEXT( "CDebuggingHelper::IsBadHugeReadPtr" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::IsBadHugeReadPtr( lp, ucb ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDebuggingHelper::IsBadHugeWritePtr( void* lp, Cmp_uint_ptr ucb )
	{
		_WINQ_FCONTEXT( "CDebuggingHelper::IsBadHugeWritePtr" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::IsBadHugeWritePtr( lp, ucb ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}


#if( _MSC_VER < 1700 && !defined( __MINGW32__ ) )

	//--Tool Help 32------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CToolHelp32Snapshot );

	//--------------------------------------------------------------------------------
	CToolHelp32Snapshot::CToolHelp32Snapshot( unsigned long dwFlags, unsigned long th32ProcessID )
	{
		_WINQ_FCONTEXT( "CToolHelp32Snapshot::CToolHelp32Snapshot" );
		__QOR_PROTECT
		{
			m_h = CKernel32::CreateToolhelp32Snapshot( dwFlags, th32ProcessID );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CToolHelp32Snapshot::~CToolHelp32Snapshot()
	{
		_WINQ_FCONTEXT( "CToolHelp32Snapshot::~CToolHelp32Snapshot" );
		__QOR_PROTECT
		{
			CKernel32::CloseHandle( m_h );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	bool CToolHelp32Snapshot::Thread32First( nsWin32::LPTHREADENTRY32 lpte )
	{
		_WINQ_FCONTEXT( "CToolHelp32Snapshot::Thread32First" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::Thread32First( m_h, reinterpret_cast< ::LPTHREADENTRY32 >( lpte ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CToolHelp32Snapshot::Thread32Next( nsWin32::LPTHREADENTRY32 lpte )
	{
		_WINQ_FCONTEXT( "CToolHelp32Snapshot::Thread32Next" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::Thread32Next( m_h, reinterpret_cast< ::LPTHREADENTRY32 >( lpte ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}	

	//--------------------------------------------------------------------------------
	bool CToolHelp32Snapshot::Process32FirstT( nsWin32::pProcessEntry32 lppe )
	{
		_WINQ_FCONTEXT( "CToolHelp32Snapshot::Process32First" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::Process32First( m_h, reinterpret_cast< ::LPPROCESSENTRY32 >( lppe ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CToolHelp32Snapshot::Process32NextT( nsWin32::pProcessEntry32 lppe )
	{
		_WINQ_FCONTEXT( "CToolHelp32Snapshot::Process32Next" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::Process32Next( m_h, reinterpret_cast< ::LPPROCESSENTRY32 >( lppe ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CToolHelp32Snapshot::Module32FirstT( nsWin32::pModuleEntry32 lpme )
	{
		_WINQ_FCONTEXT( "CToolHelp32Snapshot::Module32First" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::Module32First( m_h, reinterpret_cast< ::LPMODULEENTRY32 >( lpme ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CToolHelp32Snapshot::Module32NextT( nsWin32::pModuleEntry32 lpme )
	{
		_WINQ_FCONTEXT( "CToolHelp32Snapshot::Module32Next" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::Module32Next( m_h, reinterpret_cast< ::LPMODULEENTRY32 >( lpme ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CToolHelp32Snapshot::Heap32ListFirstT( nsWin32::LPHEAPLIST32 lphl )
	{
		_WINQ_FCONTEXT( "CToolHelp32Snapshot::Heap32ListFirst" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::Heap32ListFirst( m_h, reinterpret_cast< ::LPHEAPLIST32 >( lphl ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CToolHelp32Snapshot::Heap32ListNextT( nsWin32::LPHEAPLIST32 lphl )
	{
		_WINQ_FCONTEXT( "CToolHelp32Snapshot::Heap32ListNext" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::Heap32ListNext( m_h, reinterpret_cast< ::LPHEAPLIST32 >( lphl ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

#endif//( _MSC_VER < 1700 && !defined( __MINGW32__ ) )

}//nsWin32

