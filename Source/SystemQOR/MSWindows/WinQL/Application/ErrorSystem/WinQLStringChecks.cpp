//WinQLStringChecks.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLStringChecks.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/ErrorSystem/WinQLParamErrorDomain.h"
#include "WinQL/Application/Threading/WinQLThread.h"
#include "WinQL/Application/ErrorSystem/WinQLFunctionContext.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	namespace nsParamCheck
	{
		using namespace nsWinQAPI;

		//--------------------------------------------------------------------------------
		void CStringLenCheck::Check( const char* psz, int iMaxLen )
		{			
			char* pCheck = const_cast< char* >( psz );
			unsigned int uiPos = 0;
			while( ( uiPos <= static_cast< unsigned int >( iMaxLen ) ) && ( pCheck[ uiPos ] != 0 ) )
			{
				uiPos++;
			}
			if( uiPos > static_cast< unsigned int >( iMaxLen ) )
			{
				CFunctionContext* pFContext = dynamic_cast< CFunctionContext* >( nsWin32::t_pCurrentWin32Thread->FunctionContext() );
				nsWin32::CError::Raise( pFContext->File(),
					0, pFContext->Name(),
					CParamErrorDomain::STRING_TOO_LONG,
					nsWin32::CError::ERR_LVL_CONTINUE );
			}
		}
        
        //--------------------------------------------------------------------------------
		void CStringLenCheck::Check( const wchar_t* pwsz, int iMaxLen )
		{			
			wchar_t* pCheck = const_cast< wchar_t* >( pwsz );
			unsigned int uiPos = 0;
			while( ( uiPos <= static_cast< unsigned int >( iMaxLen ) ) && ( pCheck[ uiPos ] != 0 ) )
			{
				uiPos++;
			}
			if( uiPos > static_cast< unsigned int >( iMaxLen ) )
			{
				CFunctionContext* pFContext = dynamic_cast< CFunctionContext* >( nsWin32::t_pCurrentWin32Thread->FunctionContext() );
				nsWin32::CError::Raise( pFContext->File(),
					0, pFContext->Name(),
					CParamErrorDomain::STRING_TOO_LONG,
					nsWin32::CError::ERR_LVL_CONTINUE );
			}
		}

		//--------------------------------------------------------------------------------
		void CStringKONCheck::Check( const char* psz )
		{
			char* pCheck = const_cast< char* >( psz );
			unsigned int uiPos = 0;
			unsigned int uiCount = 0;
			while( uiPos < Max_Path && pCheck[ uiPos ] != 0 )
			{
				if( pCheck[ uiPos ] == '\\' )
				{
					uiCount++;
				}
				uiPos++;
			}
			if( uiCount > 1 )
			{
				CFunctionContext* pFContext = dynamic_cast< CFunctionContext* >( nsWin32::t_pCurrentWin32Thread->FunctionContext() );

				nsWin32::CError::Raise( pFContext->File(),
					0, pFContext->Name(),
					CParamErrorDomain::STRING_TOO_COMPLEX,
					nsWin32::CError::ERR_LVL_CONTINUE );
			}
		}

		//--------------------------------------------------------------------------------
		void CStringKONCheck::Check( const wchar_t* psz )
		{
			wchar_t* pCheck = const_cast< wchar_t* >( psz );
			unsigned int uiPos = 0;
			unsigned int uiCount = 0;
			char pData[] = { '\\', 0 };
			wchar_t wChk = *((wchar_t*)(pData));
			while( uiPos < Max_Path && pCheck[ uiPos ] != 0 )
			{
				if( pCheck[ uiPos ] == wChk )
				{
					uiCount++;
				}
				uiPos++;
			}
			if( uiCount > 1 )
			{
				CFunctionContext* pFContext = dynamic_cast< CFunctionContext* >( nsWin32::t_pCurrentWin32Thread->FunctionContext() );

				nsWin32::CError::Raise( pFContext->File(),
					0, pFContext->Name(),
					CParamErrorDomain::STRING_TOO_COMPLEX,
					nsWin32::CError::ERR_LVL_CONTINUE );
			}
		}

		//--------------------------------------------------------------------------------
		void CStringKONCheck::Check( const int* psz )
		{
			int* pCheck = const_cast< int* >( psz );
			unsigned int uiPos = 0;
			unsigned int uiCount = 0;
			char pData[] = { '\\', 0, 0, 0 };
			int iChk = *((int*)(pData));
			while( uiPos < Max_Path && pCheck[ uiPos ] != 0 )
			{
				if( pCheck[ uiPos ] == iChk )
				{
					uiCount++;
				}
				uiPos++;
			}
			if( uiCount > 1 )
			{
				CFunctionContext* pFContext = dynamic_cast< CFunctionContext* >( nsWin32::t_pCurrentWin32Thread->FunctionContext() );

				nsWin32::CError::Raise( pFContext->File(),
					0, pFContext->Name(),
					CParamErrorDomain::STRING_TOO_COMPLEX,
					nsWin32::CError::ERR_LVL_CONTINUE );
			}
		}

	};//namespace nsParamCheck

};//namespace nsWin32
