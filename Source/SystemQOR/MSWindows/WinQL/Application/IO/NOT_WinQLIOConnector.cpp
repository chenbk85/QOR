//WinQLIOConnector.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/IO/WinQLIOConnector.h"
#include "WinQL/Application/IO/WinQLIOServer.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_OCLASS_LUID( CIOConnector ); 

	//--------------------------------------------------------------------------------
	CIOConnector::CIOConnector( CBaseIOConnectionPool* pPool ) : m_pSyncObject( 0 ), m_lRefCount( 0 ), m_pPool( pPool )
	{
		_WINQ_FCONTEXT( "CIOConnector::CIOConnector" );
		m_bConnected = false;
	}

	//--------------------------------------------------------------------------------
	CIOConnector::~CIOConnector()
	{
		_WINQ_FCONTEXT( "CIOConnector::~CIOConnector" );
		if( m_bConnected )
		{
			Disconnect();
		}		
		m_bConnected = false;
	}

	//--------------------------------------------------------------------------------
	void CIOConnector::Disconnect( void )
	{
	}

	//--------------------------------------------------------------------------------
	//Override for Asynchronous connections with custom pending connection states
	bool CIOConnector::HandlePendingConnectionResult( bool bConnected )
	{
		_WINQ_FCONTEXT( "CIOConnector::HandlePendingConnectionResult" );
		return bConnected;
	}

	//--------------------------------------------------------------------------------
	void CIOConnector::OnConnected( void )
	{
		_WINQ_FCONTEXT( "CIOConnector::OnConnected" );
		m_bConnected = true;
		if( !m_refProtocol.IsNull() )
		{
			m_refProtocol->OnConnected();
		}
	}

	//--------------------------------------------------------------------------------
	void CIOConnector::OnConnectionError( void )
	{
		_WINQ_FCONTEXT( "CIOConnector::OnConnectionError" );
		m_bConnected = false;
		if( !m_refProtocol.IsNull() )
		{
			m_refProtocol->OnConnectionError();
		}
	}

	//--------------------------------------------------------------------------------
	void CIOConnector::OnDisconnected( void )
	{
		_WINQ_FCONTEXT( "CIOConnector::OnDisconnected" );
		m_bConnected = false;
		if( !m_refProtocol.IsNull() )
		{
			m_refProtocol->OnDisconnected();
		}
	}

	//--------------------------------------------------------------------------------
	void CIOConnector::OnDisconnectionError( void )
	{
		_WINQ_FCONTEXT( "CIOConnector::OnDisconnectionError" );
		m_bConnected = false;
		if( !m_refProtocol.IsNull() )
		{
			m_refProtocol->OnDisconnectionError();
		}
	}

	//--------------------------------------------------------------------------------
	bool CIOConnector::IsConnected( void )
	{
		_WINQ_FCONTEXT( "CIOConnector::IsConnected" );
		return m_bConnected;
	}

	//--------------------------------------------------------------------------------
	const bool CIOConnector::AsyncConnection( void ) const
	{
		_WINQ_FCONTEXT( "CIOConnector::AsyncConnection" );
		return false;
	}

	//--------------------------------------------------------------------------------
	void CIOConnector::SetConnectionProtocol( CIOProtocol::refType refProtocol )
	{
		_WINQ_FCONTEXT( "CIOConnector::SetConnectionProtocol" );
		m_refProtocol = refProtocol;
	}

	//--------------------------------------------------------------------------------
	CIOProtocol::refType CIOConnector::Protocol( void )
	{
		_WINQ_FCONTEXT( "CIOConnector::Protocol" );
		CIOProtocol::refType ref( m_refProtocol.operator nsWin32::CIOProtocol *(), false );
		return ref;
	}

	//--------------------------------------------------------------------------------
	void* CIOConnector::GetSyncObject()
	{
		_WINQ_FCONTEXT( "CIOConnector::GetSyncObject" );
		return m_pSyncObject;
	}

	//--------------------------------------------------------------------------------
	void CIOConnector::SetSyncObject( void* pSyncObject )
	{
		_WINQ_FCONTEXT( "CIOConnector::SetSyncObject" );
		m_pSyncObject = pSyncObject;
	}

	//--------------------------------------------------------------------------------
	CIOConnector::refConnectorType CIOConnector::Ref()
	{
		refConnectorType ref( this );
		return ref;
	}
	//--------------------------------------------------------------------------------
	void CIOConnector::AddRef()
	{
		m_lRefCount++;
	}

	//--------------------------------------------------------------------------------
	void CIOConnector::Release()
	{
		if( --m_lRefCount <= 0 )
		{
			if( m_pPool )
			{
				m_pPool->Release( this );
			}
		}
	}

}//nsWin32
