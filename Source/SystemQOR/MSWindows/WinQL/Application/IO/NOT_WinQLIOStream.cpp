//WinQLIOStream.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/IO/IOStream.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	/*
	__QOR_IMPLEMENT_OCLASS_LUID( CIOStreamProtocol );

	//--------------------------------------------------------------------------------
	CIOStreamProtocol::CIOStreamProtocol()
	{
		_WINQ_FCONTEXT( "CIOStreamProtocol::CIOStreamProtocol" );
	}

	//--------------------------------------------------------------------------------
	CIOStreamProtocol::~CIOStreamProtocol()
	{
		_WINQ_FCONTEXT( "CIOStreamProtocol::~CIOStreamProtocol" );
	}

	//--------------------------------------------------------------------------------
	void CIOStreamProtocol::SetDirection( CIOProtocol::eState Direction )
	{
		_WINQ_FCONTEXT( "CIOStreamProtocol::SetDirection" );
		m_eNextState = Direction;
	}

	//--------------------------------------------------------------------------------
	byte* CIOStreamProtocol::GetNextReadTarget( void )
	{
		_WINQ_FCONTEXT( "CIOStreamProtocol::GetNextReadTarget" );
		m_ulDataSize = m_ulTargetSize;
		return m_pReadTarget;
	}

	//--------------------------------------------------------------------------------
	const byte* CIOStreamProtocol::GetNextWriteSource( void )
	{
		_WINQ_FCONTEXT( "CIOStreamProtocol::GetNextWriteSource" );
		m_ulDataSize = m_ulTargetSize;
		return m_pWriteSource;
	}

	//--------------------------------------------------------------------------------
	void CIOStreamProtocol::SetNextReadTarget( byte* pReadTarget, unsigned long ulSize )
	{
		_WINQ_FCONTEXT( "CIOStreamProtocol::SetNextReadTarget" );
		m_pReadTarget = pReadTarget;
		m_ulTargetSize = ulSize;
	}

	//--------------------------------------------------------------------------------
	void CIOStreamProtocol::SetNextWriteSource( byte* pWriteSource, unsigned long ulSize )
	{
		_WINQ_FCONTEXT( "CIOStreamProtocol::GetNextWriteSource" );
		m_pWriteSource = pWriteSource;
		m_ulTargetSize = ulSize;
	}

	//--------------------------------------------------------------------------------
	void CIOStreamProtocol::OnConnected( void )
	{
		_WINQ_FCONTEXT( "CIOStreamProtocol::OnConnected" );
		m_eNextState = m_InitialState;
	}

	//--------------------------------------------------------------------------------
	bool CIOStreamProtocol::Read()
	{
		_WINQ_FCONTEXT( "CIOStreamProtocol::Read" );
		bool bResult = false;
		if( m_ulDataSize == 0 )
		{
			GetNextReadTarget();
		}
		if( m_pReadTarget && m_ulDataSize > 0 )
		{
			unsigned long ulRead = 0;
			bResult = m_refSource->Read( m_pReadTarget, m_ulDataSize, ulRead  );
			m_ulDataSize -= ulRead;
			m_pReadTarget += ulRead;
		}
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CIOStreamProtocol::Write()
	{
		_WINQ_FCONTEXT( "CIOStreamProtocol::Write" );
		bool bResult = false;
		if( m_ulDataSize == 0 )
		{
			GetNextWriteSource();
		}
		if( m_pWriteSource && m_ulDataSize > 0 )
		{
			unsigned long ulWritten = 0;
			bResult = m_refSink->Write( m_pWriteSource, m_ulDataSize, ulWritten );
			m_ulDataSize -= ulWritten;
			m_pWriteSource += ulWritten;
		}
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CIOStreamProtocol::OnReadSuccess( void )
	{
		_WINQ_FCONTEXT( "CIOStreamProtocol::OnReadSuccess" );
		m_eNextState = Reading;
	}

	//--------------------------------------------------------------------------------
	void CIOStreamProtocol::OnWriteSuccess( void )
	{
		_WINQ_FCONTEXT( "CIOStreamProtocol::OnWriteSuccess" );
		m_eNextState = Writing;
	}



	__QOR_IMPLEMENT_OCLASS_LUID( CStream );

	//--------------------------------------------------------------------------------
	CStream::CStream()
	{
		_WINQ_FCONTEXT( "CStream::CStream" );
		m_bBuffering = false;
	}

	//--------------------------------------------------------------------------------
	CStream::~CStream()
	{
		_WINQ_FCONTEXT( "CStream::~CStream" );
	}
	
	//--------------------------------------------------------------------------------
	CIOStreamProtocol& CStream::Protocol( void )
	{
		_WINQ_FCONTEXT( "CStream::Protocol" );
		return m_Protocol;
	}

	//--------------------------------------------------------------------------------
	CStream::refType CStream::Ref( void )
	{
		_WINQ_FCONTEXT( "CStream::Ref" );
		refType ref( this, false );
		return ref;
	}



	__QOR_IMPLEMENT_OCLASS_LUID( CIStream );

	//--------------------------------------------------------------------------------
	CIStream::CIStream() : CStream()
	{
		_WINQ_FCONTEXT( "CIStream::CIStream" );
		m_Protocol.SetDirection( CIOProtocol::Reading );		
	}

	//--------------------------------------------------------------------------------
	CIStream::CIStream( CIOSource::refSourceType refSource )
	{
		_WINQ_FCONTEXT( "CIStream::CIStream" );
		m_Protocol.SetDirection( CIOProtocol::Reading );
		m_bBuffering = false;
		m_refSource = refSource;
		m_Protocol.SetSource( m_refSource );
	}

	//--------------------------------------------------------------------------------
	CIStream::~CIStream()
	{
		_WINQ_FCONTEXT( "CIStream::~CIStream" );
	}

	//--------------------------------------------------------------------------------
	void CIStream::SetSource( CIOSource::refSourceType refSource )
	{
		_WINQ_FCONTEXT( "CIStream::SetSource" );
		m_refSource = refSource;
		if( m_bBuffering )
		{
			m_Buffer.SetSource( m_refSource );
		}
		else
		{
			m_Protocol.SetSource( m_refSource );
		}
	}


	__QOR_IMPLEMENT_OCLASS_LUID( COStream );

	//--------------------------------------------------------------------------------
	COStream::COStream() : CStream()
	{
		_WINQ_FCONTEXT( "COStream::COStream" );
		m_Protocol.SetDirection( CIOProtocol::Writing );		
	}

	//--------------------------------------------------------------------------------
	COStream::COStream( CIOSink::refSinkType refSink )
	{
		_WINQ_FCONTEXT( "COStream::COStream" );
		m_Protocol.SetDirection( CIOProtocol::Writing );
		m_bBuffering = false;
		m_refSink = refSink;
		m_Protocol.SetSink( m_refSink );
	}

	//--------------------------------------------------------------------------------
	COStream::~COStream()
	{
		_WINQ_FCONTEXT( "COStream::~COStream" );
	}

	//--------------------------------------------------------------------------------
	void COStream::SetSink( CIOSink::refSinkType refSink )
	{
		_WINQ_FCONTEXT( "COStream::SetSink" );
		m_refSink = refSink;
		if( m_bBuffering )
		{
			m_Buffer.SetSink( m_refSink );
		}
		else
		{
			m_Protocol.SetSink( m_refSink );
		}
	}


	__QOR_IMPLEMENT_OCLASS_LUID( CIOStream );

	//--------------------------------------------------------------------------------
	CIOStream::CIOStream() : CStream()
	{
		_WINQ_FCONTEXT( "CIOStream::CIOStream" );
		m_Protocol.SetDirection( CIOProtocol::Reading );//abitrary default to Reading
	}

	//--------------------------------------------------------------------------------
	CIOStream::CIOStream( CIOSource::refSourceType refSource, CIOSink::refSinkType refSink )
	{
		_WINQ_FCONTEXT( "CIOStream::CIOStream" );
		m_Protocol.SetDirection( CIOProtocol::Reading );//abitrary default to Reading
		m_bBuffering = false;
		m_refSource = refSource;
		m_refSink = refSink;
		m_Protocol.SetSink( m_refSink );
		m_Protocol.SetSource( m_refSource );
	}

	//--------------------------------------------------------------------------------
	CIOStream::~CIOStream()
	{
		_WINQ_FCONTEXT( "CIOStream::~CIOStream" );
	}

	//--------------------------------------------------------------------------------
	void CIOStream::SetSource( CIOSource::refSourceType refSource )
	{
		_WINQ_FCONTEXT( "CIOStream::SetSource" );
		m_refSource = refSource;
		if( m_bBuffering )
		{
			m_Buffer.SetSource( m_refSource );
		}
		else
		{
			m_Protocol.SetSource( m_refSource );
		}
	}
	//--------------------------------------------------------------------------------
	void CIOStream::SetSink( CIOSink::refSinkType refSink )
	{
		_WINQ_FCONTEXT( "CIOStream::SetSink" );
		m_refSink = refSink;
		if( m_bBuffering )
		{
			m_Buffer.SetSink( m_refSink );
		}
		else
		{
			m_Protocol.SetSink( m_refSink );
		}
	}

	*/
}//nsWin32
