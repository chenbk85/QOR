//WinQLWinEventClient.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/WinQL.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: saved in member for later use" );
#include "WinQL/Application/Event/WinQLWinEventClient.h"
__QCMP_WARNING_POP
#include "WinQAPI/User32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CWinEventClient );

__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: saved in member for later use" );

	//--------------------------------------------------------------------------------
	CWinEventClient::CWinEventClient( unsigned int eventMin, unsigned int eventMax, ModuleHandle hmodWinEventProc, WinEventCallback lpfnWinEventProc, unsigned long idProcess, unsigned long idThread, unsigned int dwflags, int* pbResult ) : m_User32Library( CUser32::Instance() )
	,	m_Handle( this, 0 )
	{
		_WINQ_FCONTEXT( "CWinEventClient::CWinEventClient" );
		m_pResult = pbResult;
		__QOR_PROTECT
		{
			m_Handle = ( m_User32Library.SetWinEventHook( eventMin, eventMax, reinterpret_cast< HMODULE >( hmodWinEventProc ), reinterpret_cast< WINEVENTPROC >( lpfnWinEventProc ), idProcess, idThread, dwflags ) );

		}__QOR_ENDPROTECT
	}

__QCMP_WARNING_POP

	//--------------------------------------------------------------------------------
	CWinEventClient::~CWinEventClient()
	{
		_WINQ_FCONTEXT( "CWinEventClient::~CWinEventClient" );
		BOOL bResult = FALSE;
		__QOR_PROTECT
		{
			bResult = m_User32Library.UnhookWinEvent( reinterpret_cast< HWINEVENTHOOK >( m_Handle.Use() ) );
			if( m_pResult != 0 )
			{
				*m_pResult = bResult;
			}
		}__QOR_ENDPROTECT
	}

	__QCMP_DECLARE_PERTHREAD CTHandleMap< CWinEventHookHandle::refType, CActiveAccessibilityClient >* p_tAACHandleMap = 0;



	//--------------------------------------------------------------------------------
	CActiveAccessibilityClient::CActiveAccessibilityClient( unsigned int eventMin, unsigned int eventMax, nsWin32::ModuleHandle hmodWinEventProc, unsigned long idProcess, unsigned long idThread, unsigned int dwflags ) 
	: CWinEventClient( eventMin, eventMax, hmodWinEventProc, &HandleWinEvent, idProcess, idThread, dwflags )
	{
		if( p_tAACHandleMap == 0 )
		{
			p_tAACHandleMap = new CTHandleMap< CWinEventHookHandle::refType, CActiveAccessibilityClient >();
		}
		p_tAACHandleMap->Add( m_Handle.Ref(), this );
	}

	//--------------------------------------------------------------------------------
	CActiveAccessibilityClient::~CActiveAccessibilityClient()
	{
		p_tAACHandleMap->Remove( m_Handle.Ref() );
	}

	//--------------------------------------------------------------------------------
	void CActiveAccessibilityClient::HandleWinEvent( void* phWinEventHook, unsigned long Event, void* phwnd, long idObject, long idChild, unsigned long idEventThread, unsigned long dwmsEventTime )
	{
		__QOR_PROTECT
		{
			CWinEventHookHandle Handle( 0, phWinEventHook );
			CWinEventHookHandle::refType refHandle( &Handle, false );
			CActiveAccessibilityClient::refType Client = p_tAACHandleMap->FindHandle( refHandle );
			if( Client != 0 )
			{				
				CWindowHandle WinHandle( 0, phwnd );
				CWindowHandle::refType refHandle( &WinHandle, false );

				Client->WinEvent( Event, COSWindow::FromHandle( refHandle ), idObject, idChild, idEventThread, dwmsEventTime );
			}
		}__QOR_ENDPROTECT
	}

}//nsWin32
