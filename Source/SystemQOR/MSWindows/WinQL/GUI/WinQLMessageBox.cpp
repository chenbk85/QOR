//WinQLMessageBox.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/GUI/MessageBox.h"
#include "WinQAPI/User32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CMessageBox );

	//--------------------------------------------------------------------------------
	CMessageBox::CMessageBox( COSWindow::refType Wnd, const TCHAR* lpText, const TCHAR* lpCaption, unsigned int uType, unsigned short wLanguageId, unsigned long dwMilliseconds ) : m_User32Library( CUser32::Instance() )
	{
		_WINQ_FCONTEXT( "CMessageBox::CMessageBox" );
		__QOR_PROTECT
		{
			if( wLanguageId == 0 && dwMilliseconds == 0 )
			{
				m_iResult = m_User32Library.MessageBox( Wnd.IsNull() ? 0 : reinterpret_cast< ::HWND >( Wnd->Handle()->Use() ), lpText, lpCaption, uType );					
			}
			else if ( dwMilliseconds == 0 )
			{
				m_iResult = m_User32Library.MessageBoxEx( Wnd.IsNull() ? 0 : reinterpret_cast< ::HWND >( Wnd->Handle()->Use() ), lpText, lpCaption, uType, wLanguageId );
			}
			else
			{
				m_iResult = m_User32Library.MessageBoxTimeout( Wnd.IsNull() ? 0 : reinterpret_cast< ::HWND >( Wnd->Handle()->Use() ), lpText, lpCaption, uType, wLanguageId, dwMilliseconds );
			}
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CMessageBox::CMessageBox( const nsWin32::LPMSGBOXPARAMS lpMsgBoxParams ) : m_User32Library( CUser32::Instance() )
	{
		_WINQ_FCONTEXT( "CMessageBox::CMessageBox" );
		m_iResult = 0;
		__QOR_PROTECT
		{
			m_iResult = m_User32Library.MessageBoxIndirect( reinterpret_cast< ::LPMSGBOXPARAMS >( lpMsgBoxParams ) );	
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CMessageBox::~CMessageBox()
	{
		_WINQ_FCONTEXT( "CMessageBox::~CMessageBox" );
	}

	//--------------------------------------------------------------------------------
	int CMessageBox::Result()
	{
		_WINQ_FCONTEXT( "CMessageBox::Result" );
		return m_iResult;
	}

}//nsWin32
