//WinQLCaret.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: stored in member for later use." )
#include "WinQL/GUI/Caret.h"
#include "WinQL/GUI/Window.h"
#include "WinQL/Application/Graphics/WinQLBitmap.h"
__QCMP_WARNING_POP
#include "WinQAPI/User32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace ::nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CCaret );

	//--------------------------------------------------------------------------------
	CCaret::CCaret( COSWindow& Window, CBitmap& Bitmap, int nWidth, int nHeight ) : m_User32Library( CUser32::Instance() )
	{
		_WINQ_FCONTEXT( "CCaret::CCaret" );
		__QOR_PROTECT
		{
			m_iStatus = m_User32Library.CreateCaret( reinterpret_cast< ::HWND >( Window.Handle()->Use() ), reinterpret_cast< ::HBITMAP >( Bitmap.Handle()->Use() ), nWidth, nHeight );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CCaret::refType CCaret::Create( COSWindow& Window, CBitmap& Bitmap, int nWidth, int nHeight )
	{
		_WINQ_SFCONTEXT( "CCaret::Create" );
		refType ref( new CCaret( Window, Bitmap, nWidth, nHeight ), true );
		return ref;
	}

	//--------------------------------------------------------------------------------
	CCaret::~CCaret()
	{
		_WINQ_FCONTEXT( "CCaret::~CCaret" );
		__QOR_PROTECT
		{
			m_iStatus = m_User32Library.DestroyCaret();
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	unsigned int CCaret::GetBlinkTime()
	{
		_WINQ_FCONTEXT( "CCaret::GetBlinkTime" );
		UINT uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = m_User32Library.GetCaretBlinkTime();
		}__QOR_ENDPROTECT
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	bool CCaret::GetPos( nsWin32::POINT& Point )
	{
		_WINQ_FCONTEXT( "CCaret::GetPos" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.GetCaretPos( reinterpret_cast< ::LPPOINT >( &Point ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CCaret::Hide( COSWindow& Window )
	{
		_WINQ_FCONTEXT( "CCaret::Hide" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.HideCaret( reinterpret_cast< ::HWND >( Window.Handle()->Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CCaret::SetBlinkTime( unsigned int uMSeconds )
	{
		_WINQ_FCONTEXT( "CCaret::SetBlinkTime" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.SetCaretBlinkTime( uMSeconds ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CCaret::SetPos( int X, int Y )
	{	
		_WINQ_FCONTEXT( "CCaret::SetPos" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.SetCaretPos( X, Y ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CCaret::Show( COSWindow& Window )
	{	
		_WINQ_FCONTEXT( "CCaret::Show" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.ShowCaret( reinterpret_cast< ::HWND >( Window.Handle()->Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CCaret::Status()
	{
		_WINQ_FCONTEXT( "CCaret::Status" );
		return m_iStatus;
	}

}//nsWin32
