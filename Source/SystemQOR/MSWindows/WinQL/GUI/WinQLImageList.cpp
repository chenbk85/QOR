//WinQLImageList.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: stored in member for later use." )
#include "WinQL/GUI/ImageList.h"
__QCMP_WARNING_POP
#include "WinQAPI/User32.h"
#include "WinQAPI/ComCtl32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QCMP_DECLARE_PERTHREAD CImageListHandleMap* p_tImageListHandleMap = 0;

	__QOR_IMPLEMENT_OCLASS_LUID( CImageList );

	//--------------------------------------------------------------------------------
	void CImageList::Uninit()
	{
		CImageListHandleMap* pMap = p_tImageListHandleMap;

		if( pMap && !( m_Handle.IsNull() ) )
		{
			pMap->Remove( m_Handle.Ref() );
		}
	}

	//--------------------------------------------------------------------------------
	void CImageList::Init()
	{
		CImageListHandleMap* pMap = p_tImageListHandleMap;

		if( pMap == 0 )
		{
			pMap = new CImageListHandleMap;
		}

		if( !( m_Handle.IsNull() ) )
		{
			pMap->Add( m_Handle.Ref(), this );
		}

		if( p_tImageListHandleMap == 0 )
		{
			p_tImageListHandleMap = pMap;
		}
	}

	//--------------------------------------------------------------------------------
	CImageList::refType CImageList::FromHandle( CImageListHandle::refType hImageList )
	{
		_WINQ_SFCONTEXT( "CImageList::FromHandle" );
		CImageList* pImageList = 0;
		bool bOwningRef = false;
		__QOR_PROTECT
		{
			pImageList = hImageList->Object< CImageList >();

			if( pImageList == 0 && p_tImageListHandleMap != 0 )
			{
				pImageList = p_tImageListHandleMap->FindHandle( hImageList );
			}

			if( pImageList == 0 )
			{
				pImageList = new CImageList( hImageList );
				bOwningRef = true;
			}
		}__QOR_ENDPROTECT
		return refType( pImageList, bOwningRef );
	}

	__QCMP_WARNING_PUSH
	__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: stored in member for later use" )
	//--------------------------------------------------------------------------------
	CImageList::CImageList( int cx, int cy, unsigned int flags, int cInitial, int cGrow ) : m_ComCtl32Library( CComCtl32::Instance() )
	,	m_Handle( this, 0 )
	{
		_WINQ_FCONTEXT( "CImageList::CImageList" );
		__QOR_PROTECT
		{
			m_Handle = m_ComCtl32Library.ImageList_Create( cx, cy, flags, cInitial, cGrow );
			Init();
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CImageList::refType CImageList::Create( int cx, int cy, unsigned int uiFlags, int cInitial, int cGrow )
	{
		_WINQ_SFCONTEXT( "CImageList::Create" );
		return refType( new CImageList( cx, cy, uiFlags, cInitial, cGrow ), true );
	}

	//--------------------------------------------------------------------------------
	CImageList::CImageList( const CImageList& Src ) : m_ComCtl32Library( CComCtl32::Instance() )
	,	m_Handle( this, 0 )
	{
		_WINQ_FCONTEXT( "CImageList::CImageList" );			
		__QOR_PROTECT
		{
			m_Handle = m_ComCtl32Library.ImageList_Duplicate( reinterpret_cast< ::HIMAGELIST >( Src.m_Handle.Use() ) );
			Init();
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CImageList::CImageList( InstanceHandle hi, const TCHAR* lpbmp, int cx, int cGrow, unsigned long crMask, unsigned int uType, unsigned int uFlags ) : m_ComCtl32Library( CComCtl32::Instance() )
	,	m_Handle( this, 0 )
	{
		_WINQ_FCONTEXT( "CImageList::CImageList" );				
		__QOR_PROTECT
		{
			m_Handle = m_ComCtl32Library.ImageList_LoadImage( reinterpret_cast< ::HINSTANCE >( hi ), lpbmp, cx, cGrow, crMask, uType, uFlags );
			Init();
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CImageList::refType CImageList::Load( InstanceHandle hi, const TCHAR* lpbmp, int cx, int cGrow, unsigned long crMask, unsigned int uType, unsigned int uFlags )
	{
		_WINQ_SFCONTEXT( "CImageList::Load" );
		return refType( new CImageList( hi, lpbmp, cx, cGrow, crMask, uType, uFlags ), true );
	}

	//--------------------------------------------------------------------------------
	CImageList::CImageList( CImageList& Im1, int i1, CImageList& Im2, int i2, int dx, int dy ) : m_ComCtl32Library( CComCtl32::Instance() )
	,	m_Handle( this, 0 )
	{
		_WINQ_FCONTEXT( "CImageList::CImageList" );
		__QOR_PROTECT
		{
			m_Handle = m_ComCtl32Library.ImageList_Merge( reinterpret_cast< ::HIMAGELIST >( Im1.Handle()->Use() ), i1, reinterpret_cast< ::HIMAGELIST >( Im2.Handle()->Use() ), i2, dx, dy );
			Init();
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CImageList::refType CImageList::Merger( CImageList& Im1, int i1, CImageList& Im2, int i2, int dx, int dy )
	{
		_WINQ_SFCONTEXT( "CImageList:Merger" );
		return refType( new CImageList( Im1, i1, Im2, i2, dx, dy ), true );
	}

	//--------------------------------------------------------------------------------
	CImageList::CImageList( void* pstm ) : m_ComCtl32Library( CComCtl32::Instance() )
	,	m_Handle( this, 0 )
	{
		_WINQ_FCONTEXT( "CImageList::CImageList" );
		__QOR_PROTECT
		{
			m_Handle = m_ComCtl32Library.ImageList_Read( pstm );
			Init();
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CImageList::refType CImageList::Read( void* pstm )
	{
		_WINQ_SFCONTEXT( "CImageList::Read" );
		return refType( new CImageList( pstm ), true );
	}

	//--------------------------------------------------------------------------------
	CImageList::CImageList( long& hr, unsigned long dwFlags, void* pstm, const nsWin32::GUID& riid, void** ppv ) : m_ComCtl32Library( CComCtl32::Instance() )
	,	m_Handle( this, 0 )
	{
		_WINQ_FCONTEXT( "CImageList::CImageList" );
		hr = E_NOTIMPL;
		__QOR_PROTECT
		{
			hr = m_ComCtl32Library.ImageList_ReadEx( dwFlags, pstm, reinterpret_cast< const ::IID& >( riid ), ppv );
			if( hr == S_OK )
			{
				//CImageList( *ppv );
			}
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CImageList::refType CImageList::ReadEx( long& hr, unsigned long dwFlags, void* pstm, const nsWin32::GUID& riid, void** ppv )
	{
		_WINQ_SFCONTEXT( "CImageList::ReadEx" );
		refType Ref( new CImageList( hr, dwFlags, pstm, riid, ppv ), true );
		return Ref;
	}

	//--------------------------------------------------------------------------------
	CImageList::~CImageList()
	{
		_WINQ_FCONTEXT( "CImageList::~CImageList" );			
		__QOR_PROTECT
		{
			Uninit();
			m_ComCtl32Library.ImageList_Destroy( reinterpret_cast< ::HIMAGELIST >( m_Handle.Use() ) );				
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	long CImageList::QueryInterface( const nsWin32::GUID& riid, void** ppv )
	{
		_WINQ_FCONTEXT( "CImageList::QueryInterface" );
		long hr = E_NOTIMPL;
		__QOR_PROTECT
		{
			hr = m_ComCtl32Library.HIMAGELIST_QueryInterface( reinterpret_cast< ::HIMAGELIST >( m_Handle.Use() ), reinterpret_cast< const IID& >( riid ), ppv );
		}__QOR_ENDPROTECT
		return hr;
	}

	//--------------------------------------------------------------------------------
	int CImageList::Add( CBitmap::refType bmImage, CBitmap::refType bmMask )
	{
		_WINQ_FCONTEXT( "CImageList::Add" );
		int iResult = -1;
		__QOR_PROTECT
		{
			iResult = m_ComCtl32Library.ImageList_Add( reinterpret_cast< ::HIMAGELIST >( m_Handle.Use() ), reinterpret_cast< ::HBITMAP >( bmImage->Handle()->Use() ), reinterpret_cast< ::HBITMAP >( bmMask->Handle()->Use() ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CImageList::AddIcon( CIcon::refType Icon )
	{
		_WINQ_FCONTEXT( "CImageList::AddIcon" );
		int iResult = -1;
		__QOR_PROTECT
		{
			iResult = m_ComCtl32Library.ImageList_mxAddIcon( reinterpret_cast< ::HIMAGELIST >( m_Handle.Use() ), reinterpret_cast< ::HICON >( Icon->Handle()->Use() ) );					
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CImageList::AddMasked( CBitmap::refType bmImage, unsigned long crMask )
	{
		_WINQ_FCONTEXT( "CImageList::AddMasked" );
		int iResult = -1;
		__QOR_PROTECT
		{
			iResult = m_ComCtl32Library.ImageList_AddMasked( reinterpret_cast< ::HIMAGELIST >( m_Handle.Use() ) , reinterpret_cast< ::HBITMAP >( bmImage->Handle()->Use() ), crMask );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	bool CImageList::BeginDrag( int iTrack, int dxHotspot, int dyHotspot )
	{
		_WINQ_FCONTEXT( "CImageList::BeginDrag" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_ComCtl32Library.ImageList_BeginDrag( reinterpret_cast< ::HIMAGELIST >( m_Handle.Use() ), iTrack, dxHotspot, dyHotspot ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CImageList::Copy( CImageList& IlSrc, int iDst, int iSrc, unsigned int uFlags )
	{
		_WINQ_FCONTEXT( "CImageList::Copy" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_ComCtl32Library.ImageList_Copy( reinterpret_cast< ::HIMAGELIST >( m_Handle.Use() ), reinterpret_cast< ::HIMAGELIST >( IlSrc.Handle()->Use() ), iDst, iSrc, uFlags ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CImageList::DragEnter( COSWindow::refType WndLock, int x, int y )
	{
		_WINQ_FCONTEXT( "CImageList::DragEnter" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_ComCtl32Library.ImageList_DragEnter( reinterpret_cast< ::HWND >( WndLock->Handle()->Use() ), x, y ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CImageList::DragLeave( COSWindow::refType WndLock )
	{
		_WINQ_FCONTEXT( "CImageList::DragLeave" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_ComCtl32Library.ImageList_DragLeave( reinterpret_cast< ::HWND >( WndLock->Handle()->Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CImageList::DragMove( int x, int y )
	{
		_WINQ_FCONTEXT( "CImageList::DragMove" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_ComCtl32Library.ImageList_DragMove( x, y ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CImageList::DragShowNolock( bool fShow )
	{
		_WINQ_FCONTEXT( "CImageList::DragShowNolock" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_ComCtl32Library.ImageList_DragShowNolock( fShow ? TRUE : FALSE ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CImageList::Draw( int i, CDeviceContext::refType dcDst, int x, int y, unsigned int fStyle )
	{
		_WINQ_FCONTEXT( "CImageList::Draw" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_ComCtl32Library.ImageList_Draw( reinterpret_cast< ::HIMAGELIST >( m_Handle.Use() ) , i, reinterpret_cast< ::HDC >( dcDst->Handle()->Use() ), x, y, fStyle ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CImageList::DrawEx( int i, CDeviceContext::refType dcDst, int x, int y, int dx, int dy, unsigned long rgbBk, unsigned long rgbFg, unsigned int fStyle )
	{
		_WINQ_FCONTEXT( "CImageList::DrawEx" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_ComCtl32Library.ImageList_DrawEx( reinterpret_cast< ::HIMAGELIST >( m_Handle.Use() ), i, reinterpret_cast< ::HDC >( dcDst->Handle()->Use() ), x, y, dx, dy, rgbBk, rgbFg, fStyle ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CImageList::DrawIndirect( nsWin32::IMAGELISTDRAWPARAMS* pimldp )
	{
		_WINQ_FCONTEXT( "CImageList::DrawIndirect" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_ComCtl32Library.ImageList_DrawIndirect( reinterpret_cast< ::IMAGELISTDRAWPARAMS* >( pimldp ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CImageList::EndDrag()
	{
		_WINQ_FCONTEXT( "CImageList::EndDrag" );
		__QOR_PROTECT
		{
			m_ComCtl32Library.ImageList_EndDrag();
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	unsigned long CImageList::GetBkColor()
	{
		_WINQ_FCONTEXT( "CImageList::GetBkColor" );
		COLORREF Result = CLR_NONE;
		__QOR_PROTECT
		{
			Result = m_ComCtl32Library.ImageList_GetBkColor( reinterpret_cast< ::HIMAGELIST >( m_Handle.Use() ) );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	CImageList::refType CImageList::GetDragImage( nsWin32::POINT* ppt, nsWin32::POINT* pptHotspot )
	{
		_WINQ_FCONTEXT( "CImageList::GetDragImage" );
		__QOR_PROTECT
		{
			return FromHandle( CImageListHandle( 0, (void*)(m_ComCtl32Library.ImageList_GetDragImage( reinterpret_cast< ::POINT* >( ppt ),reinterpret_cast< ::POINT* >( pptHotspot ) )) ).Ref() );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CIcon::refType CImageList::GetIcon( int i, unsigned int flags )
	{
		_WINQ_FCONTEXT( "CImageList::GetIcon" );
		__QOR_PROTECT
		{
			return CIcon::FromHandle( CIconHandle( 0, (void*)(m_ComCtl32Library.ImageList_GetIcon( reinterpret_cast< ::HIMAGELIST >( m_Handle.Use() ), i, flags )) ).Ref() );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	bool CImageList::GetIconSize( int* cx, int* cy )
	{
		_WINQ_FCONTEXT( "CImageList::GetIconSize" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_ComCtl32Library.ImageList_GetIconSize( reinterpret_cast< ::HIMAGELIST >( m_Handle.Use() ), cx, cy ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CImageList::GetImageCount()
	{
		_WINQ_FCONTEXT( "CImageList::GetImageCount" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_ComCtl32Library.ImageList_GetImageCount( reinterpret_cast< ::HIMAGELIST >( m_Handle.Use() ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	bool CImageList::GetImageInfo( int i, nsWin32::IMAGEINFO* pImageInfo )
	{
		_WINQ_FCONTEXT( "CImageList::GetImageInfo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_ComCtl32Library.ImageList_GetImageInfo( reinterpret_cast< ::HIMAGELIST >( m_Handle.Use() ), i, reinterpret_cast< ::IMAGEINFO* >( pImageInfo ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CImageList::Remove( int i )
	{
		_WINQ_FCONTEXT( "CImageList::Remove" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_ComCtl32Library.ImageList_Remove( reinterpret_cast< ::HIMAGELIST >( m_Handle.Use() ), i ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CImageList::Replace( int i, CBitmap::refType bmImage, CBitmap::refType bmMask )
	{
		_WINQ_FCONTEXT( "CImageList::Replace" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_ComCtl32Library.ImageList_Replace( reinterpret_cast< ::HIMAGELIST >( m_Handle.Use() ), i, reinterpret_cast< ::HBITMAP >( bmImage->Handle()->Use() ), reinterpret_cast< ::HBITMAP >( bmMask->Handle()->Use()  ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CImageList::ReplaceIcon( int i, CIcon::refType Icon )
	{
		_WINQ_FCONTEXT( "CImageList::ReplaceIcon" );
		int iResult = -1;
		__QOR_PROTECT
		{
			m_ComCtl32Library.ImageList_ReplaceIcon( reinterpret_cast< ::HIMAGELIST >( m_Handle.Use() ), i, reinterpret_cast< ::HICON >( Icon->Handle()->Use() ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CImageList::SetBkColor( unsigned long clrBk )
	{
		_WINQ_FCONTEXT( "CImageList::SetBkColor" );
		COLORREF Result = CLR_NONE;
		__QOR_PROTECT
		{
			Result = m_ComCtl32Library.ImageList_SetBkColor( reinterpret_cast< ::HIMAGELIST >( m_Handle.Use() ), clrBk );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	bool CImageList::SetDragCursorImage( int iDrag, int dxHotspot, int dyHotspot )
	{
		_WINQ_FCONTEXT( "CImageList::SetDragCursorImage" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_ComCtl32Library.ImageList_SetDragCursorImage( reinterpret_cast< ::HIMAGELIST >( m_Handle.Use() ), iDrag, dxHotspot, dyHotspot ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CImageList::SetIconSize( int cx, int cy )
	{
		_WINQ_FCONTEXT( "CImageList::SetIconSize" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_ComCtl32Library.ImageList_SetIconSize( reinterpret_cast< ::HIMAGELIST >( m_Handle.Use() ), cx, cy ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CImageList::SetImageCount( unsigned int uNewCount )
	{
		_WINQ_FCONTEXT( "CImageList::SetImageCount" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_ComCtl32Library.ImageList_SetImageCount( reinterpret_cast< ::HIMAGELIST >( m_Handle.Use() ), uNewCount ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CImageList::SetOverlayImage( int iImage, int iOverlay )
	{
		_WINQ_FCONTEXT( "CImageList::SetOverlayImage" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_ComCtl32Library.ImageList_SetOverlayImage( reinterpret_cast< ::HIMAGELIST >( m_Handle.Use() ), iImage, iOverlay ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CImageList::Write( void* pstm )
	{
		_WINQ_FCONTEXT( "CImageList::Write" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_ComCtl32Library.ImageList_Write( reinterpret_cast< ::HIMAGELIST >( m_Handle.Use() ), pstm ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CImageList::WriteEx( unsigned long dwFlags, void* pstm )
	{
		_WINQ_FCONTEXT( "CImageList::WriteEx" );
		long hr = E_NOTIMPL;
		__QOR_PROTECT
		{
			hr = m_ComCtl32Library.ImageList_WriteEx( reinterpret_cast< ::HIMAGELIST >( m_Handle.Use() ), dwFlags, pstm );
		}__QOR_ENDPROTECT
		return hr;
	}

	//--------------------------------------------------------------------------------
	CImageListHandle::refType CImageList::Handle( void )
	{
		return m_Handle.Ref();
	}

	//protected:

	//--------------------------------------------------------------------------------
	CImageList::CImageList( CImageListHandle::refType hSrc ) : m_ComCtl32Library( CComCtl32::Instance() )
	,	m_Handle( this, hSrc->AsHandle().ptr() )
	{
		_WINQ_FCONTEXT( "CImageList::CImageList" );
	}

}//nsWin32
