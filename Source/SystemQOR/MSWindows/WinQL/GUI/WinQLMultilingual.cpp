//WinQLMultilingual.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/GUI/Multilingual.h"
#include "WinQAPI/Kernel32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace ::nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CMUIHelper );

	//--------------------------------------------------------------------------------
	CMUIHelper::CMUIHelper()
	{
		_WINQ_FCONTEXT( "CMUIHelper::CMUIHelper" );
	}

	//--------------------------------------------------------------------------------
	CMUIHelper::~CMUIHelper()
	{
		_WINQ_FCONTEXT( "CMUIHelper::~CMUIHelper" );
	}

	//--------------------------------------------------------------------------------
	bool CMUIHelper::EnumLanguages( nsWin32::fpUILanguageEnumProc pUILangEnumProc, unsigned long dwFlags, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CMUIHelper::EnumLanguages" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::EnumUILanguages( reinterpret_cast< ::UILANGUAGE_ENUMPROC >( pUILangEnumProc ), dwFlags, lParam ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}
		
	//--------------------------------------------------------------------------------
	bool CMUIHelper::GetFileInfo( unsigned long dwFlags, const wchar_t* pcwszFilePath, nsWin32::PFILEMUIINFO pFileMUIInfo, unsigned long* pcbFileMUIInfo )
	{
		_WINQ_FCONTEXT( "CMUIHelper::GetFileInfo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetFileMUInfo( dwFlags, pcwszFilePath, reinterpret_cast< ::PFILEMUIINFO >( pFileMUIInfo ), pcbFileMUIInfo ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}
		
	//--------------------------------------------------------------------------------
	bool CMUIHelper::GetFileMUIPath( unsigned long dwFlags, const wchar_t* pcwszFilePath, wchar_t* pwszLanguage, unsigned long* pcchLanguage, wchar_t* pwszFileMUIPath, unsigned long* pcchFileMUIPath, Cmp_unsigned_long_long* pululEnumerator )
	{
		_WINQ_FCONTEXT( "CMUIHelper::GetFileMUIPath" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetFileMUIPath( dwFlags, pcwszFilePath, pwszLanguage, pcchLanguage, pwszFileMUIPath, pcchFileMUIPath, pululEnumerator ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}
		
	//--------------------------------------------------------------------------------
	unsigned short CMUIHelper::GetSystemDefaultLanguage( void )
	{
		_WINQ_FCONTEXT( "CMUIHelper::GetSystemDefaultUILanguage" );
		LANGID Result = 0;
		__QOR_PROTECT
		{
			Result = CKernel32::GetSystemDefaultUILanguage();
		}__QOR_ENDPROTECT
		return Result;
	}
		
	//--------------------------------------------------------------------------------
	bool CMUIHelper::GetSystemPreferredLanguages( unsigned long dwFlags, unsigned long* pulNumLanguages, wchar_t* pwszLanguagesBuffer, unsigned long* pcchLanguagesBuffer )
	{
		_WINQ_FCONTEXT( "CMUIHelper::GetSystemPreferredLanguages" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetSystemPreferredUILanguages( dwFlags, pulNumLanguages, pwszLanguagesBuffer, pcchLanguagesBuffer ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CMUIHelper::GetCurrentThreadPreferredLanguages( unsigned long dwFlags, unsigned long* pulNumLanguages, wchar_t* pwszLanguagesBuffer, unsigned long* pcchLanguagesBuffer )
	{
		_WINQ_FCONTEXT( "CMUIHelper::GetThreadPreferredLanguages" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetThreadPreferredUILanguages( dwFlags, pulNumLanguages, pwszLanguagesBuffer, pcchLanguagesBuffer ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned short CMUIHelper::GetCurrentThreadLanguage()
	{
		_WINQ_FCONTEXT( "CMUIHelper::GetCurrentThreadPreferredLanguage" );
		LANGID Result = 0;
		__QOR_PROTECT
		{
			Result = CKernel32::GetThreadUILanguage();
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	bool CMUIHelper::GetLanguageInfo( unsigned long dwFlags, const wchar_t* pwmszLanguage, wchar_t* pwszFallbackLanguages, unsigned long* pcchFallbackLanguages, unsigned long* pdwAttributes )
	{
		_WINQ_FCONTEXT( "CMUIHelper::GetLanguageInfo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetUILanguageInfo( dwFlags, pwmszLanguage, pwszFallbackLanguages, pcchFallbackLanguages, pdwAttributes ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned short CMUIHelper::GetUserDefaultLanguage()
	{
		_WINQ_FCONTEXT( "CMUIHelper::GetUserDefaultLanguage" );
		LANGID Result = 0;
		__QOR_PROTECT
		{
			Result = CKernel32::GetUserDefaultUILanguage();
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	bool CMUIHelper::GetUserPreferredLanguages( unsigned long dwFlags, unsigned long* pulNumLanguages, wchar_t* pwszLanguagesBuffer, unsigned long* pcchLanguagesBuffer )
	{
		_WINQ_FCONTEXT( "CMUIHelper::GetUserPreferredLanguages" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetUserPreferredUILanguages( dwFlags, pulNumLanguages, pwszLanguagesBuffer, pcchLanguagesBuffer ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}
								
	//--------------------------------------------------------------------------------
	bool CMUIHelper::SetCurrentThreadPreferredLanguages( unsigned long dwFlags, const wchar_t* pwszLanguagesBuffer, unsigned long* pulNumLanguages )
	{
		_WINQ_FCONTEXT( "CMUIHelper::SetThreadPreferredLanguages" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetThreadPreferredUILanguages( dwFlags, pwszLanguagesBuffer, pulNumLanguages ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned short CMUIHelper::SetThreadLanguage( unsigned short LangId )
	{
		_WINQ_FCONTEXT( "CMUIHelper::SetThreadLanguage" );
		LANGID Result = 0;
		__QOR_PROTECT
		{
			Result = CKernel32::SetThreadUILanguage( LangId );
		}__QOR_ENDPROTECT
		return Result;
	}

}//nsWin32
