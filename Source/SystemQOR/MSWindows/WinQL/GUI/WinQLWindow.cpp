//WinQLWindow.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: stored in member for later use." )
#include "WinQL/GUI/Window.h"
#include "WinQL/Application/Graphics/WinQLDeviceContext.h"
__QCMP_WARNING_POP
#include "WinQL/Application/Process/WinQLProcess.h"
#include "WinQL/GUI/Controllers/BaseWindowController.h"
#include "WinQL/GUI/Views/WindowView.h"
#include "WinQAPI/User32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace ::nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( COSWindow );

	__QCMP_WARNING_PUSH
	__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: stored in member for use later" );
	
	//--------------------------------------------------------------------------------
	//Default construction, no underlying MSWindows Window
	COSWindow::COSWindow() : m_User32Library( CUser32::Instance() )
	,	m_Handle( this, 0 )
	,	m_pController( 0 )
	{
		_WINQ_FCONTEXT( "COSWindow::COSWindow" );
		m_bOwnsHandle = false;
	}

	//--------------------------------------------------------------------------------
	//Construct a Window around an existing underlying handle
	COSWindow::COSWindow( void* hwnd ) : m_User32Library( CUser32::Instance() )
	,	m_Handle( this, hwnd )
	,	m_pController( 0 )
	{
		_WINQ_FCONTEXT( "COSWindow::COSWindow" );
		m_bOwnsHandle = false;
	}

	//--------------------------------------------------------------------------------
	//Construct a Window from a Device Context
	COSWindow::COSWindow( CDeviceContext::refType DC ) : m_User32Library( CUser32::Instance() )
	,	m_Handle( this, 0 )
	,	m_pController( 0 )
	{
		_WINQ_FCONTEXT( "COSWindow::COSWindow" );
		m_Handle = m_User32Library.WindowFromDC( reinterpret_cast< ::HDC >( DC->Handle()->Use() ) );
		m_bOwnsHandle = false;
	}

	//--------------------------------------------------------------------------------
	//Construct a Window object around a window determined from a point
	COSWindow::COSWindow( POINT Point, bool bPhysical ) : m_User32Library( CUser32::Instance() )
	,	m_Handle( this, 0 )
	,	m_pController( 0 )
	{	
		_WINQ_FCONTEXT( "COSWindow::COSWindow" );
		__QOR_PROTECT
		{
			m_Handle = bPhysical ? m_User32Library.WindowFromPhysicalPoint( *( reinterpret_cast< ::POINT* >( &Point ) ) ) : m_User32Library.WindowFromPoint( *( reinterpret_cast< ::POINT* >( &Point ) ) );
		}__QOR_ENDPROTECT
		m_bOwnsHandle = false;
	}

	//--------------------------------------------------------------------------------
	COSWindow::COSWindow( CWindowClass* pClass , void* lpParam ) : m_User32Library( CUser32::Instance() )
	,	m_lpParam( lpParam )
	,	m_pClass( pClass )
	,	m_Handle( this, 0 )
	,	m_pController( 0 )
	{
		_WINQ_FCONTEXT( "COSWindow::COSWindow" );
	}

	//--------------------------------------------------------------------------------
	//Construct a new Window 
	COSWindow::COSWindow( CWindowClass* pClass , unsigned long dwExStyle, const TCHAR* lpWindowName, unsigned long dwStyle, int x, int y, int nWidth, int nHeight, CWindowHandle::refType hWndParent, CMenuHandle::refType hMenu, CWinModule* pModule, void* lpParam ) : m_User32Library( CUser32::Instance() )
	,	m_lpParam( lpParam )
	,	m_pClass( pClass )
	,	m_Handle( this, 0 )
	,	m_pController( 0 )
	{	
		_WINQ_FCONTEXT( "COSWindow::COSWindow" );
		__QOR_PROTECT
		{
			if( p_tWndHandleMap == 0 )
			{
				p_tWndHandleMap = new CWindowHandleMap;
			}

			if( m_pClass && !m_pClass->Preregistered() )
			{
				m_pClass->Register();
			}

			p_tWndHandleMap->PendingAdd( this );

			m_Handle = m_User32Library.CreateWindowEx( dwExStyle, pClass->Name(), lpWindowName, dwStyle, x, y, nWidth, nHeight, 
				hWndParent.IsNull() ? 0 : reinterpret_cast< ::HWND >( hWndParent->Use() ), hMenu.IsNull() ? 0 : reinterpret_cast< ::HMENU >( hMenu->Use() ), reinterpret_cast< ::HINSTANCE >( pClass->m_hInstance ), lpParam );

		}__QOR_ENDPROTECT
	}

	/*
	//--------------------------------------------------------------------------------
	WindowHandle COSWindow::Create( unsigned long dwExStyle, const TCHAR* lpClassName, const TCHAR* lpWindowName, unsigned long dwStyle, int x, int y, int nWidth, int nHeight, WindowHandle hWndParent, MenuHandle hMenu, InstanceHandle hInstance, void* lpParam )
	{
		_WINQ_FCONTEXT( "COSWindow::Create" );
		__QOR_PROTECT
		{
			m_hWnd = reinterpret_cast< WindowHandle >( m_User32Library.CreateWindowEx( dwExStyle, lpClassName, lpWindowName, dwStyle, x, y, nWidth, nHeight, reinterpret_cast< ::HWND >( hWndParent ), reinterpret_cast< ::HMENU >( hMenu ), reinterpret_cast< ::HINSTANCE >( hInstance ), lpParam ) );
		}__QOR_ENDPROTECT
		m_bOwnsHandle = true;
		return m_hWnd;
	}
	*/

	//--------------------------------------------------------------------------------
	COSWindow::~COSWindow()
	{
		_WINQ_FCONTEXT( "COSWindow::~COSWindow" );
	}

	//--------------------------------------------------------------------------------
	bool COSWindow::AdjustRect( CRectangle* pRect, unsigned long dwStyle, bool bMenu, unsigned long dwExStyle )
	{
		_WINQ_FCONTEXT( "COSWindow::AdjustRect" );
		bool bResult = false;
		__QOR_PROTECT
		{
			if( dwExStyle == 0 )
			{
				bResult = m_User32Library.AdjustWindowRect( reinterpret_cast< ::LPRECT >( pRect ), dwStyle, bMenu ? TRUE : FALSE ) ? true : false;
			}
			else
			{
				bResult = m_User32Library.AdjustWindowRectEx( reinterpret_cast< ::LPRECT >( pRect ), dwStyle, bMenu ? TRUE : FALSE, dwExStyle ) ? true : false;
			}
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindow::Animate( unsigned long dwTime, unsigned long dwFlags )
	{
		_WINQ_FCONTEXT( "COSWindow::Animate" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.AnimateWindow( reinterpret_cast< ::HWND >( m_Handle.Use() ), dwTime, dwFlags ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned int COSWindow::ArrangeIconic()
	{
		_WINQ_FCONTEXT( "COSWindow::ArrangeIconic" );
		UINT uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = m_User32Library.ArrangeIconicWindows( reinterpret_cast< ::HWND >( m_Handle.Use() ) );
		}__QOR_ENDPROTECT
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindow::BringToTop()
	{
		_WINQ_FCONTEXT( "COSWindow::BringToTop" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.BringWindowToTop( reinterpret_cast< ::HWND >( m_Handle.Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned short COSWindow::CascadeChildren( unsigned short wFlags )
	{
		_WINQ_FCONTEXT( "COSWindow::CascadeChildren" );
		WORD wResult = 0;
		__QOR_PROTECT
		{
			wResult = m_User32Library.CascadeChildWindows( reinterpret_cast< ::HWND >( m_Handle.Use() ), wFlags );
		}__QOR_ENDPROTECT
		return wResult;
	}

	//--------------------------------------------------------------------------------
	unsigned short COSWindow::CascadeChildren( unsigned int wHow, const RECT* lpRect, unsigned int cKids, const refType lpKids )
	{
		_WINQ_FCONTEXT( "COSWindow::CascadeChildren" );
		WORD wResult = 0;
		__QOR_PROTECT
		{
			wResult = m_User32Library.CascadeWindows( reinterpret_cast< ::HWND >( m_Handle.Use() ), wHow, reinterpret_cast< const ::RECT* >( lpRect ), cKids, reinterpret_cast< const ::HWND* >( lpKids->Handle()->Use() ) );
		}__QOR_ENDPROTECT
		return wResult;
	}

	//--------------------------------------------------------------------------------
	COSWindow::refType COSWindow::ChildFromPoint( POINT Point, unsigned int uFlags )
	{	
		_WINQ_FCONTEXT( "COSWindow::ChildFromPoint" );
		COSWindow* pResult = 0;			
		CWindowHandle::refType refHandle;
		__QOR_PROTECT
		{
			if( uFlags == 0 )
			{
				refHandle->operator=( m_User32Library.ChildWindowFromPoint( reinterpret_cast< ::HWND >( m_Handle.Use() ), *(reinterpret_cast< ::POINT* >(&Point) ) ) );
			}
			else
			{
				refHandle->operator=( m_User32Library.ChildWindowFromPointEx( reinterpret_cast< ::HWND >( m_Handle.Use() ), *(reinterpret_cast< ::POINT* >(&Point) ), uFlags ) );
			}
			pResult = p_tWndHandleMap->FindHandle( refHandle );
		}__QOR_ENDPROTECT			
		refType Ref( pResult, false );
		return Ref;
	}

	//--------------------------------------------------------------------------------
	bool COSWindow::Close()
	{
		_WINQ_FCONTEXT( "COSWindow::Close" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.CloseWindow( reinterpret_cast< ::HWND >( m_Handle.Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindow::Destroy()
	{
		_WINQ_FCONTEXT( "COSWindow::Destroy" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.DestroyWindow( reinterpret_cast< ::HWND >( m_Handle.Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindow::EndTask( bool fShutDown, bool fForce )
	{
		_WINQ_FCONTEXT( "COSWindow::EndTask" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.EndTask( reinterpret_cast< ::HWND >( m_Handle.Use() ), fShutDown ? TRUE : FALSE, fForce ? TRUE : FALSE ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindow::EnumChildren( WindowEnumCallback lpEnumFunc, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "COSWindow::EnumChildren" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.EnumChildWindows( reinterpret_cast< ::HWND >( m_Handle.Use() ), reinterpret_cast< ::WNDENUMPROC >( lpEnumFunc ), lParam ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	COSWindow::refType COSWindow::FindChild( COSWindow& ChildAfter, const TCHAR* lpszClass, const TCHAR* lpszWindow )
	{
		_WINQ_FCONTEXT( "COSWindow::FindChild" );
		COSWindow* pResult = 0;
		CWindowHandle::refType HandleRef;
		__QOR_PROTECT
		{
			HandleRef->operator=( m_User32Library.FindWindowEx( reinterpret_cast< ::HWND >( m_Handle.Use() ), reinterpret_cast< ::HWND >( ChildAfter.Handle()->Use() ), lpszClass, lpszWindow ) );
			pResult = p_tWndHandleMap->FindHandle( HandleRef );
		}__QOR_ENDPROTECT
				
		refType Ref( pResult, false );
		return Ref;
	}

	//--------------------------------------------------------------------------------
	COSWindow::refType COSWindow::Find( const TCHAR* lpszClass, const TCHAR* lpszWindow )
	{
		_WINQ_SFCONTEXT( "COSWindow::Find" );
		COSWindow* pResult = 0;
		CWindowHandle::refType HandleRef;
		__QOR_PROTECT
		{
			nsWinQAPI::CUser32& User32Library( nsWinQAPI::CUser32::Instance() );
			HandleRef->operator=( User32Library.FindWindow( lpszClass, lpszWindow ) );
			pResult = p_tWndHandleMap->FindHandle( HandleRef );
		}__QOR_ENDPROTECT

		refType Ref( pResult, false );
		return Ref;
	}

	//--------------------------------------------------------------------------------
	bool COSWindow::GetAltTabInfoT( int iItem, PALTTABINFO pati, TCHAR* pszItemText, unsigned int cchItemText )
	{
		_WINQ_FCONTEXT( "COSWindow::GetAltTabInfo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.GetAltTabInfo( reinterpret_cast< ::HWND >( m_Handle.Use() ), iItem, reinterpret_cast< ::PALTTABINFO >( pati ), pszItemText, cchItemText ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	COSWindow::refType COSWindow::GetAncestor( unsigned int gaFlags )
	{
		_WINQ_FCONTEXT( "COSWindow::GetAncestor" );
		COSWindow* pResult = 0;
		CWindowHandle::refType RefHandle;
		__QOR_PROTECT
		{
			RefHandle->operator=( m_User32Library.GetAncestor( reinterpret_cast< ::HWND >( m_Handle.Use() ), gaFlags ) );
			pResult = p_tWndHandleMap->FindHandle( RefHandle );
		}__QOR_ENDPROTECT
		refType Ref( pResult );
		return Ref;
	}

	//--------------------------------------------------------------------------------
	CRectangle COSWindow::GetClientRect( void )
	{
		_WINQ_FCONTEXT( "COSWindow::GetClientRect" );
		CRectangle rcClient;
		__QOR_PROTECT
		{
			m_User32Library.GetClientRect( reinterpret_cast< ::HWND >( m_Handle.Use() ), reinterpret_cast< ::LPRECT >( &rcClient ) ) ? true : false;
		}__QOR_ENDPROTECT
		return rcClient;
	}

	//--------------------------------------------------------------------------------
	bool COSWindow::GetClientRect( CRectangle* pRect )
	{
		_WINQ_FCONTEXT( "COSWindow::GetClientRect" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.GetClientRect( reinterpret_cast< ::HWND >( m_Handle.Use() ), reinterpret_cast< ::LPRECT >( pRect ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	COSWindow::refType COSWindow::GetLastActivePopup()
	{
		_WINQ_FCONTEXT( "COSWindow::GetLastActivePopup" );
		COSWindow* pResult = 0;
		CWindowHandle::refType RefHandle;
		__QOR_PROTECT
		{
			RefHandle->operator=( m_User32Library.GetLastActivePopup( reinterpret_cast< ::HWND >( m_Handle.Use() ) ) );
			pResult = p_tWndHandleMap->FindHandle( RefHandle );
		}__QOR_ENDPROTECT
		refType Ref( pResult );
		return pResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindow::GetLayeredAttributes( unsigned long* pcrKey, unsigned char* pbAlpha, unsigned long* pdwFlags )
	{
		_WINQ_FCONTEXT( "COSWindow::GetLayeredAttributes" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.GetLayeredWindowAttributes( reinterpret_cast< ::HWND >( m_Handle.Use() ), pcrKey, pbAlpha, pdwFlags ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	COSWindow::refType COSWindow::GetParent()
	{
		_WINQ_FCONTEXT( "COSWindow::GetParent" );
		COSWindow* pResult = 0;	
		CWindowHandle::refType RefHandle;
		__QOR_PROTECT
		{
			RefHandle->operator=( m_User32Library.GetParent( reinterpret_cast< ::HWND >( m_Handle.Use() ) ) );
			pResult = p_tWndHandleMap->FindHandle( RefHandle );
		}__QOR_ENDPROTECT
		refType Ref( pResult, false );
		return Ref;
	}

	//--------------------------------------------------------------------------------
	bool COSWindow::GetTitleBarInfo( PTITLEBARINFO pti )
	{
		_WINQ_FCONTEXT( "COSWindow::GetTitleBarInfo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.GetTitleBarInfo( reinterpret_cast< ::HWND >( m_Handle.Use() ), reinterpret_cast< ::PTITLEBARINFO >( pti ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	COSWindow::refType COSWindow::GetTop()
	{
		_WINQ_FCONTEXT( "COSWindow::GetTop" );
		COSWindow* pResult = 0;
		CWindowHandle::refType RefHandle;
		__QOR_PROTECT
		{
			RefHandle->operator=( m_User32Library.GetTopWindow( reinterpret_cast< ::HWND >( m_Handle.Use() ) ) );
			pResult = p_tWndHandleMap->FindHandle( RefHandle );
		}__QOR_ENDPROTECT	
		refType Ref( pResult, false );
		return pResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindow::GetInfo( PWINDOWINFO pwi )
	{
		_WINQ_FCONTEXT( "COSWindow::GetInfo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.GetWindowInfo( reinterpret_cast< ::HWND >( m_Handle.Use() ), reinterpret_cast< ::PWINDOWINFO >( pwi ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned int COSWindow::GetModuleFileNameT( TCHAR* lpszFileName, unsigned int cchFileNameMax )
	{
		_WINQ_FCONTEXT( "COSWindow::GetModuleFileName" );
		UINT uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = m_User32Library.GetWindowModuleFileName( reinterpret_cast< ::HWND >( m_Handle.Use() ), lpszFileName, cchFileNameMax );
		}__QOR_ENDPROTECT
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindow::GetPlacement( WINDOWPLACEMENT* lpwndpl )
	{
		_WINQ_FCONTEXT( "COSWindow::GetPlacement" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.GetWindowPlacement( reinterpret_cast< ::HWND >( m_Handle.Use() ), reinterpret_cast< ::WINDOWPLACEMENT* >( lpwndpl ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindow::GetRect( LPRECT lpRect )
	{
		_WINQ_FCONTEXT( "COSWindow::GetRect" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.GetWindowRect( reinterpret_cast< ::HWND >( m_Handle.Use() ), reinterpret_cast< ::LPRECT >( lpRect ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int COSWindow::GetText( TCHAR* lpString, int nMaxCount )
	{
		_WINQ_FCONTEXT( "COSWindow::GetText" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_User32Library.GetWindowText( reinterpret_cast< ::HWND >( m_Handle.Use() ), lpString, nMaxCount );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int COSWindow::GetTextLength()
	{
		_WINQ_FCONTEXT( "COSWindow::GetTextLength" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_User32Library.GetWindowTextLength( reinterpret_cast< ::HWND >( m_Handle.Use() ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long COSWindow::GetThreadProcessId( unsigned long* lpdwProcessId )
	{
		_WINQ_FCONTEXT( "COSWindow::GetThreadProcessId" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = m_User32Library.GetWindowThreadProcessId( reinterpret_cast< ::HWND >( m_Handle.Use() ), lpdwProcessId );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	int COSWindow::InternalGetText( wchar_t* lpString, int nMaxCount )
	{
		_WINQ_FCONTEXT( "COSWindow::InternalGetText" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_User32Library.InternalGetWindowText( reinterpret_cast< ::HWND >( m_Handle.Use() ), lpString, nMaxCount );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindow::IsChildOf( CWindowHandle::refType hWndParent )
	{
		_WINQ_FCONTEXT( "COSWindow::IsChildOf" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.IsChild( reinterpret_cast< ::HWND >( hWndParent->Use() ), reinterpret_cast< ::HWND >( m_Handle.Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindow::IsHungApp()
	{
		_WINQ_FCONTEXT( "COSWindow::IsHungApp" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.IsHungAppWindow( reinterpret_cast< ::HWND >( m_Handle.Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindow::IsIconic()
	{
		_WINQ_FCONTEXT( "COSWindow::IsIconic" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.IsIconic( reinterpret_cast< ::HWND >( m_Handle.Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindow::IsWindow()
	{
		_WINQ_FCONTEXT( "COSWindow::IsWindow" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.IsWindow( reinterpret_cast< ::HWND >( m_Handle.Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindow::IsUnicode()
	{
		_WINQ_FCONTEXT( "COSWindow::IsUnicode" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.IsWindowUnicode( reinterpret_cast< ::HWND >( m_Handle.Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindow::IsVisible()
	{
		_WINQ_FCONTEXT( "COSWindow::IsVisible" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.IsWindowVisible( reinterpret_cast< ::HWND >( m_Handle.Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindow::IsZoomed()
	{
		_WINQ_FCONTEXT( "COSWindow::IsZoomed" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.IsZoomed( reinterpret_cast< ::HWND >( m_Handle.Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindow::Move( int X, int Y, int nWidth, int nHeight, bool bRepaint )
	{
		_WINQ_FCONTEXT( "COSWindow::Move" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.MoveWindow( reinterpret_cast< ::HWND >( m_Handle.Use() ), X, Y, nWidth, nHeight, bRepaint ? TRUE : FALSE ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindow::OpenIcon()
	{
		_WINQ_FCONTEXT( "COSWindow::OpenIcon" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.OpenIcon( reinterpret_cast< ::HWND >( m_Handle.Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void COSWindow::LogicalToPhysicalPoint( LPPOINT lpPoint )
	{
		_WINQ_FCONTEXT( "COSWindow::LogicalToPhysicalPoint" );
		__QOR_PROTECT
		{
			m_User32Library.LogicalToPhysicalPoint( reinterpret_cast< ::HWND >( m_Handle.Use() ), reinterpret_cast< ::LPPOINT >( lpPoint ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	void COSWindow::PhysicalToLogicalPoint( LPPOINT lpPoint )
	{
		_WINQ_FCONTEXT( "COSWindow::PhysicalToLogicalPoint" );
		__QOR_PROTECT
		{
			m_User32Library.PhysicalToLogicalPoint( reinterpret_cast< ::HWND >( m_Handle.Use() ), reinterpret_cast< ::LPPOINT >( lpPoint ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	COSWindow::refType COSWindow::RealChildFromPoint( POINT ptParentClientCoords )
	{
		_WINQ_FCONTEXT( "COSWindow::RealChildFromPoint" );
		COSWindow* pResult = 0;
		CWindowHandle::refType RefHandle;
		__QOR_PROTECT
		{
			RefHandle->operator=( m_User32Library.RealChildWindowFromPoint( reinterpret_cast< ::HWND >( m_Handle.Use() ), *(reinterpret_cast< ::POINT* >(&ptParentClientCoords) ) ) );
			pResult = p_tWndHandleMap->FindHandle( RefHandle );
		}__QOR_ENDPROTECT
		refType Ref( pResult, false );
		return Ref;
	}

	//--------------------------------------------------------------------------------
	unsigned int COSWindow::RealGetClass( TCHAR* pszType, unsigned int cchType )
	{
		_WINQ_FCONTEXT( "COSWindow::RealGetClass" );
		UINT uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = m_User32Library.RealGetWindowClass( reinterpret_cast< ::HWND >( m_Handle.Use() ), pszType, cchType );
		}__QOR_ENDPROTECT
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindow::SetAsForegroundWindow()
	{
		_WINQ_FCONTEXT( "COSWindow::SetAsForegroundWindow" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.SetForegroundWindow( reinterpret_cast< ::HWND >( m_Handle.Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindow::SetLayeredAttributes( unsigned long crKey, unsigned char bAlpha, unsigned long dwFlags )
	{
		_WINQ_FCONTEXT( "COSWindow::SetLayeredAttributes" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.SetLayeredWindowAttributes( reinterpret_cast< ::HWND >( m_Handle.Use() ), crKey, bAlpha, dwFlags ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	COSWindow::refType COSWindow::SetParent( COSWindow& NewParent )
	{
		_WINQ_FCONTEXT( "COSWindow::SetParent" );
		COSWindow* pResult = 0;	
		CWindowHandle::refType RefHandle;
		__QOR_PROTECT
		{
			RefHandle->operator=( m_User32Library.SetParent( reinterpret_cast< ::HWND >( m_Handle.Use() ), reinterpret_cast< ::HWND >( NewParent.Handle()->Use() ) ) );
			pResult = p_tWndHandleMap->FindHandle( RefHandle );
		}__QOR_ENDPROTECT	
		refType Ref( pResult, false );
		return Ref;
	}

	//--------------------------------------------------------------------------------
	bool COSWindow::SetPlacement( WINDOWPLACEMENT* lpwndpl )
	{
		_WINQ_FCONTEXT( "COSWindow::SetPlacement" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.SetWindowPlacement( reinterpret_cast< ::HWND >( m_Handle.Use() ), reinterpret_cast< ::WINDOWPLACEMENT* >( lpwndpl ) )? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindow::SetPos( COSWindow* pWndInsertAfter, int X, int Y, int cx, int cy, unsigned int uFlags )
	{
		_WINQ_FCONTEXT( "COSWindow::SetPos" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.SetWindowPos( reinterpret_cast< ::HWND >( m_Handle.Use() ), reinterpret_cast< ::HWND >( pWndInsertAfter->Handle()->Use() ), X, Y, cx, cy, uFlags ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindow::SetText( const TCHAR* lpString )
	{
		_WINQ_FCONTEXT( "COSWindow::SetText" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.SetWindowText( reinterpret_cast< ::HWND >( m_Handle.Use() ), lpString ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindow::ShowOwnedPopups( bool fShow )
	{
		_WINQ_FCONTEXT( "COSWindow::ShowOwnedPopups" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.ShowOwnedPopups( reinterpret_cast< ::HWND >( m_Handle.Use() ), fShow ? TRUE : FALSE ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindow::Show( int nCmdShow )
	{
		_WINQ_FCONTEXT( "COSWindow::Show" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.ShowWindow( reinterpret_cast< ::HWND >( m_Handle.Use() ), nCmdShow ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindow::ShowAsync( int nCmdShow )
	{
		_WINQ_FCONTEXT( "COSWindow::ShowAsync" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.ShowWindowAsync( reinterpret_cast< ::HWND >( m_Handle.Use() ), nCmdShow ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void COSWindow::SwitchToThisWindow( bool fAltTab )
	{
		_WINQ_FCONTEXT( "COSWindow::SwitchToThisWindow" );
		__QOR_PROTECT
		{
			m_User32Library.SwitchToThisWindow ( reinterpret_cast< ::HWND >( m_Handle.Use() ), fAltTab ? TRUE : FALSE );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	unsigned short COSWindow::TileChildren( unsigned int wHow, CRectangle* pRect, unsigned int cKids, const refType lpKids )
	{
		_WINQ_FCONTEXT( "COSWindow::TileChildren" );
		WORD wResult = 0;
		__QOR_PROTECT
		{
			wResult = m_User32Library.TileWindows( reinterpret_cast< ::HWND >( m_Handle.Use() ), wHow, reinterpret_cast< ::RECT* >( pRect ), cKids, reinterpret_cast< const ::HWND* >( lpKids->Handle()->Use() ) );
		}__QOR_ENDPROTECT
		return wResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindow::UpdateLayeredWindow( CDeviceContext::refType dcDst, POINT* pptDst, SIZE* psize, CDeviceContext::refType dcSrc, POINT* pptSrc, unsigned long crKey, BLENDFUNCTION* pblend, unsigned long dwFlags )
	{
		_WINQ_FCONTEXT( "COSWindow::UpdateLayeredWindow" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.UpdateLayeredWindow( reinterpret_cast< ::HWND >( m_Handle.Use() ), reinterpret_cast< ::HDC >( dcDst->Handle()->Use() ), reinterpret_cast< ::POINT* >( pptDst ), reinterpret_cast< ::SIZE* >( psize ), reinterpret_cast< ::HDC >( dcSrc->Handle()->Use() ), reinterpret_cast< ::POINT* >( pptSrc ), crKey, reinterpret_cast< ::BLENDFUNCTION* >( pblend ), dwFlags ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindow::UpdateLayeredIndirect( const UPDATELAYEREDWINDOWINFO* pULWInfo )
	{
		_WINQ_FCONTEXT( "COSWindow::UpdateLayeredIndirect" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.UpdateLayeredWindowIndirect( reinterpret_cast< ::HWND >( m_Handle.Use() ), reinterpret_cast< const ::UPDATELAYEREDWINDOWINFO* >( pULWInfo ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	Cmp_ulong_ptr COSWindow::GetClassLongPtrT( int nIndex )
	{
		_WINQ_FCONTEXT( "COSWindow::GetClassLongPtr" );
		ULONG_PTR ulResult = 0;
		__QOR_PROTECT
		{
			ulResult = m_User32Library.GetClassLongPtr( reinterpret_cast< ::HWND >( m_Handle.Use() ), nIndex );
		}__QOR_ENDPROTECT
		return ulResult;
	}

	//--------------------------------------------------------------------------------
	int COSWindow::GetClassNameT( TCHAR* lpClassName, int nMaxCount )
	{
		_WINQ_FCONTEXT( "COSWindow::GetClassName" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_User32Library.GetClassName( reinterpret_cast< ::HWND >( m_Handle.Use() ), lpClassName, nMaxCount );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	unsigned short COSWindow::GetClassWord( int nIndex )
	{
		_WINQ_FCONTEXT( "COSWindow::GetClassWord" );
		WORD wResult = 0;
		__QOR_PROTECT
		{
			wResult = m_User32Library.GetClassWord( reinterpret_cast< ::HWND >( m_Handle.Use() ), nIndex );
		}__QOR_ENDPROTECT
		return wResult;
	}

	//--------------------------------------------------------------------------------
	Cmp_long_ptr COSWindow::GetLongPtr( int nIndex ) const
	{
		_WINQ_FCONTEXT( "COSWindow::GetLongPtr" );
		LONG_PTR Result = 0;
		__QOR_PROTECT
		{
			Result = m_User32Library.GetWindowLongPtr( reinterpret_cast< ::HWND >( m_Handle.Use() ), nIndex );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	Cmp_long_ptr COSWindow::SetLongPtr( int nIndex, Cmp_long_ptr dwNewLong )
	{
		_WINQ_FCONTEXT( "COSWindow::SetLongPtr" );
		LONG_PTR Result = 0;
		__QOR_PROTECT
		{
			Result = m_User32Library.SetWindowLongPtr( reinterpret_cast< ::HWND >( m_Handle.Use() ), nIndex, dwNewLong );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	Cmp_ulong_ptr COSWindow::SetClassLongPtrT( int nIndex, Cmp_long_ptr dwNewLong )
	{
		_WINQ_FCONTEXT( "COSWindow::SetClassLongPtr" );
		ULONG_PTR Result = 0;
		__QOR_PROTECT
		{
			Result = m_User32Library.SetClassLongPtr( reinterpret_cast< ::HWND >( m_Handle.Use() ), nIndex, dwNewLong );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	unsigned short COSWindow::SetClassWord( int nIndex, unsigned short wNewWord )
	{
		_WINQ_FCONTEXT( "COSWindow::SetClassWord" );
		WORD wResult = 0;
		__QOR_PROTECT
		{
			wResult = m_User32Library.SetClassWord( reinterpret_cast< ::HWND >( m_Handle.Use() ), nIndex, wNewWord );
		}__QOR_ENDPROTECT
		return wResult;
	}

	//--------------------------------------------------------------------------------
	Cmp_long_ptr COSWindow::CallProc( WindowProcedure lpPrevWndFunc, CWindowHandle::refType hWnd, unsigned int Msg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_SFCONTEXT( "COSWindow::CallProc" );
		LRESULT Result = 0;				
		__QOR_PROTECT
		{
			CUser32 User32Library;
			Result = User32Library.CallWindowProc( reinterpret_cast< ::WNDPROC >( lpPrevWndFunc ), reinterpret_cast< ::HWND >( hWnd->Use() ), Msg, wParam, lParam );
		}__QOR_ENDPROTECT
		return Result;
	}
	
	//--------------------------------------------------------------------------------
	Cmp_long_ptr COSWindow::DefProc( unsigned int Msg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "COSWindow::DefProc" );
		LRESULT Result = 0;
		__QOR_PROTECT
		{
			Result = m_User32Library.DefWindowProc( reinterpret_cast< ::HWND >( m_Handle.Use() ), Msg, wParam, lParam );
		}__QOR_ENDPROTECT
		return Result;
	}
	/*
	//--------------------------------------------------------------------------------
	Cmp_long_ptr COSWindow::DefProc( unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_SFCONTEXT( "COSWindow::DefProc" );
		LRESULT Result = 0;
		__QOR_PROTECT
		{
			CUser32 User32Library;
			Result = User32Library.DefWindowProc( reinterpret_cast< HWND >( m_Handle.Use() ), uMsg, wParam, lParam );
		}__QOR_ENDPROTECT
		return Result;
	}
	*/
	//--------------------------------------------------------------------------------
	Cmp_long_ptr COSWindow::DefFrameProcT( COSWindow::refType Window, COSWindow::refType WndMDIClient, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_SFCONTEXT( "COSWindow::DefFrameProcT" );
		LRESULT Result = 0;
		__QOR_PROTECT
		{
			CUser32 User32Library;
			Result = User32Library.DefFrameProc( reinterpret_cast< HWND >( Window->Handle()->Use() ), reinterpret_cast< HWND >( WndMDIClient->Handle()->Use() ), uMsg, wParam, lParam );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	Cmp_long_ptr COSWindow::DefaultChildFrameProc( COSWindow::refType Window, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		Cmp_long_ptr lResult = COSWindow::DefMDIChildProcT( Window, uMsg, wParam, lParam );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	Cmp_long_ptr COSWindow::DefMDIChildProcT( COSWindow::refType Window, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_ulong_ptr lParam )
	{
		_WINQ_SFCONTEXT( "COSWindow::DefMDIChildProcT" );
		LRESULT Result = 0;
		__QOR_PROTECT
		{
			CUser32 User32Library;
			Result = User32Library.DefMDIChildProc( reinterpret_cast< ::HWND >( Window->Handle()->Use() ), uMsg, wParam, lParam );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	Cmp_long_ptr COSWindow::DefFrameProcT( COSWindow::refType WndMDIClient, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "COSWindow::DefFrameProc" );
		LRESULT Result = 0;
		__QOR_PROTECT
		{
			Result = m_User32Library.DefFrameProc( reinterpret_cast< ::HWND >( m_Handle.Use() ), reinterpret_cast< ::HWND >( WndMDIClient->Handle()->Use() ), uMsg, wParam, lParam );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	bool COSWindow::Print( CDeviceContext::refType dcBlt, unsigned int nFlags )
	{
		_WINQ_FCONTEXT( "COSWindow::Print" );
		bool bResult = FALSE;
		__QOR_PROTECT
		{
			bResult = m_User32Library.PrintWindow( reinterpret_cast< ::HWND >( m_Handle.Use() ), reinterpret_cast< ::HDC >( dcBlt->Handle()->Use() ), nFlags ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindow::SetContextHelpId( unsigned long dwContextHelpId )
	{
		_WINQ_FCONTEXT( "COSWindow::SetContextHelpId" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.SetWindowContextHelpId( reinterpret_cast< ::HWND >( m_Handle.Use() ), dwContextHelpId ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long COSWindow::GetContextHelpId()
	{
		_WINQ_FCONTEXT( "COSWindow::GetContextHelpId" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = m_User32Library.GetWindowContextHelpId( reinterpret_cast< ::HWND >( m_Handle.Use() ) );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindow::Help( const TCHAR* lpszHelp, unsigned int uCommand, Cmp_ulong_ptr dwData )
	{
		_WINQ_FCONTEXT( "COSWindow::Help" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.WinHelp( reinterpret_cast< ::HWND >( m_Handle.Use() ), lpszHelp, uCommand, dwData ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindow::Flash( bool bInvert )
	{
		_WINQ_FCONTEXT( "COSWindow::Flash" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.FlashWindow( reinterpret_cast< ::HWND >( m_Handle.Use() ), bInvert ? TRUE : FALSE ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	CWindowHandle::refType COSWindow::Handle()
	{
		_WINQ_FCONTEXT( "COSWindow::Handle" );
		return m_Handle.Ref();
	}

	//--------------------------------------------------------------------------------
	void COSWindow::SetHandle( void* hwnd )
	{
		_WINQ_FCONTEXT( "COSWindow::SetHandle" );
		m_Handle = hwnd;
	}

	//--------------------------------------------------------------------------------
	CUserObject COSWindow::Security()
	{
		_WINQ_FCONTEXT( "COSWindow::Security" );
		CUserObject Result( m_Handle.AsHandle() );
		return Result;
	}

	//--------------------------------------------------------------------------------
	//return a weak reference to this Window object
	COSWindow::refType COSWindow::Ref( void )
	{
		refType Ref( this, false );
		return Ref;
	}

	//--------------------------------------------------------------------------------
	Cmp_long_ptr COSWindow::DefaultMsgProc( void* hnd, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		Cmp_long_ptr Result = 0;//TODO:Wnd->DefProc( uMsg, wParam, lParam );
		return Result;
	}

	//--------------------------------------------------------------------------------
	Cmp_long_ptr COSWindow::DefaultFrameProc( COSWindow::refType Wnd, COSWindow::refType WndMDIClient, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		Cmp_long_ptr lResult = COSWindow::DefFrameProcT( Wnd, WndMDIClient, uMsg, wParam, lParam );
		return lResult;
	}

//protected:

	//--------------------------------------------------------------------------------
	COSWindow::COSWindow( const COSWindow& src ) : m_User32Library( CUser32::Instance() )
	,	m_Handle( this, (const_cast< COSWindow& >(src)).Handle()->AsHandle().ptr() )
	{
		_WINQ_FCONTEXT( "COSWindow::COSWindow" );
		m_bOwnsHandle = src.m_bOwnsHandle;
	}

	__QCMP_WARNING_POP

	//--MDI Child Window--------------------------------------------------------------


	//--------------------------------------------------------------------------------
	CMDIChildWindow::CMDIChildWindow( CWindowHandle& hWnd ) : COSWindow( hWnd.Use() )
	{
		_WINQ_FCONTEXT( "CMDIChildWindow::CMDIChildWindow" );
		m_bOwnsHandle = true;//TODO: Check ??
	}

	//--------------------------------------------------------------------------------
	CMDIChildWindow::CMDIChildWindow( const TCHAR* lpClassName, const TCHAR* lpWindowName, unsigned long dwStyle, int X, int Y, int nWidth, int nHeight, CWindowHandle::refType hWndParent, InstanceHandle hInstance, Cmp_long_ptr lParam ) : COSWindow()
	{
		_WINQ_FCONTEXT( "CMDIChildWindow::CMDIChildWindow" );
		__QOR_PROTECT
		{
			m_Handle = m_User32Library.CreateMDIWindow( lpClassName, lpWindowName, dwStyle, X, Y, nWidth, nHeight, reinterpret_cast< ::HWND >( hWndParent->Use() ), reinterpret_cast< ::HINSTANCE >( hInstance ), lParam );
		}__QOR_ENDPROTECT
		m_bOwnsHandle = true;
	}

	//--------------------------------------------------------------------------------
	CMDIChildWindow::~CMDIChildWindow()
	{
		_WINQ_FCONTEXT( "CMDIChildWindow::~CMDIChildWindow" );
	}

	//--------------------------------------------------------------------------------
	Cmp_long_ptr CMDIChildWindow::DefProc( unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CMDIChildWindow::DefProc" );
		LRESULT Result = 0;
		__QOR_PROTECT
		{
			Result = m_User32Library.DefMDIChildProc( reinterpret_cast< ::HWND >( m_Handle.Use() ), uMsg, wParam, lParam );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--ShellWindow-------------------------------------------------------------------

	//--------------------------------------------------------------------------------
	CShellWindow::CShellWindow() : COSWindow()
	{
		_WINQ_FCONTEXT( "CShellWindow::CShellWindow" );
		__QOR_PROTECT
		{
			m_Handle = m_User32Library.GetShellWindow();
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CShellWindow::~CShellWindow()
	{
		_WINQ_FCONTEXT( "CShellWindow::~CShellWindow" );
	}


	//--Foreground Window-------------------------------------------------------------


	//--------------------------------------------------------------------------------
	CForegroundWindow::CForegroundWindow() : COSWindow()
	{
		_WINQ_FCONTEXT( "CForegroundWindow::CForegroundWindow" );
		__QOR_PROTECT
		{
			m_Handle = m_User32Library.GetForegroundWindow();
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CForegroundWindow::~CForegroundWindow()
	{
		_WINQ_FCONTEXT( "CForegroundWindow::~CForegroundWindow" );
	}


	//--Desktop Window----------------------------------------------------------------


	//--------------------------------------------------------------------------------
	CDesktopWindow::CDesktopWindow() : COSWindow()
	{
		_WINQ_FCONTEXT( "CDesktopWindow::CDesktopWindow" );
		__QOR_PROTECT
		{
			m_Handle = m_User32Library.GetDesktopWindow();
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CDesktopWindow::~CDesktopWindow()
	{
		_WINQ_FCONTEXT( "CDesktopWindow::~CDesktopWindow" );
	}

	//--OS Window Shell Hook----------------------------------------------------------------

	__QOR_IMPLEMENT_OCLASS_LUID( COSWindowShellHook );

	//--------------------------------------------------------------------------------
	COSWindowShellHook::COSWindowShellHook( COSWindow& Wnd, int* pbResult ) : m_Wnd( Wnd )
	{
		_WINQ_FCONTEXT( "COSWindowShellHook::COSWindowShellHook" );
		__QOR_PROTECT
		{
			m_pResult = pbResult;
			BOOL bResult = m_Wnd.m_User32Library.RegisterShellHookWindow( reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ) );
			if( m_pResult != 0 )
			{
				*m_pResult = bResult;
			}				
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	COSWindowShellHook::~COSWindowShellHook()
	{
		_WINQ_FCONTEXT( "COSWindowShellHook::~COSWindowShellHook" );
		__QOR_PROTECT
		{
			BOOL bResult = m_Wnd.m_User32Library.DeregisterShellHookWindow( reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ) );
			if( m_pResult != 0 )
			{
				*m_pResult = bResult;
			}
		}__QOR_ENDPROTECT
	}


	//--Window Painting --------------------------------------------------------------

	__QOR_IMPLEMENT_OCLASS_LUID( COSWindowPainting );

	//--------------------------------------------------------------------------------
	COSWindowPainting::COSWindowPainting( const COSWindowPainting& src ) : m_Wnd( src.m_Wnd )
	{
		_WINQ_FCONTEXT( "COSWindowPainting::COSWindowPainting" );
	}

	//--------------------------------------------------------------------------------
	COSWindowPainting::COSWindowPainting( COSWindow& Wnd ) : m_Wnd( Wnd )
	{
		_WINQ_FCONTEXT( "COSWindowPainting::COSWindowPainting" );
	}

	//--------------------------------------------------------------------------------
	COSWindowPainting::~COSWindowPainting()
	{
		_WINQ_FCONTEXT( "COSWindowPainting::~COSWindowPainting" );
	}
			
	//--------------------------------------------------------------------------------
	bool COSWindowPainting::DrawAnimatedRects( int idAni, const CRectangle* prcFrom, const CRectangle* prcTo )
	{
		_WINQ_FCONTEXT( "COSWindowPainting::DrawAnimatedRects" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_Wnd.m_User32Library.DrawAnimatedRects( reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ), idAni, reinterpret_cast< const ::RECT* >( prcFrom ), reinterpret_cast< const ::RECT* >( prcTo ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindowPainting::DrawCaption( CDeviceContext::refType dc, const CRectangle* prc, unsigned int uFlags )
	{
		_WINQ_FCONTEXT( "COSWindowPainting::DrawCaption" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_Wnd.m_User32Library.DrawCaption( reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ), reinterpret_cast< ::HDC >( dc->Handle()->Use() ), reinterpret_cast< ::LPCRECT >( prc ), uFlags ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int COSWindowPainting::ExcludeUpdateRgn( CDeviceContext::refType DC )
	{
		_WINQ_FCONTEXT( "COSWindowPainting::ExcludeUpdateRgn" );
		int iResult = m_Wnd.m_User32Library.ExcludeUpdateRgn( reinterpret_cast< HDC >( DC->Handle()->Use() ), reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ) );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindowPainting::GetUpdateRect( CRectangle* pRect, bool bErase )
	{
		_WINQ_FCONTEXT( "COSWindowPainting::GetUpdateRect" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_Wnd.m_User32Library.GetUpdateRect( reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ), reinterpret_cast< ::LPRECT >( pRect ), bErase ? TRUE : FALSE ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int COSWindowPainting::GetUpdateRgn( CRegion::refType Rgn, bool bErase )
	{
		_WINQ_FCONTEXT( "COSWindowPainting::GetUpdateRgn" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_Wnd.m_User32Library.GetUpdateRgn( reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ), reinterpret_cast< ::HRGN >( Rgn->Handle()->Use() ), bErase ? TRUE : FALSE );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	CDeviceContext::refType COSWindowPainting::GetDC()
	{
		_WINQ_FCONTEXT( "COSWindowPainting::GetDC" );
		__QOR_PROTECT
		{
			return CDeviceContext::FromHandle( CDCHandle( 0, (void*)( m_Wnd.m_User32Library.GetWindowDC( reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ) ) ) ).Ref() );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	int COSWindowPainting::GetRgn( CRegion::refType Rgn )
	{
		_WINQ_FCONTEXT( "COSWindowPainting::GetRgn" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_Wnd.m_User32Library.GetWindowRgn( reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ), reinterpret_cast< ::HRGN >( Rgn->Handle()->Use() ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int COSWindowPainting::GetRgnBox( CRectangle* prc )
	{
		_WINQ_FCONTEXT( "COSWindowPainting::GetRgnBox" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_Wnd.m_User32Library.GetWindowRgnBox( reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ), reinterpret_cast< ::LPRECT >( prc ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindowPainting::InvalidateRect( const CRectangle* pRect, bool bErase )
	{
		_WINQ_FCONTEXT( "COSWindowPainting::InvalidateRect" );
		bool  bResult = false;
		__QOR_PROTECT
		{
			bResult = m_Wnd.m_User32Library.InvalidateRect( reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ), reinterpret_cast< const ::RECT* >( pRect ), bErase ? TRUE : FALSE ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindowPainting::InvalidateRgn( CRegion::refType Rgn, bool bErase )
	{
		_WINQ_FCONTEXT( "COSWindowPainting::InvalidateRgn" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_Wnd.m_User32Library.InvalidateRgn( reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ), reinterpret_cast< ::HRGN >( Rgn->Handle()->Use() ), bErase ? TRUE : FALSE ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindowPainting::LockUpdate()
	{
		_WINQ_FCONTEXT( "COSWindowPainting::LockUpdate" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_Wnd.m_User32Library.LockWindowUpdate( reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindowPainting::Redraw( const CRectangle* prcUpdate, CRegion::refType rgnUpdate, unsigned int flags )
	{
		_WINQ_FCONTEXT( "COSWindowPainting::Redraw" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_Wnd.m_User32Library.RedrawWindow( reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ), reinterpret_cast< const ::RECT* >( prcUpdate ), reinterpret_cast< ::HRGN >( rgnUpdate->Handle()->Use() ), flags ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int COSWindowPainting::SetRgn( CRegion::refType Rgn, bool bRedraw )
	{
		_WINQ_FCONTEXT( "COSWindowPainting::SetRgn" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_Wnd.m_User32Library.SetWindowRgn( reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ), reinterpret_cast< ::HRGN >( Rgn->Handle()->Use() ), bRedraw ? TRUE : FALSE );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindowPainting::Update()
	{
		_WINQ_FCONTEXT( "COSWindowPainting::Update" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_Wnd.m_User32Library.UpdateWindow( reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindowPainting::ValidateRect( const CRectangle* pRect )
	{
		_WINQ_FCONTEXT( "COSWindowPainting::ValidateRect" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_Wnd.m_User32Library.ValidateRect( reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ), reinterpret_cast< const ::RECT* >( pRect ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindowPainting::ValidateRgn( CRegion::refType Rgn )
	{
		_WINQ_FCONTEXT( "COSWindowPainting::ValidateRgn" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_Wnd.m_User32Library.ValidateRgn( reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ), reinterpret_cast< ::HRGN >( Rgn->Handle()->Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindowPainting::ClientToScreen( LPPOINT lpPoint )
	{
		_WINQ_FCONTEXT( "COSWindowPainting::ClientToScreen" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_Wnd.m_User32Library.ClientToScreen( reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ), reinterpret_cast< ::LPPOINT >( lpPoint ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindowPainting::ScreenToClient( LPPOINT lpPoint )
	{
		_WINQ_FCONTEXT( "COSWindowPainting::ScreenToClient" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_Wnd.m_User32Library.ScreenToClient( reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ), reinterpret_cast< ::LPPOINT >( lpPoint ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int COSWindowPainting::MapWindowPoints( COSWindow::refType To, LPPOINT lpPoints, unsigned int cPoints )
	{
		_WINQ_FCONTEXT( "COSWindowPainting::MapWindowPoints" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_Wnd.m_User32Library.MapWindowPoints( reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ), reinterpret_cast< ::HWND >( To->Handle()->Use() ), reinterpret_cast< ::LPPOINT >( lpPoints ), cPoints );
		}__QOR_ENDPROTECT
		return iResult;
	}


	//--Window Scroll-----------------------------------------------------------------

	__QOR_IMPLEMENT_OCLASS_LUID( COSWindowScroll );

	//--------------------------------------------------------------------------------
	COSWindowScroll::COSWindowScroll( const COSWindowScroll& src ) : m_Wnd( src.m_Wnd )
	{
		_WINQ_FCONTEXT( "COSWindowScroll::COSWindowScroll" );
	}

	//--------------------------------------------------------------------------------
	COSWindowScroll::COSWindowScroll( COSWindow& Wnd ) : m_Wnd( Wnd )
	{
		_WINQ_FCONTEXT( "COSWindowScroll::COSWindowScroll" );
	}

	//--------------------------------------------------------------------------------
	COSWindowScroll::~COSWindowScroll()
	{
		_WINQ_FCONTEXT( "COSWindowScroll::~COSWindowScroll" );
	}

	//--------------------------------------------------------------------------------
	bool COSWindowScroll::Enable( unsigned int wSBFlags, unsigned int wArrows )
	{
		_WINQ_FCONTEXT( "COSWindowScroll::Enable" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_Wnd.m_User32Library.EnableScrollBar( reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ), wSBFlags, wArrows ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindowScroll::GetBarInfo( long idObject, PSCROLLBARINFO psbi )
	{
		_WINQ_FCONTEXT( "COSWindowScroll::GetBarInfo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_Wnd.m_User32Library.GetScrollBarInfo( reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ), idObject, reinterpret_cast< ::PSCROLLBARINFO >( psbi ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindowScroll::GetInfo( int fnBar, LPSCROLLINFO lpsi )
	{
		_WINQ_FCONTEXT( "COSWindowScroll::GetInfo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_Wnd.m_User32Library.GetScrollInfo( reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ), fnBar, reinterpret_cast< ::LPSCROLLINFO >( lpsi ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int COSWindowScroll::GetPos( int nBar )
	{
		_WINQ_FCONTEXT( "COSWindowScroll::GetPos" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_Wnd.m_User32Library.GetScrollPos( reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ), nBar );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindowScroll::GetRange( int nBar, int* lpMinPos, int* lpMaxPos )
	{
		_WINQ_FCONTEXT( "COSWindowScroll::GetRange" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_Wnd.m_User32Library.GetScrollRange( reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ), nBar, lpMinPos, lpMaxPos ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindowScroll::Scroll( int XAmount, int YAmount, const CRectangle* lpRect, const CRectangle* lpClipRect )
	{
		_WINQ_FCONTEXT( "COSWindowScroll::Scroll" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_Wnd.m_User32Library.ScrollWindow( reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ), XAmount, YAmount, reinterpret_cast< const ::RECT* >( lpRect ), reinterpret_cast< const ::RECT* >( lpClipRect ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int COSWindowScroll::Scroll( int dx, int dy, const CRectangle* prcScroll, const CRectangle* prcClip, CRegion::refType rgnUpdate, CRectangle* prcUpdate, unsigned int flags )
	{
		_WINQ_FCONTEXT( "COSWindowScroll::Scroll" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_Wnd.m_User32Library.ScrollWindowEx( reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ), dx, dy, reinterpret_cast< const ::RECT* >( prcScroll ), reinterpret_cast< const ::RECT* >( prcClip ), reinterpret_cast< HRGN >( rgnUpdate->Handle()->Use() ), reinterpret_cast< ::RECT* >( prcUpdate ), flags );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int COSWindowScroll::SetInfo( int fnBar, LPCSCROLLINFO lpsi, bool fRedraw )
	{
		_WINQ_FCONTEXT( "COSWindowScroll::SetInfo" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_Wnd.m_User32Library.SetScrollInfo( reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ), fnBar, reinterpret_cast< ::LPCSCROLLINFO >( lpsi ), fRedraw ? TRUE : FALSE );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int COSWindowScroll::SetPos( int nBar, int nPos, bool bRedraw )
	{
		_WINQ_FCONTEXT( "COSWindowScroll::SetPos" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_Wnd.m_User32Library.SetScrollPos( reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ), nBar, nPos, bRedraw ? TRUE : FALSE );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindowScroll::SetRange( int nBar, int nMinPos, int nMaxPos, bool bRedraw )
	{
		_WINQ_FCONTEXT( "COSWindowScroll::SetRange" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_Wnd.m_User32Library.SetScrollRange( reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ), nBar, nMinPos, nMaxPos, bRedraw ? TRUE : FALSE ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool COSWindowScroll::ShowBar( int wBar, bool bShow )
	{
		_WINQ_FCONTEXT( "COSWindowScroll::ShowBar" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_Wnd.m_User32Library.ShowScrollBar( reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ), wBar, bShow ? TRUE : FALSE ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}


	//--Window Properties-------------------------------------------------------------

	__QOR_IMPLEMENT_OCLASS_LUID( COSWindowProperties );

	//--------------------------------------------------------------------------------
	COSWindowProperties::COSWindowProperties( COSWindow& Wnd ) : m_Wnd( Wnd )
	{
		_WINQ_FCONTEXT( "COSWindowProperties::COSWindowProperties" );
	}

	//--------------------------------------------------------------------------------
	COSWindowProperties::~COSWindowProperties()
	{
		_WINQ_FCONTEXT( "COSWindowProperties::~COSWindowProperties" );
	}

	//--------------------------------------------------------------------------------
	int COSWindowProperties::Enum( PropEnumCallback lpEnumFunc )
	{
		_WINQ_FCONTEXT( "COSWindowProperties::Enum" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_Wnd.m_User32Library.EnumProps( reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ), reinterpret_cast< ::PROPENUMPROC >( lpEnumFunc ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int COSWindowProperties::Enum( PropEnumCallbackEx lpEnumFunc, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "COSWindowProperties::Enum" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_Wnd.m_User32Library.EnumPropsEx( reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ), reinterpret_cast< ::PROPENUMPROCEX >( lpEnumFunc ), lParam );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	void* COSWindowProperties::Get( const TCHAR* lpString )
	{
		_WINQ_FCONTEXT( "COSWindowProperties::Get" );
		HANDLE Result = 0;
		__QOR_PROTECT
		{
			Result = m_Wnd.m_User32Library.GetProp( reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ), lpString );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	void* COSWindowProperties::Remove( const TCHAR* lpString )
	{
		_WINQ_FCONTEXT( "COSWindowProperties::Remove" );
		HANDLE Result = 0;
		__QOR_PROTECT
		{
			Result = m_Wnd.m_User32Library.RemoveProp( reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ), lpString );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	bool COSWindowProperties::Set( const TCHAR* lpString, void* hData )
	{
		_WINQ_FCONTEXT( "COSWindowProperties::Set" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_Wnd.m_User32Library.SetProp( reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ), lpString, hData ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	__QCMP_DECLARE_PERTHREAD CWindowHandleMap* p_tWndHandleMap = 0;

	//--------------------------------------------------------------------------------
	Cmp_long_ptr __QCMP_STDCALLCONVENTION COSWindow::StaticWindowProc( void* hwnd, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		Cmp_long_ptr lResult = 0;

		COSWindow* pWindow = p_tWndHandleMap->FindHandle( hwnd );

		if( pWindow != 0 )
		{
			lResult = pWindow->MsgProc( hwnd, uMsg, wParam, lParam );
		}
		else 
		{
			pWindow = p_tWndHandleMap->Pending();
			if( pWindow != 0 )
			{
				p_tWndHandleMap->Add( hwnd, pWindow );
				if( pWindow != 0 && ( pWindow->Handle()->IsNull() ) )
				{
					pWindow->SetHandle( hwnd );
				}
				lResult = pWindow->MsgProc( hwnd, uMsg, wParam, lParam );
			}
			else
			{
                nsCodeQOR::CTLRef< COSWindow > pRef = COSWindow::FromHandle( hwnd );
				lResult = pRef->MsgProc( hwnd, uMsg, wParam, lParam );
			}
		}

		return lResult;			
	}

	//--------------------------------------------------------------------------------
	Cmp_long_ptr COSWindow::MsgFallback( unsigned int message, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
    {
            
		Cmp_long_ptr lResult = 0;
		switch( message )
		{
		case COSWindow::wmPaint:
			{
				//long hr = S_OK;
				//nsWin32::nsGraphics::CPaintDC( hwnd );
			}
			break;
		case COSWindow::wmNCDestroy:
			{	
                //m_View().DestroyWindow( this );
				lResult = DefProc( message, wParam, lParam );//hwnd );//Cmp_long_ptr COSWindow::DefProc( unsigned int Msg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
			}
			break;
		case COSWindow::wmCreate:
			{
                //_QSYS_MSW_WRT_CONT_ERROR(( RUNTIME_ERROR, _TXT( "Failed to create window." ), 0 ));
				lResult = 0;
			}
			break;
		case COSWindow::wmNCCreate:
			{
				lResult = 1;
			}
			break;
		default:
			{
				lResult = DefProc( message, wParam, lParam );//, hwnd );
			}
			break;
		}
        return lResult;
    }

	//--------------------------------------------------------------------------------
	Cmp_long_ptr COSWindow::MsgProc( void* hwnd, unsigned int message, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		Cmp_long_ptr lResult = 0;
 
		bool bProcessed = false;//m_Controller().ProcessMessage( this, hwnd, lResult, message, wParam, lParam );

		if( m_pController )
		{
			bProcessed = m_pController->ProcessMessage( *this, lResult, message, wParam, lParam );
		}

		if( bProcessed == false )
		{
            lResult = MsgFallback( message, wParam, lParam );
		}
		return lResult;
	}

	//--------------------------------------------------------------------------------
	void COSWindow::Create( const TCHAR* lpWindowName, nsWin32::InstanceHandle hInstance, unsigned long dwStyle, unsigned long dwExStyle, int x, int y, int nWidth, int nHeight, CWindowHandle::refType hWndParent, CMenuHandle::refType hMenu )
	{				
		//m_pOSWindow = new nsWin32::nsGUI::COSWindow();
		p_tWndHandleMap->PendingAdd( this );
		//Create( dwExStyle, m_pClass->Name(), lpWindowName, dwStyle, x, y, nWidth, nHeight, hWndParent, hMenu, hInstance, reinterpret_cast< void* >( this ) );
	}

	//--------------------------------------------------------------------------------
    COSWindow::refType COSWindow::FromHandle( void* hwnd )
	{
		bool bTemp = false;
		COSWindow* pWindow = 0;
		if( p_tWndHandleMap == 0 )
		{
			p_tWndHandleMap = new CWindowHandleMap;
		}
		pWindow = p_tWndHandleMap->FindHandle( hwnd );
		if( pWindow == 0 )
		{
			pWindow = new COSWindow( hwnd );
			bTemp = true;
		}

        refType rpWindow( pWindow, bTemp );
		return rpWindow;
	}

	//--------------------------------------------------------------------------------
	void COSWindow::InvalidateClientRect()
	{
		CRectangle ClientRect( 0,0,0,0 );
		GetClientRect( &ClientRect );
		Painting().InvalidateRect( &ClientRect, true );
	}

	//--------------------------------------------------------------------------------
	COSWindow::refType COSWindow::Get( unsigned int uCmd )
	{
		_WINQ_FCONTEXT( "COSWindow::Get" );
		COSWindow* pResult = 0;
		CWindowHandle::refType RefHandle;
		__QOR_PROTECT
		{
			RefHandle->operator = ( m_User32Library.GetWindow( reinterpret_cast< ::HWND >( m_Handle.Use() ), uCmd ) );
			pResult = p_tWndHandleMap->FindHandle( RefHandle );
		}__QOR_ENDPROTECT
		refType Ref( pResult, false );
		return Ref;
	}		

	//--------------------------------------------------------------------------------
	COSWindow::refType COSWindow::GetItem( int nIDItem )
	{
		_WINQ_FCONTEXT( "COSWindow::GetItem" );
		COSWindow* pResult = 0;	
		CWindowHandle::refType RefHandle;
		__QOR_PROTECT
		{
			RefHandle->operator = ( m_User32Library.GetDlgItem( reinterpret_cast< ::HWND >( m_Handle.Use() ), nIDItem ) );
			pResult = p_tWndHandleMap->FindHandle( RefHandle );
		}__QOR_ENDPROTECT
		refType Ref( pResult );
		return Ref;
	}

	//--------------------------------------------------------------------------------
    COSWindowScroll COSWindow::Scroll()
    {
        COSWindowScroll scroll( *this );
        return scroll;
    }

	/*
	//--------------------------------------------------------------------------------
	Cmp_long_ptr COSWindow::DefProc( unsigned int Msg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam, WindowHandle hWnd )
	{
		Cmp_long_ptr lResult = 0;
		lResult = DefProc( Msg, wParam, lParam );
		return lResult;
	}
	*/

	//--------------------------------------------------------------------------------
	COSWindowPainting COSWindow::Painting()
	{
		COSWindowPainting Painting( *this );
		return Painting;
	}

}//nsWin32
