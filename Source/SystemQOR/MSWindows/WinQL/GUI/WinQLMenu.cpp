//WinQLMenu.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: stored in member for later use." )
#include "WinQL/GUI/Menu.h"
#include "WinQL/GUI/Window.h"
__QCMP_WARNING_POP
#include "WinQL/Application/User/WinQLUserobject.h"
#include "WinQAPI/User32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace ::nsWinQAPI;

	__QCMP_DECLARE_PERTHREAD CMenuHandleMap* p_tMenuHandleMap = 0;

	__QOR_IMPLEMENT_OCLASS_LUID( CMenu );

	//--------------------------------------------------------------------------------
	void CMenu::Uninit()
	{
		_WINQ_FCONTEXT( "CMenu::Uninit" );

		CMenuHandleMap* pMap = p_tMenuHandleMap;

		if( pMap && !( m_Handle.IsNull() ) )
		{
			pMap->Remove( m_Handle.Ref() );
		}
	}

	//--------------------------------------------------------------------------------
	void CMenu::Init()
	{
		CMenuHandleMap* pMap = p_tMenuHandleMap;

		if( pMap == 0 )
		{
			pMap = new CMenuHandleMap;
		}

		if( ! ( m_Handle.IsNull() ) )
		{
			pMap->Add( m_Handle.Ref(), this );
		}
		else
		{
			m_iStatus = -1;
		}

		if( p_tMenuHandleMap == 0 )
		{
			p_tMenuHandleMap = pMap;
		}
	}

	//--------------------------------------------------------------------------------
	CMenu::refType CMenu::FromHandle( CMenuHandle::refType hMenu )
	{
		_WINQ_SFCONTEXT( "CMenu::FromHandle" );
		CMenu* pMenu = 0;
		bool bOwningRef = false;
		__QOR_PROTECT
		{
			pMenu = hMenu->Object< CMenu >();

			if( pMenu == 0 && p_tMenuHandleMap != 0 )
			{
				pMenu = p_tMenuHandleMap->FindHandle( hMenu );
			}

			if( pMenu == 0 )
			{
				pMenu = new CMenu( hMenu );
				bOwningRef = true;
			}
		}__QOR_ENDPROTECT

        return refType( pMenu, bOwningRef );
	}

	__QCMP_WARNING_PUSH
	__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: stored in member for later use" )
	//--------------------------------------------------------------------------------
	CMenu::CMenu() : m_User32Library( CUser32::Instance() )
	, m_Handle( this, 0 )
	{
		_WINQ_FCONTEXT( "CMenu::CMenu" );			
		__QOR_PROTECT
		{
			m_iStatus = 0;
			m_Handle = m_User32Library.CreateMenu();
			Init();
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CMenu::CMenu( CMenu const& src ) : m_User32Library( CUser32::Instance() )
	, m_Handle( this, 0 )
	{
		_WINQ_FCONTEXT( "CMenu::CMenu" );
		//TODO: copy construct
		Init();
	}

	//--------------------------------------------------------------------------------
	CMenu& CMenu::operator = ( const CMenu& src )
	{
		_WINQ_FCONTEXT( "CMenu::operator =" );

		m_bOwnsHandle = false;
		m_iStatus = src.m_iStatus;
		m_Handle = ((const_cast< CMenu& >(src)).Handle()->AsHandle().ptr());
		return *this;
	}

	//--------------------------------------------------------------------------------
	CMenu::CMenu( COSWindow& Window ) : m_User32Library( CUser32::Instance() )
	, m_Handle( this, 0 )
	{
		_WINQ_FCONTEXT( "CMenu::CMenu" );
		__QOR_PROTECT
		{
			m_iStatus = 0;
			m_Handle = m_User32Library.GetMenu( reinterpret_cast< ::HWND >( Window.Handle()->Use() ) );
			Init();
			m_bOwnsHandle = false;
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CMenu::CMenu( CWinModule* pModule, const TCHAR* lpMenuName ) : m_User32Library( CUser32::Instance() )
	, m_Handle( this, 0 )
	{
		_WINQ_FCONTEXT( "CMenu::CMenu" );
		__QOR_PROTECT
		{
			m_iStatus = 0;
			m_Handle = m_User32Library.LoadMenu( reinterpret_cast< ::HINSTANCE >( pModule->ModuleHandle().Use() ), lpMenuName );
			Init();
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CMenu::CMenu( const void* lpMenuTemplate ) : m_User32Library( CUser32::Instance() )
	, m_Handle( this, 0 )
	{
		_WINQ_FCONTEXT( "CMenu::CMenu" );
		__QOR_PROTECT
		{
			m_iStatus = 0;
			m_Handle = m_User32Library.LoadMenuIndirect( lpMenuTemplate );
			Init();
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	bool CMenu::Destroy()
	{
		_WINQ_FCONTEXT( "CMenu::Destroy" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.DestroyMenu( reinterpret_cast< ::HMENU >( m_Handle.Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CMenu::Append( unsigned int uFlags, Cmp_uint_ptr uIDNewItem, const TCHAR* lpNewItem )
	{
		_WINQ_FCONTEXT( "CMenu::Append" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.AppendMenu( reinterpret_cast< ::HMENU >( m_Handle.Use() ), uFlags, uIDNewItem, lpNewItem ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CMenu::Delete( unsigned int uPosition, unsigned int uFlags )
	{
		_WINQ_FCONTEXT( "CMenu::Delete" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.DeleteMenu( reinterpret_cast< ::HMENU >( m_Handle.Use() ), uPosition, uFlags ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CMenu::CheckItem( unsigned int uIDCheckItem, unsigned int uCheck )
	{
		_WINQ_FCONTEXT( "CMenu::CheckItem" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = m_User32Library.CheckMenuItem( reinterpret_cast< ::HMENU >( m_Handle.Use() ), uIDCheckItem, uCheck );
		}__QOR_ENDPROTECT
		return dwResult;
	}
		
	//--------------------------------------------------------------------------------
	bool CMenu::CheckRadioItem( unsigned int idFirst, unsigned int idLast, unsigned int idCheck, unsigned int uFlags )
	{
		_WINQ_FCONTEXT( "CMenu::CheckRadioItem" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.CheckMenuRadioItem( reinterpret_cast< ::HMENU >( m_Handle.Use() ), idFirst, idLast, idCheck, uFlags ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CMenu::DrawBar( COSWindow& Window )
	{
		_WINQ_FCONTEXT( "CMenu::DrawBar" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.DrawMenuBar( reinterpret_cast< ::HWND >( Window.Handle()->Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CMenu::EnableItem( unsigned int uIDEnableItem, unsigned int uEnable )
	{
		_WINQ_FCONTEXT( "CMenu::EnableItem" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.EnableMenuItem( reinterpret_cast< ::HMENU >( m_Handle.Use() ), uIDEnableItem, uEnable ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CMenu::End()
	{
		_WINQ_FCONTEXT( "CMenu::End" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.EndMenu() ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CMenu::GetCheckMarkDimensions()
	{
		_WINQ_FCONTEXT( "CMenu::GetCheckMarkDimensions" );
		LONG Result = 0;
		__QOR_PROTECT
		{
			Result = m_User32Library.GetMenuCheckMarkDimensions();
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	unsigned int CMenu::GetDefaultItem( unsigned int fByPos, unsigned int gmdiFlags )
	{
		_WINQ_FCONTEXT( "CMenu::GetDefaultItem" );
		UINT uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = m_User32Library.GetMenuDefaultItem( reinterpret_cast< ::HMENU >( m_Handle.Use() ), fByPos, gmdiFlags );
		}__QOR_ENDPROTECT
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	bool CMenu::GetInfo( const nsWin32::MENUINFO* lpcmi )
	{
		_WINQ_FCONTEXT( "CMenu::GetInfo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.GetMenuInfo( reinterpret_cast< ::HMENU >( m_Handle.Use() ), reinterpret_cast< ::LPCMENUINFO >( lpcmi ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CMenu::GetItemCount()
	{
		_WINQ_FCONTEXT( "CMenu::GetItemCount" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_User32Library.GetMenuItemCount( reinterpret_cast< ::HMENU >( m_Handle.Use() ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	unsigned int CMenu::GetItemID( int nPos )
	{
		_WINQ_FCONTEXT( "CMenu::GetItemID" );
		UINT uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = m_User32Library.GetMenuItemID( reinterpret_cast< ::HMENU >( m_Handle.Use() ), nPos );
		}__QOR_ENDPROTECT
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	bool CMenu::GetItemInfo( unsigned int uItem, bool fByPosition, nsWin32::LPMENUITEMINFO lpmii )
	{
		_WINQ_FCONTEXT( "CMenu::GetItemInfo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.GetMenuItemInfo( reinterpret_cast< ::HMENU >( m_Handle.Use() ), uItem, fByPosition, reinterpret_cast< ::LPMENUITEMINFO >( lpmii ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CMenu::GetItemRect( COSWindow& Wnd, unsigned int uItem, nsWin32::LPRECT lprcItem )
	{
		_WINQ_FCONTEXT( "CMenu::GetItemRect" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.GetMenuItemRect( reinterpret_cast< ::HWND >( Wnd.Handle()->Use() ), reinterpret_cast< ::HMENU >( m_Handle.Use() ), uItem, reinterpret_cast< ::LPRECT >( lprcItem ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned int CMenu::GetState( unsigned int uId, unsigned int uFlags )
	{
		_WINQ_FCONTEXT( "CMenu::GetState" );
		UINT uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = m_User32Library.GetMenuState( reinterpret_cast< ::HMENU >( m_Handle.Use() ), uId, uFlags );
		}__QOR_ENDPROTECT
		return uiResult;
	}
		
	//--------------------------------------------------------------------------------
	int CMenu::GetString( unsigned int uIDItem, CTString& String, int nMaxCount, unsigned int uFlag )
	{
		_WINQ_FCONTEXT( "CMenu::GetString" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_User32Library.GetMenuString( reinterpret_cast< ::HMENU >( m_Handle.Use() ), uIDItem, String.GetBufferSetLength( static_cast< unsigned short >( nMaxCount + 1 ) ), nMaxCount, uFlag );
			String.ValidateBuffer( static_cast< unsigned short >( iResult ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	CMenu::refType CMenu::GetSubMenu( int nPos )
	{
		_WINQ_FCONTEXT( "CMenu::GetSubMenu" );
		__QOR_PROTECT
		{
			return CMenu::FromHandle( CMenuHandle( 0, (void*)( m_User32Library.GetSubMenu( reinterpret_cast< ::HMENU >( m_Handle.Use() ), nPos ) ) ).Ref() );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	bool CMenu::HiliteItem( COSWindow& Wnd, unsigned int uItemHilite, unsigned int uHilite )
	{
		_WINQ_FCONTEXT( "CMenu::HiliteItem" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.HiliteMenuItem( reinterpret_cast< ::HWND >( Wnd.Handle()->Use() ), reinterpret_cast< ::HMENU >( m_Handle.Use() ), uItemHilite, uHilite ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CMenu::Insert( unsigned int uPosition, unsigned int uFlags, void* uIDNewItem, const TCHAR* lpNewItem )
	{
		_WINQ_FCONTEXT( "CMenu::Insert" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.InsertMenu( reinterpret_cast< ::HMENU >( m_Handle.Use() ), uPosition, uFlags, uIDNewItem, lpNewItem ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CMenu::InsertItem( unsigned int uItem, bool fByPosition, nsWin32::MENUITEMINFO const* lpmii )
	{
		_WINQ_FCONTEXT( "CMenu::InsertItem" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.InsertMenuItem( reinterpret_cast< ::HMENU >( m_Handle.Use() ), uItem, fByPosition, reinterpret_cast< ::LPCMENUITEMINFO >( lpmii ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CMenu::IsMenu()
	{	
		_WINQ_FCONTEXT( "CMenu::IsMenu" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.IsMenu( reinterpret_cast< ::HMENU >( m_Handle.Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CMenu::ItemFromPoint( COSWindow& Wnd, nsWin32::POINT ptScreen )
	{
		_WINQ_FCONTEXT( "CMenu::ItemFromPoint" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_User32Library.MenuItemFromPoint( reinterpret_cast< ::HWND >( Wnd.Handle()->Use() ), reinterpret_cast< ::HMENU >( m_Handle.Use() ), *(reinterpret_cast< ::POINT* >( &ptScreen ) ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	bool CMenu::Modify( unsigned int uPosition, unsigned int uFlags, void* uIDNewItem, const TCHAR* lpNewItem )
	{
		_WINQ_FCONTEXT( "CMenu::Modify" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.ModifyMenu( reinterpret_cast< ::HMENU >( m_Handle.Use() ), uPosition, uFlags, uIDNewItem, lpNewItem ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CMenu::Remove( unsigned int uPosition, unsigned int uFlags )
	{
		_WINQ_FCONTEXT( "CMenu::Remove" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.RemoveMenu( reinterpret_cast< ::HMENU >( m_Handle.Use() ), uPosition, uFlags ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CMenu::Set( COSWindow& Wnd )
	{
		_WINQ_FCONTEXT( "CMenu::Set" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.SetMenu( reinterpret_cast< ::HWND >( Wnd.Handle()->Use() ), reinterpret_cast< ::HMENU >( m_Handle.Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CMenu::SetDefaultItem( unsigned int uItem, unsigned int fByPos )
	{
		_WINQ_FCONTEXT( "CMenu::SetDefaultItem" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.SetMenuDefaultItem( reinterpret_cast< ::HMENU >( m_Handle.Use() ), uItem, fByPos ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CMenu::SetInfo( const nsWin32::MENUINFO* lpcmi )
	{
		_WINQ_FCONTEXT( "CMenu::SetInfo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.SetMenuInfo( reinterpret_cast< ::HMENU >( m_Handle.Use() ), reinterpret_cast< ::LPCMENUINFO >( lpcmi ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CMenu::SetItemBitmaps( unsigned int uPosition, unsigned int uFlags, CBitmap& BitmapUnchecked, CBitmap& BitmapChecked )
	{
		_WINQ_FCONTEXT( "CMenu::SetItemBitmaps" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.SetMenuItemBitmaps( reinterpret_cast< ::HMENU >( m_Handle.Use() ), uPosition, uFlags, reinterpret_cast< ::HBITMAP >( BitmapUnchecked.Handle()->Use() ), reinterpret_cast< ::HBITMAP >( BitmapChecked.Handle()->Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CMenu::SetItemInfo( unsigned int uItem, bool fByPosition, nsWin32::LPMENUITEMINFO lpmii )
	{
		_WINQ_FCONTEXT( "CMenu::SetItemInfo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.SetMenuItemInfo( reinterpret_cast< ::HMENU >( m_Handle.Use() ), uItem, fByPosition, reinterpret_cast< ::LPMENUITEMINFO >( lpmii ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CMenu::SetContextHelpId( unsigned long dwContextHelpId )
	{
		_WINQ_FCONTEXT( "CMenu::SetContextHelpId" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.SetMenuContextHelpId( reinterpret_cast< ::HMENU >( m_Handle.Use() ), dwContextHelpId ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CMenu::GetContextHelpId()
	{
		_WINQ_FCONTEXT( "CMenu::GetContextHelpId" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = m_User32Library.GetMenuContextHelpId( reinterpret_cast< ::HMENU >( m_Handle.Use() ) );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	CUserObject CMenu::Security()
	{
		_WINQ_FCONTEXT( "CMenu::Security" );
		CUserObject Result( m_Handle.AsHandle() );
		return Result;
	}

	//--------------------------------------------------------------------------------
	CMenuHandle::refType CMenu::Handle( void )
	{
		_WINQ_FCONTEXT( "CMenu::Handle()" );
		return m_Handle.Ref();
	}
		
	//--------------------------------------------------------------------------------
	CMenu::~CMenu()
	{
		_WINQ_FCONTEXT( "CMenu::~CMenu" );
		if( m_bOwnsHandle )
		{
			Destroy();
		}
	}

	//--------------------------------------------------------------------------------
    CMenu::refType CMenu::FromWindow( COSWindow& Window )
	{				
		CUser32& Library( CUser32::Instance() );
		CMenuHandle Handle( 0, (void*)( Library.GetMenu( reinterpret_cast< ::HWND >( Window.Handle()->Use() ) ) ) );
		return FromHandle( Handle.Ref() );
	}

	//--------------------------------------------------------------------------------
	//protected

	//--------------------------------------------------------------------------------
	CMenu::CMenu( CMenuHandle::refType hMenu ) : m_User32Library( CUser32::Instance() )
	, m_Handle( this, 0 )
	{
		_WINQ_FCONTEXT( "CMenu::CMenu" );
		Init();
		m_bOwnsHandle = false;
		m_Handle = hMenu->AsHandle().ptr();
	}

	__QCMP_WARNING_POP

	//--Popup Menu--------------------------------------------------------------------

	//--------------------------------------------------------------------------------
	CPopupMenu::CPopupMenu() : CMenu()
	{
		_WINQ_FCONTEXT( "CPopupMenu::CPopupMenu" );
		__QOR_PROTECT
		{
			m_Handle = m_User32Library.CreatePopupMenu();
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CPopupMenu::~CPopupMenu()
	{
		_WINQ_FCONTEXT( "CPopupMenu::~CPopupMenu" );
	}

	//--------------------------------------------------------------------------------
	bool CPopupMenu::Track( unsigned int uFlags, int x, int y, int nReserved, COSWindow& Wnd, COSWindow& prcRect )
	{
		_WINQ_FCONTEXT( "CPopupMenu::Track" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.TrackPopupMenu( reinterpret_cast< ::HMENU >( m_Handle.Use() ), uFlags, x, y, nReserved, reinterpret_cast< ::HWND >( Wnd.Handle()->Use() ), reinterpret_cast< ::HWND >( prcRect.Handle()->Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CPopupMenu::Track( unsigned int fuFlags, int x, int y, COSWindow& Wnd, nsWin32::LPTPMPARAMS lptpm )
	{
		_WINQ_FCONTEXT( "CPopupMenu::Track" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.TrackPopupMenuEx( reinterpret_cast< ::HMENU >( m_Handle.Use() ), fuFlags, x, y, reinterpret_cast< ::HWND >( Wnd.Handle()->Use() ), reinterpret_cast< ::LPTPMPARAMS >( lptpm ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}



	//--System Menu-------------------------------------------------------------------


	//--------------------------------------------------------------------------------
	CSystemMenu::CSystemMenu( COSWindow& Wnd, bool bRevert ) : CMenu( 0 )
	{
		_WINQ_FCONTEXT( "CSystemMenu::CSystemMenu" );
		m_Handle = m_User32Library.GetSystemMenu( reinterpret_cast< ::HWND >( Wnd.Handle()->Use() ), bRevert );
	}

	//--------------------------------------------------------------------------------
	CSystemMenu::~CSystemMenu()
	{
		_WINQ_FCONTEXT( "CSystemMenu::~CSystemMenu" );
	}

}//nsWin32
