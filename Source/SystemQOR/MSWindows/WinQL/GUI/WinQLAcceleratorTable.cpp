//WinQLAcceleratorTable.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: stored in member for later use." )
#include "WinQL/GUI/AcceleratorTable.h"
__QCMP_WARNING_POP
#include "WinQAPI/User32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{

	using namespace ::nsWinQAPI;

	__QCMP_DECLARE_PERTHREAD CAcceleratorHandleMap* p_tAcceleratorTableHandleMap = 0;

	__QOR_IMPLEMENT_OCLASS_LUID( CAcceleratorTable );

	//--------------------------------------------------------------------------------
	void CAcceleratorTable::Uninit()
	{
		_WINQ_FCONTEXT( "CAcceleratorTable::Uninit" );

		CAcceleratorHandleMap* pMap = p_tAcceleratorTableHandleMap;

		if( pMap && !( m_Handle.IsNull() ) )
		{
			pMap->Remove( m_Handle.Ref() );
		}
	}

	//--------------------------------------------------------------------------------
	void CAcceleratorTable::Init()
	{
		_WINQ_FCONTEXT( "CAcceleratorTable::Init" );

		CAcceleratorHandleMap* pMap = p_tAcceleratorTableHandleMap;

		if( pMap == 0 )
		{
			pMap = new CAcceleratorHandleMap;
		}

		if( !( m_Handle.IsNull() ) )
		{
			pMap->Add( m_Handle.Ref(), this );
		}
		else
		{
			m_iStatus = -1;
		}

		if( p_tAcceleratorTableHandleMap == 0 )
		{
			p_tAcceleratorTableHandleMap = pMap;
		}
	}

	//--------------------------------------------------------------------------------
	CAcceleratorTable::refType CAcceleratorTable::FromHandle( CAccelHandle::refType hAccel )
	{
		_WINQ_SFCONTEXT( "CAcceleratorTable::FromHandle" );
		CAcceleratorTable* pAccelTable = 0;
		bool bOwningRef = false;
		__QOR_PROTECT
		{			
			pAccelTable = hAccel->Object< CAcceleratorTable >();
			if( pAccelTable == 0 && p_tAcceleratorTableHandleMap != 0 )
			{
				pAccelTable = p_tAcceleratorTableHandleMap->FindHandle( hAccel );
			}

			if( pAccelTable == 0 )
			{
				pAccelTable = new CAcceleratorTable( hAccel );
				bOwningRef = true;
			}
		}__QOR_ENDPROTECT
		return refType( pAccelTable, bOwningRef );
	}

	__QCMP_WARNING_PUSH
	__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: stored in member for later use." )

	//--------------------------------------------------------------------------------
	//Construct an AcceleratorTable for an existing underlying handle
	CAcceleratorTable::CAcceleratorTable( CAccelHandle::refType src ) : m_User32Library( CUser32::Instance() )
	,	m_Handle( this, src->AsHandle().ptr() )
	{
		_WINQ_FCONTEXT( "CAcceleratorTable::CAcceleratorTable" );
		__QOR_PROTECT
		{
			Init();
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CAcceleratorTable::CAcceleratorTable( nsWin32::Accel* lpaccl, int cEntries ) : m_User32Library( CUser32::Instance() )
	,	m_Handle( this, 0 )
	{
		_WINQ_FCONTEXT( "CAcceleratorTable::CAcceleratorTable" );
		__QOR_PROTECT
		{
			m_Handle = m_User32Library.CreateAcceleratorTable( reinterpret_cast< ::LPACCEL >( lpaccl ), cEntries );
			Init();
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CAcceleratorTable::CAcceleratorTable( nsWin32::InstanceHandle hInstance, const TCHAR* lpTableName ) : m_User32Library( CUser32::Instance() )
	,	m_Handle( this, 0 )
	{
		_WINQ_FCONTEXT( "CAcceleratorTable::CAcceleratorTable" );			
		__QOR_PROTECT
		{
			m_Handle = m_User32Library.LoadAccelerators( reinterpret_cast< HINSTANCE >( hInstance ), lpTableName );
			Init();
		}__QOR_ENDPROTECT
	}
	__QCMP_WARNING_POP

	//--------------------------------------------------------------------------------
	CAcceleratorTable::refType CAcceleratorTable::Create( nsCodeQOR::CTArray< nsWin32::Accel >& aAccel ) 
	{
		_WINQ_SFCONTEXT( "CAcceleratorTable::Create" );
		return refType( new CAcceleratorTable( aAccel.GetAddressOfData(), aAccel.Size() ), true );
	}

	//--------------------------------------------------------------------------------
	CAcceleratorTable::refType CAcceleratorTable::Load( nsWin32::InstanceHandle hInstance, const TCHAR* lpTableName )
	{
		_WINQ_SFCONTEXT( "CAcceleratorTable::Load" );
		return refType( new CAcceleratorTable( hInstance, lpTableName ), true );
	}

	//--------------------------------------------------------------------------------
	CAcceleratorTable::~CAcceleratorTable()
	{
		_WINQ_FCONTEXT( "CAcceleratorTable::~CAcceleratorTable" );
		__QOR_PROTECT
		{
			Uninit();
			m_iStatus = m_User32Library.DestroyAcceleratorTable( reinterpret_cast< ::HACCEL >( m_Handle.Use() ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	//Copy table to an explicit array of entries
	//TODO: use a CTArray and determine the required size by making a pre-call with no destination
	int CAcceleratorTable::Copy( nsWin32::Accel* lpAccelDst, int cAccelEntries )
	{
		_WINQ_FCONTEXT( "CAcceleratorTable::Copy" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_User32Library.CopyAcceleratorTable( reinterpret_cast< HACCEL >( m_Handle.Use() ), reinterpret_cast< ::LPACCEL >( lpAccelDst ), cAccelEntries );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CAcceleratorTable::Translate( COSWindow::refType Wnd, nsWin32::MSG* lpMsg )
	{
		_WINQ_FCONTEXT( "CAcceleratorTable::Translate" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_User32Library.TranslateAccelerator( reinterpret_cast< HWND >( Wnd->Handle()->Use() ), reinterpret_cast< HACCEL >( m_Handle.Use() ), reinterpret_cast< ::LPMSG >( lpMsg ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	CUserObject CAcceleratorTable::Security()
	{
		_WINQ_FCONTEXT( "CAcceleratorTable::Security" );
		CUserObject Result( m_Handle.AsHandle() );
		return Result;
	}

	//--------------------------------------------------------------------------------
	CRAIISessionHandle::refType CAcceleratorTable::Handle( void )
	{
		_WINQ_FCONTEXT( "CAcceleratorTable::Handle" );
		return m_Handle.Ref();
	}

	//--------------------------------------------------------------------------------
	int CAcceleratorTable::Status()
	{
		_WINQ_FCONTEXT( "CAcceleratorTable::Status" );
		return m_iStatus;
	}

}//nsWin32
