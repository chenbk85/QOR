//WinQLBufferPaintSession.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usafe: stored in member for later use" );
#include "WinQL/GUI/Theme/BufferPaintSession.h"
__QCMP_WARNING_POP
#include "WinQAPI/User32.h"
#include "WinQAPI/UxTheme.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{

	using namespace ::nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CBufferedPaintThreadSession );

	//--------------------------------------------------------------------------------
	CBufferedPaintThreadSession::CBufferedPaintThreadSession() : m_UXTheme( CUXTheme::Instance() )
	{
		_WINQ_FCONTEXT( "CBufferedPaintThreadSession::CBufferedPaintThreadSession" );
		__QOR_PROTECT
		{
			m_lStatus = m_UXTheme.BufferedPaintInit();
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CBufferedPaintThreadSession::~CBufferedPaintThreadSession()
	{
		_WINQ_FCONTEXT( "CBufferedPaintThreadSession::~CBufferedPaintThreadSession" );
		m_UXTheme.BufferedPaintUnInit();
	}

	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CBufferedPaintSession );

__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usafe: stored in member for later use" );
	//--------------------------------------------------------------------------------
	CBufferedPaintSession::CBufferedPaintSession( CBufferedPaintThreadSession& ThreadSession, CDeviceContext::refType dcTarget, const nsWin32::RECT* prcTarget, nsWin32::BP_BUFFERFORMAT dwFormat, nsWin32::BP_PAINTPARAMS* pPaintParams, CDeviceContext::refType dc ) : m_ThreadSession( ThreadSession ), m_UXTheme( CUXTheme::Instance() )
	,	m_Handle( this, 0 )
	{
		_WINQ_FCONTEXT( "CBufferedPaintSession::CBufferedPaintSession" );
		m_bCopyBuffer = true;
		void* phdc = 0;
		m_Handle = ( m_UXTheme.BeginBufferedPaint( reinterpret_cast< HDC >( dcTarget->Handle()->Use() ), reinterpret_cast< const ::RECT* >( prcTarget ), static_cast< ::BP_BUFFERFORMAT >( dwFormat ), reinterpret_cast< ::BP_PAINTPARAMS* >( pPaintParams ), reinterpret_cast< HDC* >( &phdc ) ) );
		dc = CDeviceContext::FromHandle( CDCHandle( 0, phdc ).Ref() );
	}
__QCMP_WARNING_POP

	//--------------------------------------------------------------------------------
	CBufferedPaintSession::~CBufferedPaintSession()
	{
		_WINQ_FCONTEXT( "CBufferedPaintSession::~CBufferedPaintSession" );
		m_UXTheme.EndBufferedPaint( reinterpret_cast< ::HPAINTBUFFER >( m_Handle.Use() ), m_bCopyBuffer ? 1 : 0 );
	}

	//--------------------------------------------------------------------------------
	void CBufferedPaintSession::SetCopyOnClose( bool bCopy )
	{
		m_bCopyBuffer = bCopy;
	}

	//--------------------------------------------------------------------------------
	long CBufferedPaintSession::Clear( const nsWin32::RECT* prc )
	{
		_WINQ_FCONTEXT( "CBufferedPaintSession::Clear" );
		return m_UXTheme.BufferedPaintClear( reinterpret_cast< ::HPAINTBUFFER >( m_Handle.Use() ), reinterpret_cast< const ::RECT* >( prc ) );
	}

	//--------------------------------------------------------------------------------
	long CBufferedPaintSession::SetAlpha( const RECT* prc, unsigned char alpha )
	{
		_WINQ_FCONTEXT( "CBufferedPaintSession::SetAlpha" );
		return m_UXTheme.BufferedPaintSetAlpha( reinterpret_cast< ::HPAINTBUFFER >( m_Handle.Use() ), reinterpret_cast< const ::RECT* >( prc ), alpha );
	}

	//--------------------------------------------------------------------------------
	long CBufferedPaintSession::GetBits( nsWin32::RGBQUAD** ppbBuffer, int* pcxRow )
	{
		_WINQ_FCONTEXT( "CBufferedPaintSession::GetBits" );
		return m_UXTheme.GetBufferedPaintBits( reinterpret_cast< ::HPAINTBUFFER >( m_Handle.Use() ), 
			reinterpret_cast< ::RGBQUAD** >( ppbBuffer ), pcxRow );
	}

	//--------------------------------------------------------------------------------
	CDeviceContext::refType CBufferedPaintSession::GetDC()
	{
		_WINQ_FCONTEXT( "CBufferedPaintSession::GetDC" );
		return CDeviceContext::FromHandle( CDCHandle( 0, (void*)( m_UXTheme.GetBufferedPaintDC( reinterpret_cast< ::HPAINTBUFFER >( m_Handle.Use() ) ) ) ).Ref() );
	}

	//--------------------------------------------------------------------------------
	CDeviceContext::refType CBufferedPaintSession::GetTargetDC()
	{
		_WINQ_FCONTEXT( "CBufferedPaintSession::GetTargetDC" );
		return CDeviceContext::FromHandle( CDCHandle( 0, (void*)( m_UXTheme.GetBufferedPaintTargetDC( reinterpret_cast< ::HPAINTBUFFER >( m_Handle.Use() ) ) ) ).Ref() );
	}

	//--------------------------------------------------------------------------------
	long CBufferedPaintSession::GetTargetRect( nsWin32::RECT* prc )
	{
		_WINQ_FCONTEXT( "CBufferedPaintSession::GetTargetRect" );
		return m_UXTheme.GetBufferedPaintTargetRect( 
			reinterpret_cast< ::HPAINTBUFFER >( m_Handle.Use() ), 
			reinterpret_cast< ::RECT* >( prc ) );
	}

}//nsWin32
