//WinQLMessageHandler.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: stored in member for later use." )
#include "WinQL/GUI/MessageHandler.h"
__QCMP_WARNING_POP
#include "WinQAPI/User32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace ::nsWinQAPI;

	int Get_X_LParam( Cmp_long_ptr lp ){ return ( (int)(short)LoWord( lp ) ); }
	int Get_Y_LParam( Cmp_long_ptr lp ){ return ( (int)(short)HiWord( lp ) ); }

	__QOR_IMPLEMENT_OCLASS_LUID( CMessageHandler );

	//--------------------------------------------------------------------------------
	CMessageHandler::CMessageHandler() : m_User32Library( CUser32::Instance() )
	{
		_WINQ_FCONTEXT( "CMessageHandler::CMessageHandler" );
	}

	//--------------------------------------------------------------------------------
	CMessageHandler::CMessageHandler( const CMessageHandler& src ) : m_User32Library( CUser32::Instance() )
	{
		_WINQ_FCONTEXT( "CMessageHandler::CMessageHandler" );
	}

	//--------------------------------------------------------------------------------
	CMessageHandler::~CMessageHandler()
	{
		_WINQ_FCONTEXT( "CMessageHandler::~CMessageHandler" );
	}

	//--------------------------------------------------------------------------------
	CMessageHandler& CMessageHandler::operator = ( const CMessageHandler& src )
	{
		_WINQ_FCONTEXT( "CMessageHandler::operator=" );
		return *this;
	}

	//--------------------------------------------------------------------------------
	bool CMessageHandler::RouteMessage()
	{
		MSG Message;
		if ( !Get( &Message, 0, 0, 0 ) )
		{
			return false;//Quit message received
		}	

		Translate( &Message );
		Dispatch( &Message );

		return true;
	}

	//--------------------------------------------------------------------------------
	int CMessageHandler::MessageLoop()
	{			
		MSG Message;
		bool bIdle = true;//For tracking the idle time state
		long lIdleCount = 0;

		//Acquire and dispatch messages until a WM_QUIT message is received.
		do
		{
			//Check to see if we can do idle work
			while( bIdle && ! Peek( &Message, 0, 0, 0, CMessageHandler::PMNoRemove ) )
			{
				// call OnIdle while in Idle state
				if ( !OnIdle( lIdleCount++ ) )
				{
					bIdle = false;
				}
			}

			//Pump messages while available
			do
			{
				// pump message, but quit on WM_QUIT
				if ( !RouteMessage() )
				{
					return 1;
				}

				if( IsIdleMessage( &Message ) )
				{
					bIdle = true;
					lIdleCount = 0;
				}

			} while ( Peek( &Message, 0, 0, 0, CMessageHandler::PMNoRemove ) );

			bIdle = true;
			lIdleCount = 0;

__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_COND_EXPR_IS_CONST, "Intentional constant: do{}while( true );." )
		}while( true );
__QCMP_WARNING_POP
	}

	//--------------------------------------------------------------------------------
	long CMessageHandler::BroadcastSystemMessageT( unsigned long dwFlags, unsigned long* lpdwRecipients, unsigned int uiMessage, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CMessageHandler::BroadcastSystemMessage" );
		long lResult = 0;
		__QOR_PROTECT
		{
			lResult = m_User32Library.BroadcastSystemMessage( dwFlags, lpdwRecipients, uiMessage, wParam, lParam );
		}__QOR_ENDPROTECT
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CMessageHandler::BroadcastSystemMessageT( unsigned long dwFlags, unsigned long* lpdwRecipients, unsigned int uiMessage, Cmp_uint_ptr wParam, Cmp_long_ptr lParam, nsWin32::PBSMINFO pBSMInfo )
	{
		_WINQ_FCONTEXT( "CMessageHandler::BroadcastSystemMessage" );
		long lResult = 0;
		__QOR_PROTECT
		{
			lResult = m_User32Library.BroadcastSystemMessageEx( dwFlags, lpdwRecipients, uiMessage, wParam, lParam, reinterpret_cast< ::PBSMINFO >( pBSMInfo ) );
		}__QOR_ENDPROTECT
		return lResult;
	}

	//--------------------------------------------------------------------------------
	Cmp_long_ptr CMessageHandler::Dispatch( const nsWin32::MSG* lpmsg )
	{
		_WINQ_FCONTEXT( "CMessageHandler::Dispatch" );
		LRESULT Result = 0;
		__QOR_PROTECT
		{
			m_User32Library.DispatchMessage( reinterpret_cast< const ::MSG* >( lpmsg ) );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	bool CMessageHandler::GetInputState()
	{
		_WINQ_FCONTEXT( "CMessageHandler::GetInputState" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.GetInputState() ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CMessageHandler::Get( nsWin32::LPMSG lpMsg, void* hwnd, unsigned int wMsgFilterMin, unsigned int wMsgFilterMax )
	{
		_WINQ_FCONTEXT( "CMessageHandler::Get" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.GetMessage( reinterpret_cast< ::LPMSG >( lpMsg ), reinterpret_cast< ::HWND >( hwnd ), wMsgFilterMin, wMsgFilterMax ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	Cmp_long_ptr CMessageHandler::GetMessageExtraInfo()
	{
		_WINQ_FCONTEXT( "CMessageHandler::GetMessageExtraInfo" );
		LPARAM lResult = 0;
		__QOR_PROTECT
		{
			lResult = m_User32Library.GetMessageExtraInfo();				
		}__QOR_ENDPROTECT
		return lResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CMessageHandler::GetMessagePos()
	{
		_WINQ_FCONTEXT( "CMessageHandler::GetMessagePos" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = m_User32Library.GetMessagePos();
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	long CMessageHandler::GetMessageTime()
	{
		_WINQ_FCONTEXT( "CMessageHandler::GetMessageTime" );
		long Result = 0;
		__QOR_PROTECT
		{
			Result = m_User32Library.GetMessageTime();				
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	unsigned long CMessageHandler::GetQueueStatus( unsigned int flags )
	{
		_WINQ_FCONTEXT( "CMessageHandler::GetQueueStatus" );
		unsigned long dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = m_User32Library.GetQueueStatus( flags );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	bool CMessageHandler::InSend()
	{
		_WINQ_FCONTEXT( "CMessageHandler::InSend" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.InSendMessage() ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CMessageHandler::InSend( void* lpReserved )
	{
		_WINQ_FCONTEXT( "CMessageHandler::InSend" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = m_User32Library.InSendMessageEx( lpReserved );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	bool CMessageHandler::Peek( nsWin32::LPMSG lpMsg, void* hwnd, unsigned int wMsgFilterMin, unsigned int wMsgFilterMax, unsigned int wRemoveMsg )
	{
		_WINQ_FCONTEXT( "CMessageHandler::Peek" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.PeekMessage( reinterpret_cast< ::LPMSG >( lpMsg ), reinterpret_cast< ::HWND >( hwnd ), wMsgFilterMin, wMsgFilterMax, wRemoveMsg ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CMessageHandler::Post( COSWindow::refType Wnd, unsigned int Msg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CMessageHandler::Post" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.PostMessage( reinterpret_cast< ::HWND >( Wnd->Handle()->Use() ), Msg, wParam, lParam ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CMessageHandler::PostQuit( int nExitCode )
	{
		_WINQ_FCONTEXT( "CMessageHandler::PostQuit" );
		__QOR_PROTECT
		{
			m_User32Library.PostQuitMessage( nExitCode );				
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	bool CMessageHandler::PostToThread( unsigned long idThread, unsigned int Msg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CMessageHandler::PostToThread" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.PostThreadMessage( idThread, Msg, wParam, lParam ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned int CMessageHandler::RegisterWindowMessageT( const TCHAR* lpString )
	{
		_WINQ_FCONTEXT( "CMessageHandler::RegisterWindowMessage" );
		UINT uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = m_User32Library.RegisterWindowMessage( lpString );
		}__QOR_ENDPROTECT
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	bool CMessageHandler::Reply( Cmp_long_ptr lResult )
	{
		_WINQ_FCONTEXT( "CMessageHandler::Reply" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.ReplyMessage( lResult ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CMessageHandler::SendWithCallback( COSWindow::refType Wnd, unsigned int Msg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam, nsWin32::SENDASYNCPROC lpCallBack, Cmp_ulong_ptr dwData )
	{
		_WINQ_FCONTEXT( "CMessageHandler::SendWithCallback" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.SendMessageCallback( reinterpret_cast< ::HWND >( Wnd->Handle()->Use() ), Msg, wParam, lParam, reinterpret_cast< ::SENDASYNCPROC >( lpCallBack ), dwData ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	Cmp_long_ptr CMessageHandler::SendWithTimeout( COSWindow::refType Wnd, unsigned int Msg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam, unsigned int fuFlags, unsigned int uTimeout, Cmp_ulong_ptr* lpdwResult )
	{
		_WINQ_FCONTEXT( "CMessageHandler::SendWithTimeout" );
		Cmp_long_ptr Result = 0;
		__QOR_PROTECT
		{
			Result = m_User32Library.SendMessageTimeout( reinterpret_cast< ::HWND >( Wnd->Handle()->Use() ), Msg, wParam, lParam, fuFlags, uTimeout, lpdwResult );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	Cmp_long_ptr CMessageHandler::Send( COSWindow::refType Wnd, unsigned int Msg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CMessageHandler::Send" );
		Cmp_long_ptr Result = 0;
		__QOR_PROTECT
		{
			Result = m_User32Library.SendMessage( reinterpret_cast< ::HWND >( Wnd->Handle()->Use() ), Msg, wParam, lParam );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	bool CMessageHandler::SendNotify( COSWindow::refType Wnd, unsigned int Msg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CMessageHandler::SendNotify" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.SendNotifyMessage( reinterpret_cast< ::HWND >( Wnd->Handle()->Use() ), Msg, wParam, lParam ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	Cmp_long_ptr CMessageHandler::SetMessageExtraInfo( Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CMessageHandler::SetMessageExtraInfo" );
		LPARAM Result = 0;
		__QOR_PROTECT
		{
			Result = m_User32Library.SetMessageExtraInfo( lParam );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	bool CMessageHandler::Translate( const nsWin32::MSG* lpMsg )
	{
		_WINQ_FCONTEXT( "CMessageHandler::Translate" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.TranslateMessage( reinterpret_cast< const ::MSG* >( lpMsg ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CMessageHandler::TranslateMDISysAccel( COSWindow::refType WndClient, nsWin32::LPMSG lpMsg )
	{
		_WINQ_FCONTEXT( "CMessageHandler::TranslateMDISysAccel" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.TranslateMDISysAccel( reinterpret_cast< ::HWND >( WndClient->Handle()->Use() ), reinterpret_cast< ::LPMSG >( lpMsg ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CMessageHandler::IsWow64()
	{
		_WINQ_FCONTEXT( "CMessageHandler::IsWow64" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.IsWow64Message() ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CMessageHandler::Wait()
	{
		_WINQ_FCONTEXT( "CMessageHandler::Wait" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.WaitMessage() ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

}//nsWin32
