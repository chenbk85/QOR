//WinQLMenuModel.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Model for Menus

#include "CompilerQOR.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: this stored in members for later usage" )
#include "WinQL/GUI/VisualModels/MenuModel.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CMenuItemModel );

	//--------------------------------------------------------------------------------
	//default construct
	CMenuItemModel::CMenuItemModel( CModel* pContainer ) : nsMammut::CPropertySet( pContainer )
	,	m_Mask			(	this, _TXT( "Mask" ).str()			,	0						)
	,	m_Type			(	this, _TXT( "Type" ).str()			,	0						)
	,	m_State			(	this, _TXT( "State" ).str()			,	0						)
	,	m_wID			(	this, _TXT( "ID" ).str()				,	0						)
	,	m_SubMenu		(	this, _TXT( "SubMenu" ).str()			,	CMenu::refType()		)
	,	m_BMPChecked	(	this, _TXT( "CheckedImage" ).str()	,	CBitmap::refType()		)
	,	m_BMPUnchecked	(	this, _TXT( "Unchecked" ).str()		,	CBitmap::refType()		)
	,	m_ItemData		(	this, _TXT( "ItemData" ).str()		,	0						)
	,	m_TypeData		(	this, _TXT( "TypeData" ).str()		,	0						)
	,	m_cch			(	this, _TXT( "CharCount" ).str()		,	0						)
	,	m_BMPItem		(	this, _TXT( "ItemImage" ).str()		,	CBitmap::refType()		)
	{
	}

	//--------------------------------------------------------------------------------
	//copy construct
	CMenuItemModel::CMenuItemModel( const CMenuItemModel& src ) : nsMammut::CPropertySet( src )
	,	m_Mask			( this, src.m_Mask			 )
	,	m_Type			( this, src.m_Type			 )
	,	m_State			( this, src.m_State			 )
	,	m_wID			( this, src.m_wID			 )
	,	m_SubMenu		( this, src.m_SubMenu		 )
	,	m_BMPChecked	( this, src.m_BMPChecked	 )
	,	m_BMPUnchecked	( this, src.m_BMPUnchecked	 )
	,	m_ItemData		( this, src.m_ItemData		 )
	,	m_TypeData		( this, src.m_TypeData		 )
	,	m_cch			( this, src.m_cch			 )
	,	m_BMPItem		( this, src.m_BMPItem		 )
	{
	}

	//--------------------------------------------------------------------------------
	//Construct from a generic PropertySet
	CMenuItemModel::CMenuItemModel( nsMammut::CPropertySet& src ) : CPropertySet( src )
	,	m_Mask			( this, _TXT( "Mask" ).str()			,	src[ _TXT( "Mask" ).str()			] )
	,	m_Type			( this, _TXT( "Type" ).str()			,	src[ _TXT( "Type" ).str()			] )
	,	m_State			( this, _TXT( "State" ).str()			,	src[ _TXT( "State" ).str()		] )
	,	m_wID			( this, _TXT( "ID" ).str()			,	src[ _TXT( "ID" ).str()			] )
	,	m_SubMenu		( this, _TXT( "SubMenu" ).str()		,	src[ _TXT( "SubMenu" ).str()		] )
	,	m_BMPChecked	( this, _TXT( "CheckedImage" ).str()	,	src[ _TXT( "CheckedImage" ).str()	] )
	,	m_BMPUnchecked	( this, _TXT( "Unchecked" ).str()		,	src[ _TXT( "Unchecked" ).str()	] )
	,	m_ItemData		( this, _TXT( "ItemData" ).str()		,	src[ _TXT( "ItemData" ).str()		] )
	,	m_TypeData		( this, _TXT( "TypeData" ).str()		,	src[ _TXT( "TypeData" ).str()		] )
	,	m_cch			( this, _TXT( "CharCount" ).str()		,	src[ _TXT( "CharCount" ).str()	] )
	,	m_BMPItem		( this, _TXT( "ItemImage" ).str()		,	src[ _TXT( "ItemImage" ).str()	] )
	{
	}

	//--------------------------------------------------------------------------------
	//assign from another CMenuItemModel
	CMenuItemModel& CMenuItemModel::operator = ( const CMenuItemModel& src )
	{
		if( &src != this )
		{
			nsMammut::CPropertySet::operator=( src );
			m_Mask			 = src.m_Mask			;
			m_Type			 = src.m_Type			;
			m_State			 = src.m_State			;
			m_wID			 = src.m_wID			;
			m_SubMenu		 = src.m_SubMenu		;
			m_BMPChecked	 = src.m_BMPChecked		;
			m_BMPUnchecked	 = src.m_BMPUnchecked	;
			m_ItemData		 = src.m_ItemData		;
			m_TypeData		 = src.m_TypeData		;
			m_cch			 = src.m_cch			;
			m_BMPItem		 = src.m_BMPItem		;
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	//assign from a generic property set
	CMenuItemModel& CMenuItemModel::operator = ( const nsMammut::CPropertySet& src )
	{
		if( &src != this )
		{
			m_Mask			=	src[ _TXT( "Mask" ).str()			];
			m_Type			=	src[ _TXT( "Type" ).str()			];
			m_State			=	src[ _TXT( "State" ).str()		];
			m_wID			=	src[ _TXT( "ID" ).str()			];
			m_SubMenu		=	src[ _TXT( "SubMenu" ).str()		];
			m_BMPChecked	=	src[ _TXT( "CheckedImage" ).str()	];
			m_BMPUnchecked	=	src[ _TXT( "Unchecked" ).str()	];
			m_ItemData		=	src[ _TXT( "ItemData" ).str()		];
			m_TypeData		=	src[ _TXT( "TypeData" ).str()		];
			m_cch			=	src[ _TXT( "CharCount" ).str()	];
			m_BMPItem		=	src[ _TXT( "ItemImage" ).str()	];
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	CMenuItemModel::~CMenuItemModel()
	{
	}



	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CMenuModel );

	//--------------------------------------------------------------------------------
	CMenuModel::CMenuModel( nsMammut::CModel* pContainer ) : nsMammut::CModel( pContainer )
	,	m_MenuInfo( this )
	,	m_Mask				(	this, _TXT( "Mask" ).str()					,	0						)
	,	m_Style				(	this, _TXT( "Style" ).str()					,	0						)
	,	m_YMax				(	this, _TXT( "YMax" ).str()					,	0						)
	,	m_BackgroundBrush	(	this, _TXT( "BackgroundBrush" ).str()			,	CBrush::refType()		)
	,	m_ContextHelpID		(	this, _TXT( "ContextHelpID" ).str()			,	0						)
	,	m_MenuData			(	this, _TXT( "MenuData" ).str()				,	0						)
	,	m_Name				(	this, _TXT( "Name" ).str()					,	_TXT( "WinQLMenu" ).c_str()		)
	,	m_Module			(	this, _TXT( "Module" ).str()					,	0						)
	,	m_MenuItems( this )
	{
	}

	//--------------------------------------------------------------------------------
	CMenuModel::CMenuModel( const CMenuModel& src ) : nsMammut::CModel( src )
	,	m_MenuInfo( this )
	,	m_Mask				( this, src.m_Mask				)
	,	m_Style				( this, src.m_Style				)
	,	m_YMax				( this, src.m_YMax				)
	,	m_BackgroundBrush	( this, src.m_BackgroundBrush	)
	,	m_ContextHelpID		( this, src.m_ContextHelpID		)
	,	m_MenuData			( this, src.m_MenuData			)
	,	m_Name				( this, src.m_Name				)
	,	m_Module			( this, src.m_Module			)
	,	m_MenuItems( src.m_MenuItems )
	{
	}

	//--------------------------------------------------------------------------------
	CMenuModel::CMenuModel( nsMammut::CModel& src ) : nsMammut::CModel( src )
	,	m_MenuInfo( this )
	,	m_Mask				( this, src.begin()->As< nsMammut::CPropertySet >()[ _TXT( "Mask" ).str()				]->As< nsMammut::CProperty< unsigned long > >() )
	,	m_Style				( this, src.begin()->As< nsMammut::CPropertySet >()[ _TXT( "Style" ).str()			]->As< nsMammut::CProperty< unsigned long > >() )
	,	m_YMax				( this, src.begin()->As< nsMammut::CPropertySet >()[ _TXT( "YMax" ).str()				]->As< nsMammut::CProperty< unsigned int > >() )
	,	m_BackgroundBrush	( this, src.begin()->As< nsMammut::CPropertySet >()[ _TXT( "BackgroundBrush" ).str()	]->As< nsMammut::CProperty< CBrush::refType > >() )
	,	m_ContextHelpID		( this, src.begin()->As< nsMammut::CPropertySet >()[ _TXT( "ContextHelpID" ).str()	]->As< nsMammut::CProperty< unsigned long > >() )
	,	m_MenuData			( this, src.begin()->As< nsMammut::CPropertySet >()[ _TXT( "MenuData" ).str()			]->As< nsMammut::CProperty< Cmp_ulong_ptr > >() )
	,	m_Name				( this, src.begin()->As< nsMammut::CPropertySet >()[ _TXT( "Name" ).str()				]->As< nsMammut::CProperty< const TCHAR* > >() )
	,	m_Module			( this, src.begin()->As< nsMammut::CPropertySet >()[ _TXT( "Module" ).str()			]->As< nsMammut::CProperty< CWinModule* > >() )
	,	m_MenuItems( ( src.begin()++ )->As< nsMammut::CVectorModel< CMenuItemModel > >() )
	{
	}

__QCMP_WARNING_POP

	//--------------------------------------------------------------------------------
	CMenuModel& CMenuModel::operator = ( const CMenuModel& src )
	{
		if( &src != this )
		{
			m_Mask				= src.m_Mask			;
			m_Style				= src.m_Style			;
			m_YMax				= src.m_YMax			;
			m_BackgroundBrush	= src.m_BackgroundBrush	;
			m_ContextHelpID		= src.m_ContextHelpID	;
			m_MenuData			= src.m_MenuData		;			
			m_Name				= src.m_Name			;
			m_Module			= src.m_Module			;
			m_MenuItems			= src.m_MenuItems		;
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	CMenuModel& CMenuModel::operator = ( nsMammut::CModel& src )
	{
		if( &src != this )
		{
			nsMammut::CModel::iterator it = src.begin();
			if( it != src.end() )
			{
				m_Mask				= it->As< nsMammut::CPropertySet >()[ _TXT( "Mask" ).str()			]->As< nsMammut::CProperty< unsigned long > >()	;
				m_Style				= it->As< nsMammut::CPropertySet >()[ _TXT( "Style" ).str()			]->As< nsMammut::CProperty< unsigned long > >()	;
				m_YMax				= it->As< nsMammut::CPropertySet >()[ _TXT( "YMax" ).str()			]->As< nsMammut::CProperty< unsigned int > >()	;
				m_BackgroundBrush	= it->As< nsMammut::CPropertySet >()[ _TXT( "BackgroundBrush" ).str()	]->As< nsMammut::CProperty< CBrush::refType > >()	;
				m_ContextHelpID		= it->As< nsMammut::CPropertySet >()[ _TXT( "ContextHelpID" ).str()	]->As< nsMammut::CProperty< unsigned long > >()	;
				m_MenuData			= it->As< nsMammut::CPropertySet >()[ _TXT( "MenuData" ).str()		]->As< nsMammut::CProperty< Cmp_ulong_ptr > >()	;				
				m_Name				= it->As< nsMammut::CPropertySet >()[ _TXT( "Name" ).str()			]->As< nsMammut::CProperty< const TCHAR* > >()	;	
				m_Module			= it->As< nsMammut::CPropertySet >()[ _TXT( "Module" ).str()			]->As< nsMammut::CProperty< CWinModule* > >()	;
			}
			it++;
			if( it != src.end() )
			{
				m_MenuItems			= it->As< nsMammut::CVectorModel< CMenuItemModel > >();
			}
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
    CMenuModel::~CMenuModel()
	{
	}

}//nsWin32
