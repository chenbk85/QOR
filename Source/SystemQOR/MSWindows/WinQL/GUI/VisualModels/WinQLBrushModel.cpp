//WinQLBrushModel.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Model for Brushes

#include "CompilerQOR.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: this stored in members for later usage" )
#include "WinQL/GUI/VisualModels/BrushModel.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CBrushModel );

	//--------------------------------------------------------------------------------
	//default construct
	CBrushModel::CBrushModel( CModel* pContainer ) : nsMammut::CPropertySet( pContainer )
	,	m_Type			( this, _TXT( "Type" ).str()		, eColourBrush	)
	,	m_uiStyle		( this, _TXT( "Style" ).str()		, 0				)
	,	m_ulColour		( this, _TXT( "Colour" ).str()	, 0				)
	,	m_ulHatch		( this, _TXT( "Hatch" ).str()		, 0				)
	,	m_pPackedDIB	( this, _TXT( "PackedDIB" ).str()	, 0				)
	,	m_BitmapModel	( this, _TXT( "Bitmap" ).str()	)
	{
	}

	//--------------------------------------------------------------------------------
	//copy construct
	CBrushModel::CBrushModel( const CBrushModel& src ) : nsMammut::CPropertySet( src )
	,	m_Type			( this, src.m_Type )
	,	m_uiStyle		( this, src.m_uiStyle )
	,	m_ulColour		( this, src.m_ulColour )
	,	m_ulHatch		( this, src.m_ulHatch )
	,	m_pPackedDIB	( this, src.m_pPackedDIB )
	,	m_BitmapModel	( this, src.m_BitmapModel )
	{
	}

	//--------------------------------------------------------------------------------
	//Construct from a generic PropertySet
	CBrushModel::CBrushModel( nsMammut::CPropertySet& src ) : CPropertySet( src )
	,	m_Type			( this, _TXT( "Type" ).str()		,	src[ _TXT( "Type" ).str()			] )
	,	m_uiStyle		( this, _TXT( "Style" ).str()		,	src[ _TXT( "Style" ).str()		] )
	,	m_ulColour		( this, _TXT( "Colour" ).str()	,	src[ _TXT( "Colour" ).str()		] )	
	,	m_ulHatch		( this, _TXT( "Hatch" ).str()		,	src[ _TXT( "Hatch" ).str()		] )
	,	m_pPackedDIB	( this, _TXT( "PackedDIB" ).str()	,	src[ _TXT( "PackedDIB" ).str()	] )
	,	m_BitmapModel	( this, _TXT( "Bitmap" ).str()	,	src[ _TXT( "Bitmap" ).str()		] )
	{
	}

__QCMP_WARNING_POP

	//--------------------------------------------------------------------------------
	CBrushModel& CBrushModel::operator = ( const CBrushModel& src )
	{
		if( &src != this )
		{
			nsMammut::CPropertySet::operator=( src );
			m_Type = src.m_Type;
			m_uiStyle = src.m_uiStyle;	
			m_ulColour = src.m_ulColour;
			m_ulHatch = src.m_ulHatch;
			m_pPackedDIB = src.m_pPackedDIB;
			m_BitmapModel = src.m_BitmapModel;
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	//assign from a generic property set
	CBrushModel& CBrushModel::operator = ( const nsMammut::CPropertySet& src )
	{
		if( &src != this )
		{
			m_Type			=	src[ _TXT( "Type" ).str()			];
			m_uiStyle		=	src[ _TXT( "Style" ).str()		];
			m_ulColour		=	src[ _TXT( "Colour" ).str()		];
			m_ulHatch		=	src[ _TXT( "Hatch" ).str()		];
			m_pPackedDIB	=	src[ _TXT( "PackedDIB" ).str()	];
			m_BitmapModel	=	src[ _TXT( "Bitmap" ).str()		];
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	CBrushModel::~CBrushModel()
	{
	}

}//nsWin32
