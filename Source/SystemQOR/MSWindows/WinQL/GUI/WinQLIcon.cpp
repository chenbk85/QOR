//WinQLIcon.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: stored in member for later use." )
#include "WinQL/GUI/Icon.h"
#include "WinQL/Application/Graphics/WinQLDeviceContext.h"
__QCMP_WARNING_POP
#include "WinQL/Application/User/WinQLUserObject.h"

#include "WinQAPI/User32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QCMP_DECLARE_PERTHREAD CIconHandleMap* p_tIconHandleMap = 0;

	__QOR_IMPLEMENT_OCLASS_LUID( CIcon );

	//--------------------------------------------------------------------------------
	void CIcon::Uninit()
	{
		CIconHandleMap* pMap = p_tIconHandleMap;

		if( pMap && !( m_Handle.IsNull() ) )
		{
			pMap->Remove( m_Handle.Ref() );
		}
	}

	//--------------------------------------------------------------------------------
	void CIcon::Init()
	{
		CIconHandleMap* pMap = p_tIconHandleMap;

		if( pMap == 0 )
		{
			pMap = new CIconHandleMap;
		}

		if( !( m_Handle.IsNull() ) )
		{
			pMap->Add( m_Handle.Ref(), this );
		}
		else
		{
			m_iStatus = -1;
		}

		if( p_tIconHandleMap == 0 )
		{
			p_tIconHandleMap = pMap;
		}
	}

	//--------------------------------------------------------------------------------
	CIcon::refType CIcon::FromHandle( CIconHandle::refType hIcon )
	{
		_WINQ_SFCONTEXT( "CIcon::FromHandle" );
		CIcon* pIcon = 0;
		bool bOwningRef = false;
		__QOR_PROTECT
		{
			pIcon = hIcon->Object< CIcon >();

			if( pIcon == 0 && p_tIconHandleMap != 0 )
			{
				pIcon = p_tIconHandleMap->FindHandle( hIcon );
			}

			if( pIcon == 0 )
			{
				pIcon = new CIcon( hIcon );
				bOwningRef = true;
			}

		}__QOR_ENDPROTECT
		refType Ref( pIcon, bOwningRef );
		return Ref;
	}

	__QCMP_WARNING_PUSH
	__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: stored in member for later use" )
	//--------------------------------------------------------------------------------
	CIcon::CIcon( CIconHandle::refType hIcon ) : m_User32Library( CUser32::Instance() )
	,	m_Handle( this, hIcon->AsHandle().ptr() )
	{				
		_WINQ_FCONTEXT( "CIcon::CIcon" );
		__QOR_PROTECT
		{
			m_iStatus = 0;
			Init();
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CIcon::CIcon( CWinModule& Module, int nWidth, int nHeight, unsigned char cPlanes, unsigned char cBitsPixel, const unsigned char* lpbANDbits, const unsigned char* lpbXORbits ) : m_User32Library( CUser32::Instance() )
	,	m_Handle( this, 0 )
	{
		_WINQ_FCONTEXT( "CIcon::CIcon" );
		__QOR_PROTECT
		{
			m_iStatus = 0;
			m_Handle = m_User32Library.CreateIcon( (HINSTANCE)(Module.ModuleHandle().Use()), nWidth, nHeight, cPlanes, cBitsPixel, lpbANDbits, lpbXORbits );
			Init();
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CIcon::CIcon( unsigned char* presbits, unsigned long dwResSize, bool fIcon, unsigned long dwVer ) : m_User32Library( CUser32::Instance() )
	,	m_Handle( this, 0 )
	{
		_WINQ_FCONTEXT( "CIcon::CIcon" );
		__QOR_PROTECT
		{
			m_iStatus = 0;
			m_Handle = m_User32Library.CreateIconFromResource( presbits, dwResSize, fIcon, dwVer );
			Init();
		}__QOR_ENDPROTECT
	}
		
	//--------------------------------------------------------------------------------
	CIcon::CIcon( unsigned char* pbIconBits, unsigned long cbIconBits, bool fIcon, unsigned long dwVersion, int cxDesired, int cyDesired, unsigned int uFlags ) : m_User32Library( CUser32::Instance() )
	,	m_Handle( this, 0 )
	{
		_WINQ_FCONTEXT( "CIcon::CIcon" );
		__QOR_PROTECT
		{
			m_iStatus = 0;
			m_Handle = m_User32Library.CreateIconFromResourceEx( pbIconBits, cbIconBits, fIcon, dwVersion, cxDesired, cyDesired, uFlags );
			Init();
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CIcon::CIcon( nsWin32::ICONINFO& iconinfo ) : m_User32Library( CUser32::Instance() )
	,	m_Handle( this, 0 )
	{
		_WINQ_FCONTEXT( "CIcon::CIcon" );
		__QOR_PROTECT
		{
			m_iStatus = 0;
			m_Handle = m_User32Library.CreateIconIndirect( reinterpret_cast< ::PICONINFO >( &iconinfo ) );
			Init();
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CIcon::CIcon( CWinModule& Module, const TCHAR* lpIconName ) : m_User32Library( CUser32::Instance() )
	,	m_Handle( this, 0 )
	{
		_WINQ_FCONTEXT( "CIcon::CIcon" );
		__QOR_PROTECT
		{
			m_iStatus = 0;
			m_Handle = m_User32Library.LoadIcon( (HINSTANCE)(Module.ModuleHandle().Use()), lpIconName );
			Init();
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CIcon::CIcon( const CIcon& src ) : m_User32Library( CUser32::Instance() )
	,	m_Handle( this, 0 )
	{
		_WINQ_FCONTEXT( "CIcon::CIcon" );
		__QOR_PROTECT
		{
			m_iStatus = src.m_iStatus;
			m_Handle = m_User32Library.CopyIcon( reinterpret_cast< ::HICON >( ( const_cast< CIcon& >( src ) ).Handle()->Use() ) );
			Init();
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CIcon::refType CIcon::Load( CWinModule& Module, const TCHAR* pIconName )
	{
		_WINQ_SFCONTEXT( "CIcon::Load" );
		refType Ref( new CIcon( Module, pIconName ), true );
		return Ref;
	}

	//--------------------------------------------------------------------------------
	CIcon::refType CIcon::CreateIndirect( nsWin32::ICONINFO& iconinfo )
	{
		_WINQ_SFCONTEXT( "CIcon::CreateIndirect" );
		refType Ref( new CIcon( iconinfo ), true );
		return Ref;
	}

	//--------------------------------------------------------------------------------
	CIcon::refType CIcon::CreateFromResourceEx( unsigned char* pbIconBits, unsigned long cbIconBits, bool fIcon, unsigned long dwVersion, int cxDesired, int cyDesired, unsigned int uFlags )
	{
		_WINQ_SFCONTEXT( "CIcon::CreateFromResourceEx" );
		refType Ref( new CIcon( pbIconBits, cbIconBits, fIcon, dwVersion, cxDesired, cyDesired, uFlags ) );
		return Ref;
	}

	//--------------------------------------------------------------------------------
	CIcon::refType CIcon::CreateFromResource( unsigned char* presbits, unsigned long dwResSize, bool fIcon, unsigned long dwVer )
	{
		_WINQ_SFCONTEXT( "CIcon::CreateFromResource" );
		refType Ref( new CIcon( presbits, dwResSize, fIcon, dwVer ) );
		return Ref;
	}

	//--------------------------------------------------------------------------------
	CIcon::refType CIcon::Create( CWinModule& Module, int nWidth, int nHeight, unsigned char cPlanes, unsigned char cBitsPixel, const unsigned char* lpbANDbits, const unsigned char* lpbXORbits )
	{
		_WINQ_SFCONTEXT( "CIcon::Create" );
		refType Ref( new CIcon( Module, nWidth, nHeight, cPlanes, cBitsPixel, lpbANDbits, lpbXORbits ) );
		return Ref;
	}

	//--------------------------------------------------------------------------------
	CIcon::~CIcon()
	{
		_WINQ_FCONTEXT( "CIcon::~CIcon" );
		__QOR_PROTECT
		{
			Uninit();
			m_iStatus = m_User32Library.DestroyIcon( reinterpret_cast< ::HICON >( m_Handle.Use() ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	bool CIcon::Draw( CDeviceContext& dc, int X, int Y )
	{
		_WINQ_FCONTEXT( "CIcon::Draw" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.DrawIcon( reinterpret_cast< ::HDC >( dc.Handle()->Use() ), X, Y, reinterpret_cast< ::HICON >( m_Handle.Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CIcon::Draw( CDeviceContext& dc, int xLeft, int yTop, int cxWidth, int cyWidth, unsigned int istepIfAniCur, CBrush& FlickerFreeDrawBrush, unsigned int diFlags )
	{				
		_WINQ_FCONTEXT( "CIcon::Draw" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.DrawIconEx( reinterpret_cast< ::HDC >( dc.Handle()->Use() ), xLeft, yTop, reinterpret_cast< ::HICON >( m_Handle.Use() ), cxWidth, cyWidth, istepIfAniCur, reinterpret_cast< ::HBRUSH >( FlickerFreeDrawBrush.Handle()->Use() ), diFlags ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CIcon::GetInfo( nsWin32::ICONINFO& iconinfo )
	{
		_WINQ_FCONTEXT( "CIcon::GetInfo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.GetIconInfo( reinterpret_cast< ::HICON >( m_Handle.Use() ), reinterpret_cast< ::PICONINFO >( &iconinfo ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}
		
	//--------------------------------------------------------------------------------
	bool CIcon::GetInfo( nsWin32::ICONINFOEX& iconinfoex )
	{
		_WINQ_FCONTEXT( "CIcon::GetInfo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.GetIconInfoEx( reinterpret_cast< ::HICON >( m_Handle.Use() ), reinterpret_cast< ::PICONINFOEX >( &iconinfoex ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	CUserObject CIcon::Security()
	{
		_WINQ_FCONTEXT( "CIcon::Security" );
		CUserObject Result( m_Handle.AsHandle() );
		return Result;
	}

	//--------------------------------------------------------------------------------
	CIconHandle::refType CIcon::Handle()
	{
		_WINQ_FCONTEXT( "CIcon::Handle" );
		return m_Handle.Ref();
	}

	//--------------------------------------------------------------------------------
	int CIcon::Status()
	{
		_WINQ_FCONTEXT( "CIcon::Status" );
		return m_iStatus;
	}

	//--------------------------------------------------------------------------------
	CIcon::CIcon() : m_Handle( this, 0 ), m_iStatus( -1 ), m_User32Library( CUser32::Instance() )
	{
		_WINQ_FCONTEXT( "CIcon::CIcon" );
	}

	//--Icon Resource Helper----------------------------------------------------------

	__QOR_IMPLEMENT_OCLASS_LUID( CIconResourceHelper );

	//--------------------------------------------------------------------------------
	CIconResourceHelper::CIconResourceHelper() : m_User32Library( CUser32::Instance() )
	{
		_WINQ_FCONTEXT( "CIconResourceHelper::CIconResourceHelper" );
	}

	//--------------------------------------------------------------------------------
	CIconResourceHelper::~CIconResourceHelper()
	{
		_WINQ_FCONTEXT( "CIconResourceHelper::~CIconResourceHelper" );
	}

	//--------------------------------------------------------------------------------
	int CIconResourceHelper::LookupIdFromDirectory( unsigned char* presbits, bool fIcon )
	{
		_WINQ_FCONTEXT( "CIconResourceHelper::LookupIdFromDirectory" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_User32Library.LookupIconIdFromDirectory( presbits, fIcon );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CIconResourceHelper::LookupIdFromDirectory( unsigned char* presbits, bool fIcon, int cxDesired, int cyDesired, unsigned int Flags )
	{
		_WINQ_FCONTEXT( "CIconResourceHelper::LookupIdFromDirectory" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_User32Library.LookupIconIdFromDirectoryEx( presbits, fIcon, cxDesired, cyDesired, Flags );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	unsigned int CIconResourceHelper::Extract( const TCHAR* lpszFile, int nIconIndex, int cxIcon, int cyIcon, unsigned int nIcons, unsigned int flags, nsCodeQOR::CTArray< CIcon::refType > Icons, nsCodeQOR::CTArray< unsigned int > ResourceIds )
	{
		_WINQ_FCONTEXT( "CIconResourceHelper::Extract" );
		UINT uiResult = 0;
		__QOR_PROTECT
		{
			::HICON* phIcons = 0;
			unsigned int* pResourceIds = 0;
			//TODO:
			uiResult = m_User32Library.PrivateExtractIcons( lpszFile, nIconIndex, cxIcon, cyIcon, phIcons, pResourceIds, nIcons, flags );
		}__QOR_ENDPROTECT
		return uiResult;
	}

}//nsWin32
