//MDIFrameClientController.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CompilerQOR.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: stored in member for later use" )
#include "WinQL/GUI/Controllers/MDIFrameClientController.h"
__QCMP_WARNING_POP

//--------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_OCLASS_LUID( CMDIFrameClientController );

	//--------------------------------------------------------------------------------
	CMDIFrameClientController::CMDIFrameClientController()
	{				
		_WINQ_FCONTEXT( "CMDIFrameClientController::CMDIFrameClientController" );
	}

	//--------------------------------------------------------------------------------
	CMDIFrameClientController::~CMDIFrameClientController()
	{
		_WINQ_FCONTEXT( "CMDIFrameClientController::~CMDIFrameClientController" );
	}
/*
    //--------------------------------------------------------------------------------
    CController* CMDIFrameClientController::GetChildController( CWindowView* pChildView )
	{
            return 0;
    }
*/
	//--------------------------------------------------------------------------------
	bool CMDIFrameClientController::ProcessMessage( COSWindow& Window, Cmp_long_ptr& lResult, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CMDIFrameClientController::ProcessMessage" );

		bool bProcessed = ProcessHook( Window, lResult, uMsg, wParam, lParam );

        if( !bProcessed )
        {
			bProcessed = HandleMessage( Window, lResult, uMsg, wParam, lParam );
        }

		return bProcessed;
	}

	//--------------------------------------------------------------------------------
	bool CMDIFrameClientController::HandleMessage( COSWindow& Window, Cmp_long_ptr& lResult, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CMDIFrameClientController::HandleMessage" );

		bool bHandled = false;

		switch ( uMsg )
		{
		case COSWindow::wmMDICreate://An application sends the WM_MDICREATE message to a multiple-document interface (MDI) client window to create an MDI child window. 
			{
				//bHandled = OnMDICreate( pWindow, hWnd, lResult, uMsg, wParam, lParam ); 
			}
			break;

		case COSWindow::wmMDIDestroy://An application sends the WM_MDIDESTROY message to a multiple-document interface (MDI) client window to close an MDI child window.
			{
			}
			break;

		case COSWindow::wmMDIActivate://An application sends the WM_MDIACTIVATE message to a multiple-document interface (MDI) client window to instruct the client window to activate a different MDI child window.
			{
			}
			break;

		case COSWindow::wmMDIRestore://An application sends the WM_MDIRESTORE message to a multiple-document interface (MDI) client window to restore an MDI child window from maximized or minimized size.
			{
			}
			break;

		case COSWindow::wmMDINext://An application sends the WM_MDINEXT message to a multiple-document interface (MDI) client window to activate the next or previous child window.
			{
			}
			break;

		case COSWindow::wmMDIMaximize://An application sends the WM_MDIMAXIMIZE message to a multiple-document interface (MDI) client window to maximize an MDI child window. The system resizes the child window to make its client area fill the client window. The system places the child window's window menu icon in the rightmost position of the frame window's menu bar, and places the child window's restore icon in the leftmost position. The system also appends the title bar text of the child window to that of the frame window.
			{
			}
			break;

		case COSWindow::wmMDITile://An application sends the WM_MDITILE message to a multiple-document interface (MDI) client window to arrange all of its MDI child windows in a tile format.
			{
			}
			break;

		case COSWindow::wmMDICascade://An application sends the WM_MDICASCADE message to a multiple-document interface (MDI) client window to arrange all its child windows in a cascade format.
			{
			}
			break;

		case COSWindow::wmMDIIconArrange://An application sends the WM_MDIICONARRANGE message to a multiple-document interface (MDI) client window to arrange all minimized MDI child windows. It does not affect child windows that are not minimized.
			{
			}
			break;

		case COSWindow::wmMDIGetActive://An application sends the WM_MDIGETACTIVE message to a multiple-document interface (MDI) client window to retrieve the handle to the active MDI child window.
			{
			}
			break;

		};

		return bHandled;
	}

}//nsWin32
