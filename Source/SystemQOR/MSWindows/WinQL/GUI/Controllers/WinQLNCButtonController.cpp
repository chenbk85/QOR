//WinQLNCButtonController.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CompilerQOR.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: stored in member for later use" )
#include "WinQL/GUI/Controllers/NCButtonController.h"
#include "WinQL/GUI/Window.h"
__QCMP_WARNING_POP

//--------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_OCLASS_LUID( CNCButtonController );

	//--------------------------------------------------------------------------------
	CNCButtonController::CNCButtonController()
	{
		_WINQ_FCONTEXT( "CNCButtonController::CNCButtonController" );
	}

	//--------------------------------------------------------------------------------
	CNCButtonController::CNCButtonController( nsMammut::CModel* pModelItem ) : CBaseWindowController( pModelItem )
	{
		_WINQ_FCONTEXT( "CNCButtonController::CNCButtonController" );
	}

	//--------------------------------------------------------------------------------
	CNCButtonController::~CNCButtonController()
	{
		_WINQ_FCONTEXT( "CNCButtonController::~CNCButtonController" );
	}

	//--------------------------------------------------------------------------------
	bool CNCButtonController::ProcessMessage( COSWindow& Window, Cmp_long_ptr& lResult, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		bool bProcessed = ProcessHook( Window, lResult, uMsg, wParam, lParam );

		switch ( uMsg )
		{
		case COSWindow::wmNCCalcSize:
			{
				OnNCCalcSize( Window, lResult, wParam, lParam );
			}
			break;

		case COSWindow::wmNCPaint:
			{
				OnNCPaint( Window, lResult, wParam, lParam );
			}
			break;

		case COSWindow::wmNCHitTest:
			{
				OnNCHitTest( Window, lResult, wParam, lParam );
			}
			break;

		case COSWindow::wmNCMouseMove:
			{
				OnNCMouseMove( Window, lResult, wParam, lParam );					
			}
			break;

		case COSWindow::wmNCLButtonDown:
			{
				OnNCLButtonDown( Window, lResult, wParam, lParam );				
			}
			break;

		case COSWindow::wmNCLButtonUp:
			{
				OnNCLButtonUp( Window, lResult, wParam, lParam );				
			}
			break;

		case COSWindow::wmNCLButtonDblClk:
			{
				OnNCLButtonDblClk( Window, lResult, wParam, lParam );
			}
			break;

		case COSWindow::wmNCRButtonDown:
			{
				OnNCRButtonDown( Window, lResult, wParam, lParam );
			}
			break;

		case COSWindow::wmNCRButtonUp:
			{
				OnNCRButtonUp( Window, lResult, wParam, lParam );
			}
			break;

		case COSWindow::wmNCRButtonDblClk:
			{
				OnNCRButtonDblClk( Window, lResult, wParam, lParam );
			}
			break;

		case COSWindow::wmNCMButtonDown:
			{
				OnNCMButtonDown( Window, lResult, wParam, lParam );
			}
			break;

		case COSWindow::wmNCMButtonUp:
			{
				OnNCMButtonUp( Window, lResult, wParam, lParam );
			}
			break;

		case COSWindow::wmNCMButtonDblClk:
			{
				OnNCMButtonDblClk( Window, lResult, wParam, lParam );
			}
			break;

		case COSWindow::wmSize:
			{
				OnNCSize( Window, lResult, wParam, lParam );					
			}
			break;

		default:
			bProcessed = CBaseWindowController::ProcessMessage( Window, lResult, uMsg, wParam, lParam );
		}			

		return bProcessed;		
	}

	//--------------------------------------------------------------------------------
	void CNCButtonController::OnNCCalcSize( COSWindow& Window, Cmp_long_ptr& lResult, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
	}

	//--------------------------------------------------------------------------------
	void CNCButtonController::OnNCPaint( COSWindow& Window, Cmp_long_ptr& lResult, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
	}

	//--------------------------------------------------------------------------------
	void CNCButtonController::OnNCHitTest( COSWindow& Window, Cmp_long_ptr& lResult, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
	}

	//--------------------------------------------------------------------------------
	void CNCButtonController::OnNCMouseMove( COSWindow& Window, Cmp_long_ptr& lResult, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
	}

	//--------------------------------------------------------------------------------
	void CNCButtonController::OnNCLButtonDown( COSWindow& Window, Cmp_long_ptr& lResult, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
	}

	//--------------------------------------------------------------------------------
	void CNCButtonController::OnNCLButtonUp( COSWindow& Window, Cmp_long_ptr& lResult, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
	}

	//--------------------------------------------------------------------------------
	void CNCButtonController::OnNCLButtonDblClk( COSWindow& Window, Cmp_long_ptr& lResult, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
	}

	//--------------------------------------------------------------------------------
	void CNCButtonController::OnNCRButtonDown( COSWindow& Window, Cmp_long_ptr& lResult, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
	}

	//--------------------------------------------------------------------------------
	void CNCButtonController::OnNCRButtonUp( COSWindow& Window, Cmp_long_ptr& lResult, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
	}

	//--------------------------------------------------------------------------------
	void CNCButtonController::OnNCRButtonDblClk( COSWindow& Window, Cmp_long_ptr& lResult, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
	}

	//--------------------------------------------------------------------------------
	void CNCButtonController::OnNCMButtonDown( COSWindow& Window, Cmp_long_ptr& lResult, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
	}

	//--------------------------------------------------------------------------------
	void CNCButtonController::OnNCMButtonUp( COSWindow& Window, Cmp_long_ptr& lResult, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
	}

	//--------------------------------------------------------------------------------
	void CNCButtonController::OnNCMButtonDblClk( COSWindow& Window, Cmp_long_ptr& lResult, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
	}

	//--------------------------------------------------------------------------------
	void CNCButtonController::OnNCSize( COSWindow& Window, Cmp_long_ptr& lResult, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
	}

}//nsWin32
