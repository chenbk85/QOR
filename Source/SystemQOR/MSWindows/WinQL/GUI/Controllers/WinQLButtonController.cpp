//WinQLButtonController.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CompilerQOR.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: stored in member for later use" )
#include "WinQL/GUI/Controllers/ButtonController.h"
#include "WinQL/GUI/Window.h"
__QCMP_WARNING_POP
#include "WINQL/GUI/Views/WindowView.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_OCLASS_LUID( CButtonController );

	//--------------------------------------------------------------------------------
	CButtonController::CButtonController()
	{
		_WINQ_FCONTEXT( "CButtonController::CButtonController" );
	}

	//--------------------------------------------------------------------------------
	CButtonController::CButtonController( nsMammut::CModel* pModelItem ) : CBaseWindowController( pModelItem )
	{
		_WINQ_FCONTEXT( "CButtonController::CButtonController" );
	}

	//--------------------------------------------------------------------------------
	CButtonController::~CButtonController()
	{
		_WINQ_FCONTEXT( "CButtonController::~CButtonController" );
	}

	//--------------------------------------------------------------------------------
	bool CButtonController::ProcessMessage( COSWindow& Window, Cmp_long_ptr& lResult, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CButtonController::ProcessMessage" );
		bool bProcessed = ProcessHook( Window, lResult, uMsg, wParam, lParam );

		switch ( uMsg )
		{
		case COSWindow::wmCreate:
			{					
				CREATESTRUCT* pCreateStruct = reinterpret_cast< CREATESTRUCT* >( lParam );
				lResult = 0;//COSWindow::DefaultMsgProc( hWnd, uMsg, wParam, lParam );
				//OnCreate( pCreateStruct );					
				bProcessed = true;
			}
			break;

		case COSWindow::wmDestroy:
			{
				//OnDestroy();
				lResult = Window.DefProc( uMsg, wParam, lParam );
				bProcessed = true;
			}
			break;


		case COSWindow::wmActivate:
			{
				lResult = Window.DefProc( uMsg, wParam, lParam );
				unsigned short wState = LoWord( wParam );
				bool bMinimized = HiWord( wParam ) ? true : false;
				//WindowHandle hWnd = reinterpret_cast< WindowHandle >( lParam );
                //nsCodeQOR::CTLRef< COSWindow > rpWindow( COSWindow::FromHandle( hWnd ) );
				//OnActivate( wState, rpWindow, bMinimized );					
				bProcessed = true;
			}
			break;

			case COSWindow::wmSysCommand:
			{
				Window.DefProc( uMsg, wParam, lParam );
				unsigned short wYPos = 0;
				unsigned short wXPos = LoWord( lParam );
				unsigned short wData = HiWord( lParam );
				bool bAcceleratorUsed = ( wData == -1 ) ? true : false;
				bool bMnemonic = ( wData == 0 ) ? true : false;
				if( !bAcceleratorUsed && !bMnemonic )
				{
					wYPos = wData;
				}
				//OnSysCommand( wParam , wYPos, wXPos, bAcceleratorUsed, bMnemonic );
				lResult = 0;
				bProcessed = true;
			}
			break;

			case COSWindow::wmEnable:
			{
				bool bEnable = wParam ? true : false;
				//OnEnable( bEnable );
				lResult = 0;
				bProcessed = true;
			}
			break;

			case COSWindow::wmPaletteChanged:
			{
				Window.DefProc( uMsg, wParam, lParam );
				//WindowHandle hWnd = reinterpret_cast< WindowHandle >( wParam );
                //nsCodeQOR::CTLRef< COSWindow > rpWindow( COSWindow::FromHandle( hWnd ) );
				//OnPaletteChanged( rpWindow );
				bProcessed = true;
			}
			break;

			case COSWindow::wmCommand:
			{
				//WindowHandle hWnd = reinterpret_cast< WindowHandle >( lParam );
				unsigned short wNotify = HiWord( wParam );
				unsigned short wID = LoWord( wParam );
                //nsCodeQOR::CTLRef< COSWindow > rpWindow( COSWindow::FromHandle( hWnd ) );
				//OnCommand( rpWindow, wNotify, wID );
				lResult = 0;
				bProcessed = true;
			}
			break;

			default:
				bProcessed = CBaseWindowController::ProcessMessage( Window, lResult, uMsg, wParam, lParam );
		}			

		return bProcessed;		
	}

	//--------------------------------------------------------------------------------
	/*
	int CButtonController::OnCreate( CREATESTRUCT* pCreateStruct )
	{
		//Well known child windows get created here			
		return 0;
	}

	//--------------------------------------------------------------------------------
	void CButtonController::OnDestroy()
	{
	}

	//--------------------------------------------------------------------------------
	void CButtonController::OnActivate( unsigned short wState, COSWindow* pWndOther, BOOL bMinimized )
	{
	}

	//--------------------------------------------------------------------------------
	void CButtonController::OnEnable( BOOL bEnable )
	{
	}
	*/

}//nsWin32
