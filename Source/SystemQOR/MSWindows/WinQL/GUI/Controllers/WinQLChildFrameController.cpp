//WinQLChildFrameController.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CompilerQOR.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: stored in member for later use" )
#include "WinQL/GUI/Controllers/ChildFrameController.h"
__QCMP_WARNING_POP

//--------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_OCLASS_LUID( CChildFrameController );

	//--------------------------------------------------------------------------------
	CChildFrameController::CChildFrameController()
	{
		_WINQ_FCONTEXT( "CChildFrameController::CChildFrameController" );
	}

	//--------------------------------------------------------------------------------
	CChildFrameController::CChildFrameController( nsMammut::CModel* pModel ) : CBaseWindowController()
	{
		_WINQ_FCONTEXT( "CChildFrameController::CChildFrameController" );
		SetModel( pModel );
	}

	//--------------------------------------------------------------------------------
	CChildFrameController::~CChildFrameController()
	{
		_WINQ_FCONTEXT( "CChildFrameController::~CChildFrameController" );
	}

	//--------------------------------------------------------------------------------
	bool CChildFrameController::ProcessMessage( COSWindow& Window, Cmp_long_ptr& lResult, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CChildFrameController::ProcessMessage" );

		bool bProcessed = ProcessHook( Window, lResult, uMsg, wParam, lParam );

		/*bProcessed = m_NCController().ProcessMessage( pWindow, hWnd, lResult, uMsg, wParam, lParam ) ||
			m_View().ProcessMessage( pWindow, hWnd, lResult, uMsg, wParam, lParam );*/

		if( !bProcessed )
		{
			switch ( uMsg )
			{

			case COSWindow::wmCreate:
				{					
					CREATESTRUCT* pCreateStruct = reinterpret_cast< CREATESTRUCT* >( lParam );
					lResult = 0;//COSWindow::DefaultMsgProc( hWnd, uMsg, wParam, lParam );
					OnCreate( Window, pCreateStruct );					
					bProcessed = true;
				}
				break;

			case COSWindow::wmClose:
				{
					OnClose( Window );
					lResult = 0;
					bProcessed = true;
				}
				break;

			case COSWindow::wmDestroy:
				{
					OnDestroy();
					lResult = Window.DefProc( uMsg, wParam, lParam );
					bProcessed = true;
				}
				break;

			case COSWindow::wmMove:
				{	//The WM_MOVE message is sent after a window has been moved.
					unsigned short wXPos = LoWord( lParam );
					unsigned short wYPos = HiWord( lParam );
					OnMove( Window, wXPos, wYPos );
					lResult = Window.DefProc( uMsg, wParam, lParam );
					bProcessed = true;
				}
				break;

			case COSWindow::wmSize:
				{
				}
				break;

			case COSWindow::wmEnterIdle:
				{
					lResult = Window.DefProc( uMsg, wParam, lParam );
					OnEnterIdle( static_cast< unsigned short >( wParam ), COSWindow::FromHandle( CWindowHandle( 0, (void*)(lParam) ).Ref() ) );
					bProcessed = true;					
				}
				break;

			case COSWindow::wmActivate:
				{
					lResult = Window.DefProc( uMsg, wParam, lParam );
					unsigned short wState = LoWord( wParam );
					bool bMinimized = HiWord( wParam ) ? true : false;
					OnActivate( wState, COSWindow::FromHandle( CWindowHandle( 0, (void*)(lParam) ).Ref() ), bMinimized );					
					bProcessed = true;
				}
				break;

			case COSWindow::wmSysCommand:
				{
					Window.DefProc( uMsg, wParam, lParam );
					unsigned short wYPos = 0;
					unsigned short wXPos = LoWord( lParam );
					unsigned short wData = HiWord( lParam );
					bool bAcceleratorUsed = ( wData == -1 ) ? true : false;
					bool bMnemonic = ( wData == 0 ) ? true : false;
					if( !bAcceleratorUsed && !bMnemonic )
					{
						wYPos = wData;
					}
					OnSysCommand( wParam , wYPos, wXPos, bAcceleratorUsed, bMnemonic );
					lResult = 0;
					bProcessed = true;
				}
				break;

			case COSWindow::wmDropFiles:
				{
					void* hDropInfo = (void*)( wParam );
					OnDropFiles( hDropInfo );
					lResult = 0;
					bProcessed = true;					
				}
				break;

			case COSWindow::wmQueryEndSession:
				{
					bool bLoggingOff = ( lParam & COSWindow::EndSessionLogOff ) > 0 ? true : false;
					lResult = OnQueryEndSession( bLoggingOff ) ? true : false;
					bProcessed = true;
				}
				break;

			case COSWindow::wmEndSession:
				{
					bool bEnd = wParam ? true : false;
					bool bLoggingOff = ( lParam & COSWindow::EndSessionLogOff ) > 0 ? true : false;
					OnEndSession( bEnd, bLoggingOff );
					lResult = 0;
					bProcessed = true;
				}
				break;

			case COSWindow::wmSetCursor:
				{
					unsigned short wHitTest = LoWord( lParam );
					unsigned short wMouseMsg = HiWord( lParam );
					lResult = OnSetCursor( COSWindow::FromHandle( CWindowHandle( 0, (void*)(wParam) ).Ref() ), wHitTest, wMouseMsg ) ? 1 : 0;
					Window.DefProc( uMsg, wParam, lParam );
					bProcessed = true;
				}
				break;

			case COSWindow::wmEnable:
				{
					bool bEnable = wParam ? true : false;
					OnEnable( bEnable );
					lResult = 0;
					bProcessed = true;
				}
				break;

			case COSWindow::wmQueryNewPalette:
				{
					lResult = OnQueryNewPalette() ? 1 : 0;
					Window.DefProc( uMsg, wParam, lParam );
					bProcessed = true;
				}
				break;

			case COSWindow::wmPaletteChanged:
				{
					Window.DefProc( uMsg, wParam, lParam );
					OnPaletteChanged( COSWindow::FromHandle( CWindowHandle( 0, (void*)( wParam ) ).Ref() ) );
					bProcessed = true;
				}
				break;

			case COSWindow::wmCommand:
				{
					unsigned short wNotify = HiWord( wParam );
					unsigned short wID = LoWord( wParam );
					OnCommand( COSWindow::FromHandle( CWindowHandle( 0, (void*)( lParam ) ).Ref() ), wNotify, wID );
					lResult = 0;
					bProcessed = true;
				}
				break;

			default:
				bProcessed = CBaseWindowController::ProcessMessage( Window, lResult, uMsg, wParam, lParam );
			}
		}

		return bProcessed;		
	}

	//--------------------------------------------------------------------------------
	int CChildFrameController::OnCreate( COSWindow& Window, CREATESTRUCT* pCreateStruct )
	{
		_WINQ_FCONTEXT( "CChildFrameController::OnCreate" );
		//Well known child windows get created here			
		return 0;
	}

	//--------------------------------------------------------------------------------
	void CChildFrameController::OnClose( COSWindow& Window )
	{			
		_WINQ_FCONTEXT( "CChildFrameController::OnClose" );
	}

	//--------------------------------------------------------------------------------
	void CChildFrameController::OnDestroy()
	{
		_WINQ_FCONTEXT( "CChildFrameController::OnDestroy" );
	}

	//--------------------------------------------------------------------------------
	void CChildFrameController::OnEnterIdle( unsigned short wWhy, COSWindow::refType Who )
	{
		_WINQ_FCONTEXT( "CChildFrameController::OnEnterIdle" );
	}

	//--------------------------------------------------------------------------------
	void CChildFrameController::OnActivate( unsigned short wState, COSWindow::refType WndOther, bool bMinimized )
	{
		_WINQ_FCONTEXT( "CChildFrameController::OnActivate" );
	}

	//--------------------------------------------------------------------------------
	void CChildFrameController::OnSysCommand( Cmp_uint_ptr nID, unsigned short wYPos, unsigned short wXPos, bool bAcceleratorUsed, bool bMnemonic )
	{
		_WINQ_FCONTEXT( "CChildFrameController::OnSysCommand" );
	}

	//--------------------------------------------------------------------------------
	void CChildFrameController::OnDropFiles( void* hDropInfo )
	{
		_WINQ_FCONTEXT( "CChildFrameController::OnDropFiles" );
	}

	//--------------------------------------------------------------------------------
	bool CChildFrameController::OnQueryEndSession( bool bLoggingOff )
	{
		_WINQ_FCONTEXT( "CChildFrameController::OnQueryEndSession" );
		return true;
	}

	//--------------------------------------------------------------------------------
	void CChildFrameController::OnEndSession( bool bEnd, bool bLoggingOff )
	{
		_WINQ_FCONTEXT( "CChildFrameController::OnEndSession" );
	}

	//--------------------------------------------------------------------------------
	bool CChildFrameController::OnSetCursor( COSWindow::refType Wnd, unsigned short wHitTest, unsigned short wMouseMsg )
	{
		_WINQ_FCONTEXT( "CChildFrameController::OnSetCursor" );
		bool bResult = false;
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CChildFrameController::OnEnable( bool bEnable )
	{
		_WINQ_FCONTEXT( "CChildFrameController::OnEnable" );
	}

	//--------------------------------------------------------------------------------
	bool CChildFrameController::OnQueryNewPalette()
	{
		_WINQ_FCONTEXT( "CChildFrameController::OnQueryNewPalette" );
		return false;
	}

	//--------------------------------------------------------------------------------
	void CChildFrameController::OnPaletteChanged( COSWindow::refType ChangeSource )
	{
		_WINQ_FCONTEXT( "CChildFrameController::OnPaletteChanged" );
	}

	//--------------------------------------------------------------------------------
	void CChildFrameController::OnCommand( COSWindow::refType Window, unsigned short wNotify, unsigned short wID )
	{
		_WINQ_FCONTEXT( "CChildFrameController::OnCommand" );
	}

	//--------------------------------------------------------------------------------
	void CChildFrameController::OnMove( COSWindow& Window, unsigned short wXPos, unsigned short xYPos )
	{
		_WINQ_FCONTEXT( "CChildFrameController::OnMove" );
	}

}//nsWin32
