//WinQLWindowFactory.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CompilerQOR.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: stored in member for later use." )
#include "WinQL/GUI/WindowFactory.h"
#include "WinQL/GUI/Window.h"
#include "WinQL/GUI/Views/WindowView.h"
#include "WinQL/GUI/Views/WindowClassFactory.h"
#include "WinQL/GUI/Views/MenuFactory.h"
__QCMP_WARNING_POP

//------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_OCLASS_LUID( CWindowFactory );

	//--------------------------------------------------------------------------------
	CWindowFactory::CWindowFactory()
	{
		_WINQ_FCONTEXT( "CWindowFactory::CWindowFactory" );
	}

	//--------------------------------------------------------------------------------
	COSWindow* CWindowFactory::Create( CWindowClass* pWndClass, CMenu* pMenu )
	{
		_WINQ_FCONTEXT( "CWindowFactory::Create" );

		return new COSWindow( pWndClass, m_StyleEx, m_Model().m_Name.Value(), m_Style, m_Model().m_Layout.Value().m_XPos, m_Model().m_Layout.Value().m_YPos,
			m_Model().m_Layout.Value().m_Width.Value(), m_Model().m_Layout.Value().m_Height.Value(), 
			m_Model().m_Parent.Value() ? m_Model().m_Parent.Value()->Handle() : CWindowHandle::refType(), pMenu->Handle(), m_Model().m_Module.Value(), m_pUserParam );

	}

	//--------------------------------------------------------------------------------
	CWindowFactory::~CWindowFactory()
	{
		_WINQ_FCONTEXT( "CWindowFactory::~CWindowFactory" );
	}
	/*
	//--------------------------------------------------------------------------------
	CWindowClass* CWindowFactory::GetWindowClass()
	{
		//Get a Window Class Factory to get a WndClass from the WindowClassModel
		CWindowClassFactory* pWndClassFactory = dynamic_cast< CWindowClassFactory* >( ThisModule().ClassReg().GetFactory( m_Model().m_Class.Value()->m_WndClassID ) );
		CWindowClass* pWndClass = 0;
		if( pWndClassFactory )
		{
			pWndClass = reinterpret_cast< CWindowClass* >( pWndClassFactory->Instance( *(m_Model().m_Class.Value() ) ) );
		}
		return pWndClass;
	}

	//--------------------------------------------------------------------------------
	CMenu* CWindowFactory::GetMenu()
	{
		CMenuFactory MenuFactory;
		CMenu* pMenu = reinterpret_cast< CMenu* >( MenuFactory.Instance( *m_Model().m_Menu.Value() ) );
		return pMenu;
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetupStyle()
	{
		SetPopup( m_Model().m_Style.Value()->m_Popup.Value() );
		SetChild( m_Model().m_Style.Value()->m_Child.Value() );
		SetIconic( m_Model().m_Style.Value()->m_Minimize.Value() );
		SetVisible( m_Model().m_Style.Value()->m_Visisble.Value() );
		SetDisabled( m_Model().m_Style.Value()->m_Disabled.Value() );
		SetClipSiblings( m_Model().m_Style.Value()->m_ClipSiblings.Value() );
		SetClipChildren( m_Model().m_Style.Value()->m_ClipChildren.Value() );
		SetMaximized( m_Model().m_Style.Value()->m_Maximize.Value() );
		SetCaption( m_Model().m_Style.Value()->m_Caption.Value() );
		SetBorder( m_Model().m_Style.Value()->m_Border.Value() );
		SetDlgFrame( m_Model().m_Style.Value()->m_DlgFrame.Value() );
		SetVScroll( m_Model().m_Style.Value()->m_VScroll.Value() );
		SetHScroll( m_Model().m_Style.Value()->m_HScroll.Value() );
		SetSysMenu( m_Model().m_Style.Value()->m_SysMenu.Value() );
		SetGroup( m_Model().m_Style.Value()->m_Group.Value() );
		SetTabStop( m_Model().m_Style.Value()->m_TabStop.Value() );
		SetMinimizeBox( m_Model().m_Style.Value()->m_Minimize.Value() );
		SetMaximizeBox( m_Model().m_Style.Value()->m_MaximizeBox.Value() );
		SetOverlapped( m_Model().m_Style.Value()->m_OverlappedWindow.Value() );
		SetLeft( m_Model().m_Style.Value()->m_Left.Value() );
		SetDialogModalFrame( m_Model().m_Style.Value()->m_DlgModalFrame.Value() );
		SetNoParentNotify( m_Model().m_Style.Value()->m_NoParentNotify.Value() );
		SetTopmost( m_Model().m_Style.Value()->m_Topmost.Value() );
		SetAcceptFiles( m_Model().m_Style.Value()->m_AcceptFiles.Value() );
		SetTransparent( m_Model().m_Style.Value()->m_Transparent.Value() );
		SetMDIChild( m_Model().m_Style.Value()->m_MDIChild.Value() );
		SetToolWindow( m_Model().m_Style.Value()->m_ToolWindow.Value() );
		SetWindowEdge( m_Model().m_Style.Value()->m_WindowEdge.Value() );
		SetClientEdge( m_Model().m_Style.Value()->m_ClientEdge.Value() );
		SetContextHelp( m_Model().m_Style.Value()->m_ContextHelp.Value() );
		SetRight( m_Model().m_Style.Value()->m_Right.Value() );
		SetRTLReading( m_Model().m_Style.Value()->m_RTLReading.Value() );
		SetLeftScrollbar( m_Model().m_Style.Value()->m_LeftSrollBar.Value() );
		SetRightScrollbar( m_Model().m_Style.Value()->m_RightScrollBar.Value() );
		SetControlParent( m_Model().m_Style.Value()->m_ControlParent.Value() );
		SetStaticEdge( m_Model().m_Style.Value()->m_StaticEdge.Value() );
		SetAppWindow( m_Model().m_Style.Value()->m_AppWindow.Value() );
		SetLayered( m_Model().m_Style.Value()->m_Layered.Value() );
		SetNoInheritLayout( m_Model().m_Style.Value()->m_NoInheritLayout.Value() );
		SetLayoutRTL( m_Model().m_Style.Value()->m_LayoutRTL.Value() );
		SetComposited( m_Model().m_Style.Value()->m_Composited.Value() );
		SetNoActivate( m_Model().m_Style.Value()->m_NoActivate.Value() );
	}
	*/
	//--------------------------------------------------------------------------------
    void CWindowFactory::SetController( CBaseWindowController* pController )
    {
		_WINQ_FCONTEXT( "CWindowFactory::SetController" );
		m_Controller.Configure( pController );
    }

	/*
	//--------------------------------------------------------------------------------
	void CWindowFactory::SetStyle( unsigned long dwStyle )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetStyle" );
		m_Style = dwStyle;
	}

	//--------------------------------------------------------------------------------
	unsigned long CWindowFactory::GetStyle()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetStyle" );
		return m_Style;
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetStyleBits( unsigned long dwStyle )
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetStyleBits" );
		return ( ( m_Style & dwStyle ) == dwStyle );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetStyleExBits( unsigned long dwStyleEx )
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetStyleBitsEx" );
		return ( ( m_StyleEx & dwStyleEx ) == dwStyleEx );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetStyleBits( unsigned long dwStyle, bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetStyleBits" );
		if( bFlag )
		{
			m_Style |= dwStyle;
		}
		else
		{
			m_Style &= (~dwStyle);
		}
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetStyleExBits( unsigned long dwStyleEx, bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetStyleExBits" );
		if( bFlag )
		{
			m_StyleEx |= dwStyleEx;
		}
		else
		{
			m_StyleEx &= (~dwStyleEx);
		}
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetBorder()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetBorder" );
		return ( m_Style & COSWindow::eWSBorder ) ? true : false;
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetBorder( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetBorder" );
		SetStyleBits( COSWindow::eWSBorder, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetCaption()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetCaption" );
		return GetStyleBits( COSWindow::eWSCaption );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetCaption( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetCaption" );
		SetStyleBits( COSWindow::eWSCaption, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetChild()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetChild" );
		return GetStyleBits( COSWindow::eWSChild );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetChild( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetChild" );
		SetStyleBits( COSWindow::eWSChild, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetClipChildren()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetClipChildren" );
		return GetStyleBits( COSWindow::eWSClipChildren );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetClipChildren( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetClipChildren" );
		SetStyleBits( COSWindow::eWSClipChildren, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetClipSiblings()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetClipSiblings" );
		return GetStyleBits( COSWindow::eWSClipSiblings );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetClipSiblings( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetClipSiblings" );
		SetStyleBits( COSWindow::eWSClipSiblings, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetDisabled()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetDisabled" );
		return GetStyleBits( COSWindow::eWSDisabled );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetDisabled( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetDisabled" );
		SetStyleBits( COSWindow::eWSDisabled, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetDlgFrame()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetDlgFrame" );
		return GetStyleBits( COSWindow::eWSDlgFrame );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetDlgFrame( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetDlgFrame" );
		SetStyleBits( COSWindow::eWSDlgFrame, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetGroup()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetGroup" );
		return GetStyleBits( COSWindow::eWSGroup );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetGroup( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetGroup" );
		SetStyleBits( COSWindow::eWSGroup, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetHScroll()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetHScroll" );
		return GetStyleBits( COSWindow::eWSHScroll );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetHScroll( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetHScroll" );
		SetStyleBits( COSWindow::eWSHScroll, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetVScroll()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetVScroll" );
		return GetStyleBits( COSWindow::eWSVScroll );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetVScroll( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetVScroll" );
		SetStyleBits( COSWindow::eWSVScroll, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetIconic()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetIconic" );
		return GetStyleBits( COSWindow::eWSIconic );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetIconic( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetIconic" );
		SetStyleBits( COSWindow::eWSIconic, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetMaximized()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetMaximized" );
		return GetStyleBits( COSWindow::eWSMaximize );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetMaximized( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetMaximized" );
		SetStyleBits( COSWindow::eWSMaximize, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetMaximizeBox()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetMaximizeBox" );
		return GetStyleBits( COSWindow::eWSMaximizeBox );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetMaximizeBox( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetMaxmizeBox" );
		SetStyleBits( COSWindow::eWSMaximizeBox, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetMinimizeBox()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetMinimizeBox" );
		return GetStyleBits( COSWindow::eWSMinimizeBox );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetMinimizeBox( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetMinimizeBox" );
		SetStyleBits( COSWindow::eWSMinimizeBox, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetOverlapped()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetOverlapped" );
		return GetStyleBits( COSWindow::eWSOverlapped );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetOverlapped( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetOverlapped" );
		SetStyleBits( COSWindow::eWSOverlapped, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetTiledWindow()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetTiledWindow" );
		return GetStyleBits( COSWindow::eWSOverlappedWindow );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetTiledWindow( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetTiledWindow" );
		SetStyleBits( COSWindow::eWSOverlappedWindow, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetPopup()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetPopup" );
		return GetStyleBits( static_cast< unsigned long >( COSWindow::eWSPopup ) );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetPopup( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetPopup" );
		SetStyleBits( static_cast< unsigned long >( COSWindow::eWSPopup ), bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetPopupWindow()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetPopupWindow" );
		return GetStyleBits( static_cast< unsigned long >( COSWindow::eWSPopupWindow ) );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetPopupWindow( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetPopupWindow" );
		SetStyleBits( static_cast< unsigned long >( COSWindow::eWSPopupWindow ), bFlag );
	}
			
	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetSizeBox()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetSizeBox" );
		return GetStyleBits( COSWindow::eWSSizeBox );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetSizeBox( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetSizeBox" );
		SetStyleBits( COSWindow::eWSSizeBox, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetSysMenu()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetSysMenu" );
		return GetStyleBits( COSWindow::eWSSysMenu );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetSysMenu( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetSysMenu" );
		SetStyleBits( COSWindow::eWSSysMenu, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetTabStop()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetTabStop" );
		return GetStyleBits( COSWindow::eWSTabStop );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetTabStop( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetTabStop" );
		SetStyleBits( COSWindow::eWSTabStop, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetVisible()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetVisible" );
		return GetStyleBits( COSWindow::eWSVisible );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetVisible( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetVisible" );
		SetStyleBits( COSWindow::eWSVisible, bFlag );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetStyleEx( unsigned long dwStyleEx )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetStyleEx" );
		m_StyleEx = dwStyleEx;
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetDialogModalFrame()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetDialogModalFrame" );
		return GetStyleExBits( COSWindow::eWSExDlgModalFrame );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetDialogModalFrame( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetDialogModalFrame" );
		SetStyleExBits( COSWindow::eWSExDlgModalFrame, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetNoParentNotify()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetNoParentNotify" );
		return GetStyleExBits( COSWindow::eWSExNoParentNotify );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetNoParentNotify( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetNoParentNotify" );
		SetStyleExBits( COSWindow::eWSExNoParentNotify, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetTopmost()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetTopmost" );
		return GetStyleBits( COSWindow::eWSExTopmost );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetTopmost( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetTopmost" );
		SetStyleExBits( COSWindow::eWSExTopmost, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetAcceptFiles()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetAcceptFiles" );
		return GetStyleExBits( COSWindow::eWSExAcceptFiles );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetAcceptFiles( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetAcceptFiles" );
		SetStyleExBits( COSWindow::eWSExAcceptFiles, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetTransparent()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetTransparent" );
		return GetStyleExBits( COSWindow::eWSExTransparent );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetTransparent( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetTransparent" );
		SetStyleExBits( COSWindow::eWSExTransparent, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetMDIChild()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetMDIChild" );
		return GetStyleExBits( COSWindow::eWSExMDIChild );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetMDIChild( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetMDIChild" );
		SetStyleExBits( COSWindow::eWSExMDIChild, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetToolWindow()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetToolWindow" );
		return GetStyleExBits( COSWindow::eWSExToolWindow );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetToolWindow( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetToolWindow" );
		SetStyleExBits( COSWindow::eWSExToolWindow, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetWindowEdge()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetWindowEdge" );
		return GetStyleExBits( COSWindow::eWSExWindowEdge );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetWindowEdge( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetWindowEdge" );
		SetStyleExBits( COSWindow::eWSExWindowEdge, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetClientEdge()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetClientEdge" );
		return GetStyleExBits( COSWindow::eWSExClientEdge );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetClientEdge( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetClientEdge" );
		SetStyleExBits( COSWindow::eWSExClientEdge, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetContextHelp()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetContextHelp" );
		return GetStyleExBits( COSWindow::eWSExContextHelp );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetContextHelp( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetContextHelp" );
		SetStyleExBits( COSWindow::eWSExContextHelp, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetRight()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetRight" );
		return GetStyleExBits( COSWindow::eWSExRight );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetRight( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetRight" );
		SetStyleExBits( COSWindow::eWSExRight, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetLeft()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetLeft" );
		return GetStyleExBits( COSWindow::eWSExLeft );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetLeft( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetLeft" );
		SetStyleExBits( COSWindow::eWSExLeft, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetRTLReading()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetRTLReading" );
		return GetStyleExBits( COSWindow::eWSExRTLReading );
	}

	//-------------------------------------------------------------------------------
	bool CWindowFactory::GetLTRReading()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetLTRReading" );
		return !GetRTLReading();
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetRTLReading( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetRTLReading" );
		SetStyleExBits( COSWindow::eWSExRTLReading, bFlag );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetLTRReading( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetLTRReading" );
		SetStyleExBits( COSWindow::eWSExRTLReading, !bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetLeftScrollbar()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetLeftScrollbar" );
		return GetStyleBits( COSWindow::eWSExLeftScrollBar );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetRightScrollbar()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetRightScrollbar" );
		return !GetStyleBits( COSWindow::eWSExRightScrollBar );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetLeftScrollbar( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetLeftScrollbar" );
		SetStyleExBits( COSWindow::eWSExLeftScrollBar, bFlag );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetRightScrollbar( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetRightScrollbar" );
		SetStyleExBits( COSWindow::eWSExRightScrollBar, !bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetControlParent()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetControlParent" );
		return !GetStyleExBits( COSWindow::eWSExControlParent );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetControlParent( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetControlParent" );
		SetStyleExBits( COSWindow::eWSExControlParent, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetStaticEdge()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetStaticEdge" );
		return GetStyleExBits( COSWindow::eWSExStaticEdge );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetStaticEdge( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetStaticEdge" );
		SetStyleExBits( COSWindow::eWSExStaticEdge, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetAppWindow()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetAppWindow" );
		return GetStyleExBits( COSWindow::eWSExAppWindow );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetAppWindow( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetAppWindow" );
		SetStyleExBits( COSWindow::eWSExAppWindow, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetOverlappedWindow()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetOverlappedWindow" );
		return GetStyleExBits( COSWindow::eWSExOverlappedWindow );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetOverlappedWindow( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetOverlappedWindow" );
		SetStyleExBits( COSWindow::eWSExOverlappedWindow, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetPaletteWindow()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetPaletteWindow" );
		return GetStyleExBits( COSWindow::eWSExPaletteWindow );
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetPaletteWindow( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetPaletteWindow" );
		SetStyleExBits( COSWindow::eWSExPaletteWindow, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetLayered()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetLayered" );
#if		( _WIN32_WINNT >= 0x0500 )
		return GetStyleExBits( COSWindow::eWSExLayered );
#else
		return false;
#endif//( _WIN32_WINNT >= 0x0500 )
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetLayered( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetLayered" );
#if		( _WIN32_WINNT >= 0x0500 )
		SetStyleExBits( COSWindow::eWSExLayered, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( _WIN32_WINNT >= 0x0500 )
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetNoInheritLayout()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetNoInheritLayout" );
#if		( WINVER >= 0x0500 )
		return GetStyleExBits( COSWindow::eWSExNoInheritLayout );
#else
		return false;
#endif//( WINVER >= 0x0500 )
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetNoInheritLayout( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetNoInheritLayout" );
#if		( WINVER >= 0x0500 )
		SetStyleExBits( COSWindow::eWSExNoInheritLayout, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( WINVER >= 0x0500 )
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetLayoutRTL()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetLayoutRTL" );
#if		( WINVER >= 0x0500 )
		return GetStyleExBits( COSWindow::eWSExLayoutRTL );
#else
		return false;
#endif//( WINVER >= 0x0500 )
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetLayoutRTL( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetLayoutRTL" );
#if		( WINVER >= 0x0500 )
		SetStyleExBits( COSWindow::eWSExLayoutRTL, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( WINVER >= 0x0500 )
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetComposited()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetComposited" );
#if		( _WIN32_WINNT >= 0x0501 )
		return GetStyleExBits( COSWindow::eWSExComposited );
#else
		return false;
#endif//( _WIN32_WINNT >= 0x0501 )
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetComposited( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetComposited" );
#if		( _WIN32_WINNT >= 0x0501 )
		SetStyleExBits( COSWindow::eWSExComposited, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( _WIN32_WINNT >= 0x0501 )
	}

	//--------------------------------------------------------------------------------
	bool CWindowFactory::GetNoActivate()
	{
		_WINQ_FCONTEXT( "CWindowFactory::GetNoActivate" );
#if		( _WIN32_WINNT >= 0x0500 )
		return GetStyleExBits( COSWindow::eWSExNoActivate );
#else
		return false;
#endif//( _WIN32_WINNT >= 0x0500 )
	}

	//--------------------------------------------------------------------------------
	void CWindowFactory::SetNoActivate( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowFactory::SetNoActivate" );
#if		( _WIN32_WINNT >= 0x0500 )
		SetStyleExBits( COSWindow::eWSExNoActivate, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( _WIN32_WINNT >= 0x0500 )
	}
	*/

}//nsWin32
