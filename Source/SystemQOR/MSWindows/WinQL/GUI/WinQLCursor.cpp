//WinQLCursor.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: stored in member for later use." )
#include "WinQL/GUI/Cursor.h"
__QCMP_WARNING_POP
#include "WinQAPI/User32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace ::nsWinQAPI;

	__QCMP_DECLARE_PERTHREAD CCursorHandleMap* p_tCursorHandleMap = 0;

	__QOR_IMPLEMENT_OCLASS_LUID( CCursor );

	//--------------------------------------------------------------------------------
	void CCursor::Uninit()
	{
		_WINQ_FCONTEXT( "CCursor::Uninit" );

		CCursorHandleMap* pMap = p_tCursorHandleMap;

		if( pMap && !( m_Handle.IsNull() ) )
		{
			pMap->Remove( m_Handle.Ref() );
		}
	}

	//--------------------------------------------------------------------------------
	void CCursor::Init()
	{
		_WINQ_FCONTEXT( "CCursor::Init" );

		CCursorHandleMap* pMap = p_tCursorHandleMap;

		if( pMap == 0 )
		{
			pMap = new CCursorHandleMap;
		}

		if( !( m_Handle.IsNull() ) )
		{
			pMap->Add( m_Handle.Ref(), this );
		}
		else
		{
			m_iStatus = -1;
		}

		if( p_tCursorHandleMap == 0 )
		{
			p_tCursorHandleMap = pMap;
		}
	}

	//--------------------------------------------------------------------------------
	CCursor::refType CCursor::FromHandle( CCursorHandle::refType hCursor )
	{
		_WINQ_SFCONTEXT( "CCursor::FromHandle" );
		CCursor* pCursor = 0;
		bool bOwningRef = false;
		__QOR_PROTECT
		{
			pCursor = hCursor->Object< CCursor >();
			
			if( pCursor == 0 && p_tCursorHandleMap != 0 )
			{
				pCursor = p_tCursorHandleMap->FindHandle( hCursor );
			}

			if( pCursor == 0 )
			{
				pCursor = new CCursor( *hCursor );
				bOwningRef = true;
			}

		}__QOR_ENDPROTECT

		return refType( pCursor, bOwningRef );
	}

	__QCMP_WARNING_PUSH
	__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: stored in member for later use" )
	//--------------------------------------------------------------------------------
	CCursor::CCursor() : m_User32Library( CUser32::Instance() )
	,	m_Handle( this, 0 )
	{
		_WINQ_FCONTEXT( "CCursor::CCursor" );
		m_iStatus = -1;
	}

	//--------------------------------------------------------------------------------
	CCursor::CCursor( CWinModule& Module, const TCHAR* lpCursorName ) : m_User32Library( CUser32::Instance() )
	,	m_Handle( this, 0 )
	{
		_WINQ_FCONTEXT( "CCursor::CCursor" );
		__QOR_PROTECT
		{
			m_iStatus = 0;
			m_Handle = m_User32Library.LoadCursor( reinterpret_cast< ::HINSTANCE >( Module.ModuleHandle().Use() ), lpCursorName );
			Init();
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CCursor::CCursor( const TCHAR* lpFileName ) : m_User32Library( CUser32::Instance() )
	,	m_Handle( this, 0 )
	{
		_WINQ_FCONTEXT( "CCursor::CCursor" );
		__QOR_PROTECT
		{
			m_iStatus = 0;
			m_Handle = m_User32Library.LoadCursorFromFile( lpFileName );
			Init();
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CCursor::CCursor( CWinModule& Module, int xHotSpot, int yHotSpot, int nWidth, int nHeight, const void* pvANDPlane, const void* pvXORPlane ) : m_User32Library( CUser32::Instance() )
	,	m_Handle( this, 0 )
	{				
		_WINQ_FCONTEXT( "CCursor::CCursor" );
		__QOR_PROTECT
		{
			m_iStatus = 0;
			m_Handle = m_User32Library.CreateCursor( reinterpret_cast< ::HINSTANCE >( Module.ModuleHandle().Use() ), xHotSpot, yHotSpot, nWidth, nHeight, pvANDPlane, pvXORPlane );
			Init();
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CCursor::CCursor( const CCursor& src ) : m_User32Library( CUser32::Instance() )
	,	m_Handle( this, 0 )
	{
		_WINQ_FCONTEXT( "CCursor::CCursor" );
		__QOR_PROTECT
		{
			m_iStatus = src.m_iStatus;
			m_Handle = src.Copy();
			Init();
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CCursor::refType CCursor::Load( CWinModule& Module, const TCHAR* lpCursorName )
	{
		_WINQ_SFCONTEXT( "CCursor::Load" );
		refType Ref( new CCursor( Module, lpCursorName ), true );
		return Ref;
	}

	//--------------------------------------------------------------------------------
	CCursor::refType CCursor::LoadFromFile( const TCHAR* lpFileName )
	{
		_WINQ_SFCONTEXT( "CCursor::LoadFromFile" );
		refType Ref( new CCursor( lpFileName ), true );
		return Ref;
	}

	//--------------------------------------------------------------------------------
	CCursor::refType CCursor::Create( CWinModule& Module, int xHotSpot, int yHotSpot, int nWidth, int nHeight, const void* pvANDPlane, const void* pvXORPlane )
	{
		_WINQ_SFCONTEXT( "CCursor::Create" );
		refType Ref( new CCursor( Module, xHotSpot, yHotSpot, nWidth, nHeight, pvANDPlane, pvXORPlane ), true );
		return Ref;
	}

	//--------------------------------------------------------------------------------
	CCursor::~CCursor()
	{
		_WINQ_FCONTEXT( "CCursor::~CCursor" );
		__QOR_PROTECT
		{
			m_iStatus = m_User32Library.DestroyCursor( reinterpret_cast< ::HCURSOR >( m_Handle.Use() ) );
			Uninit();			
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	bool CCursor::Clip( const CRectangle& Rect )
	{
		_WINQ_FCONTEXT( "CCursor::Clip" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.ClipCursor( reinterpret_cast< const ::RECT* >( &Rect ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CCursor::GetClipRect( CRectangle& Rect )
	{				
		_WINQ_FCONTEXT( "CCursor::GetClipRect" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.GetClipCursor( reinterpret_cast< ::LPRECT >( &Rect ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	CCursor::refType CCursor::Copy() const
	{
		_WINQ_FCONTEXT( "CCursor::Copy" );
		CCursor* pCursor = 0;
		__QOR_PROTECT
		{
			CCursorHandle tmpHandle( 0, m_User32Library.CopyIcon( reinterpret_cast< ::HICON >( m_Handle.Use() ) ) );
			pCursor = new CCursor( tmpHandle );
		}__QOR_ENDPROTECT
		refType Ref( pCursor );
		return Ref;
	}

	//--------------------------------------------------------------------------------
	CCursor::CCursor( CCursorHandle& Handle ) : m_User32Library( CUser32::Instance() )
	,	m_Handle( this, Handle.AsHandle().Detach() )
	{
		_WINQ_FCONTEXT( "CCursor::CCursor" );
		__QOR_PROTECT
		{
			m_iStatus = 0;
			Init();
		}__QOR_ENDPROTECT
	}

	__QCMP_WARNING_POP

	//--------------------------------------------------------------------------------
	bool CCursor::GetInfo( nsWin32::CursorInfo& ci )
	{				
		_WINQ_FCONTEXT( "CCursor::GetInfo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.GetCursorInfo( reinterpret_cast< ::PCURSORINFO >( &ci ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CCursor::GetPos( nsWin32::POINT& Point )
	{
		_WINQ_FCONTEXT( "CCursor::GetPos" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.GetCursorPos( reinterpret_cast< ::LPPOINT >( &Point ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CCursor::SetPos( int X, int Y )
	{				
		_WINQ_FCONTEXT( "CCursor::SetPos" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.SetCursorPos( X, Y ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CCursor::GetPhysicalPos( nsWin32::POINT& Point )
	{				
		_WINQ_FCONTEXT( "CCursor::GetPhysicalPos" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.GetPhysicalCursorPos( reinterpret_cast< ::LPPOINT >( &Point ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CCursor::SetPhysicalPos( int X, int Y )
	{				
		_WINQ_FCONTEXT( "CCursor::SetPhysicalPos" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.SetPhysicalCursorPos( X, Y ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CCursor::Show( bool bShow )
	{				
		_WINQ_FCONTEXT( "CCursor::Show" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_User32Library.ShowCursor( bShow );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	//Override this to catch the cursor being replaced by another being Use(d)
	void CCursor::OnUnuse( refType NewCursor )
	{
		_WINQ_FCONTEXT( "CCursor::OnUnuse" );
		QOR_PP_UNREF( NewCursor );
	}

	//--------------------------------------------------------------------------------
	CCursor::refType CCursor::Use()
	{	
		_WINQ_FCONTEXT( "CCursor::Use" );
		CCursor* pCursor = 0;
		__QOR_PROTECT
		{
			CCursorHandle tmpHandle( 0, m_User32Library.SetCursor( reinterpret_cast< ::HCURSOR >( m_Handle.Use() ) ) );
			pCursor = FromHandle( tmpHandle.Ref() );
			if( pCursor )
			{
				pCursor->OnUnuse( this );
			}
		}__QOR_ENDPROTECT
		refType Ref( pCursor );
		return Ref;
	}

	//--------------------------------------------------------------------------------
	bool CCursor::SetAsSystemCursor( unsigned long id )
	{				
		_WINQ_FCONTEXT( "CCursor::SetAsSystemCursor" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.SetSystemCursor( reinterpret_cast< ::HCURSOR >( m_Handle.Use() ), id ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	CUserObject CCursor::Security()
	{
		_WINQ_FCONTEXT( "CCursor::Security" );
		CUserObject Result( m_Handle.AsHandle() );
		return Result;
	}

	//--------------------------------------------------------------------------------
	CCursorHandle::refType CCursor::Handle() 
	{
		_WINQ_FCONTEXT( "CCursor::Handle" );
		return m_Handle.Ref();
	}

}//nsWin32
