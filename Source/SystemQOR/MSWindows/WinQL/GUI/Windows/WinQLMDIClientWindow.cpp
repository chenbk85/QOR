//WinQLMDIClientFactory.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CompilerQOR.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usafe: stored in member for later use" );
#include "WinQL/GUI/Windows/MDIClient.h"
__QCMP_WARNING_POP

//--------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_OCLASS_LUID( CMDIClientClass );

	//--------------------------------------------------------------------------------
	CMDIClientClass::CMDIClientClass()
	{
		_WINQ_FCONTEXT( "CMDIClientFactory::CMDIClientFactory" );
	}

	//--------------------------------------------------------------------------------
	CMDIClientClass::~CMDIClientClass()
	{
		_WINQ_FCONTEXT( "CMDIClientFactory::~CMDIClientFactory" );
	}

	//--------------------------------------------------------------------------------
	bool CMDIClientClass::Preregistered()
	{ 
		_WINQ_FCONTEXT( "CMDIClientFactory::Preregistered" );
		return true; 
	}

	//--------------------------------------------------------------------------------
	const TCHAR* CMDIClientClass::Name()
	{ 
		_WINQ_FCONTEXT( "CMDIClientFactory::Name" );
		return _TXT( "mdiclient" ); 
	}




	__QOR_IMPLEMENT_OCLASS_LUID( CMDIClientFactory );

	//--------------------------------------------------------------------------------
	CMDIClientFactory::CMDIClientFactory() : CWindowFactory()
	{
		_WINQ_FCONTEXT( "CMDIClientFactory::CMDIClientFactory" );
	}

	//--------------------------------------------------------------------------------
	CMDIClient* CMDIClientFactory::Create()
	{
		_WINQ_FCONTEXT( "CMDIClientFactory::Instance" );

		//CMDIClient* pClient = PreCreateWindow< CMDIClient, CMDIClientClass >();			
		//pClient->SetCreateStruct( (CLIENTCREATESTRUCT*)m_pUserParam );
		return new CMDIClient;//pClient;
	}

	//--------------------------------------------------------------------------------
	CMDIClientFactory::~CMDIClientFactory()
	{	
		_WINQ_FCONTEXT( "CMDIClientFactory::~CMDIClientFactory" );
	}




	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CMDIClient );

	//--------------------------------------------------------------------------------
	CMDIClient::CMDIClient() : CWinCtrlWindow()
	{
		_WINQ_FCONTEXT( "CMDIClient::CMDIClient" );
	}

	//--------------------------------------------------------------------------------
	CMDIClient::~CMDIClient()
	{
		_WINQ_FCONTEXT( "CMDIClient::~CMDIClient" );
	}

	//--------------------------------------------------------------------------------
	void CMDIClient::Create( const TCHAR* lpWindowName, InstanceHandle hInstance, CWindowHandle::refType hWndParent, CMenuHandle::refType hMenu, unsigned long dwStyle, unsigned long dwExStyle, int x, int y, int nWidth, int nHeight )
	{
		_WINQ_FCONTEXT( "CMDIClient::Create" );
		//p_tWndHandleMap->PendingAdd( this );
		//m_pOSWindow = new nsWin32::nsGUI::COSWindow();
		//Create( dwExStyle, m_pClass->Name(), lpWindowName, dwStyle, x, y, nWidth, nHeight, hWndParent, hMenu, hInstance, m_pCreateStruct );
		//p_tWndHandleMap->Add( Handle(), this );
		Hook();
	}

	//--------------------------------------------------------------------------------
	long CMDIClient::MDIActivate( CWindowHandle::refType hChild )
	{
		_WINQ_FCONTEXT( "CMDIClient::MDIActivate" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) COSWindow::wmMDIActivate, reinterpret_cast< Cmp_uint_ptr >( hChild->Use() ), 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CMDIClient::MDICascade( Cmp_uint_ptr Option )
	{
		_WINQ_FCONTEXT( "CMDIClient::MDICascade" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) COSWindow::wmMDICascade, Option, 0 ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	CWindowHandle::refType CMDIClient::MDICreate( nsWin32::MDICREATESTRUCT& CreateStruct )
	{
		_WINQ_FCONTEXT( "CMDIClient::MDICreate" );
		CWindowHandle::refType hWnd( new CWindowHandle( 0, (void*)( m_Win32MsgHandler.Send( Ref(), (unsigned int) COSWindow::wmMDICreate, 0, reinterpret_cast< Cmp_long_ptr >( &CreateStruct ) ) ) ), true );				
		return hWnd;
	}

	//--------------------------------------------------------------------------------
	void CMDIClient::MDIDestroy( CWindowHandle::refType hChild )
	{
		_WINQ_FCONTEXT( "CMDIClient::MDIDestroy" );
		m_Win32MsgHandler.Send( Ref(), (unsigned int) COSWindow::wmMDIDestroy, reinterpret_cast< Cmp_uint_ptr >( hChild->Use() ), 0 );
	}

	//--------------------------------------------------------------------------------
	CWindowHandle::refType CMDIClient::MDIGetActive( int* pbMaximized )
	{
		_WINQ_FCONTEXT( "CMDIClient::MDIGetActive" );
		CWindowHandle::refType hWnd( new CWindowHandle( 0, (void*)( m_Win32MsgHandler.Send( Ref(), (unsigned int) COSWindow::wmMDIGetActive, 0, reinterpret_cast< Cmp_long_ptr >( pbMaximized ) ) ) ), true );
		return hWnd;
	}

	//--------------------------------------------------------------------------------
	void CMDIClient::MDIArrageIcons()
	{
		_WINQ_FCONTEXT( "CMDIClient::MDIArrangeIcons" );
		m_Win32MsgHandler.Send( Ref(), (unsigned int) COSWindow::wmMDIIconArrange, 0, 0 );
	}

	//--------------------------------------------------------------------------------
	void CMDIClient::MDIMaximize( CWindowHandle::refType hChild )
	{
		_WINQ_FCONTEXT( "CMDIClient::MDIMaximize" );
		m_Win32MsgHandler.Send( Ref(), (unsigned int) COSWindow::wmMDIMaximize, reinterpret_cast< Cmp_uint_ptr >( hChild->Use() ), 0 );
	}

	//--------------------------------------------------------------------------------
	void CMDIClient::MDINext( CWindowHandle::refType hChild, bool bAfter )
	{
		_WINQ_FCONTEXT( "CMDIClient::MDINext" );
		m_Win32MsgHandler.Send( Ref(), (unsigned int) COSWindow::wmMDINext, reinterpret_cast< Cmp_uint_ptr >( hChild->Use() ), static_cast< Cmp_long_ptr >( bAfter ? 1 : 0 ) );
	}

	//--------------------------------------------------------------------------------
	CMenuHandle::refType CMDIClient::MDIRefreshMenu()
	{
		_WINQ_FCONTEXT( "CMDIClient::CMDIRefreshMenu" );
		CMenuHandle* phMenu = new CMenuHandle( 0, 0 );
		*phMenu = (void*)( m_Win32MsgHandler.Send( Ref(), (unsigned int) COSWindow::wmMDIRefreshMenu, 0, 0 ) );
		if( ! phMenu->IsNull() )
		{
			CMenu::refType refMenu = CMenu::FromHandle( phMenu->Ref() );
			refMenu->DrawBar( *this );
		}
		return phMenu->Ref();
	}

	//--------------------------------------------------------------------------------
	void CMDIClient::MDIRestore( CWindowHandle::refType hChild )
	{
		_WINQ_FCONTEXT( "CMDIClient::MDIRestore" );
		m_Win32MsgHandler.Send( Ref(), (unsigned int) COSWindow::wmMDIRestore, reinterpret_cast< Cmp_uint_ptr >( hChild->Use() ), 0 );
	}

	//--------------------------------------------------------------------------------
	CMenuHandle::refType CMDIClient::MDISetMenu( CMenuHandle::refType hFrameMenu, CMenuHandle::refType hSysMenu )
	{
		_WINQ_FCONTEXT( "CMDIClient::MDISetMenu" );
		CMenuHandle::refType hMenu( new CMenuHandle( 0, (void*)( m_Win32MsgHandler.Send( Ref(), (unsigned int) COSWindow::wmMDISetMenu, reinterpret_cast< Cmp_uint_ptr >( hFrameMenu->Use() ), reinterpret_cast< Cmp_long_ptr >( hSysMenu->Use() ) ) ) ), true );
		return hMenu;
	}

	//--------------------------------------------------------------------------------
	bool CMDIClient::MDITile( Cmp_uint_ptr Option )
	{
		_WINQ_FCONTEXT( "CMDIClient::MDITile" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) COSWindow::wmMDITile, Option, 0 ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CMDIClient::SetCreateStruct( CLIENTCREATESTRUCT* pCreateStruct )
	{
		_WINQ_FCONTEXT( "CMDIClient::SetCreateStruct" );
		m_pCreateStruct = pCreateStruct;
	}

}//nsWin32

