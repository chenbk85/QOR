//WinQLTooltip.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CompilerQOR.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usafe: stored in member for later use" );
#include "WinQL/GUI/Windows/ToolTip.h"
__QCMP_WARNING_POP

//--------------------------------------------------------------------------------
namespace nsWin32
{

	__QOR_IMPLEMENT_OCLASS_LUID( CToolTipClass );

	//--------------------------------------------------------------------------------
	CToolTipClass::CToolTipClass() : CCommonCtrlClass( CCommonCtrl::CCTAB_CLASSES, _TXT( "tooltips_class32" ) )
	{
		_WINQ_FCONTEXT( "CToolTipClass::CToolTipClass" );
	}

	//--------------------------------------------------------------------------------
	CToolTipClass::~CToolTipClass()
	{
		_WINQ_FCONTEXT( "CToolTipClass::~CToolTipClass" );
	}





	__QOR_IMPLEMENT_OCLASS_LUID( CToolTipFactory )

	//--------------------------------------------------------------------------------
	CToolTipFactory::CToolTipFactory() : CCommonCtrlFactory< CToolTip >()
	{
		_WINQ_FCONTEXT( "CToolTipFactory::CToolTipFactory" );
	}

	//--------------------------------------------------------------------------------
	CToolTipFactory::~CToolTipFactory()
	{
		_WINQ_FCONTEXT( "CToolTipFactory::~CToolTipFactory" );
	}

	//--------------------------------------------------------------------------------
	bool CToolTipFactory::GetAlwaysTip()
	{
		_WINQ_FCONTEXT( "CToolTipFactory::GetAlwaysTip" );
		return GetStyleBits( TTS_ALWAYSTIP );
	}

	//--------------------------------------------------------------------------------
	void CToolTipFactory::SetAlwaysTip( bool bFlag )
	{
		_WINQ_FCONTEXT( "CToolTipFactory::SetAlwaysTip" );
		SetStyleBits( TTS_ALWAYSTIP, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CToolTipFactory::GetBalloon()
	{
		_WINQ_FCONTEXT( "CToolTipFactory::GetBalloon" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0500 )
		bResult = GetStyleBits( TTS_BALLOON );
#endif//( _WIN32_IE >= 0x0500 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CToolTipFactory::SetBalloon( bool bFlag )
	{
		_WINQ_FCONTEXT( "CToolTipFactory::SetBalloon" );
#if		( _WIN32_IE >= 0x0500 )
		SetStyleBits( TTS_BALLOON, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( _WIN32_IE >= 0x0500 )
	}

	//--------------------------------------------------------------------------------
	bool CToolTipFactory::GetNoAnimate()
	{
		_WINQ_FCONTEXT( "CToolTipFactory::GetNoAnimate" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0500 )
		bResult = GetStyleBits( TTS_NOANIMATE );
#endif//( _WIN32_IE >= 0x0500 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CToolTipFactory::SetNoAnimate( bool bFlag )
	{
		_WINQ_FCONTEXT( "CToolTipFactory::SetNoAnimate" );
#if		( _WIN32_IE >= 0x0500 )
		SetStyleBits( TTS_NOANIMATE, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( _WIN32_IE >= 0x0500 )
	}

	//--------------------------------------------------------------------------------
	bool CToolTipFactory::GetNoFade()
	{
		_WINQ_FCONTEXT( "CToolTipFactory::GetNoFade" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0500 )
		bResult = GetStyleBits( TTS_NOFADE );
#endif//( _WIN32_IE >= 0x0500 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CToolTipFactory::SetNoFade( bool bFlag )
	{
		_WINQ_FCONTEXT( "CToolTipFactory::SetNoFade" );
#if		( _WIN32_IE >= 0x0500 )
		SetStyleBits( TTS_NOFADE, bFlag );
#endif//( _WIN32_IE >= 0x0500 )
	}

	//--------------------------------------------------------------------------------
	bool CToolTipFactory::GetNoPrefix()
	{
		_WINQ_FCONTEXT( "CToolTipFactory::GetNoPrefix" );
		return GetStyleBits( TTS_NOPREFIX );
	}

	//--------------------------------------------------------------------------------
	void CToolTipFactory::SetNoPrefix( bool bFlag )
	{
		_WINQ_FCONTEXT( "CToolTipFactory::SetNoPrefix" );
		SetStyleBits( TTS_NOPREFIX, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CToolTipFactory::GetClose()
	{
		_WINQ_FCONTEXT( "CToolTipFactory::GetClose" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0500 )
		bResult = GetStyleBits( TTS_CLOSE );
#endif//( _WIN32_IE >= 0x0500 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CToolTipFactory::SetClose( bool bFlag )
	{
		_WINQ_FCONTEXT( "CToolTipFactory::SetClose" );
#if		( _WIN32_IE >= 0x0500 )
		SetStyleBits( TTS_CLOSE, bFlag );
#endif//( _WIN32_IE >= 0x0500 )
	}

	//--------------------------------------------------------------------------------
	bool CToolTipFactory::GetUseVisualStyle()
	{
		_WINQ_FCONTEXT( "CToolTipFactory::GetUseVisualStyle" );
		bool bResult = false;
#if		( _WIN32_WINNT >= 0x0600 )
		bResult = GetStyleBits( TTS_USEVISUALSTYLE );
#endif//( _WIN32_WINNT >= 0x0600 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CToolTipFactory::SetUseVisualStyle( bool bFlag )
	{
		_WINQ_FCONTEXT( "CToolTipFactory::SetUseVisualStyle" );
#if		( _WIN32_WINNT >= 0x0600 )
		SetStyleBits( TTS_USEVISUALSTYLE, bFlag );
#endif//( _WIN32_WINNT >= 0x0600 )
	}





	__QOR_IMPLEMENT_OCLASS_LUID( CToolTip );

	//--------------------------------------------------------------------------------
	CToolTip::CToolTip() : CWinCtrlWindow()
	{				
	}

	//--------------------------------------------------------------------------------
	CToolTip::~CToolTip()
	{
	}

	//--------------------------------------------------------------------------------
	long CToolTip::OnNotify( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CToolTip::OnNotify" );

		long lResult = 0;

		if( pHdr != 0 )
		{
			switch ( pHdr->m_uiCode )
			{
			case NM_CUSTOMDRAW:
				{
					lResult = OnCustomDraw( reinterpret_cast< NMTTCUSTOMDRAW* >( pHdr ) );
				}
				break;
			case TTN_GETDISPINFO:
				{
					OnGetDispInfo( reinterpret_cast< NMTTDISPINFO* >( pHdr ) );
				}
				break;
			case TTN_LINKCLICK:
				{
					OnLinkClick( pHdr );
				}
				break;
			case TTN_POP:
				{
					OnPop( pHdr );
				}
				break;
			case TTN_SHOW:
				{
					lResult = static_cast< long >( OnShow( pHdr ) ? 1 : 0 );
				}
				break;
			default:
				{
					lResult = OnUnknownNotification( pHdr );
				}
				break;
			}
		}
		return lResult;
	}

	//--------------------------------------------------------------------------------		
	long CToolTip::OnCustomDraw( NMTTCUSTOMDRAW* pHdr )
	{
		_WINQ_FCONTEXT( "CToolTip::OnCustomDraw" );
		return CDRF_DODEFAULT;
	}
		
	//--------------------------------------------------------------------------------		
	void CToolTip::OnLinkClick( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CToolTip::OnLinkClick" );
	}

	//--------------------------------------------------------------------------------		
	void CToolTip::OnGetDispInfo( NMTTDISPINFO* pHdr )
	{
		_WINQ_FCONTEXT( "CToolTip::OnGetDispInfo" );
	}

	//--------------------------------------------------------------------------------		
	void CToolTip::OnPop( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CToolTip::OnPop" );
	}

	//--------------------------------------------------------------------------------		
	bool CToolTip::OnShow( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CToolTip::OnShow" );
		return false;
	}

	//--------------------------------------------------------------------------------		
	long CToolTip::OnUnknownNotification( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CToolTip::OnUnknownNotification" );
		QOR_PP_UNREF( pHdr );
		long lResult = 0;
		return lResult;
	}

	//--------------------------------------------------------------------------------
	void CToolTip::Activate( bool bActivate )
	{				
		_WINQ_FCONTEXT( "CToolTip::Activate" );
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TTM_ACTIVATE,
			static_cast< Cmp_uint_ptr >( bActivate ? 1 : 0 ), 0 );
	}

	//--------------------------------------------------------------------------------
	bool CToolTip::AddTool( ToolInfo& ToolInfo )
	{				
		_WINQ_FCONTEXT( "CToolTip::AddTool" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TTM_ADDTOOL,
			0, reinterpret_cast< Cmp_long_ptr >( &ToolInfo ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CToolTip::AdjustRect( bool bLarger, CRectangle& rcToolTip )
	{				
		_WINQ_FCONTEXT( "CToolTip::AdjustRect" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0500 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TTM_ADJUSTRECT,
			static_cast< Cmp_uint_ptr >( bLarger ? 1 : 0 ), reinterpret_cast< Cmp_long_ptr >( &rcToolTip ) ) ? true : false );
#else
		__QCMP_UNREF( rcToolTip );
		__QCMP_UNREF( bLarger );
#endif//( _WIN32_IE >= 0x0500 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CToolTip::DeleteTool( ToolInfo& ToolInfo )
	{				
		_WINQ_FCONTEXT( "CToolTip::DeleteTool" );
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TTM_DELTOOL,
			0, reinterpret_cast< Cmp_long_ptr >( &ToolInfo ) );
	}

	//--------------------------------------------------------------------------------
	bool CToolTip::EnumTools( unsigned int uiTool, ToolInfo& ToolInfo )
	{				
		_WINQ_FCONTEXT( "CToolTip::EnumTools" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TTM_ENUMTOOLS,
			static_cast< Cmp_uint_ptr >( uiTool ), reinterpret_cast< Cmp_long_ptr >( &ToolInfo ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CToolTip::GetBubbleSize( ToolInfo& ToolInfo )
	{				
		_WINQ_FCONTEXT( "CToolTip::GetBubbleSize" );
		long lResult = 0;
#if		( _WIN32_IE >= 0x0500 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TTM_GETBUBBLESIZE,
			0, reinterpret_cast< Cmp_long_ptr >( &ToolInfo ) );
#else
		__QCMP_UNREF( ToolInfo );
#endif//( _WIN32_IE >= 0x0500 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CToolTip::GetCurrentTool( ToolInfo& ToolInfo )
	{				
		_WINQ_FCONTEXT( "CToolTip::GetCurrentTool" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TTM_GETCURRENTTOOL,
			0, reinterpret_cast< Cmp_long_ptr >( &ToolInfo ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CToolTip::GetDelayTime( unsigned long dwDuration )
	{				
		_WINQ_FCONTEXT( "CToolTip::GetDelayTime" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TTM_GETDELAYTIME,
			static_cast< Cmp_uint_ptr >( dwDuration ), 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	void CToolTip::GetMargin( CRectangle& rcMargin )
	{				
		_WINQ_FCONTEXT( "CToolTip::GetMargin" );
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TTM_GETMARGIN,
			0, reinterpret_cast< Cmp_long_ptr >( &rcMargin ) );
	}

	//--------------------------------------------------------------------------------
	long CToolTip::GetMaxTipWidth()
	{				
		_WINQ_FCONTEXT( "CToolTip::GetMaxTipWidth" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TTM_GETMAXTIPWIDTH, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	void CToolTip::GetText( Cmp_uint_ptr cch, ToolInfo& ToolInfo )
	{				
		_WINQ_FCONTEXT( "CToolTip::GetText" );
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TTM_GETTEXT, 
			cch, reinterpret_cast< Cmp_long_ptr >( &ToolInfo ) );
	}

	//--------------------------------------------------------------------------------
	unsigned long CToolTip::GetBkColour()
	{				
		_WINQ_FCONTEXT( "CToolTip::GetBkColour" );
		unsigned long Result = static_cast< unsigned long >( 
			m_Win32MsgHandler.Send( Ref(), (unsigned int) TTM_GETTIPBKCOLOR, 0, 0 ) );
		return Result;
	}

	//--------------------------------------------------------------------------------
	unsigned long CToolTip::GetTextColour()
	{				
		_WINQ_FCONTEXT( "CToolTip::GetTextColour" );
		unsigned long Result = static_cast< unsigned long >( 
			m_Win32MsgHandler.Send( Ref(), (unsigned int) TTM_GETTIPTEXTCOLOR, 0, 0 ) );
		return Result;
	}

	//--------------------------------------------------------------------------------
	void CToolTip::GetTitle( TTGETTITLE& GetTitleData )
	{				
		_WINQ_FCONTEXT( "CToolTip::GetTitle" );
#if		( _WIN32_WINNT >= 0x0501 )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TTM_GETTITLE, 0, 
			reinterpret_cast< Cmp_long_ptr >( &GetTitleData ) );				
#else
		__QCMP_UNREF( GetTitle );
#endif//( _WIN32_WINNT >= 0x0501 )
	}

	//--------------------------------------------------------------------------------
	long CToolTip::GetToolCount()
	{				
		_WINQ_FCONTEXT( "CToolTip::GetToolCount" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TTM_GETTOOLCOUNT, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CToolTip::GetToolInfo( ToolInfo& ToolInfo )
	{				
		_WINQ_FCONTEXT( "CToolTip::GetToolInfo" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TTM_GETTOOLINFO,
			0, reinterpret_cast< Cmp_long_ptr >( &ToolInfo ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CToolTip::HitTest( TTHitTestInfo& HitTestInfo )
	{				
		_WINQ_FCONTEXT( "CToolTip::HitTest" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TTM_HITTEST,
			0, reinterpret_cast< Cmp_long_ptr >( &HitTestInfo ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CToolTip::NewToolRect( ToolInfo& ToolInfo )
	{				
		_WINQ_FCONTEXT( "CToolTip::NewToolRect" );
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TTM_NEWTOOLRECT,
			0, reinterpret_cast< Cmp_long_ptr >( &ToolInfo ) );
	}

	//--------------------------------------------------------------------------------
	void CToolTip::Pop()
	{				
		_WINQ_FCONTEXT( "CToolTip::Pop" );
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TTM_POP, 0, 0 );
	}

	//--------------------------------------------------------------------------------
	void CToolTip::Popup()
	{				
		_WINQ_FCONTEXT( "CToolTip::Popup" );
#if		( _WIN32_WINNT >= 0x0501 )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TTM_POPUP, 0, 0 );
#endif//( _WIN32_WINNT >= 0x0501 )
	}

	//--------------------------------------------------------------------------------
	void CToolTip::RelayEvent( MSG* pMsg )
	{				
		_WINQ_FCONTEXT( "CToolTip::RelayEvent" );
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TTM_RELAYEVENT, 0, 
			reinterpret_cast< Cmp_long_ptr >( pMsg ) );
	}

	//--------------------------------------------------------------------------------
	void CToolTip::SetDelayTime( unsigned long dwDuration, unsigned short wDelay )
	{				
		_WINQ_FCONTEXT( "CToolTip::SetDelayTime" );
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TTM_SETDELAYTIME,
			static_cast< Cmp_uint_ptr >( dwDuration ), MakeLong( wDelay, 0 ) );
	}

	//--------------------------------------------------------------------------------
	void CToolTip::SetMargin( CRectangle& rcMargin )
	{				
		_WINQ_FCONTEXT( "CToolTip::SetMargin" );
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TTM_SETMARGIN,
			0, reinterpret_cast< Cmp_long_ptr >( &rcMargin ) );
	}

	//--------------------------------------------------------------------------------
	long CToolTip::SetMaxTipWidth( unsigned int uiWidth )
	{				
		_WINQ_FCONTEXT( "CToolTip::SetMaxTipWidth" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TTM_SETMAXTIPWIDTH,
			0, static_cast< Cmp_long_ptr >( uiWidth ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	void CToolTip::SetBkColour( unsigned long clrBk )
	{				
		_WINQ_FCONTEXT( "CToolTip::SetBkColour" );
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TTM_SETTIPBKCOLOR,
			static_cast< Cmp_uint_ptr >( clrBk ), 0 );
	}

	//--------------------------------------------------------------------------------
	void CToolTip::SetTextColour( unsigned long clrText )
	{				
		_WINQ_FCONTEXT( "CToolTip::SetTextColour" );
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TTM_SETTIPTEXTCOLOR,
			static_cast< Cmp_uint_ptr >( clrText ), 0 );
	}

	//--------------------------------------------------------------------------------
	bool CToolTip::SetTitle( int iIcon, const TCHAR* strTitle )
	{				
		_WINQ_FCONTEXT( "CToolTip::SetTitle" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0500 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TTM_SETTITLE,
			static_cast< Cmp_uint_ptr >( iIcon ), reinterpret_cast< Cmp_long_ptr >( strTitle ) ) ? true : false );
#else
		__QCMP_UNREF( strTitle );
		__QCMP_UNREF( iIcon );
#endif//( _WIN32_IE >= 0x0500 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CToolTip::SetToolInfo( ToolInfo& ToolInfo )
	{				
		_WINQ_FCONTEXT( "CToolTip::SetToolInfo" );
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TTM_SETTOOLINFO,
			0, reinterpret_cast< Cmp_long_ptr >( &ToolInfo ) );
	}

	//--------------------------------------------------------------------------------
	void CToolTip::SetWindowTheme( wchar_t* strTheme )
	{				
		_WINQ_FCONTEXT( "CToolTip::SetWindowTheme" );
#if		( _WIN32_WINNT >= 0x0501 )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TTM_SETWINDOWTHEME,
			0, reinterpret_cast< Cmp_long_ptr >( strTheme ) );
#else
		__QCMP_UNREF( strTheme );
#endif//( _WIN32_WINNT >= 0x0501 )
	}

	//--------------------------------------------------------------------------------
	void CToolTip::TrackActivate( bool bActivate, ToolInfo& ToolInfo )
	{				
		_WINQ_FCONTEXT( "CToolTip::TrackActivate" );
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TTM_TRACKACTIVATE,
			static_cast< Cmp_uint_ptr >( bActivate ? 1 : 0 ), reinterpret_cast< Cmp_long_ptr >( &ToolInfo ) );
	}

	//--------------------------------------------------------------------------------
	void CToolTip::TrackPosition( unsigned short xPos, unsigned short yPos )
	{				
		_WINQ_FCONTEXT( "CToolTip::TrackPosition" );
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TTM_TRACKPOSITION,
			0, MakeLong( xPos, yPos ) );
	}

	//--------------------------------------------------------------------------------
	void CToolTip::Update()
	{	
		_WINQ_FCONTEXT( "CToolTip::Update" );
#if		( _WIN32_IE >= 0x0400 )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TTM_UPDATE, 0, 0 );
#endif//( _WIN32_IE >= 0x0400 )
	}

	//--------------------------------------------------------------------------------
	void CToolTip::UpdateText( ToolInfo& ToolInfo )
	{	
		_WINQ_FCONTEXT( "CToolTip::UpdateText" );
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TTM_UPDATETIPTEXT, 0, 
			reinterpret_cast< Cmp_long_ptr >( &ToolInfo ) );
	}

	//--------------------------------------------------------------------------------
	COSWindow::refType CToolTip::WindowFromPoint( POINT& Point )
	{				
		_WINQ_FCONTEXT( "CToolTip::WindowFromPoint" );

		return COSWindow::FromHandle( CWindowHandle::refType( new CWindowHandle( 0, (void*)(
			m_Win32MsgHandler.Send( Ref(), (unsigned int) TTM_WINDOWFROMPOINT, 0, reinterpret_cast< Cmp_long_ptr >( &Point ) ) ) ) ) );
	}

}//nsWin32

