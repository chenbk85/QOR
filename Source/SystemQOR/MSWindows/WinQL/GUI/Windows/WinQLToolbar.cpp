//WinQLToolbar.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CompilerQOR.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usafe: stored in member for later use" );
#include "WinQL/GUI/Windows/Toolbar.h"
__QCMP_WARNING_POP

//--------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_OCLASS_LUID( CToolbarClass );

	//--------------------------------------------------------------------------------
	CToolbarClass::CToolbarClass() : CCommonCtrlClass( CCommonCtrl::CCBAR_CLASSES, _TXT( "ToolbarWindow32" ) )
	{
		_WINQ_FCONTEXT( "CToolbarClass::CToolbarClass" );
	}

	//--------------------------------------------------------------------------------
	CToolbarClass::~CToolbarClass()
	{
		_WINQ_FCONTEXT( "CToolbarClass::~CToolbarClass" );
	}





	
	__QOR_IMPLEMENT_OCLASS_LUID( CToolbarFactory );

	//--------------------------------------------------------------------------------
	CToolbarFactory::CToolbarFactory() : CCommonCtrlFactory< CToolbar >()
	{
		_WINQ_FCONTEXT( "CToolbarFactory::CToolbarFactory" );
	}

	//--------------------------------------------------------------------------------
	bool CToolbarFactory::GetTooltips()
	{
		_WINQ_FCONTEXT( "CToolbarFactory::GetTooltips" );
		return GetStyleBits( TBSTYLE_TOOLTIPS );
	}

	//--------------------------------------------------------------------------------
	void CToolbarFactory::SetTooltips( bool bFlag )
	{
		_WINQ_FCONTEXT( "CToolbarFactory::SetTooltips" );
		SetStyleBits( TBSTYLE_TOOLTIPS, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CToolbarFactory::GetWrapable()
	{
		_WINQ_FCONTEXT( "CToolbarFactory::GetWrapable" );
		return GetStyleBits( TBSTYLE_WRAPABLE );
	}

	//--------------------------------------------------------------------------------
	void CToolbarFactory::SetWrapable( bool bFlag )
	{
		_WINQ_FCONTEXT( "CToolbarFactory::SetWrapable" );
		SetStyleBits( TBSTYLE_WRAPABLE, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CToolbarFactory::GetAltDrag()
	{
		_WINQ_FCONTEXT( "CToolbarFactory::GetAltDrag" );
		return GetStyleBits( TBSTYLE_ALTDRAG );
	}

	//--------------------------------------------------------------------------------
	void CToolbarFactory::SetAltDrag( bool bFlag )
	{
		_WINQ_FCONTEXT( "CToolbarFactory::SetAltDrag" );
		SetStyleBits( TBSTYLE_ALTDRAG, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CToolbarFactory::GetFlat()
	{
		_WINQ_FCONTEXT( "CToolbarFactory::GetFlat" );
#if		( _WIN32_IE >= 0x0300 )
		return GetStyleBits( TBSTYLE_FLAT );
#else
		return false;
#endif//( _WIN32_IE >= 0x0300 )
	}

	//--------------------------------------------------------------------------------
	void CToolbarFactory::SetFlat( bool bFlag )
	{
		_WINQ_FCONTEXT( "CToolbarFactory::SetFlat" );
#if		( _WIN32_IE >= 0x0300 )
		SetStyleBits( TBSTYLE_FLAT, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( _WIN32_IE >= 0x0300 )
	}

	//--------------------------------------------------------------------------------
	bool CToolbarFactory::GetList()
	{
		_WINQ_FCONTEXT( "CToolbarFactory::GetList" );
#if		( _WIN32_IE >= 0x0300 )
		return GetStyleBits( TBSTYLE_LIST );
#else
		return false;
#endif//( _WIN32_IE >= 0x0300 )
	}

	//--------------------------------------------------------------------------------
	void CToolbarFactory::SetList( bool bFlag )
	{
		_WINQ_FCONTEXT( "CToolbarFactory::SetList" );
#if		( _WIN32_IE >= 0x0300 )
		SetStyleBits( TBSTYLE_LIST, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( _WIN32_IE >= 0x0300 )
	}

	//--------------------------------------------------------------------------------
	bool CToolbarFactory::GetCustomErase()
	{
		_WINQ_FCONTEXT( "CToolbarFactory::GetCustomErase" );
#if		( _WIN32_IE >= 0x0300 )
		return GetStyleBits( TBSTYLE_CUSTOMERASE );
#else
		return false;
#endif//( _WIN32_IE >= 0x0300 )
	}

	//--------------------------------------------------------------------------------
	void CToolbarFactory::SetCustomErase( bool bFlag )
	{
		_WINQ_FCONTEXT( "CToolbarFactory::SetCustomErase" );
#if		( _WIN32_IE >= 0x0300 )
		SetStyleBits( TBSTYLE_CUSTOMERASE, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( _WIN32_IE >= 0x0300 )
	}

	//--------------------------------------------------------------------------------
	bool CToolbarFactory::GetRegisterDrop()
	{
		_WINQ_FCONTEXT( "CToolbarFactory::GetRegisterDrop" );
#if		( _WIN32_IE >= 0x0400 )
		return GetStyleBits( TBSTYLE_REGISTERDROP );
#else
		return false;
#endif//( _WIN32_IE >= 0x0400 )
	}

	//--------------------------------------------------------------------------------
	void CToolbarFactory::SetRegisterDrop( bool bFlag )
	{
		_WINQ_FCONTEXT( "CToolbarFactory::SetRegisterDrop" );
#if		( _WIN32_IE >= 0x0400 )
		SetStyleBits( TBSTYLE_REGISTERDROP, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( _WIN32_IE >= 0x0400 )
	}

	//--------------------------------------------------------------------------------
	bool CToolbarFactory::GetTransparent()
	{
		_WINQ_FCONTEXT( "CToolbarFactory::GetTransparent" );
#if		( _WIN32_IE >= 0x0400 )
		return GetStyleBits( TBSTYLE_TRANSPARENT );
#else
		return false;
#endif//( _WIN32_IE >= 0x0400 )
	}

	//--------------------------------------------------------------------------------
	void CToolbarFactory::SetTransparent( bool bFlag )
	{
		_WINQ_FCONTEXT( "CToolbarFactory::SetTransparent" );
#if		( _WIN32_IE >= 0x0400 )
		SetStyleBits( TBSTYLE_TRANSPARENT, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( _WIN32_IE >= 0x0400 )
	}
		
		
		
		
		
		

	__QOR_IMPLEMENT_OCLASS_LUID( CToolbar );

	//--------------------------------------------------------------------------------
	CToolbar::CToolbar() : CWinCtrlWindow()
	{	
		_WINQ_FCONTEXT( "CToolbar::CToolbar" );
	}

	//--------------------------------------------------------------------------------
	CToolbar::~CToolbar()
	{
		_WINQ_FCONTEXT( "CToolbar::~CToolbar" );
	}

	//--------------------------------------------------------------------------------
	long CToolbar::OnNotify( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CToolbar::OnNotify" );
		long lResult = 0;

		if( pHdr != 0 )
		{
			switch ( pHdr->m_uiCode )
			{
#if		( _WIN32_IE >= 0x0400 )
			case NM_CHAR:
				{
					lResult = static_cast< long >( OnChar( reinterpret_cast< NMCHAR* >( pHdr ) ) ? 1 : 0 );
				}
				break;
#endif//( _WIN32_IE >= 0x0400 )
			case NM_CLICK:
				{
					lResult = static_cast< long >( OnClick( reinterpret_cast< NMMOUSE* >( pHdr ) ) ? 1 : 0 );
				}
				break;
			case NM_CUSTOMDRAW:
				{
					lResult = OnCustomDraw( pHdr );
				}
				break;
			case NM_DBLCLK:
				{
					lResult = static_cast< long >( OnDblClick( reinterpret_cast< NMMOUSE* >( pHdr ) ) ? 1 : 0 );
				}
				break;
#if		( _WIN32_IE >= 0x0400 )
			case NM_KEYDOWN:
				{
					lResult = static_cast< long >( OnKeyDown( reinterpret_cast< NMKEY* >( pHdr ) ) ? 1 : 0 );
				}
				break;
#endif//( _WIN32_IE >= 0x0400 )
#if		( _WIN32_IE >= 0x0500 )
			case NM_LDOWN:
				{
					OnLBtnDown( pHdr );
				}
				break;
#endif//( _WIN32_IE >= 0x0500 )
			case NM_RCLICK:
				{
					lResult = static_cast< long >( OnRClick( reinterpret_cast< NMMOUSE* >( pHdr ) ) ? 1 : 0 );
				}
				break;
			case NM_RDBLCLK:
				{
					lResult = static_cast< long >( OnRDblClick( reinterpret_cast< NMMOUSE* >( pHdr ) ) ? 1 : 0 );
				}
				break;
#if		( _WIN32_IE >= 0x0400 )
			case NM_RELEASEDCAPTURE:
				{
					OnReleasedCapture( pHdr );
				}
				break;
#endif//( _WIN32_IE >= 0x0400 )
#if		( _WIN32_IE >= 0x0401 )
			case NM_TOOLTIPSCREATED:
				{
					OnToolTipsCreated( reinterpret_cast< NMTOOLTIPSCREATED* >( pHdr ) );
				}
				break;
#endif//( _WIN32_IE >= 0x0401 )
			case TBN_BEGINADJUST:
				{
					OnBeginAdjust( pHdr );
				}
				break;
			case TBN_BEGINDRAG:
				{
					OnBeginDrag( reinterpret_cast< NMTOOLBAR* >( pHdr ) );
				}
				break;
			case TBN_CUSTHELP:
				{
					OnCustomiseHelp( pHdr );
				}
				break;
#if		( _WIN32_IE >= 0x0400 )
			case TBN_DELETINGBUTTON:
				{
					OnDeletingButton( reinterpret_cast< NMTOOLBAR* >( pHdr ) );
				}
				break;
			case TBN_DRAGOUT:
				{
					OnDragOut( reinterpret_cast< NMTOOLBAR* >( pHdr ) );
				}
				break;
			case TBN_DROPDOWN:
				{
					lResult = OnDropDown( reinterpret_cast< NMTOOLBAR* >( pHdr ) );
				}
				break;
#endif//( _WIN32_IE >= 0x0400 )
			case TBN_ENDADJUST:
				{
					OnEndAdjust( pHdr );
				}
				break;
			case TBN_ENDDRAG:
				{
					OnEndDrag( reinterpret_cast< NMTOOLBAR* >( pHdr ) );
				}
				break;
#if		( _WIN32_IE >= 0x0400 )
			case TBN_GETBUTTONINFO:
				{
					lResult = static_cast< long >( OnGetButtonInfo( reinterpret_cast< NMTOOLBAR* >( pHdr ) ) ? 1 : 0 );
				}
				break;
			case TBN_GETDISPINFO:
				{
					OnGetDispInfo( reinterpret_cast< NMTBDISPINFO* >( pHdr ) );
				}
				break;
			case TBN_GETINFOTIP:
				{
					OnGetInfoTip( reinterpret_cast< NMTBGETINFOTIP* >( pHdr ) );
				}
				break;
			case TBN_GETOBJECT:
				{
					OnGetObject( reinterpret_cast< NMOBJECTNOTIFY* >( pHdr ) );
					lResult = 0;
				}
				break;
			case TBN_HOTITEMCHANGE:
				{
					lResult = static_cast< long >( OnHotItemChange( reinterpret_cast< NMTBHOTITEM* >( pHdr ) ) ? 1 : 0 );
				}
				break;
#endif//( _WIN32_IE >= 0x0400 )
#if		( _WIN32_IE >= 0x0500 )
			case TBN_INITCUSTOMIZE:
				{
					lResult = OnInitCustomize( pHdr );
				}
				break;
#endif//( _WIN32_IE >= 0x0500 )
			case TBN_QUERYDELETE:
				{
					lResult = static_cast< long >( OnQueryDelete( reinterpret_cast< NMTOOLBAR* >( pHdr ) ) ? 1 : 0 );
				}
				break;
			case TBN_QUERYINSERT:
				{
					lResult = static_cast< long >( OnQueryInsert( reinterpret_cast< NMTOOLBAR* >( pHdr ) ) ? 1 : 0 );
				}
				break;
			case TBN_RESET:
				{
					OnReset( pHdr );
				}
				break;
#if		( _WIN32_IE >= 0x0500 )
			case TBN_RESTORE:
				{
					lResult = static_cast< long >( OnRestore( reinterpret_cast< NMTBRESTORE* >( pHdr ) ) ? 0 : 1 );
				}
				break;
			case TBN_SAVE:
				{
					OnSave( reinterpret_cast< NMTBSAVE* >( pHdr ) );
				}
				break;
#endif//( _WIN32_IE >= 0x0500 )
			case TBN_TOOLBARCHANGE:
				{
					OnToolbarChange( pHdr );
				}
				break;
			default:
				{
					lResult = OnUnknownNotification( pHdr );
				}
				break;
			}
		}
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::OnChar( NMCHAR* pHdr )
	{
		_WINQ_FCONTEXT( "CToolbar::OnChar" );
		QOR_PP_UNREF( pHdr );
		return true;
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::OnClick( NMMOUSE* pHdr )
	{
		_WINQ_FCONTEXT( "CToolbar::OnClick" );
		QOR_PP_UNREF( pHdr );
		return true;
	}

	//--------------------------------------------------------------------------------
	long CToolbar::OnCustomDraw( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CToolbar::OnCustomDraw" );
		QOR_PP_UNREF( pHdr );
		long lResult = CDRF_DODEFAULT;
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::OnDblClick( NMMOUSE* pHdr )
	{
		_WINQ_FCONTEXT( "CToolbar::OnDblClick" );
		QOR_PP_UNREF( pHdr );
		return true;
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::OnKeyDown( NMKEY* pHdr )
	{
		_WINQ_FCONTEXT( "CToolbar::OnKeyDown" );
		QOR_PP_UNREF( pHdr );
		return true;
	}

	//--------------------------------------------------------------------------------
	void CToolbar::OnLBtnDown( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CToolbar::OnLBtnDown" );
		QOR_PP_UNREF( pHdr );
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::OnRClick( NMMOUSE* pHdr )
	{
		_WINQ_FCONTEXT( "CToolbar::OnRClick" );
		QOR_PP_UNREF( pHdr );
		return true;
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::OnRDblClick( NMMOUSE* pHdr )
	{
		_WINQ_FCONTEXT( "CToolbar::OnRDblClick" );
		QOR_PP_UNREF( pHdr );
		return true;
	}

	//--------------------------------------------------------------------------------
	void CToolbar::OnReleasedCapture( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CToolbar::OnReleasedCapture" );
		QOR_PP_UNREF( pHdr );
	}

	//--------------------------------------------------------------------------------
	void CToolbar::OnToolTipsCreated( NMTOOLTIPSCREATED* pHdr )
	{
		_WINQ_FCONTEXT( "CToolbar::OnToolTipsCreated" );
		QOR_PP_UNREF( pHdr );
	}

	//--------------------------------------------------------------------------------
	void CToolbar::OnBeginAdjust( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CToolbar::OnBeginAdjust" );
		QOR_PP_UNREF( pHdr );
	}

	//--------------------------------------------------------------------------------
	void CToolbar::OnBeginDrag( NMTOOLBAR* pHdr )
	{
		_WINQ_FCONTEXT( "CToolbar::OnBeginDrag" );
		QOR_PP_UNREF( pHdr );
	}

	//--------------------------------------------------------------------------------
	void CToolbar::OnCustomiseHelp( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CToolbar::OnCustomiseHelp" );
		QOR_PP_UNREF( pHdr );
	}

	//--------------------------------------------------------------------------------
	void CToolbar::OnDeletingButton( NMTOOLBAR* pHdr )
	{
		_WINQ_FCONTEXT( "CToolbar::OnDeletingButton" );
		QOR_PP_UNREF( pHdr );
	}

	//--------------------------------------------------------------------------------
	void CToolbar::OnDragOut( NMTOOLBAR* pHdr )
	{
		_WINQ_FCONTEXT( "CToolbar::OnDragOut" );
		QOR_PP_UNREF( pHdr );
	}

	//--------------------------------------------------------------------------------
	long CToolbar::OnDropDown( NMTOOLBAR* pHdr )
	{
		_WINQ_FCONTEXT( "CToolbar::OnDropDown" );
		QOR_PP_UNREF( pHdr );
		return 1;//TBDDRET_NODEFAULT;
	}

	//--------------------------------------------------------------------------------
	void CToolbar::OnEndAdjust( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CToolbar::OnEndAdjust" );
		QOR_PP_UNREF( pHdr );
	}

	//--------------------------------------------------------------------------------
	void CToolbar::OnEndDrag( NMTOOLBAR* pHdr )
	{
		_WINQ_FCONTEXT( "CToolbar::OnEndDrag" );
		QOR_PP_UNREF( pHdr );
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::OnGetButtonInfo( NMTOOLBAR* pHdr )
	{
		_WINQ_FCONTEXT( "CToolbar::OnGetButtonInfo" );
		QOR_PP_UNREF( pHdr );
		return false;
	}

	//--------------------------------------------------------------------------------
	void CToolbar::OnGetDispInfo( NMTBDISPINFO* pHdr )
	{
		_WINQ_FCONTEXT( "CToolbar::OnGetDispInfo" );
		QOR_PP_UNREF( pHdr );
	}

	//--------------------------------------------------------------------------------
	void CToolbar::OnGetInfoTip( NMTBGETINFOTIP* pHdr )
	{
		_WINQ_FCONTEXT( "CToolbar::OnGetInfoTip" );
		QOR_PP_UNREF( pHdr );
	}

	//--------------------------------------------------------------------------------
	void CToolbar::OnGetObject( NMOBJECTNOTIFY* pHdr )
	{
		_WINQ_FCONTEXT( "CToolbar::OnGetObject" );
		QOR_PP_UNREF( pHdr );
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::OnHotItemChange( NMTBHOTITEM* pHdr )
	{
		_WINQ_FCONTEXT( "CToolbar::OnHotItemChange" );
		QOR_PP_UNREF( pHdr );
		return true;
	}

	//--------------------------------------------------------------------------------
	long CToolbar::OnInitCustomize( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CToolbar::OnInitCustomize" );
		QOR_PP_UNREF( pHdr );
		return 0x00000001;//TBNRF_HIDEHELP;
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::OnQueryDelete( NMTOOLBAR* pHdr )
	{
		_WINQ_FCONTEXT( "CToolbar::OnQueryDelete" );
		QOR_PP_UNREF( pHdr );
		return true;
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::OnQueryInsert( NMTOOLBAR* pHdr )
	{
		_WINQ_FCONTEXT( "CToolbar::OnQueryInsert" );
		QOR_PP_UNREF( pHdr );
		return true;
	}

	//--------------------------------------------------------------------------------
	void CToolbar::OnReset( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CToolbar::OnReset" );
		QOR_PP_UNREF( pHdr );
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::OnRestore( NMTBRESTORE* pHdr )
	{
		_WINQ_FCONTEXT( "CToolbar::OnRestore" );
		QOR_PP_UNREF( pHdr );
		return true;
	}

	//--------------------------------------------------------------------------------
	void CToolbar::OnSave( NMTBSAVE* pHdr )
	{
		_WINQ_FCONTEXT( "CToolbar::OnSave" );
		QOR_PP_UNREF( pHdr );
	}

	//--------------------------------------------------------------------------------
	void CToolbar::OnToolbarChange( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CToolbar::OnToolbarChange" );
		QOR_PP_UNREF( pHdr );
	}

	//--------------------------------------------------------------------------------		
	long CToolbar::OnUnknownNotification( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CToolbar::OnUnknownNotification" );
		QOR_PP_UNREF( pHdr );
		long lResult = 0;
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CToolbar::AddBitmap( int nButtons, TBADDBITMAP& TBBitmap )
	{
		_WINQ_FCONTEXT( "CToolbar::AddBitmap" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_ADDBITMAP, 
			static_cast< Cmp_uint_ptr >( nButtons ), reinterpret_cast< Cmp_long_ptr >( &TBBitmap ) );
		return lResult;
	}
			
	//--------------------------------------------------------------------------------
	bool CToolbar::AddButtons( unsigned int uiNumButtons, TBBUTTON* paButtons )
	{
		_WINQ_FCONTEXT( "CToolbar::AddButtons" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_ADDBUTTONS, 
			static_cast< Cmp_uint_ptr >( uiNumButtons ), reinterpret_cast< Cmp_long_ptr >( paButtons ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CToolbar::AddString( InstanceHandle hInst, Cmp_long_ptr idString )
	{
		_WINQ_FCONTEXT( "CToolbar::AddString" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_ADDSTRING, 
			reinterpret_cast< Cmp_uint_ptr >( hInst ), idString );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	void CToolbar::AutoSize()
	{
		_WINQ_FCONTEXT( "CToolbar::AutoSize" );
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_AUTOSIZE, 0, 0);
	}

	//--------------------------------------------------------------------------------
	long CToolbar::ButtonCount()
	{
		_WINQ_FCONTEXT( "CToolbar::ButtonCount" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_BUTTONCOUNT, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	void CToolbar::ButtonStructSize( int cbSize )
	{
		_WINQ_FCONTEXT( "CToolbar::ButtonStructSize" );
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_BUTTONSTRUCTSIZE, 
			static_cast< Cmp_uint_ptr >( cbSize ), 0 );
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::ChangeBitmap( int idButton, unsigned short wBitmap )
	{
		_WINQ_FCONTEXT( "CToolbar::ChangeBitmap" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_CHANGEBITMAP, 
			static_cast< Cmp_uint_ptr >( idButton ), MakeLParam( wBitmap, 0 ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::CheckButton( int idButton, bool bCheckFlag )
	{
		_WINQ_FCONTEXT( "CToolbar::CheckButton" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_CHECKBUTTON, 
			static_cast< Cmp_uint_ptr >( idButton ), MakeLParam( bCheckFlag ? 1 : 0, 0 ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CToolbar::CommandToIndex( int idButton )
	{
		_WINQ_FCONTEXT( "CToolbar::CommandToIndex" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_COMMANDTOINDEX, 
			static_cast< Cmp_uint_ptr >( idButton ), 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	void CToolbar::Customize()
	{
		_WINQ_FCONTEXT( "CToolbar::Customize" );
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_CUSTOMIZE, 0, 0);
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::DeleteButton( int iButton )
	{
		_WINQ_FCONTEXT( "CToolbar::DeleteButton" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_DELETEBUTTON, 
			static_cast< Cmp_uint_ptr >( iButton ), 0 ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::EnableButton( int idButton, bool bEnable )
	{
		_WINQ_FCONTEXT( "CToolbar::EnableButton" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_ENABLEBUTTON, 
			static_cast< Cmp_uint_ptr >( idButton ), MakeLong( bEnable ? 1 : 0, 0 ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::GetAnchorHighlight()
	{
		_WINQ_FCONTEXT( "CToolbar::GetAnchorHighlight" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0400 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_GETANCHORHIGHLIGHT, 0, 0 ) ? true : false );
#endif//( _WIN32_IE >= 0x0400 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CToolbar::GetBitmap( int idButton )
	{
		_WINQ_FCONTEXT( "CToolbar::GetBitmap" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_GETBITMAP, 
			static_cast< Cmp_uint_ptr >( idButton ), 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CToolbar::GetBitmapFlags()
	{
		_WINQ_FCONTEXT( "CToolbar::GetBitmapFlags" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_GETBITMAPFLAGS, 0, 0 );					
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::GetButton( int iButton, TBBUTTON& TBButton )
	{
		_WINQ_FCONTEXT( "CToolbar::GetButton" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_GETBUTTON,
			static_cast< Cmp_uint_ptr >( iButton ), reinterpret_cast< Cmp_long_ptr >( &TBButton ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CToolbar::GetButtonInfo( int idButton, TBBUTTONINFO& ButtonInfo )
	{
		_WINQ_FCONTEXT( "CToolbar::GetButtonInfo" );
		long lResult = -1;
#if		( _WIN32_IE >= 0x0400 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_GETBUTTONINFO,
			static_cast< Cmp_uint_ptr >( idButton ), reinterpret_cast< Cmp_long_ptr >( &ButtonInfo ) );
#else
		__QCMP_UNREF( ButtonInfo );
		__QCMP_UNREF( idButton );
#endif//( _WIN32_IE >= 0x0400 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CToolbar::GetButtonSize()
	{
		_WINQ_FCONTEXT( "CToolbar::GetButtonSize" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_GETBUTTONSIZE, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CToolbar::GetButtonText( int idButton, TCHAR* strText )
	{
		_WINQ_FCONTEXT( "CToolbar::GetButtonText" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_GETBUTTONTEXT, 
			static_cast< Cmp_uint_ptr >( idButton ), reinterpret_cast< Cmp_long_ptr >( strText ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::GetColourScheme( COLORSCHEME& ColourScheme )
	{
		_WINQ_FCONTEXT( "CToolbar::GetColourScheme" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0400 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_GETCOLORSCHEME, 
			0, reinterpret_cast< Cmp_long_ptr >( &ColourScheme ) ) ? true : false );
#else
		__QCMP_UNREF( ColourScheme );
#endif//( _WIN32_IE >= 0x0400 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CToolbar::GetDisabledImageList()
	{
		_WINQ_FCONTEXT( "CToolbar::GetDisabledImageList" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_GETDISABLEDIMAGELIST, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CToolbar::GetExtendedStyle()
	{
		_WINQ_FCONTEXT( "CToolbar::GetExtendedStyle" );
		long lResult = 0;
#if		( _WIN32_IE >= 0x0400 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_GETEXTENDEDSTYLE, 0, 0 );
#endif//( _WIN32_IE >= 0x0400 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CToolbar::GetHotImageList()
	{
		_WINQ_FCONTEXT( "CToolbar::GetHotImageList" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_GETHOTIMAGELIST, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CToolbar::GetHotItem()
	{
		_WINQ_FCONTEXT( "CToolbar::GetHotItem" );
		long lResult = -1;
#if		( _WIN32_IE >= 0x0400 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_GETHOTITEM, 0, 0 );
#endif//( _WIN32_IE >= 0x0400 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CToolbar::GetImageList()
	{
		_WINQ_FCONTEXT( "CToolbar::GetImageList" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_GETIMAGELIST, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	void CToolbar::GetInsertMark( TBINSERTMARK InsertMark )
	{
		_WINQ_FCONTEXT( "CToolbar::GetInsertMark" );
#if		( _WIN32_IE >= 0x0400 )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_GETINSERTMARK, 0, 
			reinterpret_cast< Cmp_long_ptr >( &InsertMark ) );				
#else
		__QCMP_UNREF( InsertMark );
#endif//( _WIN32_IE >= 0x0400 )
	}

	//--------------------------------------------------------------------------------
	unsigned long CToolbar::GetInsertMarkColour()
	{
		_WINQ_FCONTEXT( "CToolbar::GetInsertMarkColour" );
		unsigned long Result = 0;
#if		( _WIN32_IE >= 0x0400 )
		Result = static_cast< unsigned long >( 
			m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_GETINSERTMARKCOLOR, 0, 0 ) );
#endif//( _WIN32_IE >= 0x0400 )
		return Result;
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::GetItemRect( int iButton, CRectangle& rcItem )
	{
		_WINQ_FCONTEXT( "CToolbar::GetItemRect" );
		bool bResult = false;
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_GETITEMRECT, 
			static_cast< Cmp_uint_ptr >( iButton ), reinterpret_cast< Cmp_long_ptr >( &rcItem ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::GetMaxSize( SIZE& szTotal )
	{
		_WINQ_FCONTEXT( "CToolbar::GetMaxSize" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0400 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_GETMAXSIZE, 0, 
			reinterpret_cast< Cmp_long_ptr >( &szTotal ) ) ? true : false );
#else
		__QCMP_UNREF( szTotal );
#endif//( _WIN32_IE >= 0x0400 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CToolbar::GetMetrics( TBMETRICS& Metrics )
	{				
		_WINQ_FCONTEXT( "CToolbar::GetMetrics" );
#if		( _WIN32_WINNT >= 0x0501 )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_GETMETRICS, 0, 
			reinterpret_cast< Cmp_long_ptr >( &Metrics ) );
#else
		__QCMP_UNREF( Metrics );
#endif//( _WIN32_WINNT >= 0x0501 )
	}

	//--------------------------------------------------------------------------------
	long CToolbar::GetObject( const GUID& iid, void** ppvObject )
	{				
		_WINQ_FCONTEXT( "CToolbar::GetObject" );
		long hr = E_NotImpl;
#if		( _WIN32_IE >= 0x0400 )
		hr = static_cast< long >(
			m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_GETOBJECT, 
			reinterpret_cast< Cmp_uint_ptr >( &( iid ) ), reinterpret_cast< Cmp_long_ptr >( ppvObject ) ) );
#else
		__QCMP_UNREF( ppvObject );
		__QCMP_UNREF( iid );
#endif//( _WIN32_IE >= 0x0400 )
		return hr;
	}

	//--------------------------------------------------------------------------------
	long CToolbar::GetPadding()
	{				
		_WINQ_FCONTEXT( "CToolbar::GetPadding" );
		long lResult = 0;
#if		( _WIN32_IE >= 0x0400 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_GETPADDING, 0, 0 );
#endif//( _WIN32_IE >= 0x0400 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CToolbar::GetPressedImageList()
	{				
		_WINQ_FCONTEXT( "CToolbar::GetPressedImageList" );
		long lResult = 0;
#if		( _WIN32_WINNT >= 0x600 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_GETPRESSEDIMAGELIST, 0, 0 );
#endif//( _WIN32_WINNT >= 0x600 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::GetRect( int iID, CRectangle& rcButton )
	{				
		_WINQ_FCONTEXT( "CToolbar::GetRect" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_GETRECT, 
			static_cast< Cmp_uint_ptr >( iID ), reinterpret_cast< Cmp_long_ptr >( &rcButton ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CToolbar::GetRows()
	{				
		_WINQ_FCONTEXT( "CToolbar::GetRows" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_GETROWS, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CToolbar::GetState( int idButton )
	{				
		_WINQ_FCONTEXT( "CToolbar::GetState" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_GETSTATE, 
			static_cast< Cmp_uint_ptr >( idButton ), 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CToolbar::GetString( unsigned short cchMax, unsigned short wString, TCHAR* strBuffer )
	{				
		_WINQ_FCONTEXT( "CToolbar::GetString" );
		long lResult = 0;
#if		( _WIN32_IE >= 0x0500 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_GETSTRING, 
			MakeWParam( cchMax, wString ), reinterpret_cast< Cmp_long_ptr >( strBuffer ) );
#else
		__QCMP_UNREF( strBuffer );
		__QCMP_UNREF( wString );
		__QCMP_UNREF( cchMax );
#endif//( _WIN32_IE >= 0x0500 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CToolbar::GetStyle()
	{				
		_WINQ_FCONTEXT( "CToolbar::GetStyle" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_GETSTYLE, 0, 0 );					
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CToolbar::GetTextRows()
	{	
		_WINQ_FCONTEXT( "CToolbar::GetTextRows" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_GETTEXTROWS, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	COSWindow::refType CToolbar::GetToolTips()
	{				
		_WINQ_FCONTEXT( "CToolbar::GetToolTips" );
		return COSWindow::FromHandle( CWindowHandle::refType( new CWindowHandle( 0, (void*)( m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_GETTOOLTIPS, 0, 0 ) ) ), true ) );
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::GetUnicodeFormat()
	{				
		_WINQ_FCONTEXT( "CToolbar::GetUnicodeFormat" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0400 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_GETUNICODEFORMAT, 0, 0 ) ? true : false );
#endif//( _WIN32_IE >= 0x0400 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::HideButton( int idButton, bool bHide )
	{				
		_WINQ_FCONTEXT( "CToolbar::HideButton" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_HIDEBUTTON,
			static_cast< Cmp_uint_ptr >( idButton ), MakeLParam( bHide ? 1 : 0, 0 ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CToolbar::HitTest( POINT& HitPoint )
	{				
		_WINQ_FCONTEXT( "CToolbar::HitTest" );
		long lResult = -1;
#if		( _WIN32_IE >= 0x0400 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_HITTEST, 0,
			reinterpret_cast< Cmp_long_ptr >( &HitPoint ) );
#else
		__QCMP_UNREF( HitPoint );
#endif//( _WIN32_IE >= 0x0400 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::Indeterminate( int idButton, bool bIndeterminate )
	{				
		_WINQ_FCONTEXT( "CToolbar::Indeterminate" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_INDETERMINATE, 
			static_cast< Cmp_uint_ptr >( idButton ), MakeLParam( bIndeterminate ? 1 : 0, 0 ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::InsertButton( int iButton, TBBUTTON& NewButton )
	{				
		_WINQ_FCONTEXT( "CToolbar::InsertButton" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_INSERTBUTTON, 
			static_cast< Cmp_uint_ptr >( iButton ), reinterpret_cast< Cmp_long_ptr >( &NewButton ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::InsertMarkHitTest( POINT& HitPoint, TBINSERTMARK& InsertMark )
	{				
		_WINQ_FCONTEXT( "CToolbar::InsertMarkHitTest" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0400 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_INSERTMARKHITTEST, 
			reinterpret_cast< Cmp_uint_ptr >( &HitPoint ), reinterpret_cast< Cmp_long_ptr >( &InsertMark ) ) ? true : false );
#else
		__QCMP_UNREF( InsertMark );
		__QCMP_UNREF( HitPoint );
#endif//( _WIN32_IE >= 0x0400 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::IsButtonChecked( int idButton )
	{				
		_WINQ_FCONTEXT( "CToolbar::IsButtonChecked" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_ISBUTTONCHECKED, 
			static_cast< Cmp_uint_ptr >( idButton ), 0 ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::IsButtonEnabled( int idButton )
	{				
		_WINQ_FCONTEXT( "CToolbar::IsButtonEnabled" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_ISBUTTONENABLED, 
			static_cast< Cmp_uint_ptr >( idButton ), 0 ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::IsButtonHidden( int idButton )
	{				
		_WINQ_FCONTEXT( "CToolbar::IsButtonHidden" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_ISBUTTONHIDDEN, 
			static_cast< Cmp_uint_ptr >( idButton ), 0 ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::IsButtonHighlighted( int idButton )
	{				
		_WINQ_FCONTEXT( "CToolbar::IsButtonHighlighted" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0400 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_ISBUTTONHIGHLIGHTED, 
			static_cast< Cmp_uint_ptr >( idButton ), 0 ) ? true : false );
#else
		__QCMP_UNREF( idButton );
#endif//( _WIN32_IE >= 0x0400 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::IsButtonIndeterminate( int idButton )
	{				
		_WINQ_FCONTEXT( "CToolbar::IsButtonIndeterminate" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_ISBUTTONINDETERMINATE, 
			static_cast< Cmp_uint_ptr >( idButton ), 0 ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::IsButtonPressed( int idButton )
	{				
		_WINQ_FCONTEXT( "CToolbar::IsButtonPressed" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_ISBUTTONPRESSED, 
			static_cast< Cmp_uint_ptr >( idButton ), 0 ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CToolbar::LoadImages( int iBitmapID )
	{				
		_WINQ_FCONTEXT( "CToolbar::LoadImages" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_LOADIMAGES, 
			static_cast< Cmp_uint_ptr >( iBitmapID ), reinterpret_cast< Cmp_long_ptr >( HINST_COMMCTRL ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::MapAccelerator( TCHAR chAccel, unsigned int* puiBtnId )
	{				
		_WINQ_FCONTEXT( "CToolbar::MapAccelerator" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0400 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_MAPACCELERATOR, 
			static_cast< Cmp_uint_ptr >( chAccel ), reinterpret_cast< Cmp_long_ptr >( puiBtnId ) ) ? true : false );
#else
		__QCMP_UNREF( puiBtnId );
		__QCMP_UNREF( chAccel );
#endif//( _WIN32_IE >= 0x0400 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::MarkButton( int idButton, bool bHighlight )
	{				
		_WINQ_FCONTEXT( "CToolbar::MarkButton" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0400 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_MARKBUTTON, 
			static_cast< Cmp_uint_ptr >( idButton ), MakeLong( bHighlight ? 1 : 0, 0 ) ) ? true : false );
#else
		__QCMP_UNREF( bHighlight );
		__QCMP_UNREF( idButton );
#endif//( _WIN32_IE >= 0x0400 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::MoveButton( unsigned int uiOldPos, unsigned int uiNewPos )
	{				
		_WINQ_FCONTEXT( "CToolbar::MoveButton" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0400 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_MOVEBUTTON, 
			static_cast< Cmp_uint_ptr >( uiOldPos ), static_cast< Cmp_long_ptr >( uiNewPos ) ) ? true : false );
#else
		__QCMP_UNREF( uiNewPos );
		__QCMP_UNREF( uiOldPos );
#endif//( _WIN32_IE >= 0x0400 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::PressButton( int idButton, bool bPress )
	{				
		_WINQ_FCONTEXT( "CToolbar::PressButton" );
		bool bResult = false;
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_PRESSBUTTON, 
			static_cast< Cmp_uint_ptr >( idButton ), MakeLong( bPress ? true : false, 0 ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::ReplaceBitmap( TBREPLACEBITMAP& ReplaceBitmap )
	{				
		_WINQ_FCONTEXT( "CToolbar::ReplaceBitmap" );
		bool bResult = false;
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_REPLACEBITMAP, 0,
			reinterpret_cast< Cmp_long_ptr >( &ReplaceBitmap ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CToolbar::SaveRestore( bool bSave, TBSaveParams& SaveParams )
	{				
		_WINQ_FCONTEXT( "CToolbar::SaveRestore" );
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_SAVERESTORE, 
			static_cast< Cmp_uint_ptr >( bSave ? 1 : 0 ), reinterpret_cast< Cmp_long_ptr >( &SaveParams ) );
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::SetAnchorHighlight( bool bAnchor )
	{				
		_WINQ_FCONTEXT( "CToolbar::SetAnchorHighlight" );
		bool bPrev = false;
#if		( _WIN32_IE >= 0x0400 ) 
		bPrev = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_SETANCHORHIGHLIGHT, 
			static_cast< Cmp_uint_ptr >( bAnchor ? 1 : 0 ), 0 ) ? true : false );
#else
		__QCMP_UNREF( bAnchor );
#endif//( _WIN32_IE >= 0x0400 ) 
		return bPrev;
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::SetBitmapSize( unsigned short wWidth, unsigned short wHeight )
	{				
		_WINQ_FCONTEXT( "CToolbar::SetBitmapSize" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_SETBITMAPSIZE, 
			0, MakeLong( wWidth, wHeight ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::SetButtonInfo( int iID, TBBUTTONINFO& ButtonInfo )
	{				
		_WINQ_FCONTEXT( "CToolbar::SetButtonInfo" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0400 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_SETBUTTONINFO, 
			static_cast< Cmp_uint_ptr >( iID ), reinterpret_cast< Cmp_long_ptr >( &ButtonInfo ) ) ? true : false );
#else
		__QCMP_UNREF( ButtonInfo );
		__QCMP_UNREF( iID );
#endif//( _WIN32_IE >= 0x0400 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::SetButtonSize( unsigned short wWidth, unsigned short wHeight )
	{				
		_WINQ_FCONTEXT( "CToolbar::SetButtonSize" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_SETBUTTONSIZE, 
			0, MakeLong( wWidth, wHeight ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::SetButtonWidth( unsigned short wMin, unsigned short wMax )
	{				
		_WINQ_FCONTEXT( "CToolbar::SetButtonWidth" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_SETBUTTONWIDTH, 
			0, MakeLong( wMin, wMax ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::SetCommandID( unsigned int uiIndex, unsigned int uiCmdID )
	{				
		_WINQ_FCONTEXT( "CToolbar::SetCommandID" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_SETCMDID, 
			static_cast< Cmp_uint_ptr >( uiIndex ), static_cast< Cmp_long_ptr >( uiCmdID ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CToolbar::SetColourScheme( COLORSCHEME& ColourScheme )
	{				
		_WINQ_FCONTEXT( "CToolbar::SetColourScheme" );
#if		( _WIN32_IE >= 0x0400 )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_SETCOLORSCHEME, 0,
			reinterpret_cast< Cmp_long_ptr >( &ColourScheme ) );
#else
		__QCMP_UNREF( ColourScheme );
#endif//( _WIN32_IE >= 0x0400 )
	}

	//--------------------------------------------------------------------------------
	long CToolbar::SetDisabledImageList( CImageList::refType ImageList )
	{				
		_WINQ_FCONTEXT( "CToolbar::SetDisabledImageList" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_SETDISABLEDIMAGELIST, 0,
			reinterpret_cast< Cmp_long_ptr >( ImageList->Handle()->Use() ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CToolbar::SetDrawTextFlags( unsigned long dwFlags, unsigned long dwMask )
	{				
		_WINQ_FCONTEXT( "CToolbar::SetDrawTextFlags" );
		long lResult = 0;
#if		( _WIN32_IE >= 0x0400 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_SETDRAWTEXTFLAGS,
			static_cast< Cmp_uint_ptr >( dwMask ), static_cast< Cmp_long_ptr >( dwFlags ) );
#else
		__QCMP_UNREF( dwMask );
		__QCMP_UNREF( dwFlags );
#endif//( _WIN32_IE >= 0x0400 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CToolbar::SetExtendedStyle( unsigned long dwExStyle )
	{				
		_WINQ_FCONTEXT( "CToolbar::SetExtendedStyle" );
		long lResult = 0;
#if		( _WIN32_IE >= 0x0400 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_SETEXTENDEDSTYLE, 0,
			static_cast< Cmp_long_ptr >( dwExStyle ) );
#else
		__QCMP_UNREF( dwExStyle );
#endif//( _WIN32_IE >= 0x0400 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CToolbar::SetHotImageList( CImageList::refType ImageList )
	{				
		_WINQ_FCONTEXT( "CToolbar::SetHotImageList" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_SETHOTIMAGELIST, 0,
			reinterpret_cast< Cmp_long_ptr >( ImageList->Handle()->Use() ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CToolbar::SetHotItem( int iIndex )
	{				
		_WINQ_FCONTEXT( "CToolbar::SetHotItem" );
		long lResult = -1;
#if		( _WIN32_IE >= 0x0400 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_SETHOTITEM,
			static_cast< Cmp_uint_ptr >( iIndex ), 0 );
#else
		__QCMP_UNREF( iIndex );
#endif//( _WIN32_IE >= 0x0400 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CToolbar::SetImageList( CImageList::refType ImageList, int iImageId )
	{				
		_WINQ_FCONTEXT( "CToolbar::SetImageList" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_SETIMAGELIST,
			static_cast< Cmp_uint_ptr >( iImageId ), reinterpret_cast< Cmp_long_ptr >( ImageList->Handle()->Use() ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::SetIndent( int iIndent )
	{				
		_WINQ_FCONTEXT( "CToolbar::SetIndent" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_SETINDENT,
			static_cast< Cmp_uint_ptr >( iIndent ), 0 ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CToolbar::SetInsertMark( TBINSERTMARK& InsertMark )
	{	
		_WINQ_FCONTEXT( "CToolbar::SetInsertMark" );
#if		( _WIN32_IE >= 0x0400 )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_SETINSERTMARK,
			0, reinterpret_cast< Cmp_long_ptr >( &InsertMark ) );
#else
		__QCMP_UNREF( InsertMark );
#endif//( _WIN32_IE >= 0x0400 )
	}

	//--------------------------------------------------------------------------------
	unsigned long CToolbar::SetInsertMarkColour( unsigned long clrInsertMark )
	{				
		_WINQ_FCONTEXT( "CToolbar::SetInsertMarkColour" );
		unsigned long Result = 0;
#if		( _WIN32_IE >= 0x0400 )
		Result = static_cast< unsigned long >( 
			m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_SETINSERTMARKCOLOR,
			0, static_cast< Cmp_long_ptr >( clrInsertMark) ) );
#else
		__QCMP_UNREF( clrInsertMark );
#endif//( _WIN32_IE >= 0x0400 )
		return Result;
	}

	//--------------------------------------------------------------------------------
	void CToolbar::SetListGap( Cmp_uint_ptr PixelGap )
	{				
		_WINQ_FCONTEXT( "CToolbar::SetListGap" );
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_SETLISTGAP, PixelGap, 0 );				
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::SetMaxTextRows( int iMax )
	{				
		_WINQ_FCONTEXT( "CToolbar::SetMaxTextRows" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_SETMAXTEXTROWS,
			static_cast< Cmp_uint_ptr >( iMax ), 0 ) ? true : false );				
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CToolbar::SetMetrics( TBMETRICS& Metrics )
	{				
		_WINQ_FCONTEXT( "CToolbar::SetMetrics" );
#if		( _WIN32_WINNT >= 0x0501 )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_SETMETRICS,
			0, reinterpret_cast< Cmp_long_ptr >( &Metrics ) );
#else
		__QCMP_UNREF( Metrics );
#endif//( _WIN32_WINNT >= 0x0501 )
	}

	//--------------------------------------------------------------------------------
	long CToolbar::SetPadding( unsigned short wX, unsigned short wY )
	{				
		_WINQ_FCONTEXT( "CToolbar::SetPadding" );
		long lResult = 0;
#if		( _WIN32_IE >= 0x0400 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_SETPADDING,
			0, MakeLParam( wX, wY ) );
#else
		__QCMP_UNREF( wY );
		__QCMP_UNREF( wX );
#endif//( _WIN32_IE >= 0x0400 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	COSWindow::refType CToolbar::SetParent( COSWindow::refType Parent )
	{	
		_WINQ_FCONTEXT( "CToolbar::SetParent" );
		return COSWindow::FromHandle( CWindowHandle::refType( new CWindowHandle( 0, (void*)( m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_SETPARENT, reinterpret_cast< Cmp_uint_ptr >( Parent->Handle()->Use() ), 0 ) ) ) ) );
	}

	//--------------------------------------------------------------------------------
	long CToolbar::SetPressedImageList( CImageList::refType ImageList, int iImageID )
	{				
		_WINQ_FCONTEXT( "CToolbar::SetPressedImageList" );
		long lResult = 0;
#if		( _WIN32_WINNT >= 0x600 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_SETPRESSEDIMAGELIST,
			static_cast< Cmp_uint_ptr >( iImageID ), reinterpret_cast< Cmp_long_ptr >( ImageList->Handle()->Use() ) );
#else
		__QCMP_UNREF( iImageID );
		__QCMP_UNREF( hImageList );
#endif//( _WIN32_WINNT >= 0x600 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	void CToolbar::SetRows( unsigned short wRows, bool bMore, CRectangle& rcToolbar )
	{				
		_WINQ_FCONTEXT( "CToolbar::SetRows" );
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_SETROWS,
			MakeWParam( wRows, bMore ? 1 : 0 ), reinterpret_cast< Cmp_long_ptr >( &rcToolbar ) );
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::SetState( int idButton, unsigned short wState )
	{				
		_WINQ_FCONTEXT( "CToolbar::SetState" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_SETSTATE,
			static_cast< Cmp_uint_ptr >( idButton ), MakeLong( wState, 0 ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CToolbar::SetStyle( unsigned long dwStyle )
	{	
		_WINQ_FCONTEXT( "CToolbar::SetStyle" );
		long lResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_SETSTYLE,
			0, static_cast< Cmp_long_ptr >( dwStyle ) ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	void CToolbar::SetToolTips( COSWindow::refType ToolTip )
	{				
		_WINQ_FCONTEXT( "CToolbar::SetToolTips" );
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_SETTOOLTIPS,
			reinterpret_cast< Cmp_uint_ptr >( ToolTip->Handle()->Use() ), 0 );
	}

	//--------------------------------------------------------------------------------
	bool CToolbar::SetUnicodeFormat( bool bUnicode )
	{	
		_WINQ_FCONTEXT( "CToolbar::SetUnicodeFormat" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0400 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_SETUNICODEFORMAT,
			static_cast< Cmp_uint_ptr >( bUnicode ? 1 : 0 ), 0 ) ? true : false );
#else
		__QCMP_UNREF( bUnicode );
#endif//( _WIN32_IE >= 0x0400 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CToolbar::SetWindowTheme( wchar_t* strTheme )
	{				
		_WINQ_FCONTEXT( "CToolbar::SetWindowTheme" );
#if		( _WIN32_WINNT >= 0x0501 )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TB_SETWINDOWTHEME,
			0, reinterpret_cast< Cmp_long_ptr >( strTheme ) );
#else
		__QCMP_UNREF( strTheme );
#endif//( _WIN32_WINNT >= 0x0501 )
	}

}//nsWin32

