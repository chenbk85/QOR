//WinQLScrollBarFactory.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CompilerQOR.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usafe: stored in member for later use" );
#include "WinQL/GUI/Windows/ScrollBar.h"
__QCMP_WARNING_POP

//--------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_OCLASS_LUID( CScrollBarClass );

	//--------------------------------------------------------------------------------
	CScrollBarClass::CScrollBarClass()
	{ 
		_WINQ_FCONTEXT( "CScrollBarClass::CScrollBarClass" );
	}

	//--------------------------------------------------------------------------------
	CScrollBarClass::~CScrollBarClass()
	{ 
		_WINQ_FCONTEXT( "CScrollBarClass::~CScrollBarClass" );
	}

	//--------------------------------------------------------------------------------
	bool CScrollBarClass::Preregistered()
	{ 
		_WINQ_FCONTEXT( "CScrollBarClass::Preregistered" );
		return true; 
	}

	//--------------------------------------------------------------------------------
	const TCHAR* CScrollBarClass::Name()
	{ 
		_WINQ_FCONTEXT( "CScrollBarClass::Name" );
		return _TXT( "SCROLLBAR" ); 
	}





	__QOR_IMPLEMENT_OCLASS_LUID( CScrollBarFactory );

	//--------------------------------------------------------------------------------
	CScrollBarFactory::CScrollBarFactory() : CWindowFactory()
	{
		_WINQ_FCONTEXT( "CScrollBarFactory::CScrollBarFactory" );
	}

	//--------------------------------------------------------------------------------
	CScrollBarFactory::~CScrollBarFactory()
	{
		_WINQ_FCONTEXT( "CScrollBarFactory::~CScrollBarFactory" );
	}

	//--------------------------------------------------------------------------------
	CScrollBar* CScrollBarFactory::Create()
	{
		_WINQ_FCONTEXT( "CScrollBarFactory::Instance" );
		return new CScrollBar;
	}

	//--------------------------------------------------------------------------------
	bool CScrollBarFactory::GetHorizontal()
	{
		_WINQ_FCONTEXT( "CScrollBarFactory::GetHorizontal" );
		return !GetStyleBits( SBS_VERT );
	}

	//--------------------------------------------------------------------------------
	void CScrollBarFactory::SetHorizontal( bool bFlag )
	{
		_WINQ_FCONTEXT( "CScrollBarFactory::SetHorizontal" );
		SetStyleBits( SBS_VERT, !bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CScrollBarFactory::GetVertical()
	{
		_WINQ_FCONTEXT( "CScrollBarFactory::SetVertical" );
		return GetStyleBits( SBS_VERT );
	}

	//--------------------------------------------------------------------------------
	void CScrollBarFactory::SetVertical( bool bFlag )
	{
		_WINQ_FCONTEXT( "CScrollBarFactory::SetVertical" );
		SetStyleBits( SBS_VERT, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CScrollBarFactory::GetTopAlign()
	{
		_WINQ_FCONTEXT( "CScrollBarFactory::GetTopAlign" );
		return GetStyleBits( SBS_TOPALIGN );
	}

	//--------------------------------------------------------------------------------
	void CScrollBarFactory::SetTopAlign( bool bFlag )
	{
		_WINQ_FCONTEXT( "CScrollBarFactory::SetTopAlign" );
		SetStyleBits( SBS_TOPALIGN, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CScrollBarFactory::GetLeftAlign()
	{
		_WINQ_FCONTEXT( "CScrollBarFactory::GetLeftAlign" );
		return GetStyleBits( SBS_LEFTALIGN );
	}

	//--------------------------------------------------------------------------------
	void CScrollBarFactory::SetLeftAlign( bool bFlag )
	{
		_WINQ_FCONTEXT( "CScrollBarFactory::SetLeftAlign" );
		SetStyleBits( SBS_LEFTALIGN, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CScrollBarFactory::GetBottomAlign()
	{
		_WINQ_FCONTEXT( "CScrollBarFactory::GetBottomAlign" );
		return GetStyleBits( SBS_BOTTOMALIGN );
	}

	//--------------------------------------------------------------------------------
	void CScrollBarFactory::SetBottomAlign( bool bFlag )
	{
		_WINQ_FCONTEXT( "CScrollBarFactory::SetBottomAlign" );
		SetStyleBits( SBS_BOTTOMALIGN, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CScrollBarFactory::GetRightAlign()
	{
		_WINQ_FCONTEXT( "CScrollBarFactory::GetRightAlign" );
		return GetStyleBits( SBS_RIGHTALIGN );
	}

	//--------------------------------------------------------------------------------
	void CScrollBarFactory::SetRightAlign( bool bFlag )
	{
		_WINQ_FCONTEXT( "CScrollBarFactory::SetRightAlign" );
		SetStyleBits( SBS_RIGHTALIGN, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CScrollBarFactory::GetSizeBoxTopLeftAlign()
	{
		_WINQ_FCONTEXT( "CScrollBarFactory::GetSizeBoxTopLeftAlign" );
		return GetStyleBits( SBS_SIZEBOXTOPLEFTALIGN );
	}

	//--------------------------------------------------------------------------------
	void CScrollBarFactory::SetSizeBoxTopLeftAlign( bool bFlag )
	{
		_WINQ_FCONTEXT( "CScrollBarFactory::SetSizeBoxTopLeftAlign" );
		SetStyleBits( SBS_SIZEBOXTOPLEFTALIGN, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CScrollBarFactory::GetSizeBoxBottomRightAlign()
	{
		_WINQ_FCONTEXT( "CScrollBarFactory::GetSizeBoxBottomRightAlign" );
		return GetStyleBits( SBS_SIZEBOXBOTTOMRIGHTALIGN );
	}

	//--------------------------------------------------------------------------------
	void CScrollBarFactory::SetSizeBoxBottomRightAlign( bool bFlag )
	{
		_WINQ_FCONTEXT( "CScrollBarFactory::SetSizeBoxBottomRightAlign" );
		SetStyleBits( SBS_SIZEBOXBOTTOMRIGHTALIGN, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CScrollBarFactory::GetSizeBox()
	{
		_WINQ_FCONTEXT( "CScrollBarFactory::GetSizeBox" );
		return GetStyleBits( SBS_SIZEBOX );
	}

	//--------------------------------------------------------------------------------
	void CScrollBarFactory::SetSizeBox( bool bFlag )
	{
		_WINQ_FCONTEXT( "CScrollBarFactory::SetSizeBox" );
		SetStyleBits( SBS_SIZEBOX, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CScrollBarFactory::GetSizeGrip()
	{
		_WINQ_FCONTEXT( "CScrollBarFactory::GetSizeGrip" );
		return GetStyleBits( SBS_SIZEGRIP );
	}

	//--------------------------------------------------------------------------------
	void CScrollBarFactory::SetSizeGrip( bool bFlag )
	{
		_WINQ_FCONTEXT( "CScrollBarFactory::SetSizeGrip" );
		SetStyleBits( SBS_SIZEGRIP, bFlag );
	}





	__QOR_IMPLEMENT_OCLASS_LUID( CScrollBar );

	//--------------------------------------------------------------------------------
	CScrollBar::CScrollBar() : CWinCtrlWindow()
	{				
		_WINQ_FCONTEXT( "CScrollBar::CScrollBar" );
	}

	//--------------------------------------------------------------------------------
	CScrollBar::~CScrollBar()
	{
		_WINQ_FCONTEXT( "CScrollBar::~CScrollBar" );
	}

	//--------------------------------------------------------------------------------
	bool CScrollBar::EnableArrows( Cmp_uint_ptr ArrowFlags )
	{
		_WINQ_FCONTEXT( "CScrollBar::EnableArrows" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) SBM_ENABLE_ARROWS, ArrowFlags, 0 ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CScrollBar::GetPos()
	{
		_WINQ_FCONTEXT( "CScrollBar::GetPos" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) SBM_GETPOS, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	void CScrollBar::GetRange( unsigned long& dwMinPos, unsigned long& dwMaxPos )
	{
		_WINQ_FCONTEXT( "CScrollBar::GetRange" );
		m_Win32MsgHandler.Send( Ref(), (unsigned int) SBM_GETRANGE, reinterpret_cast< Cmp_uint_ptr >( &dwMinPos ), reinterpret_cast< Cmp_long_ptr >( &dwMaxPos ) );				
	}

	//--------------------------------------------------------------------------------
	bool CScrollBar::GetBarInfo( SCROLLBARINFO& Info )
	{
		_WINQ_FCONTEXT( "CScrollBar::GetBarInfo" );
		bool bResult = false;
#if		( _WIN32_WINNT >= 0x0501 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) SBM_GETSCROLLBARINFO, 0, reinterpret_cast< Cmp_long_ptr >( &Info ) ) ? true : false );
#else
		__QCMP_UNREF( Info );
#endif//( _WIN32_WINNT >= 0x0501 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CScrollBar::GetScrollInfo( SCROLLINFO& Info )
	{
		_WINQ_FCONTEXT( "CScrollBar::GetScrollInfo" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) SBM_GETSCROLLINFO, 0, reinterpret_cast< Cmp_long_ptr >( &Info ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CScrollBar::SetPos( Cmp_uint_ptr NewPos, bool bRedraw )
	{
		_WINQ_FCONTEXT( "CScrollBar::SetPos" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) SBM_SETPOS, NewPos, static_cast< Cmp_long_ptr >( bRedraw ? 1 : 0 ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CScrollBar::SetRange( Cmp_uint_ptr NewMin, Cmp_long_ptr NewMax )
	{
		_WINQ_FCONTEXT( "CScrollBar::SetRange" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) SBM_SETRANGE, NewMin, NewMax );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CScrollBar::SetRangeRedraw( Cmp_uint_ptr NewMin, Cmp_long_ptr NewMax )
	{
		_WINQ_FCONTEXT( "CScrollBar::SetRangeRedraw" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) SBM_SETRANGEREDRAW, NewMin, NewMax );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CScrollBar::SetScrollInfo( SCROLLINFO& Info, bool bRedraw )
	{
		_WINQ_FCONTEXT( "CScrollBar::SetScrollInfo" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) SBM_SETSCROLLINFO, static_cast< Cmp_uint_ptr >( bRedraw ? 1 : 0 ), reinterpret_cast< Cmp_long_ptr >( &Info ) );
		return lResult;
	}

}//nsWin32

