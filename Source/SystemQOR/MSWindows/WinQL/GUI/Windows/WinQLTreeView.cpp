//WinQLTreeView.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CompilerQOR.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usafe: stored in member for later use" );
#include "WinQL/GUI/Windows/TreeView.h"
__QCMP_WARNING_POP

//--------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_OCLASS_LUID( CTreeViewClass );

	//--------------------------------------------------------------------------------
	CTreeViewClass::CTreeViewClass() : CCommonCtrlClass( CCommonCtrl::CCTREEVIEW_CLASSES, _TXT( "SysTreeView" ) )
	{
		_WINQ_FCONTEXT( "CTreeViewClass::CTreeViewClass" );
	}

	//--------------------------------------------------------------------------------
	CTreeViewClass::~CTreeViewClass()
	{
		_WINQ_FCONTEXT( "CTreeViewClass::~CTreeViewClass" );
	}




	__QOR_IMPLEMENT_OCLASS_LUID( CTreeViewFactory );

	//--------------------------------------------------------------------------------
	CTreeViewFactory::CTreeViewFactory() : CCommonCtrlFactory< CTreeView >()
	{
		_WINQ_FCONTEXT( "CTreeViewFactory::CTreeViewFactory" );
	}

	//--------------------------------------------------------------------------------
	bool CTreeViewFactory::GetHasButtons()
	{
		_WINQ_FCONTEXT( "CTreeViewFactory::GetHasButtons" );
		bool bResult = false;
		bResult = GetStyleBits( TVS_HASBUTTONS );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CTreeViewFactory::SetHasButtons( bool bFlag )
	{
		_WINQ_FCONTEXT( "CTreeViewFactory::SetHasButtons" );
		SetStyleBits( TVS_HASBUTTONS, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CTreeViewFactory::GetHasLines()
	{
		_WINQ_FCONTEXT( "CTreeViewFactory::GetHasLines" );
		bool bResult = false;
		bResult = GetStyleBits( TVS_HASLINES );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CTreeViewFactory::SetHasLines( bool bFlag )
	{
		_WINQ_FCONTEXT( "CTreeViewFactory::SetHasLines" );
		SetStyleBits( TVS_HASLINES, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CTreeViewFactory::GetLinesAtRoot()
	{
		_WINQ_FCONTEXT( "CTreeViewFactory::GetLinesAtRoot" );
		bool bResult = false;
		bResult = GetStyleBits( TVS_LINESATROOT );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CTreeViewFactory::SetLinesAtRoot( bool bFlag )
	{
		_WINQ_FCONTEXT( "CTreeViewFactory::SetLinesAtRoot" );
		SetStyleBits( TVS_LINESATROOT, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CTreeViewFactory::GetEditLabels()
	{
		_WINQ_FCONTEXT( "CTreeViewFactory::GetEditLables" );
		bool bResult = false;
		bResult = GetStyleBits( TVS_EDITLABELS );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CTreeViewFactory::SetEditLabels( bool bFlag )
	{
		_WINQ_FCONTEXT( "CTreeViewFactory::SetEditLables" );
		SetStyleBits( TVS_EDITLABELS, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CTreeViewFactory::GetDisableDragDrop()
	{
		_WINQ_FCONTEXT( "CTreeViewFactory::GetDisableDragDrop" );
		bool bResult = false;
		bResult = GetStyleBits( TVS_DISABLEDRAGDROP );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CTreeViewFactory::SetDisableDragDrop( bool bFlag )
	{
		_WINQ_FCONTEXT( "CTreeViewFactory::SetDisableDragDrop" );
		SetStyleBits( TVS_DISABLEDRAGDROP, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CTreeViewFactory::GetShowSelAlways()
	{
		_WINQ_FCONTEXT( "CTreeViewFactory::GetShowSelAlways" );
		bool bResult = false;
		bResult = GetStyleBits( TVS_SHOWSELALWAYS );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CTreeViewFactory::SetShowSelAlways( bool bFlag )
	{
		_WINQ_FCONTEXT( "CTreeViewFactory::SetShowSelAlways" );
		SetStyleBits( TVS_SHOWSELALWAYS, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CTreeViewFactory::GetRTLReading()
	{
		_WINQ_FCONTEXT( "CTreeViewFactory::GetRTLReading" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0300 )
		bResult = GetStyleBits( TVS_RTLREADING );
#endif//( _WIN32_IE >= 0x0300 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CTreeViewFactory::SetRTLReading( bool bFlag )
	{
		_WINQ_FCONTEXT( "CTreeViewFactory::SetRTLReading" );
#if		( _WIN32_IE >= 0x0300 )
		SetStyleBits( TVS_RTLREADING, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( _WIN32_IE >= 0x0300 )
	}

	//--------------------------------------------------------------------------------
	bool CTreeViewFactory::GetNoToolTips()
	{
		_WINQ_FCONTEXT( "CTreeViewFactory::GetNoToolTips" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0300 )
		bResult = GetStyleBits( TVS_NOTOOLTIPS );
#endif//( _WIN32_IE >= 0x0300 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CTreeViewFactory::SetNoToolTips( bool bFlag )
	{
		_WINQ_FCONTEXT( "CTreeViewFactory::SetNoToolTips" );
#if		( _WIN32_IE >= 0x0300 )
		SetStyleBits( TVS_NOTOOLTIPS, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( _WIN32_IE >= 0x0300 )
	}

	//--------------------------------------------------------------------------------
	bool CTreeViewFactory::GetCheckBoxes()
	{
		_WINQ_FCONTEXT( "CTreeViewFactory::GetCheckBoxes" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0300 )
		bResult = GetStyleBits( TVS_CHECKBOXES );
#endif//( _WIN32_IE >= 0x0300 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CTreeViewFactory::SetCheckBoxes( bool bFlag )
	{
		_WINQ_FCONTEXT( "CTreeViewFactory::SetCheckBoxes" );
#if		( _WIN32_IE >= 0x0300 )
		SetStyleBits( TVS_CHECKBOXES, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( _WIN32_IE >= 0x0300 )
	}

	//--------------------------------------------------------------------------------
	bool CTreeViewFactory::GetTrackSelect()
	{
		_WINQ_FCONTEXT( "CTreeViewFactory::GetTrackSelect" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0300 )
		bResult = GetStyleBits( TVS_TRACKSELECT );
#endif//( _WIN32_IE >= 0x0300 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CTreeViewFactory::SetTrackSelect( bool bFlag )
	{
		_WINQ_FCONTEXT( "CTreeViewFactory::SetTrackSelect" );
#if		( _WIN32_IE >= 0x0300 )
		SetStyleBits( TVS_TRACKSELECT, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( _WIN32_IE >= 0x0300 )
	}

	//--------------------------------------------------------------------------------
	bool CTreeViewFactory::GetSingleExpand()
	{
		_WINQ_FCONTEXT( "CTreeViewFactory::GetSingleExpand" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0400 )
		bResult = GetStyleBits( TVS_SINGLEEXPAND );
#endif//( _WIN32_IE >= 0x0400 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CTreeViewFactory::SetSingleExpand( bool bFlag )
	{
		_WINQ_FCONTEXT( "CTreeViewFactory::SetSingleExpand" );
#if		( _WIN32_IE >= 0x0400 )
		SetStyleBits( TVS_SINGLEEXPAND, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( _WIN32_IE >= 0x0400 )
	}

	//--------------------------------------------------------------------------------
	bool CTreeViewFactory::GetInfoTip()
	{
		_WINQ_FCONTEXT( "CTreeViewFactory::GetInfoTip" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0400 )
		bResult = GetStyleBits( TVS_INFOTIP );
#endif//( _WIN32_IE >= 0x0400 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CTreeViewFactory::SetInfoTip( bool bFlag )
	{
		_WINQ_FCONTEXT( "CTreeViewFactory::SetInfoTip" );
#if		( _WIN32_IE >= 0x0400 )
		SetStyleBits( TVS_INFOTIP, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( _WIN32_IE >= 0x0400 )
	}

	//--------------------------------------------------------------------------------
	bool CTreeViewFactory::GetFullRowSelect()
	{
		_WINQ_FCONTEXT( "CTreeViewFactory::GetFullRowSelect" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0400 )
		bResult = GetStyleBits( TVS_FULLROWSELECT );
#endif//( _WIN32_IE >= 0x0400 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CTreeViewFactory::SetFullRowSelect( bool bFlag )
	{
		_WINQ_FCONTEXT( "CTreeViewFactory::SetFullRowSelect" );
#if		( _WIN32_IE >= 0x0400 )
		SetStyleBits( TVS_FULLROWSELECT, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( _WIN32_IE >= 0x0400 )
	}

	//--------------------------------------------------------------------------------
	bool CTreeViewFactory::GetNoScroll()
	{
		_WINQ_FCONTEXT( "CTreeViewFactory::GetNoScroll" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0400 )
		bResult = GetStyleBits( TVS_NOSCROLL );
#endif//( _WIN32_IE >= 0x0400 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CTreeViewFactory::SetNoScroll( bool bFlag )
	{
		_WINQ_FCONTEXT( "CTreeViewFactory::SetNoScroll" );
#if		( _WIN32_IE >= 0x0400 )
		SetStyleBits( TVS_NOSCROLL, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( _WIN32_IE >= 0x0400 )
	}

	//--------------------------------------------------------------------------------
	bool CTreeViewFactory::GetNonEvenHeight()
	{
		_WINQ_FCONTEXT( "CTreeViewFactory::GetNonEvenHeight" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0400 )
		bResult = GetStyleBits( TVS_NONEVENHEIGHT );
#endif//( _WIN32_IE >= 0x0400 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CTreeViewFactory::SetNonEvenHeight( bool bFlag )
	{
		_WINQ_FCONTEXT( "CTreeViewFactory::SetNonEvenHeight" );
#if		( _WIN32_IE >= 0x0400 )
		SetStyleBits( TVS_NONEVENHEIGHT, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( _WIN32_IE >= 0x0400 )
	}

	//--------------------------------------------------------------------------------
	bool CTreeViewFactory::GetNoHScoll()
	{
		_WINQ_FCONTEXT( "CTreeViewFactory::GetNoHScroll" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x500 )
		bResult = GetStyleBits( TVS_NOHSCROLL );
#endif//( _WIN32_IE >= 0x500 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CTreeViewFactory::SetNoHScoll( bool bFlag )
	{
		_WINQ_FCONTEXT( "CTreeViewFactory::SetNoHScroll" );
#if		( _WIN32_IE >= 0x500 )
		SetStyleBits( TVS_NOHSCROLL, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( _WIN32_IE >= 0x500 )
	}







	__QOR_IMPLEMENT_OCLASS_LUID( CTreeView );

	//--------------------------------------------------------------------------------
	CTreeView::CTreeView() : CWinCtrlWindow()
	{			
		_WINQ_FCONTEXT( "CTreeView::CTreeView" );
	}

	//--------------------------------------------------------------------------------
	CTreeView::~CTreeView()
	{
		_WINQ_FCONTEXT( "CTreeView::~CTreeView" );
	}

	//--------------------------------------------------------------------------------
	long CTreeView::OnNotify( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CTreeView::OnNotify" );
		long lResult = 0;

		if( pHdr != 0 )
		{
			switch ( pHdr->m_uiCode )
			{
			case NM_CLICK:
				{
					lResult = static_cast< long >( OnClick( pHdr ) ? 0 : 1 );
				}
				break;
			case NM_CUSTOMDRAW:
				{
					lResult = OnCustomDraw( reinterpret_cast< NMTVCUSTOMDRAW* >( pHdr ) );
				}
				break;
			case NM_DBLCLK:
				{
					lResult = static_cast< long >( OnDblClick( pHdr ) ? 0 : 1 );
				}
				break;
			case NM_KILLFOCUS:
				{
					OnKillFocus( pHdr );
				}
				break;
			case NM_RCLICK:
				{
					lResult = static_cast< long >( OnRClick( pHdr ) ? 0 : 1 );
				}
				break;
			case NM_RDBLCLK:
				{
					lResult = static_cast< long >( OnRDblClick( pHdr ) ? 0 : 1 );
				}
				break;
			case NM_RETURN:
				{
					lResult = static_cast< long >( OnReturn( pHdr ) ? 0 : 1 );
				}
				break;
#if		( _WIN32_IE >= 0x0400 )
			case NM_SETCURSOR:
				{
					lResult = static_cast< long >( OnSetCursor( reinterpret_cast< NMMOUSE* >( pHdr ) ) ? 0 : 1 );
				}
				break;
#endif//( _WIN32_IE >= 0x0400 )
			case NM_SETFOCUS:
				{
					OnSetFocus( pHdr );
				}
				break;
#if		( _WIN32_IE >= 0x0600 )
			case TVN_ASYNCDRAW:
				{
					OnAsyncDraw( reinterpret_cast< NMTVASYNCDRAW* >( pHdr ) );
				}
				break;
#endif//( _WIN32_IE >= 0x0600 )
			case TVN_BEGINDRAG:
				{
					OnBeginDrag( reinterpret_cast< NMTREEVIEW* >( pHdr ) );
				}
				break;
			case TVN_BEGINLABELEDIT:
				{
					lResult = static_cast< long >( OnBeginLabelEdit( reinterpret_cast< NMTVDISPINFO* >( pHdr ) ) ? 0 : 1 );
				}
				break;
			case TVN_BEGINRDRAG:
				{
					OnBeginRDrag( reinterpret_cast< NMTREEVIEW* >( pHdr ) );
				}
				break;
			case TVN_DELETEITEM:
				{
					OnDeleteItem( reinterpret_cast< NMTREEVIEW* >( pHdr ) );
				}
				break;
			case TVN_ENDLABELEDIT:
				{
					lResult = static_cast< long >( OnEndLabelEdit( reinterpret_cast< NMTVDISPINFO* >( pHdr ) ) ? 1 : 0 );
				}
				break;
			case TVN_GETDISPINFO:
				{
					OnGetDispInfo( reinterpret_cast< NMTVDISPINFO* >( pHdr ) );
				}
				break;
#if		( _WIN32_IE >= 0x0400 )
			case TVN_GETINFOTIP:
				{
					OnGetInfoTip( reinterpret_cast< NMTVGETINFOTIP* >( pHdr ) );
				}
				break;
#endif//( _WIN32_IE >= 0x0400 )
#if		( _WIN32_IE > 0x0600 )
			case TVN_ITEMCHANGED:
				{
					lResult = static_cast< long >( OnItemChanged( reinterpret_cast< NMTVITEMCHANGE* >( pHdr ) ) ? 0 : 1 );
				}
				break;
			case TVN_ITEMCHANGING:
				{
					lResult = static_cast< long >( OnItemChanging( reinterpret_cast< NMTVITEMCHANGE* >( pHdr ) ) ? 0 : 1 );
				}
				break;
#endif//( _WIN32_IE > 0x0600 )
			case TVN_ITEMEXPANDED:
				{
					OnItemExpanded( reinterpret_cast< NMTREEVIEW* >( pHdr ) );
				}
				break;
			case TVN_ITEMEXPANDING:
				{
					lResult = static_cast< long >( OnItemExpanding( reinterpret_cast< NMTREEVIEW* >( pHdr ) ) ? 0 : 1 );
				}
				break;
			case TVN_KEYDOWN:
				{
					lResult = static_cast< long >( OnKeyDown( reinterpret_cast< NMTVKEYDOWN* >( pHdr ) ) ? 0 : 1 );
				}
				break;
			case TVN_SELCHANGED:
				{
					OnSelChanged( reinterpret_cast< NMTREEVIEW* >( pHdr ) );
				}
				break;
			case TVN_SELCHANGING:
				{
					lResult = static_cast< long >( OnSelChanging( reinterpret_cast< NMTREEVIEW* >( pHdr ) ) ? 0 : 1 );
				}
				break;
			case TVN_SETDISPINFO:
				{
					OnSetDispInfo( reinterpret_cast< NMTVDISPINFO* >( pHdr ) );
				}
				break;
#if		( _WIN32_IE >= 0x0400 )
			case TVN_SINGLEEXPAND:
				{
					lResult = OnSingleExpand( reinterpret_cast< NMTREEVIEW* >( pHdr ) );
				}
				break;
#endif//( _WIN32_IE >= 0x0400 )
			default:
				{
					lResult = OnUnknownNotification( pHdr );
				}
				break;
			}
		}
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CTreeView::OnClick( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CTreeView::OnClick" );
		QOR_PP_UNREF( pHdr );
		return true;
	}

	//--------------------------------------------------------------------------------
	long CTreeView::OnCustomDraw( NMTVCUSTOMDRAW* pHdr )
	{
		_WINQ_FCONTEXT( "CTreeView::OnCustomDraw" );
		QOR_PP_UNREF( pHdr );
		long lResult = CDRF_DODEFAULT;
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CTreeView::OnDblClick( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CTreeView::OnDblClick" );
		QOR_PP_UNREF( pHdr );
		return true;
	}

	//--------------------------------------------------------------------------------
	void CTreeView::OnKillFocus( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CTreeView::OnKillFocus" );
		QOR_PP_UNREF( pHdr );
	}

	//--------------------------------------------------------------------------------
	bool CTreeView::OnRClick( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CTreeView::OnRClick" );
		QOR_PP_UNREF( pHdr );
		return true;
	}

	//--------------------------------------------------------------------------------
	bool CTreeView::OnRDblClick( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CTreeView::OnRDblClick" );
		QOR_PP_UNREF( pHdr );
		return true;
	}

	//--------------------------------------------------------------------------------
	bool CTreeView::OnReturn( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CTreeView::OnReturn" );
		QOR_PP_UNREF( pHdr );
		return true;
	}

	//--------------------------------------------------------------------------------
	bool CTreeView::OnSetCursor( NMMOUSE* pHdr )
	{
		_WINQ_FCONTEXT( "CTreeView::OnSetCursor" );
		QOR_PP_UNREF( pHdr );
		return true;
	}

	//--------------------------------------------------------------------------------
	void CTreeView::OnSetFocus( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CTreeView::OnSetFocus" );
		QOR_PP_UNREF( pHdr );
	}

	//--------------------------------------------------------------------------------
	void CTreeView::OnAsyncDraw( NMTVASYNCDRAW* pHdr )
	{
		_WINQ_FCONTEXT( "CTreeView::OnAsyncDraw" );
		QOR_PP_UNREF( pHdr );
	}

	//--------------------------------------------------------------------------------
	void CTreeView::OnBeginDrag( NMTREEVIEW* pHdr )
	{
		_WINQ_FCONTEXT( "CTreeView::OnBeginDrag" );
		QOR_PP_UNREF( pHdr );
	}

	//--------------------------------------------------------------------------------
	bool CTreeView::OnBeginLabelEdit( NMTVDISPINFO* pHdr )
	{
		_WINQ_FCONTEXT( "CTreeView::OnBeginLabelEdit" );
		QOR_PP_UNREF( pHdr );
		return true;
	}

	//--------------------------------------------------------------------------------
	void CTreeView::OnBeginRDrag( NMTREEVIEW* pHdr )
	{
		_WINQ_FCONTEXT( "CTreeView::OnBeginRDrag" );
		QOR_PP_UNREF( pHdr );
	}

	//--------------------------------------------------------------------------------
	void CTreeView::OnDeleteItem( NMTREEVIEW* pHdr )
	{
		_WINQ_FCONTEXT( "CTreeView::OnDeleteItem" );
		QOR_PP_UNREF( pHdr );
	}

	//--------------------------------------------------------------------------------
	bool CTreeView::OnEndLabelEdit( NMTVDISPINFO* pHdr )
	{
		_WINQ_FCONTEXT( "CTreeView::OnEndLabelEdit" );
		QOR_PP_UNREF( pHdr );
		return true;
	}

	//--------------------------------------------------------------------------------
	void CTreeView::OnGetDispInfo( NMTVDISPINFO* pHdr )
	{
		_WINQ_FCONTEXT( "CTreeView::OnGetDispInfo" );
		QOR_PP_UNREF( pHdr );
	}

	//--------------------------------------------------------------------------------
	void CTreeView::OnGetInfoTip( NMTVGETINFOTIP* pHdr )
	{
		_WINQ_FCONTEXT( "CTreeView::OnGetInfoTip" );
		QOR_PP_UNREF( pHdr );
	}

	//--------------------------------------------------------------------------------
	bool CTreeView::OnItemChanged( NMTVITEMCHANGE* pHdr )
	{
		_WINQ_FCONTEXT( "CTreeView::OnItemChanged" );
		QOR_PP_UNREF( pHdr );
		return true;
	}

	//--------------------------------------------------------------------------------
	bool CTreeView::OnItemChanging( NMTVITEMCHANGE* pHdr )
	{
		_WINQ_FCONTEXT( "CTreeView::OnItemChanging" );
		QOR_PP_UNREF( pHdr );
		return true;
	}

	//--------------------------------------------------------------------------------
	void CTreeView::OnItemExpanded( NMTREEVIEW* pHdr )
	{
		_WINQ_FCONTEXT( "CTreeView::OnItemExpanded" );
		QOR_PP_UNREF( pHdr );
	}

	//--------------------------------------------------------------------------------
	bool CTreeView::OnItemExpanding( NMTREEVIEW* pHdr )
	{
		_WINQ_FCONTEXT( "CTreeView::OnItemExpanding" );
		QOR_PP_UNREF( pHdr );
		return true;
	}

	//--------------------------------------------------------------------------------
	bool CTreeView::OnKeyDown( NMTVKEYDOWN* pHdr )
	{
		_WINQ_FCONTEXT( "CTreeView::OnKeyDown" );
		QOR_PP_UNREF( pHdr );
		return true;
	}

	//--------------------------------------------------------------------------------
	void CTreeView::OnSelChanged( NMTREEVIEW* pHdr )
	{
		_WINQ_FCONTEXT( "CTreeView::OnSelChanged" );
		QOR_PP_UNREF( pHdr );
	}

	//--------------------------------------------------------------------------------
	bool CTreeView::OnSelChanging( NMTREEVIEW* pHdr )
	{
		_WINQ_FCONTEXT( "CTreeView::OnSelChanging" );
		QOR_PP_UNREF( pHdr );
		return true;
	}

	//--------------------------------------------------------------------------------
	void CTreeView::OnSetDispInfo( NMTVDISPINFO* pHdr )
	{
		_WINQ_FCONTEXT( "CTreeView::OnSetDispInfo" );
		QOR_PP_UNREF( pHdr );
	}

	//--------------------------------------------------------------------------------
	long CTreeView::OnSingleExpand( NMTREEVIEW* pHdr )
	{
		_WINQ_FCONTEXT( "CTreeView::OnSingleExpand" );
		QOR_PP_UNREF( pHdr );
		long lResult = 0;//TVNRET_DEFAULT;
		return lResult;
	}

	//--------------------------------------------------------------------------------		
	long CTreeView::OnUnknownNotification( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CTreeView::OnUnknownNotification" );
		QOR_PP_UNREF( pHdr );
		long lResult = 0;
		return lResult;
	}

	//--------------------------------------------------------------------------------
	CImageList::refType CTreeView::CreateDragImage( HTREEITEM hItem )
	{				
		_WINQ_FCONTEXT( "CTreeView::CreateDragImage" );

		//ImageListHandle Result = reinterpret_cast< ImageListHandle >
		CImageListHandle Handle( 0, (void*)( m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_CREATEDRAGIMAGE, 0, reinterpret_cast< Cmp_long_ptr >( hItem ) ) ) );
		return CImageList::FromHandle( CImageListHandle::refType( &Handle, false ) );
	}

	//--------------------------------------------------------------------------------
	bool CTreeView::DeleteItem( HTREEITEM hItem )
	{				
		_WINQ_FCONTEXT( "CTreeView::DeleteItem" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_DELETEITEM, 
			0, reinterpret_cast< Cmp_long_ptr >( hItem ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	COSWindow::refType CTreeView::EditLabel( HTREEITEM hItem )
	{				
		_WINQ_FCONTEXT( "CTreeView::EditLabel" );
		CWindowHandle Handle( 0, (void*)( m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_EDITLABEL, 0, reinterpret_cast< Cmp_long_ptr >( hItem ) ) ) );
		return COSWindow::FromHandle( CWindowHandle::refType( &Handle, false ) );
	}

	//--------------------------------------------------------------------------------
	bool CTreeView::EndEditLabelNow( bool bCancel )
	{				
		_WINQ_FCONTEXT( "CTreeView::EndEditLabelNow" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_ENDEDITLABELNOW, 
			static_cast< Cmp_uint_ptr >( bCancel ? 1 : 0 ), 0 ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTreeView::EnsureVisible( HTREEITEM hItem )
	{				
		_WINQ_FCONTEXT( "CTreeView::EnsureVisible" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_ENSUREVISIBLE, 
			0, reinterpret_cast< Cmp_long_ptr >( hItem ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTreeView::EnsureVisible( unsigned int uiFlag, HTREEITEM hItem )
	{				
		_WINQ_FCONTEXT( "CTreeView::EnsureVisible" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_EXPAND, 
			static_cast< Cmp_uint_ptr >( uiFlag ), reinterpret_cast< Cmp_long_ptr >( hItem ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CTreeView::GetBkColour()
	{				
		_WINQ_FCONTEXT( "CTreeView::GetBkColour" );
		unsigned long Result = 0;
#if		( _WIN32_IE >= 0x0400 )
		Result = static_cast< unsigned long >(
			m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_GETBKCOLOR, 0, 0 ) );
#endif//( _WIN32_IE >= 0x0400 )
		return Result;
	}

	//--------------------------------------------------------------------------------
	long CTreeView::GetCount()
	{				
		_WINQ_FCONTEXT( "CTreeView::GetCount" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_GETCOUNT, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	COSWindow::refType CTreeView::GetEditControl()
	{				
		_WINQ_FCONTEXT( "CTreeView::GetEditControl" );
		CWindowHandle Handle( 0, (void*)( m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_GETEDITCONTROL, 0, 0 ) ) );
		return COSWindow::FromHandle( CWindowHandle::refType( &Handle, false ) );
	}

	//--------------------------------------------------------------------------------
	long CTreeView::GetExtendedStyle()
	{				
		_WINQ_FCONTEXT( "CTreeView::GetExtendedStyle" );
		long lResult = 0;
#if		( _WIN32_WINNT >= 0x0501 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_GETEXTENDEDSTYLE, 0, 0 );
#endif//( _WIN32_WINNT >= 0x0501 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	CImageList::refType CTreeView::GetImageList( int iImageList )
	{				
		_WINQ_FCONTEXT( "CTreeView::GetImageList" );
		CImageListHandle Handle( 0, (void*)( m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_GETIMAGELIST, static_cast< Cmp_uint_ptr >( iImageList ), 0 ) ) );
		return CImageList::FromHandle( CImageListHandle::refType( &Handle, false ) );
	}

	//--------------------------------------------------------------------------------
	long CTreeView::GetIndent()
	{				
		_WINQ_FCONTEXT( "CTreeView::GetIndent" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_GETINDENT, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CTreeView::GetInsertMarkColour()
	{				
		_WINQ_FCONTEXT( "CTreeView::GetInsertMarkColour" );
		unsigned long Result = 0;
#if		( _WIN32_IE >= 0x0400 )
		Result = static_cast< unsigned long >(
			m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_GETINSERTMARKCOLOR, 0, 0 ) );
#endif//( _WIN32_IE >= 0x0400 )
		return Result;
	}

	//--------------------------------------------------------------------------------
	long CTreeView::GetIncrementalSearchString( char* strBuffer )
	{				
		_WINQ_FCONTEXT( "CTreeView::GetIncrementalSearchString" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_GETISEARCHSTRING, 
			0, reinterpret_cast< Cmp_long_ptr >( strBuffer ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CTreeView::GetItem( TVITEMEX& Item )
	{				
		_WINQ_FCONTEXT( "CTreeView::GetItem" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_GETISEARCHSTRING, 
			0, reinterpret_cast< Cmp_long_ptr >( &Item ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CTreeView::GetItemHeight()
	{				
		_WINQ_FCONTEXT( "CTreeView::GetItemHeight" );
		long lResult = 0;
#if		( _WIN32_WINNT >= 0x0501 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_GETITEMHEIGHT, 0, 0 );
#endif//( _WIN32_WINNT >= 0x0501 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CTreeView::GetItemRect( bool bItemOnly, CRectangle& rcItem )
	{				
		_WINQ_FCONTEXT( "CTreeView::GetItemRect" );
		bool bResult = false;
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_GETITEMRECT, 
			static_cast< Cmp_uint_ptr >( bItemOnly ? 1 : 0 ), reinterpret_cast< Cmp_long_ptr >( &rcItem ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CTreeView::GetItemState( HTREEITEM hItem, unsigned int uiStateMask )
	{				
		_WINQ_FCONTEXT( "CTreeView::GetItemState" );
		long lResult = 0;
#if		( _WIN32_IE >= 0x0500 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_GETITEMSTATE, 
			reinterpret_cast< Cmp_uint_ptr >( hItem ), static_cast< Cmp_long_ptr >( uiStateMask ) );
#else
		__QCMP_UNREF( uiStateMask );
		__QCMP_UNREF( hItem );
#endif//( _WIN32_IE >= 0x0500 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CTreeView::GetLineColour()
	{				
		_WINQ_FCONTEXT( "CTreeView::GetLineColour" );
		unsigned long Result = CLR_DEFAULT;
#if		( _WIN32_IE >= 0x0500 )
		Result = static_cast< unsigned long >( m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_GETLINECOLOR, 0, 0 ) );
#endif//( _WIN32_IE >= 0x0500 )
		return Result;
	}

	//--------------------------------------------------------------------------------
	HTREEITEM CTreeView::GetNextItem( HTREEITEM hItem, unsigned int uiFlag )
	{				
		_WINQ_FCONTEXT( "CTreeView::GetNextItem" );
		HTREEITEM Result = reinterpret_cast< HTREEITEM >(
			m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_GETNEXTITEM, 
			static_cast< Cmp_uint_ptr >( uiFlag ), reinterpret_cast< Cmp_long_ptr >( hItem ) ) );
		return Result;
	}

	//--------------------------------------------------------------------------------
	long CTreeView::GetScrollTime()
	{				
		_WINQ_FCONTEXT( "CTreeView::GetScrollTime" );
		long lResult = 0;
#if		( _WIN32_IE >= 0x0400 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_GETSCROLLTIME, 0, 0 );					
#endif//( _WIN32_IE >= 0x0400 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CTreeView::GetTextColour()
	{				
		_WINQ_FCONTEXT( "CTreeView::GetTextColour" );
		unsigned long Result = CLR_DEFAULT;
#if		( _WIN32_IE >= 0x0400 )
		Result = static_cast< unsigned long >( m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_GETTEXTCOLOR, 0, 0 ) );
#endif//( _WIN32_IE >= 0x0400 )
		return Result;
	}

	//--------------------------------------------------------------------------------
	COSWindow::refType CTreeView::GetToolTips()
	{				
		_WINQ_FCONTEXT( "CTreeView::GetToolTips" );
		CWindowHandle hToolTips( 0, 0 );
#if		( _WIN32_IE >= 0x0300 )
		hToolTips = (void*)( m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_GETTOOLTIPS, 0, 0 ) );
#endif//( _WIN32_IE >= 0x0300 )
		return COSWindow::FromHandle( CWindowHandle::refType( &hToolTips, false ) );
	}

	//--------------------------------------------------------------------------------
	bool CTreeView::GetUnicodeFormat()
	{				
		_WINQ_FCONTEXT( "CTreeView::GetUnicodeFormat" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0400 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_GETUNICODEFORMAT, 0, 0 ) ? true : false );
#endif//( _WIN32_IE >= 0x0400 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CTreeView::GetVisibleCount()
	{				
		_WINQ_FCONTEXT( "CTreeView::GetVisibleCount" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_GETVISIBLECOUNT, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	HTREEITEM CTreeView::HitTest( TVHITTESTINFO& HitTestInfo )
	{				
		_WINQ_FCONTEXT( "CTreeView::HitTest" );
		HTREEITEM hItem = reinterpret_cast< HTREEITEM >(
			m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_HITTEST, 0, 
			reinterpret_cast< Cmp_long_ptr >( &HitTestInfo ) ) );
		return hItem;
	}

	//--------------------------------------------------------------------------------
	HTREEITEM CTreeView::InsertItem( TVINSERTSTRUCT& Insert )
	{				
		_WINQ_FCONTEXT( "CTreeView::InsertItem" );
		HTREEITEM hItem = reinterpret_cast< HTREEITEM >(
			m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_INSERTITEM, 0, 
			reinterpret_cast< Cmp_long_ptr >( &Insert ) ) );
		return hItem;
	}

	//--------------------------------------------------------------------------------
	HTREEITEM CTreeView::MapAccIdToItem( unsigned int uiID )
	{				
		_WINQ_FCONTEXT( "CTreeView::MapAccIdToItem" );
		HTREEITEM hItem = 0;
#if		( _WIN32_WINNT >= 0x0501 )
		hItem = reinterpret_cast< HTREEITEM >(
			m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_MAPACCIDTOHTREEITEM, 
			static_cast< Cmp_uint_ptr >( uiID ), 0 ) );
#else
		__QCMP_UNREF( uiID );
#endif//( _WIN32_WINNT >= 0x0501 )
		return hItem;
	}

	//--------------------------------------------------------------------------------
	unsigned int CTreeView::MapItemToAccId( HTREEITEM hItem )
	{				
		_WINQ_FCONTEXT( "CTreeView::MapItemToAccId" );
		unsigned int uiResult = (unsigned int)(-1);
#if		( _WIN32_WINNT >= 0x0501 )
		uiResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_MAPHTREEITEMTOACCID, 
			reinterpret_cast< Cmp_uint_ptr >( hItem ), 0 );
#else
		__QCMP_UNREF( hItem );
#endif//( _WIN32_WINNT >= 0x0501 )
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	bool CTreeView::SelectItem( unsigned long dwFlags, HTREEITEM hItem )
	{				
		_WINQ_FCONTEXT( "CTreeView::SelectItem" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_SELECTITEM, 
			static_cast< Cmp_uint_ptr >( dwFlags ), reinterpret_cast< Cmp_long_ptr >( hItem ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CTreeView::SetAutoScrollInfo( Cmp_uint_ptr uPixPerSec, Cmp_long_ptr uUpdateTime )
	{				
		_WINQ_FCONTEXT( "CTreeView::SetAutoScrollInfo" );
#if		( _WIN32_WINNT >= 0x0501 )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_SETAUTOSCROLLINFO, uPixPerSec, uUpdateTime );
#else
		__QCMP_UNREF( uUpdateTime );
		__QCMP_UNREF( uPixPerSec );
#endif//( _WIN32_WINNT >= 0x0501 )
	}

	//--------------------------------------------------------------------------------
	unsigned long CTreeView::SetBkColour( unsigned long bkClr )
	{				
		_WINQ_FCONTEXT( "CTreeView::SetBkColour" );
		unsigned long Result = CLR_DEFAULT;
#if		( _WIN32_IE >= 0x0400 )
		Result = static_cast< unsigned long >(
			m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_SETBKCOLOR, 0, 
			static_cast< Cmp_long_ptr >( bkClr ) ) );
#else
		__QCMP_UNREF( bkClr );
#endif//( _WIN32_IE >= 0x0400 )
		return Result;
	}

	//--------------------------------------------------------------------------------
	long CTreeView::SetExtendedStyle( unsigned int uiExStyle )
	{				
		_WINQ_FCONTEXT( "CTreeView::SetExtendedStyle" );
		long hr = E_NotImpl;
#if		( _WIN32_WINNT >= 0x0501 )
		hr = m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_SETEXTENDEDSTYLE, 0, 
			static_cast< Cmp_long_ptr >( uiExStyle ) );

#else
		__QCMP_UNREF( uiExStyle );
#endif//( _WIN32_WINNT >= 0x0501 )
		return hr;
	}

	//--------------------------------------------------------------------------------
	CImageList::refType CTreeView::SetImageList( int iList, CImageList::refType hImageList )
	{				
		_WINQ_FCONTEXT( "CTreeView::SetImageList" );
		CImageListHandle Handle( 0, (void*)( m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_SETIMAGELIST, static_cast< Cmp_uint_ptr >( iList ), reinterpret_cast< Cmp_long_ptr >( hImageList->Handle()->Use() ) ) ) );
		return CImageList::FromHandle( CImageListHandle::refType( &Handle, false ) );
	}

	//--------------------------------------------------------------------------------
	void CTreeView::SetIndent( int iIndent )
	{				
		_WINQ_FCONTEXT( "CTreeView::SetIndent" );
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_SETINDENT, 
			static_cast< Cmp_uint_ptr >( iIndent ), 0 );
	}

	//--------------------------------------------------------------------------------
	bool CTreeView::SetInsertMark( bool bAfter, HTREEITEM hItem )
	{				
		_WINQ_FCONTEXT( "CTreeView::SetInsertMark" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0400 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_SETINSERTMARK, 
			static_cast< Cmp_uint_ptr >( bAfter ? 1 : 0 ), reinterpret_cast< Cmp_long_ptr >( hItem ) ) ? true : false );
#else
		__QCMP_UNREF( hItem );
		__QCMP_UNREF( bAfter );
#endif//( _WIN32_IE >= 0x0400 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CTreeView::SetInsertMarkColour( unsigned long clrInsertMark )
	{				
		_WINQ_FCONTEXT( "CTreeView::SetInsertMarkColour" );
		unsigned long Result = CLR_DEFAULT;
#if		( _WIN32_IE >= 0x0400 )
		Result = static_cast< unsigned long >(
			m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_SETINSERTMARKCOLOR, 
			0, static_cast< Cmp_long_ptr >( clrInsertMark ) ) );
#else
		__QCMP_UNREF( clrInsertMark );
#endif//( _WIN32_IE >= 0x0400 )
		return Result;
	}

	//--------------------------------------------------------------------------------
	bool CTreeView::SetItem( TVITEMEX& Item )
	{				
		_WINQ_FCONTEXT( "CTreeView::SetItem" );
		bool bResult = false;
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_SETITEM, 
			0, reinterpret_cast< Cmp_long_ptr >( &Item ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CTreeView::SetItemHeight( short sItemHeight )
	{				
		_WINQ_FCONTEXT( "CTreeView::SetItemHeight" );
		long lResult = 0;
#if		( _WIN32_IE >= 0x0400 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_SETITEMHEIGHT, 
			static_cast< Cmp_uint_ptr >( sItemHeight), 0 );
#else
		__QCMP_UNREF( sItemHeight );
#endif//( _WIN32_IE >= 0x0400 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CTreeView::SetLineColour( unsigned long clrText )
	{				
		_WINQ_FCONTEXT( "CTreeView::SetLineColour" );
		unsigned long Result = CLR_DEFAULT;
#if		( _WIN32_IE >= 0x0500 )
		Result = static_cast< unsigned long >(
			m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_SETLINECOLOR, 
			0, static_cast< Cmp_long_ptr >( clrText ) ) );
#else
		__QCMP_UNREF( clrText );
#endif//( _WIN32_IE >= 0x0500 )
		return Result;
	}

	//--------------------------------------------------------------------------------
	long CTreeView::SetScrollTime( unsigned int uiMilliseconds )
	{				
		_WINQ_FCONTEXT( "CTreeView::SetScrollTime" );
		long lResult = 0;
#if		( _WIN32_IE >= 0x0400 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_SETSCROLLTIME, 
			static_cast< Cmp_uint_ptr >( uiMilliseconds ), 0 );
#else
		__QCMP_UNREF( uiMilliseconds );
#endif//( _WIN32_IE >= 0x0400 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CTreeView::SetTextColour( unsigned long clrText )
	{				
		_WINQ_FCONTEXT( "CTreeView::SetTextColour" );
		unsigned long Result = CLR_DEFAULT;
#if		( _WIN32_IE >= 0x0400 )
		Result = static_cast< unsigned long >(
			m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_SETTEXTCOLOR, 
			0, static_cast< Cmp_long_ptr >( clrText ) ) );
#else
		__QCMP_UNREF( clrText );
#endif//( _WIN32_IE >= 0x0400 )
		return Result;
	}

	//--------------------------------------------------------------------------------
	COSWindow::refType CTreeView::SetToolTips( COSWindow::refType hToolTips )
	{				
		_WINQ_FCONTEXT( "CTreeView::SetToolTips" );
		CWindowHandle Handle( 0, (void*)( m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_SETTOOLTIPS, reinterpret_cast< Cmp_uint_ptr >( hToolTips->Handle()->Use() ), 0 ) ) );
		return COSWindow::FromHandle( CWindowHandle::refType( &Handle, false ) );
	}

	//--------------------------------------------------------------------------------
	bool CTreeView::SetUnicodeFormat( bool bUnicode )
	{				
		_WINQ_FCONTEXT( "CTreeView::SetUnicodeFormat" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0400 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_SETUNICODEFORMAT, 
			static_cast< Cmp_uint_ptr >( bUnicode ? true : false ), 0 ) ) ? true : false;
#else
		__QCMP_UNREF( bUnicode );
#endif//( _WIN32_IE >= 0x0400 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CTreeView::ShowInfoTip( HTREEITEM hItem )
	{				
		_WINQ_FCONTEXT( "CTreeView::ShowInfoTip" );
#if		( _WIN32_WINNT >= 0x0600 )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_SHOWINFOTIP, 
			0, reinterpret_cast< Cmp_long_ptr >( hItem ) );
#else
		__QCMP_UNREF( hItem );
#endif//( _WIN32_WINNT >= 0x0600 )
	}

	//--------------------------------------------------------------------------------
	bool CTreeView::SortChildren( HTREEITEM hItem, bool bRecurse )
	{	
		_WINQ_FCONTEXT( "CTreeView::SortChildren" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_SORTCHILDREN, 
			static_cast< Cmp_uint_ptr >( bRecurse ? 1 : 0 ), reinterpret_cast< Cmp_long_ptr >( hItem ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTreeView::SortChildrenWithCallback( TVSORTCB& SortCB, bool bRecurse )
	{				
		_WINQ_FCONTEXT( "CTreeView::SortChildrenWithCallback" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TVM_SORTCHILDRENCB, 
			static_cast< Cmp_uint_ptr >( bRecurse ? 1 : 0 ), reinterpret_cast< Cmp_long_ptr >( &SortCB ) ) ? true : false );
		return bResult;
	}

}//nsWin32

