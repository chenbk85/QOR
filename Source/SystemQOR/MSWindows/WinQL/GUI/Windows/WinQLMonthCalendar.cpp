//WinQLMonthCalendar.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CompilerQOR.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usafe: stored in member for later use" );
#include "WinQL/GUI/Windows/MonthCalendar.h"
__QCMP_WARNING_POP

//--------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_OCLASS_LUID( CMonthCalendarClass );

	//--------------------------------------------------------------------------------
	CMonthCalendarClass::CMonthCalendarClass() : m_ComCtrl32( CCommonCtrl::CCDATE_CLASSES )
	{
		_WINQ_FCONTEXT( "CMonthCalendarClass::CMonthCalendarClass" );
	}

	//--------------------------------------------------------------------------------
	CMonthCalendarClass::~CMonthCalendarClass()
	{
		_WINQ_FCONTEXT( "CMonthCalendarClass::~CMonthCalendarClass" );
	}

	//--------------------------------------------------------------------------------
	bool CMonthCalendarClass::Preregistered()
	{ 
		_WINQ_FCONTEXT( "CMonthCalendarClass::Preregistered" );
		return true; 
	}

	//--------------------------------------------------------------------------------
	const TCHAR* CMonthCalendarClass::Name()
	{ 
		_WINQ_FCONTEXT( "CMonthCalendarClass::Name" );
		return _TXT( "SysMonthCal32" ); 
	}






	__QOR_IMPLEMENT_OCLASS_LUID( CMonthCalendarFactory );

	//--------------------------------------------------------------------------------
	CMonthCalendarFactory::CMonthCalendarFactory() : CWindowFactory()
	{
		_WINQ_FCONTEXT( "CMonthCalendarFactory::CMonthCalendarFactory" );
	}

	//--------------------------------------------------------------------------------
	CMonthCalendarFactory::~CMonthCalendarFactory()
	{				
		_WINQ_FCONTEXT( "CMonthCalendarFactory::~CMonthCalendarFactory" );
	}

	//--------------------------------------------------------------------------------
	CMonthCalendar* CMonthCalendarFactory::Create()
	{
		_WINQ_FCONTEXT( "CMonthCalendarFactory::Instance" );
		return new CMonthCalendar;//PreCreateWindow< CMonthCalendar, CMonthCalendarClass >();
	}

	//--------------------------------------------------------------------------------
	bool CMonthCalendarFactory::GetDayState()
	{
		_WINQ_FCONTEXT( "CMonthCalendarFactory::GetDayState" );
		return GetStyleBits( MCS_DAYSTATE );
	}

	//--------------------------------------------------------------------------------
	void CMonthCalendarFactory::SetDayState( bool bFlag )
	{
		_WINQ_FCONTEXT( "CMonthCalendarFactory::SetDayState" );
		SetStyleBits( MCS_DAYSTATE, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CMonthCalendarFactory::GetMultiSelect()
	{
		_WINQ_FCONTEXT( "CMonthCalendarFactory::GetMultiSelect" );
		return GetStyleBits( MCS_MULTISELECT );
	}

	//--------------------------------------------------------------------------------
	void CMonthCalendarFactory::SetMultiSelect( bool bFlag )
	{
		_WINQ_FCONTEXT( "CMonthCalendarFactory::SetMultiSelect" );
		SetStyleBits( MCS_MULTISELECT, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CMonthCalendarFactory::GetWeekNumbers()
	{
		_WINQ_FCONTEXT( "CMonthCalendarFactory::GetWeekNumbers" );
		return GetStyleBits( MCS_WEEKNUMBERS );
	}

	//--------------------------------------------------------------------------------
	void CMonthCalendarFactory::SetWeekNumbers( bool bFlag )
	{
		_WINQ_FCONTEXT( "CMonthCalendarFactory::SetWeekNumbers" );
		SetStyleBits( MCS_WEEKNUMBERS, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CMonthCalendarFactory::GetNoTodayCircle()
	{
		_WINQ_FCONTEXT( "CMonthCalendarFactory::GetNoTodayCircle" );
#if		( _WIN32_IE >= 0x0400 )
		return GetStyleBits( MCS_NOTODAYCIRCLE );
#else
		return false;
#endif//( _WIN32_IE >= 0x0400 )
	}

	//--------------------------------------------------------------------------------
	void CMonthCalendarFactory::SetNoTodayCircle( bool bFlag )
	{
		_WINQ_FCONTEXT( "CMonthCalendarFactory::SetNoTodayCircle" );
#if		( _WIN32_IE >= 0x0400 )
		SetStyleBits( MCS_NOTODAYCIRCLE, bFlag );
#endif//( _WIN32_IE >= 0x0400 )
	}

	//--------------------------------------------------------------------------------
	bool CMonthCalendarFactory::GetNoToday()
	{
		_WINQ_FCONTEXT( "CMonthCalendarFactory::GetNoToday" );
		return GetStyleBits( MCS_NOTODAY );
	}

	//--------------------------------------------------------------------------------
	void CMonthCalendarFactory::SetNoToday( bool bFlag )
	{
		_WINQ_FCONTEXT( "CMonthCalendarFactory::SetNoToday" );
		SetStyleBits( MCS_NOTODAY, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CMonthCalendarFactory::GetNoTrailingDates()
	{
		_WINQ_FCONTEXT( "CMonthCalendarFactory::GetNoTrailingDates" );
#if		( NTDDI_VERSION >= NTDDI_VISTA )
		return GetStyleBits( MCS_NOTRAILINGDATES );
#else
		return false;
#endif//( NTDDI_VERSION >= NTDDI_VISTA )
	}

	//--------------------------------------------------------------------------------
	void CMonthCalendarFactory::SetNoTrailingDates( bool bFlag )
	{
		_WINQ_FCONTEXT( "CMonthCalendarFactory::SetNoTrailingDates" );
#if		( NTDDI_VERSION >= NTDDI_VISTA )
		SetStyleBits( MCS_NOTRAILINGDATES, bFlag );
#endif//( NTDDI_VERSION >= NTDDI_VISTA )
	}

	//--------------------------------------------------------------------------------
	bool CMonthCalendarFactory::GetShortDaysOfWeek()
	{
		_WINQ_FCONTEXT( "CMonthCalendarFactory::GetShortDaysOfWeek" );
#if		( NTDDI_VERSION >= NTDDI_VISTA )
		return GetStyleBits( MCS_SHORTDAYSOFWEEK );
#else
		return false;
#endif//( NTDDI_VERSION >= NTDDI_VISTA )
	}

	//--------------------------------------------------------------------------------
	void CMonthCalendarFactory::SetShortDaysOfWeek( bool bFlag )
	{
		_WINQ_FCONTEXT( "CMonthCalendarFactory::SetShortDaysOfWeek" );
#if		( NTDDI_VERSION >= NTDDI_VISTA )
		SetStyleBits( MCS_SHORTDAYSOFWEEK, bFlag );
#endif//( NTDDI_VERSION >= NTDDI_VISTA )
	}

	//--------------------------------------------------------------------------------
	bool CMonthCalendarFactory::GetNoSelChangeOnNav()
	{
		_WINQ_FCONTEXT( "CMonthCalendarFactory::GetNoSelChangeOnNav" );
#if		( NTDDI_VERSION >= NTDDI_VISTA )
		return GetStyleBits( MCS_NOSELCHANGEONNAV );
#else
		return false;
#endif//( NTDDI_VERSION >= NTDDI_VISTA )
	}

	//--------------------------------------------------------------------------------
	void CMonthCalendarFactory::SetNoSelChangeOnNav( bool bFlag )
	{
		_WINQ_FCONTEXT( "CMonthCalendarFactory::SetNoSelChangeOnNav" );
#if		( NTDDI_VERSION >= NTDDI_VISTA )
		SetStyleBits( MCS_NOSELCHANGEONNAV, bFlag );
#endif//( NTDDI_VERSION >= NTDDI_VISTA )
	}






	__QOR_IMPLEMENT_OCLASS_LUID( CMonthCalendar );

	//--------------------------------------------------------------------------------
	CMonthCalendar::CMonthCalendar() : CWinCtrlWindow()
	{	
		_WINQ_FCONTEXT( "CMonthCalendar::CMonthCalendar" );
	}

	//--------------------------------------------------------------------------------
	CMonthCalendar::~CMonthCalendar()
	{
		_WINQ_FCONTEXT( "CMonthCalendar::~CMonthCalendar" );
	}

	//--------------------------------------------------------------------------------
	long CMonthCalendar::OnNotify( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CMonthCalendar::OnNotify" );
		long lResult = 0;

		if( pHdr != 0 )
		{
			switch ( pHdr->m_uiCode )
			{
			case MCN_GETDAYSTATE:
				{
					OnGetDayState( reinterpret_cast< NMDAYSTATE* >( pHdr ) );
				}
				break;
			case MCN_SELCHANGE:
				{
					OnSelChange( reinterpret_cast< NMSELCHANGE* >( pHdr ) );
				}
				break;
			case MCN_SELECT:
				{
					OnSelect( reinterpret_cast< NMSELCHANGE* >( pHdr ) );
				}
				break;
			case MCN_VIEWCHANGE:
				{
					OnViewChange( reinterpret_cast< NMVIEWCHANGE* >( pHdr ) );
				}
				break;
#if		( _WIN32_IE >= 0x0400 )
			case NM_RELEASEDCAPTURE:
				{
					OnReleasedCapture( pHdr );
				}
				break;
#endif//( _WIN32_IE >= 0x0400 )
			default:
				{
					lResult = OnUnknownNotification( pHdr );
				}
				break;
			}
		}
		return lResult;
	}

	//--------------------------------------------------------------------------------
	void CMonthCalendar::OnGetDayState( NMDAYSTATE* pHdr )
	{
		_WINQ_FCONTEXT( "CMonthCalendar::OnGetDayState" );
	}

	//--------------------------------------------------------------------------------
	void CMonthCalendar::OnSelChange( NMSELCHANGE* pHdr )
	{
		_WINQ_FCONTEXT( "CMonthCalendar::OnSelChange" );
	}

	//--------------------------------------------------------------------------------
	void CMonthCalendar::OnSelect( NMSELCHANGE* pHdr )
	{
		_WINQ_FCONTEXT( "CMonthCalendar::OnSelect" );
	}

	//--------------------------------------------------------------------------------
	void CMonthCalendar::OnViewChange( NMVIEWCHANGE* pHdr )
	{
		_WINQ_FCONTEXT( "CMonthCalendar::OnViewChange" );
	}

	//--------------------------------------------------------------------------------
	void CMonthCalendar::OnReleasedCapture( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CMonthCalendar::OnReleasedCapture" );
	}

	//--------------------------------------------------------------------------------
	long CMonthCalendar::OnUnknownNotification( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CMonthCalendar::OnUnknownNotification" );
		long lResult = 0;
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CMonthCalendar::GetBorderPixels()
	{
		_WINQ_FCONTEXT( "CMonthCalendar::GetBorderPixels" );
		long lResult = 0;
#if		( NTDDI_VERSION >= NTDDI_VISTA )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) MCM_GETCALENDARBORDER, 0, 0 );
#endif//( NTDDI_VERSION >= NTDDI_VISTA )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CMonthCalendar::GetCalendarCount()
	{
		_WINQ_FCONTEXT( "CMonthCalendar::GetCalendarCount" );
		long lResult = 1;
#if		( NTDDI_VERSION >= NTDDI_VISTA )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) MCM_GETCALENDARCOUNT, 0, 0 );
#endif//( NTDDI_VERSION >= NTDDI_VISTA )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CMonthCalendar::GetGridInfo( MCGRIDINFO& GridInfo )
	{
		_WINQ_FCONTEXT( "CMonthCalendar::GetGridInfo" );
		bool bResult = false;
#if		( NTDDI_VERSION >= NTDDI_VISTA )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) MCM_GETCALENDARGRIDINFO, 0, 
			reinterpret_cast< Cmp_long_ptr >( &GridInfo ) ) ? true : false );
#endif//( NTDDI_VERSION >= NTDDI_VISTA )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CMonthCalendar::GetCalendarID()
	{
		_WINQ_FCONTEXT( "CMonthCalendar::GetCalendarID" );
		long lResult = 0;
#if		( NTDDI_VERSION >= NTDDI_VISTA )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) MCM_GETCALID, 0, 0 );
#endif//( NTDDI_VERSION >= NTDDI_VISTA )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CMonthCalendar::GetColour( int iColour )
	{
		_WINQ_FCONTEXT( "CMonthCalendar::GetColour" );
		unsigned long Result = static_cast< unsigned long >(
			m_Win32MsgHandler.Send( Ref(), (unsigned int) MCM_GETCOLOR, static_cast< Cmp_uint_ptr >( iColour ), 0 ) );
		return Result;
	}

	//--------------------------------------------------------------------------------
	long CMonthCalendar::GetCurrentView()
	{
		_WINQ_FCONTEXT( "CMonthCalendar::GetCurrentView" );
		long lResult = 0;
#if		( NTDDI_VERSION >= NTDDI_VISTA )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) MCM_GETCURRENTVIEW, 0, 0 );
#endif//( NTDDI_VERSION >= NTDDI_VISTA )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CMonthCalendar::GetCurSel( nsWin32::SystemTime& SelTime )
	{
		_WINQ_FCONTEXT( "CMonthCalendar::GetCurSel" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) MCM_GETCURSEL, 0, 
			reinterpret_cast< Cmp_long_ptr >( &SelTime ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CMonthCalendar::GetFirstDayOfWeek()
	{
		_WINQ_FCONTEXT( "CMonthCalendar::GetFirstDayOfWeek" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) MCM_GETFIRSTDAYOFWEEK, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CMonthCalendar::GetMaxSelCount()
	{
		_WINQ_FCONTEXT( "CMonthCalendar::GetMaxSelCount" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) MCM_GETMAXSELCOUNT, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CMonthCalendar::GetMaxTodayWidth()
	{
		_WINQ_FCONTEXT( "CMonthCalendar::GetMaxTodayWidth" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) MCM_GETMAXTODAYWIDTH, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CMonthCalendar::GetMinRequiredRect( CRectangle& rcMinMonth )
	{
		_WINQ_FCONTEXT( "CMonthCalendar::GetMinRequiredRect" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) MCM_GETMINREQRECT, 0, 
			reinterpret_cast< Cmp_long_ptr >( &rcMinMonth ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CMonthCalendar::GetMonthDelta()
	{
		_WINQ_FCONTEXT( "CMonthCalendar::GetMonthDelta" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) MCM_GETMONTHDELTA, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CMonthCalendar::GetMonthRange( unsigned long dwFlags, nsWin32::SystemTime* paRange )
	{
		_WINQ_FCONTEXT( "CMonthCalendar::GetMonthRange" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) MCM_GETMONTHRANGE, 
			static_cast< Cmp_uint_ptr >( dwFlags ), reinterpret_cast< Cmp_long_ptr >( paRange ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CMonthCalendar::GetRange( nsWin32::SystemTime* paRange )
	{
		_WINQ_FCONTEXT( "CMonthCalendar::GetRange" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) MCM_GETRANGE, 0,
			reinterpret_cast< Cmp_long_ptr >( paRange ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CMonthCalendar::GetSelRange( nsWin32::SystemTime* paRange )
	{
		_WINQ_FCONTEXT( "CMonthCalendar::GetSelRange" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) MCM_GETSELRANGE, 0, 
			reinterpret_cast< Cmp_long_ptr >( paRange ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CMonthCalendar::GetToday( nsWin32::SystemTime& Today )
	{
		_WINQ_FCONTEXT( "CMonthCalendar::GetToday" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) MCM_GETTODAY, 0, 
			reinterpret_cast< Cmp_long_ptr >( &Today ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CMonthCalendar::GetUnicodeFormat()
	{
		_WINQ_FCONTEXT( "CMonthCalendar::GetUnicodeFormat" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0400 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) MCM_GETUNICODEFORMAT, 0, 0 ) ? true : false );
#endif//( _WIN32_IE >= 0x0400 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CMonthCalendar::HitTest( MCHITTESTINFO& HitTestInfo )
	{
		_WINQ_FCONTEXT( "CMonthCalendar::HiTest" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) MCM_HITTEST, 0, 
			reinterpret_cast< Cmp_long_ptr >( &HitTestInfo ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	void CMonthCalendar::SetBorderPixels( Cmp_long_ptr PixelWidth, bool bReset )
	{
		_WINQ_FCONTEXT( "CMonthCalendar::SetBorderPixels" );
#if		( NTDDI_VERSION >= NTDDI_VISTA )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) MCM_SETCALENDARBORDER, 
			static_cast< Cmp_uint_ptr >( bReset ? 0 : 1 ), PixelWidth );
#endif//( NTDDI_VERSION >= NTDDI_VISTA )
	}

	//--------------------------------------------------------------------------------
	void CMonthCalendar::SetCalendarID( Cmp_uint_ptr CalID )
	{
		_WINQ_FCONTEXT( "CMonthCalendar::SetCalendarID" );
#if		( NTDDI_VERSION >= NTDDI_VISTA )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) MCM_SETCALID, CalID, 0 );
#else
		__QCMP_UNREF( CalID );
#endif//( NTDDI_VERSION >= NTDDI_VISTA )
	}

	//--------------------------------------------------------------------------------
	unsigned long CMonthCalendar::SetColour( int iColour, unsigned long clr )
	{
		_WINQ_FCONTEXT( "CMonthCalendar::SetColour" );
		unsigned long Result = static_cast< unsigned long >(
			m_Win32MsgHandler.Send( Ref(), (unsigned int) MCM_SETCOLOR, 
			static_cast< Cmp_uint_ptr >( iColour ), static_cast< Cmp_long_ptr >( clr ) ) );
		return Result;
	}

	//--------------------------------------------------------------------------------
	bool CMonthCalendar::SetCurrentView( Cmp_long_ptr View )
	{
		_WINQ_FCONTEXT( "CMonthCalendar::SetCurrentView" );
		bool bResult = false;
#if		( NTDDI_VERSION >= NTDDI_VISTA )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) MCM_SETCURRENTVIEW, 0, View ) ? true : false );
#else
		__QCMP_UNREF( View );
#endif//( NTDDI_VERSION >= NTDDI_VISTA )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CMonthCalendar::SetCurSel( SystemTime SelDate )
	{
		_WINQ_FCONTEXT( "CMonthCalendar::SetCurSel" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) MCM_SETCURSEL, 0, 
			reinterpret_cast< Cmp_long_ptr >( &SelDate ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CMonthCalendar::SetDayState( int iMonths, unsigned long* paState )
	{
		_WINQ_FCONTEXT( "CMonthCalendar::SetDayState" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) MCM_SETDAYSTATE, 
			static_cast< Cmp_uint_ptr >( iMonths ), reinterpret_cast< Cmp_long_ptr >( paState ) )? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CMonthCalendar::SetFirstDayOfWeek( int iDay )
	{
		_WINQ_FCONTEXT( "CMonthCalendar::SetFirstDayOfWeek" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) MCM_SETFIRSTDAYOFWEEK, 0, 
			static_cast< Cmp_long_ptr >( iDay ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CMonthCalendar::SetMaxSelCount( int iMax )
	{
		_WINQ_FCONTEXT( "CMonthCalendar::SetMaxSelCount" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) MCM_SETMAXSELCOUNT, 
			static_cast< Cmp_uint_ptr >( iMax ), 0 ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CMonthCalendar::SetMonthDelta( int iDelta )
	{
		_WINQ_FCONTEXT( "CMonthCalendar::SetMonthDelta" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) MCM_SETMONTHDELTA,
			static_cast< Cmp_uint_ptr >( iDelta ), 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CMonthCalendar::SetRange( short sWhichLimits, SystemTime* paRange )
	{
		_WINQ_FCONTEXT( "CMonthCalendar::SetRange" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) MCM_SETRANGE,
			static_cast< Cmp_uint_ptr >( sWhichLimits ), reinterpret_cast< Cmp_long_ptr >( paRange ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CMonthCalendar::SetSelRange( SystemTime* paRange )
	{
		_WINQ_FCONTEXT( "CMonthCalendar::SetSelRange" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) MCM_SETSELRANGE, 0, 
			reinterpret_cast< Cmp_long_ptr >( paRange ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CMonthCalendar::SetToday( nsWin32::SystemTime Today )
	{
		_WINQ_FCONTEXT( "CMonthCalendar::SetToday" );
		m_Win32MsgHandler.Send( Ref(), (unsigned int) MCM_SETTODAY, 0, 
			reinterpret_cast< Cmp_long_ptr >( &Today ) );
	}

	//--------------------------------------------------------------------------------
	bool CMonthCalendar::SetUnicodeFormat( bool bUnicode )
	{
		_WINQ_FCONTEXT( "CMonthCalendar::SetUnicodeFormat" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0400 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) MCM_SETUNICODEFORMAT, 
			static_cast< Cmp_uint_ptr >( bUnicode ? 1 : 0 ), 0 ) ? true : false );
#endif//( _WIN32_IE >= 0x0400 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CMonthCalendar::SizeRectToMin( CRectangle& rcMinSize )
	{
		_WINQ_FCONTEXT( "CMonthCalendar::SizeRectToMin" );
#if		( NTDDI_VERSION >= NTDDI_VISTA )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) MCM_SIZERECTTOMIN, 0, 
			reinterpret_cast< Cmp_long_ptr >( &rcMinSize ) );
#endif//( NTDDI_VERSION >= NTDDI_VISTA )
	}

}//nsWin32

