//WinQLRebar.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.


#include "CompilerQOR.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usafe: stored in member for later use" );
#include "WinQL/GUI/Windows/Rebar.h"
__QCMP_WARNING_POP

//--------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_OCLASS_LUID( CRebarClass );

	//--------------------------------------------------------------------------------
	CRebarClass::CRebarClass() : m_ComCtrl32( CCommonCtrl::CCCOOL_CLASSES )
	{ 
		_WINQ_FCONTEXT( "CRebarClass::CRebarClass" );
	}

	//--------------------------------------------------------------------------------
	CRebarClass::~CRebarClass()
	{ 
		_WINQ_FCONTEXT( "CRebarClass::~CRebarClass" );
	}

	//--------------------------------------------------------------------------------
	bool CRebarClass::Preregistered()
	{ 
		_WINQ_FCONTEXT( "CRebarClass::Preregistered" );
		return true; 
	}

	//--------------------------------------------------------------------------------
	const TCHAR* CRebarClass::Name()
	{ 
		_WINQ_FCONTEXT( "CRebarClass::Name" );
		return _TXT( "ReBarWindow32" ); 
	}






	__QOR_IMPLEMENT_OCLASS_LUID( CRebarFactory );

	//--------------------------------------------------------------------------------
	CRebarFactory::CRebarFactory() : CWindowFactory()
	{
		_WINQ_FCONTEXT( "CRebarFactory::CRebarFactory" );
	}

	//--------------------------------------------------------------------------------
	CRebar* CRebarFactory::Create()
	{
		_WINQ_FCONTEXT( "CRebarFactory::Instance" );
		return new CRebar;//PreCreateWindow< CRebar, CRebarClass >();
	}

	//--------------------------------------------------------------------------------
	CRebarFactory::~CRebarFactory()
	{
		_WINQ_FCONTEXT( "CRebarFactory::~CRebarFactory" );
	}
			
	//--------------------------------------------------------------------------------
	bool CRebarFactory::GetToolTips()
	{
		_WINQ_FCONTEXT( "CRebarFactory::GetToolTips" );
		return GetStyleBits( RBS_TOOLTIPS );
	}

	//--------------------------------------------------------------------------------
	void CRebarFactory::SetToolTips( bool bFlag )
	{
		_WINQ_FCONTEXT( "CRebarFactory::SetToolTips" );
		SetStyleBits( RBS_TOOLTIPS, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CRebarFactory::GetVariableHeight()
	{
		_WINQ_FCONTEXT( "CRebarFactory::GetVariableHeight" );
		return GetStyleBits( RBS_VARHEIGHT );
	}

	//--------------------------------------------------------------------------------
	void CRebarFactory::SetVariableHeight( bool bFlag )
	{
		_WINQ_FCONTEXT( "CRebarFactory::SetVariableHeight" );
		SetStyleBits( RBS_VARHEIGHT, bFlag );
	}


	//--------------------------------------------------------------------------------
	bool CRebarFactory::GetBandBorders()
	{
		_WINQ_FCONTEXT( "CRebarFactory::GetBandBorders" );
		return GetStyleBits( RBS_BANDBORDERS );
	}

	//--------------------------------------------------------------------------------
	void CRebarFactory::SetBandBorders( bool bFlag )
	{
		_WINQ_FCONTEXT( "CRebarFactory::SetBandBorders" );
		SetStyleBits( RBS_BANDBORDERS, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CRebarFactory::GetFixedOrder()
	{
		_WINQ_FCONTEXT( "CRebarFactory::GetFixedOrder" );
		return GetStyleBits( RBS_FIXEDORDER );
	}

	//--------------------------------------------------------------------------------
	void CRebarFactory::SetFixedOrder( bool bFlag )
	{
		_WINQ_FCONTEXT( "CRebarFactory::SetFixedOrder" );
		SetStyleBits( RBS_FIXEDORDER, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CRebarFactory::GetRegisterDrop()
	{
		_WINQ_FCONTEXT( "CRebarFactory::GetRegisterDrop" );
#if		( _WIN32_IE >= 0x0400 )
		return GetStyleBits( RBS_REGISTERDROP );
#else
		return false;
#endif//( _WIN32_IE >= 0x0400 )
	}

	//--------------------------------------------------------------------------------
	void CRebarFactory::SetRegisterDrop( bool bFlag )
	{
		_WINQ_FCONTEXT( "CRebarFactory::SetRegisterDrop" );
#if		( _WIN32_IE >= 0x0400 )
		SetStyleBits( RBS_REGISTERDROP, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( _WIN32_IE >= 0x0400 )
	}

	//--------------------------------------------------------------------------------
	bool CRebarFactory::GetAutoSize()
	{
		_WINQ_FCONTEXT( "CRebarFactory::GetAutoSize" );
#if		( _WIN32_IE >= 0x0400 )
		return GetStyleBits( RBS_AUTOSIZE );
#else
		return false;
#endif//( _WIN32_IE >= 0x0400 )
	}

	//--------------------------------------------------------------------------------
	void CRebarFactory::SetAutoSize( bool bFlag )
	{
		_WINQ_FCONTEXT( "CRebarFactory::SetAutoSize" );
#if		( _WIN32_IE >= 0x0400 )
		SetStyleBits( RBS_AUTOSIZE, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( _WIN32_IE >= 0x0400 )
	}

	//--------------------------------------------------------------------------------
	bool CRebarFactory::GetVerticalGripper()
	{
		_WINQ_FCONTEXT( "CRebarFactory::GetVerticalGripper" );
#if		( _WIN32_IE >= 0x0400 )
		return GetStyleBits( RBS_VERTICALGRIPPER );
#else
		return false;
#endif//( _WIN32_IE >= 0x0400 )
	}

	//--------------------------------------------------------------------------------
	void CRebarFactory::SetVerticalGripper( bool bFlag )
	{
		_WINQ_FCONTEXT( "CRebarFactory::SetVerticalGripper" );
#if		( _WIN32_IE >= 0x0400 )
		SetStyleBits( RBS_VERTICALGRIPPER, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( _WIN32_IE >= 0x0400 )
	}

	//--------------------------------------------------------------------------------
	bool CRebarFactory::GetDblClickToggle()
	{
		_WINQ_FCONTEXT( "CRebarFactory::GetDblClickToggle" );
#if		( _WIN32_IE >= 0x0400 )
		return GetStyleBits( RBS_DBLCLKTOGGLE );
#else
		return false;
#endif//( _WIN32_IE >= 0x0400 )
	}

	//--------------------------------------------------------------------------------
	void CRebarFactory::SetDblClickToggle( bool bFlag )
	{
		_WINQ_FCONTEXT( "CRebarFactory::SetDblClickToggle" );
#if		( _WIN32_IE >= 0x0400 )
		SetStyleBits( RBS_DBLCLKTOGGLE, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( _WIN32_IE >= 0x0400 )
	}





	__QOR_IMPLEMENT_OCLASS_LUID( CRebar );

	//--------------------------------------------------------------------------------
	CRebar::CRebar() : CWinCtrlWindow()
	{	
		_WINQ_FCONTEXT( "CRebar::CRebar" );
	}

	//--------------------------------------------------------------------------------
	CRebar::~CRebar()
	{
		_WINQ_FCONTEXT( "CRebar::~CRebar" );
	}

	//--------------------------------------------------------------------------------
	long CRebar::OnNotify( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CRebar::OnNotify" );
		long lResult = 0;

		if( pHdr != 0 )
		{
			switch ( pHdr->m_uiCode )
			{
#if		( _WIN32_IE >= 0x0300 )
			case NM_CUSTOMDRAW:
				{
					lResult = OnCustomDraw( reinterpret_cast< NMCustomDraw* >( pHdr ) );
				}
				break;
#endif//( _WIN32_IE >= 0x0300 )
#if		( _WIN32_IE >= 0x0400 )
			case NM_NCHITTEST:
				{
					lResult = OnNCHitTest( reinterpret_cast< NMMOUSE* >( pHdr ) );
				}
				break;
			case NM_RELEASEDCAPTURE:
				{
					OnReleasedCapture( pHdr );
				}
				break;
#endif//( _WIN32_IE >= 0x0400 )
#if		( _WIN32_WINNT >= 0x0501 )
			case RBN_AUTOBREAK:
				{
					OnAutoBreak( reinterpret_cast< NMREBARAUTOBREAK* >( pHdr ) );
				}
				break;
#endif//( _WIN32_WINNT >= 0x0501 )
#if		( _WIN32_IE >= 0x0400 )
			case RBN_AUTOSIZE:
				{
					OnAutoSize( reinterpret_cast< NMRBAUTOSIZE* >( pHdr ) );
				}
				break;
			case RBN_BEGINDRAG:
				{
					lResult = static_cast< long >( OnBeginDrag(  reinterpret_cast< NMREBAR* >( pHdr ) ) ? 1 : 0 );
				}
				break;
#endif//( _WIN32_IE >= 0x0400 )
#if		( _WIN32_IE >= 0x0500 )
			case RBN_CHEVRONPUSHED:
				{
					OnChevronPushed( reinterpret_cast< NMREBARCHEVRON* >( pHdr ) );
				}
				break;
#endif//( _WIN32_IE >= 0x0500 )
#if		( _WIN32_IE >= 0x0400 )
			case RBN_CHILDSIZE:
				{
					OnChildSize( reinterpret_cast< NMREBARCHILDSIZE* >( pHdr ) );
				}
				break;
			case RBN_DELETEDBAND:
				{
					OnDeleteBand( reinterpret_cast< NMREBAR* >( pHdr ) );
				}
				break;
			case RBN_DELETINGBAND:
				{
					OnDeletingBand( reinterpret_cast< NMREBAR* >( pHdr ) );
				}
				break;
			case RBN_ENDDRAG:
				{
					OnEndDrag( reinterpret_cast< NMREBAR* >( pHdr ) );
				}
				break;
			case RBN_GETOBJECT:
				{
					OnGetObject( reinterpret_cast< NMOBJECTNOTIFY* >( pHdr ) );
				}
				break;
#endif//( _WIN32_IE >= 0x0400 )
			case RBN_HEIGHTCHANGE:
				{
					OnHeightChange( pHdr );
				}
				break;
#if		( _WIN32_IE >= 0x0400 )
			case RBN_LAYOUTCHANGED:
				{
					OnLayoutChanged( pHdr );
				}
				break;
#endif//( _WIN32_IE >= 0x0400 )
#if		( _WIN32_IE >= 0x0500 )
			case RBN_MINMAX:
				{
					lResult = static_cast< long >( OnMinMax( pHdr ) ? 1 : 0 );
				}
				break;
#endif//( _WIN32_IE >= 0x0500 )
#if		( _WIN32_IE >= 0x0600 )
			case RBN_SPLITTERDRAG:
				{
					OnSplitterDrag( reinterpret_cast< NMREBAR* >( pHdr ) );
				}
				break;
#endif//( _WIN32_IE >= 0x0600 )
			default:
				{
					lResult = OnUnknownNotification( pHdr );
				}
				break;
			}
		}
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CRebar::OnCustomDraw( NMCustomDraw* pHdr )
	{
		_WINQ_FCONTEXT( "CRebar::OnCustomDraw" );
		long lResult = 0;
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CRebar::OnNCHitTest( NMMOUSE* pHdr )
	{
		_WINQ_FCONTEXT( "CRebar::OnNCHitTest" );
		long lResult = 0;
		return lResult;
	}

	//--------------------------------------------------------------------------------
	void CRebar::OnReleasedCapture( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CRebar::OnReleasedCapture" );
	}

	//--------------------------------------------------------------------------------
	void CRebar::OnAutoBreak( NMREBARAUTOBREAK* pHdr )
	{
		_WINQ_FCONTEXT( "CRebar::OnAutoBreak" );
	}

	//--------------------------------------------------------------------------------
	void CRebar::OnAutoSize( NMRBAUTOSIZE* pHdr )
	{
		_WINQ_FCONTEXT( "CRebar::OnAutoSize" );
	}

	//--------------------------------------------------------------------------------
	bool CRebar::OnBeginDrag( NMREBAR* pHdr )
	{
		_WINQ_FCONTEXT( "CRebar::OnBeginDrag" );
		bool bResult = 1;
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CRebar::OnChevronPushed( NMREBARCHEVRON* pHdr )
	{
		_WINQ_FCONTEXT( "CRebar::OnChevronPushed" );
	}

	//--------------------------------------------------------------------------------
	void CRebar::OnChildSize( NMREBARCHILDSIZE* pHdr )
	{
		_WINQ_FCONTEXT( "CRebar::OnChildSize" );
	}

	//--------------------------------------------------------------------------------
	void CRebar::OnDeleteBand( NMREBAR* pHdr )
	{
		_WINQ_FCONTEXT( "CRebar::OnDeleteBand" );
	}

	//--------------------------------------------------------------------------------
	void CRebar::OnDeletingBand( NMREBAR* pHdr )
	{
		_WINQ_FCONTEXT( "CRebar::OnDeletingBand" );
	}

	//--------------------------------------------------------------------------------
	void CRebar::OnEndDrag( NMREBAR* pHdr )
	{
		_WINQ_FCONTEXT( "CRebar::OnEndDrag" );
	}

	//--------------------------------------------------------------------------------
	void CRebar::OnGetObject( NMOBJECTNOTIFY* pHdr )
	{
		_WINQ_FCONTEXT( "CRebar::OnGetObject" );
	}

	//--------------------------------------------------------------------------------
	void CRebar::OnHeightChange( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CRebar::OnHeightChange" );
	}

	//--------------------------------------------------------------------------------
	void CRebar::OnLayoutChanged( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CRebar::OnLayoutChanged" );
	}

	//--------------------------------------------------------------------------------
	bool CRebar::OnMinMax( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CRebar::OnMinMax" );
		bool bResult = 1;
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CRebar::OnSplitterDrag( NMREBAR* pHdr )
	{
		_WINQ_FCONTEXT( "CRebar::OnSplitterDrag" );
	}

	//--------------------------------------------------------------------------------
	long CRebar::OnUnknownNotification( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CRebar::OnUnknownNotification" );
		long lResult = 0;
		return lResult;
	}

	//--------------------------------------------------------------------------------
	void CRebar::BeginDrag( unsigned int uiBand, unsigned long dwPos )
	{
		_WINQ_FCONTEXT( "CRebar::BeginDrag" );
#if		( _WIN32_IE >= 0x0400 )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_BEGINDRAG, 
			static_cast< Cmp_uint_ptr >( uiBand ), static_cast< Cmp_long_ptr >( dwPos ) );
#endif//( _WIN32_IE >= 0x0400 )
	}

	//--------------------------------------------------------------------------------
	bool CRebar::DeleteBand( unsigned int uiBand )
	{
		_WINQ_FCONTEXT( "CRebar::DeleteBand" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_DELETEBAND, 
			static_cast< Cmp_uint_ptr >( uiBand ), 0 ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CRebar::DragMove( unsigned long dwPos )
	{
		_WINQ_FCONTEXT( "CRebar::DragMove" );
#if		( _WIN32_IE >= 0x0400 )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_DRAGMOVE, 
			0, static_cast< Cmp_long_ptr >( dwPos ) );
#endif//( _WIN32_IE >= 0x0400 )
	}

	//--------------------------------------------------------------------------------
	void CRebar::EndDrag()
	{
		_WINQ_FCONTEXT( "CRebar::EndDrag" );
#if		( _WIN32_IE >= 0x0400 )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_ENDDRAG, 0, 0 );
#endif//( _WIN32_IE >= 0x0400 )
	}

	//--------------------------------------------------------------------------------
	void CRebar::GetBandBorders( unsigned int uiBand, CRectangle& rcBorders )
	{
		_WINQ_FCONTEXT( "CRebar::GetBandBorders" );
#if		( _WIN32_IE >= 0x0400 )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_GETBANDBORDERS, 
			static_cast< Cmp_uint_ptr >( uiBand ), reinterpret_cast< Cmp_long_ptr >( &rcBorders ) );
#endif//( _WIN32_IE >= 0x0400 )
	}

	//--------------------------------------------------------------------------------
	long CRebar::GetBandCount()
	{
		_WINQ_FCONTEXT( "CRebar::GetBandCount" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_GETBANDCOUNT, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CRebar::GetBandInfo( unsigned int uiBand, ReBarBandInfo& BandInfo )
	{
		_WINQ_FCONTEXT( "CRebar::GetBandInfo" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_GETBANDINFO,
			static_cast< Cmp_uint_ptr >( uiBand ), reinterpret_cast< Cmp_long_ptr >( &BandInfo ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CRebar::GetBandMargins( MARGINS& Margins )
	{
		_WINQ_FCONTEXT( "CRebar::GetBandMargins" );
		long lResult = 0;
#if		( _WIN32_WINNT >= 0x0501 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_GETBANDMARGINS, 0,
			reinterpret_cast< Cmp_long_ptr >( &Margins ) );
#else
		__QCMP_UNREF( Margins );
#endif//( _WIN32_WINNT >= 0x0501 )
		return lResult;
	}
						
	//--------------------------------------------------------------------------------
	long CRebar::GetBarHeight()
	{
		_WINQ_FCONTEXT( "CRebar::GetBarHeight" );
		long lResult = 0;
#if		( _WIN32_IE >= 0x0400 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_GETBARHEIGHT, 0, 0 );
#endif//( _WIN32_IE >= 0x0400 )
		return lResult;
	}
						
	//--------------------------------------------------------------------------------
	bool CRebar::GetBarInfo( ReBarInfo& Info )
	{
		_WINQ_FCONTEXT( "CRebar::GetBarInfo" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_GETBARINFO, 0, 
			reinterpret_cast< Cmp_long_ptr >( &Info ) ) ? true : false );					
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CRebar::GetBkColour()
	{
		_WINQ_FCONTEXT( "CRebar::GetBkColour" );
		unsigned long Result = 0;
#if		( _WIN32_IE >= 0x0400 )
		Result = static_cast< unsigned long >( 
			m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_GETBKCOLOR, 0, 0 ) );
#endif//( _WIN32_IE >= 0x0400 )
		return Result;
	}

	//--------------------------------------------------------------------------------
	bool CRebar::GetColourScheme( COLORSCHEME& ColourScheme )
	{
		_WINQ_FCONTEXT( "CRebar::GetColourScheme" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0400 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_GETCOLORSCHEME, 0,
			reinterpret_cast< Cmp_long_ptr >( &ColourScheme ) ) ? true : false );
#endif//( _WIN32_IE >= 0x0400 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CRebar::GetDropTarget( IDropTarget** ppDropTarget )
	{
		_WINQ_FCONTEXT( "CRebar::GetDropTarget" );
#if		( _WIN32_IE >= 0x0400 )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_GETDROPTARGET, 0, 
			reinterpret_cast< Cmp_long_ptr >( ppDropTarget ) );				
#endif//( _WIN32_IE >= 0x0400 )
	}

	//--------------------------------------------------------------------------------
	long CRebar::GetExtendedStyle()
	{
		_WINQ_FCONTEXT( "CRebar::GetExtendedStyle" );
		long lResult = 0;
#if		( _WIN32_IE >= 0x0600 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_GETEXTENDEDSTYLE, 0, 0 );
#endif//( _WIN32_IE >= 0x0600 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	CPaletteHandle::refType CRebar::GetPalette()
	{
		_WINQ_FCONTEXT( "CRebar::GetPalette" );
#if		( _WIN32_IE >= 0x0400 )
		return CPaletteHandle::refType( new CPaletteHandle( 0, (void*)( m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_GETPALETTE, 0, 0 ) ) ), true );
#else
		return CPaletteHandle::refType( 0 );
#endif//( _WIN32_IE >= 0x0400 )
			
	}

	//--------------------------------------------------------------------------------
	bool CRebar::GetRect( unsigned int uiBand, CRectangle& rcBand )
	{
		_WINQ_FCONTEXT( "CRebar::GetRect" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0400 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_GETRECT, 
			static_cast< Cmp_uint_ptr >( uiBand ), reinterpret_cast< Cmp_long_ptr >( &rcBand ) ) ? true : false );
#endif//( _WIN32_IE >= 0x0400 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CRebar::GetRowCount()
	{
		_WINQ_FCONTEXT( "CRebar::GetRowCount" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_GETROWCOUNT, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CRebar::GetRowHeight( unsigned int uiBand )
	{
		_WINQ_FCONTEXT( "CRebar::GetRowHeight" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_GETROWHEIGHT,
			static_cast< Cmp_uint_ptr >( uiBand ), 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CRebar::GetTextColour()
	{
		_WINQ_FCONTEXT( "CRebar::GetTextColour" );
		unsigned long Result = 0;
#if		( _WIN32_IE >= 0x0400 )
		Result = static_cast< unsigned long >(
			m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_GETTEXTCOLOR, 0, 0 ) );
#endif//( _WIN32_IE >= 0x0400 )
		return Result;
	}

	//--------------------------------------------------------------------------------
	CWindowHandle::refType CRebar::GetToolTips()
	{
		_WINQ_FCONTEXT( "CRebar::GetToolTips" );
#if		( _WIN32_IE >= 0x0400 )
		return CWindowHandle::refType( new CWindowHandle( 0, (void*)( m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_GETTOOLTIPS, 0, 0 ) ) ), true );
#else
		return CWindowHandle::refType( 0 );
#endif//( _WIN32_IE >= 0x0400 )
	}

	//--------------------------------------------------------------------------------
	bool CRebar::GetUnicodeFormat()
	{
		_WINQ_FCONTEXT( "CRebar::GetUnicodeFormat" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0400 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_GETUNICODEFORMAT, 0, 0 ) ? true : false );
#endif//( _WIN32_IE >= 0x0400 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CRebar::HitTest( RBHITTESTINFO& HitTestInfo )
	{
		_WINQ_FCONTEXT( "CRebar::HitTest" );
		long lResult = 0;
#if		( _WIN32_IE >= 0x0400 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_HITTEST, 0,
			reinterpret_cast< Cmp_long_ptr >( &HitTestInfo ) );
#endif//( _WIN32_IE >= 0x0400 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CRebar::IdToIndex( unsigned int uiBand )
	{
		_WINQ_FCONTEXT( "CRebar::IdToIndex" );
		long lResult = -1;
#if		( _WIN32_IE >= 0x0400 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_IDTOINDEX, 
			static_cast< Cmp_uint_ptr >( uiBand ), 0 );
#endif//( _WIN32_IE >= 0x0400 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CRebar::InsertBand( unsigned int uiIndex, ReBarBandInfo& BandInfo )
	{
		_WINQ_FCONTEXT( "CRebar::InsertBand" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_INSERTBAND, 
			static_cast< Cmp_uint_ptr >( uiIndex ), reinterpret_cast< Cmp_long_ptr >( &BandInfo ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CRebar::MaximizeBand( unsigned int uiBand, bool bUseIdealSize )
	{
		_WINQ_FCONTEXT( "CRebar::MaximizeBand" );
#if		( _WIN32_IE >= 0x0400 )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_MAXIMIZEBAND, 
			static_cast< Cmp_uint_ptr >( uiBand ), static_cast< Cmp_long_ptr >( bUseIdealSize ? 1 : 0 ) );
#endif//( _WIN32_IE >= 0x0400 )
	}

	//--------------------------------------------------------------------------------
	void CRebar::MinimizeBand( unsigned int uiBand )
	{
		_WINQ_FCONTEXT( "CRebar::MinimizeBand" );
#if		( _WIN32_IE >= 0x0400 )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_MINIMIZEBAND, static_cast< Cmp_uint_ptr >( uiBand ), 0 );
#endif//( _WIN32_IE >= 0x0400 )
	}

	//--------------------------------------------------------------------------------
	bool CRebar::MinimizeBand( unsigned int uiFrom, unsigned int uiTo )
	{
		_WINQ_FCONTEXT( "CRebar::MinimizeBand" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0400 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_MOVEBAND,
			static_cast< Cmp_uint_ptr >( uiFrom ), static_cast< Cmp_long_ptr >( uiTo ) ) ? true : false );
#endif//( _WIN32_IE >= 0x0400 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CRebar::PushChevron( unsigned int uiBand, long lAppValue )
	{
		_WINQ_FCONTEXT( "CRebar::PushChevron" );
#if		( _WIN32_IE >= 0x0500 )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_PUSHCHEVRON,
			static_cast< Cmp_uint_ptr >( uiBand ), static_cast< Cmp_long_ptr >( lAppValue ) );
#else
		__QCMP_UNREF( uiBand );
		__QCMP_UNREF( lAppValue );
#endif//( _WIN32_IE >= 0x0500 )
	}

	//--------------------------------------------------------------------------------
	bool CRebar::SetBandInfo( unsigned int uiBand, ReBarBandInfo& BandInfo )
	{
		_WINQ_FCONTEXT( "CRebar::SetBandInfo" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_SETBANDINFO,
			static_cast< Cmp_uint_ptr >( uiBand ), reinterpret_cast< Cmp_long_ptr >( &BandInfo ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CRebar::SetBandWidth( unsigned int uiBand, Cmp_long_ptr PixelWidth )
	{
		_WINQ_FCONTEXT( "CRebar::SetBandWidth" );
		bool bResult = false;
#if		( _WIN32_WINNT >= 0x0600 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_SETBANDWIDTH,
			static_cast< Cmp_uint_ptr >( uiBand ), PixelWidth ) ? true : false );
#endif//( _WIN32_WINNT >= 0x0600 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CRebar::SetBarInfo( ReBarInfo& BarInfo )
	{
		_WINQ_FCONTEXT( "CRebar::SetBarInfo" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_SETBARINFO,
			0, reinterpret_cast< Cmp_long_ptr >( &BarInfo ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CRebar::SetBkColour( unsigned long clrBk )
	{
		_WINQ_FCONTEXT( "CRebar::SetBkColour" );
		unsigned long Result = 0;
#if		( _WIN32_IE >= 0x0400 )
		Result = static_cast< unsigned long >( 
			m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_SETBKCOLOR,
			0, static_cast< Cmp_long_ptr >( clrBk ) ) );
#endif//( _WIN32_IE >= 0x0400 )
		return Result;
	}

	//--------------------------------------------------------------------------------
	void CRebar::SetColourScheme( COLORSCHEME& ColourScheme )
	{
		_WINQ_FCONTEXT( "CRebar::SetColourScheme" );
#if		( _WIN32_IE >= 0x0400 )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_SETCOLORSCHEME, 0, 
			reinterpret_cast< Cmp_long_ptr >( &ColourScheme ) );
#endif//( _WIN32_IE >= 0x0400 )
	}

	//--------------------------------------------------------------------------------
	long CRebar::SetExtendedStyle( Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CRebar::SetExtendedStyle" );
		long lResult = 0;
#if		( _WIN32_IE >= 0x0600 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_SETEXTENDEDSTYLE, wParam, lParam );
#endif//( _WIN32_IE >= 0x0600 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	CPaletteHandle::refType CRebar::SetPalette( CPaletteHandle::refType hNewPalette )
	{
		_WINQ_FCONTEXT( "CRebar::SetPalette" );
		CPaletteHandle* phPal = new CPaletteHandle( 0, 0 );
#if		( _WIN32_IE >= 0x0400 )
		*phPal = (void*)(
			m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_SETPALETTE, 0,
			reinterpret_cast< Cmp_long_ptr >( hNewPalette->Use() ) ) );
#endif//( _WIN32_IE >= 0x0400 )
		return CPaletteHandle::refType( phPal, true );
	}

	//--------------------------------------------------------------------------------
	CWindowHandle::refType CRebar::SetParent( CWindowHandle::refType hParent )
	{
		_WINQ_FCONTEXT( "CRebar::SetParent" );
		return CWindowHandle::refType( new CWindowHandle( 0, (void*)( m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_SETPARENT, reinterpret_cast< Cmp_uint_ptr >( hParent->Use() ), 0 ) ) ), true );
	}

	//--------------------------------------------------------------------------------
	unsigned long CRebar::SetTextColour( unsigned long clrText )
	{
		_WINQ_FCONTEXT( "CRebar::SetTextColour" );
		unsigned long Result = 0;
#if		( _WIN32_IE >= 0x0400 )
		Result = static_cast< unsigned long >(
			m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_SETTEXTCOLOR, 0,
			static_cast< Cmp_long_ptr >( clrText ) ) );
#endif//( _WIN32_IE >= 0x0400 )
		return Result;
	}

	//--------------------------------------------------------------------------------
	void CRebar::SetToolTips( CWindowHandle::refType hToolTips )
	{
		_WINQ_FCONTEXT( "CRebar::SetToolTips" );
#if		( _WIN32_IE >= 0x0400 )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_SETTOOLTIPS, 
			reinterpret_cast< Cmp_uint_ptr >( hToolTips->Use() ), 0 );
#endif//( _WIN32_IE >= 0x0400 )
	}

	//--------------------------------------------------------------------------------
	bool CRebar::SetUnicodeFormat( bool bUnicode )
	{
		_WINQ_FCONTEXT( "CRebar::SetUnicodeFormat" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0400 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_SETUNICODEFORMAT, 
			static_cast< Cmp_uint_ptr >( bUnicode ? 1 : 0 ), 0 ) ? true : false );
#endif//( _WIN32_IE >= 0x0400 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CRebar::SetWindowTheme( wchar_t* strStyle )
	{
		_WINQ_FCONTEXT( "CRebar::SetWindowTheme" );
#if		( _WIN32_WINNT >= 0x0501 )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_SETWINDOWTHEME, 0, 
			reinterpret_cast< Cmp_long_ptr >( strStyle ) );
#endif//( _WIN32_WINNT >= 0x0501 )
	}

	//--------------------------------------------------------------------------------
	bool CRebar::ShowBand( unsigned int uiBand, bool bShow )
	{
		_WINQ_FCONTEXT( "CRebar::ShowBand" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0400 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_SHOWBAND,
			static_cast< Cmp_uint_ptr >( uiBand ), static_cast< Cmp_long_ptr >( bShow ? 1 : 0 ) ) ? true : false );
#endif//( _WIN32_IE >= 0x0400 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CRebar::SizeToRect( CRectangle& rcSize )
	{
		_WINQ_FCONTEXT( "CRebar::SizeToRect" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0400 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) RB_SIZETORECT, 0,
			reinterpret_cast< Cmp_long_ptr >( &rcSize ) ) ? true : false );
#endif//( _WIN32_IE >= 0x0400 )
		return bResult;
	}

}//nsWin32
