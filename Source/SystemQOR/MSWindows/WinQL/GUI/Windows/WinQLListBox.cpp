//WinQLListBox.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CompilerQOR.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usafe: stored in member for later use" );
#include "WinQL/GUI/Windows/ListBox.h"
__QCMP_WARNING_POP

//--------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_OCLASS_LUID( CListBoxClass );

	//--------------------------------------------------------------------------------
	CListBoxClass::CListBoxClass()
	{
		_WINQ_FCONTEXT( "CListBoxClass::CListBoxClass" );
	}

	//--------------------------------------------------------------------------------
	CListBoxClass::~CListBoxClass()
	{
		_WINQ_FCONTEXT( "CListBoxClass::~CListBoxClass" );
	}

	//--------------------------------------------------------------------------------
	bool CListBoxClass::Preregistered()
	{ 
		_WINQ_FCONTEXT( "CListBoxClass::Preregistered" );
		return true; 
	}

	//--------------------------------------------------------------------------------
	const TCHAR* CListBoxClass::Name()
	{ 
		_WINQ_FCONTEXT( "CListBoxClass::Name" );
		return _TXT( "LISTBOX" ); 
	}




	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CListBoxFactory );

	//--------------------------------------------------------------------------------
	CListBoxFactory::CListBoxFactory() : CWindowFactory()
	{
		_WINQ_FCONTEXT( "CListBoxFactory::CListBoxFactory" );
	}

	//--------------------------------------------------------------------------------
	CListBoxFactory::~CListBoxFactory()
	{				
		_WINQ_FCONTEXT( "CListBoxFactory::~CListBoxFactory" );
	}

	//--------------------------------------------------------------------------------
	CListBox* CListBoxFactory::Create()
	{
		_WINQ_FCONTEXT( "CListBoxFactory::Instance" );
		return new CListBox;//PreCreateWindow< CListBox, CListBoxClass >();
	}

	//--------------------------------------------------------------------------------
	bool CListBoxFactory::GetDisableNoScroll()
	{
		_WINQ_FCONTEXT( "CListBoxFactory::GetDisableNoScroll" );
		return GetStyleBits( LBS_DISABLENOSCROLL );
	}

	//--------------------------------------------------------------------------------
	void CListBoxFactory::SetDisableNoScroll( bool bFlag )
	{
		_WINQ_FCONTEXT( "CListBoxFactory::SetDisableNoScroll" );
		SetStyleBits( LBS_DISABLENOSCROLL, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CListBoxFactory::GetNotify()
	{
		_WINQ_FCONTEXT( "CListBoxFactory::GetNotify" );
		return GetStyleBits( LBS_NOTIFY );
	}

	//--------------------------------------------------------------------------------
	void CListBoxFactory::SetNotify( bool bFlag )
	{
		_WINQ_FCONTEXT( "CListBoxFactory::SetNotify" );
		SetStyleBits( LBS_NOTIFY, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CListBoxFactory::GetSort()
	{
		_WINQ_FCONTEXT( "CListBoxFactory::GetSort" );
		return GetStyleBits( LBS_SORT );
	}

	//--------------------------------------------------------------------------------
	void CListBoxFactory::SetSort( bool bFlag )
	{
		_WINQ_FCONTEXT( "CListBoxFactory::SetSort" );
		SetStyleBits( LBS_SORT, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CListBoxFactory::GetNoRedraw()
	{
		_WINQ_FCONTEXT( "CListBoxFactory::GetNoRedraw" );
		return GetStyleBits( LBS_NOREDRAW );
	}

	//--------------------------------------------------------------------------------
	void CListBoxFactory::SetNoRedraw( bool bFlag )
	{
		_WINQ_FCONTEXT( "CListBoxFactory::SetNoRedraw" );
		SetStyleBits( LBS_NOREDRAW, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CListBoxFactory::GetMultiSelect()
	{
		_WINQ_FCONTEXT( "CListBoxFactory::GetMultipleSelect" );
		return GetStyleBits( LBS_MULTIPLESEL );
	}

	//--------------------------------------------------------------------------------
	void CListBoxFactory::SetMultiSelect( bool bFlag )
	{
		_WINQ_FCONTEXT( "CListBoxFactory::SetMultipleSelect" );
		SetStyleBits( LBS_MULTIPLESEL, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CListBoxFactory::GetOwnerDrawFixed()
	{
		_WINQ_FCONTEXT( "CListBoxFactory::GetOwnerDrawFixed" );
		return GetStyleBits( LBS_OWNERDRAWFIXED );
	}

	//--------------------------------------------------------------------------------
	void CListBoxFactory::SetOwnerDrawFixed( bool bFlag )
	{
		_WINQ_FCONTEXT( "CListBoxFactory::SetOwnerDrawFixed" );
		SetStyleBits( LBS_OWNERDRAWFIXED, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CListBoxFactory::GetOwnerDrawVariable()
	{
		_WINQ_FCONTEXT( "CListBoxFactory::GetOwnerDrawVariable" );
		return GetStyleBits( LBS_OWNERDRAWVARIABLE );
	}

	//--------------------------------------------------------------------------------
	void CListBoxFactory::SetOwnerDrawVariable( bool bFlag )
	{
		_WINQ_FCONTEXT( "CListBoxFactory::SetOwnerDrawVariable" );
		SetStyleBits( LBS_OWNERDRAWVARIABLE, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CListBoxFactory::GetHasStrings()
	{
		_WINQ_FCONTEXT( "CListBoxFactory::GetHasStrings" );
		return GetStyleBits( LBS_HASSTRINGS );
	}

	//--------------------------------------------------------------------------------
	void CListBoxFactory::SetHasStrings( bool bFlag )
	{
		_WINQ_FCONTEXT( "CListBoxFactory::SetHasStrings" );
		SetStyleBits( LBS_HASSTRINGS, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CListBoxFactory::GetUseTabstops()
	{
		_WINQ_FCONTEXT( "CListBoxFactory::GetUseTabStops" );
		return GetStyleBits( LBS_USETABSTOPS );
	}

	//--------------------------------------------------------------------------------
	void CListBoxFactory::SetUseTabstops( bool bFlag )
	{
		_WINQ_FCONTEXT( "CListBoxFactory::SetUseTabStops" );
		SetStyleBits( LBS_USETABSTOPS, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CListBoxFactory::GetNoIntegralHeight()
	{
		_WINQ_FCONTEXT( "CListBoxFactory::GetNoIntegralHeight" );
		return GetStyleBits( LBS_NOINTEGRALHEIGHT );
	}

	//--------------------------------------------------------------------------------
	void CListBoxFactory::SetNoIntegralHeight( bool bFlag )
	{
		_WINQ_FCONTEXT( "CListBoxFactory::SetNoIntegralHeight" );
		SetStyleBits( LBS_NOINTEGRALHEIGHT, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CListBoxFactory::GetMultiColumn()
	{
		_WINQ_FCONTEXT( "CListBoxFactory::GetMultiColumn" );
		return GetStyleBits( LBS_MULTICOLUMN );
	}

	//--------------------------------------------------------------------------------
	void CListBoxFactory::SetMultiColumn( bool bFlag )
	{
		_WINQ_FCONTEXT( "CListBoxFactory::SetMultiColumn" );
		SetStyleBits( LBS_MULTICOLUMN, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CListBoxFactory::GetWantKeyboardInput()
	{
		_WINQ_FCONTEXT( "CListBoxFactory::GetWantKeyboardInput" );
		return GetStyleBits( LBS_WANTKEYBOARDINPUT );
	}

	//--------------------------------------------------------------------------------
	void CListBoxFactory::SetWantKeyboardInput( bool bFlag )
	{
		_WINQ_FCONTEXT( "CListBoxFactory::SetWantKeyboardInput" );
		SetStyleBits( LBS_WANTKEYBOARDINPUT, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CListBoxFactory::GetExtendedSelection()
	{
		_WINQ_FCONTEXT( "CListBoxFactory::GetExtendedSelection" );
		return GetStyleBits( LBS_EXTENDEDSEL );
	}

	//--------------------------------------------------------------------------------
	void CListBoxFactory::SetExtendedSelection( bool bFlag )
	{
		_WINQ_FCONTEXT( "CListBoxFactory::SetExtendedSelection" );
		SetStyleBits( LBS_EXTENDEDSEL, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CListBoxFactory::GetNoData()
	{
		_WINQ_FCONTEXT( "CListBoxFactory::GetNoData" );
		return GetStyleBits( LBS_NODATA );
	}

	//--------------------------------------------------------------------------------
	void CListBoxFactory::SetNoData( bool bFlag )
	{
		_WINQ_FCONTEXT( "CListBoxFactory::SetNoData" );
		SetStyleBits( LBS_NODATA, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CListBoxFactory::GetNoSelection()
	{
		_WINQ_FCONTEXT( "CListBoxFactory::GetNoSelection" );
		return GetStyleBits( LBS_NOSEL );
	}

	//--------------------------------------------------------------------------------
	void CListBoxFactory::SetNoSelection( bool bFlag )
	{
		_WINQ_FCONTEXT( "CListBoxFactory::SetNoSelection" );
		SetStyleBits( LBS_NOSEL, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CListBoxFactory::GetStandard()
	{
		_WINQ_FCONTEXT( "CListBoxFactory::GetStandard" );
		return GetStyleBits( LBS_STANDARD );
	}

	//--------------------------------------------------------------------------------
	void CListBoxFactory::SetStandard( bool bFlag )
	{
		_WINQ_FCONTEXT( "CListBoxFactory::SetStandard" );
		SetStyleBits( LBS_STANDARD, bFlag );
	}



	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CListBox );

	//--------------------------------------------------------------------------------
	CListBox::CListBox() : CWinCtrlWindow()
	{	
		_WINQ_FCONTEXT( "CListBox::CListBox" );
	}

	//--------------------------------------------------------------------------------
	CListBox::~CListBox()
	{
		_WINQ_FCONTEXT( "CListBox::~CListBox" );
	}

	//--------------------------------------------------------------------------------
	void CListBox::OnCommand( unsigned short wCtrlID, unsigned short wCode )
	{
		_WINQ_FCONTEXT( "CListBox::OnCommand" );

		switch ( wCode )
		{
		case LBN_ERRSPACE:
			{
				OnErrSpace();
			}
			break;
		case LBN_SELCHANGE:
			{
				OnSelChange();
			}
			break;
		case LBN_DBLCLK:
			{
				OnDblClick();
			}
			break;
		case LBN_SELCANCEL:
			{
				OnSelCancel();
			}
			break;
		case LBN_SETFOCUS:
			{
				OnSetFocus();
			}
			break;
		case LBN_KILLFOCUS:
			{
				OnKillFocus();
			}
			break;
		}
	}

	//--------------------------------------------------------------------------------
	void CListBox::OnErrSpace()
	{
		_WINQ_FCONTEXT( "CListBox::OnErrSpace" );
	}

	//--------------------------------------------------------------------------------
	void CListBox::OnSelChange()
	{
		_WINQ_FCONTEXT( "CListBox::OnSelChange" );
	}

	//--------------------------------------------------------------------------------
	void CListBox::OnDblClick()
	{
		_WINQ_FCONTEXT( "CListBox::OnDblClick" );
	}

	//--------------------------------------------------------------------------------
	void CListBox::OnSelCancel()
	{
		_WINQ_FCONTEXT( "CListBox::OnSelCancel" );
	}

	//--------------------------------------------------------------------------------
	void CListBox::OnSetFocus()
	{
		_WINQ_FCONTEXT( "CListBox::OnSetFocus" );

	}
	//--------------------------------------------------------------------------------
	void CListBox::OnKillFocus()
	{
		_WINQ_FCONTEXT( "CListBox::OnKillFocus" );
	}

	//--------------------------------------------------------------------------------
	long CListBox::AddFile( const TCHAR* strFile )
	{
		_WINQ_FCONTEXT( "CListBox::AddFile" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LB_ADDFILE, 0, reinterpret_cast< Cmp_long_ptr >( strFile ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListBox::AddString( const TCHAR* strItem )
	{
		_WINQ_FCONTEXT( "CListBox::AddString" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LB_ADDSTRING, 0, reinterpret_cast< Cmp_long_ptr >( strItem ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListBox::DeleteString( unsigned short wIndex )
	{
		_WINQ_FCONTEXT( "CListBox::DeleteString" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LB_DELETESTRING, static_cast< Cmp_uint_ptr >( wIndex ), 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListBox::Dir( Cmp_uint_ptr Flags, const TCHAR* strPath )
	{
		_WINQ_FCONTEXT( "CListBox::Dir" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LB_DIR, Flags, reinterpret_cast< Cmp_long_ptr >( strPath ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListBox::FindString( unsigned short wIndex, const TCHAR* strItem )
	{
		_WINQ_FCONTEXT( "CListBox::FindString" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LB_FINDSTRING, static_cast< Cmp_uint_ptr >( wIndex ), reinterpret_cast< Cmp_long_ptr >( strItem ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListBox::FindStringExact( unsigned short wIndex, const TCHAR* strItem )
	{
		_WINQ_FCONTEXT( "CListBox::FindStringExact" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LB_FINDSTRINGEXACT, static_cast< Cmp_uint_ptr >( wIndex ), reinterpret_cast< Cmp_long_ptr >( strItem ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListBox::GetAnchorIndex()
	{
		_WINQ_FCONTEXT( "CListBox::GetAnchorIndex" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LB_GETANCHORINDEX, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListBox::GetCaretIndex()
	{
		_WINQ_FCONTEXT( "CListBox::GetCaretIndex" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LB_GETCARETINDEX, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListBox::GetCount()
	{
		_WINQ_FCONTEXT( "CListBox::GetCount" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LB_GETCOUNT, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListBox::GetCurSel()
	{
		_WINQ_FCONTEXT( "CListBox::GetCurSel" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LB_GETCURSEL, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListBox::GetHorizontalExtent()
	{
		_WINQ_FCONTEXT( "CListBox::GetHorizontalExtent" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LB_GETHORIZONTALEXTENT, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListBox::SetHorizontalExtent( Cmp_uint_ptr Extent )
	{
		_WINQ_FCONTEXT( "CListBox::SetHorizontalExtent" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LB_SETHORIZONTALEXTENT, Extent, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListBox::GetItemData( unsigned short wIndex )
	{
		_WINQ_FCONTEXT( "CListBox::GetItemData" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LB_GETITEMDATA, static_cast< Cmp_uint_ptr >( wIndex ), 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListBox::GetItemHeight( unsigned short wIndex )
	{
		_WINQ_FCONTEXT( "CListBox::GetItemHeight" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LB_GETITEMHEIGHT, static_cast< Cmp_uint_ptr >( wIndex ), 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListBox::GetItemRect( unsigned short wIndex, CRectangle& rcItem )
	{
		_WINQ_FCONTEXT( "CListBox::GetItemRect" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LB_GETITEMRECT, static_cast< Cmp_uint_ptr >( wIndex ), reinterpret_cast< Cmp_long_ptr >( &rcItem ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListBox::GetInfo()
	{
		_WINQ_FCONTEXT( "CListBox::GetInfo" );
		long lResult = 0;
#if		( _WIN32_WINNT >= 0x0501 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LB_GETLISTBOXINFO, 0, 0 );
#endif//( _WIN32_WINNT >= 0x0501 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListBox::GetLocale()
	{
		_WINQ_FCONTEXT( "CListBox::GetLocale" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LB_GETLOCALE, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListBox::GetSel( unsigned short wIndex )
	{
		_WINQ_FCONTEXT( "CListBox::GetSel" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LB_GETSEL, static_cast< Cmp_uint_ptr >( wIndex ), 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListBox::GetSelCount()
	{
		_WINQ_FCONTEXT( "CListBox::GetSelCount" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int)LB_GETSELCOUNT, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListBox::GetSelItems( int* pItemsBuffer, Cmp_uint_ptr BufferCount )
	{
		_WINQ_FCONTEXT( "CListBox::GetSelItems" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int)LB_GETSELITEMS, BufferCount, reinterpret_cast< Cmp_long_ptr >( pItemsBuffer ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListBox::GetText( unsigned short wIndex, TCHAR* strBuffer )
	{
		_WINQ_FCONTEXT( "CListBox::GetText" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int)LB_GETTEXT, static_cast< Cmp_uint_ptr >( wIndex ), reinterpret_cast< Cmp_long_ptr >( strBuffer ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListBox::GetTextLength( unsigned short wIndex )
	{
		_WINQ_FCONTEXT( "CListBox::GetTextLength" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int)LB_GETTEXTLEN, static_cast< Cmp_uint_ptr >( wIndex ), 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListBox::GetTopIndex()
	{
		_WINQ_FCONTEXT( "CListBox::GetTopIndex" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int)LB_GETTOPINDEX, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListBox::InitStorage( unsigned short wItems, long lBytes )
	{
		_WINQ_FCONTEXT( "CListBox::InitStorage" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int)LB_INITSTORAGE, static_cast< Cmp_uint_ptr >( wItems ), static_cast< Cmp_long_ptr >( lBytes ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListBox::InsertString( unsigned short wIndex, const TCHAR* strItem )
	{
		_WINQ_FCONTEXT( "CListBox::InsertString" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int)LB_INSERTSTRING, static_cast< Cmp_uint_ptr >( wIndex ), reinterpret_cast< Cmp_long_ptr >( strItem ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListBox::ItemFromPoint( unsigned short wXPos, unsigned short wYPos )
	{
		_WINQ_FCONTEXT( "CListBox::ItemFromPoint" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int)LB_ITEMFROMPOINT, 0, MakeLParam( wXPos, wYPos ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListBox::ResetContent()
	{
		_WINQ_FCONTEXT( "CListBox::ResetContent" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int)LB_RESETCONTENT, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListBox::SelectString( unsigned short wIndex, const TCHAR* strSearch )
	{
		_WINQ_FCONTEXT( "CListBox::SelectString" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int)LB_SELECTSTRING, static_cast< Cmp_uint_ptr >( wIndex ), reinterpret_cast< Cmp_long_ptr >( strSearch ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListBox::SelectItemRange( bool bSelect, unsigned short wSelBegin, unsigned short wSelEnd )
	{
		_WINQ_FCONTEXT( "CListBox::SelectItemRange" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int)LB_SELITEMRANGE, static_cast< Cmp_uint_ptr >( bSelect ), MakeLParam( wSelBegin, wSelEnd ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListBox::SelectItemRangeEx( unsigned short wSelBegin, unsigned short wSelEnd )
	{
		_WINQ_FCONTEXT( "CListBox::SelectItemRangeEx" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int)LB_SELITEMRANGEEX, static_cast< Cmp_uint_ptr >( wSelBegin ), MakeLParam( 0, wSelEnd ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListBox::SetAnchorIndex( unsigned short wIndex )
	{
		_WINQ_FCONTEXT( "CListBox::SetAnchorIndex" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int)LB_SETANCHORINDEX, static_cast< Cmp_uint_ptr >( wIndex ), 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListBox::SetCaretIndex( unsigned short wIndex, bool bMinimumScrollVisible )
	{
		_WINQ_FCONTEXT( "CListBox::SetCaretIndex" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int)LB_SETCARETINDEX, static_cast< Cmp_uint_ptr >( wIndex ), static_cast< Cmp_long_ptr >( bMinimumScrollVisible ? 1 : 0 ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	void CListBox::SetColumnWidth( Cmp_uint_ptr Width )
	{
		_WINQ_FCONTEXT( "CListBox::SetColumnWidth" );
		m_Win32MsgHandler.Send( Ref(), (unsigned int) LB_SETCOLUMNWIDTH, Width, 0 );
	}

	//--------------------------------------------------------------------------------
	long CListBox::SetCount( unsigned short wItems )
	{
		_WINQ_FCONTEXT( "CListBox::SetCount" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int)LB_SETCOUNT, static_cast< Cmp_uint_ptr >( wItems ), 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListBox::SetCurSel( unsigned short wIndex )
	{
		_WINQ_FCONTEXT( "CListBox::SetCurSel" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int)LB_SETCURSEL, static_cast< Cmp_uint_ptr >( wIndex ), 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListBox::SetItemData( unsigned short wIndex, Cmp_long_ptr lItemData )
	{
		_WINQ_FCONTEXT( "CListBox::SetItemData" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int)LB_SETITEMDATA, static_cast< Cmp_uint_ptr >( wIndex ), lItemData );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListBox::SetItemHeight( unsigned short wIndex, Cmp_long_ptr lItemHeight )
	{
		_WINQ_FCONTEXT( "CListBox::SetItemHeight" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int)LB_SETITEMHEIGHT, static_cast< Cmp_uint_ptr >( wIndex ), lItemHeight );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListBox::SetLocale( Cmp_uint_ptr LocaleID )
	{
		_WINQ_FCONTEXT( "CListBox::SetLocale" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int)LB_SETLOCALE, static_cast< Cmp_uint_ptr >( LocaleID ), 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListBox::SetSel( bool bSel, Cmp_long_ptr lSelItem )
	{
		_WINQ_FCONTEXT( "CListBox::SetSel" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LB_SETSEL, static_cast< Cmp_uint_ptr >( bSel ? 1 : 0 ), lSelItem );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CListBox::SetTabstops( Cmp_uint_ptr Count, int* pTabstops )
	{
		_WINQ_FCONTEXT( "CListBox::SetTabstops" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LB_SETTABSTOPS, Count, reinterpret_cast< Cmp_long_ptr >( pTabstops ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CListBox::SetTopIndex( unsigned short wIndex )
	{
		_WINQ_FCONTEXT( "CListBox::SetTopIndex" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LB_SETTOPINDEX, static_cast< Cmp_uint_ptr >( wIndex ), 0 );
		return lResult;
	}

}//nsWin32

