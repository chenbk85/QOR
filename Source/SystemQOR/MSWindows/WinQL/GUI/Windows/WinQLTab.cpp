//WinQLTab.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CompilerQOR.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usafe: stored in member for later use" );
#include "WinQL/GUI/Windows/Tab.h"
__QCMP_WARNING_POP

//--------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_OCLASS_LUID( CTabClass );

	//--------------------------------------------------------------------------------
	CTabClass::CTabClass() : CCommonCtrlClass( CCommonCtrl::CCTAB_CLASSES, _TXT( "SysTabControl32" ) )
	{
		_WINQ_FCONTEXT( "CTabClass::CTabClass" );
	}

	//--------------------------------------------------------------------------------
	CTabClass::~CTabClass()
	{
		_WINQ_FCONTEXT( "CTabClass::~CTabClass" );
	}




	__QOR_IMPLEMENT_OCLASS_LUID( CTabFactory );

	//--------------------------------------------------------------------------------
	CTabFactory::CTabFactory() : CCommonCtrlFactory< CTab >()
	{
		_WINQ_FCONTEXT( "CTabFactory::CTabFactory" );
	}

	//--------------------------------------------------------------------------------
	bool CTabFactory::GetScrollOpposite()
	{
		_WINQ_FCONTEXT( "CTabFactory::GetScrollOpposite" );
#if		( _WIN32_IE >= 0x0300 )
		return GetStyleBits( TCS_SCROLLOPPOSITE );
#else
		return false;
#endif//( _WIN32_IE >= 0x0300 )
	}

	//--------------------------------------------------------------------------------
	void CTabFactory::SetScrollOpposite( bool bFlag )
	{
		_WINQ_FCONTEXT( "CTabFactory::SetScrollOpposite" );
#if		( _WIN32_IE >= 0x0300 )
		SetStyleBits( TCS_SCROLLOPPOSITE, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( _WIN32_IE >= 0x0300 )
	}

	//--------------------------------------------------------------------------------
	bool CTabFactory::GetBottom()
	{
		_WINQ_FCONTEXT( "CTabFactory::GetBottom" );
#if		( _WIN32_IE >= 0x0300 )
		return GetStyleBits( TCS_BOTTOM );
#else
		return false;
#endif//( _WIN32_IE >= 0x0300 )
	}

	//--------------------------------------------------------------------------------
	void CTabFactory::SetBottom( bool bFlag )
	{
		_WINQ_FCONTEXT( "CTabFactory::SetBottom" );
#if		( _WIN32_IE >= 0x0300 )
		SetStyleBits( TCS_BOTTOM, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( _WIN32_IE >= 0x0300 )
	}

	//--------------------------------------------------------------------------------
	bool CTabFactory::GetRight()
	{
		_WINQ_FCONTEXT( "CTabFactory::GetRight" );
#if		( _WIN32_IE >= 0x0300 )
		return GetStyleBits( TCS_RIGHT );
#else
		return false;
#endif//( _WIN32_IE >= 0x0300 )
	}

	//--------------------------------------------------------------------------------
	void CTabFactory::SetRight( bool bFlag )
	{
		_WINQ_FCONTEXT( "CTabFactory::SetRight" );
#if		( _WIN32_IE >= 0x0300 )
		SetStyleBits( TCS_RIGHT, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( _WIN32_IE >= 0x0300 )
	}

	//--------------------------------------------------------------------------------
	bool CTabFactory::GetMultiSelect()
	{
		_WINQ_FCONTEXT( "CTabFactory::GetMultiSelect" );
#if		( _WIN32_IE >= 0x0300 )
		return GetStyleBits( TCS_MULTISELECT );
#else
		return false;
#endif//( _WIN32_IE >= 0x0300 )
	}

	//--------------------------------------------------------------------------------
	void CTabFactory::SetMultiSelect( bool bFlag )
	{
		_WINQ_FCONTEXT( "CTabFactory::SetMultiSelect" );
#if		( _WIN32_IE >= 0x0300 )
		SetStyleBits( TCS_MULTISELECT, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( _WIN32_IE >= 0x0300 )
	}

	//--------------------------------------------------------------------------------
	bool CTabFactory::GetFlatButtons()
	{
		_WINQ_FCONTEXT( "CTabFactory::GetFlatButtons" );
#if		( _WIN32_IE >= 0x0400 )
		return GetStyleBits( TCS_FLATBUTTONS );
#else
		return false;
#endif//( _WIN32_IE >= 0x0400 )
	}

	//--------------------------------------------------------------------------------
	void CTabFactory::SetFlatButtons( bool bFlag )
	{
		_WINQ_FCONTEXT( "CTabFactory::SetFlatButtons" );
#if		( _WIN32_IE >= 0x0400 )
		SetStyleBits( TCS_FLATBUTTONS, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( _WIN32_IE >= 0x0400 )
	}

	//--------------------------------------------------------------------------------
	bool CTabFactory::GetForceIconLeft()
	{
		_WINQ_FCONTEXT( "CTabFactory::GetForceIconlLeft" );
		return GetStyleBits( TCS_FORCEICONLEFT );
	}

	//--------------------------------------------------------------------------------
	void CTabFactory::SetForceIconLeft( bool bFlag )
	{
		_WINQ_FCONTEXT( "CTabFactory::SetForceIconlLeft" );
		SetStyleBits( TCS_FORCEICONLEFT, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CTabFactory::GetForceLabelLeft()
	{
		_WINQ_FCONTEXT( "CTabFactory::GetForceLabelLeft" );
		return GetStyleBits( TCS_FORCELABELLEFT );
	}

	//--------------------------------------------------------------------------------
	void CTabFactory::SetForceLabelLeft( bool bFlag )
	{
		_WINQ_FCONTEXT( "CTabFactory::SetForceLabelLeft" );
		SetStyleBits( TCS_FORCELABELLEFT, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CTabFactory::GetHotTrack()
	{
		_WINQ_FCONTEXT( "CTabFactory::GetHotTrack" );
#if		( _WIN32_IE >= 0x0300 )
		return GetStyleBits( TCS_HOTTRACK );
#else
		return false;
#endif//( _WIN32_IE >= 0x0300 )
	}

	//--------------------------------------------------------------------------------
	void CTabFactory::SetHotTrack( bool bFlag )
	{
		_WINQ_FCONTEXT( "CTabFactory::SetHotTrack" );
#if		( _WIN32_IE >= 0x0300 )
		SetStyleBits( TCS_HOTTRACK, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( _WIN32_IE >= 0x0300 )
	}

	//--------------------------------------------------------------------------------
	bool CTabFactory::GetVertical()
	{
		_WINQ_FCONTEXT( "CTabFactory::GetVertical" );
#if		( _WIN32_IE >= 0x0300 )
		return GetStyleBits( TCS_VERTICAL );
#else
		return false;
#endif//( _WIN32_IE >= 0x0300 )
	}

	//--------------------------------------------------------------------------------
	void CTabFactory::SetVertical( bool bFlag )
	{
		_WINQ_FCONTEXT( "CTabFactory::SetVertical" );
#if		( _WIN32_IE >= 0x0300 )
		SetStyleBits( TCS_VERTICAL, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( _WIN32_IE >= 0x0300 )
	}

	//--------------------------------------------------------------------------------
	bool CTabFactory::GetTabs()
	{
		_WINQ_FCONTEXT( "CTabFactory::GetTabs" );
		return !GetStyleBits( TCS_BUTTONS );
	}

	//--------------------------------------------------------------------------------
	void CTabFactory::SetTabs( bool bFlag )
	{
		_WINQ_FCONTEXT( "CTabFactory::SetTabs" );
		SetStyleBits( TCS_BUTTONS, !bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CTabFactory::GetButtons()
	{
		_WINQ_FCONTEXT( "CTabFactory::GetButtons" );
		return GetStyleBits( TCS_BUTTONS );
	}

	//--------------------------------------------------------------------------------
	void CTabFactory::SetButtons( bool bFlag )
	{
		_WINQ_FCONTEXT( "CTabFactory::SetButtons" );
		SetStyleBits( TCS_BUTTONS, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CTabFactory::GetSingleLine()
	{
		_WINQ_FCONTEXT( "CTabFactory::GetSingleLine" );
		return !GetStyleBits( TCS_MULTILINE );
	}

	//--------------------------------------------------------------------------------
	void CTabFactory::SetSingleLine( bool bFlag )
	{
		_WINQ_FCONTEXT( "CTabFactory::SetSingleLine" );
		SetStyleBits( TCS_MULTILINE, !bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CTabFactory::GetMultiLine()
	{
		_WINQ_FCONTEXT( "CTabFactory::GetMultiLine" );
		return GetStyleBits( TCS_MULTILINE );
	}

	//--------------------------------------------------------------------------------
	void CTabFactory::SetMultiLine( bool bFlag )
	{
		_WINQ_FCONTEXT( "CTabFactory::SetMultiLine" );
		SetStyleBits( TCS_MULTILINE, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CTabFactory::GetRightJustify()
	{
		_WINQ_FCONTEXT( "CTabFactory::GetRightJustify" );
		return !GetStyleBits( TCS_FIXEDWIDTH );
	}

	//--------------------------------------------------------------------------------
	void CTabFactory::SetRightJustify( bool bFlag )
	{
		_WINQ_FCONTEXT( "CTabFactory::SetRightJustify" );
		SetStyleBits( TCS_FIXEDWIDTH, !bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CTabFactory::GetFixedWidth()
	{
		_WINQ_FCONTEXT( "CTabFactory::GetFixedWidth" );
		return GetStyleBits( TCS_FIXEDWIDTH );
	}

	//--------------------------------------------------------------------------------
	void CTabFactory::SetFixedWidth( bool bFlag )
	{
		_WINQ_FCONTEXT( "CTabFactory::SetFixedwidth" );
		SetStyleBits( TCS_FIXEDWIDTH, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CTabFactory::GetRaggedRight()
	{
		_WINQ_FCONTEXT( "CTabFactory::GetRaggedRight" );
		return GetStyleBits( TCS_RAGGEDRIGHT );
	}

	//--------------------------------------------------------------------------------
	void CTabFactory::SetRaggedRight( bool bFlag )
	{
		_WINQ_FCONTEXT( "CTabFactory::SetRaggedRight" );
		SetStyleBits( TCS_RAGGEDRIGHT, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CTabFactory::GetFocusOnButtonDown()
	{
		_WINQ_FCONTEXT( "CTabFactory::GetFocusOnButtonDown" );
		return GetStyleBits( TCS_FOCUSONBUTTONDOWN );
	}

	//--------------------------------------------------------------------------------
	void CTabFactory::SetFocusOnButtonDown( bool bFlag )
	{
		_WINQ_FCONTEXT( "CTabFactory::SetFocusOnButtonDown" );
		SetStyleBits( TCS_FOCUSONBUTTONDOWN, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CTabFactory::GetOwnerDrawFixed()
	{
		_WINQ_FCONTEXT( "CTabFactory::GetOwnerDrawFixed" );
		return GetStyleBits( TCS_OWNERDRAWFIXED );
	}

	//--------------------------------------------------------------------------------
	void CTabFactory::SetOwnerDrawFixed( bool bFlag )
	{
		_WINQ_FCONTEXT( "CTabFactory::SetOwnerDrawFixed" );
		SetStyleBits( TCS_OWNERDRAWFIXED, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CTabFactory::GetToolTips()
	{
		_WINQ_FCONTEXT( "CTabFactory::GetToolTips" );
		return GetStyleBits( TCS_TOOLTIPS );
	}

	//--------------------------------------------------------------------------------
	void CTabFactory::SetToolTips( bool bFlag )
	{
		_WINQ_FCONTEXT( "CTabFactory::SetToolTips" );
		SetStyleBits( TCS_TOOLTIPS, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CTabFactory::GetFocusNever()
	{
		_WINQ_FCONTEXT( "CTabFactory::GetFocusNever" );
		return GetStyleBits( TCS_FOCUSNEVER );
	}

	//--------------------------------------------------------------------------------
	void CTabFactory::SetFocusNever( bool bFlag )
	{
		_WINQ_FCONTEXT( "CTabFactory::SetFocusNever" );
		SetStyleBits( TCS_FOCUSNEVER, bFlag );
	}






	
	__QOR_IMPLEMENT_OCLASS_LUID( CTab );

	//--------------------------------------------------------------------------------
	CTab::CTab() : CWinCtrlWindow()
	{				
		_WINQ_FCONTEXT( "CTab::CTab" );
	}

	//--------------------------------------------------------------------------------
	CTab::~CTab()
	{
		_WINQ_FCONTEXT( "CTab::~CTab" );
	}

	//--------------------------------------------------------------------------------
	long CTab::OnNotify( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CTab::OnNotify" );

		long lResult = 0;

		if( pHdr != 0 )
		{
			switch ( pHdr->m_uiCode )
			{
			case NM_CLICK:
				{
					OnClick( pHdr );
				}
				break;
			case NM_DBLCLK:
				{
					lResult = static_cast< long >( OnDblClick( pHdr ) ? 0 : 1 );
				}
				break;
			case NM_RCLICK:
				{
					lResult = static_cast< long >( OnRClick( pHdr ) ? 0 : 1 );
				}
				break;
			case NM_RDBLCLK:
				{
					lResult = static_cast< long >( OnRDblClick( pHdr ) ? 0 : 1 );
				}
				break;
#if		( _WIN32_IE >= 0x0400 )
			case NM_RELEASEDCAPTURE:
				{
					OnReleasedCapture( pHdr );
				}
				break;
			case TCN_GETOBJECT:
				{
					OnGetObject( reinterpret_cast< NMOBJECTNOTIFY* >( pHdr ) );
				}
				break;
#endif//( _WIN32_IE >= 0x0400 )
#if		( _WIN32_IE >= 0x0500 )
			case TCN_FOCUSCHANGE:
				{
					OnFocusChange( pHdr );
				}
				break;
#endif//( _WIN32_IE >= 0x0500 )
			case TCN_KEYDOWN :
				{
					OnKeyDown( reinterpret_cast< NMTCKEYDOWN* >( pHdr ) );
				}
				break;
			case TCN_SELCHANGE:
				{
					OnSelChange( pHdr );
				}
				break;
			case TCN_SELCHANGING:
				{
					lResult = static_cast< long >( OnSelChanging( pHdr ) ? 0 : 1 );
				}
				break;
			default:
				{
					lResult = OnUnknownNotification( pHdr );
				}
				break;
			}
		}
		return lResult;
	}

	//--------------------------------------------------------------------------------
	void CTab::OnClick( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CTab::OnClick" );
	}

	//--------------------------------------------------------------------------------
	bool CTab::OnDblClick( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CTab::OnDblClick" );
		bool bResult = true;
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTab::OnRClick( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CTab::OnRClick" );
		bool bResult = true;
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTab::OnRDblClick( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CTab::OnRDblClick" );
		bool bResult = true;
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CTab::OnReleasedCapture( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CTab::OnReleasedCapture" );
	}

	//--------------------------------------------------------------------------------
	void CTab::OnFocusChange( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CTab::OnFocusChange" );
	}

	//--------------------------------------------------------------------------------
	void CTab::OnGetObject( NMOBJECTNOTIFY* pHdr )
	{
		_WINQ_FCONTEXT( "CTab::OnGetObject" );
	}

	//--------------------------------------------------------------------------------
	void CTab::OnKeyDown( NMTCKEYDOWN* pHdr )
	{
		_WINQ_FCONTEXT( "CTab::OnKeyDown" );
	}

	//--------------------------------------------------------------------------------
	void CTab::OnSelChange( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CTab::OnSelChange" );
	}

	//--------------------------------------------------------------------------------
	bool CTab::OnSelChanging( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CTab::OnSelChanging" );
		bool bResult = true;
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CTab::OnUnknownNotification( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CTab::OnUnknownNotification" );
		long lResult = 0;
		return lResult;
	}

	//--------------------------------------------------------------------------------
	void CTab::AdjustRect( bool bLarger, CRectangle& rcAdjust )
	{
		_WINQ_FCONTEXT( "CTab::AdjustRect" );
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TCM_ADJUSTRECT, 
			static_cast< Cmp_uint_ptr >( bLarger ? 1 : 0 ), reinterpret_cast< Cmp_long_ptr >( &rcAdjust ) );
	}

	//--------------------------------------------------------------------------------
	bool CTab::DeleteAllItems()
	{
		_WINQ_FCONTEXT( "CTab::DeleteAllItems" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TCM_DELETEALLITEMS, 0, 0 ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTab::DeleteItem( int iItem )
	{
		_WINQ_FCONTEXT( "CTab::DeleteItem" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TCM_DELETEALLITEMS,
			static_cast< Cmp_uint_ptr >( iItem ), 0 ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CTab::DeselectAll( bool bExcludeFocus )
	{
		_WINQ_FCONTEXT( "CTab::DeselectAll" );
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TCM_DESELECTALL,
			static_cast< Cmp_uint_ptr >( bExcludeFocus ? 1 : 0 ), 0 );
	}

	//--------------------------------------------------------------------------------
	long CTab::GetCurFocus()
	{
		_WINQ_FCONTEXT( "CTab::GetCurFocus" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TCM_GETCURFOCUS, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CTab::GetCurSel()
	{
		_WINQ_FCONTEXT( "CTab::GetCurSel" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TCM_GETCURSEL, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CTab::GetExtendedStyle()
	{
		_WINQ_FCONTEXT( "CTab::GetExtendedStyle" );
		long lResult = 0;
#if		( _WIN32_IE >= 0x0400 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TCM_GETEXTENDEDSTYLE, 0, 0 );
#endif//( _WIN32_IE >= 0x0400 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CTab::GetImageList()
	{
		_WINQ_FCONTEXT( "CTab::GetImageList" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TCM_GETIMAGELIST, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CTab::GetItem( int iItem, TCITEM& tcItem )
	{
		_WINQ_FCONTEXT( "CTab::GeTItem" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TCM_GETITEM, 
			static_cast< Cmp_uint_ptr >( iItem ), reinterpret_cast< Cmp_long_ptr >( &tcItem ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CTab::GetItemCount()
	{
		_WINQ_FCONTEXT( "CTab::GetItemCount" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TCM_GETITEMCOUNT, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CTab::GetItemRect( int iItem, CRectangle& rcItem )
	{
		_WINQ_FCONTEXT( "CTab::GetItemRect" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TCM_GETITEMRECT,
			static_cast< Cmp_uint_ptr >( iItem ), reinterpret_cast< Cmp_long_ptr >( &rcItem ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CTab::GetRowCount()
	{
		_WINQ_FCONTEXT( "CTab::GetRowCount" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TCM_GETROWCOUNT, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CTab::GetToolTips()
	{
		_WINQ_FCONTEXT( "CTab::GetToolTips" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TCM_GETTOOLTIPS, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CTab::GetUnicodeFormat()
	{
		_WINQ_FCONTEXT( "CTab::GetUnicodeFormat" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0400 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TCM_GETUNICODEFORMAT, 0, 0 ) ? true : false );
#endif//( _WIN32_IE >= 0x0400 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTab::HighlightItem( int iItem, bool bHighlight )
	{
		_WINQ_FCONTEXT( "CTab::HighlightItem" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0400 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TCM_HIGHLIGHTITEM, 
			static_cast< Cmp_uint_ptr >( iItem ), MakeLParam( bHighlight ? 1 : 0, 0 ) ) ? true : false );
#else
		__QCMP_UNREF( bHighlight );
		__QCMP_UNREF( iItem );
#endif//( _WIN32_IE >= 0x0400 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CTab::HitTest( TCHITTESTINFO& HitTestInfo )
	{
		_WINQ_FCONTEXT( "CTab::HitTest" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TCM_HITTEST, 0, 
			reinterpret_cast< Cmp_long_ptr >( &HitTestInfo ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CTab::InsertItem( int iItem, TCITEM& tcItem )
	{
		_WINQ_FCONTEXT( "CTab::InsertItem" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TCM_INSERTITEM,
			static_cast< Cmp_uint_ptr >( iItem ), reinterpret_cast< Cmp_long_ptr >( &tcItem ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	void CTab::RemoveImage( int iImage )
	{
		_WINQ_FCONTEXT( "CTab::RemoveImage" );
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TCM_REMOVEIMAGE,
			static_cast< Cmp_uint_ptr >( iImage ), 0 );
	}

	//--------------------------------------------------------------------------------
	void CTab::SetCurFocus( int iItem )
	{
		_WINQ_FCONTEXT( "CTab::SetCurFocus" );
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TCM_SETCURFOCUS,
			static_cast< Cmp_uint_ptr >( iItem ), 0 );
	}

	//--------------------------------------------------------------------------------
	long CTab::SetCurSel( int iItem )
	{
		_WINQ_FCONTEXT( "CTab::SetCurSel" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TCM_SETCURSEL,
			static_cast< Cmp_uint_ptr >( iItem ), 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CTab::SetExtendedStyle( unsigned long dwExMask, unsigned long dwExStyle )
	{
		_WINQ_FCONTEXT( "CTab::SetExtendedStyle" );
		long lResult = 0;
#if		( _WIN32_IE >= 0x0400 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TCM_SETEXTENDEDSTYLE,
			static_cast< Cmp_uint_ptr >( dwExMask ), static_cast< Cmp_long_ptr >( dwExStyle ) );
#else
		__QCMP_UNREF( dwExStyle );
		__QCMP_UNREF( dwExMask );
#endif//( _WIN32_IE >= 0x0400 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	CImageList::refType CTab::SetImageList( CImageList::refType ImageList )
	{
		_WINQ_FCONTEXT( "CTab::SetImageList" );
		return CImageList::FromHandle( CImageListHandle( 0, (void*)( m_Win32MsgHandler.Send( Ref(), (unsigned int) TCM_SETIMAGELIST, 0, reinterpret_cast< Cmp_long_ptr >( ImageList->Handle()->Use() ) ) ) ).Ref() );
	}

	//--------------------------------------------------------------------------------
	bool CTab::SetItem( int iItem, TCITEM& tcItem )
	{
		_WINQ_FCONTEXT( "CTab::SetItem" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TCM_SETITEM,
			static_cast< Cmp_uint_ptr >( iItem ),	reinterpret_cast< Cmp_long_ptr >( &tcItem ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTab::SetItemExtraBytes( int nBytes )
	{
		_WINQ_FCONTEXT( "CTab::SetItemExtraBytes" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TCM_SETITEMEXTRA,
			static_cast< Cmp_uint_ptr >( nBytes ), 0 ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CTab::SetItemSize( unsigned short wWidth, unsigned short wHeight )
	{
		_WINQ_FCONTEXT( "CTab::SetItemSize" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TCM_SETITEMSIZE,
			0, MakeLParam( wWidth, wHeight ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CTab::SetMinTabWidth( int cx )
	{
		_WINQ_FCONTEXT( "CTab::SetMinTabWidth" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) TCM_SETMINTABWIDTH,
			0, static_cast< Cmp_long_ptr >( cx ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	void CTab::SetPadding( unsigned short wWidth, unsigned short wHeight )
	{
		_WINQ_FCONTEXT( "CTab::SetPadding" );
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TCM_SETPADDING, 0, MakeLParam( wWidth, wHeight ) );
	}

	//--------------------------------------------------------------------------------
	void CTab::SetToolTips( COSWindow::refType hToolTipWnd )
	{
		_WINQ_FCONTEXT( "CTab::SetToolTips" );
		m_Win32MsgHandler.Send( Ref(), (unsigned int) TCM_SETTOOLTIPS,
			reinterpret_cast< Cmp_uint_ptr >( hToolTipWnd->Handle()->Use() ), 0 );
	}

	//--------------------------------------------------------------------------------
	bool CTab::SetUnicodeFormat( bool bUnicode )
	{
		_WINQ_FCONTEXT( "CTab::SetUnicodeFormat" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0400 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) TCM_SETUNICODEFORMAT,
			static_cast< Cmp_uint_ptr >( bUnicode ? 1 : 0 ), 0 ) ? true : false );
#endif//( _WIN32_IE >= 0x0400 )
		return bResult;
	}

}//nsWin32

