//WinQLSubclassWindow.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CompilerQOR.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usafe: stored in member for later use" );
#include "WinQL/GUI/Windows/SubclassWindow.h"
#include "WINQL/GUI/Controllers/BaseWindowController.h"
#include "WinQL/GUI/Windows/WinCtrlWindow.h"
__QCMP_WARNING_POP

//--------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_OCLASS_LUID( CSubclassWindow );

	//--------------------------------------------------------------------------------
	CSubclassWindow::CSubclassWindow() : COSWindow()
	{
		_WINQ_FCONTEXT( "CSubclassWindow::CSubclassWindow" );
		m_pOldWndProc = 0;
	}

	//--------------------------------------------------------------------------------
	CSubclassWindow::CSubclassWindow( CWindowClass* pClass, void* pParam ) : COSWindow( pClass, pParam ) 
	{
		_WINQ_FCONTEXT( "CSubclassWindow::CSubclassWindow" );
		m_pOldWndProc = 0;
	}

	//--------------------------------------------------------------------------------
	CSubclassWindow::~CSubclassWindow()
	{
		_WINQ_FCONTEXT( "CSubclassWindow::~CSubclassWindow" );
	}

	//--------------------------------------------------------------------------------
	bool CSubclassWindow::Hook()
	{
		_WINQ_FCONTEXT( "CSubclassWindow::Hook" );
		bool bHook = false;
		if( m_pOldWndProc == 0 )
		{
			m_pOldWndProc = (WNDPROC)SetLongPtr( gwlWndProc, (Cmp_long_ptr)&SubclassProc );
			bHook = true;
		}
		return bHook;
	}

	//--------------------------------------------------------------------------------
	bool CSubclassWindow::Unhook()
	{
		_WINQ_FCONTEXT( "CSubclassWindow::Unhook" );
		bool bUnhook = false;
		if( m_pOldWndProc != 0 )
		{
			SetLongPtr( gwlWndProc, (Cmp_long_ptr)m_pOldWndProc );
			m_pOldWndProc = 0;
		}
		return bUnhook;
	}

	//--------------------------------------------------------------------------------
	Cmp_long_ptr __QCMP_STDCALLCONVENTION CSubclassWindow::SubclassProc( CWindowHandle::refType hWnd, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_SFCONTEXT( "CSubclassWindow::SubclassProc" );

		Cmp_long_ptr lResult = 0;

		CSubclassWindow* pWindow = static_cast< CSubclassWindow* >( p_tWndHandleMap->FindHandle( hWnd ) );

		if( pWindow != 0 )
		{
			lResult = pWindow->MsgProc( hWnd, uMsg, wParam, lParam );
		}
		else
		{
			lResult = COSWindow::StaticWindowProc( hWnd, uMsg, wParam, lParam );
		}

		return lResult;
	}

	//--------------------------------------------------------------------------------
	Cmp_long_ptr CSubclassWindow::MsgProc( CWindowHandle::refType hwnd, unsigned int message, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CSubclassWindow::MsgProc" );

		Cmp_long_ptr lResult = 0;

		if( message == COSWindow::wmDestroy && m_pOldWndProc != 0 )
		{				
			WNDPROC pOldWndProc = m_pOldWndProc;
			Unhook();
			return COSWindow::CallProc( pOldWndProc, hwnd, message, wParam, lParam );
		}

		bool bProcessed = m_pController->ProcessMessage( *this, lResult, message, wParam, lParam );

		if( bProcessed == false )
		{
			if( m_pOldWndProc != 0 )
			{
				lResult = COSWindow::CallProc( m_pOldWndProc, hwnd, message, wParam, lParam );
			}
			else
			{
				lResult = DefaultMsgProc( COSWindow::refType( reinterpret_cast< COSWindow* >( hwnd->AsHandle().Object() ), false ), message, wParam, lParam );
			}
		}

		return lResult;
	}


	//--------------------------------------------------------------------------------
	void CWinCtrlWindow::Create( const TCHAR* lpWindowName, InstanceHandle hInstance, unsigned long dwStyle, unsigned long dwExStyle, int x, int y, int nWidth, int nHeight, CWindowHandle::refType hWndParent, CMenuHandle::refType hMenu )
	{
		COSWindow::Create( lpWindowName, hInstance, dwStyle, dwExStyle, x, y, nWidth, nHeight, hWndParent, hMenu );
		p_tWndHandleMap->Add( Handle(), this );
	}

}//nsWin32

