//WinQLStatusBar.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CompilerQOR.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usafe: stored in member for later use" );
#include "WinQL/GUI/Windows/StatusBar.h"
__QCMP_WARNING_POP

//--------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_OCLASS_LUID( CStatusBarClass );

	//--------------------------------------------------------------------------------
	CStatusBarClass::CStatusBarClass() : CCommonCtrlClass( CCommonCtrl::CCBAR_CLASSES, _TXT( "msctls_statusbar32" ) )
	{
		_WINQ_FCONTEXT( "CStatusBarClass::CStatusBarClass" );
	}

	//--------------------------------------------------------------------------------
	CStatusBarClass::~CStatusBarClass()
	{
		_WINQ_FCONTEXT( "CStatusBarClass::~CStatusBarClass" );
	}






	__QOR_IMPLEMENT_OCLASS_LUID( CStatusBarFactory );

	//--------------------------------------------------------------------------------
	CStatusBarFactory::CStatusBarFactory() : CCommonCtrlFactory< CStatusBar >()
	{
		_WINQ_FCONTEXT( "CStatusBarFactory::CStatusBarFactory" );
	}

	//--------------------------------------------------------------------------------
	CStatusBarFactory::~CStatusBarFactory()
	{
		_WINQ_FCONTEXT( "CStatusBarFactory::~CStatusBarFactory" );
	}

	//--------------------------------------------------------------------------------
	CStatusBar* CStatusBarFactory::Create()
	{
		return new CStatusBar;
	}

	//--------------------------------------------------------------------------------
	bool CStatusBarFactory::GetToolTips()
	{
		_WINQ_FCONTEXT( "CStatusBarFactory::GetToolTips" );
#if		( _WIN32_IE >= 0x0500 )
		return GetStyleBits( SBARS_TOOLTIPS );
#else//!( _WIN32_IE >= 0x0500 )
#	if		( _WIN32_IE >= 0x0400 )
		return GetStyleBits( SBT_TOOLTIPS );
#	else
		return false;
#	endif// ( _WIN32_IE >= 0x0400 )
#endif//!( _WIN32_IE >= 0x0500 )
	}

	//--------------------------------------------------------------------------------
	void CStatusBarFactory::SetToolTips( bool bFlag )
	{
		_WINQ_FCONTEXT( "CStatusBarFactory::SetToolTips" );
#if		( _WIN32_IE >= 0x0500 )
		SetStyleBits( SBARS_TOOLTIPS, bFlag );
#else//!( _WIN32_IE >= 0x0500 )
#	if		( _WIN32_IE >= 0x0400 )
		SetStyleBits( SBT_TOOLTIPS, bFlag );
#	else
		__QCMP_UNREF( bFlag );
#	endif// ( _WIN32_IE >= 0x0400 )
#endif//!( _WIN32_IE >= 0x0500 )
	}

	//--------------------------------------------------------------------------------
	bool CStatusBarFactory::GetSizeGrip()
	{
		_WINQ_FCONTEXT( "CStatusBarFactory::GetSizeGrip" );
		return GetStyleBits( SBARS_SIZEGRIP );
	}

	//--------------------------------------------------------------------------------
	void CStatusBarFactory::SetSizeGrip( bool bFlag )
	{
		_WINQ_FCONTEXT( "CStatusBarFactory::SetSizeGrip" );
		SetStyleBits( SBARS_SIZEGRIP, bFlag );
	}

		
		
		
	__QOR_IMPLEMENT_OCLASS_LUID( CStatusBar );

	//--------------------------------------------------------------------------------
	CStatusBar::CStatusBar() : CWinCtrlWindow()
	{				
		_WINQ_FCONTEXT( "CStatusBar::CStatusBar" );
	}

	//--------------------------------------------------------------------------------
	CStatusBar::~CStatusBar()
	{
		_WINQ_FCONTEXT( "CStatusBar::~CStatusBar" );
	}

	//--------------------------------------------------------------------------------
	long CStatusBar::OnNotify( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CStatusBar::OnNotify" );
		long lResult = 0;

		if( pHdr != 0 )
		{
			switch ( pHdr->m_uiCode )
			{
			case NM_CLICK:
				{
					lResult = static_cast< long >( OnClick( reinterpret_cast< NMMOUSE* >( pHdr ) ) ? 1 : 0 );
				}
				break;
			case NM_DBLCLK:
				{
					lResult = static_cast< long >( OnDblClick( reinterpret_cast< NMMOUSE* >( pHdr ) ) ? 1 : 0 );
				}
				break;
			case NM_RCLICK:
				{
					lResult = static_cast< long >( OnRClick( reinterpret_cast< NMMOUSE* >( pHdr ) ) ? 1 : 0 );
				}
				break;
			case NM_RDBLCLK:
				{
					lResult = static_cast< long >( OnRDblClick( reinterpret_cast< NMMOUSE* >( pHdr ) ) ? 1 : 0 );
				}
				break;
#if		( _WIN32_IE >= 0x0400 )
			case SBN_SIMPLEMODECHANGE:
				{
					OnSimpleModeChange( pHdr );
				}
				break;
#endif//( _WIN32_IE >= 0x0400 )
			default:
				{
					lResult = OnUnknownNotification( pHdr );
				}
				break;
			}
		}
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CStatusBar::OnClick( NMMOUSE* pHdr )
	{
		_WINQ_FCONTEXT( "CStatusBar::OnClick" );
		bool bResult = true;
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CStatusBar::OnDblClick( NMMOUSE* pHdr )
	{
		_WINQ_FCONTEXT( "CStatusBar::OnDblClick" );
		bool bResult = true;
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CStatusBar::OnRClick( NMMOUSE* pHdr )
	{
		_WINQ_FCONTEXT( "CStatusBar::OnRClick" );
		bool bResult = true;
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CStatusBar::OnRDblClick( NMMOUSE* pHdr )
	{
		_WINQ_FCONTEXT( "CStatusBar::OnRDblClick" );
		bool bResult = true;
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CStatusBar::OnSimpleModeChange( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CStatusBar::OnSimpleModeChange" );
	}

	//--------------------------------------------------------------------------------
	long CStatusBar::OnUnknownNotification( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CStatusBar::OnUnknownNotification" );
		long lResult = 0;
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CStatusBar::GetBorders( int* paBorders )
	{
		_WINQ_FCONTEXT( "CStatusBar::GetBorders" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) SB_GETBORDERS, 0, 
			reinterpret_cast< Cmp_long_ptr >( paBorders ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	CIcon::refType CStatusBar::GetIcon( int iPart )
	{
		_WINQ_FCONTEXT( "CStatusBar::GetIcon" );
		CIconHandle IconHandle( 0, 0 );
#if		( _WIN32_IE >= 0x0400 )
		IconHandle = (void*)( m_Win32MsgHandler.Send( Ref(), (unsigned int) SB_GETICON, static_cast< Cmp_uint_ptr >( iPart ), 0 ) );
#else
		__QCMP_UNREF( iPart );
#endif//( _WIN32_IE >= 0x0400 )
		return CIcon::FromHandle( CIconHandle::refType( &IconHandle ) );
	}

	//--------------------------------------------------------------------------------
	long CStatusBar::GetParts( int nParts, int* paRightCoords )
	{
		_WINQ_FCONTEXT( "CStatusBar::GetParts" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) SB_GETPARTS, 
			static_cast< Cmp_uint_ptr >( nParts ), reinterpret_cast< Cmp_long_ptr >( paRightCoords ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CStatusBar::GetRect( int iPart, CRectangle& rcPart)
	{
		_WINQ_FCONTEXT( "CStatusBar::GetRect" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) SB_GETRECT, 
			static_cast< Cmp_uint_ptr >( iPart ), reinterpret_cast< Cmp_long_ptr >( &rcPart ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CStatusBar::GetText( int iPart, char* szText )
	{
		_WINQ_FCONTEXT( "CStatusBar::GetText" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) SB_GETTEXT, 
			static_cast< Cmp_uint_ptr >( iPart ), reinterpret_cast< Cmp_long_ptr >( szText ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CStatusBar::GetTextLength( int iPart )
	{
		_WINQ_FCONTEXT( "CStatusBar::GetTextLength" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) SB_GETTEXTLENGTH, 
			static_cast< Cmp_uint_ptr >( iPart ), 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	void CStatusBar::GetTipText( unsigned short wPart, unsigned short wSize, const TCHAR* szTipText )
	{
		_WINQ_FCONTEXT( "CStatusBar::GetTipText" );
#if		( _WIN32_IE >= 0x0400 )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) SB_GETTIPTEXT, 
			MakeWParam( wPart, wSize ), reinterpret_cast< Cmp_long_ptr >( szTipText ) );
#else
		__QCMP_UNREF( szTipText );
		__QCMP_UNREF( wSize );
		__QCMP_UNREF( wPart );
#endif//( _WIN32_IE >= 0x0400 )
	}

	//--------------------------------------------------------------------------------
	bool CStatusBar::GetUnicodeFormat()
	{
		_WINQ_FCONTEXT( "CStatusBar::GetUnicodeFormat" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0400 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) SB_GETUNICODEFORMAT, 0, 0 ) ? true : false );
#endif//( _WIN32_IE >= 0x0400 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CStatusBar::IsSimple()
	{
		_WINQ_FCONTEXT( "CStatusBar::IsSimple" );
		bool bResult = false;
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) SB_ISSIMPLE, 0, 0 ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CStatusBar::SetBkColour( unsigned long clrBk )
	{
		_WINQ_FCONTEXT( "CStatusBar::SetBkColour" );
		unsigned long Result = 0;
#if		( _WIN32_IE >= 0x0400 )
		Result = static_cast< unsigned long >( m_Win32MsgHandler.Send( Ref(), 
			(unsigned int) SB_SETBKCOLOR, 0, static_cast< Cmp_long_ptr >( clrBk ) ) );
#else
		__QCMP_UNREF( clrBk );
#endif//( _WIN32_IE >= 0x0400 )
		return Result;
	}

	//--------------------------------------------------------------------------------
	bool CStatusBar::SetIcon( int iPart, CIconHandle::refType hIcon )
	{
		_WINQ_FCONTEXT( "CStatusBar::SetIcon" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0400 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) SB_SETICON, 
			static_cast< Cmp_uint_ptr >( iPart ), reinterpret_cast< Cmp_long_ptr >( hIcon->Use() ) ) ? true : false );
#else
		__QCMP_UNREF( hIcon );
		__QCMP_UNREF( iPart );
#endif//( _WIN32_IE >= 0x0400 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CStatusBar::SetMinHeight( int iMinHeight )
	{
		_WINQ_FCONTEXT( "CStatusBar::SetMinHeight" );
		m_Win32MsgHandler.Send( Ref(), (unsigned int) SB_SETMINHEIGHT, 
			static_cast< Cmp_uint_ptr >( iMinHeight ), 0 );
	}

	//--------------------------------------------------------------------------------
	bool CStatusBar::SetParts( int nParts, int* paWidths )
	{
		_WINQ_FCONTEXT( "CStatusBar::SetParts" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) SB_SETPARTS, 
			static_cast< Cmp_uint_ptr >( nParts ), reinterpret_cast< Cmp_long_ptr >( paWidths ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CStatusBar::SetText( int iPart, unsigned int uiType, TCHAR* szText )
	{
		_WINQ_FCONTEXT( "CStatusBar::SetText" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) SB_SETTEXT, 
			static_cast< Cmp_uint_ptr >( iPart | uiType ), reinterpret_cast< Cmp_long_ptr >( szText ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CStatusBar::SetTipText( int iPart, const TCHAR* strText )
	{
		_WINQ_FCONTEXT( "CStatusBar::SetTipText" );
#if		( _WIN32_IE >= 0x0400 )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) SB_SETTIPTEXT,
			static_cast< Cmp_uint_ptr >( iPart ), reinterpret_cast< Cmp_long_ptr >( strText ) );
#else
		__QCMP_UNREF( iPart );
		__QCMP_UNREF( strText );
#endif//( _WIN32_IE >= 0x0400 )
	}

	//--------------------------------------------------------------------------------
	bool CStatusBar::SetUnicodeFormat( bool bUnicode )
	{
		_WINQ_FCONTEXT( "CStatusBar::SetUnicodeFormat" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0400 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) SB_SETUNICODEFORMAT,
			static_cast< Cmp_uint_ptr >( bUnicode ? 1 : 0 ), 0 ) ? true : false );
#else
		__QCMP_UNREF( bUnicode );
#endif//( _WIN32_IE >= 0x0400 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CStatusBar::SetSimple( bool bSimple )
	{
		_WINQ_FCONTEXT( "CStatusBar::SetSimple" );
		m_Win32MsgHandler.Send( Ref(), (unsigned int) SB_SIMPLE,
			static_cast< Cmp_uint_ptr >( bSimple ? 1 : 0 ), 0 );
	}

	//--------------------------------------------------------------------------------
	//Will be called to draw any owner draw status bar parts
	void CStatusBar::OnDrawItem( DrawItemStruct* pItemStruct )
	{
		_WINQ_FCONTEXT( "CStatusBar::OnDrawItem" );
	}

	//--------------------------------------------------------------------------------
	void CStatusBar::Resize()
	{
		_WINQ_FCONTEXT( "CStatusBar::Resize" );
		m_Win32MsgHandler.Send( Ref(), (unsigned int) COSWindow::wmSize,
			COSWindow::SizeRestored, MakeLParam( 400, 300 ) );
	}

}//nsWin32
