//WinQLListCtrl.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CompilerQOR.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usafe: stored in member for later use" );
#include "WinQL/GUI/Windows/ListCtrl.h"
__QCMP_WARNING_POP

//--------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_OCLASS_LUID( CListCtrlClass );

	//--------------------------------------------------------------------------------
	CListCtrlClass::CListCtrlClass() : m_ComCtrl32( CCommonCtrl::CCLISTVIEW_CLASSES )
	{
		_WINQ_FCONTEXT( "CListCtrlClass::CListCtrlClass" );
	}

	//--------------------------------------------------------------------------------
	CListCtrlClass::~CListCtrlClass()
	{
		_WINQ_FCONTEXT( "CListCtrlClass::~CListCtrlClass" );
	}

	//--------------------------------------------------------------------------------
	bool CListCtrlClass::Preregistered()
	{ 
		_WINQ_FCONTEXT( "CListCtrlClass::Preregistered" );
		return true; 
	}

	//--------------------------------------------------------------------------------
	const TCHAR* CListCtrlClass::Name()
	{
		_WINQ_FCONTEXT( "CListCtrlClass::Name" );
		return _TXT( "SysListView32" );
	}





	__QOR_IMPLEMENT_OCLASS_LUID( CListCtrlFactory );

	//--------------------------------------------------------------------------------
	CListCtrlFactory::CListCtrlFactory() : CWindowFactory()
	{
		_WINQ_FCONTEXT( "CListCtrlFactory::CListCtrlFactory" );
	}

	//--------------------------------------------------------------------------------
	CListCtrl* CListCtrlFactory::Create()
	{
		_WINQ_FCONTEXT( "CListCtrlFactory::Instance" );
		return new CListCtrl;//PreCreateWindow< CListCtrl, CListCtrlClass >();
	}

	//--------------------------------------------------------------------------------
	CListCtrlFactory::~CListCtrlFactory()
	{				
	}
			
	//--------------------------------------------------------------------------------
	bool CListCtrlFactory::GetIcon()
	{
		return !GetStyleBits( LVS_REPORT );
	}

	//--------------------------------------------------------------------------------
	void CListCtrlFactory::SetIcon( bool bFlag )
	{
		SetStyleBits( LVS_REPORT, !bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CListCtrlFactory::GetReport()
	{
		return GetStyleBits( LVS_REPORT );
	}

	//--------------------------------------------------------------------------------
	void CListCtrlFactory::SetReport( bool bFlag )
	{
		SetStyleBits( LVS_REPORT, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CListCtrlFactory::GetSmallIcon()
	{
		return GetStyleBits( LVS_SMALLICON );
	}

	//--------------------------------------------------------------------------------
	void CListCtrlFactory::SetSmallIcon( bool bFlag )
	{
		SetStyleBits( LVS_SMALLICON, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CListCtrlFactory::GetList()
	{
		return GetStyleBits( LVS_LIST );
	}

	//--------------------------------------------------------------------------------
	void CListCtrlFactory::SetList( bool bFlag )
	{
		SetStyleBits( LVS_LIST, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CListCtrlFactory::GetSingleSel()
	{
		return GetStyleBits( LVS_SINGLESEL );
	}

	//--------------------------------------------------------------------------------
	void CListCtrlFactory::SetSingleSel( bool bFlag )
	{
		SetStyleBits( LVS_SINGLESEL, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CListCtrlFactory::GetShowSelAlways()
	{
		return GetStyleBits( LVS_SHOWSELALWAYS );
	}

	//--------------------------------------------------------------------------------
	void CListCtrlFactory::SetShowSelAlways( bool bFlag )
	{
		SetStyleBits( LVS_SHOWSELALWAYS, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CListCtrlFactory::GetSortAscending()
	{
		return GetStyleBits( LVS_SORTASCENDING );
	}

	//--------------------------------------------------------------------------------
	void CListCtrlFactory::SetSortAscending( bool bFlag )
	{
		SetStyleBits( LVS_SORTASCENDING, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CListCtrlFactory::GetSortDescending()
	{
		return GetStyleBits( LVS_SORTDESCENDING );
	}

	//--------------------------------------------------------------------------------
	void CListCtrlFactory::SetSortDescending( bool bFlag )
	{
		SetStyleBits( LVS_SORTDESCENDING, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CListCtrlFactory::GetSharedImageLists()
	{
		return GetStyleBits( LVS_SHAREIMAGELISTS );
	}

	//--------------------------------------------------------------------------------
	void CListCtrlFactory::SetSharedImageLists( bool bFlag )
	{
		SetStyleBits( LVS_SHAREIMAGELISTS, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CListCtrlFactory::GetNoLabelWrap()
	{
		return GetStyleBits( LVS_NOLABELWRAP );
	}

	//--------------------------------------------------------------------------------
	void CListCtrlFactory::SetNoLabelWrap( bool bFlag )
	{
		SetStyleBits( LVS_NOLABELWRAP, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CListCtrlFactory::GetAutoArrange()
	{
		return GetStyleBits( LVS_AUTOARRANGE );
	}

	//--------------------------------------------------------------------------------
	void CListCtrlFactory::SetAutoArrange( bool bFlag )
	{
		SetStyleBits( LVS_AUTOARRANGE, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CListCtrlFactory::GetEditLabels()
	{
		return GetStyleBits( LVS_EDITLABELS );
	}

	//--------------------------------------------------------------------------------
	void CListCtrlFactory::SetEditLabels( bool bFlag )
	{
		SetStyleBits( LVS_EDITLABELS, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CListCtrlFactory::GetOwnerData()
	{
		bool bResult = false;
#if		( _WIN32_IE >= 0x0300 )
		bResult = GetStyleBits( LVS_OWNERDATA );
#endif//( _WIN32_IE >= 0x0300 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CListCtrlFactory::SetOwnerData( bool bFlag )
	{
#if		( _WIN32_IE >= 0x0300 )
		SetStyleBits( LVS_OWNERDATA, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( _WIN32_IE >= 0x0300 )
	}

	//--------------------------------------------------------------------------------
	bool CListCtrlFactory::GetNoScroll()
	{
		return GetStyleBits( LVS_NOSCROLL );
	}

	//--------------------------------------------------------------------------------
	void CListCtrlFactory::SetNoScroll( bool bFlag )
	{
		SetStyleBits( LVS_NOSCROLL, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CListCtrlFactory::GetAlignTop()
	{
		return !GetStyleBits( LVS_ALIGNLEFT );
	}

	//--------------------------------------------------------------------------------
	void CListCtrlFactory::SetAlignTop( bool bFlag )
	{
		SetStyleBits( LVS_ALIGNLEFT, !bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CListCtrlFactory::GetAlignLeft()
	{
		return GetStyleBits( LVS_ALIGNLEFT );
	}

	//--------------------------------------------------------------------------------
	void CListCtrlFactory::SetAlignLeft( bool bFlag )
	{
		SetStyleBits( LVS_ALIGNLEFT, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CListCtrlFactory::GetOwnerDrawFixed()
	{
		return GetStyleBits( LVS_OWNERDRAWFIXED );
	}

	//--------------------------------------------------------------------------------
	void CListCtrlFactory::SetOwnerDrawFixed( bool bFlag )
	{
		SetStyleBits( LVS_OWNERDRAWFIXED, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CListCtrlFactory::GetNoColumnHeader()
	{
		return GetStyleBits( LVS_NOCOLUMNHEADER );
	}

	//--------------------------------------------------------------------------------
	void CListCtrlFactory::SetNoColumnHeader( bool bFlag )
	{
		SetStyleBits( LVS_NOCOLUMNHEADER, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CListCtrlFactory::GetNoSortOrder()
	{
		return GetStyleBits( LVS_NOSORTHEADER );
	}

	//--------------------------------------------------------------------------------
	void CListCtrlFactory::SetNoSortOrder( bool bFlag )
	{
		SetStyleBits( LVS_NOSORTHEADER, bFlag );
	}
 



	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CListCtrl );

	//--------------------------------------------------------------------------------
	CListCtrl::CListCtrl() : CWinCtrlWindow()
	{				
		_WINQ_FCONTEXT( "CListCtrl::CListCtrl" );
	}

	//--------------------------------------------------------------------------------
	CListCtrl::~CListCtrl()
	{
		_WINQ_FCONTEXT( "CListCtrl::~CListCtrl" );
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::OnNotify( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CListCtrl::OnNotify" );

		long lResult = 0;

		if( pHdr != 0 )
		{
			switch ( pHdr->m_uiCode )
			{
			case LVN_BEGINDRAG:
				{
					OnBeginDrag( reinterpret_cast< NMLISTVIEW* >( pHdr ) );
				}
				break;
			case LVN_BEGINLABELEDIT:
				{
					lResult = static_cast< long >( OnBeginLabelEdit( reinterpret_cast< NMLVDISPINFO* >( pHdr ) ) ? 1 : 0 );
				}
				break;
			case LVN_BEGINRDRAG:
				{
					OnBeginRDrag( reinterpret_cast< NMLISTVIEW* >( pHdr ) );
				}
				break;
#if		( _WIN32_WINNT >= 0x0501 )
			case LVN_BEGINSCROLL:
				{
					OnBeginScroll( reinterpret_cast< NMLVSCROLL* >( pHdr ) );
				}
				break;
#endif//( _WIN32_WINNT >= 0x0501 )
			case LVN_COLUMNCLICK:
				{
					OnColumnClick( reinterpret_cast< NMLISTVIEW* >( pHdr ) );
				}
				break;
#if		( _WIN32_WINNT >= 0x0600 )
			case LVN_COLUMNDROPDOWN:
				{
					OnColumnDropDown( reinterpret_cast< NMLISTVIEW* >( pHdr ) );
				}
				break;
			case LVN_COLUMNOVERFLOWCLICK:
				{
					OnColumnOverflowClick( reinterpret_cast< NMLISTVIEW* >( pHdr ) );
				}
				break;
#endif//( _WIN32_WINNT >= 0x0600 )
			case LVN_DELETEALLITEMS:
				{
					lResult = static_cast< long >( OnDeleteAllItems( reinterpret_cast< NMLISTVIEW* >( pHdr ) ) ? 1 : 0 );
				}
				break;
			case LVN_DELETEITEM:
				{
					OnDeleteItem( reinterpret_cast< NMLISTVIEW* >( pHdr ) );
				}
				break;
			case LVN_ENDLABELEDIT:
				{
					lResult = static_cast< long >( OnEndLabelEdit( reinterpret_cast<  NMLVDISPINFO* >( pHdr ) ) ? 1 : 0 );
				}
				break;
#if		( _WIN32_WINNT >= 0x0501 )
			case LVN_ENDSCROLL:
				{
					OnEndScroll( reinterpret_cast< NMLVSCROLL* >( pHdr ) );
				}
				break;
#endif//( _WIN32_WINNT >= 0x0501 )
			case LVN_GETDISPINFO:
				{
					OnGetDispInfo( reinterpret_cast< NMLVDISPINFO* >( pHdr ) );
				}
				break;
#if		( _WIN32_WINNT >= 0x0600 )
			case LVN_GETEMPTYMARKUP:
				{
					lResult = static_cast< long >( OnGetEmptyMarkup( reinterpret_cast< NMLVEMPTYMARKUP* >( pHdr ) ) ? 1 : 0 );
				}
				break;
#endif//( _WIN32_WINNT >= 0x0600 )
#if		( _WIN32_IE >= 0x0400 )
			case LVN_GETINFOTIP:
				{
					OnGetInfoTip( reinterpret_cast< NMLVGETINFOTIP* >( pHdr ) );
				}
				break;
			case LVN_HOTTRACK:
				{
					lResult = static_cast< long >( OnHotTrack( reinterpret_cast< NMLISTVIEW* >( pHdr ) ) ? 1 : 0 );
				}
				break;
#endif//( _WIN32_IE >= 0x0400 )
#if		( _WIN32_IE >= 0x0500 )
			case LVN_INCREMENTALSEARCH:
				{
					OnIncrementalSearch( reinterpret_cast< NMLVFINDITEM* >( pHdr ) );
				}
				break;
#endif//( _WIN32_IE >= 0x0500 )
			case LVN_INSERTITEM:
				{
					OnInsertItem( reinterpret_cast< NMLISTVIEW* >( pHdr ) );
				}
				break;
			case LVN_ITEMACTIVATE:
				{
#if		( _WIN32_IE >= 0x0400 )
					OnItemActivate( reinterpret_cast< NMITEMACTIVATE* >( pHdr ) );
#else
					OnItemActivate( pHdr );
#endif//( _WIN32_IE >= 0x0400 )
				}
				break;
			case LVN_ITEMCHANGED:
				{
					OnItemChanged( reinterpret_cast< NMLISTVIEW* >( pHdr ) );
				}
				break;
			case LVN_ITEMCHANGING:
				{
					lResult = static_cast< long >( OnItemChanging( reinterpret_cast< NMLISTVIEW* >( pHdr ) ) ? 1 : 0 );
				}
				break;
			case LVN_KEYDOWN:
				{
					OnKeyDown( reinterpret_cast< NMLVKEYDOWN* >( pHdr ) );
				}
				break;
#if		( _WIN32_WINNT >= 0x0600 )
			case LVN_LINKCLICK:
				{
					OnLinkClick( reinterpret_cast< NMLVLINK* >( pHdr ) );
				}
				break;
#endif//( _WIN32_WINNT >= 0x0600 )
			case LVN_MARQUEEBEGIN:
				{
					lResult = static_cast< long >( OnMarqueeBegin( reinterpret_cast< NMLISTVIEW* >( pHdr ) ) ? 0 : 1 );
				}
				break;
			case LVN_ODCACHEHINT:
				{
					OnOwnerDrawCacheHint( reinterpret_cast< NMLVCACHEHINT* >( pHdr ) );
				}
				break;
			case LVN_ODFINDITEM:
				{
					lResult = OnOwnerDrawFindItem( reinterpret_cast< NMLVFINDITEM* >( pHdr ) );
				}
				break;
			case LVN_ODSTATECHANGED:
				{
					OnOwnerDrawStateChanged( reinterpret_cast< NMLVODSTATECHANGE* >( pHdr ) );
				}
				break;
			case LVN_SETDISPINFO:
				{
					OnSetDispInfo( reinterpret_cast< NMLVDISPINFO* >( pHdr ) );
				}
				break;
			case NM_CLICK:
				{
					OnClick( reinterpret_cast< NMITEMACTIVATE* >( pHdr ) );
				}
				break;
			case NM_CUSTOMDRAW:
				{
					lResult = OnCustomDraw( reinterpret_cast<  NMLVCUSTOMDRAW* >( pHdr ) );
				}
				break;
			case NM_DBLCLK:
				{
					OnDblClick( reinterpret_cast< NMITEMACTIVATE* >( pHdr ) );
				}
				break;
			case NM_HOVER:
				{
					lResult = static_cast< long >( OnHover( pHdr ) ? 0 : 1 );
				}
				break;
			case NM_KILLFOCUS:
				{
					OnKillFocus( pHdr );
				}
				break;
			case NM_RCLICK:
				{
					lResult = static_cast< long >( OnRClick( reinterpret_cast< NMITEMACTIVATE* >( pHdr ) ) ? 0 : 1 );
				}
				break;
			case NM_RDBLCLK:
				{
					OnRDblClick( reinterpret_cast< NMITEMACTIVATE* >( pHdr ) );
				}
				break;
#if		( _WIN32_IE >= 0x0400 )
			case NM_RELEASEDCAPTURE:
				{
					OnReleasedCapture( pHdr );
				}
				break;
#endif//( _WIN32_IE >= 0x0400 )
			case NM_RETURN:
				{
					OnReturn( pHdr );
				}
				break;
			case NM_SETFOCUS:
				{
					OnSetFocus( pHdr );
				}
				break;
			default:
				{
					lResult = OnUnknownNotification( pHdr );
				}
				break;
			}
		}
		return lResult;
	}

	//--------------------------------------------------------------------------------
	void CListCtrl::OnBeginDrag( NMLISTVIEW* pHdr )
	{
	}
		
	//--------------------------------------------------------------------------------
	bool CListCtrl::OnBeginLabelEdit( NMLVDISPINFO* pHdr )
	{
		return true;
	}

	//--------------------------------------------------------------------------------
	void CListCtrl::OnBeginRDrag( NMLISTVIEW* pHdr )
	{
	}

	//--------------------------------------------------------------------------------
	void CListCtrl::OnBeginScroll( NMLVSCROLL* pHdr )
	{
	}

	//--------------------------------------------------------------------------------
	void CListCtrl::OnColumnClick( NMLISTVIEW* pHdr )
	{
	}

	//--------------------------------------------------------------------------------
	void CListCtrl::OnColumnDropDown( NMLISTVIEW* pHdr )
	{
	}

	//--------------------------------------------------------------------------------
	void CListCtrl::OnColumnOverflowClick( NMLISTVIEW* pHdr )
	{
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::OnDeleteAllItems( NMLISTVIEW* pHdr )
	{
		return true;
	}

	//--------------------------------------------------------------------------------
	void CListCtrl::OnDeleteItem( NMLISTVIEW* pHdr )
	{
	}
		
	//--------------------------------------------------------------------------------
	bool CListCtrl::OnEndLabelEdit( NMLVDISPINFO* pHdr )
	{
		return true;
	}
		
	//--------------------------------------------------------------------------------
	void CListCtrl::OnEndScroll( NMLVSCROLL* pHdr )
	{
	}

	//--------------------------------------------------------------------------------
	void CListCtrl::OnGetDispInfo( NMLVDISPINFO* pHdr )
	{
	}
		
	//--------------------------------------------------------------------------------
	bool CListCtrl::OnGetEmptyMarkup( NMLVEMPTYMARKUP* pHdr )
	{
		return false;
	}
		
	//--------------------------------------------------------------------------------
	void CListCtrl::OnGetInfoTip( NMLVGETINFOTIP* pHdr )
	{
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::OnHotTrack( NMLISTVIEW* pHdr )
	{
		return true;
	}

	//--------------------------------------------------------------------------------
	void CListCtrl::OnIncrementalSearch( NMLVFINDITEM* pHdr )
	{
	}
					
	//--------------------------------------------------------------------------------
	void CListCtrl::OnInsertItem( NMLISTVIEW* pHdr )
	{
	}
		
	//--------------------------------------------------------------------------------
	void CListCtrl::OnItemActivate( NMITEMACTIVATE* pHdr )
	{
	}

	//--------------------------------------------------------------------------------
	void CListCtrl::OnItemActivate( NotificationMessageHeader* pHdr )
	{
	}

	//--------------------------------------------------------------------------------
	void CListCtrl::OnItemChanged( NMLISTVIEW* pHdr )
	{
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::OnItemChanging( NMLISTVIEW* pHdr )
	{
		return true;
	}

	//--------------------------------------------------------------------------------
	void CListCtrl::OnKeyDown( NMLVKEYDOWN* pHdr )
	{
	}
					
	//--------------------------------------------------------------------------------
	void CListCtrl::OnLinkClick( NMLVLINK* pHdr ) 
	{
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::OnMarqueeBegin( NMLISTVIEW* pHdr )
	{
		return true;
	}

	//--------------------------------------------------------------------------------
	void CListCtrl::OnOwnerDrawCacheHint( NMLVCACHEHINT* pHdr )
	{
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::OnOwnerDrawFindItem( NMLVFINDITEM* pHdr )
	{
		long lResult = -1;
		return lResult;
	}

	//--------------------------------------------------------------------------------
	void CListCtrl::OnOwnerDrawStateChanged( NMLVODSTATECHANGE* pHdr )
	{
	}

	//--------------------------------------------------------------------------------
	void CListCtrl::OnSetDispInfo( NMLVDISPINFO* pHdr )
	{
	}

	//--------------------------------------------------------------------------------
	void CListCtrl::OnClick( NMITEMACTIVATE* pHdr )
	{
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::OnCustomDraw( NMLVCUSTOMDRAW* pHdr )
	{
		long lResult = CDRF_DODEFAULT;
		return lResult;
	}

	//--------------------------------------------------------------------------------
	void CListCtrl::OnDblClick( NMITEMACTIVATE* pHdr )
	{
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::OnHover( NotificationMessageHeader* pHdr )
	{
		long lResult = 0;
		return lResult;
	}

	//--------------------------------------------------------------------------------
	void CListCtrl::OnKillFocus( NotificationMessageHeader* pHdr )
	{
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::OnRClick( NMITEMACTIVATE* pHdr )
	{
		return true;
	}

	//--------------------------------------------------------------------------------
	void CListCtrl::OnRDblClick( NMITEMACTIVATE* pHdr )
	{
	}

	//--------------------------------------------------------------------------------
	void CListCtrl::OnReleasedCapture( NotificationMessageHeader* pHdr )
	{
	}

	//--------------------------------------------------------------------------------
	void CListCtrl::OnReturn( NotificationMessageHeader* pHdr )
	{
	}

	//--------------------------------------------------------------------------------
	void CListCtrl::OnSetFocus( NotificationMessageHeader* pHdr )
	{
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::OnUnknownNotification( NotificationMessageHeader* pHdr )
	{
		long lResult = 0;
		return lResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CListCtrl::ApproximateViewRect( int iItemCount, unsigned short wcx, unsigned short wcy )
	{
		unsigned long dwResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_APPROXIMATEVIEWRECT, static_cast< Cmp_uint_ptr >( iItemCount ), MakeLParam( wcx, wcy ) );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::Arrange( Cmp_uint_ptr Alignment )
	{
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_ARRANGE, Alignment, 0 ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CListCtrl::CancelEditLabel()
	{
#if		( _WIN32_IE >= 0x0400 )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_CANCELEDITLABEL, 0, 0 );
#endif//( _WIN32_IE >= 0x0400 )
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::CreateDragImage( int iItem, CPoint& Point )
	{
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_CREATEDRAGIMAGE, static_cast< Cmp_uint_ptr >( iItem ), reinterpret_cast< Cmp_long_ptr >( &Point ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::DeleteAllItems()
	{
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_DELETEALLITEMS, 0, 0 ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::DeleteColumn( int iColumn )
	{
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_DELETECOLUMN, static_cast< Cmp_uint_ptr >( iColumn ), 0 ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::DeleteItem( int iItem )
	{
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_DELETEITEM, static_cast< Cmp_uint_ptr >( iItem ), 0 ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::EditLabel( int iItem )
	{
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_EDITLABEL, static_cast< Cmp_uint_ptr >( iItem ), 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::EnableGroupView( bool bEnable )
	{
		long lResult = 0;
#if		( _WIN32_IE >= 0x0400 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_ENABLEGROUPVIEW, static_cast< Cmp_uint_ptr >( bEnable ? 1 : 0 ), 0 );
#endif//( _WIN32_IE >= 0x0400 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::EnsureVisible( int iItem, bool bPartialOK )
	{
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_ENSUREVISIBLE, static_cast< Cmp_uint_ptr >( iItem ), static_cast< Cmp_long_ptr >( bPartialOK ? 1 : 0 ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::FindItem( int iStart, LVFINDINFO& Info )
	{
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_FINDITEM, static_cast< Cmp_uint_ptr >( iStart ), reinterpret_cast< Cmp_long_ptr >( &Info ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::GetBackgroundColour()
	{
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETBKCOLOR, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::GetBackgroundImage( LVBkImage& Image )
	{
		bool bResult = false;
#if		( _WIN32_IE >= 0x0400 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETBKIMAGE, 0, reinterpret_cast< Cmp_long_ptr >( &Image ) ) ? true : false );
#endif//( _WIN32_IE >= 0x0400 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::GetCallbackMask()
	{
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETCALLBACKMASK, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::GetColumn( int iColumn, LVCOLUMN& ColumnInfo )
	{
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETCOLUMN, static_cast< Cmp_uint_ptr >( iColumn ), reinterpret_cast< Cmp_long_ptr >( &ColumnInfo ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::GetColumnOrderArray( int iSize, int* paOrder )
	{
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETCOLUMNORDERARRAY, static_cast< Cmp_uint_ptr >( iSize ), reinterpret_cast< Cmp_long_ptr >( paOrder ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::GetColumnWidth( int iColumn )
	{
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETCOLUMNWIDTH, static_cast< Cmp_uint_ptr >( iColumn ), 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::GetCountPerPage()
	{
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETCOUNTPERPAGE, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::GetEditControl()
	{
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETEDITCONTROL, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::GetEmptyText( unsigned int uicchText, wchar_t* strBuffer )
	{
		bool bResult = false;
#if		( _WIN32_WINNT >= 0x0600 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETEMPTYTEXT, static_cast< Cmp_uint_ptr >( uicchText ), reinterpret_cast< Cmp_long_ptr >( strBuffer ) ) ? true : false );
#else
		__QCMP_UNREF( uicchText );
		__QCMP_UNREF( strBuffer );
#endif//( _WIN32_WINNT >= 0x0600 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CListCtrl::GetExtendedStyle()
	{
		unsigned long dwResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETEXTENDEDLISTVIEWSTYLE, 0, 0 );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::GetFocusedGroup()
	{
		long lResult = 0;
#if		( _WIN32_IE >= 0x0400 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETFOCUSEDGROUP, 0, 0 );
#endif//( _WIN32_IE >= 0x0400 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	void CListCtrl::GetFooterInfo( LVFOOTERINFO& FooterInfo )
	{
#if		( _WIN32_WINNT >= 0x0600 )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETFOOTERINFO, 0, reinterpret_cast< Cmp_long_ptr >( &FooterInfo ) );
#else
		__QCMP_UNREF( FooterInfo );
#endif//( _WIN32_WINNT >= 0x0600 )
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::GetFooterItem( int iItem, LVFOOTERITEM& FooterItem )
	{
		bool bResult = false;
#if		( _WIN32_WINNT >= 0x0600 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETFOOTERITEM, static_cast< Cmp_uint_ptr >( iItem ), reinterpret_cast< Cmp_long_ptr >( &FooterItem ) ) ? true : false );
#else
		__QCMP_UNREF( iItem );
		__QCMP_UNREF( FooterItem );
#endif//( _WIN32_WINNT >= 0x0600 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::GetFooterItemRect( int iItem, CRectangle& rcFooterItem )
	{
		bool bResult = false;
#if		( _WIN32_WINNT >= 0x0600 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETFOOTERITEMRECT, static_cast< Cmp_uint_ptr >( iItem ), reinterpret_cast< Cmp_long_ptr >( &rcFooterItem ) ) ? true : false );
#else
		__QCMP_UNREF( iItem );
		__QCMP_UNREF( rcFooterItem );
#endif//( _WIN32_WINNT >= 0x0600 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::GetFooterRect( CRectangle& rcFooter )
	{
		bool bResult = false;
#if		( _WIN32_WINNT >= 0x0600 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETFOOTERRECT, 0, reinterpret_cast< Cmp_long_ptr >( &rcFooter ) ) ? true : false );
#endif//( _WIN32_WINNT >= 0x0600 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::GetGroupCount()
	{
		long lResult = 0;
#if		( _WIN32_WINNT >= 0x0600 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETGROUPCOUNT, 0, 0 );
#endif//( _WIN32_WINNT >= 0x0600 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::GetGroupInfo( int iGroup, LVGROUP& GroupInfo )
	{
		long lResult = 0;
#if		( _WIN32_WINNT >= 0x0501 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETGROUPINFO, static_cast< Cmp_uint_ptr >( iGroup ), reinterpret_cast< Cmp_long_ptr >( &GroupInfo ) );
#endif//( _WIN32_WINNT >= 0x0501 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::GetGroupInfoByIndex( int iIndex, LVGROUP& GroupInfo )
	{
		bool bResult = false;
#if		( _WIN32_WINNT >= 0x0501 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETGROUPINFOBYINDEX, static_cast< Cmp_uint_ptr >( iIndex ), reinterpret_cast< Cmp_long_ptr >( &GroupInfo ) ) ? true : false );
#endif//( _WIN32_WINNT >= 0x0501 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CListCtrl::GetGroupMetrics( LVGROUPMETRICS& GroupMetrics )
	{
#if		( _WIN32_WINNT >= 0x0501 )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETGROUPMETRICS, 0, reinterpret_cast< Cmp_long_ptr >( &GroupMetrics ) );
#endif//( _WIN32_WINNT >= 0x0501 )
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::GetGroupRect( int iGroupId, CRectangle& rcGroup, int iFlags )
	{
		bool bResult = false;
#if		( _WIN32_WINNT >= 0x0501 )
		rcGroup.SetTop( iFlags );
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETGROUPRECT, static_cast< Cmp_uint_ptr >( iGroupId ), reinterpret_cast< Cmp_long_ptr >( &rcGroup ) ) ? true : false );
#endif//( _WIN32_WINNT >= 0x0501 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::GetGroupState( int iGroupId, unsigned int uiMask )
	{
		long lResult = 0;
#if		( _WIN32_WINNT >= 0x0501 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETGROUPSTATE, static_cast< Cmp_uint_ptr >( iGroupId ), static_cast< Cmp_long_ptr >( uiMask ) );
#endif//( _WIN32_WINNT >= 0x0501 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::GetHeader()
	{
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETHEADER, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	CCursorHandle::refType CListCtrl::GetHotCursor()
	{
		CCursorHandle::refType Result( new CCursorHandle( 0, (void*)( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETHOTCURSOR, 0, 0 ) ) ), true );
		return Result;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::GetHotItem()
	{
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETHOTITEM, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::GetHoverTime()
	{
		long lResult = 0;
#if		( _WIN32_IE >= 0x0400 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETHOVERTIME, 0, 0 );
#endif//( _WIN32_IE >= 0x0400 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::GetImageList( int iImageList )
	{
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETIMAGELIST, static_cast< Cmp_uint_ptr >( iImageList ), 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::GetInsertMark( LVINSERTMARK& InsertMark )
	{
		bool bResult = false;
#if		( _WIN32_WINNT >= 0x0501 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETINSERTMARK, 0, reinterpret_cast< Cmp_long_ptr >( &InsertMark ) ) ? true : false );
#endif//( _WIN32_WINNT >= 0x0501 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CListCtrl::GetInsertMarkColour()
	{
		unsigned long Result = 0;
#if		( _WIN32_WINNT >= 0x0501 )
		Result = static_cast< unsigned long >( m_Win32MsgHandler.Send(
			Ref(), (unsigned int) LVM_GETINSERTMARKCOLOR, 0, 0 ) );
#endif//( _WIN32_WINNT >= 0x0501 )
		return Result;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::GetInsertMarkRect( CRectangle& rcInsertMark )
	{
		bool bResult = false;
#if		( _WIN32_WINNT >= 0x0501 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETINSERTMARKRECT, 0, 
			reinterpret_cast< Cmp_long_ptr >( &rcInsertMark ) ) ? true : false );
#endif//( _WIN32_WINNT >= 0x0501 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::GetIncrementalSearchString( char* strBuffer )
	{
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETISEARCHSTRING, 0, reinterpret_cast< Cmp_long_ptr >( strBuffer ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::GetItem( LVITEM& Item )
	{
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETITEM, 0, reinterpret_cast< Cmp_long_ptr >( &Item ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::GetItemCount()
	{
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETITEMCOUNT, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::GetItemIndexRect( LVITEMINDEX& ItemIndex, CRectangle& rcItem, int iSubItem, int iRect )
	{
		bool bResult = false;
#if		( _WIN32_WINNT >= 0x0600 )
		rcItem.SetTop( iSubItem );
		rcItem.SetLeft( iRect );
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETITEMINDEXRECT, reinterpret_cast< Cmp_uint_ptr >( &ItemIndex ), reinterpret_cast< Cmp_long_ptr >( rcItem.Ptr() ) ) ? true : false );
#endif//( _WIN32_WINNT >= 0x0600 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::GetItemPosition( int iItem, CPoint& Point )
	{
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETITEMPOSITION, static_cast< Cmp_uint_ptr >( iItem ), reinterpret_cast< Cmp_long_ptr >( &Point ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::GetItemRect( int iItem, CRectangle& rcItem, int iRect )
	{
		rcItem.SetLeft( iRect );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETITEMRECT, static_cast< Cmp_uint_ptr >( iItem ), reinterpret_cast< Cmp_long_ptr >( rcItem.Ptr() ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::GetItemSpacing( bool bSmallIcons )
	{
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETITEMSPACING, static_cast< Cmp_uint_ptr >( bSmallIcons ? 1 : 0 ), 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::GetItemState( int iItem, unsigned int uiMask )
	{
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETITEMSTATE, static_cast< Cmp_uint_ptr >( iItem ), static_cast< Cmp_long_ptr >( uiMask ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::GetItemText( int iItem, LVITEM& Item )
	{
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETITEMTEXT, static_cast< Cmp_uint_ptr >( iItem ), reinterpret_cast< Cmp_long_ptr >( &Item ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::GetNextItem( int iStart, unsigned int uiFlags )
	{
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETNEXTITEM, static_cast< Cmp_uint_ptr >( iStart ), static_cast< Cmp_long_ptr >( uiFlags ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::GetNextItemIndex( LVITEMINDEX& ItemIndex, Cmp_long_ptr Flags )
	{
		bool bResult = false;
#if		( _WIN32_WINNT >= 0x0600 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETNEXTITEMINDEX, reinterpret_cast< Cmp_uint_ptr >( &ItemIndex ), Flags ) ? true : false );
#endif//( _WIN32_WINNT >= 0x0600 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CListCtrl::GetNumberOfWorkAreas( unsigned int& uiWorkAreas )
	{
#if		( _WIN32_IE >= 0x0400 )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETNUMBEROFWORKAREAS, 0, reinterpret_cast< Cmp_long_ptr >( &uiWorkAreas ) );
#endif//( _WIN32_IE >= 0x0400 )
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::GetOrigin( CPoint& Point )
	{
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETORIGIN, 0, reinterpret_cast< Cmp_long_ptr >( &Point ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CListCtrl::GetOutlineColour()
	{
		unsigned long Result = 0;
#if		( _WIN32_WINNT >= 0x0501 )
		Result = static_cast< unsigned long >( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETOUTLINECOLOR, 0, 0 ) );
#endif//( _WIN32_WINNT >= 0x0501 )
		return Result;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::GetSelectedColumn()
	{
		long lResult = 0;
#if		( _WIN32_WINNT >= 0x0501 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETSELECTEDCOLUMN, 0, 0 );
#endif//( _WIN32_WINNT >= 0x0501 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::GetSelectedCount()
	{
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETSELECTEDCOUNT, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::GetSelectionMark()
	{
		long lResult = 0;
#if		( _WIN32_IE >= 0x0400 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETSELECTIONMARK, 0, 0 );
#endif//( _WIN32_IE >= 0x0400 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::GetStringWidth( const char* strItem )
	{
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETSTRINGWIDTH, 0, reinterpret_cast< Cmp_long_ptr >( strItem ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::GetSubItemRect( int iItem, CRectangle& rcSubItem )
	{
		bool bResult = false;
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETSUBITEMRECT, static_cast< Cmp_uint_ptr >( iItem ), reinterpret_cast< Cmp_long_ptr >( &rcSubItem ) )  ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::GetTextBkColour()
	{
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETTEXTBKCOLOR, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::GetTextColour()
	{
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETTEXTCOLOR, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	void CListCtrl::GetTileInfo( LVTILEINFO& TileInfo )
	{
#if		( _WIN32_WINNT >= 0x0501 )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETTILEINFO, 0, reinterpret_cast< Cmp_long_ptr >( &TileInfo ) );
#endif//( _WIN32_WINNT >= 0x0501 )
	}

	//--------------------------------------------------------------------------------
	void CListCtrl::GetTileViewInfo( LVTILEVIEWINFO& TileViewInfo )
	{
#if		( _WIN32_WINNT >= 0x0501 )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETTILEVIEWINFO, 0, reinterpret_cast< Cmp_long_ptr >( &TileViewInfo ) );
#endif//( _WIN32_WINNT >= 0x0501 )
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::GetToolTips()
	{
		long lResult = 0;
#if		( _WIN32_IE >= 0x0400 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETTOOLTIPS, 0, 0 );
#endif//( _WIN32_IE >= 0x0400 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::GetTopIndex()
	{
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETTOPINDEX, 0, 0 );
		return lResult;
	}
			
	//--------------------------------------------------------------------------------
	bool CListCtrl::GetUnicodeFormat()
	{
		bool bResult = false;
#if		( _WIN32_IE >= 0x0400 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETUNICODEFORMAT, 0, 0 ) ? true : false );
#endif//( _WIN32_IE >= 0x0400 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::GetView()
	{
		long lResult = 0;
#if		( _WIN32_WINNT >= 0x0501 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETVIEW, 0, 0 );
#endif//( _WIN32_WINNT >= 0x0501 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::GetViewRect( CRectangle& rcView )
	{
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETVIEWRECT, 0, reinterpret_cast< Cmp_long_ptr >( &rcView ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CListCtrl::GetWorkAreas( int nWorkAreas, RECT* paRects )
	{
#if		( _WIN32_IE >= 0x0400 )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_GETWORKAREAS, static_cast< Cmp_uint_ptr >( nWorkAreas ), reinterpret_cast< Cmp_long_ptr >( paRects ) );
#endif//( _WIN32_IE >= 0x0400 )
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::HasGroup( int iGroupId )
	{
		bool bResult = false;
#if		( _WIN32_WINNT >= 0x0501 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_HASGROUP, static_cast< Cmp_uint_ptr >( iGroupId ), 0 ) ? true : false );
#endif//( _WIN32_WINNT >= 0x0501 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::HitTest( LVHITTESTINFO& HitTestInfo, bool bGroup )
	{
		long lResult = 0;
		Cmp_uint_ptr wParam = 0;
#if		( WIN32_WINNT >= 0x0600 )
		if( bGroup == true )
		{
			wParam = -1 ;
		}
#else
		QOR_PP_UNREF( bGroup );
#endif//( WIN32_WINNT >= 0x0600 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_HITTEST, wParam, reinterpret_cast< Cmp_long_ptr >( &HitTestInfo ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::InsertColumn( int iColumn, LVCOLUMN& Column )
	{
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_INSERTCOLUMN, static_cast< Cmp_uint_ptr >( iColumn ), reinterpret_cast< Cmp_long_ptr >( &Column ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::InsertGroup( int iIndex, LVGROUP& Group )
	{
		long lResult = 0;
#if		( _WIN32_WINNT >= 0x0501 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_INSERTGROUP, static_cast< Cmp_uint_ptr >( iIndex ), reinterpret_cast< Cmp_long_ptr >( &Group ) );
#endif//( _WIN32_WINNT >= 0x0501 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	void CListCtrl::InsertGroupSorted( LVINSERTGROUPSORTED& Group )
	{
#if		( _WIN32_WINNT >= 0x0501 )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_INSERTGROUPSORTED, reinterpret_cast< Cmp_uint_ptr >( &Group ), 0 );
#endif//( _WIN32_WINNT >= 0x0501 )
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::InsertItem( LVITEM& Item )
	{
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_INSERTITEM, 0, reinterpret_cast< Cmp_long_ptr >( &Item ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::InsertMarkHitTest( CPoint& Point, LVINSERTMARK& InsertMark )
	{
		bool bResult = false;
#if		( _WIN32_WINNT >= 0x0501 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_INSERTMARKHITTEST,
			reinterpret_cast< Cmp_uint_ptr >( &Point ), reinterpret_cast< Cmp_long_ptr >( &InsertMark ) ) ? true : false );
#endif//( _WIN32_WINNT >= 0x0501 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::IsGroupViewEnabled()
	{
		bool bResult = false;
#if		( _WIN32_WINNT >= 0x0501 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_ISGROUPVIEWENABLED, 0, 0 ) ? true : false );
#endif//( _WIN32_WINNT >= 0x0501 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::IsItemVisible( int iIndex )
	{
		bool bResult = false;
#if		( _WIN32_WINNT >= 0x0501 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_ISITEMVISIBLE, static_cast< Cmp_uint_ptr >( iIndex ), 0 ) ? true : false );
#endif//( _WIN32_WINNT >= 0x0501 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::MapIdToIndex( unsigned int id )
	{
		long lResult = -1;
#if		( _WIN32_WINNT >= 0x0501 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_MAPIDTOINDEX, static_cast< Cmp_uint_ptr >( id ), 0 );
#endif//( _WIN32_WINNT >= 0x0501 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::MapIndexToId( unsigned int index )
	{
		long lResult = -1;
#if		( _WIN32_WINNT >= 0x0501 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_MAPINDEXTOID, static_cast< Cmp_uint_ptr >( index ), 0 );
#endif//( _WIN32_WINNT >= 0x0501 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::RedrawItems( int iFirst, int iLast )
	{
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_REDRAWITEMS, static_cast< Cmp_uint_ptr >( iFirst ), static_cast< Cmp_long_ptr >( iLast ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CListCtrl::RemoveAllGroups()
	{
#if		( _WIN32_WINNT >= 0x0501 )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_REMOVEALLGROUPS, 0, 0 );
#endif//( _WIN32_WINNT >= 0x0501 )
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::RemoveGroup( int iGroupId )
	{
		long lResult = 0;
#if		( _WIN32_WINNT >= 0x0501 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_REMOVEGROUP, static_cast< Cmp_uint_ptr >( iGroupId ), 0 );
#endif//( _WIN32_WINNT >= 0x0501 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::Scroll( int dx, int dy )
	{
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_SCROLL, static_cast< Cmp_uint_ptr >( dx ), static_cast< Cmp_long_ptr >( dy ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::SetBkColour( unsigned long clrBk )
	{
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_SETBKCOLOR, 0, static_cast< Cmp_long_ptr >( clrBk ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::SetBkImage( LVBkImage& BackImage )
	{
		bool bResult = false;
#if		( _WIN32_IE >= 0x0400 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_SETBKIMAGE, 0, reinterpret_cast< Cmp_long_ptr >( &BackImage ) ) ? true : false );
#endif//( _WIN32_IE >= 0x0400 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::SetCallbackMask( unsigned int uiMask )
	{
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_SETCALLBACKMASK, static_cast< Cmp_uint_ptr >( uiMask ), 0 ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::SetColumn( int iColumn, LVCOLUMN& Column )
	{
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_SETCOLUMN, static_cast< Cmp_uint_ptr >( iColumn ), reinterpret_cast< Cmp_long_ptr >( &Column ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::SetColumnOrderArray( int iCount, int* paOrder )
	{
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_SETCOLUMNORDERARRAY, static_cast< Cmp_uint_ptr >( iCount ), reinterpret_cast< Cmp_long_ptr >( paOrder ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::SetColumnWidth( int iColumn, int cx )
	{
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_SETCOLUMNWIDTH, static_cast< Cmp_uint_ptr >( iColumn ), static_cast< Cmp_long_ptr >( cx ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::SetExtendedListViewStyle( unsigned long dwExMask, unsigned long dwExStyle )
	{
		_WINQ_FCONTEXT( "CListCtrl::SetExtendedListViewStyle" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_SETEXTENDEDLISTVIEWSTYLE, static_cast< Cmp_uint_ptr >( dwExMask ), static_cast< Cmp_long_ptr >( dwExStyle ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::SetGroupInfo( int iGroupId, LVGROUP& Group )
	{
		long lResult = 0;
#if		( _WIN32_WINNT >= 0x0501 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_SETGROUPINFO, static_cast< Cmp_uint_ptr >( iGroupId ), reinterpret_cast< Cmp_long_ptr >( &Group ) );
#endif//( _WIN32_WINNT >= 0x0501 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	void CListCtrl::SetGroupMetrics( LVGROUPMETRICS& GroupMetrics )
	{
#if		( _WIN32_WINNT >= 0x0501 )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_SETGROUPMETRICS, 0, reinterpret_cast< Cmp_long_ptr >( &GroupMetrics ) );
#endif//( _WIN32_WINNT >= 0x0501 )
	}

	//--------------------------------------------------------------------------------
	CCursorHandle::refType CListCtrl::SetHotCursor( CCursorHandle::refType hHotCursor )
	{
		CCursorHandle::refType hPrev ( new CCursorHandle( 0, (void*)( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_SETHOTCURSOR, 0, reinterpret_cast< Cmp_long_ptr >( hHotCursor->Use() ) ) ) ) );
		return hPrev;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::SetHotItem( int index )
	{
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_SETHOTITEM, static_cast< Cmp_uint_ptr >( index ), 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::SetHoverTime( unsigned long dwHoverMilliseconds )
	{
		long lResult = 0;
#if		( _WIN32_IE >= 0x0400 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_SETHOVERTIME, 0, static_cast< Cmp_long_ptr >( dwHoverMilliseconds ) );
#endif//( _WIN32_IE >= 0x0400 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::SetIconSpacing( unsigned short cx, unsigned short cy )
	{
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_SETICONSPACING, 0, MakeLParam( cx, cy ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::SetImageList( int iImageList, CImageListHandle::refType hImageList )
	{
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_SETIMAGELIST, static_cast< Cmp_uint_ptr >( iImageList ), reinterpret_cast< Cmp_long_ptr >( hImageList->Use() ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::SetInfoTop( LVSETINFOTIP& InfoTip )
	{
		bool bResult = false;
#if		( _WIN32_WINNT >= 0x0501 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_SETINFOTIP, 0, reinterpret_cast< Cmp_long_ptr >( &InfoTip ) ) ? true : false );
#endif//( _WIN32_WINNT >= 0x0501 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::SetInsertMark( LVINSERTMARK& InsertMark )
	{
		bool bResult = false;
#if		( _WIN32_WINNT >= 0x0501 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_SETINSERTMARK, 0, reinterpret_cast< Cmp_long_ptr >( &InsertMark ) ) ? true : false );
#endif//( _WIN32_WINNT >= 0x0501 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CListCtrl::SetInsertMarkColour( unsigned long clrMark )
	{
		unsigned long Result = 0;
#if		( _WIN32_WINNT >= 0x0501 )
		Result = static_cast< unsigned long >( m_Win32MsgHandler.Send( Ref(), 
			(unsigned int) LVM_SETINSERTMARKCOLOR, 0, static_cast< Cmp_long_ptr >( clrMark ) ) );
#endif//( _WIN32_WINNT >= 0x0501 )
		return Result;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::SetItem( LVITEM& Item )
	{
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_SETITEM, 0, reinterpret_cast< Cmp_long_ptr >( &Item ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::SetItemCount( int cItems, unsigned long dwFlags )
	{
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_SETITEMCOUNT,
			static_cast< Cmp_uint_ptr >( cItems ), static_cast< Cmp_long_ptr >( dwFlags ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::SetItemIndexState( LVITEMINDEX& ItemIndex, LVITEM& Item )
	{
		bool bResult = false;
#if		( _WIN32_WINNT >= 0x0600 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_SETITEMINDEXSTATE, 
			reinterpret_cast< Cmp_uint_ptr >( &ItemIndex ), reinterpret_cast< Cmp_long_ptr >( &Item ) ) ? true : false );
#endif//( _WIN32_WINNT >= 0x0600 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::SetItemPosition( int iItem, unsigned short x, unsigned short y )
	{
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_SETITEMPOSITION,
			static_cast< Cmp_uint_ptr >( iItem ), MakeLParam( x, y ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CListCtrl::SetItemPosition32( int iItem, CPoint& Point )
	{
		m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_SETITEMPOSITION32,
			static_cast< Cmp_uint_ptr >( iItem ), reinterpret_cast< Cmp_long_ptr >( &Point ) );
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::SetItemState( int iItem, LVITEM& Item )
	{
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_SETITEMSTATE, 
			static_cast< Cmp_uint_ptr >( iItem ), reinterpret_cast< Cmp_long_ptr >( &Item ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::SetItemText( int iItem, LVITEM& Item )
	{
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_SETITEMTEXT,
			static_cast< Cmp_uint_ptr >( iItem ), reinterpret_cast< Cmp_long_ptr >( &Item ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CListCtrl::SetOutlineColour( unsigned long OutlineColour )
	{
		unsigned long Result = 0;
#if		( _WIN32_WINNT >= 0x0501 )
		Result = static_cast< unsigned long >( m_Win32MsgHandler.Send( Ref(), 
			(unsigned int) LVM_SETOUTLINECOLOR, 0, static_cast< Cmp_long_ptr >( OutlineColour ) ) );
#endif//( _WIN32_WINNT >= 0x0501 )
		return Result;
	}

	//--------------------------------------------------------------------------------
	void CListCtrl::SetSelectedColumn( int iColumn )
	{
#if		( _WIN32_WINNT >= 0x0501 )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_SETSELECTEDCOLUMN, static_cast< Cmp_uint_ptr >( iColumn ), 0 );
#endif//( _WIN32_WINNT >= 0x0501 )
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::SetSelectionMark( int index )
	{
		long lResult = 0;
#if		( _WIN32_WINNT >= 0x0501 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_SETSELECTIONMARK, 0, static_cast< Cmp_long_ptr >( index ) );
#endif//( _WIN32_WINNT >= 0x0501 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::SetTextBkColour( unsigned long clrBkText )
	{
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_SETTEXTBKCOLOR, 0, static_cast< Cmp_long_ptr >( clrBkText ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::SetTextColour( unsigned long clrText )
	{
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_SETTEXTCOLOR, 0, static_cast< Cmp_long_ptr >( clrText ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::SetTileInfo( LVTILEINFO& TileInfo )
	{
		bool bResult = false;
#if		( _WIN32_WINNT >= 0x0501 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_SETTILEINFO, 0, reinterpret_cast< Cmp_long_ptr >( &TileInfo ) ) ? true : false );
#endif//( _WIN32_WINNT >= 0x0501 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::SetTileViewInfo( LVTILEVIEWINFO& TileViewInfo )
	{
		bool bResult = false;
#if		( _WIN32_WINNT >= 0x0501 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_SETTILEVIEWINFO, 0, reinterpret_cast< Cmp_long_ptr >( &TileViewInfo ) ) ? true : false );
#endif//( _WIN32_WINNT >= 0x0501 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::SetToolTips( CWindowHandle::refType hToolTipCtrl )
	{
		long lResult = 0;
#if		( _WIN32_IE >= 0x0400 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_SETTOOLTIPS, 0, reinterpret_cast< Cmp_long_ptr >( hToolTipCtrl->Use() ) );
#endif//( _WIN32_IE >= 0x0400 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::SetUnicodeFormat( bool bUnicode )
	{
		bool bResult = false;
#if		( _WIN32_IE >= 0x0400 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_SETUNICODEFORMAT,
			static_cast< Cmp_uint_ptr >( bUnicode ? 1 : 0 ), 0 ) ? true : false );
#endif//( _WIN32_IE >= 0x0400 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::SetView( unsigned long dwView )
	{
		long lResult = 0;
#if		( _WIN32_WINNT >= 0x0501 )
		lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_SETVIEW, 
			static_cast< Cmp_uint_ptr >( dwView ), 0 );
#endif//( _WIN32_WINNT >= 0x0501 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	void CListCtrl::SetWorkAreas( int nWorkAreas, RECT* paRects )
	{
#if		( _WIN32_IE >= 0x0400 )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_SETWORKAREAS, static_cast< Cmp_uint_ptr >( nWorkAreas ),
			reinterpret_cast< Cmp_long_ptr >( paRects ) );
#endif//( _WIN32_IE >= 0x0400 )
	}

	//--------------------------------------------------------------------------------
	void CListCtrl::SortGroups( PFNLVGROUPCOMPARE pfnGroupCompare, void* pvData )
	{
#if		( _WIN32_WINNT >= 0x0501 )
		m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_SORTGROUPS, 
			reinterpret_cast< Cmp_uint_ptr >( pfnGroupCompare ), reinterpret_cast< Cmp_long_ptr >( pvData ) );
#endif//( _WIN32_WINNT >= 0x0501 )
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::SortItems( PFNLVCOMPARE pfnCompare, Cmp_uint_ptr Data )
	{
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_SORTITEMS,
			Data, reinterpret_cast< Cmp_long_ptr >( pfnCompare ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::SortItemsEx( PFNLVCOMPARE pfnCompare, Cmp_uint_ptr Data )
	{
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_SORTITEMS,
			Data, reinterpret_cast< Cmp_long_ptr >( pfnCompare ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CListCtrl::SubItemHitTest( LVHITTESTINFO& HitTestInfo, bool bGroup )
	{
		Cmp_uint_ptr wParam = 0;
		if( bGroup )
		{
#if		( _WIN32_WINNT >= 0x0600 )
			wParam = -1;
#endif//( _WIN32_WINNT >= 0x0600 )
		}
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_SUBITEMHITTEST,
			wParam, reinterpret_cast< Cmp_long_ptr >( &HitTestInfo ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CListCtrl::Update( int iItem )
	{
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) LVM_UPDATE, 
			static_cast< Cmp_uint_ptr >( iItem ), 0 ) ? true : false );
		return bResult;
	}

}//nsWin32

