//WinQLHeader.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CompilerQOR.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usafe: stored in member for later use" );
#include "WinQL/GUI/Windows/Header.h"
__QCMP_WARNING_POP

//--------------------------------------------------------------------------------
namespace nsWin32
{

	__QOR_IMPLEMENT_OCLASS_LUID( CHeaderClass );

	//--------------------------------------------------------------------------------
	CHeaderClass::CHeaderClass() : m_ComCtrl32( CCommonCtrl::CCLISTVIEW_CLASSES )
	{
		_WINQ_FCONTEXT( "CHeaderClass::CHeaderClass" );
	}

	//--------------------------------------------------------------------------------
	CHeaderClass::~CHeaderClass()
	{ 
		_WINQ_FCONTEXT( "CHeaderClass::~CHeaderClass" );
	}

	//--------------------------------------------------------------------------------
	bool CHeaderClass::Preregistered()
	{ 
		_WINQ_FCONTEXT( "CHeaderClass::Preregistered" );
		return true; 
	}

	//--------------------------------------------------------------------------------
	const TCHAR* CHeaderClass::Name()
	{ 
		_WINQ_FCONTEXT( "CHeaderClass::Name" );
		return _TXT( "SysHeader" ); 
	}

	
		

	__QOR_IMPLEMENT_OCLASS_LUID( CHeaderFactory );

	//--------------------------------------------------------------------------------
	CHeaderFactory::CHeaderFactory() : CWindowFactory()
	{
		_WINQ_FCONTEXT( "CHeaderFactory::CHeaderFactory" );
	}

	//--------------------------------------------------------------------------------
	CHeaderFactory::~CHeaderFactory()
	{	
		_WINQ_FCONTEXT( "CHeaderFactory::~CHeaderFactory" );
	}

	//--------------------------------------------------------------------------------
	CHeader* CHeaderFactory::Create()
	{
		_WINQ_FCONTEXT( "CHeaderFactory::Instance" );
		return new CHeader;//PreCreateWindow< CHeader, CHeaderClass >();
	}
			
	//--------------------------------------------------------------------------------
	bool CHeaderFactory::GetHorizontal()
	{
		_WINQ_FCONTEXT( "CHeaderFactory::GetHorizontal" );
		return GetStyleBits( HDS_HORZ );
	}

	//--------------------------------------------------------------------------------
	void CHeaderFactory::SetHorizontal( bool bFlag )
	{
		_WINQ_FCONTEXT( "CHeaderFactory::SetHorizontal" );
		SetStyleBits( HDS_HORZ, !bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CHeaderFactory::GetVertical()
	{
		_WINQ_FCONTEXT( "CHeaderFactory::GetVertical" );
		return !GetStyleBits( HDS_HORZ );
	}

	//--------------------------------------------------------------------------------
	void CHeaderFactory::SetVertical( bool bFlag )
	{
		_WINQ_FCONTEXT( "CHeaderFactory::SetVertical" );
		SetStyleBits( HDS_HORZ, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CHeaderFactory::GetHasButtons()
	{
		_WINQ_FCONTEXT( "CHeaderFactory::GetHasButtons" );
		return GetStyleBits( HDS_BUTTONS );
	}

	//--------------------------------------------------------------------------------
	void CHeaderFactory::SetHasButtons( bool bFlag )
	{
		_WINQ_FCONTEXT( "CHeaderFactory::SetHasButtons" );
		SetStyleBits( HDS_BUTTONS, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CHeaderFactory::GetHotTrack()
	{
		_WINQ_FCONTEXT( "CHeaderFactory::GetHotTrack" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0300 )
		bResult = GetStyleBits( HDS_HOTTRACK );
#endif//( _WIN32_IE >= 0x0300 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CHeaderFactory::SetHotTrack( bool bFlag )
	{
		_WINQ_FCONTEXT( "CHeaderFactory::SetHotTrack" );
#if		( _WIN32_IE >= 0x0300 )
		SetStyleBits( HDS_HOTTRACK, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( _WIN32_IE >= 0x0300 )
	}

	//--------------------------------------------------------------------------------
	bool CHeaderFactory::GetHidden()
	{
		_WINQ_FCONTEXT( "CHeaderFactory::GetHidden" );
		return GetStyleBits( HDS_HIDDEN );
	}

	//--------------------------------------------------------------------------------
	void CHeaderFactory::SetHidden( bool bFlag )
	{
		_WINQ_FCONTEXT( "CHeaderFactory::SetHidden" );
		SetStyleBits( HDS_HIDDEN, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CHeaderFactory::GetDragDrop()
	{
		_WINQ_FCONTEXT( "CHeaderFactory::GetDragDrop" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0300 )
		bResult = GetStyleBits( HDS_DRAGDROP );
#endif//( _WIN32_IE >= 0x0300 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CHeaderFactory::SetDragDrop( bool bFlag )
	{
		_WINQ_FCONTEXT( "CHeaderFactory::SetDragDrop" );
#if		( _WIN32_IE >= 0x0300 )
		SetStyleBits( HDS_DRAGDROP, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( _WIN32_IE >= 0x0300 )
	}

	//--------------------------------------------------------------------------------
	bool CHeaderFactory::GetFullDrag()
	{
		_WINQ_FCONTEXT( "CHeaderFactory::GetFullDrag" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0300 )
		bResult = GetStyleBits( HDS_FULLDRAG );
#endif//( _WIN32_IE >= 0x0300 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CHeaderFactory::SetFullDrag( bool bFlag )
	{
		_WINQ_FCONTEXT( "CHeaderFactory::SetFullDrag" );
#if		( _WIN32_IE >= 0x0300 )
		SetStyleBits( HDS_FULLDRAG, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( _WIN32_IE >= 0x0300 )
	}

	//--------------------------------------------------------------------------------
	bool CHeaderFactory::GetFilterBar()
	{
		_WINQ_FCONTEXT( "CHeaderFactory::GetFilterBar" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0500 )
		bResult = GetStyleBits( HDS_FILTERBAR );
#endif//( _WIN32_IE >= 0x0500 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CHeaderFactory::SetFilterBar( bool bFlag )
	{
		_WINQ_FCONTEXT( "CHeaderFactory::SetFilterBar" );
#if		( _WIN32_IE >= 0x0500 )
		SetStyleBits( HDS_FILTERBAR, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( _WIN32_IE >= 0x0500 )
	}

	//--------------------------------------------------------------------------------
	bool CHeaderFactory::GetFlat()
	{
		_WINQ_FCONTEXT( "CHeaderFactory::GetFlat" );
		bool bResult = false;
#if		( _WIN32_WINNT >= 0x0501 )
		bResult = GetStyleBits( HDS_FLAT );
#endif//( _WIN32_WINNT >= 0x0501 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CHeaderFactory::SetFlat( bool bFlag )
	{
		_WINQ_FCONTEXT( "CHeaderFactory::SetFlat" );
#if		( _WIN32_WINNT >= 0x0501 )
		SetStyleBits( HDS_FLAT, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( _WIN32_WINNT >= 0x0501 )
	}


	//--------------------------------------------------------------------------------
	bool CHeaderFactory::GetCheckBoxes()
	{
		_WINQ_FCONTEXT( "CHeaderFactory::GetCheckBoxes" );
		bool bResult = false;
#if		( _WIN32_WINNT >= 0x0600 )
		bResult = GetStyleBits( HDS_CHECKBOXES );
#endif//( _WIN32_WINNT >= 0x0600 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CHeaderFactory::SetCheckBoxes( bool bFlag )
	{
		_WINQ_FCONTEXT( "CHeaderFactory::SetCheckBoxes" );
#if		( _WIN32_WINNT >= 0x0600 )
		SetStyleBits( HDS_CHECKBOXES, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( _WIN32_WINNT >= 0x0600 )
	}

	//--------------------------------------------------------------------------------
	bool CHeaderFactory::GetNoSizing()
	{
		_WINQ_FCONTEXT( "CHeaderFactory::GetNoSizing" );
		bool bResult = false;
#if		( _WIN32_WINNT >= 0x0600 )
		bResult = GetStyleBits( HDS_NOSIZING );
#endif//( _WIN32_WINNT >= 0x0600 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CHeaderFactory::SetNoSizing( bool bFlag )
	{
		_WINQ_FCONTEXT( "CHeaderFactory::SetNoSizing" );
#if		( _WIN32_WINNT >= 0x0600 )
		SetStyleBits( HDS_NOSIZING, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( _WIN32_WINNT >= 0x0600 )
	}

	//--------------------------------------------------------------------------------
	bool CHeaderFactory::GetOverflow()
	{
		_WINQ_FCONTEXT( "CHeaderFactory::GetOverflow" );
		bool bResult = false;
#if		( _WIN32_WINNT >= 0x0600 )
		bResult = GetStyleBits( HDS_OVERFLOW );
#endif//( _WIN32_WINNT >= 0x0600 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CHeaderFactory::SetOverflow( bool bFlag )
	{
		_WINQ_FCONTEXT( "CHeaderFactory::SetOverflow" );
#if		( _WIN32_WINNT >= 0x0600 )
		SetStyleBits( HDS_OVERFLOW, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif//( _WIN32_WINNT >= 0x0600 )
	}





	__QOR_IMPLEMENT_OCLASS_LUID( CHeader );

	//--------------------------------------------------------------------------------
	CHeader::CHeader() : CWinCtrlWindow()
	{				
		_WINQ_FCONTEXT( "CHeader::CHeader" );
	}

	//--------------------------------------------------------------------------------
	CHeader::~CHeader()
	{
		_WINQ_FCONTEXT( "CHeader::~CHeader" );
	}

	//--------------------------------------------------------------------------------
	long CHeader::OnNotify( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CHeader::OnNotify" );

		long lResult = 0;

		if( pHdr != 0 )
		{
			NMHeader* pHeader = reinterpret_cast< NMHeader* >( pHdr );

			switch ( pHdr->m_uiCode )
			{
			case HDN_ITEMCHANGING:
				{
					lResult = static_cast< long >( OnItemChanging( reinterpret_cast< NMHeader* >( pHdr ) ) ? 1 : 0 );
				}
				break;

			case HDN_ITEMCHANGED:
				{
					OnItemChanged( reinterpret_cast< NMHeader* >( pHdr ) );
				}
				break;

			case HDN_ITEMCLICK:
				{
					OnItemClick( reinterpret_cast< NMHeader* >( pHdr ) );
				}
				break;

			case HDN_ITEMDBLCLICK:
				{
					OnItemDblClick( reinterpret_cast< NMHeader* >( pHdr ) );
				}
				break;

			case HDN_DIVIDERDBLCLICK:
				{
					OnDividerDblClick( reinterpret_cast< NMHeader* >( pHdr ) );
				}
				break;

			case HDN_BEGINTRACK:
				{
					lResult = static_cast< long >( OnBeginTrack( reinterpret_cast< NMHeader* >( pHdr ) ) ? 1 : 0 );
				}
				break;

			case HDN_ENDTRACK:
				{
					OnEndTrack( reinterpret_cast< NMHeader* >( pHdr ) );
				}
				break;

			case HDN_TRACK:
				{
					lResult = static_cast< long >( OnTrack( reinterpret_cast< NMHeader* >( pHdr ) ) ? 1 : 0 );
				}
				break;

#if		( _WIN32_IE >= 0x0300 )
			case HDN_GETDISPINFO:
				{
					lResult = OnGetDispInfo( reinterpret_cast< NMHDDISPINFO* >( pHdr ) );
				}
				break;
			case  HDN_BEGINDRAG:
				{
					lResult = static_cast< long >( OnBeginDrag( reinterpret_cast< NMHeader* >( pHdr ) ) ? 1 : 0 );
				}
				break;
			case HDN_ENDDRAG:
				{
					lResult = static_cast< long >( OnEndDrag( reinterpret_cast< NMHeader* >( pHdr ) ) ? 1 : 0 );
				}
				break;
#endif//( _WIN32_IE >= 0x0300 )

#if		( _WIN32_IE >= 0x0500 )
			case HDN_FILTERCHANGE:
				{
					OnFilterChange( reinterpret_cast< NMHeader* >( pHdr ) );
				}
				break;
			case HDN_FILTERBTNCLICK:
				{
					lResult = static_cast< long >( OnFilterBtnClick( reinterpret_cast< NMHDFILTERBTNCLICK* >( pHdr ) ) ? 1 : 0 );
				}
				break;
#endif//( _WIN32_IE >= 0x0500 )

#if		( _WIN32_IE >= 0x0600 )
			case HDN_BEGINFILTEREDIT:
				{
					OnBeginFilterEdit( reinterpret_cast< NMHeader* >( pHdr ) );
				}
				break;
			case HDN_ENDFILTEREDIT:
				{
					OnEndFilterEdit( reinterpret_cast< NMHeader* >( pHdr ) );
				}
				break;
#endif//( _WIN32_IE >= 0x0600 )

#if		( _WIN32_WINNT >= 0x0600 )
			case HDN_ITEMSTATEICONCLICK:
				{
					OnItemStateIconClick( reinterpret_cast< NMHeader* >( pHdr ) );
				}
				break;
			case HDN_ITEMKEYDOWN:
				{
					OnItemKeyDown( reinterpret_cast< NMHeader* >( pHdr ) );
				}
				break;
			case HDN_DROPDOWN:
				{
					OnDropDown( reinterpret_cast< NMHeader* >( pHdr ) );
				}
				break;
			case HDN_OVERFLOWCLICK:
				{
					OnOverFlowClick( reinterpret_cast< NMHeader* >( pHdr ) );
				}
				break;
#endif//( _WIN32_WINNT >= 0x0600 )

			case NM_CUSTOMDRAW:
				{
					lResult = OnCustomDraw( reinterpret_cast< NMCustomDraw* >( pHdr ) );
				}
				break;

			case NM_RCLICK:
				{
					lResult = static_cast< long >( OnRClick( pHdr ) ? 1 : 0 );
				}
				break;
#if		( _WIN32_IE >= 0x0400 )
			case NM_RELEASEDCAPTURE:
				{
					OnReleasedCapture( pHdr );
				}
				break;
#endif//( _WIN32_IE >= 0x0400 )
			default:
				{
					lResult = OnUnknownNotification( pHdr );
				}
				break;
			}
		}
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CHeader::OnItemChanging( NMHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CHeader::OnItemChanging" );
		bool bResult = false;//Allow changes
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CHeader::OnItemChanged( NMHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CHeader::OnItemChanged" );
	}

	//--------------------------------------------------------------------------------
	void CHeader::OnItemClick( NMHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CHeader::OnItemClick" );
	}

	//--------------------------------------------------------------------------------
	void CHeader::OnItemDblClick( NMHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CHeader::OnItemDblClick" );
	}

	//--------------------------------------------------------------------------------
	void CHeader::OnDividerDblClick( NMHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CHeader::OnDividerDblClick" );
	}

	//--------------------------------------------------------------------------------
	bool CHeader::OnBeginTrack( NMHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CHeader::OnBeginTrack" );
		bool bResult = false;//Allow tracking
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CHeader::OnEndTrack( NMHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CHeader::EndTrack" );
	}

	//--------------------------------------------------------------------------------
	bool CHeader::OnTrack( NMHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CHeader::OnTrack" );
		bool bResult = false;//Allow tracking to continue
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CHeader::OnGetDispInfo( NMHDDISPINFO* pHdr )
	{
		_WINQ_FCONTEXT( "CHeader::OnGetDispInfo" );
		long lResult = 0;
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CHeader::OnBeginDrag( NMHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CHeader::OnBeginDrag" );
		bool bResult = false;//automatic Drag&Drop
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CHeader::OnEndDrag( NMHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CHeader::OnEndDrag" );
		bool bResult = false;//allow item to be placed
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CHeader::OnFilterChange( NMHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CHeader::OnFilterChange" );
	}

	//--------------------------------------------------------------------------------
	bool CHeader::OnFilterBtnClick( NMHDFILTERBTNCLICK* pHdr )
	{
		_WINQ_FCONTEXT( "CHeader::OnFilterBtnClick" );
		bool bResult = true;//send Filter Change Notification ?
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CHeader::OnBeginFilterEdit( NMHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CHeader::OnBeginFilterEdit" );
	}

	//--------------------------------------------------------------------------------
	void CHeader::OnEndFilterEdit( NMHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CHeader::OnEndFilterEdit" );
	}

	//--------------------------------------------------------------------------------
	void CHeader::OnItemStateIconClick( NMHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CHeader::OnItemStateIconClick" );
	}

	//--------------------------------------------------------------------------------
	void CHeader::OnItemKeyDown( NMHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CHeader::OnItemKeyDown" );
	}

	//--------------------------------------------------------------------------------
	void CHeader::OnDropDown( NMHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CHeader::OnDropDown" );
	}

	//--------------------------------------------------------------------------------
	void CHeader::OnOverFlowClick( NMHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CHeader::OnOverFlowClick" );
	}

	//--------------------------------------------------------------------------------
	long CHeader::OnCustomDraw( NMCustomDraw* pCustomDraw )
	{
		_WINQ_FCONTEXT( "CHeader::OnCustomDraw" );
		long lResult = CDRF_DODEFAULT;
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CHeader::OnRClick( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CHeader::OnRClick" );
		bool bResult = false;//Allow default processing
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CHeader::OnReleasedCapture( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CHeader::OnReleaseCapture" );
	}

	//--------------------------------------------------------------------------------
	long CHeader::OnUnknownNotification( NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CHeader::OnUnknownNotification" );
		long lResult = 0;
		return lResult;
	}

	//--------------------------------------------------------------------------------			
	bool CHeader::ClearFilter( int iColumn )
	{
		_WINQ_FCONTEXT( "CHeader::ClearFilter" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0500 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) HDM_CLEARFILTER, static_cast< Cmp_uint_ptr >( iColumn ), 0 ) ? true : false );
#endif//( _WIN32_IE >= 0x0500 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CHeader::CreateDragImage( int iColumn )
	{
		_WINQ_FCONTEXT( "CHeader::CreateDragItem" );
		long lResult = m_Win32MsgHandler.Send( Ref(), (unsigned int) HDM_CREATEDRAGIMAGE, static_cast< Cmp_uint_ptr >( iColumn ), 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CHeader::DeleteItem( int iColumn )
	{
		_WINQ_FCONTEXT( "CHeader::DeletItem" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) HDM_DELETEITEM, static_cast< Cmp_uint_ptr >( iColumn ), 0 ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CHeader::EditFilter( int iColumn, bool bDiscardChanges )
	{
		_WINQ_FCONTEXT( "CHeader::EditFilter" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0500 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), (unsigned int) HDM_EDITFILTER, static_cast< Cmp_uint_ptr >( iColumn ), MakeLParam( bDiscardChanges, 0 ) ) ? true : false );
#endif//( _WIN32_IE >= 0x0500 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CHeader::GetBitmapMargin()
	{
		_WINQ_FCONTEXT( "CHeader::GetBitmapMargin" );
		long lResult = 0;
#if		( _WIN32_IE >= 0x0500 )
		lResult = m_Win32MsgHandler.Send( Ref(), HDM_GETBITMAPMARGIN, 0, 0 );
#endif//( _WIN32_IE >= 0x0500 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CHeader::GetFocusItem()
	{
		_WINQ_FCONTEXT( "CHeader::GetFocusItem" );
		long lResult = 0;
#if		( _WIN32_WINNT >= 0x600 )
		lResult = m_Win32MsgHandler.Send( Ref(), HDM_GETFOCUSEDITEM, 0, 0 );
#endif//( _WIN32_WINNT >= 0x600 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CHeader::GetImageList( Cmp_uint_ptr Option )
	{
		_WINQ_FCONTEXT( "CHeader::GetImageList" );
		long lResult = m_Win32MsgHandler.Send( Ref(), HDM_GETIMAGELIST, Option, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CHeader::GetItem( int iColumn, HDItem& Item )
	{
		_WINQ_FCONTEXT( "CHeader::GetItem" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), HDM_GETITEM, static_cast< Cmp_uint_ptr >( iColumn ), reinterpret_cast< Cmp_long_ptr >( &Item ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CHeader::GetItemCount()
	{
		_WINQ_FCONTEXT( "CHeader::GetItemCount" );
		long lResult = m_Win32MsgHandler.Send( Ref(), HDM_GETITEMCOUNT, 0, 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CHeader::GetItemDropDownRect( int iColumn, CRectangle& rcItemDrop )
	{
		_WINQ_FCONTEXT( "CHeader::GetItemDropDownRect" );
		bool bResult = false;
#if		( _WIN32_WINNT >= 0x600 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), HDM_GETITEMDROPDOWNRECT, static_cast< Cmp_uint_ptr >( iColumn ), reinterpret_cast< Cmp_long_ptr >( & rcItemDrop ) ) ? true : false );
#else
		__QCMP_UNREF( iColumn );
		__QCMP_UNREF( rcItemDrop );
#endif//( _WIN32_WINNT >= 0x600 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CHeader::GetItemRect( int iColumn, CRectangle& rcItem )
	{
		_WINQ_FCONTEXT( "CHeader::GetItemRect" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), HDM_GETITEMRECT, static_cast< Cmp_uint_ptr >( iColumn ), reinterpret_cast< Cmp_long_ptr >( &rcItem ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CHeader::GetOrderArray( int iSize, int* paOrder )
	{
		_WINQ_FCONTEXT( "CHeader::GetOrderArray" );
		bool bResult ( m_Win32MsgHandler.Send( Ref(), HDM_GETORDERARRAY, static_cast< Cmp_uint_ptr >( iSize ), reinterpret_cast< Cmp_long_ptr >( paOrder ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CHeader::GetOverflowRect( CRectangle& rcOverflow )
	{
		_WINQ_FCONTEXT( "CHeader::GetOverflowRect" );
		bool bResult = false;
#if		( _WIN32_WINNT >= 0x600 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), HDM_GETOVERFLOWRECT, 0, reinterpret_cast< Cmp_long_ptr >( &rcOverflow ) ) ? true : false );
#else
		__QCMP_UNREF( rcOverflow );
#endif//( _WIN32_WINNT >= 0x600 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CHeader::GetUnicodeFormat()
	{
		_WINQ_FCONTEXT( "CHeader::GetUnicodeFormat" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0400 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), HDM_GETUNICODEFORMAT, 0, 0 ) ? true : false );
#endif//( _WIN32_IE >= 0x0400 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CHeader::HitTest( HDHITTESTINFO& Info )
	{
		_WINQ_FCONTEXT( "CHeader::HitTest" );
		long lResult = m_Win32MsgHandler.Send( Ref(), HDM_HITTEST, 0, reinterpret_cast< Cmp_long_ptr >( &Info ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CHeader::InsertItem( int iColumn, HDItem& Item )
	{
		_WINQ_FCONTEXT( "CHeader::InsertItem" );
		long lResult = m_Win32MsgHandler.Send( Ref(), HDM_INSERTITEM, static_cast< Cmp_uint_ptr >( iColumn ), reinterpret_cast< Cmp_long_ptr >( &Item ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CHeader::Layout( HDLAYOUT& Layout )
	{
		_WINQ_FCONTEXT( "CHeader::Layout" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), HDM_LAYOUT, 0, reinterpret_cast< Cmp_long_ptr >( &Layout ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CHeader::OrderToIndex( int iOrder )
	{
		_WINQ_FCONTEXT( "CHeader::OrderToIndex" );
		long lResult = m_Win32MsgHandler.Send( Ref(), HDM_ORDERTOINDEX, static_cast< Cmp_uint_ptr >( iOrder ), 0 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CHeader::SetBitmapMargin( int iMargin )
	{
		_WINQ_FCONTEXT( "CHeader::SetBitmapMargin" );
		long lResult = 0;
#if		( _WIN32_IE >= 0x0500 )
		lResult = m_Win32MsgHandler.Send( Ref(), HDM_SETBITMAPMARGIN, static_cast< Cmp_uint_ptr >( iMargin ), 0 );
#endif//( _WIN32_IE >= 0x0500 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CHeader::SetFilterChangeTimeout( int iMilliseconds )
	{
		_WINQ_FCONTEXT( "CHeader::SetFilterChangeTimeout" );
		long lResult = 0;
#if		( _WIN32_IE >= 0x0500 )
		lResult = m_Win32MsgHandler.Send( Ref(), HDM_SETFILTERCHANGETIMEOUT, 0, static_cast< Cmp_long_ptr >( iMilliseconds ) );
#endif//( _WIN32_IE >= 0x0500 )
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CHeader::SetFocusedItem( int iColumn )
	{
		_WINQ_FCONTEXT( "CHeader::SetFocused" );
		bool bResult = false;
#if		( _WIN32_WINNT >= 0x600 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), HDM_SETFOCUSEDITEM, 0, static_cast< Cmp_long_ptr >( iColumn ) ) ? true : false );
#else
		__QCMP_UNREF( iColumn );
#endif//( _WIN32_WINNT >= 0x600 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	long CHeader::SetHotDivider( bool bFlag, unsigned long dwValue )
	{
		_WINQ_FCONTEXT( "CHeader::SetHotDivider" );
		long lResult = m_Win32MsgHandler.Send( Ref(), HDM_SETHOTDIVIDER, static_cast< Cmp_uint_ptr >( bFlag ? 1 : 0 ), static_cast< Cmp_long_ptr >( dwValue ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CHeader::SetImageList( Cmp_uint_ptr Option, CImageList::refType ImageList )
	{
		_WINQ_FCONTEXT( "CHeader::SetImageList" );
		long lResult = m_Win32MsgHandler.Send( Ref(), HDM_SETIMAGELIST, Option, reinterpret_cast< Cmp_long_ptr >( ImageList->Handle()->Use() ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CHeader::SetItem( int iColumn, HDItem& Item )
	{
		_WINQ_FCONTEXT( "CHeader::SetItem" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), HDM_SETITEM, static_cast< Cmp_uint_ptr >( iColumn ), reinterpret_cast< Cmp_long_ptr >( &Item ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CHeader::SetOrderArray( int iSize, int* paOrder )
	{
		_WINQ_FCONTEXT( "CHeader::SetOrderArray" );
		bool bResult = ( m_Win32MsgHandler.Send( Ref(), HDM_SETORDERARRAY, static_cast< Cmp_uint_ptr >( iSize ), reinterpret_cast< Cmp_long_ptr >( paOrder ) ) ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CHeader::SetUnicodeFormat( bool bUnicode )
	{
		_WINQ_FCONTEXT( "CHeader::SetUnicodeFormat" );
		bool bResult = false;
#if		( _WIN32_IE >= 0x0400 )
		bResult = ( m_Win32MsgHandler.Send( Ref(), HDM_SETUNICODEFORMAT, static_cast< Cmp_uint_ptr >( bUnicode ? 1 : 0 ), 0 ) ? true : false );
#endif//( _WIN32_IE >= 0x0400 )
		return bResult;
	}

}//nsWin32

