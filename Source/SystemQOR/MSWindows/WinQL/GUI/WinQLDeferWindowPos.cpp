//WinQLDeferWindowPos.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: stored in member for later use." )
#include "WinQL/GUI/DeferWindowPos.h"
#include "WinQL/GUI/Window.h"
__QCMP_WARNING_POP
#include "WinQAPI/User32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QCMP_DECLARE_PERTHREAD CDeferWindowPosHandleMap* p_tDeferWindowPosHandleMap = 0;

	__QOR_IMPLEMENT_OCLASS_LUID( CDeferWindowPos );

	//--------------------------------------------------------------------------------
	void CDeferWindowPos::Uninit()
	{
		CDeferWindowPosHandleMap* pMap = p_tDeferWindowPosHandleMap;

		if( pMap && ! ( m_Handle.IsNull() ) )
		{
			pMap->Remove( m_Handle.Ref() );
		}
	}

	//--------------------------------------------------------------------------------
	void CDeferWindowPos::Init()
	{
		CDeferWindowPosHandleMap* pMap = p_tDeferWindowPosHandleMap;

		if( pMap == 0 )
		{
			pMap = new CDeferWindowPosHandleMap;
		}

		if( ! ( m_Handle.IsNull() ) )
		{
			pMap->Add( m_Handle.Ref(), this );
		}
		else
		{
			m_iStatus = -1;
		}

		if( p_tDeferWindowPosHandleMap == 0 )
		{
			p_tDeferWindowPosHandleMap = pMap;
		}
	}

	//--------------------------------------------------------------------------------
	CDeferWindowPos::refType CDeferWindowPos::FromHandle( CDeferWindowPosHandle::refType hDWP )
	{
		_WINQ_SFCONTEXT( "CDeferWindowPos::FromHandle" );
		CDeferWindowPos* pDWP = 0;
		bool bOwningRef = false;
		__QOR_PROTECT
		{
			pDWP = hDWP->Object< CDeferWindowPos >();
			if( pDWP == 0 && p_tDeferWindowPosHandleMap != 0 )
			{
				pDWP = p_tDeferWindowPosHandleMap->FindHandle( hDWP );
			}
			if( pDWP == 0 )
			{
				pDWP = new CDeferWindowPos( hDWP );
				bOwningRef = true;
			}
		}__QOR_ENDPROTECT

		return refType( pDWP, bOwningRef );
	}

	__QCMP_WARNING_PUSH
	__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: stored in member for later usage" )
	//--------------------------------------------------------------------------------			
	CDeferWindowPos::CDeferWindowPos( CDeferWindowPosHandle::refType hDWP ) : m_User32Library( CUser32::Instance() )
	,	m_Handle( this, hDWP->AsHandle().ptr() )
	{
		_WINQ_FCONTEXT( "CDeferWindowPos::CDeferWindowPos" );
		__QOR_PROTECT
		{
			m_iStatus = 0;
			Init();
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------			
	CDeferWindowPos::CDeferWindowPos( int nNumWindows ) : m_User32Library( CUser32::Instance() )
	,	m_Handle( this, 0 )
	{
		_WINQ_FCONTEXT( "CDeferWindowPos::CDeferWindowPos" );
		__QOR_PROTECT
		{
			m_iStatus = 0;
			m_Handle = m_User32Library.BeginDeferWindowPos( nNumWindows );
			Init();
		}__QOR_ENDPROTECT
	}			
	__QCMP_WARNING_POP

	//--------------------------------------------------------------------------------
	//Unusual behaviour: The handle returned from Windows replaces the once passed in
	void CDeferWindowPos::operator()( COSWindow& Window, COSWindow& WindowInsertAfter, int x, int y, int cx, int cy, unsigned int uFlags )
	{
		_WINQ_FCONTEXT( "CDeferWindowPos::operator()" );
		__QOR_PROTECT
		{
			m_iStatus = 0;
			m_Handle.operator=( m_User32Library.DeferWindowPos( m_Handle.AsHandle().ptr(), reinterpret_cast< ::HWND >( Window.Handle()->Use() ), reinterpret_cast< ::HWND >( WindowInsertAfter.Handle()->Use() ), x, y, cx, cy, uFlags ) );
			Init();
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CDeferWindowPos::~CDeferWindowPos()
	{
		_WINQ_FCONTEXT( "CDeferWindowPos::~CDeferWindowPos" );
		if( !( m_Handle.IsNull() ) )
		{
			__QOR_PROTECT
			{
				m_iStatus = m_User32Library.EndDeferWindowPos( (HDWP)( m_Handle.Use() ) );
			}__QOR_ENDPROTECT
		}
	}

	//--------------------------------------------------------------------------------
	CUserObject CDeferWindowPos::Security()
	{
		_WINQ_FCONTEXT( "CDeferWindowPos::Security" );
		CUserObject Result( m_Handle.AsHandle() );
		return Result;
	}

	//--------------------------------------------------------------------------------
	CDeferWindowPosHandle::refType CDeferWindowPos::Handle( void )
	{
		_WINQ_FCONTEXT( "CDeferWindowPos::Handle" );
		return m_Handle.Ref();
	}

	//--------------------------------------------------------------------------------
	int CDeferWindowPos::Status( void )
	{
		_WINQ_FCONTEXT( "CDeferWindowPos::Status" );
		return m_iStatus;
	}

}//nsWin32
