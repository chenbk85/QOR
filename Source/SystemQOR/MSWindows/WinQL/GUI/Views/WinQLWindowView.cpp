//WinQLWindowView.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Base Window View

#include "SystemQOR.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: saved in member for later use" );
#include "WinQL/GUI/Views/WindowView.h"
#include "WinQL/GUI/Window.h"
__QCMP_WARNING_POP
#include "WinQL/GUI/Controllers/BaseWindowController.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//const GUID CWindowView::IID_IBaseWindowView = { 0x4330afbc, 0xb840, 0x4f46, { 0xb0, 0x13, 0x9b, 0xb5, 0xa9, 0x4b, 0x49, 0x4a } };

__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: saved in member for later use" );
	//--------------------------------------------------------------------------------
	CWindowView::CWindowView() : m_pWindow( 0 ), m_ClassFactoryProxy( m_WindowClassFactory ), m_ViewProxy( *this )
	{
	}
__QCMP_WARNING_POP
	//--------------------------------------------------------------------------------
	CWindowView::~CWindowView()
	{
	}

	//--------------------------------------------------------------------------------
	long CWindowView::QueryInterface( const nsWin32::GUID& riid, void** ppInterface )
	{
		long hr = nsWin32::E_NoInterface;
		/*
		if( riid == IID_IBaseWindowView )
		{
			*ppInterface = this;
			hr = OK;
		}
		else
		{
			//Try parts and then base
			//hr = OwnerView().QueryInterface( riid, ppInterface );
			if( hr == nsWin32::E_NoInterface )
			{
				//hr = CDataModel::QueryInterface( riid, ppInterface );
			}
		}
		*/
		return hr;
	}

    //--------------------------------------------------------------------------------
	bool CWindowView::Animate()
	{
		bool bResult = false;
		return bResult;
	}

   	//--------------------------------------------------------------------------------
    void CWindowView::DestroyWindow()
    {
		delete m_pWindow;
        m_pWindow = 0;
    }

    //--------------------------------------------------------------------------------
    void CWindowView::Update( CWindowModel& WindowModel )
    {
		if( m_pWindow == 0 )
		{
			CreateWindow( WindowModel );
		}
    }

	//--------------------------------------------------------------------------------
	void CWindowView::CreateWindow( CWindowModel& WindowModel )
	{
		m_pWindow = Factory().Create( 0, 0 );///* WindowModel, 0*/ 
	}

	//--------------------------------------------------------------------------------
	void CWindowView::Enable( bool bEnable )
	{
		QOR_PP_UNREF( bEnable );
	}

	//--------------------------------------------------------------------------------
	COSWindow& CWindowView::Window()
	{
		return *m_pWindow;
	}

    //--------------------------------------------------------------------------------
    CWindowClass& CWindowView::GetWindowClass()
    {
        return WndClass();
    }

    //--------------------------------------------------------------------------------
    CWindowFactory& CWindowView::GetWindowFactory()
    {
        return Factory();
    }

	//--------------------------------------------------------------------------------
	long CWindowView::OnCreate( CreateStruct* pCreateStruct )
	{
		QOR_PP_UNREF( pCreateStruct );
		return 0;
	}

	//--------------------------------------------------------------------------------
    long CWindowView::OnDestroy( COSWindow& Window, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		return Window.DefProc( uMsg, wParam, lParam );
	}

    //--------------------------------------------------------------------------------
    long CWindowView::OnActivate( COSWindow& Window, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		return Window.DefProc( uMsg, wParam, lParam );
	}

    //--------------------------------------------------------------------------------
    long CWindowView::OnMouseActivate( COSWindow& Window, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		long lResult = 0;
		//Is this a child window?
		//TODO: Find a way to do this with the Window flags and without GA_PARENT
		COSWindow::refType Parent = Window.GetAncestor( 1/*GA_PARENT*/ );
		if( !Parent.IsNull() )
		{	//Yes
			lResult = Window.DefProc( uMsg, wParam, lParam );
		}
		else
		{	//No
			lResult = maActivate;
		}
		return lResult;
	}

	//--------------------------------------------------------------------------------
    void CWindowView::OnClose( COSWindow& Window )
	{
		bool bResult = Window.Destroy();
		if( bResult == false )
		{
			//TODO: Error
		}
	}

	//--------------------------------------------------------------------------------
    void CWindowView::OnSystemError( COSWindow& Window, Cmp_long_ptr& lResult, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		QOR_PP_UNREF5( lParam, wParam, uMsg, lResult, Window );
	}

	//--------------------------------------------------------------------------------
    void CWindowView::OnSysCommand( COSWindow& Window, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		Window.DefProc( uMsg, wParam, lParam );
	}

}//nsWin32
