//WinQLMDIChildFrameModel.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//MDI Child Frame Window Model

#include "WinQL/GUI/Views/WinCtrlViews.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	CMDIChildFrameView::CMDIChildFrameView()
	{
		m_MCS.szClass = const_cast< TCHAR* >( _TXT("").c_str() );
		m_MCS.szTitle = const_cast< TCHAR* >( _TXT("").c_str() );
		m_MCS.hOwner = 0;
		m_MCS.x = 0;
		m_MCS.y = 0;
		m_MCS.cx = 0;
		m_MCS.cy = 0;
		m_MCS.style = 0;
		m_MCS.lParam = 0;
	}

	//--------------------------------------------------------------------------------
	bool CMDIChildFrameView::Animate()
	{
		bool bResult = false;
		/*
		m_WindowFactory.Configure( &m_MDIChildFrameFactory() );

		//m_FrameController().SetModel( GetModel() );
		m_WindowClass().Preinitialise();
		m_WindowFactory().SetWindowClass( &( m_WindowClass() ) );

		m_WindowFactory().SetParameter( this );
		m_pWindow = dynamic_cast< COSWindow* >( m_WindowFactory().Instance() );
		m_pWindow->Controller( dynamic_cast< CBaseWindowController* >( m_pController->GetItem( 0 ) ) );			

		m_WindowFactory().SetStyle( COSWindow::eWSOverlappedWindow );
		m_WindowFactory().WindowRect.Set( 32, 32, 188, 168 );

		m_MCS.szClass = const_cast< TCHAR* >( m_WindowClass().Name() );
		m_MCS.szTitle = _TXT( "Test Child Frame #1" );
		m_MCS.hOwner = nsWin32::nsCodeServices::CProcess::ThisProcess()->Instance();
		m_MCS.x = 0x80000000;
		m_MCS.y = 0x80000000;
		m_MCS.cx = 188;
		m_MCS.cy = 168;
		m_MCS.style = 0x40cfc000;//m_WindowFactory().GetStyle() & ~(nsWin32::nsGUI::COSWindow::eWSMaximize | nsWin32::nsGUI::COSWindow::eWSVisible);
		m_MCS.lParam = (Cmp_long_ptr)this;
			*/		
		/*
		CMDIClientView* pMDIClientView = reinterpret_cast< CMDIClientView* >( pParent );
		CMDIClient* pMDIClient = reinterpret_cast< CMDIClient* >( &( pMDIClientView->Window() ) );
		m_WindowFactory().Create( _TXT( "Test Child Frame #1" ), 0 );//Create a high level C++ window
		WindowHandle hChild = pMDIClient->MDICreate( m_MCS );//Create the Windows child window first
		nsWin32::nsGUI::CMDIChildWindow* pOSWindow = new nsWin32::nsGUI::CMDIChildWindow( hChild );//Create a C++ low level wrapper for the Windows child window
		//m_pWindow->Create( pOSWindow );//Attach the low level C++ wrapper to the high level C++ COSWindow
			
		bResult = FrameClient().Animate();//Animate the contents of this child frame
   		m_pWindow->Show( COSWindow::swShowNormal );
		*/
		return bResult;
	}

	//--------------------------------------------------------------------------------
	CMDIChildFrameView::~CMDIChildFrameView()
	{
	}

}//nsWin32
