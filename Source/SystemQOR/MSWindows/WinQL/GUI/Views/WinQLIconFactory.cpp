//WinQLIconFactory.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Factory for Icons

#include "CompilerQOR.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: this stored in members for later usage" )
#include "WinQL/GUI/Views/IconFactory.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_OCLASS_LUID( CIconFactory );

	//--------------------------------------------------------------------------------
	CIconFactory::CIconFactory()
	{
	}

	//--------------------------------------------------------------------------------
	CIconFactory::~CIconFactory()
	{
	}

	//--------------------------------------------------------------------------------
	void* CIconFactory::Instance( void )
	{	
		void* pResult = 0;

		switch( m_Model().m_Type )
		{
		case CIconModel::eByNameIcon:
			{
				pResult = new CIcon( *( m_Model().m_pModule ), m_Model().m_szName );
			}
			break;
		case CIconModel::eIndirectIcon:
			{
				nsWin32::ICONINFO iconinfo;
				iconinfo.fIcon = m_Model().m_bIcon;
				iconinfo.xHotspot = m_Model().m_iWidth;
				iconinfo.yHotspot = m_Model().m_iHeight;
				iconinfo.hbmColor = (void*)( m_Model().m_pANDBits.operator const unsigned char *() );
				iconinfo.hbmMask = (void*)( m_Model().m_pORBits.operator const unsigned char *() );
				pResult = new CIcon( iconinfo );
			}
			break;
		case CIconModel::eResourceIcon:
			{
				pResult = new CIcon( m_Model().m_presbits, m_Model().m_dwResSize, m_Model().m_bIcon, m_Model().m_dwVersion );
			}
			break;
		case CIconModel::eResourceIconEx:
			{
				pResult = new CIcon( m_Model().m_presbits, m_Model().m_dwResSize, m_Model().m_bIcon, m_Model().m_dwVersion, m_Model().m_iWidth, m_Model().m_iHeight, m_Model().m_uiFlags );
			}
			break;
		case CIconModel::eScratchIcon:
			{
				pResult = new CIcon( *( m_Model().m_pModule ), m_Model().m_iWidth, m_Model().m_iHeight, m_Model().m_cPlanes, m_Model().m_cBitsPerPixel, m_Model().m_pANDBits, m_Model().m_pORBits );
			}
			break;
		default:
			break;
		}

		return pResult;
	}

	//--------------------------------------------------------------------------------
	void* CIconFactory::Instance( nsMammut::CPropertySet& srcModel )
	{
		m_Model() = srcModel;
		return Instance();
	}

	//--------------------------------------------------------------------------------
	CIcon::refType CIconFactory::Ref( void )
	{
		return CIcon::refType( reinterpret_cast< CIcon* >( Instance() ), true );
	}


}//nsWin32

