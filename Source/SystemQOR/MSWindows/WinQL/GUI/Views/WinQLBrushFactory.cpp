//WinQLBrushFactory.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Factory for Brushes

#include "CompilerQOR.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: this stored in members for later usage" )
#include "WinQL/GUI/Views/BrushFactory.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_OCLASS_LUID( CBrushFactory );

	//--------------------------------------------------------------------------------
	CBrushFactory::CBrushFactory()
	{
	}

	//--------------------------------------------------------------------------------
	CBrushFactory::~CBrushFactory()
	{
	}

	//--------------------------------------------------------------------------------
	void* CBrushFactory::Instance( void )
	{	
		void* pResult = 0;

		switch( m_Model().m_Type )
		{
		case CBrushModel::eBitmapBrush:
			{
				pResult = 0;
			}
			break;
		case CBrushModel::eColourBrush:
			{
				pResult = new CBrush( m_Model().m_ulColour );
			}
			break;
		case CBrushModel::eDIBPatternBrush:
			{
				pResult = new CBrush( m_Model().m_pPackedDIB, m_Model().m_ulColour );
			}
			break;
		case CBrushModel::eDIBPatternPtBrush:
			{
				pResult = new CBrush( (const void*)( m_Model().m_pPackedDIB.Value() ), m_Model().m_ulColour );
			}
			break;
		case CBrushModel::eHatchBrush:
			{
				pResult = new CBrush( m_Model().m_uiStyle, m_Model().m_ulColour );
			}
			break;
		case CBrushModel::eLogicalBrush:
			{
				nsWin32::LOGBRUSH logBrush;
				logBrush.lbColor = m_Model().m_ulColour;
				logBrush.lbHatch = m_Model().m_ulHatch;
				logBrush.lbStyle = m_Model().m_uiStyle;
				pResult = new CBrush( logBrush );
			}
			break;
		case CBrushModel::eStockBrush:
			{
				pResult = new CStockBrush( m_Model().m_ulColour );
			}
			break;
		case CBrushModel::eSystemColourBrush:
			{
				pResult = new CSystemColourBrush( m_Model().m_ulColour );
			}
			break;
		default:
			break;
		}

		return pResult;
	}

	//--------------------------------------------------------------------------------
	void* CBrushFactory::Instance( nsMammut::CPropertySet& srcModel )
	{
		m_Model() = srcModel;
		return Instance();
	}

	//--------------------------------------------------------------------------------
	CBrush::refType CBrushFactory::Ref( nsMammut::CPropertySet& srcModel )
	{
		return CBrush::refType( reinterpret_cast< CBrush* >( Instance( srcModel ) ), true );
	}

}//nsWin32

