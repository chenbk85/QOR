//WinQLMenuFactory.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Factory for Menus

#include "CompilerQOR.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: this stored in members for later usage" )
#include "WinQL/GUI/Views/MenuFactory.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_OCLASS_LUID( CMenuItemFactory );

	//--------------------------------------------------------------------------------
	CMenuItemFactory::CMenuItemFactory()
	{
	}

	//--------------------------------------------------------------------------------
	CMenuItemFactory::~CMenuItemFactory()
	{
	}

	//--------------------------------------------------------------------------------
	void* CMenuItemFactory::Instance( void )
	{
		return 0;
	}

	//--------------------------------------------------------------------------------
	void CMenuItemFactory::Release( void* pInstance )
	{
	}

	//--------------------------------------------------------------------------------
	MENUITEMINFO* CMenuItemFactory::Instance( nsMammut::CPropertySet& srcModel )
	{
		return 0;
	}

	//--------------------------------------------------------------------------------
	MENUITEMINFO* CMenuItemFactory::Instance( CMenuItemModel& srcModel )
	{
		return 0;
	}


	__QOR_IMPLEMENT_OCLASS_LUID( CMenuFactory );

	//--------------------------------------------------------------------------------
	CMenuFactory::CMenuFactory() : m_MenuModelObserver( *this )
	{
	}

	//--------------------------------------------------------------------------------
	CMenuFactory::~CMenuFactory()
	{
	}

	//--------------------------------------------------------------------------------
	void* CMenuFactory::Instance( void )
	{	
		CMenu* pResult = 0;

		nsWin32::MENUINFO MenuInfo;
		MenuInfo.hbrBack = 0;
		if( !m_Model().m_BackgroundBrush.Value().IsNull() )
		{
			MenuInfo.hbrBack = m_Model().m_BackgroundBrush.Value()->Handle()->Use();
		}

		MenuInfo.fMask = m_Model().m_Mask.Value();
		MenuInfo.dwStyle = m_Model().m_Style.Value();
		MenuInfo.dwMenuData = m_Model().m_MenuData.Value();
		MenuInfo.dwContextHelpID = m_Model().m_ContextHelpID.Value();
		MenuInfo.cyMax = m_Model().m_YMax.Value();
		MenuInfo.cbSize = sizeof( nsWin32::MENUINFO );

		pResult = new CMenu();
		pResult->SetInfo( &MenuInfo );

		nsMammut::CVectorModel< CMenuItemModel >::iterator it = m_Model().m_MenuItems.begin();
		while( it != m_Model().m_MenuItems.end() )
		{
			//nsWin32::MENUITEMINFO MenuItem;
			pResult->Append( 0, (Cmp_uint_ptr)(it->As< CMenuItemModel >().m_ItemData.Value() ), it->As< CMenuItemModel >().m_TypeData.Value() );
			it++;
		}
		return pResult;
	}

	//--------------------------------------------------------------------------------
	CMenu* CMenuFactory::Instance( CMenuModel& srcModel )
	{
		m_Model() = srcModel;
		return reinterpret_cast< CMenu* >( Instance() );
	}

	//--------------------------------------------------------------------------------
	CMenu* CMenuFactory::Instance( nsMammut::CPropertySet& srcModel )
	{
		m_Model() = srcModel;
		return reinterpret_cast< CMenu* >( Instance() );
	}

	//--------------------------------------------------------------------------------
	CMenu::refType CMenuFactory::Ref( void )
	{
		return CMenu::refType( reinterpret_cast< CMenu* >( Instance() ), true );
	}

	//--------------------------------------------------------------------------------
	void CMenuFactory::Update( CMenuModel& Model )
	{
		if( m_Model.IsNull() )
		{
			m_Model.Configure( &Model );
			m_Model().m_Observable.AddObserver( &m_MenuModelObserver );
		}
	}

}//nsWin32

