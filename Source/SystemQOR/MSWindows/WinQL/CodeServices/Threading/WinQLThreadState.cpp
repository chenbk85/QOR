//WinQLThreadState.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Implementation for per thread state and optional state

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/Threading/WinQLThreadState.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	CThreadCRTState::CThreadCRTState() :
		m_ulHoldRand( 0 )			//rand() seed value
	,	m_pToken( 0 )				//strtok data
	,	m_pwToken( 0 )
	,	m_pmToken( 0 )
	,	m_pszErrMsg( 0 )			// ptr to strerror()/_strerror() buff
	,	m_pwErrMsg( 0 )				// ptr to _wcserror()/__wcserror() buff
	,	m_pszNameBuffer0( 0 )		// ptr to tmpnam() buffer
	,	m_pwNameBuffer0( 0 )		// ptr to _wtmpnam() buffer
	,	m_pszNameBuffer1( 0 )		// ptr to tmpfile() buffer
	,	m_pwNameBuffer1( 0 )		// ptr to _wtmpfile() buffer
	,	m_pszAscTimeBuffer( 0 )		// ptr to asctime() buffer
	,	m_pwAscTimeBuffer( 0 )		// ptr to _wasctime() buffer
	,	m_pTimeBuffer( 0 )			// ptr to gmtime() structure
	,	m_pCVTBuffer( 0 )			// ptr to ecvt()/fcvt buffer
	,	_ch_buf_used( 0 )			// if the _con_ch_buf is used
	{
	}

	//--------------------------------------------------------------------------------
	CThreadCRTState::~CThreadCRTState()
	{
	}

	//--------------------------------------------------------------------------------
	CThreadExceptionState::CThreadExceptionState() :
		m_pInitAddr( 0 )				// initial user thread address
	,	m_pInitArg( 0 )					// initial user thread argument
	,	m_pxcptacttab( 0 )				// ptr to exception-action table
	,	m_tpxcptinfoptrs( 0 )			// ptr to exception info pointers
	,	m_tfpecode( 0 )					// float point exception code
	,	m_pCurrentException( 0 )		//_curexception;  // current exception
	,	m_ProcessingThrow( 0 )			// for uncaught_exception
	,	m_pFrameInfoChain( 0 )
	{
	}

	//--------------------------------------------------------------------------------
	CThreadExceptionState::~CThreadExceptionState()
	{
	}

}//nsWin32
