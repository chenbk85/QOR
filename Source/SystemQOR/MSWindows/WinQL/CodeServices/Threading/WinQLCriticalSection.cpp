//WinQLCriticalSection.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.


#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQAPI/Kernel32.h"

//------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CCriticalSection );

	//------------------------------------------------------------------------------
	CCriticalSection::CCriticalSection()
	{
		_WINQ_FCONTEXT( "CCriticalSection::CCriticalSection" );
		Construct( 0, 0, 0);
	}

	//------------------------------------------------------------------------------
	CCriticalSection::CCriticalSection( unsigned long dwSpinCount, unsigned long dwFlags, int* pbResult )
	{
		_WINQ_FCONTEXT( "CCriticalSection::CCriticalSection" );
		Construct( dwSpinCount, dwFlags, pbResult );
	}

	//------------------------------------------------------------------------------
	void CCriticalSection::Construct( unsigned long dwSpinCount, unsigned long dwFlags, int* pbResult )
	{
		_WINQ_FCONTEXT( "CCriticalSection::Construct" );

		__QOR_PROTECT
		{
			/*static*/ DWORD dwVersion = CKernel32::GetVersion();
			/*static*/ DWORD dwMajorVersion = ( DWORD )( LOBYTE( LOWORD( dwVersion ) ) );
			/*static*/ DWORD dwMinorVersion = ( DWORD )( HIBYTE( LOWORD( dwVersion ) ) );
			BOOL bResult = FALSE;
#			if ( _WIN32_WINNT >= 0x0600 )
			if( dwMajorVersion >= 6 )
			{
				bResult = CKernel32::InitializeCriticalSectionEx( reinterpret_cast< ::CRITICAL_SECTION* >( this ), dwSpinCount, dwFlags );
			}
			else
			{
#			else
				QOR_PP_UNREF( dwFlags );
#			endif
#			if( _WIN32_WINNT >= 0x0501 )
				if( dwMajorVersion == 5 && dwMinorVersion >= 1 )
				{
					bResult = CKernel32::InitializeCriticalSectionAndSpinCount( reinterpret_cast< ::CRITICAL_SECTION* >( this ), dwSpinCount );
				}
				else
				{
#			else
		QOR_PP_UNREF( dwSpinCount );
#			endif
					CKernel32::InitializeCriticalSection( reinterpret_cast< ::CRITICAL_SECTION* >( this ) );
					bResult = TRUE;
#			if( _WIN32_WINNT >= 0x0501 )
				}
#			endif
#			if ( _WIN32_WINNT >= 0x0600 )
			}
#			endif
			if( pbResult != 0 )
			{
				*pbResult = bResult;
			}
		}__QOR_ENDPROTECT
	}

	//------------------------------------------------------------------------------
	CCriticalSection::~CCriticalSection()
	{
		_WINQ_FCONTEXT( "CCriticalSection::~CCriticalSection" );
		__QOR_PROTECT
		{
			CKernel32::DeleteCriticalSection( reinterpret_cast< ::CRITICAL_SECTION* >( this ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	void CCriticalSection::Enter()
	{
		_WINQ_FCONTEXT( "CCriticalSection::Enter" );
		__QOR_PROTECT
		{
			CKernel32::EnterCriticalSection( reinterpret_cast< ::CRITICAL_SECTION* >( this ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	void CCriticalSection::Leave()
	{
		_WINQ_FCONTEXT( "CCriticalSection::Leave" );
		__QOR_PROTECT
		{
			CKernel32::LeaveCriticalSection( reinterpret_cast< ::CRITICAL_SECTION* >( this ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	void CCriticalSection::Acquire( void )
	{
		_WINQ_FCONTEXT( "CCriticalSection::Acquire" );
		__QOR_PROTECT
		{
			CKernel32::EnterCriticalSection( reinterpret_cast< ::CRITICAL_SECTION* >( this ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	void CCriticalSection::Release( void )
	{
		_WINQ_FCONTEXT( "CCriticalSection::Release" );
		__QOR_PROTECT
		{
			CKernel32::LeaveCriticalSection( reinterpret_cast< ::CRITICAL_SECTION* >( this ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	unsigned long CCriticalSection::SetSpinCount( unsigned long dwSpinCount )
	{
		_WINQ_FCONTEXT( "CCriticalSection::SetSpinCount" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::SetCriticalSectionSpinCount( reinterpret_cast< ::CRITICAL_SECTION* >( this ), dwSpinCount );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//------------------------------------------------------------------------------
	bool CCriticalSection::TryEnter()
	{
		_WINQ_FCONTEXT( "CCriticalSection::TryEnter" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::TryEnterCriticalSection( reinterpret_cast< ::CRITICAL_SECTION* >( this ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}


	__QOR_IMPLEMENT_OCLASS_LUID( CCriticalSectionLock );

	//------------------------------------------------------------------------------
	CCriticalSectionLock::CCriticalSectionLock( CCriticalSection& Section ) : m_Section( Section )
	{
		_WINQ_FCONTEXT( "CCriticalSectionLock::CCriticalSectionLock" );
		m_Section.Enter();
	}

	//------------------------------------------------------------------------------
	CCriticalSectionLock::~CCriticalSectionLock()
	{
		_WINQ_FCONTEXT( "CCriticalSectionLock::~CCriticalSectionLock" );
		m_Section.Leave();
	}

	//------------------------------------------------------------------------------
	void CCriticalSectionLock::Lock( void )
	{
		_WINQ_FCONTEXT( "CCriticalSectionLock::Lock" );
		m_Section.Enter();
	}

	//------------------------------------------------------------------------------
	void CCriticalSectionLock::Unlock( void )
	{
		_WINQ_FCONTEXT( "CCriticalSectionLock::UnLock" );
		m_Section.Leave();
	}


	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CCriticalLock );
	//--------------------------------------------------------------------------------
	CCriticalLock::CCriticalLock( unsigned long dwSpinCount, unsigned long dwFlags, int* pbResult ) : m_Section( dwSpinCount, dwFlags, pbResult )
	{
		_WINQ_FCONTEXT( "CCriticalLock::CCriticalLock" );
		m_Section.Enter();
	}

	//--------------------------------------------------------------------------------
	CCriticalLock::~CCriticalLock()
	{
		_WINQ_FCONTEXT( "CCriticalLock::~CCriticalLock" );
		m_Section.Leave();
	}

}//nsWin32
