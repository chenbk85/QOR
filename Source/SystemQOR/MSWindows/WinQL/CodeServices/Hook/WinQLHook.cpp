//WinQLHook.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Implements a Windows Hook object wrapper

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/CodeServices/Hook/WinQLHook.h"
#include "WinQAPI/Kernel32.h"
#include "WinQAPI/User32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CHook );

	__QCMP_WARNING_PUSH
	__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage:" );
	//--------------------------------------------------------------------------------
	CHook::CHook( int idHook, nsWin32::HOOKPROC lpfn, InstanceHandle hMod, unsigned long dwThreadId, int* pbResult ) : m_User32Library( CUser32::Instance() )
	,	m_Handle( this, 0 )
	{
		_WINQ_FCONTEXT( "CHook::CHook" );
		m_pResult = pbResult;
		__QOR_PROTECT
		{
			m_Handle = m_User32Library.SetWindowsHookEx( idHook, lpfn, reinterpret_cast< ::HINSTANCE >( hMod ), dwThreadId );
		}__QOR_ENDPROTECT
	}
	__QCMP_WARNING_POP

	//--------------------------------------------------------------------------------
	CHook::~CHook()
	{
		_WINQ_FCONTEXT( "CHook::~CHook" );
		BOOL bResult = FALSE;
		__QOR_PROTECT
		{
			bResult = m_User32Library.UnhookWindowsHookEx( reinterpret_cast< ::HHOOK >( m_Handle.Use() ) );
			if( m_pResult != NULL )
			{
				*m_pResult = bResult;
			}
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	Cmp_long_ptr CHook::CallNext( int nCode, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CHook::CallNext" );
		LRESULT lResult = 0;
		__QOR_PROTECT
		{
			lResult = m_User32Library.CallNextHookEx( reinterpret_cast< ::HHOOK >( m_Handle.Use() ), nCode, wParam, lParam );
		}__QOR_ENDPROTECT
		return lResult;
	}

	//--------------------------------------------------------------------------------
	nsWin32::CUserObject CHook::Security()
	{
		_WINQ_FCONTEXT( "CHook::Security" );
		CUserObject Result( m_Handle.AsHandle() );
		return Result;
	}

}//nsWin32
