//WinQLHeap.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Implements an encapsulation of the Windows Heap memory management system

#include "WinQAPI/Kernel32.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/Memory/WinQLHeap.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	// {0C03777A-C2FC-4B86-B83E-2E583E4AAFF5}
	__QOR_IMPLEMENT_OCLASS_GUID( CHeap, 0xc03777a, 0xc2fc, 0x4b86, 0xb8, 0x3e, 0x2e, 0x58, 0x3e, 0x4a, 0xaf, 0xf5 );

	//------------------------------------------------------------------------------
	CHeap::CHeap()
	{
		_WINQ_FCONTEXT( "CHeap::CHeap" );				
		__QOR_PROTECT
		{
			static bool sbSetInformation = false;
			m_bDefault = true;
			m_hHeap = CKernel32::GetProcessHeap();

			if( !sbSetInformation )
			{
				SetInformation( HeapEnableTerminationOnCorruption, 0, 0 );
				sbSetInformation = true;
			}
		}__QOR_ENDPROTECT
	}

	//------------------------------------------------------------------------------
	CHeap::CHeap( unsigned long flOptions, Cmp_ulong_ptr dwInitialSize, Cmp_ulong_ptr dwMaximumSize )
	{
		_WINQ_FCONTEXT( "CHeap::CHeap" );				
		__QOR_PROTECT
		{
			m_bDefault = false;
			m_hHeap = CKernel32::HeapCreate( flOptions, dwInitialSize, dwMaximumSize );
		}__QOR_ENDPROTECT

	}

	//------------------------------------------------------------------------------
	CHeap::~CHeap()
	{
		_WINQ_FCONTEXT( "CHeap::~CHeap" );
		__QOR_PROTECT
		{
			if( !m_bDefault )
			{
				CKernel32::HeapDestroy( m_hHeap );
			}
		}__QOR_ENDPROTECT
	}

	//------------------------------------------------------------------------------
	bool CHeap::QueryInformation ( nsWin32::HEAP_INFORMATION_CLASS HeapInformationClass, void* HeapInformation, Cmp_ulong_ptr HeapInformationLength, Cmp_ulong_ptr* ReturnLength ) const
	{
		_WINQ_FCONTEXT( "CHeap::QueryInformation" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::HeapQueryInformation( m_hHeap, static_cast< ::HEAP_INFORMATION_CLASS >( HeapInformationClass ), HeapInformation, HeapInformationLength, ReturnLength ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CHeap::Lock() const
	{
		_WINQ_FCONTEXT( "CHeap::Lock" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::HeapLock( m_hHeap ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CHeap::Unlock() const
	{
		_WINQ_FCONTEXT( "CHeap::Unlock" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::HeapUnlock( m_hHeap) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	void* CHeap::Alloc( unsigned long dwFlags, Cmp_ulong_ptr dwBytes ) const
	{
		_WINQ_FCONTEXT( "CHeap::Alloc" );
		LPVOID pResult = 0;
		__QOR_PROTECT
		{
			pResult = CKernel32::HeapAlloc( m_hHeap, dwFlags, dwBytes );
			//bool bValid = Validate( dwFlags, pResult );
		}__QOR_ENDPROTECT
		return pResult;
	}

	//------------------------------------------------------------------------------
	bool CHeap::Free( unsigned long dwFlags, void* lpMem ) const
	{
		_WINQ_FCONTEXT( "CHeap::Free" );
		bool bResult = false;
		__QOR_PROTECT
		{
			//bool bValid = Validate( dwFlags, lpMem );
			bResult = CKernel32::HeapFree( m_hHeap, dwFlags, lpMem ) ? true : false;
			//bValid = Validate( dwFlags, 0 );
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	Cmp_ulong_ptr CHeap::Compact( unsigned long dwFlags ) const
	{
		_WINQ_FCONTEXT( "CHeap::Compact" );
		SIZE_T Result = 0;
		__QOR_PROTECT
		{
			Result = CKernel32::HeapCompact( m_hHeap, dwFlags );
		}__QOR_ENDPROTECT
		return Result;
	}

	//------------------------------------------------------------------------------
	void* CHeap::ReAlloc( unsigned long dwFlags, void* lpMem, Cmp_ulong_ptr dwBytes ) const
	{
		_WINQ_FCONTEXT( "CHeap::ReAlloc" );
		LPVOID pResult = 0;
		__QOR_PROTECT
		{
			bool bValid = Validate( dwFlags, lpMem );
			pResult = CKernel32::HeapReAlloc( m_hHeap, dwFlags, lpMem, dwBytes );
			bValid = Validate( dwFlags, pResult );
		}__QOR_ENDPROTECT
		return pResult;
	}

	//------------------------------------------------------------------------------
	bool CHeap::SetInformation( nsWin32::HEAP_INFORMATION_CLASS HeapInformationClass, void* HeapInformation, Cmp_ulong_ptr HeapInformationLength ) const
	{
		_WINQ_FCONTEXT( "CHeap::SetInformation" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::HeapSetInformation( m_hHeap, static_cast< ::HEAP_INFORMATION_CLASS >( HeapInformationClass ), HeapInformation, HeapInformationLength ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	Cmp_ulong_ptr CHeap::Size( unsigned long dwFlags, const void* lpMem ) const
	{
		_WINQ_FCONTEXT( "CHeap::Size" );
		SIZE_T Result = 0;
		__QOR_PROTECT
		{
			Result = CKernel32::HeapSize( m_hHeap, dwFlags, lpMem );
		}__QOR_ENDPROTECT
		return Result;
	}

	//------------------------------------------------------------------------------
	bool CHeap::Validate( unsigned long dwFlags, const void* lpMem ) const
	{
		_WINQ_FCONTEXT( "CHeap::Validate" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::HeapValidate( m_hHeap, dwFlags, lpMem ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CHeap::Walk( nsWin32::LPPROCESS_HEAP_ENTRY lpEntry ) const
	{
		_WINQ_FCONTEXT( "CHeap::Walk" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::HeapWalk( m_hHeap, reinterpret_cast< ::LPPROCESS_HEAP_ENTRY >( lpEntry ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	unsigned long CHeap::GetProcessHeaps( unsigned long NumberOfHeaps, void** ProcessHeaps )
	{
		_WINQ_SFCONTEXT( "CHeap::GetProcessHeaps" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::GetProcessHeaps( NumberOfHeaps, ProcessHeaps );
		}__QOR_ENDPROTECT
		return dwResult;
	}

}//nsWin32

