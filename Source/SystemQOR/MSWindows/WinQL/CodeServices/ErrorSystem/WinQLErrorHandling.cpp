//WinQLErrorHandling.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Implements encapsulation of Error handling related Win32 API calls

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/ErrorSystem/WinQLErrorHandling.h"
#include "WinQAPI/Kernel32.h"
#include "WinQAPI/User32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	// {F751058B-1B68-42F7-9617-0BA2C6D75BFE}
	__QOR_IMPLEMENT_OCLASS_GUID( CErrorHelper, 0xf751058b, 0x1b68, 0x42f7, 0x96, 0x17, 0xb, 0xa2, 0xc6, 0xd7, 0x5b, 0xfe )

	//--------------------------------------------------------------------------------
	CErrorHelper::CErrorHelper() : m_User32Library( CUser32::Instance() )
	{
		_WINQ_FCONTEXT( "CErrorHelper::CErrorHelper" );
	}

	//--------------------------------------------------------------------------------
	CErrorHelper::~CErrorHelper()
	{
		_WINQ_FCONTEXT( "CErrorHelper::~CErrorHelper" );
	}

	//--------------------------------------------------------------------------------
	unsigned long CErrorHelper::FormatMessageT( unsigned long dwFlags, const void* lpSource, unsigned long dwMessageId, unsigned long dwLanguageId, TCHAR* lpBuffer, unsigned long nSize, va_list* Arguments )
	{
		_WINQ_FCONTEXT( "CErrorHelper::FormatMessage" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::FormatMessage( dwFlags, lpSource, dwMessageId, dwLanguageId, lpBuffer, nSize, Arguments );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	unsigned int CErrorHelper::GetErrorMode()
	{
		_WINQ_FCONTEXT( "CErrorHelper::GetErrorMode" );
		UINT uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = CKernel32::GetErrorMode();
		}__QOR_ENDPROTECT
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CErrorHelper::GetLastError()
	{
		_WINQ_FCONTEXT( "CErrorHelper::GetLastError" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::GetLastError();
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	unsigned int CErrorHelper::SetErrorMode( unsigned int uMode )
	{
		_WINQ_FCONTEXT( "CErrorHelper::SetErrorMode" );
		UINT uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = CKernel32::SetErrorMode( uMode );
		}__QOR_ENDPROTECT
		return uiResult;
	}
			
}//nsWin32
