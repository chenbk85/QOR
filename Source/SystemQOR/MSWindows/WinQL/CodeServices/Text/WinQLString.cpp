//WinQLString.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/CodeServices/Text/WinString.h"
#include "WinQL/CodeServices/Text/WinQLCodePage.h"
#include "WinQAPI/Kernel32.h"
#include <strsafe.h>

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	CAString::CAString() : BaseName()
	{
	}

	//--------------------------------------------------------------------------------
	CAString::CAString(nsCodeQOR::CTLRef< char > Src) : BaseName( Src )
	{
	}

	//--------------------------------------------------------------------------------
	CAString::CAString( const CAString& src ) : BaseName( src )
	{
	}

	//--------------------------------------------------------------------------------
	CAString::CAString( const char* cpString , unsigned short usLen ) : BaseName( cpString, usLen == 0 ? static_cast< unsigned short >( strlen( cpString ) ) : usLen )
	{
	}

	//--------------------------------------------------------------------------------
	CAString::~CAString()
	{
	}

	//--------------------------------------------------------------------------------
	CAString& CAString::operator = ( const CAString& src )
	{
		BaseName::operator=( src );
		return *this;
	}

	//--------------------------------------------------------------------------------
	CAString& CAString::operator = ( nsCodeQOR::CTLRef< char > Src )
	{
		BaseName::operator=( Src );
		return *this;
	}

	//--------------------------------------------------------------------------------
	nsCodeQOR::CTLRef< char > CAString::DetachBufffer( void )
	{
		return CString< char >::DetachBuffer();
	}

	//--------------------------------------------------------------------------------
	int CAString::Format( CAString& Fmt, va_list arglist )
	{
		CStringHelper StringHelper;
		return StringHelper.wvsprintfA( m_p, *(Fmt()), arglist );
	}

	//--------------------------------------------------------------------------------
	int CAString::Format( const char* szFmt, va_list arglist )
	{
		CStringHelper StringHelper;
		return StringHelper.wvsprintfA( m_p, szFmt, arglist );
	}

	//--------------------------------------------------------------------------------
	int CAString::FormatV( CAString& Fmt, ... )
	{
		CStringHelper StringHelper;
		va_list args;
        va_start( args, Fmt );		
		int iResult = StringHelper.wvsprintfA( m_p, *(Fmt()), args );
		va_end( args );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CAString::FormatV( const char* szFmt, ... )
	{
		CStringHelper StringHelper;
		size_t cchRemaining;
		unsigned long ulFlags = STRSAFE_IGNORE_NULLS | STRSAFE_FILL_BEHIND_NULL | STRSAFE_NULL_ON_FAILURE;

		va_list args;
        va_start( args, szFmt );	

		long lResult = 0;
		if( Capacity() == 0 )
		{
			Reserve( 16 );
		}
		do
		{
			lResult = StringCchVPrintfExA( m_p, Capacity(), 0, &cchRemaining, ulFlags, szFmt, args );

			if( lResult == STRSAFE_E_INSUFFICIENT_BUFFER )
			{
				SetSize( ( Capacity() + 1 ) * 2 );
			}
		}while( lResult == STRSAFE_E_INSUFFICIENT_BUFFER && ( Capacity() < STRSAFE_MAX_CCH ) );

		va_end( args );
		if( lResult == 0 )
		{
			unsigned short usSize = static_cast< unsigned short >( Capacity() - cchRemaining );
		    if( usSize < Allocation() )
			{				
				InternalLen() = usSize;
			}
		}
		return InternalLen();
	}

	//--------------------------------------------------------------------------------
	CAString CAString::toAString() const
	{
		return *this;
	}

	//--------------------------------------------------------------------------------
	CTString CAString::toTString() const
	{
#	if ( __QOR_UNICODE )
		return toWString();
#	else
		return *this;
#	endif
	}

	//--------------------------------------------------------------------------------
	CWString CAString::toWString() const
	{
		CWString strResult;

		int iResult = nsWinQAPI::CKernel32::Instance().MultiByteToWideChar( CCodePage::UTF8, 0, m_p, InternalLen(), strResult.GetBufferSetLength( InternalLen() ), InternalLen() );
		strResult.ValidateBuffer( static_cast< unsigned short >( iResult ) );

		return strResult;
	}

	//--------------------------------------------------------------------------------
	CAString& CAString::toUpper()
	{
		for( unsigned short usChar = 0; usChar < Len(); usChar++ )
		{
			m_p[ usChar ] = toupper( m_p[ usChar ] );
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	CAString& CAString::toLower()
	{
		for( unsigned short usChar = 0; usChar < Len(); usChar++ )
		{
			m_p[ usChar ] = tolower( m_p[ usChar ] );
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	CAString& CAString::TheEmptyString( void )
	{
		static CAString strEmpty;
		return strEmpty;
	}

	//--------------------------------------------------------------------------------
	CWString::CWString() : BaseName()
	{
	}

	//--------------------------------------------------------------------------------
	CWString::CWString( const CWString& src ) : BaseName( src )
	{
	}

	//--------------------------------------------------------------------------------
	CWString::CWString( const wchar_t* cpwString, unsigned short usLen ) : BaseName( cpwString, usLen == 0 ? static_cast< unsigned short >( wcslen( cpwString ) ) : usLen )
	{
	}

	//--------------------------------------------------------------------------------
	CWString::~CWString()
	{
	}

	//--------------------------------------------------------------------------------
	CWString& CWString::operator = ( const CWString& src )
	{
		BaseName::operator=( src );
		return *this;
	}
	
	//--------------------------------------------------------------------------------
	CWString& CWString::operator = ( const wchar_t* src )
	{
		*this = CWString( src, 0 );
		return *this;
	}

	//--------------------------------------------------------------------------------
	CWString& CWString::operator = ( const nsCodeQOR::CTLRef< wchar_t >& Src )
	{
		BaseName::operator=( Src );
		return *this;
	}
	
	//--------------------------------------------------------------------------------
	bool CWString::operator == ( const CWString& Cmp ) const
	{
		//TODO:
		const wchar_t* wszLocale = LOCALE_NAME_SYSTEM_DEFAULT;
		unsigned long ulCmpFlags = SORT_STRINGSORT;
		return( nsWinQAPI::CKernel32::Instance().CompareStringEx( wszLocale, ulCmpFlags, this->operator const wchar_t *(), InternalLen(), Cmp.operator const wchar_t *(), Cmp.Len(), 0, 0, 0 ) == CSTR_EQUAL );
	}

    //--------------------------------------------------------------------------------
    bool CWString::operator < ( const CWString& Cmp ) const
    {
		//TODO:
		const wchar_t* wszLocale = LOCALE_NAME_SYSTEM_DEFAULT;
		unsigned long ulCmpFlags = SORT_STRINGSORT;

		if( BaseName::Len() == 0 && Cmp.Len() > 0 )
		{
			return true;
		}
		if( BaseName::Len() >= 0 && Cmp.Len() == 0 )
		{
			return false;
		}
			
		bool bResult = ( nsWinQAPI::CKernel32::Instance().CompareStringEx( wszLocale, ulCmpFlags, this->operator const wchar_t *(), InternalLen(), Cmp.operator const wchar_t *(), Cmp.Len(), 0, 0, 0 ) == CSTR_LESS_THAN ) ? true : false;
		return bResult;
    }

	//--------------------------------------------------------------------------------
	int CWString::Format( CWString& Fmt, va_list arglist )
	{
		CStringHelper StringHelper;
		return StringHelper.wvsprintfW( m_p, *(Fmt()), arglist );
	}

	//--------------------------------------------------------------------------------
	int CWString::Format( const wchar_t* szFmt, va_list arglist )
	{
		CStringHelper StringHelper;
		return StringHelper.wvsprintfW( m_p, szFmt, arglist );
	}

	//--------------------------------------------------------------------------------
	int CWString::FormatV( CWString& Fmt, ... )
	{
		CStringHelper StringHelper;
		va_list args;
        va_start( args, Fmt );		
		int iResult = StringHelper.wvsprintfW( m_p, *(Fmt()), args );
		va_end( args );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWString::FormatV( const wchar_t* szFmt, ... )
	{
		CStringHelper StringHelper;
		size_t cchRemaining;
		unsigned long ulFlags = STRSAFE_IGNORE_NULLS | STRSAFE_FILL_BEHIND_NULL | STRSAFE_NULL_ON_FAILURE;

		va_list args;
        va_start( args, szFmt );	

		long lResult = 0;
		if( Capacity() == 0 )
		{
			Reserve( 16 );
		}
		do
		{
			lResult = StringCchVPrintfExW( m_p, Capacity(), 0, &cchRemaining, ulFlags, szFmt, args );

			if( lResult == STRSAFE_E_INSUFFICIENT_BUFFER )
			{
				SetSize( ( Capacity() + 1 ) * 2 );
			}
		}while( lResult == STRSAFE_E_INSUFFICIENT_BUFFER && ( Capacity() < STRSAFE_MAX_CCH ) );

		va_end( args );
		if( lResult == 0 )
		{
			unsigned short usSize = static_cast< unsigned short >( Capacity() - cchRemaining );
		    if( usSize < Allocation() )
			{				
				InternalLen() = usSize;
			}
		}
		return InternalLen();
	}

	//--------------------------------------------------------------------------------
	CTString CWString::toTString() const
	{
#	if ( __QOR_UNICODE )
		return *this;
#	else
		return toAString();
#	endif
	}

	//--------------------------------------------------------------------------------
	CAString CWString::toAString() const
	{
		CAString strResult;
		if( m_p )
		{
			int iLength = nsWinQAPI::CKernel32::Instance().WideCharToMultiByte( CCodePage::UTF8, 0, *this, InternalLen(), strResult.GetBufferSetLength( InternalLen() * 2 ), InternalLen(), 0, 0 );
			strResult.ValidateBuffer( static_cast< unsigned short >( iLength ) );
		}
		return strResult;
	}

	//--------------------------------------------------------------------------------
	CWString CWString::toWString() const
	{
		return *this;
	}

	//--------------------------------------------------------------------------------
	CWString& CWString::TheEmptyString( void )
	{
		static CWString strEmpty;
		return strEmpty;
	}

	//--------------------------------------------------------------------------------
	CWString& CWString::toUpper()
	{
		for( unsigned short usChar = 0; usChar < Len(); usChar++ )
		{
			m_p[ usChar ] = towupper( m_p[ usChar ] );
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	CWString& CWString::toLower()
	{
		for( unsigned short usChar = 0; usChar < Len(); usChar++ )
		{
			m_p[ usChar ] = towlower( m_p[ usChar ] );
		}
		return *this;
	}

}//nsWin32

