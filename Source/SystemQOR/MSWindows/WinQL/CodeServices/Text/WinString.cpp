//WinString.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/CodeServices/Text/WinString.h"
#include "WinQL/CodeServices/Text/WinQLStringServices.h"
#include "CodeQOR/DataStructures/TLRef.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	CAString::CAString() : BaseName()
	{
	}
	
	//--------------------------------------------------------------------------------
	CAString::CAString( nsCodeQOR::CTLRef< char > Src ) : BaseName( Src )
	{
	}
	
	//--------------------------------------------------------------------------------
	CAString::CAString( const CAString& src ) : BaseName( src )
	{
	}

	//--------------------------------------------------------------------------------
	CAString::CAString( const char* cpString , unsigned short usLen ) : BaseName( cpString, usLen )
	{
	}
	
	//--------------------------------------------------------------------------------
	CAString::~CAString()
	{
	}

	//--------------------------------------------------------------------------------
	CAString& CAString::operator = ( const CAString& src )
	{
		BaseName::operator=( src );
		return *this;
	}

	//--------------------------------------------------------------------------------
	int CAString::Format( CAString& Fmt, va_list arglist )
	{
		CStringHelper StringHelper;
		return StringHelper.wvsprintfA( m_p, *(Fmt()), arglist );
	}

	//--------------------------------------------------------------------------------
	CWString::CWString() : BaseName()
	{
	}

	//--------------------------------------------------------------------------------
	CWString::CWString( const CWString& src ) : BaseName( src )
	{
	}

	//--------------------------------------------------------------------------------
	CWString::CWString( const wchar_t* cpwString, unsigned short usLen ) : BaseName( cpwString, usLen )
	{
	}

	//--------------------------------------------------------------------------------
	CWString::~CWString()
	{
	}

	//--------------------------------------------------------------------------------
	CWString& CWString::operator = ( const CWString& src )
	{
		BaseName::operator=( src );
		return *this;
	}

	//--------------------------------------------------------------------------------
	int CWString::Format( CWString& Fmt, va_list arglist )
	{
		CStringHelper StringHelper;
		return StringHelper.wvsprintfW( m_p, *(Fmt()), arglist );
	}

}//nsWin32

