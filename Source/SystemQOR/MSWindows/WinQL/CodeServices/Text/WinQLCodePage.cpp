//WinQLCodePage.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/CodeServices/Text/WinQLCodePage.h"
#include <string.h>

//--------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_OCLASS_LUID( CCodePage );

	//--------------------------------------------------------------------------------
	char* CCodePage::Convert( CCodePage& toCP, const char* lpSrcStr, int* pcchSrc, char* lpDestStr, int cchDest )
	{
		_WINQ_FCONTEXT( "CCodePage::Convert" );
		char* cbuffer = 0;
		int buff_size = 0;
		int cchSrc = *pcchSrc;
		bool bSingleByte = false;

		if ( m_uiPage != toCP.ID() )
		{
			wchar_t* wbuffer = 0;
			nsCodeQOR::CTLRef< CPInfo > cpiRef = GetInfo();

			// Find if both the codepages have no MBCS
			if( ! cpiRef.IsNull() )
			{
				if( cpiRef->MaxCharSize == 1 )
				{
					cpiRef = toCP.GetInfo();
					if( !cpiRef.IsNull() && cpiRef->MaxCharSize == 1 )
					{
						bSingleByte = true;
					}
				}
			}

			// If no MBCS in both then set buff_size and use it for all allocation
			if ( bSingleByte )
			{
				if ( cchSrc != -1)
				{
					buff_size = cchSrc;
				}
				else
				{
					//NULL character included
					buff_size = (int)strlen(lpSrcStr) + 1;
				}
			}
	        
			if ( !bSingleByte &&  !( buff_size = MultiByteToWideChar( MB_Precomposed, lpSrcStr, cchSrc, 0, 0 ) ) )
			{
				return 0;
			}

			wbuffer = new wchar_t[ buff_size ];//allocate enough space for wide chars

			if ( wbuffer == 0 ) 
			{
				//TODO:Error
				return 0;
			}

			memset( wbuffer, 0, sizeof(wchar_t) * buff_size);

			// do the conversion to WideChar
			if ( 0 != MultiByteToWideChar( MB_Precomposed, lpSrcStr, cchSrc, wbuffer, buff_size ) )
			{
				if ( lpDestStr != 0 )
				{
					if ( toCP.WideCharToMultiByte( 0, wbuffer, buff_size, lpDestStr, cchDest, 0, 0 ) )
					{
						cbuffer = lpDestStr;
					}
				} 
				else 
				{
					// do the conversion back to MultiByte using ANSI_CodePage
					if ( bSingleByte || (buff_size = toCP.WideCharToMultiByte( 0, wbuffer, buff_size, 0, 0, 0, 0) ) )
					{
						cbuffer = new char[buff_size];
						if ( cbuffer != 0 )
						{
							if ( 0 == (buff_size = toCP.WideCharToMultiByte( 0, wbuffer, buff_size, cbuffer, buff_size, 0, 0) ) )
							{
								delete [] cbuffer;                            
								cbuffer = 0;
							} 
							else 
							{
								if ( cchSrc != -1)
								{
									*pcchSrc = buff_size;
								}
							}
						}
					}
				}
			}

			if( wbuffer != 0 )
			{
				delete [] wbuffer;            
			}
		}

		//NOTE: Returns NULL pointer if the 2 CPs are the same
		return cbuffer;
	}

}//nsWin32
