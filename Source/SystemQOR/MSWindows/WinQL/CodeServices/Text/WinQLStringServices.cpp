//WinQLStringServices.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQAPI/Kernel32.h"
#include "WinQAPI/User32.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/CodeServices/Text/WinQLStringServices.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CBaseStringHelper );

	//--------------------------------------------------------------------------------
	CBaseStringHelper::CBaseStringHelper()
	{
		_WINQ_FCONTEXT( "CBaseStringHelper::CBaseStringHelper" );
	}

	//--------------------------------------------------------------------------------
	CBaseStringHelper::~CBaseStringHelper()
	{
		_WINQ_FCONTEXT( "CBaseStringHelper::~CBaseStringHelper" );
	}

	//--------------------------------------------------------------------------------
	int CBaseStringHelper::CompareStringEx( const wchar_t* lpLocaleName, unsigned long dwCmpFlags, const wchar_t* lpString1, int cchCount1, const wchar_t* lpString2, int cchCount2, nsWin32::NLSVersionInfo* lpVersionInformation, void* lpReserved, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CBaseStringHelper::CompareStringEx" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = CKernel32::Instance().CompareStringEx( lpLocaleName, dwCmpFlags, lpString1, cchCount1, lpString2, cchCount2, reinterpret_cast< ::LPNLSVERSIONINFO >( lpVersionInformation ), lpReserved, lParam );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CBaseStringHelper::CompareStringT( unsigned long Locale, unsigned long dwCmpFlags, const TCHAR* lpString1, int cchCount1, const TCHAR* lpString2, int cchCount2 )
	{
		_WINQ_FCONTEXT( "CBaseStringHelper::CompareString" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = CKernel32::CompareString( Locale, dwCmpFlags, lpString1, cchCount1, lpString2, cchCount2 );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CBaseStringHelper::CompareStringA( unsigned long Locale, unsigned long dwCmpFlags, const char* lpString1, int cchCount1, const char* lpString2, int cchCount2 )
	{
		_WINQ_FCONTEXT( "CBaseStringHelper::CompareStringA" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = CKernel32::CompareStringA( Locale, dwCmpFlags, lpString1, cchCount1, lpString2, cchCount2 );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CBaseStringHelper::CompareStringW( unsigned long Locale, unsigned long dwCmpFlags, const wchar_t* lpString1, int cchCount1, const wchar_t* lpString2, int cchCount2 )
	{
		_WINQ_FCONTEXT( "CBaseStringHelper::CompareStringW" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = CKernel32::CompareStringW( Locale, dwCmpFlags, lpString1, cchCount1, lpString2, cchCount2 );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CBaseStringHelper::FoldStringT( unsigned long dwMapFlags, const TCHAR* lpSrcStr, int cchSrc, TCHAR* lpDestStr, int cchDest )
	{
		_WINQ_FCONTEXT( "CBaseStringHelper::FoldString" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = CKernel32::FoldString( dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	bool CBaseStringHelper::GetStringTypeA( unsigned long Locale, unsigned long dwInfoType, const char* lpSrcStr, int cchSrc, unsigned short* lpCharType )
	{
		_WINQ_FCONTEXT( "CBaseStringHelper::GetStringTypeA" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetStringTypeA( Locale, dwInfoType, lpSrcStr, cchSrc, lpCharType ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CBaseStringHelper::GetStringTypeExT( unsigned long Locale, unsigned long dwInfoType, const TCHAR* lpSrcStr, int cchSrc, unsigned short* lpCharType )
	{
		_WINQ_FCONTEXT( "CBaseStringHelper::GetStringTypeEx" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetStringTypeEx( Locale, dwInfoType, lpSrcStr, cchSrc, lpCharType ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CBaseStringHelper::GetStringTypeW( unsigned long dwInfoType, const wchar_t* lpSrcStr, int cchSrc, unsigned short* lpCharType )
	{
		_WINQ_FCONTEXT( "CBaseStringHelper::GetStringTypeW" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetStringTypeW( dwInfoType, lpSrcStr, cchSrc, lpCharType ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CBaseStringHelper::IsDBCSLeadByte( unsigned char TestChar )
	{
		_WINQ_FCONTEXT( "CBaseStringHelper::IsDBCSLeadByte" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::IsDBCSLeadByte( TestChar ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CBaseStringHelper::IsDBCSLeadByteEx( unsigned int CodePage, unsigned char TestChar )
	{
		_WINQ_FCONTEXT( "CBaseStringHelper::IsDBCSLeadByteEx" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::IsDBCSLeadByteEx( CodePage, TestChar ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	int CBaseStringHelper::MultiByteToWideChar( unsigned int CodePage, unsigned long dwFlags, const char* lpMultiByteStr, int cbMultiByte, wchar_t* lpWideCharStr, int cchWideChar )
	{			
		_WINQ_FCONTEXT( "CBaseStringHelper::MultiByteToWideChar" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = CKernel32::MultiByteToWideChar( CodePage, dwFlags, lpMultiByteStr, cbMultiByte, lpWideCharStr, cchWideChar );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CBaseStringHelper::WideCharToMultiByte( unsigned int uiCodePage, unsigned long dwFlags, const wchar_t* lpWideCharStr, int cchWideChar, char* lpMultiByteStr, int cbMultiByte, const char* lpDefaultChar, int* lpUsedDefaultChar )
	{			
		_WINQ_FCONTEXT( "CBaseStringHelper::WideCharToMultiByte" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = CKernel32::WideCharToMultiByte( uiCodePage, dwFlags, lpWideCharStr, cchWideChar, lpMultiByteStr, cbMultiByte, lpDefaultChar, lpUsedDefaultChar );
		}__QOR_ENDPROTECT
		return iResult;
	}


	//--String Helper

	__QOR_IMPLEMENT_OCLASS_LUID( CStringHelper );

	//--------------------------------------------------------------------------------
	CStringHelper::CStringHelper() : m_User32Library( CUser32::Instance() )
	{
		_WINQ_FCONTEXT( "CStringHelper::CStringHelper" );
	}

	//--------------------------------------------------------------------------------
	CStringHelper::~CStringHelper()
	{
		_WINQ_FCONTEXT( "CStringHelper::~CStringHelper" );
	}

	//--------------------------------------------------------------------------------
	char* CStringHelper::CharLowerA( char* lpsz )
	{
		_WINQ_FCONTEXT( "CStringHelper::CharLowerA" );
		LPSTR Result = 0;
		__QOR_PROTECT
		{
			Result = m_User32Library.CharLowerA( lpsz );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	wchar_t* CStringHelper::CharLowerW( wchar_t* lpwsz )
	{
		_WINQ_FCONTEXT( "CStringHelper::CharLowerW" );
		LPWSTR Result = 0;
		__QOR_PROTECT
		{
			Result = m_User32Library.CharLowerW( lpwsz );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	unsigned long CStringHelper::CharLowerBuffA( char* lpsz, unsigned long cchLength )
	{
		_WINQ_FCONTEXT( "CStringHelper::CharLowerBuffA" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = m_User32Library.CharLowerBuffA( lpsz, cchLength );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CStringHelper::CharLowerBuffW( wchar_t* lpwsz, unsigned long cchLength )
	{
		_WINQ_FCONTEXT( "CStringHelper::CharLowerBuffW" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = m_User32Library.CharLowerBuffW( lpwsz, cchLength );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	TCHAR* CStringHelper::CharNextT( const TCHAR* lpsz )
	{
		_WINQ_FCONTEXT( "CStringHelper::CharNext" );
		LPTSTR Result = 0;
		__QOR_PROTECT
		{
			Result = m_User32Library.CharNext( lpsz );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	char* CStringHelper::CharNextExA( unsigned short CodePage, const char* lpCurrentChar, unsigned long dwFlags )
	{
		_WINQ_FCONTEXT( "CStringHelper::CharNextExA" );
		LPSTR Result = 0;
		__QOR_PROTECT
		{
			Result = m_User32Library.CharNextExA( CodePage, lpCurrentChar, dwFlags );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	TCHAR* CStringHelper::CharPrevT( const TCHAR* lpszStart, const TCHAR* lpszCurrent )
	{
		_WINQ_FCONTEXT( "CStringHelper::CharPrev" );
		LPTSTR Result = 0;
		__QOR_PROTECT
		{
			Result = m_User32Library.CharPrev( lpszStart, lpszCurrent );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	char* CStringHelper::CharPrevExA( unsigned short CodePage, const char* lpStart, const char* lpCurrentChar, unsigned long dwFlags )
	{
		_WINQ_FCONTEXT( "CStringHelper::CharPrevExA" );
		LPSTR Result = 0;
		__QOR_PROTECT
		{
			Result = m_User32Library.CharPrevExA( CodePage, lpStart, lpCurrentChar, dwFlags );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	bool CStringHelper::CharToOemT( const TCHAR* lpszSrc, char* lpszDst )
	{
		_WINQ_FCONTEXT( "CStringHelper::ChartoOEM" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.CharToOem( lpszSrc, lpszDst ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CStringHelper::CharToOemBuffA( const char* lpszSrc, char* lpszDst, unsigned long cchDstLength )
	{
		_WINQ_FCONTEXT( "CStringHelper::ChartoOEMBuffA" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.CharToOemBuffA( lpszSrc, lpszDst, cchDstLength ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CStringHelper::CharToOemBuffW( const wchar_t* lpwszSrc, char* lpszDst, unsigned long cchDstLength )
	{
		_WINQ_FCONTEXT( "CStringHelper::ChartoOEMBuffW" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.CharToOemBuffW( lpwszSrc, lpszDst, cchDstLength ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	TCHAR* CStringHelper::CharUpperT( TCHAR* lpsz )
	{
		_WINQ_FCONTEXT( "CStringHelper::CharUpper" );
		LPTSTR Result = 0;
		__QOR_PROTECT
		{
			Result = m_User32Library.CharUpper( lpsz );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	unsigned long CStringHelper::CharUpperBuffA( char* lpsz, unsigned long cchLength )
	{
		_WINQ_FCONTEXT( "CStringHelper::CharUpperBuffA" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = m_User32Library.CharUpperBuffA( lpsz, cchLength );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CStringHelper::CharUpperBuffW( wchar_t* lpwsz, unsigned long cchLength )
	{
		_WINQ_FCONTEXT( "CStringHelper::CharUpperBuffW" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = m_User32Library.CharUpperBuffW( lpwsz, cchLength );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	bool CStringHelper::IsCharAlphaT( TCHAR ch )
	{
		_WINQ_FCONTEXT( "CStringHelper::IsCharAlpha" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.IsCharAlpha( ch ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CStringHelper::IsCharAlphaNumericT( TCHAR ch )
	{
		_WINQ_FCONTEXT( "CStringHelper::IsCharAlphaNumeric" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.IsCharAlphaNumeric( ch ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CStringHelper::IsCharLowerT( TCHAR ch )
	{
		_WINQ_FCONTEXT( "CStringHelper::IsCharLower" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.IsCharLower( ch ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CStringHelper::IsCharUpperT( TCHAR ch )
	{
		_WINQ_FCONTEXT( "CStringHelper::IsCharUpper" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.IsCharUpper( ch ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CStringHelper::LoadStringT( InstanceHandle hInstance, unsigned int uID, TCHAR* lpBuffer, int nBufferMax )
	{
		_WINQ_FCONTEXT( "CStringHelper::LoadStringT" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_User32Library.LoadString( reinterpret_cast< ::HINSTANCE >( hInstance ), uID, lpBuffer, nBufferMax );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CStringHelper::LoadStringA( InstanceHandle hInstance, unsigned int uID, char* lpBuffer, int nBufferMax )
	{
		_WINQ_FCONTEXT( "CStringHelper::LoadStringA" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_User32Library.LoadStringA( reinterpret_cast< ::HINSTANCE >( hInstance ), uID, lpBuffer, nBufferMax );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CStringHelper::LoadStringW( InstanceHandle hInstance, unsigned int uID, wchar_t* lpBuffer, int nBufferMax )
	{
		_WINQ_FCONTEXT( "CStringHelper::LoadStringW" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_User32Library.LoadStringW( reinterpret_cast< ::HINSTANCE >( hInstance ), uID, lpBuffer, nBufferMax );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	bool CStringHelper::OemToCharT( const char* lpszSrc, TCHAR* lpszDst )
	{
		_WINQ_FCONTEXT( "CStringHelper::OemToChar" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.OemToChar( lpszSrc, lpszDst ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CStringHelper::OemToCharBuffA( const char* lpszSrc, char* lpszDst, unsigned long cchDstLength )
	{
		_WINQ_FCONTEXT( "CStringHelper::OemToCharBuffA" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.OemToCharBuffA( lpszSrc, lpszDst, cchDstLength ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CStringHelper::OemToCharBuffW( const wchar_t* lpwszSrc, wchar_t* lpwszDst, unsigned long cchDstLength )
	{
		_WINQ_FCONTEXT( "CStringHelper::OemToCharBuffW" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.OemToCharBuffW( lpwszSrc, lpwszDst, cchDstLength ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CStringHelper::wvsprintfA( char* lpOutput, const char* lpFmt, va_list arglist )
	{
		_WINQ_FCONTEXT( "CStringHelper::wvsprintfA" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_User32Library.wvsprintfA( lpOutput, lpFmt, arglist );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CStringHelper::wvsprintfW( wchar_t* lpOutput, const wchar_t* lpFmt, va_list arglist )
	{
		_WINQ_FCONTEXT( "CStringHelper::wvsprintfW" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_User32Library.wvsprintfW( lpOutput, lpFmt, arglist );
		}__QOR_ENDPROTECT
		return iResult;
	}

}//nsWin32
