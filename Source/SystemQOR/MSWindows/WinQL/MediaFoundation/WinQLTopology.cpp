//WinQLTopology.cpp

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/CodeServices/WinQLPolicy.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQL/MediaFoundation/Topology.h"
#include "WinQAPI/MedFoundAPI.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	namespace nsMediaFoundation
	{
		__QOR_IMPLEMENT_OCLASS_LUID( CTopology );

		__QOR_IMPLEMENT_OCLASS_LUID( CTopologyNode );

		//--------------------------------------------------------------------------------
		//Create an empty topology
		CTopology::CTopology()
		{
			_WINQ_FCONTEXT( "CTopology::CTopology" );
			m_ulStatus = m_MFLibrary.MFCreateTopology( 
				reinterpret_cast< ::IMFTopology** >( &m_p ) );
		}

		//--------------------------------------------------------------------------------
		//Create a transcode topology
		CTopology::CTopology( IMFMediaSource* pSrc, LPCWSTR pwszOutputFilePath, IMFTranscodeProfile* pProfile )
		{
			_WINQ_FCONTEXT( "CTopology::CTopology" );
			m_ulStatus = m_MFLibrary.MFCreateTranscodeTopology( 
				reinterpret_cast< ::IMFMediaSource* >( pSrc ), pwszOutputFilePath, 
				reinterpret_cast< ::IMFTranscodeProfile* >( pProfile ),
				reinterpret_cast< ::IMFTopology** >( &m_p ) );
		}

		//--------------------------------------------------------------------------------
		CTopology::~CTopology()
		{
			_WINQ_FCONTEXT( "CTopology::~CTopology" );
		}

		//--------------------------------------------------------------------------------

		//--------------------------------------------------------------------------------
		CTopologyNode::CTopologyNode( MF_TOPOLOGY_TYPE NodeType )
		{
			_WINQ_FCONTEXT( "CTopologyNode::CTopologyNode" );
			m_ulStatus = m_MFLibrary.MFCreateTopologyNode( 
				static_cast< ::MF_TOPOLOGY_TYPE >( NodeType ),
				reinterpret_cast< ::IMFTopologyNode** >( &m_p ) );
		}

		//--------------------------------------------------------------------------------
		CTopologyNode::~CTopologyNode()
		{
			_WINQ_FCONTEXT( "CTopologyNode::~CTopologyNode" );
		}

		//--------------------------------------------------------------------------------
		CMediaType CTopologyNode::GetCurrentType( unsigned long dwStreamIndex, int fOutput )
		{
			_WINQ_FCONTEXT( "CTopologyNode::GetCurrentType" );

			IMFMediaType* pIMediaType = 0;
			m_ulStatus = m_MFLibrary.MFGetTopoNodeCurrentType( 
				reinterpret_cast< ::IMFTopologyNode* >( m_p ),
				dwStreamIndex, fOutput, 
				reinterpret_cast< ::IMFMediaType** >( &pIMediaType ) );
			CMediaType MediaType( pIMediaType );
			return MediaType;
		}

	}//nsMediaFoundation

}//nsWin32
