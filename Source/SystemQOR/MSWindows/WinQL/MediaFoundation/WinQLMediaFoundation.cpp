//WinQLMediaFoundation.cpp

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/CodeServices/WinQLPolicy.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQAPI/MedFoundAPI.h"
#include "WinQAPI/OLE32.h"
#include "WinQL/MediaFoundation/MediaFoundation.h"


//--------------------------------------------------------------------------------
namespace nsWin32
{
	const GUID IMFAsyncCallback::_IID = { 0xa27003cf, 0x2354, 0x4f2a, 0x8d, 0x6a, 0xab, 0x7c, 0xff, 0x15, 0x43, 0x7e };
	const GUID IPropertyStore::_IID						=   { 0x886d8eeb, 0x8cf2, 0x4446, 0x8d, 0x02, 0xcd, 0xba, 0x1d, 0xbd, 0xcf, 0x99 };
	const GUID IMFPMediaItem::_IID						=	{ 0x90EB3E6B, 0xECBF, 0x45cc, 0xB1, 0xDA, 0xC6, 0xFE, 0x3E, 0xA7, 0x0D, 0x57 };
	const GUID IMFTransform::_IID						=	{ 0xbf94c121, 0x5b05, 0x4e6f, 0x80, 0x00, 0xba, 0x59, 0x89, 0x61, 0x41, 0x4d };
	const GUID IMFVideoSampleAllocator::_IID			=	{ 0x86cbc910, 0xe533, 0x4751, 0x8e, 0x3b, 0xf1, 0x9b, 0x5b, 0x80, 0x6a, 0x03 };
	const GUID IMFSample::_IID							=	{ 0xc40a00f2, 0xb93a, 0x4d80, 0xae, 0x8c, 0x5a, 0x1c, 0x63, 0x4f, 0x58, 0xe4 };
	const GUID IMFAttributes::_IID						=	{ 0x2cd2d921, 0xc447, 0x44a7, 0xa1, 0x3c, 0x4a, 0xda, 0xbf, 0xc2, 0x47, 0xe3 };
	const GUID IMFASFContentInfo::_IID					=	{ 0xB1DCA5CD, 0xD5DA, 0x4451, 0x8E, 0x9E, 0xDB, 0x5C, 0x59, 0x91, 0x4E, 0xAD };
	const GUID IMFASFIndexer::_IID						=	{ 0x53590F48, 0xDC3B, 0x4297, 0x81, 0x3F, 0x78, 0x77, 0x61, 0xAD, 0x7B, 0x3E };
	const GUID IMFByteStream::_IID						=	{ 0xad4c1b00, 0x4bf7, 0x422f, 0x91, 0x75, 0x75, 0x66, 0x93, 0xd9, 0x13, 0x0d };
	const GUID IMFMediaBuffer::_IID						=	{ 0x045FA593, 0x8799, 0x42b8, 0xBC, 0x8D, 0x89, 0x68, 0xC6, 0x45, 0x35, 0x07 };
	const GUID IMFSchemeHandler::_IID					=	{ 0x6D4C7B74, 0x52A0, 0x4bb7, 0xB0, 0xDB, 0x55, 0xF2, 0x9F, 0x47, 0xA6, 0x68 };
	const GUID IMFPMPServer::_IID						=	{ 0x994e23af, 0x1cc2, 0x493c, 0xb9, 0xfa, 0x46, 0xf1, 0xcb, 0x04, 0x0f, 0xa4 };
	const GUID IMFPresentationClock::_IID				=	{ 0x868CE85C, 0x8EA9, 0x4f55, 0xAB, 0x82, 0xB0, 0x09, 0xA9, 0x10, 0xA8, 0x05 };
	const GUID IMFMediaEvent::_IID						=	{ 0xDF598932, 0xF10C, 0x4E39, 0xBB, 0xA2, 0xC3, 0x08, 0xF1, 0x01, 0xDA, 0xA3 };
	const GUID IMFAsyncResult::_IID						=	{ 0xac6b7889, 0x0740, 0x4d51, 0x86, 0x19, 0x90, 0x59, 0x94, 0xa5, 0x5c, 0xc6 };
	const GUID IMFMediaEventGenerator::_IID				=	{ 0x2CD0BD52, 0xBCD5, 0x4B89, 0xB6, 0x2C, 0xEA, 0xDC, 0x0C, 0x03, 0x1E, 0x7D };
	const GUID IMFClock::_IID							=	{ 0x2eb1e945, 0x18b8, 0x4139, 0x9b, 0x1a, 0xd5, 0xd5, 0x84, 0x81, 0x85, 0x30 };
	const GUID IMFMediaSession::_IID					=	{ 0x90377834, 0x21D0, 0x4dee, 0x82, 0x14, 0xBA, 0x2E, 0x3E, 0x6C, 0x11, 0x27 };
	const GUID IMFClockStateSink::_IID					=	{ 0xF6696E82, 0x74F7, 0x4f3d, 0xA1, 0x78, 0x8A, 0x5E, 0x09, 0xC3, 0x65, 0x9F };
	const GUID IMFPresentationTimeSource::_IID			=	{ 0x7FF12CCE, 0xF76F, 0x41c2, 0x86, 0x3B, 0x16, 0x66, 0xC8, 0xE5, 0xE1, 0x39 };
	const GUID IMFStreamSink::_IID						=	{ 0x0A97B3CF, 0x8E7C, 0x4a3d, 0x8F, 0x8C, 0x0C, 0x84, 0x3D, 0xC2, 0x47, 0xFB };
	const GUID IMFMediaSink::_IID						=	{ 0x6ef2a660, 0x47c0, 0x4666, 0xb1, 0x3d, 0xcb, 0xb7, 0x17, 0xf2, 0xfa, 0x2c };
	const GUID IMFStreamDescriptor::_IID				=	{ 0x56c03d9c, 0x9dbb, 0x45f5, 0xab, 0x4b, 0xd8, 0x0f, 0x47, 0xc0, 0x59, 0x38 };
	const GUID IMFPresentationDescriptor::_IID			=	{ 0x03cb2711, 0x24d7, 0x4db6, 0xa1, 0x7f, 0xf3, 0xa7, 0xa4, 0x79, 0xa5, 0x36 };
	const GUID IMFMediaSource::_IID						=	{ 0x279a808d, 0xaec7, 0x40c8, 0x9c, 0x6b, 0xa6, 0xb4, 0x92, 0xc7, 0x8a, 0x66 };
	const GUID IMFASFMultiplexer::_IID					=	{ 0x57BDD80A, 0x9B38, 0x4838, 0xB7, 0x37, 0xC5, 0x8F, 0x67, 0x0D, 0x7D, 0x4F };
	const GUID IMFNetProxyLocator::_IID					=	{ 0xe9cd0383, 0xa268, 0x4bb4, 0x82, 0xde, 0x65, 0x8d, 0x53, 0x57, 0x4d, 0x41 };
	const GUID IMFMediaTypeHandler::_IID				=	{ 0xe93dcf6c, 0x4b07, 0x4e1e, 0x81, 0x23, 0xaa, 0x16, 0xed, 0x6e, 0xad, 0xf5 };
	const GUID IMFNetCredential::_IID					=	{ 0x5b87ef6a, 0x7ed8, 0x434f, 0xba, 0x0e, 0x18, 0x4f, 0xac, 0x16, 0x28, 0xd1 };
	const GUID IMFPluginControl::_IID					=	{ 0x5c6c44bf, 0x1db6, 0x435b, 0x92, 0x49, 0xe8, 0xcd, 0x10, 0xfd, 0xec, 0x96 };
	const GUID IMFVideoSampleAllocatorCallback::_IID	=	{ 0x992388B4, 0x3372, 0x4f67, 0x8B, 0x6F, 0xC8, 0x4C, 0x07, 0x1F, 0x47, 0x51 };
	const GUID IMFVideoSampleAllocatorNotify::_IID		=	{ 0xA792CDBE, 0xC374, 0x4e89, 0x83, 0x35, 0x27, 0x8E, 0x7B, 0x99, 0x56, 0xA4 };
	const GUID IMFVideoPresenter::_IID					=	{ 0x29AFF080, 0x182A, 0x4a5d, 0xAF, 0x3B, 0x44, 0x8F, 0x3A, 0x63, 0x46, 0xCB };
	const GUID IMFVideoMediaType::_IID					=	{ 0xb99f381f, 0xa8f9, 0x47a2, 0xa5, 0xaf, 0xca, 0x3a, 0x22, 0x5a, 0x38, 0x90 };
	const GUID IMFTranscodeProfile::_IID				=	{ 0x4ADFDBA3, 0x7AB0, 0x4953, 0xA6, 0x2B, 0x46, 0x1E, 0x7F, 0xF3, 0xDA, 0x1E };
	const GUID IMFTopoLoader::_IID						=	{ 0xDE9A6157, 0xF660, 0x4643, 0xB5, 0x6A, 0xDF, 0x9F, 0x79, 0x98, 0xC7, 0xCD };
	const GUID IMFSourceReader::_IID					=	{ 0x70ae66f2, 0xc809, 0x4e4f, 0x89, 0x15, 0xbd, 0xcb, 0x40, 0x6b, 0x79, 0x93 };
	const GUID IMFSequencerSource::_IID					=	{ 0x197CD219, 0x19CB, 0x4de1, 0xA6, 0x4C, 0xAC, 0xF2, 0xED, 0xCB, 0xE5, 0x9E };
	//const GUID IMFRemoteDesktopPlugin::_IID				=	{ 0x1cde6309, 0xcae0, 0x4940, 0x90, 0x7e, 0xc1, 0xec, 0x9c, 0x3d, 0x1d, 0x4a };
	const GUID IMFActivate::_IID						=	{ 0x7FEE9E9A, 0x4A89, 0x47a6, 0x89, 0x9C, 0xB6, 0xA5, 0x3A, 0x70, 0xFB, 0x67 };
	const GUID IMFASFSplitter::_IID						=	{ 0x12558295, 0xE399, 0x11D5, 0xBC, 0x2A, 0x00, 0xB0, 0xD0, 0xF3, 0xF4, 0xAB };
	const GUID IMFASFProfile::_IID						=	{ 0xD267BF6A, 0x028B, 0x4e0d, 0x90, 0x3D, 0x43, 0xF0, 0xEF, 0x82, 0xD0, 0xD4 };
	const GUID IMFASFStreamConfig::_IID					=	{ 0x9E8AE8D2, 0xDBBD, 0x4200, 0x9A, 0xCA, 0x06, 0xE6, 0xDF, 0x48, 0x49, 0x13 };
	const GUID IMFASFMutualExclusion::_IID				=	{ 0x12558291, 0xE399, 0x11D5, 0xBC, 0x2A, 0x00, 0xB0, 0xD0, 0xF3, 0xF4, 0xAB };
	const GUID IMFASFStreamPrioritization::_IID			=	{ 0x699bdc27, 0xbbaf, 0x49ff, 0x8e, 0x38, 0x9c, 0x39, 0xc9, 0xb5, 0xe0, 0x88 };
	const GUID IMFTopology::_IID						=	{ 0x83CF873A, 0xF6DA, 0x4bc8, 0x82, 0x3F, 0xBA, 0xCF, 0xD5, 0x5D, 0xC4, 0x33 };
	const GUID IMFCollection::_IID						=	{ 0x5BC8A76B, 0x869A, 0x46a3, 0x9B, 0x03, 0xFA, 0x21, 0x8A, 0x66, 0xAE, 0xBE };
	const GUID IMFTopologyNode::_IID					=	{ 0x83CF873A, 0xF6DA, 0x4bc8, 0x82, 0x3F, 0xBA, 0xCF, 0xD5, 0x5D, 0xC4, 0x30 };
	const GUID IMFMediaType::_IID						=	{ 0x44ae0fa8, 0xea31, 0x4109, 0x8d, 0x2e, 0x4c, 0xae, 0x49, 0x97, 0xc5, 0x55 };


	//--------------------------------------------------------------------------------
	namespace nsMediaFoundation
	{

	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CMediaFoundation );

	//--------------------------------------------------------------------------------
	CMediaFoundation::CMediaFoundation( unsigned long ulVersion, unsigned long ulFlags ) : MediaFoundationHelper( *( new nsWinQAPI::CMFAPI ) )
	{
		_WINQ_FCONTEXT( "CMediaFoundation::CMediaFoundation" );
		m_ulStatus = MediaFoundationHelper.MFStartup( ulVersion, ulFlags );
	}

	//--------------------------------------------------------------------------------
	CMediaFoundation::~CMediaFoundation()
	{
		_WINQ_FCONTEXT( "CMediaFoundation::~CMediaFoundation" );
		MediaFoundationHelper.MFShutdown();
		delete &MediaFoundationHelper;
	}

	//--------------------------------------------------------------------------------
	unsigned long CMediaFoundation::GetTimerPeriodicity( void )
	{
		_WINQ_FCONTEXT( "CMediaFoundation::GetTimerPeriodicity" );
		unsigned long ulResult = 0;
		m_ulStatus = MediaFoundationHelper.MFGetTimerPeriodicity( &ulResult );
		return ulResult;
	}

	//--------------------------------------------------------------------------------
	void CMediaFoundation::AverageTimerPerFrameToFrameRate( Cmp_unsigned__int64 uiAverageTimePerFrame, Cmp_unsigned__int32* puiNumerator, Cmp_unsigned__int32* puiDenominator )
	{
		_WINQ_FCONTEXT( "CMediaFoundation::AverageTimerPerFrameToFrameRate" );
		m_ulStatus = MediaFoundationHelper.MFAverageTimePerFrameToFrameRate( uiAverageTimePerFrame, puiNumerator, puiDenominator );
	}


	__QOR_IMPLEMENT_OCLASS_LUID( CMediaFoundation::CLock );

	//--------------------------------------------------------------------------------
	CMediaFoundation::CLock::CLock() : MediaFoundationHelper( *( new nsWinQAPI::CMFAPI ) )
	{
		_WINQ_FCONTEXT( "CMediaFoundation::CLock::CLock" );
		m_ulStatus = MediaFoundationHelper.MFLockPlatform();
	}

	//--------------------------------------------------------------------------------
	CMediaFoundation::CLock::~CLock()
	{
		_WINQ_FCONTEXT( "CMediaFoundation::CLock::~CLock" );
		m_ulStatus = MediaFoundationHelper.MFUnlockPlatform();
		delete &MediaFoundationHelper;
	}


		__QOR_IMPLEMENT_OCLASS_LUID( CTEnhancedVideoRendererBase );

		//--------------------------------------------------------------------------------
		CTEnhancedVideoRendererBase::CTEnhancedVideoRendererBase() : m_EVRLibrary( *( new nsWinQAPI::CEVRAPI ) )
		{
			_WINQ_FCONTEXT( "CTEnhancedVideoRendererBase::CTEnhancedVideoRendererBase" );
		}

		//--------------------------------------------------------------------------------
		CTEnhancedVideoRendererBase::CTEnhancedVideoRendererBase( const CTEnhancedVideoRendererBase& src ) : m_EVRLibrary( *( new nsWinQAPI::CEVRAPI ) )
		{
			_WINQ_FCONTEXT( "CTEnhancedVideoRendererBase::CTEnhancedVideoRendererBase" );
			*this = src;
		}

		//--------------------------------------------------------------------------------
		CTEnhancedVideoRendererBase& CTEnhancedVideoRendererBase::operator = ( const CTEnhancedVideoRendererBase& src )
		{
			_WINQ_FCONTEXT( "CTEnhancedVideoRendererBase::operator =" );
			if( &src != this )
			{
			}
			return *this;
		}

		//--------------------------------------------------------------------------------
		CTEnhancedVideoRendererBase::~CTEnhancedVideoRendererBase()
		{
			_WINQ_FCONTEXT( "CTEnhancedVideoRendererBase::~CTEnhancedVideoRendererBase" );
			delete &m_EVRLibrary;
		}


		__QOR_IMPLEMENT_OCLASS_LUID( CVideoSample );

		//--------------------------------------------------------------------------------
		CVideoSample::CVideoSample( IUnknown* pUnkSurface )
		{
			_WINQ_FCONTEXT( "CVideoSample::CVideoSample" );

			m_ulStatus = m_EVRLibrary.MFCreateVideoSampleFromSurface( 
				reinterpret_cast< ::IUnknown* >( pUnkSurface ),
				reinterpret_cast< ::IMFSample** >( &m_p ) );
		}

		//--------------------------------------------------------------------------------
		CVideoSample::~CVideoSample()
		{
			_WINQ_FCONTEXT( "CVideoSample::~CVideoSample" );
		}


		__QOR_IMPLEMENT_OCLASS_LUID( CAMMediaTypeFromMFMediaType );

		//--------------------------------------------------------------------------------
		CAMMediaTypeFromMFMediaType::CAMMediaTypeFromMFMediaType( IMFMediaType* pMFType, GUID& guidFormatBlockType ) : OLE32Helper( *( new nsWinQAPI::COLE32 ) )
		, MediaFoundationHelper( *( new nsWinQAPI::CMFAPI ) )
		{
			_WINQ_FCONTEXT( "CAMMediaTypeFromMFMediaType::CAMMediaTypeFromMFMediaType" );
			m_pAMMediaType = 0;
			m_ulStatus = MediaFoundationHelper.MFCreateAMMediaTypeFromMFMediaType(
				reinterpret_cast< ::IMFMediaType* >( pMFType ),
				*( reinterpret_cast< ::GUID* >( &guidFormatBlockType ) ),
				reinterpret_cast< ::AM_MEDIA_TYPE** >( &m_pAMMediaType ) );
		}

		//--------------------------------------------------------------------------------
		CAMMediaTypeFromMFMediaType::~CAMMediaTypeFromMFMediaType()
		{
			_WINQ_FCONTEXT( "CAMMediaTypeFromMFMediaType::~CAMMediaTypeFromMFMediaType" );
			if( m_pAMMediaType )
			{
				OLE32Helper.CoTaskMemFree( m_pAMMediaType->pbFormat );
				OLE32Helper.CoTaskMemFree( m_pAMMediaType );
			}
			delete &MediaFoundationHelper;
			delete &OLE32Helper;
		}


		__QOR_IMPLEMENT_OCLASS_LUID( CTMediaFoundationBase );

		//--------------------------------------------------------------------------------
		CTMediaFoundationBase::CTMediaFoundationBase() : m_MFLibrary( *( new nsWinQAPI::CMF ) )
		{
			_WINQ_FCONTEXT( "CTMediaFoundationBase::CTMediaFoundationBase" );
		}

		//--------------------------------------------------------------------------------
		CTMediaFoundationBase::CTMediaFoundationBase( const CTMediaFoundationBase& src ) : m_MFLibrary( *( new nsWinQAPI::CMF ) )
		{
			_WINQ_FCONTEXT( "CTMediaFoundationBase::CTMediaFoundationBase" );
			*this = src;
		}

		//--------------------------------------------------------------------------------
		CTMediaFoundationBase& CTMediaFoundationBase::operator = ( const CTMediaFoundationBase& src )
		{
			_WINQ_FCONTEXT( "CTMediaFoundationBase::operator =" );
			if( &src != this )
			{
			}
			return *this;
		}

		//--------------------------------------------------------------------------------
		CTMediaFoundationBase::~CTMediaFoundationBase()
		{
			_WINQ_FCONTEXT( "CTMediaFoundationBase::~CTMediaFoundationBase" );
			delete &m_MFLibrary;
		}


		__QOR_IMPLEMENT_OCLASS_LUID( CTMediaFouncdationAPIBase );

		//--------------------------------------------------------------------------------
		CTMediaFouncdationAPIBase::CTMediaFouncdationAPIBase() : MediaFoundationHelper( *( new nsWinQAPI::CMFAPI ) )
		{
			_WINQ_FCONTEXT( "CTMediaFouncdationAPIBase::CTMediaFouncdationAPIBase" );
		}

		//--------------------------------------------------------------------------------
		CTMediaFouncdationAPIBase::CTMediaFouncdationAPIBase( const CTMediaFouncdationAPIBase& src ) : MediaFoundationHelper( *( new nsWinQAPI::CMFAPI ) )
		{
			_WINQ_FCONTEXT( "CTMediaFouncdationAPIBase::CTMediaFouncdationAPIBase" );
			*this = src;
		}

		//--------------------------------------------------------------------------------
		CTMediaFouncdationAPIBase::~CTMediaFouncdationAPIBase()
		{
			_WINQ_FCONTEXT( "CTMediaFouncdationAPIBase::~CTMediaFouncdationAPIBase" );
			delete &MediaFoundationHelper;
		}

		//--------------------------------------------------------------------------------
		CTMediaFouncdationAPIBase& CTMediaFouncdationAPIBase::operator = ( const CTMediaFouncdationAPIBase& src )
		{
			_WINQ_FCONTEXT( "CTMediaFouncdationAPIBase::operator =" );
			if( &src != this )
			{
			}
			return *this;
		}


		__QOR_IMPLEMENT_OCLASS_LUID( CAsyncResult );

		//--------------------------------------------------------------------------------
		CAsyncResult::CAsyncResult( IUnknown* punkObject, IMFAsyncCallback* pCallback, IUnknown* punkState ) : MediaFoundationHelper( *( new nsWinQAPI::CMFAPI ) )
		{
			_WINQ_FCONTEXT( "CAsyncResult::CAsyncResult" );

			m_ulStatus = MediaFoundationHelper.MFCreateAsyncResult(
				reinterpret_cast< ::IUnknown* >( punkObject ),
				reinterpret_cast< ::IMFAsyncCallback* >( pCallback ),
				reinterpret_cast< ::IUnknown* >( punkState ),
				reinterpret_cast< ::IMFAsyncResult** >( &m_p ) );
		}

		//--------------------------------------------------------------------------------
		CAsyncResult::~CAsyncResult()
		{
			_WINQ_FCONTEXT( "CAsyncResult::~CAsyncResult" );
			delete &MediaFoundationHelper;
		}

		__QOR_IMPLEMENT_OCLASS_LUID( CCreateFromFile );

		//--------------------------------------------------------------------------------
		CCreateFromFile::CCreateFromFile( MF_FILE_ACCESSMODE AccessMode, MF_FILE_OPENMODE OpenMode, MF_FILE_FLAGS fFlags, const wchar_t* pwszFilePath, IUnknown* pState ) : m_MFLibrary( *( new nsWinQAPI::CMFAPI ) )
		{
			_WINQ_FCONTEXT( "CCreateFromFile::CCreateFromFile" );
			m_pCancelCookie = 0;
			IMFAsyncCallback* pCallback = Internal_Interface< IMFAsyncCallback >();
			m_ulStatus = m_MFLibrary.MFBeginCreateFile( static_cast< ::MF_FILE_ACCESSMODE >( AccessMode ), 
				static_cast< ::MF_FILE_OPENMODE >( OpenMode ),
				static_cast< ::MF_FILE_FLAGS >( fFlags ), 
				pwszFilePath, 
				reinterpret_cast< ::IMFAsyncCallback* >( pCallback ), 
				reinterpret_cast< ::IUnknown* >( pState ), 
				reinterpret_cast< ::IUnknown** >( &m_pCancelCookie ) );
		}

		//--------------------------------------------------------------------------------
		unsigned long __QCMP_STDCALLCONVENTION CCreateFromFile::GetParameters( unsigned long* pdwFlags, unsigned long* pdwQueue )
		{
			_WINQ_FCONTEXT( "CCreateFromFile::GetParameters" );
			return 0;
		}

		//--------------------------------------------------------------------------------
		unsigned long __QCMP_STDCALLCONVENTION CCreateFromFile::Invoke( IMFAsyncResult* pAsyncResult )
		{
			_WINQ_FCONTEXT( "CCreateFromFile::Invoke" );
			m_ulStatus = m_MFLibrary.MFEndCreateFile( reinterpret_cast< ::IMFAsyncResult* >( pAsyncResult ), reinterpret_cast< ::IMFByteStream** >( &m_pIMFByteStream ) );
			return m_ulStatus;
		}

		//--------------------------------------------------------------------------------
		CCreateFromFile::~CCreateFromFile()
		{
			_WINQ_FCONTEXT( "CCreateFromFile::~CCreateFromFile" );
			delete &m_MFLibrary;
		}
		
		//--------------------------------------------------------------------------------
		void CCreateFromFile::Cancel( void )
		{
			_WINQ_FCONTEXT( "CCreateFromFile::Cancel" );
			m_ulStatus = m_MFLibrary.MFCancelCreateFile( reinterpret_cast< ::IUnknown* >( m_pCancelCookie ) );
		}


		__QOR_IMPLEMENT_OCLASS_LUID( CScheduledWorkItem );

		//--------------------------------------------------------------------------------
		CScheduledWorkItem::CScheduledWorkItem( IUnknown* pState, Cmp_signed__int64 Timeout ) : m_MFLibrary( *( new nsWinQAPI::CMFAPI ) )
		{
			_WINQ_FCONTEXT( "CScheduledWorkItem::CScheduledWorkItem" );
			IMFAsyncCallback* pCallback = Internal_Interface< IMFAsyncCallback >();
			m_ulStatus = m_MFLibrary.MFScheduleWorkItem( 
				reinterpret_cast< ::IMFAsyncCallback* >( pCallback ), 
				reinterpret_cast< ::IUnknown* >( pState ), Timeout, &m_Key );
		}

		//--------------------------------------------------------------------------------
		CScheduledWorkItem::~CScheduledWorkItem()
		{
			_WINQ_FCONTEXT( "CScheduledWorkItem::~CScheduledWorkItem" );
			delete &m_MFLibrary;
		}

		//--------------------------------------------------------------------------------
		unsigned long __QCMP_STDCALLCONVENTION CScheduledWorkItem::GetParameters( unsigned long* pdwFlags, unsigned long* pdwQueue )
		{
			_WINQ_FCONTEXT( "CScheduledWorkItem::GetParameters" );
			return 0;
		}

		//--------------------------------------------------------------------------------
		unsigned long __QCMP_STDCALLCONVENTION CScheduledWorkItem::Invoke( IMFAsyncResult* pAsyncResult )
		{
			_WINQ_FCONTEXT( "CScheduledWorkItem::Invoke" );
			return 0;
		}

		//--------------------------------------------------------------------------------
		unsigned long CScheduledWorkItem::Cancel( void )
		{
			_WINQ_FCONTEXT( "CScheduledWorkItem::Cancel" );
			m_ulStatus = m_MFLibrary.MFCancelWorkItem( m_Key );
			return m_ulStatus;
		}


		__QOR_IMPLEMENT_OCLASS_LUID( CSupportedMimeTypes );

		//--------------------------------------------------------------------------------
		CSupportedMimeTypes::CSupportedMimeTypes() : m_Ole32Helper( *( new nsWinQAPI::COLE32 ) ), m_MFLibrary( *( new nsWinQAPI::CMF ) )
		{
			_WINQ_FCONTEXT( "CSupportedMimeTypes::CSupportedMimeTypes" );
			memset ( dynamic_cast< PROPVARIANT* >( this ), 0, sizeof(PROPVARIANT) );
			m_ulStatus = m_MFLibrary.MFGetSupportedMimeTypes( reinterpret_cast< ::PROPVARIANT* >( dynamic_cast< PROPVARIANT* >( this ) ) );
		}

		//--------------------------------------------------------------------------------
		CSupportedMimeTypes::~CSupportedMimeTypes()
		{
			_WINQ_FCONTEXT( "CSupportedMimeTypes::~CSupportedMimeTypes" );
			m_ulStatus = m_Ole32Helper.PropVariantClear( reinterpret_cast< ::PROPVARIANT* >( dynamic_cast< PROPVARIANT* >( this ) ) );
			delete &m_MFLibrary;
			delete &m_Ole32Helper;
		}


		__QOR_IMPLEMENT_OCLASS_LUID( CSupportedSchemes );

		//--------------------------------------------------------------------------------
		CSupportedSchemes::CSupportedSchemes() : m_Ole32Helper( *( new nsWinQAPI::COLE32 ) ), m_MFLibrary( *( new nsWinQAPI::CMF ) )
		{
			_WINQ_FCONTEXT( "CSupportedSchemes::CSupportedSchemes" );
			memset( dynamic_cast< PROPVARIANT* >( this ), 0, sizeof( PROPVARIANT ) );
			m_ulStatus = m_MFLibrary.MFGetSupportedSchemes( reinterpret_cast< ::PROPVARIANT* >( dynamic_cast< PROPVARIANT* >( this ) ) );
		}

		//--------------------------------------------------------------------------------
		CSupportedSchemes::~CSupportedSchemes()
		{
			_WINQ_FCONTEXT( "CSupportedSchemes::~CSupportedSchemes" );
			m_ulStatus = m_Ole32Helper.PropVariantClear( reinterpret_cast< ::PROPVARIANT* >( dynamic_cast< PROPVARIANT* >( this ) ) );
			delete &m_Ole32Helper;
			delete &m_MFLibrary;
		}


		__QOR_IMPLEMENT_OCLASS_LUID( CSystemTime );

		//--------------------------------------------------------------------------------
		CSystemTime::CSystemTime() : MediaFoundationHelper( *( new nsWinQAPI::CMFAPI ) )
		{
			_WINQ_FCONTEXT( "CSystemTime::CSystemTime" );
		}

		//--------------------------------------------------------------------------------
		CSystemTime::~CSystemTime()
		{
			_WINQ_FCONTEXT( "CSystemTime::~CSystemTime" );
			delete &MediaFoundationHelper;
		}

		//--------------------------------------------------------------------------------
		CSystemTime::operator Cmp_long_long()
		{
			_WINQ_FCONTEXT( "CSystemTime::operator Cmp_long_long" );
			Cmp_long_long llSysTime = MediaFoundationHelper.MFGetSystemTime();
			return llSysTime;
		}


		__QOR_IMPLEMENT_OCLASS_LUID( CASFContentInfo );

		//--------------------------------------------------------------------------------
		CASFContentInfo::CASFContentInfo()
		{
			_WINQ_FCONTEXT( "CASFContentInfo::CASFContentInfo" );
			m_ulStatus = m_MFLibrary.MFCreateASFContentInfo(
				reinterpret_cast< ::IMFASFContentInfo** >( &m_p ) );
		}

		//--------------------------------------------------------------------------------
		CASFContentInfo::~CASFContentInfo()
		{
			_WINQ_FCONTEXT( "CASFContentInfo::~CASFContentInfo" );
		}


		__QOR_IMPLEMENT_OCLASS_LUID( CASFIndexer );

		//--------------------------------------------------------------------------------
		CASFIndexer::CASFIndexer()
		{
			_WINQ_FCONTEXT( "CASFIndexer::CASFIndexer" );
			m_ulStatus = m_MFLibrary.MFCreateASFIndexer(
				reinterpret_cast< ::IMFASFIndexer** >( &m_p ) );
		}


		__QOR_IMPLEMENT_OCLASS_LUID( CASFIndexerByteStream );

		//--------------------------------------------------------------------------------
		CASFIndexerByteStream::CASFIndexerByteStream( IMFByteStream* pIContentByteStream, Cmp_unsigned_long_long cbIndexStartOffset )
		{
			_WINQ_FCONTEXT( "CASFIndexerByteStream::CASFIndexerByteStream" );
			m_ulStatus = m_MFLibrary.MFCreateASFIndexerByteStream( 
				reinterpret_cast< ::IMFByteStream* >( pIContentByteStream ), cbIndexStartOffset, 
				reinterpret_cast< ::IMFByteStream** >( &m_p ) );
		}


		__QOR_IMPLEMENT_OCLASS_LUID( CMediaBuffer );

		//--------------------------------------------------------------------------------
		//Create a media buffer that wraps another media buffer
		CMediaBuffer::CMediaBuffer( IMFMediaBuffer* pBuffer, unsigned long cbOffset, unsigned long dwLength )
		{
			_WINQ_FCONTEXT( "CMediaBuffer::CMediaBuffer" );
			m_ulStatus = MediaFoundationHelper.MFCreateMediaBufferWrapper( 
				reinterpret_cast< ::IMFMediaBuffer* >( pBuffer ),
				cbOffset, dwLength, reinterpret_cast< ::IMFMediaBuffer** >( &m_p ) );
		}

		//--------------------------------------------------------------------------------
		//Create a memory aligned memory media buffer
		CMediaBuffer::CMediaBuffer( unsigned long ulMaxLength, unsigned long ulAlignmentFlags )
		{
			_WINQ_FCONTEXT( "CMediaBuffer::CMediaBuffer" );
			m_ulStatus = MediaFoundationHelper.MFCreateAlignedMemoryBuffer( ulMaxLength, ulAlignmentFlags, 
				reinterpret_cast< ::IMFMediaBuffer** >( &m_p ) );
		}

		//--------------------------------------------------------------------------------
		//Create a memory media buffer
		CMediaBuffer::CMediaBuffer( unsigned long ulMaxLength )
		{
			_WINQ_FCONTEXT( "CMediaBuffer::CMediaBuffer" );
			m_ulStatus = MediaFoundationHelper.MFCreateMemoryBuffer( ulMaxLength, 
				reinterpret_cast< ::IMFMediaBuffer** >( &m_p ) );
		}


		__QOR_IMPLEMENT_OCLASS_LUID( CPMPServer );

		//--------------------------------------------------------------------------------
		CPMPServer::CPMPServer( unsigned long ulCreationFlags )
		{
			_WINQ_FCONTEXT( "CPMPServer::CPMPServer" );
			m_ulStatus = m_MFLibrary.MFCreatePMPServer( ulCreationFlags, 
				reinterpret_cast< ::IMFPMPServer** >( &m_p ) );
		}


		__QOR_IMPLEMENT_OCLASS_LUID( CPresentationClock );

		//--------------------------------------------------------------------------------
		CPresentationClock::CPresentationClock()
		{
			_WINQ_FCONTEXT( "CPresentationClock::CPresentationClock" );
			m_ulStatus = m_MFLibrary.MFCreatePresentationClock( 
				reinterpret_cast< ::IMFPresentationClock** >( &m_p ) );
		}

		__QOR_IMPLEMENT_OCLASS_LUID( CASFSplitter );

		//--------------------------------------------------------------------------------
		CASFSplitter::CASFSplitter()
		{
			_WINQ_FCONTEXT( "CASFSplitter::CASFSplitter" );
			m_ulStatus = m_MFLibrary.MFCreateASFSplitter(
				reinterpret_cast< ::IMFASFSplitter** >( &m_p ) );
		}


		__QOR_IMPLEMENT_OCLASS_LUID( CASFProfile );

		//--------------------------------------------------------------------------------
		CASFProfile::CASFProfile()
		{
			_WINQ_FCONTEXT( "CASFProfile::CASFProfile" );
			m_ulStatus = m_MFLibrary.MFCreateASFProfile(
				reinterpret_cast< ::IMFASFProfile** >( &m_p ) );
		}

		//--------------------------------------------------------------------------------
		CASFProfile::CASFProfile( IMFPresentationDescriptor* pIPD )
		{
			_WINQ_FCONTEXT( "CASFProfile::CASFProfile" );
			m_ulStatus = m_MFLibrary.MFCreateASFProfileFromPresentationDescriptor( 
				reinterpret_cast< ::IMFPresentationDescriptor* >( pIPD ),
				reinterpret_cast< ::IMFASFProfile** >( &m_p ) );
		}


		__QOR_IMPLEMENT_OCLASS_LUID( CProxyLocator );

		//--------------------------------------------------------------------------------
		CProxyLocator::CProxyLocator( const wchar_t* pszProtocol, IPropertyStore* pProxyConfig )
		{
			_WINQ_FCONTEXT( "CProxyLocator::CProxyLocator" );
			m_ulStatus = m_MFLibrary.MFCreateProxyLocator( pszProtocol,
				reinterpret_cast< ::IPropertyStore* >( pProxyConfig ),
				reinterpret_cast< ::IMFNetProxyLocator** >( &m_p ) );
		}


		__QOR_IMPLEMENT_OCLASS_LUID( CASFMultiplexer );

		//--------------------------------------------------------------------------------
		CASFMultiplexer::CASFMultiplexer()
		{
			_WINQ_FCONTEXT( "CASFMultplexer::CASFMultiplexer" );
			m_ulStatus = m_MFLibrary.MFCreateASFMultiplexer(
				reinterpret_cast< ::IMFASFMultiplexer** >( &m_p ) );
		}


		__QOR_IMPLEMENT_OCLASS_LUID( CSampleCopier );

		//--------------------------------------------------------------------------------
		CSampleCopier::CSampleCopier()
		{
			_WINQ_FCONTEXT( "CSampleCopier::CSampleCopier" );
			m_ulStatus = m_MFLibrary.MFCreateSampleCopierMFT(
				reinterpret_cast< ::IMFTransform** >( &m_p ) );
		}


		__QOR_IMPLEMENT_OCLASS_LUID( CSimpleTypeHandler );

		//--------------------------------------------------------------------------------
		CSimpleTypeHandler::CSimpleTypeHandler()
		{
			_WINQ_FCONTEXT( "CSimpleTypeHandler::CSimpleTypeHandler" );
			m_ulStatus = m_MFLibrary.MFCreateSimpleTypeHandler(
				reinterpret_cast< ::IMFMediaTypeHandler** >( &m_p ) );
		}


		__QOR_IMPLEMENT_OCLASS_LUID( CRemoteDesktopPlugin );

		//--------------------------------------------------------------------------------
		CRemoteDesktopPlugin::CRemoteDesktopPlugin()
		{
			_WINQ_FCONTEXT( "CRemoteDesktopPlugin::CRemoteDesktopPlugin" );
			m_ulStatus = m_MFLibrary.MFCreateRemoteDesktopPlugin(
				reinterpret_cast< ::IMFRemoteDesktopPlugin** >( &m_p ) );
		}


		__QOR_IMPLEMENT_OCLASS_LUID( CSample );

		//--------------------------------------------------------------------------------
		CSample::CSample()
		{
			_WINQ_FCONTEXT( "CSample::CSample" );
			m_ulStatus = MediaFoundationHelper.MFCreateSample(
				reinterpret_cast< ::IMFSample** >( &m_p ) );
		}


		__QOR_IMPLEMENT_OCLASS_LUID( CCredentialCache );

		//--------------------------------------------------------------------------------
		CCredentialCache::CCredentialCache()
		{
			_WINQ_FCONTEXT( "CCredentialCache::CCredentialCache" );
			m_ulStatus = m_MFLibrary.MFCreateCredentialCache(
				reinterpret_cast< ::IMFNetCredentialCache** >( &m_p ) );
		}

		__QOR_IMPLEMENT_OCLASS_LUID( CEventQueue );

		//--------------------------------------------------------------------------------
		CEventQueue::CEventQueue()
		{
			_WINQ_FCONTEXT( "CEventQueue::CEventQueue" );
			m_ulStatus = MediaFoundationHelper.MFCreateEventQueue(
				reinterpret_cast< ::IMFMediaEventQueue** >( &m_p ) );
		}


		__QOR_IMPLEMENT_OCLASS_LUID( CByteStream );

		//--------------------------------------------------------------------------------
		//Create a byte stream on a file
		CByteStream::CByteStream( const wchar_t* pwszFileURL, MF_FILE_ACCESSMODE AccessMode, MF_FILE_OPENMODE OpenMode, MF_FILE_FLAGS fFlags )
		{
			_WINQ_FCONTEXT( "CByteStream::CByteStream" );
			m_ulStatus = MediaFoundationHelper.MFCreateFile( 
				static_cast< ::MF_FILE_ACCESSMODE >( AccessMode ),
				static_cast< ::MF_FILE_OPENMODE >( OpenMode ), 
				static_cast< ::MF_FILE_FLAGS >( fFlags ), pwszFileURL, 
				reinterpret_cast< ::IMFByteStream** >( &m_p ) );
		}

		//--------------------------------------------------------------------------------
		//Create a byte stream on a temp file
		CByteStream::CByteStream( MF_FILE_ACCESSMODE AccessMode, MF_FILE_OPENMODE OpenMode, MF_FILE_FLAGS fFlags )
		{
			_WINQ_FCONTEXT( "CByteStream::CByteStream" );
			m_ulStatus = MediaFoundationHelper.MFCreateTempFile( 
				static_cast< ::MF_FILE_ACCESSMODE >( AccessMode ),
				static_cast< ::MF_FILE_OPENMODE >( OpenMode ),
				static_cast< ::MF_FILE_FLAGS >( fFlags ),
				reinterpret_cast< ::IMFByteStream** >( &m_p ) );
		}

		//--------------------------------------------------------------------------------
		//Create a byte stream on an IStream
		CByteStream::CByteStream( IStream* pStream )
		{
			_WINQ_FCONTEXT( "CByteStream::CByteStream" );
			m_ulStatus = MediaFoundationHelper.MFCreateMFByteStreamOnStream( 
				reinterpret_cast< ::IStream* >( pStream ),
				reinterpret_cast< ::IMFByteStream** >( &m_p ) );
		}

		
		__QOR_IMPLEMENT_OCLASS_LUID( CPluginManager );

		//--------------------------------------------------------------------------------
		CPluginManager::CPluginManager()
		{
			_WINQ_FCONTEXT( "CPluginManager::CPluginManager" );
			m_ulStatus = MediaFoundationHelper.MFGetPluginControl( 
				reinterpret_cast< ::IMFPluginControl** >( &m_p ) );
		}


		__QOR_IMPLEMENT_OCLASS_LUID( CTopologyLoader );

		//--------------------------------------------------------------------------------
		CTopologyLoader::CTopologyLoader()
		{
			_WINQ_FCONTEXT( "CTopologyLoader::CTopologyLoader" );
			m_ulStatus = m_MFLibrary.MFCreateTopoLoader(
				reinterpret_cast< ::IMFTopoLoader** >( &m_p ) );				
		}


		__QOR_IMPLEMENT_OCLASS_LUID( CMediaEvent );

		//--------------------------------------------------------------------------------
		CMediaEvent::CMediaEvent( unsigned long met, const GUID& guidExtendedType, unsigned long hrStatus, const PROPVARIANT* pvValue )
		{
			_WINQ_FCONTEXT( "CMediaEvent::CMediaEvent" );

			m_ulStatus = MediaFoundationHelper.MFCreateMediaEvent(
				met,
				*( reinterpret_cast< const ::GUID* >( &guidExtendedType ) ),
				hrStatus,
				reinterpret_cast< const ::PROPVARIANT* >( pvValue ),
				reinterpret_cast< ::IMFMediaEvent** >( &m_p ) );
		}


		__QOR_IMPLEMENT_OCLASS_LUID( CSourceResolver );

		//--------------------------------------------------------------------------------
		CSourceResolver::CSourceResolver()
		{
			_WINQ_FCONTEXT( "CSourceResolver::CSourceResolver" );
			m_ulStatus = MediaFoundationHelper.MFCreateSourceResolver(
				reinterpret_cast< ::IMFSourceResolver** >( m_p ) );
		}


		__QOR_IMPLEMENT_OCLASS_LUID( CStandardQualityManager );

		//--------------------------------------------------------------------------------
		CStandardQualityManager::CStandardQualityManager()
		{
			_WINQ_FCONTEXT( "CStandardQualityManager::CStandardQualityManager" );
			m_ulStatus = m_MFLibrary.MFCreateStandardQualityManager(
				reinterpret_cast< ::IMFQualityManager** >( &m_p ) );
		}


		__QOR_IMPLEMENT_OCLASS_LUID( CStreamDescriptor );

		//--------------------------------------------------------------------------------
		CStreamDescriptor::CStreamDescriptor( unsigned long dwStreamIdentifier, unsigned long cMediaTypes, IMFMediaType** apMediaTypes )
		{
			_WINQ_FCONTEXT( "CStreamDescriptor::CStreamDescriptor" );
			m_ulStatus = MediaFoundationHelper.MFCreateStreamDescriptor( dwStreamIdentifier, cMediaTypes, 
				reinterpret_cast< ::IMFMediaType** >( apMediaTypes ),
				reinterpret_cast< ::IMFStreamDescriptor** >( &m_p ) );
		}


		__QOR_IMPLEMENT_OCLASS_LUID( CSystemTimeSource );

		//--------------------------------------------------------------------------------
		CSystemTimeSource::CSystemTimeSource()
		{
			_WINQ_FCONTEXT( "CSystemTimeSource::CSystemTimeSource" );
			m_ulStatus = MediaFoundationHelper.MFCreateSystemTimeSource(
				reinterpret_cast< ::IMFPresentationTimeSource** >( &m_p ) );
		}


		__QOR_IMPLEMENT_OCLASS_LUID( CTranscodeProfile );

		//--------------------------------------------------------------------------------
		CTranscodeProfile::CTranscodeProfile()
		{
			_WINQ_FCONTEXT( "CTranscodeProfile::CTranscodeProfile" );
			m_ulStatus = m_MFLibrary.MFCreateTranscodeProfile( 
				reinterpret_cast< ::IMFTranscodeProfile** >( & m_p ) );
		}


		__QOR_IMPLEMENT_OCLASS_LUID( CTMediaReadWriteBase );

		//--------------------------------------------------------------------------------
		CTMediaReadWriteBase::CTMediaReadWriteBase() : m_ReadWriteLibrary( *( new nsWinQAPI::CMFReadWrite ) )
		{
			_WINQ_FCONTEXT( "CTMediaReadWriteBase::CTMediaReadWriteBase" );
		}

		//--------------------------------------------------------------------------------
		CTMediaReadWriteBase::CTMediaReadWriteBase( const CTMediaReadWriteBase& src ) : m_ReadWriteLibrary( *( new nsWinQAPI::CMFReadWrite ) )
		{
			_WINQ_FCONTEXT( "CTMediaReadWriteBase::CTMediaReadWriteBase" );
			*this = src;
		}

		//--------------------------------------------------------------------------------
		CTMediaReadWriteBase& CTMediaReadWriteBase::operator = ( const CTMediaReadWriteBase& src )
		{
			_WINQ_FCONTEXT( "CTMediaReadWriteBase::operator =" );
			if( &src != this )
			{
			}
			return *this;
		}

		//--------------------------------------------------------------------------------
		CTMediaReadWriteBase::~CTMediaReadWriteBase()
		{
			_WINQ_FCONTEXT( "CTMediaReadWriteBase::~CTMediaReadWriteBase" );
			delete &m_ReadWriteLibrary;
		}

	}//nsMediaFoundation

}//nsWin32

