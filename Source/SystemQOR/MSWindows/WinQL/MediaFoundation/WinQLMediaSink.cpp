//WinQLMediaSink.cpp

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/CodeServices/WinQLPolicy.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQL/MediaFoundation/MediaSink.h"
#include "WinQAPI/MedFoundAPI.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	namespace nsMediaFoundation
	{
		__QOR_IMPLEMENT_OCLASS_LUID( CMediaSink );

		//--------------------------------------------------------------------------------
		CMediaSink::CMediaSink()
		{
			_WINQ_FCONTEXT( "CMediaSink::CMediaSink" );
			m_ulStatus = 0;
		}

		//--------------------------------------------------------------------------------
		CMediaSink::~CMediaSink()
		{
			_WINQ_FCONTEXT( "CMediaSink::~CMediaSink" );
		}

		//--------------------------------------------------------------------------------
		__QOR_IMPLEMENT_OCLASS_LUID( CASFMediaSink );

		//--------------------------------------------------------------------------------
		CASFMediaSink::CASFMediaSink( IMFByteStream* pIByteStream ) : CMediaSink()
		{
			_WINQ_FCONTEXT( "CASFMediaSink::CASFMediaSink" );
			m_ulStatus = m_MFLibrary.MFCreateASFMediaSink(
				reinterpret_cast< ::IMFByteStream* >( pIByteStream ),
				reinterpret_cast< ::IMFMediaSink** >( &m_p ) );
		}

		//--------------------------------------------------------------------------------
		CASFMediaSink::~CASFMediaSink()
		{
			_WINQ_FCONTEXT( "CASFMediaSink::~CASFMediaSink" );
		}

		//--------------------------------------------------------------------------------

		__QOR_IMPLEMENT_OCLASS_LUID( CMP3MediaSink );

		//--------------------------------------------------------------------------------
		CMP3MediaSink::CMP3MediaSink( IMFByteStream* pTargetByteStream ) : CMediaSink()
		{
			_WINQ_FCONTEXT( "CMP3MediaSink::CMP3MediaSink" );
			m_ulStatus = m_MFLibrary.MFCreateMP3MediaSink( 
				reinterpret_cast< ::IMFByteStream* >( pTargetByteStream ),
				reinterpret_cast< ::IMFMediaSink** >( &m_p ) );
		}

		//--------------------------------------------------------------------------------
		CMP3MediaSink::~CMP3MediaSink()
		{
			_WINQ_FCONTEXT( "CMP3MediaSink::~CMP3MediaSink" );
		}

		//--------------------------------------------------------------------------------


		__QOR_IMPLEMENT_OCLASS_LUID( CMP4MediaSink );

		//--------------------------------------------------------------------------------
		CMP4MediaSink::CMP4MediaSink( IMFByteStream* pIByteStream, IMFMediaType* pVideoMediaType, IMFMediaType* pAudioMediaType ) : CMediaSink()
		{
			_WINQ_FCONTEXT( "CMP4MediaSink::CMP4MediaSink" );
			m_ulStatus = m_MFLibrary.MFCreateMPEG4MediaSink( 
				reinterpret_cast< ::IMFByteStream* >( pIByteStream ),
				reinterpret_cast< ::IMFMediaType* >( pVideoMediaType ),
				reinterpret_cast< ::IMFMediaType* >( pAudioMediaType ),
				reinterpret_cast< ::IMFMediaSink** >( &m_p ) );
		}

		//--------------------------------------------------------------------------------
		CMP4MediaSink::~CMP4MediaSink()
		{
			_WINQ_FCONTEXT( "CMP4MediaSink::~CMP4MediaSink" );
		}

		//--------------------------------------------------------------------------------
		__QOR_IMPLEMENT_OCLASS_LUID( C3GPMediaSink );
		//--------------------------------------------------------------------------------
		C3GPMediaSink::C3GPMediaSink( IMFByteStream* pIByteStream, IMFMediaType* pVideoMediaType, IMFMediaType* pAudioMediaType ) : CMediaSink()
		{
			_WINQ_FCONTEXT( "C3GPMediaSink::C3GPMediaSink" );
			m_ulStatus = m_MFLibrary.MFCreate3GPMediaSink( 
				reinterpret_cast< ::IMFByteStream* >( pIByteStream ),
				reinterpret_cast< ::IMFMediaType* >( pVideoMediaType ),
				reinterpret_cast< ::IMFMediaType* >( pAudioMediaType ), 
				reinterpret_cast< ::IMFMediaSink** >( &m_p ) );
		}

		//--------------------------------------------------------------------------------
		C3GPMediaSink::~C3GPMediaSink()
		{
			_WINQ_FCONTEXT( "C3GPMediaSink::~C3GPMediaSink" );
		}

		//--------------------------------------------------------------------------------
		__QOR_IMPLEMENT_OCLASS_LUID( CASFStreamingMediaSink );
		//--------------------------------------------------------------------------------
		CASFStreamingMediaSink::CASFStreamingMediaSink( IMFByteStream* pIByteStream ) : CMediaSink()
		{
			_WINQ_FCONTEXT( "CASFStreamingMediaSink::CASFStreamingMediaSink" );
			m_ulStatus = m_MFLibrary.MFCreateASFStreamingMediaSink(
				reinterpret_cast< ::IMFByteStream* >( pIByteStream ),
				reinterpret_cast< ::IMFMediaSink** >( &m_p ) );
		}

		//--------------------------------------------------------------------------------
		CASFStreamingMediaSink::~CASFStreamingMediaSink()
		{
			_WINQ_FCONTEXT( "CASFStreamingMediaSink::~CASFStreamingMediaSink" );
		}

	}//nsMediaFoundation

}//nsWin32
