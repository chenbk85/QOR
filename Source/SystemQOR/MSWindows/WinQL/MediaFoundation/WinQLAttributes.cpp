//WinQLAttributes.cpp

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/CodeServices/WinQLPolicy.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQL/MediaFoundation/Attributes.h"
#include "WinQAPI/MedFoundAPI.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	namespace nsMediaFoundation
	{
		__QOR_IMPLEMENT_OCLASS_LUID( CAttributes );

		//--------------------------------------------------------------------------------
		CAttributes::CAttributes( Cmp_unsigned__int32 uiInitialSize )
		{
			_WINQ_FCONTEXT( "CAttributes::CAttributes" );
			m_ulStatus = MediaFoundationHelper.MFCreateAttributes( reinterpret_cast< ::IMFAttributes** >( &m_p ), uiInitialSize );
		}

		//--------------------------------------------------------------------------------
		CAttributes::~CAttributes()
		{
			_WINQ_FCONTEXT( "CAttributes::~CAttributes" );
		}

		//--------------------------------------------------------------------------------
		unsigned long CAttributes::InitFromBlob( const Cmp_unsigned__int8* pBuf, unsigned int cbBufSize )
		{
			_WINQ_FCONTEXT( "CAttributes::InitFromBlob" );
			m_ulStatus = MediaFoundationHelper.MFInitAttributesFromBlob( 
				reinterpret_cast< ::IMFAttributes* >( m_p ), pBuf, cbBufSize );
			return m_ulStatus;
		}

		//--------------------------------------------------------------------------------
		unsigned long CAttributes::DeserializeFromStream( unsigned long ulOptions, IStream* pStm )
		{
			_WINQ_FCONTEXT( "CAttributes::DeserializeFromStream" );

			m_ulStatus = MediaFoundationHelper.MFDeserializeAttributesFromStream( 
				reinterpret_cast< ::IMFAttributes* >( m_p ), ulOptions, 
				reinterpret_cast< ::IStream* >( pStm ) );

			return m_ulStatus;
		}
		
		//--------------------------------------------------------------------------------
		double CAttributes::GetDouble( const GUID& guidKey, double fDefault )
		{
			_WINQ_FCONTEXT( "CAttributes::GetDouble" );
			double dResult = fDefault;
			dResult = MediaFoundationHelper.MFGetAttributeDouble( 
				reinterpret_cast< ::IMFAttributes* >( m_p ), 
				*( reinterpret_cast< const ::GUID* >( &guidKey ) ), fDefault );
			return dResult;
		}

		//--------------------------------------------------------------------------------
		unsigned long CAttributes::GetRatio( const GUID& guidKey, Cmp_unsigned__int32* pnNumerator, Cmp_unsigned__int32* punDenominator )
		{
			_WINQ_FCONTEXT( "CAttributes::GetRatio" );
			unsigned long ulResult = MediaFoundationHelper.MFGetAttributeRatio( 
				reinterpret_cast< ::IMFAttributes* >( m_p ), 
				*( reinterpret_cast< const ::GUID* >( &guidKey ) ),
				pnNumerator, punDenominator );

			return ulResult;
		}

		//--------------------------------------------------------------------------------
		unsigned long CAttributes::GetBlobSize( Cmp_unsigned__int32* pcbBufSize )
		{
			_WINQ_FCONTEXT( "CAttributes::GetBlobSize" );
			unsigned long ulResult = MediaFoundationHelper.MFGetAttributesAsBlobSize( 
				reinterpret_cast< ::IMFAttributes* >( m_p ),
				pcbBufSize );
			return ulResult;
		};

		//--------------------------------------------------------------------------------
		unsigned long CAttributes::GetAsBlob( Cmp_unsigned__int8* pBuf, unsigned int cbBufSize )
		{
			_WINQ_FCONTEXT( "CAttributes::GetAsBlob" );
			unsigned long ulResult = MediaFoundationHelper.MFGetAttributesAsBlob( 
				reinterpret_cast< ::IMFAttributes* >( m_p ),
				pBuf, cbBufSize );
			return ulResult;
		}

		//--------------------------------------------------------------------------------
		unsigned long CAttributes::GetSize( const GUID& guidKey, Cmp_unsigned__int32* punWidth, Cmp_unsigned__int32* punHeight )
		{
			_WINQ_FCONTEXT( "CAttributes::GetSize" );
			m_ulStatus = MediaFoundationHelper.MFGetAttributeSize( 
				reinterpret_cast< ::IMFAttributes* >( m_p ), 
				*( reinterpret_cast< const ::GUID* >( &guidKey ) ), 
				punWidth, punHeight );
			return m_ulStatus;
		}

		//--------------------------------------------------------------------------------
		unsigned long CAttributes::SerializeToStream( unsigned long ulOptions, IStream* pStm )
		{
			_WINQ_FCONTEXT( "CAttributes::SerializeToStream" );
			m_ulStatus = MediaFoundationHelper.MFSerializeAttributesToStream(
				reinterpret_cast< ::IMFAttributes* >( m_p ),
				ulOptions,
				reinterpret_cast< ::IStream* >( pStm ) );
			return m_ulStatus;
		}

	}//nsMediaFoundation

}//nsWin32

