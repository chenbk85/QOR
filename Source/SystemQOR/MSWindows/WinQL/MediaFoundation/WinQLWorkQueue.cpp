//WinQLWorkQueue.cpp

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/CodeServices/WinQLPolicy.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQL/MediaFoundation/WorkQueue.h"
#include "WinQAPI/MedfoundAPI.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	namespace nsMediaFoundation
	{

	__QOR_IMPLEMENT_OCLASS_LUID( CWorkQueue );

	//--------------------------------------------------------------------------------
	CWorkQueue::CWorkQueue( unsigned long ulStandardWorkQueueID ) : MediaFoundationHelper( *( new nsWinQAPI::CMFAPI ) )
	, m_bCustom( false ), m_ulWorkQueueID( ulStandardWorkQueueID )
	{
		_WINQ_FCONTEXT( "CWorkQueue::CWorkQueue" );
	}

	//--------------------------------------------------------------------------------
	CWorkQueue::CWorkQueue( bool bMessageLoop ) : MediaFoundationHelper( *( new nsWinQAPI::CMFAPI ) )
	, m_bCustom( true )
	{
		_WINQ_FCONTEXT( "CWorkQueue::CWorkQueue" );
		if( bMessageLoop )
		{
			m_ulStatus = MediaFoundationHelper.MFAllocateWorkQueueEx( ::MF_WINDOW_WORKQUEUE, &m_ulWorkQueueID );
		}
		else
		{
			m_ulStatus = MediaFoundationHelper.MFAllocateWorkQueue( &m_ulWorkQueueID );
		}
	}

	//--------------------------------------------------------------------------------
	CWorkQueue::~CWorkQueue()
	{
		_WINQ_FCONTEXT( "CWorkQueue::~CWorkQueue" );
		if( m_bCustom )
		{
			m_ulStatus = MediaFoundationHelper.MFUnlockWorkQueue( m_ulWorkQueueID );
		}
		delete &MediaFoundationHelper;
	}

	//--------------------------------------------------------------------------------
	unsigned long CWorkQueue::PutWorkItem( IMFAsyncCallback* pCallback, IUnknown* pState )
	{
		_WINQ_FCONTEXT( "CWorkQueue::PutWorkItem" );
		m_ulStatus = MediaFoundationHelper.MFPutWorkItem( m_ulWorkQueueID, reinterpret_cast< ::IMFAsyncCallback* >( pCallback ), reinterpret_cast< ::IUnknown* >( pState ) );
		return m_ulStatus;
	}

	//--------------------------------------------------------------------------------
	unsigned long CWorkQueue::PutWorkItemEx( IMFAsyncResult* pResult )
	{
		_WINQ_FCONTEXT( "CWorkQueue::PutWorkItemEx" );
		m_ulStatus = MediaFoundationHelper.MFPutWorkItemEx( m_ulWorkQueueID, reinterpret_cast< ::IMFAsyncResult* >( pResult ) );
		return m_ulStatus;
	}

	//--------------------------------------------------------------------------------
	unsigned long CWorkQueue::ID( void )
	{
		_WINQ_FCONTEXT( "CWorkQueue::ID" );
		return m_ulWorkQueueID;
	}

	//--------------------------------------------------------------------------------
	CWorkQueueMMCSSRegistration* CWorkQueue::MMCSSRegistration( const wchar_t* wszClass, unsigned long ulTaskId, IUnknown* pDoneState )
	{
		_WINQ_FCONTEXT( "CWorkQueue::MMCSSRegistration" );
		CWorkQueueMMCSSRegistration* pRegistration = new CWorkQueueMMCSSRegistration( *this, wszClass, ulTaskId, pDoneState );
		return pRegistration;
	}

	//--------------------------------------------------------------------------------
	unsigned long CWorkQueue::GetMMCSSClass( wchar_t* pwszClass, unsigned long* pcchClass )
	{
		_WINQ_FCONTEXT( "CWorkQueue::GetMMCSSClass" );
		m_ulStatus = MediaFoundationHelper.MFGetWorkQueueMMCSSClass( m_ulWorkQueueID, pwszClass, pcchClass );
		return m_ulStatus;
	}

	//--------------------------------------------------------------------------------
	unsigned long CWorkQueue::GetMMCSSTaskId( unsigned long* pulTaskId )
	{
		_WINQ_FCONTEXT( "CWorkQueue::GetMMCSSTaskId" );
		m_ulStatus = MediaFoundationHelper.MFGetWorkQueueMMCSSTaskId( m_ulWorkQueueID, pulTaskId );
		return m_ulStatus;
	}

	//--------------------------------------------------------------------------------

	__QOR_IMPLEMENT_OCLASS_LUID( CWorkQueueMMCSSRegistration );

	//--------------------------------------------------------------------------------
	CWorkQueueMMCSSRegistration::CWorkQueueMMCSSRegistration( CWorkQueue& WorkQueue, const wchar_t* wszClass, unsigned long ulTaskId, IUnknown* pDoneState ) : 
		m_MFLibrary( *( new nsWinQAPI::CMFAPI ) ), m_WorkQueue( WorkQueue ), m_wszClass( wszClass ), m_ulTaskId( ulTaskId ), m_pDoneState( pDoneState )
	{
		_WINQ_FCONTEXT( "CWorkQueueMMCSSRegistration::CWorkQueueMMCSSRegistration" );
		Register();
	}

	//--------------------------------------------------------------------------------
	void CWorkQueueMMCSSRegistration::Register( void )
	{
		_WINQ_FCONTEXT( "CWorkQueueMMCSSRegistration::Register" );
		m_bBeginEnd = true;
		IMFAsyncCallback* pCallback = Internal_Interface< IMFAsyncCallback >();

		m_ulStatus = m_MFLibrary.MFBeginRegisterWorkQueueWithMMCSS( 
			m_WorkQueue.ID(), m_wszClass, m_ulTaskId, 
			reinterpret_cast< ::IMFAsyncCallback* >( pCallback ),
			reinterpret_cast< ::IUnknown* >( m_pDoneState ) );
	}

	//--------------------------------------------------------------------------------
	void CWorkQueueMMCSSRegistration::UnRegister( void )
	{
		_WINQ_FCONTEXT( "CWorkQueueMMCSSRegistration::UnRegister" );
		m_bBeginEnd = false;
		IMFAsyncCallback* pCallback = Internal_Interface< IMFAsyncCallback >();

		m_ulStatus = m_MFLibrary.MFBeginUnregisterWorkQueueWithMMCSS( 
			m_WorkQueue.ID(), 
			reinterpret_cast< ::IMFAsyncCallback* >( pCallback ), 
			reinterpret_cast< ::IUnknown* >( m_pDoneState ) );
	}

	//--------------------------------------------------------------------------------
	unsigned long __QCMP_STDCALLCONVENTION CWorkQueueMMCSSRegistration::GetParameters( unsigned long* pdwFlags, unsigned long* pdwQueue )
	{
		_WINQ_FCONTEXT( "CWorkQueueMMCSSRegistration::GetParameters" );
		return 0;
	}

	//--------------------------------------------------------------------------------
	unsigned long __QCMP_STDCALLCONVENTION CWorkQueueMMCSSRegistration::Invoke( IMFAsyncResult* pAsyncResult )
	{
		_WINQ_FCONTEXT( "CWorkQueueMMCSSRegistration::Invoke" );
		if( m_bBeginEnd )
		{
			m_ulStatus = m_MFLibrary.MFEndRegisterWorkQueueWithMMCSS( reinterpret_cast< ::IMFAsyncResult* >( pAsyncResult ), &m_ulTaskId );
			OnRegistration();
		}
		else
		{
			m_ulStatus = m_MFLibrary.MFEndUnregisterWorkQueueWithMMCSS( reinterpret_cast< ::IMFAsyncResult* >( pAsyncResult ) );
			OnUnRegistration();
			delete this;
		}
		return m_ulStatus;
	}


	__QOR_IMPLEMENT_OCLASS_LUID( CWorkQueueLock );

	//--------------------------------------------------------------------------------
	CWorkQueueLock::CWorkQueueLock( CWorkQueue& Queue ) : m_Queue( Queue )
	{
		_WINQ_FCONTEXT( "CWorkQueueLock::CWorkQueueLock" );
		m_Queue.m_ulStatus = m_Queue.MediaFoundationHelper.MFLockWorkQueue( m_Queue.m_ulWorkQueueID );
	}

	//--------------------------------------------------------------------------------
	CWorkQueueLock::~CWorkQueueLock()
	{
		_WINQ_FCONTEXT( "CWorkQueueLock::~CWorkQueueLock" );
		m_Queue.m_ulStatus = m_Queue.MediaFoundationHelper.MFUnlockWorkQueue( m_Queue.m_ulWorkQueueID );
	}


	}//nsMediaFoundation

}//nsWin32

