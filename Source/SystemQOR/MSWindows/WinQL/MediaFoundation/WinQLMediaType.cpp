//WinQLMediaType.cpp

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/CodeServices/WinQLPolicy.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQL/MediaFoundation/MediaType.h"
#include "WinQAPI/MedFoundAPI.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	namespace nsMediaFoundation
	{

		__QOR_IMPLEMENT_OCLASS_LUID( CMediaType );

		//--------------------------------------------------------------------------------
		CMediaType::CMediaType()
		{
			_WINQ_FCONTEXT( "CMediaType::CMediaType" );
			m_ulStatus = MediaFoundationHelper.MFCreateMediaType(
				reinterpret_cast< ::IMFMediaType** >( &m_p ) );
		}

		//--------------------------------------------------------------------------------
		CMediaType::CMediaType( const CMediaType& src )
		{
			_WINQ_FCONTEXT( "CMediaType::CMediaType" );
			//TODO:?
		}

		//--------------------------------------------------------------------------------
		CMediaType::CMediaType( IMFMediaType* pIMediaType )
		{
			_WINQ_FCONTEXT( "CMediaType::CMediaType" );
			m_p = pIMediaType;
		}

		//--------------------------------------------------------------------------------
		//Create a media type from an older Direct Show media type
		CMediaType::CMediaType( GUID& guidRepresentation, void* pvRepresentation )
		{
			_WINQ_FCONTEXT( "CMediaType::CMediaType" );
			m_ulStatus = MediaFoundationHelper.MFCreateMediaTypeFromRepresentation( 
				*( reinterpret_cast< ::GUID* >( &guidRepresentation ) ), 
				pvRepresentation, 
				reinterpret_cast< ::IMFMediaType** >( &m_p ) );
		}

		//--------------------------------------------------------------------------------
		unsigned long CMediaType::InitFromAMMediaType( const AM_MEDIA_TYPE* pAMType )
		{
			_WINQ_FCONTEXT( "CMediaType::InitFromAMMediaType" );
			m_ulStatus = MediaFoundationHelper.MFInitMediaTypeFromAMMediaType(
				reinterpret_cast< ::IMFMediaType* >( m_p ),
				reinterpret_cast< const ::AM_MEDIA_TYPE* >( pAMType ) );
			return m_ulStatus;
		}

		//--------------------------------------------------------------------------------
		//Initializes a media type from a DirectShow MPEG1VIDEOINFO structure.
		unsigned long CMediaType::InitFromMPEG1VideoInfo( const MPEG1VIDEOINFO* pMP1VI, Cmp_unsigned__int32 cbBufSize, const GUID* pSubtype )
		{
			_WINQ_FCONTEXT( "CMediaType::InitFromMPEG1VideoInfo" );
			m_ulStatus = MediaFoundationHelper.MFInitMediaTypeFromMPEG1VideoInfo( 
				reinterpret_cast< ::IMFMediaType* >( m_p ), 
				reinterpret_cast< const ::MPEG1VIDEOINFO* >( pMP1VI ), 
				cbBufSize, reinterpret_cast< const ::GUID* >( pSubtype ) );
			return m_ulStatus;
		}

		//--------------------------------------------------------------------------------
		//Initializes a media type from a DirectShow MPEG2VIDEOINFO structure
		unsigned long CMediaType::InitFromMPEG2VideoInfo( const MPEG2VIDEOINFO* pMP2VI, Cmp_unsigned__int32 cbBufSize, const GUID *pSubtype )
		{
			_WINQ_FCONTEXT( "CMediaType::InitFromMPEG2VideoInfo" );
			m_ulStatus = MediaFoundationHelper.MFInitMediaTypeFromMPEG2VideoInfo( 
				reinterpret_cast< ::IMFMediaType* >( m_p ), 
				reinterpret_cast< const ::MPEG2VIDEOINFO* >( pMP2VI ), 
				cbBufSize, reinterpret_cast< const ::GUID* >( pSubtype ) );
			return m_ulStatus;
		}

		//--------------------------------------------------------------------------------
		//Initializes a media type from a DirectShow VIDEOINFOHEADER structure.
		unsigned long CMediaType::InitFromVideoInfoHeader( const VIDEOINFOHEADER* pVIH, Cmp_unsigned__int32 cbBufSize, const GUID* pSubtype )
		{
			_WINQ_FCONTEXT( "CMediaType::InitFromVideoInfoHeader" );
			m_ulStatus = MediaFoundationHelper.MFInitMediaTypeFromVideoInfoHeader( 
				reinterpret_cast< ::IMFMediaType* >( m_p ),
				reinterpret_cast< const ::VIDEOINFOHEADER* >( pVIH ), 
				cbBufSize, reinterpret_cast< const ::GUID* >( pSubtype ) );
			return m_ulStatus;
		}

		//--------------------------------------------------------------------------------
		//Initializes a media type from a DirectShow VIDEOINFOHEADER2 structure
		unsigned long CMediaType::InitFromVideoInfoHeader2( const VIDEOINFOHEADER2* pVIH2, Cmp_unsigned__int32 cbBufSize, const GUID* pSubtype )
		{
			_WINQ_FCONTEXT( "CMediaType::InitFromVideoInfoHeader2" );
			m_ulStatus = MediaFoundationHelper.MFInitMediaTypeFromVideoInfoHeader2( 
				reinterpret_cast< ::IMFMediaType* >( m_p ),
				reinterpret_cast< const ::VIDEOINFOHEADER2* >( pVIH2 ), 
				cbBufSize, reinterpret_cast< const ::GUID* >( pSubtype ) );
			return m_ulStatus;
		}

		//--------------------------------------------------------------------------------
		//Initializes a media type from a WAVEFORMATEX structure. 
		unsigned long CMediaType::InitFromWaveFormatEx( const WAVEFORMATEX* pWaveFormat, Cmp_unsigned__int32 cbBufSize )
		{
			_WINQ_FCONTEXT( "CMediaType::InitFromWaveFormatEx" );
			m_ulStatus = MediaFoundationHelper.MFInitMediaTypeFromWaveFormatEx( 
				reinterpret_cast< ::IMFMediaType* >( m_p ), 
				reinterpret_cast< const ::WAVEFORMATEX* >( pWaveFormat ), cbBufSize );
			return m_ulStatus;
		}

		//--------------------------------------------------------------------------------
		CMediaType::~CMediaType()
		{
			_WINQ_FCONTEXT( "CMediaType::~CMediaType" );
		}

		//--------------------------------------------------------------------------------

		__QOR_IMPLEMENT_OCLASS_LUID( CVideoMediaType );

		//--------------------------------------------------------------------------------
		//Create video media type from a bitmap header
		CVideoMediaType::CVideoMediaType( const BITMAPINFOHEADER* pbmihBitMapInfoHeader, Cmp_unsigned__int32 cbBitMapInfoHeader, unsigned long dwPixelAspectRatioX, unsigned long dwPixelAspectRatioY, MFVideoInterlaceMode InterlaceMode, Cmp_unsigned_long_long VideoFlags, unsigned long dwFramesPerSecondNumerator, unsigned long dwFramesPerSecondDenominator, unsigned long dwMaxBitRate )
		{
			_WINQ_FCONTEXT( "CVideoMediaType::CVideoMediaType" );
			m_ulStatus = MediaFoundationHelper.MFCreateVideoMediaTypeFromBitMapInfoHeaderEx( 
				reinterpret_cast< const ::BITMAPINFOHEADER* >( pbmihBitMapInfoHeader ),
				cbBitMapInfoHeader, dwPixelAspectRatioX, dwPixelAspectRatioY, 
				static_cast< ::MFVideoInterlaceMode >( InterlaceMode ), 
				VideoFlags, dwFramesPerSecondNumerator, dwFramesPerSecondDenominator, dwMaxBitRate, 
				reinterpret_cast< ::IMFVideoMediaType** >( &m_p ) );
		}

		//--------------------------------------------------------------------------------
		//Create a video media type from a subtype
		CVideoMediaType::CVideoMediaType( const GUID* pAMSubtype )
		{
			_WINQ_FCONTEXT( "CVideoMediaType::CVideoMediaType" );
			m_ulStatus = MediaFoundationHelper.MFCreateVideoMediaTypeFromSubtype( 
				reinterpret_cast< const ::GUID* >( pAMSubtype ), 
				reinterpret_cast< ::IMFVideoMediaType** >( &m_p ) );
		}

		//--------------------------------------------------------------------------------
		//Create a video media type from a video info header
		CVideoMediaType::CVideoMediaType( const KS_VIDEOINFOHEADER* pVideoInfoHeader, unsigned long cbVideoInfoHeader, unsigned long dwPixelAspectRatioX,
			unsigned long dwPixelAspectRatioY, MFVideoInterlaceMode InterlaceMode, Cmp_unsigned_long_long VideoFlags, const GUID* pSubtype )
		{
			_WINQ_FCONTEXT( "CVideoMediaType::CVideoMediaType" );
			m_ulStatus = MediaFoundationHelper.MFCreateVideoMediaTypeFromVideoInfoHeader( 
				reinterpret_cast< const ::KS_VIDEOINFOHEADER* >( pVideoInfoHeader ), 
				cbVideoInfoHeader, dwPixelAspectRatioX, dwPixelAspectRatioY, 
				static_cast< ::MFVideoInterlaceMode >( InterlaceMode ), 
				VideoFlags, reinterpret_cast< const ::GUID* >( pSubtype ), 
				reinterpret_cast< ::IMFVideoMediaType** >( &m_p ) );
		}

		//--------------------------------------------------------------------------------
		//Create a video media type from a video info header2
		CVideoMediaType::CVideoMediaType( const KS_VIDEOINFOHEADER2* pVideoInfoHeader, DWORD cbVideoInfoHeader, QWORD AdditionalVideoFlags, const GUID* pSubtype )
		{
			_WINQ_FCONTEXT( "CVideoMediaType::CVideoMediaType" );
			m_ulStatus = MediaFoundationHelper.MFCreateVideoMediaTypeFromVideoInfoHeader2( 
				reinterpret_cast< const ::KS_VIDEOINFOHEADER2* >( pVideoInfoHeader ), 
				cbVideoInfoHeader, AdditionalVideoFlags, 
				reinterpret_cast< const ::GUID* >( pSubtype ), 
				reinterpret_cast< ::IMFVideoMediaType** >( &m_p ) );
		}

		//--------------------------------------------------------------------------------
		CVideoMediaType::~CVideoMediaType()
		{
			_WINQ_FCONTEXT( "CVideoMediaType::~CVideoMediaType" );
		}

	}//nsMediaFoundation

}//nsWin32
