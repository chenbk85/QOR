//WinQLPresentationDescriptor.cpp

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/CodeServices/WinQLPolicy.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQL/MediaFoundation/PresentationDescriptor.h"
#include "WinQAPI/MedFoundAPI.h"
#include "WinQAPI/OLE32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	namespace nsMediaFoundation
	{
		__QOR_IMPLEMENT_OCLASS_LUID( CPresentationDescriptor );

		__QOR_IMPLEMENT_OCLASS_LUID( CPresentationDescriptorBlob );

		//--------------------------------------------------------------------------------
		CPresentationDescriptor::CPresentationDescriptor( unsigned long cStreamDescriptors, IMFStreamDescriptor** apStreamDescriptors ) : m_MFLibrary( *( new nsWinQAPI::CMF ) )
		{
			_WINQ_FCONTEXT( "CPresentationDescriptor::CPresentationDescriptor" );
			m_ulStatus = MediaFoundationHelper.MFCreatePresentationDescriptor(
				cStreamDescriptors, 
				reinterpret_cast< ::IMFStreamDescriptor** >( apStreamDescriptors ),
				reinterpret_cast< ::IMFPresentationDescriptor** >( &m_p ) );
		}

		//--------------------------------------------------------------------------------
		//Create a presentation descriptor from an ASF profile
		CPresentationDescriptor::CPresentationDescriptor( IMFASFProfile* pIProfile ) : m_MFLibrary( *( new nsWinQAPI::CMF ) )
		{
			_WINQ_FCONTEXT( "CPresentationDescriptor::CPresentationDescriptor" );
			m_ulStatus = m_MFLibrary.MFCreatePresentationDescriptorFromASFProfile(
				reinterpret_cast< ::IMFASFProfile* >( pIProfile ),
				reinterpret_cast< ::IMFPresentationDescriptor** >( &m_p ) );
		}

		//--------------------------------------------------------------------------------
		//Create a presentation descriptor from a byte array
		CPresentationDescriptor::CPresentationDescriptor( unsigned long cbData, unsigned char* pbData ) : m_MFLibrary( *( new nsWinQAPI::CMF ) )
		{
			_WINQ_FCONTEXT( "CPresentationDescriptor::CPresentationDescriptor" );
			m_ulStatus = MediaFoundationHelper.MFDeserializePresentationDescriptor( cbData, pbData, 
				reinterpret_cast< ::IMFPresentationDescriptor** >( &m_p ) );
		}

		//--------------------------------------------------------------------------------
		//Create a presentation descriptor from a Blob
		CPresentationDescriptor::CPresentationDescriptor( CPresentationDescriptorBlob& DescriptorBlob ) : m_MFLibrary( *( new nsWinQAPI::CMF ) )
		{
			_WINQ_FCONTEXT( "CPresentationDescriptor::CPresentationDescriptor" );
			m_ulStatus = MediaFoundationHelper.MFDeserializePresentationDescriptor( DescriptorBlob.Size(), DescriptorBlob.Data(),
				reinterpret_cast< ::IMFPresentationDescriptor** >( &m_p ) );
		}

		//--------------------------------------------------------------------------------
		CPresentationDescriptor::~CPresentationDescriptor()
		{
			_WINQ_FCONTEXT( "CPresentationDescriptor::~CPresentationDescriptor" );
			 delete &m_MFLibrary;
		}

		//--------------------------------------------------------------------------------
		//Does this Presentation descriptor require a protected environment
		bool CPresentationDescriptor::RequireProtectedEnvironment() 
		{
			_WINQ_FCONTEXT( "CPresentationDescriptor::RequireProtectedEnvironment" );
			unsigned long ul = m_MFLibrary.MFRequireProtectedEnvironment(
				reinterpret_cast< ::IMFPresentationDescriptor* >( m_p ) );
			return ul == S_OK ? true : false;
		}

		//--------------------------------------------------------------------------------

		//--------------------------------------------------------------------------------
		CPresentationDescriptorBlob::CPresentationDescriptorBlob( CPresentationDescriptor& PD ) : MediaFoundationHelper( *( new nsWinQAPI::CMFAPI ) ), OLE32Helper( *( new nsWinQAPI::COLE32 ) )
		{
			_WINQ_FCONTEXT( "CPresentationDescriptorBlob::CPresentationDescriptorBlob" );
			m_ulStatus = MediaFoundationHelper.MFSerializePresentationDescriptor(
				reinterpret_cast< ::IMFPresentationDescriptor* >( PD.operator->() ),
				&m_cbData, &m_pbData );				
		}

		//--------------------------------------------------------------------------------
		CPresentationDescriptorBlob::~CPresentationDescriptorBlob()
		{
			_WINQ_FCONTEXT( "CPresentationDescriptorBlob::~CPresentationDescriptorBlob" );
			OLE32Helper.CoTaskMemFree( m_pbData );
		}

		//--------------------------------------------------------------------------------
		unsigned long CPresentationDescriptorBlob::Size( void )
		{
			_WINQ_FCONTEXT( "CPresentationDescriptorBlob::Size" );
			return m_cbData;
		}

		//--------------------------------------------------------------------------------
		unsigned char* CPresentationDescriptorBlob::Data( void )
		{
			_WINQ_FCONTEXT( "CPresentationDescriptorBlob::Data" );
			return m_pbData;
		}

	}//nsMediaFoundation

}//nsWin32

