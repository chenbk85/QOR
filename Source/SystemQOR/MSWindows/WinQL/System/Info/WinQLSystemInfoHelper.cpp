//WinQLSystemInfoHelper.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/System/Info/WinQLSystemInfo.h"
#include "WinQAPI/Kernel32.h"
#include "WinQAPI/User32.h"

//------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CSystemInfoHelper );

	//--------------------------------------------------------------------------------
	CSystemInfoHelper::CSystemInfoHelper()
	{
		_WINQ_FCONTEXT( "CSystemInfoHelper::CSystemInfoHelper" );
	}

	//--------------------------------------------------------------------------------
	CSystemInfoHelper::CSystemInfoHelper( const CSystemInfoHelper& src )
	{
		_WINQ_FCONTEXT( "CSystemInfoHelper::CSystemInfoHelper" );
		*this = src;
	}

	//--------------------------------------------------------------------------------
	CSystemInfoHelper& CSystemInfoHelper::operator = ( const CSystemInfoHelper& src )
	{
		_WINQ_FCONTEXT( "CSystemInfoHelper::operator =" );
		if( &src != this )
		{
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	CSystemInfoHelper::~CSystemInfoHelper()
	{
		_WINQ_FCONTEXT( "CSystemInfoHelper::~CSystemInfoHelper" );
	}

	//--------------------------------------------------------------------------------
	bool CSystemInfoHelper::DnsHostnameToComputerNameT( const TCHAR* Hostname, TCHAR* ComputerName, unsigned long* nSize )
	{
		_WINQ_FCONTEXT( "CSystemInfoHelper::DnsHostnameToComputerName" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::DnsHostnameToComputerName( Hostname, ComputerName, nSize ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned int CSystemInfoHelper::EnumSystemFirmwareTables( unsigned long FirmwareTableProviderSignature, void* pFirmwareTableBuffer, unsigned long BufferSize )
	{
		_WINQ_FCONTEXT( "CSystemInfoHelper::EnumSystemFirmwareTables" );
		UINT uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = CKernel32::EnumSystemFirmwareTables( FirmwareTableProviderSignature, pFirmwareTableBuffer, BufferSize );
		}__QOR_ENDPROTECT
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CSystemInfoHelper::ExpandEnvironmentStringsT( const TCHAR* lpSrc, TCHAR* lpDst, unsigned long nSize )
	{
		_WINQ_FCONTEXT( "CSystemInfoHelper::ExpandEnvironmentStrings" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::ExpandEnvironmentStrings( lpSrc, lpDst, nSize );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	bool CSystemInfoHelper::GetComputerNameT( TCHAR* lpBuffer, unsigned long* lpnSize )
	{
		_WINQ_FCONTEXT( "CSystemInfoHelper::GetComputerName" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetComputerName( lpBuffer, lpnSize ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CSystemInfoHelper::GetComputerNameExT( nsWin32::eComputerNameFormat NameType, TCHAR* lpBuffer, unsigned long* lpnSize )
	{
		_WINQ_FCONTEXT( "CSystemInfoHelper::GetComputerNameEx" );
		bool bResult = FALSE;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetComputerNameEx( static_cast< ::COMPUTER_NAME_FORMAT >( NameType ), lpBuffer, lpnSize ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CSystemInfoHelper::GetFirmwareEnvironmentVariableT( const TCHAR* lpName, const TCHAR* lpGuid, void* pBuffer, unsigned long nSize )
	{
		_WINQ_FCONTEXT( "CSystemInfoHelper::GetFirmwareEnvironmentVariable" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::GetFirmwareEnvironmentVariable( lpName, lpGuid, pBuffer, nSize );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	void CSystemInfoHelper::GetNativeSystemInfo( nsWin32::SystemInfo* lpSystemInfo )
	{			
		_WINQ_FCONTEXT( "CSystemInfoHelper::GetNativeSystemInfo" );
		__QOR_PROTECT
		{
			CKernel32::GetNativeSystemInfo( reinterpret_cast< ::LPSYSTEM_INFO >( lpSystemInfo ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	bool CSystemInfoHelper::GetProductInfo( unsigned long dwOSMajorVersion, unsigned long dwOSMinorVersion, unsigned long dwSpMajorVersion, unsigned long dwSpMinorVersion, unsigned long* pdwReturnedProductType )
	{			
		_WINQ_FCONTEXT( "CSystemInfoHelper::GetProductInfo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetProductInfo( dwOSMajorVersion, dwOSMinorVersion, dwSpMajorVersion, dwSpMinorVersion, pdwReturnedProductType ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	CTString CSystemInfoHelper::GetSystemDirectoryT()
	{
		_WINQ_FCONTEXT( "CSystemInfoHelper::GetSystemDirectory" );
		CTString strSystemDirectory;
		__QOR_PROTECT
		{
			unsigned long uiResult = 0;
			uiResult = CKernel32::GetSystemDirectory( strSystemDirectory.GetBufferSetLength( nsWin32::MaxPath + 1 ), nsWin32::MaxPath );
			strSystemDirectory.ValidateBuffer( static_cast< unsigned short >( uiResult ) );
		}__QOR_ENDPROTECT
		return strSystemDirectory;
	}

	//--------------------------------------------------------------------------------
	unsigned int CSystemInfoHelper::GetSystemFirmwareTable( unsigned long FirmwareTableProviderSignature, unsigned long FirmwareTableID, void* pFirmwareTableBuffer, unsigned long BufferSize )
	{
		_WINQ_FCONTEXT( "CSystemInfoHelper::GetSystemFirmwareTable" );
		UINT uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = CKernel32::GetSystemFirmwareTable( FirmwareTableProviderSignature, FirmwareTableID, pFirmwareTableBuffer, BufferSize ); 
		}__QOR_ENDPROTECT
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	void CSystemInfoHelper::GetSystemInfo( nsWin32::SystemInfo* lpSystemInfo )
	{
		_WINQ_FCONTEXT( "CSystemInfoHelper::GetSystemInfo" );
		__QOR_PROTECT
		{
			CKernel32::GetSystemInfo( reinterpret_cast< ::LPSYSTEM_INFO >( lpSystemInfo ) );
		}__QOR_ENDPROTECT
	}

	//------------------------------------------------------------------------------
	bool CSystemInfoHelper::GetSystemRegistryQuota( unsigned long* pdwQuotaAllowed, unsigned long* pdwQuotaUsed )
	{			
		_WINQ_FCONTEXT( "CSystemInfoHelper::GetSystemRegistryQuota" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetSystemRegistryQuota( pdwQuotaAllowed, pdwQuotaUsed ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	CTString CSystemInfoHelper::GetSystemWindowsDirectoryT()
	{
		_WINQ_FCONTEXT( "CSystemInfoHelper::GetSystemWindowsDirectory" );
		CTString strSystemWindowsDirectory;
		__QOR_PROTECT
		{			
			UINT uiResult = CKernel32::GetSystemWindowsDirectory( strSystemWindowsDirectory.GetBufferSetLength( nsWin32::MaxPath + 1 ), nsWin32::MaxPath );
			strSystemWindowsDirectory.ValidateBuffer( static_cast< unsigned short >( uiResult ) );
		}__QOR_ENDPROTECT
		return strSystemWindowsDirectory;
	}

	//--------------------------------------------------------------------------------
	CTString CSystemInfoHelper::GetSystemWow64DirectoryT()
	{
		_WINQ_FCONTEXT( "CSystemInfoHelper::GetSystemWow64Directory" );
		CTString strSystemWow64Directory;
		__QOR_PROTECT
		{
			UINT uiResult = CKernel32::GetSystemWow64Directory( strSystemWow64Directory.GetBufferSetLength( nsWin32::MaxPath + 1 ), nsWin32::MaxPath );
			strSystemWow64Directory.ValidateBuffer( static_cast< unsigned short >( uiResult ) );
		}__QOR_ENDPROTECT
		return strSystemWow64Directory;
	}

	//--------------------------------------------------------------------------------
	unsigned long CSystemInfoHelper::GetVersion()
	{
		_WINQ_FCONTEXT( "CSystemInfoHelper::GetVersion" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::GetVersion();
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	bool CSystemInfoHelper::GetVersionExT( nsWin32::OSVersionInfo* lpVersionInfo )
	{
		_WINQ_FCONTEXT( "CSystemInfoHelper::GetVersionEx" );
		bool bResult = false;
		__QOR_PROTECT
		{
			lpVersionInfo->dwOSVersionInfoSize = sizeof( ::OSVERSIONINFO );
			bResult = CKernel32::GetVersionEx( reinterpret_cast< ::LPOSVERSIONINFO >( lpVersionInfo ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	CTString CSystemInfoHelper::GetWindowsDirectoryT()
	{
		_WINQ_FCONTEXT( "CSystemInfoHelper::GetWindowsDirectory" );
		CTString strWindowsDirectory;
		__QOR_PROTECT
		{
			unsigned int uiLength = CKernel32::GetWindowsDirectory( nsWin32::MaxPath, strWindowsDirectory.GetBufferSetLength( nsWin32::MaxPath + 1) );
			strWindowsDirectory.ValidateBuffer( static_cast< unsigned short >( uiLength ) );
		}__QOR_ENDPROTECT
		return strWindowsDirectory;
	}

	//--------------------------------------------------------------------------------
	bool CSystemInfoHelper::IsProcessorFeaturePresent( eProcessorFeature ProcessorFeature )
	{
		_WINQ_FCONTEXT( "CSystemInfoHelper::IsProcessorFeaturePresent" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::IsProcessorFeaturePresent( static_cast< unsigned long >( ProcessorFeature ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CSystemInfoHelper::SetComputerNameT( const TCHAR* lpComputerName )
	{
		_WINQ_FCONTEXT( "CSystemInfoHelper::SetComputerName" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetComputerName( lpComputerName ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CSystemInfoHelper::SetComputerNameExT( nsWin32::eComputerNameFormat NameType, const TCHAR* lpBuffer )
	{			
		_WINQ_FCONTEXT( "CSystemInfoHelper::SetComputerNameEx" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetComputerNameEx( static_cast< ::COMPUTER_NAME_FORMAT >( NameType ), lpBuffer ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CSystemInfoHelper::SetFirmwareEnvironmentVariableT( const TCHAR* lpName, const TCHAR* lpGuid, void* pBuffer, unsigned long nSize )
	{
		_WINQ_FCONTEXT( "CSystemInfoHelper::SetFirmwareEnvironmentVariable" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetFirmwareEnvironmentVariable( lpName, lpGuid, pBuffer, nSize ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CSystemInfoHelper::VerifyVersionInfoT( nsWin32::OSVersionInfoEx* lpVersionInfo, unsigned long dwTypeMask, Cmp_unsigned_long_long dwlConditionMask )
	{
		_WINQ_FCONTEXT( "CSystemInfoHelper::VerifyVersionInfo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::VerifyVersionInfo( reinterpret_cast< ::LPOSVERSIONINFOEX >( lpVersionInfo ), dwTypeMask, dwlConditionMask ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	Cmp_unsigned_long_long CSystemInfoHelper::VerSetConditionMask( Cmp_unsigned_long_long dwlConditionMask, unsigned long dwTypeBitMask, unsigned char dwConditionMask )
	{			
		_WINQ_FCONTEXT( "CSystemInfoHelper::VerSetConditionMask" );
		ULONGLONG ullResult = 0;
		__QOR_PROTECT
		{
			ullResult = CKernel32::VerSetConditionMask( dwlConditionMask, dwTypeBitMask, dwConditionMask );
		}__QOR_ENDPROTECT
		return ullResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CSystemInfoHelper::EnumerateLocalComputerNames( int NameType, unsigned long ulFlags, void* lpBuffer, unsigned int nSize )
	{			
		_WINQ_FCONTEXT( "CSystemInfoHelper::EnumerateLocalComputerNames" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::EnumerateLocalComputerNames( NameType, ulFlags, lpBuffer, nSize );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	nsCodeQOR::CTLRef< nsWin32::SystemLogicalProcessorInformation > CSystemInfoHelper::GetLogicalProcessorInformation( unsigned int& uiCount )
	{
		_WINQ_FCONTEXT( "CSystemInfoHelper::GetLogicalProcessorInformation" );
		nsWin32::SystemLogicalProcessorInformation* pBuffer = 0;
		__QOR_PROTECT
		{
			unsigned long ulReturnLength = 0;
			CKernel32::GetLogicalProcessorInformation( 0, &ulReturnLength );
			uiCount = ( ulReturnLength / sizeof( nsWin32::SystemLogicalProcessorInformation ) ) + ( ulReturnLength % sizeof( nsWin32::SystemLogicalProcessorInformation ) ? 1 :0 );
			pBuffer = new nsWin32::SystemLogicalProcessorInformation[ uiCount ];			
			CKernel32::GetLogicalProcessorInformation( reinterpret_cast< ::PSYSTEM_LOGICAL_PROCESSOR_INFORMATION >( pBuffer ), &ulReturnLength ) ? true : false;
		}__QOR_ENDPROTECT
		
		return nsCodeQOR::CTLRef< nsWin32::SystemLogicalProcessorInformation > ( pBuffer, true );
	}

	//--------------------------------------------------------------------------------
	bool CSystemInfoHelper::GetNumaAvailableMemoryNode( unsigned char Node, Cmp_unsigned_long_long* AvailableBytes )
	{
		_WINQ_FCONTEXT( "CSystemInfoHelper::GetNumaAvailableMemoryNode" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetNumaAvailableMemoryNode( Node, AvailableBytes ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CSystemInfoHelper::GetNumaHighestNodeNumber( unsigned long* HighestNodeNumber )
	{
		_WINQ_FCONTEXT( "CSystemInfoHelper::GetNumaHighestNodeNumber" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetNumaHighestNodeNumber( HighestNodeNumber ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CSystemInfoHelper::GetNumaNodeProcessorMask( unsigned char Node, Cmp_unsigned_long_long* ProcessorMask )
	{
		_WINQ_FCONTEXT( "CSystemInfoHelper::GetNumaNodeProcessorMask" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetNumaNodeProcessorMask( Node, ProcessorMask ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CSystemInfoHelper::GetNumaProcessorNode( unsigned char Processor, unsigned char* NodeNumber )
	{
		_WINQ_FCONTEXT( "CSystemInfoHelper::GetNumaProcessorNode" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetNumaProcessorNode( Processor, NodeNumber ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CSystemInfoHelper::GetNumaProximityNode( unsigned long ProximityId, unsigned char* NodeNumber )
	{		
		_WINQ_FCONTEXT( "CSystemInfoHelper::GetNumaProximityNode" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetNumaProximityNode( ProximityId, NodeNumber ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}


	//--System Parameter Helper-------------------------------------------------------

	__QOR_IMPLEMENT_OCLASS_LUID( CSystemParameterHelper );

	//--------------------------------------------------------------------------------
	CSystemParameterHelper::CSystemParameterHelper() : m_User32Library( CUser32::Instance() )
	{
		_WINQ_FCONTEXT( "CSystemParameterHelper::CSystemParameterHelper" );
	}

	//--------------------------------------------------------------------------------
	CSystemParameterHelper::~CSystemParameterHelper()
	{
		_WINQ_FCONTEXT( "CSystemParameterHelper::~CSystemParameterHelper" );
	}

	//--------------------------------------------------------------------------------
	unsigned long CSystemParameterHelper::GetColour( int nIndex )
	{
		_WINQ_FCONTEXT( "CSystemParameterHelper::GetColour" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = m_User32Library.GetSysColor( nIndex );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	int CSystemParameterHelper::GetMetrics( int nIndex )
	{
		_WINQ_FCONTEXT( "CSystemParameterHelper::GetMetrics" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_User32Library.GetSystemMetrics( nIndex );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	bool CSystemParameterHelper::SetColors( int cElements, const int* lpaElements, const unsigned long* lpaRgbValues )
	{
		_WINQ_FCONTEXT( "CSystemParameterHelper::SetColors" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.SetSysColors( cElements, lpaElements, lpaRgbValues ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}
		
	//--------------------------------------------------------------------------------
	bool CSystemParameterHelper::ParametersInfo( unsigned int uiAction, unsigned int uiParam, void* pvParam, unsigned int fWinIni )
	{
		_WINQ_FCONTEXT( "CSystemParameterHelper::ParametersInfo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.SystemParametersInfo( uiAction, uiParam, pvParam, fWinIni ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

}//nsWin32
