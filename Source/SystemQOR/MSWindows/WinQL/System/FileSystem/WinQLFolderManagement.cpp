//WinQLFolderManagement.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/System/FileSystem/WinQLFolderManagement.h"
#include "WinQAPI/Kernel32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CDirectoryHelper );


	//--------------------------------------------------------------------------------
	CDirectoryHelper::CDirectoryHelper()
	{
		_WINQ_FCONTEXT( "CDirectoryHelper::CDirectoryHelper" );
	}

	//--------------------------------------------------------------------------------
	CDirectoryHelper::~CDirectoryHelper()
	{
		_WINQ_FCONTEXT( "CDirectoryHelper::~CDirectoryHelper" );
	}

	//--------------------------------------------------------------------------------
	bool CDirectoryHelper::Create( const TCHAR* lpPathName, nsWin32::LPSECURITY_ATTRIBUTES lpSecurityAttributes )
	{
		_WINQ_FCONTEXT( "CDirectoryHelper::Create" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::CreateDirectory( lpPathName, reinterpret_cast< ::LPSECURITY_ATTRIBUTES >( lpSecurityAttributes ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDirectoryHelper::Create( const TCHAR* lpTemplateDirectory, const TCHAR* lpNewDirectory, nsWin32::LPSECURITY_ATTRIBUTES lpSecurityAttributes )
	{
		_WINQ_FCONTEXT( "CDirectoryHelper::Create" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::CreateDirectoryEx( lpTemplateDirectory, lpNewDirectory, reinterpret_cast< ::LPSECURITY_ATTRIBUTES >( lpSecurityAttributes ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDirectoryHelper::CreateTransacted( const TCHAR* lpTemplateDirectory, const TCHAR* lpNewDirectory, nsWin32::LPSECURITY_ATTRIBUTES lpSecurityAttributes, void* hTransaction )
	{
		_WINQ_FCONTEXT( "CDirectoryHelper::Transacted" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::Instance().CreateDirectoryTransacted( lpTemplateDirectory, lpNewDirectory, reinterpret_cast< ::LPSECURITY_ATTRIBUTES >( lpSecurityAttributes ), hTransaction ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDirectoryHelper::ReadChangesW( void* hDirectory, void* lpBuffer, unsigned long nBufferLength, bool bWatchSubtree, unsigned long dwNotifyFilter, unsigned long* lpBytesReturned, nsWin32::LPOVERLAPPED lpOverlapped, nsWin32::LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine )
	{
		_WINQ_FCONTEXT( "CDirectoryHelper::ReadChangesW" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::ReadDirectoryChangesW( hDirectory, lpBuffer, nBufferLength, bWatchSubtree, dwNotifyFilter, lpBytesReturned, reinterpret_cast< ::LPOVERLAPPED >( lpOverlapped ), reinterpret_cast< ::LPOVERLAPPED_COMPLETION_ROUTINE >( lpCompletionRoutine ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CDirectoryHelper::GetCurrent( CTStringRef strDirectory )
	{
		_WINQ_FCONTEXT( "CDirectoryHelper::GetCurrent" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::GetCurrentDirectory( strDirectory->Allocation() - 1, strDirectory->GetBuffer() );
			if( dwResult == 0 )
			{
				strDirectory->ReleaseBuffer();
				//TODO: Raise last error
			}
			else if( dwResult >= strDirectory->Allocation() )
			{
				strDirectory->ReleaseBuffer();
				strDirectory->GetBufferSetLength( static_cast< unsigned short >( dwResult + 1 ) );
				dwResult = GetCurrent( strDirectory );
				strDirectory->ReleaseBuffer();
			}
			else
			{
				strDirectory->ValidateBuffer( static_cast< unsigned short >( dwResult ) );
			}
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	bool CDirectoryHelper::Remove( const TCHAR* lpPathName )
	{
		_WINQ_FCONTEXT( "CDirectoryHelper::Remove" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::RemoveDirectory( lpPathName ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDirectoryHelper::RemoveTransacted( const TCHAR* lpPathName, void* hTransaction )
	{
		_WINQ_FCONTEXT( "CDirectoryHelper::RemoveTransacted" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::Instance().RemoveDirectoryTransacted( lpPathName, hTransaction ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDirectoryHelper::SetCurrent( const TCHAR* lpPathName )
	{
		_WINQ_FCONTEXT( "CDirectoryHelper::SetCurrent" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetCurrentDirectory( lpPathName ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}



	//--Change Notification-----------------------------------------------------------

	__QOR_IMPLEMENT_OCLASS_LUID( CChangeNotification )

	__QCMP_WARNING_PUSH
	__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: this stored in member's base for later usage." )
	//--------------------------------------------------------------------------------
	CChangeNotification::CChangeNotification( const TCHAR* lpPathName, bool bWatchSubtree, unsigned long dwNotifyFilter ) : m_Handle( this, 0 )
	{
		_WINQ_FCONTEXT( "CChangeNotification::CChangeNotification" );
		__QOR_PROTECT
		{
			m_Handle = CKernel32::FindFirstChangeNotification( lpPathName, bWatchSubtree, dwNotifyFilter );
		}__QOR_ENDPROTECT
	}
	__QCMP_WARNING_POP

	//--------------------------------------------------------------------------------
	CChangeNotification::~CChangeNotification()
	{
		_WINQ_FCONTEXT( "CChangeNotification::~CChangeNotification" );
		__QOR_PROTECT
		{
			CKernel32::FindCloseChangeNotification( m_Handle.Use() );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	bool CChangeNotification::Next()
	{
		_WINQ_FCONTEXT( "CChangeNotification::Next" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::FindNextChangeNotification( m_Handle.Use() ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

}//nsWin32
