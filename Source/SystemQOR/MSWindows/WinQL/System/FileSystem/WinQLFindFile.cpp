//WinQLFindFile.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/ErrorSystem/WinQLErrDomain.h"
#include "WinQL/System/FileSystem/WinQLFindFile.h"
#include "WinQL/System/Devices/WinQLDeviceHandle.h"
#include "WinQAPI/Kernel32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CFindFile );

__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: this stored in member's base for later usage." )
	//--------------------------------------------------------------------------------
	CFindFile::CFindFile( const TCHAR* lpFileName, nsWin32::LPWIN32_FIND_DATA lpFindFileData ) : m_Handle( this, 0 )
	{
		_WINQ_FCONTEXT( "CFind::CFind" );
		__QOR_PROTECT
		{
			m_Handle = CKernel32::FindFirstFile( lpFileName, reinterpret_cast< ::LPWIN32_FIND_DATA >( lpFindFileData ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CFindFile::CFindFile( const TCHAR* lpFileName, nsWin32::FINDEX_INFO_LEVELS fInfoLevelId, void* lpFindFileData, nsWin32::FINDEX_SEARCH_OPS fSearchOp, void* lpSearchFilter, unsigned long dwAdditionalFlags ) : m_Handle( this, 0 )
	{
		_WINQ_FCONTEXT( "CFind::CFind" );
		__QOR_PROTECT
		{
			m_Handle = CKernel32::FindFirstFileEx( lpFileName, static_cast< ::FINDEX_INFO_LEVELS >( fInfoLevelId ), lpFindFileData, static_cast< ::FINDEX_SEARCH_OPS >( fSearchOp ), lpSearchFilter, dwAdditionalFlags );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CFindFile::CFindFile( const wchar_t* lpFileName, unsigned long dwFlags, unsigned long* StringLength, wchar_t* LinkName, void* hTransaction )  : m_Handle( this, 0 )
	{
		_WINQ_FCONTEXT( "CFind::CFind" );
		__QOR_PROTECT
		{
			m_Handle = CKernel32::Instance().FindFirstFileNameTransactedW( lpFileName, dwFlags, StringLength, LinkName, hTransaction );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CFindFile::CFindFile( const wchar_t* lpFileName, unsigned long dwFlags, unsigned long* StringLength, wchar_t* LinkName ) : m_Handle( this, 0 )
	{
		_WINQ_FCONTEXT( "CFind::CFind" );
		__QOR_PROTECT
		{
			m_Handle = CKernel32::Instance().FindFirstFileNameW( lpFileName, dwFlags, StringLength, LinkName );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CFindFile::CFindFile( const TCHAR* lpFileName, nsWin32::FINDEX_INFO_LEVELS fInfoLevelId, void* lpFindFileData, nsWin32::FINDEX_SEARCH_OPS fSearchOp, void* lpSearchFilter, unsigned long dwAdditionalFlags, void* hTransaction ) : m_Handle( this, 0 )
	{
		_WINQ_FCONTEXT( "CFind::CFind" );
		__QOR_PROTECT
		{
			m_Handle = CKernel32::Instance().FindFirstFileTransacted( lpFileName, static_cast< ::FINDEX_INFO_LEVELS >( fInfoLevelId ), lpFindFileData, static_cast< ::FINDEX_SEARCH_OPS >( fSearchOp ), lpSearchFilter, dwAdditionalFlags, hTransaction );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CFindFile::CFindFile( const wchar_t* lpFileName, nsWin32::STREAM_INFO_LEVELS InfoLevel, void* lpFindStreamData, unsigned long dwFlags, void* hTransaction ) : m_Handle( this, 0 )
	{
		_WINQ_FCONTEXT( "CFind::CFind" );
		__QOR_PROTECT
		{
			m_Handle = CKernel32::Instance().FindFirstStreamTransactedW( lpFileName, static_cast< ::STREAM_INFO_LEVELS >( InfoLevel ), lpFindStreamData, dwFlags, hTransaction );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CFindFile::CFindFile( const wchar_t* lpFileName, nsWin32::STREAM_INFO_LEVELS InfoLevel, void* lpFindStreamData, unsigned long dwFlags ) : m_Handle( this, 0 )
	{
		_WINQ_FCONTEXT( "CFind::CFind" );
		__QOR_PROTECT
		{
			m_Handle = CKernel32::Instance().FindFirstStreamW( lpFileName, static_cast< ::STREAM_INFO_LEVELS >( InfoLevel ), lpFindStreamData, dwFlags );
		}__QOR_ENDPROTECT
	}
__QCMP_WARNING_POP

	//--------------------------------------------------------------------------------
	CFindFile::~CFindFile()
	{
		_WINQ_FCONTEXT( "CFind::~CFind" );
		__QOR_PROTECT
		{
			CKernel32::FindClose( m_Handle.Use() );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	bool CFindFile::Next( nsWin32::LPWIN32_FIND_DATA lpFindFileData )
	{
		_WINQ_FCONTEXT( "CFind::Next" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::FindNextFile( m_Handle.Use(), reinterpret_cast< ::LPWIN32_FIND_DATA >( lpFindFileData ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CFindFile::Next( unsigned long* StringLength, wchar_t* LinkName )
	{
		_WINQ_FCONTEXT( "CFind::Next" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::Instance().FindNextFileNameW( m_Handle.Use(), StringLength, LinkName ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CFindFile::Next( void* lpFindStreamData )
	{
		_WINQ_FCONTEXT( "CFind::Next" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::Instance().FindNextStreamW( m_Handle.Use(), lpFindStreamData ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

}//nsWin32
