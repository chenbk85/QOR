//WinQLRegistry.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/System/Registry/WinQLRegistry.h"
#include "WinQAPI/User32.h"
#include "WinQAPI/AdvAPI32.h"

#ifdef	__MINGW32__
#	ifdef UNICODE
#		define RegOpenKeyTransacted RegOpenKeyTransactedW
#		define RegCreateKeyTransacted RegCreateKeyTransactedW
#		define RegLoadAppKey RegLoadAppKeyW
#		define RegCopyTree RegCopyTreeW
#		define RegDeleteKeyTransacted RegDeleteKeyTransactedW
#		define RegDeleteKeyValue RegDeleteKeyValueW
#		define RegDeleteTree RegDeleteTreeW
#		define RegGetValue RegGetValueW
#		define RegLoadMUIString RegLoadMUIStringW
#		define RegSaveKeyEx RegSaveKeyExW
#		define RegSetKeyValue RegSetKeyValueW
#	else
#		define RegOpenKeyTransacted RegOpenKeyTransactedA
#		define RegCreateKeyTransacted RegCreateKeyTransactedA
#		define RegLoadAppKey RegLoadAppKeyA
#		define RegCopyTree RegCopyTreeA
#		define RegDeleteKeyTransacted RegDeleteKeyTransactedA
#		define RegDeleteKeyValue RegDeleteKeyValueA
#		define RegDeleteTree RegDeleteTreeA
#		define RegGetValue RegGetValueA
#		define RegLoadMUIString RegLoadMUIStringA
#		define RegSaveKeyEx RegSaveKeyExA
#		define RegSetKeyValue RegSetKeyValueA
#	endif
#endif//__MINGW32__

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;


	__QOR_IMPLEMENT_OCLASS_LUID( CRegKey );

	//--------------------------------------------------------------------------------
	CRegKey::CRegKey( KeyHandle hKey ) : m_hKey( hKey ), m_AdvAPI32Library( CAdvAPI32::Instance() )
	{
        _WINQ_FCONTEXT( "CRegKey::CRegKey" );
	}

	//--------------------------------------------------------------------------------
	CRegKey::CRegKey( unsigned long samDesired ) : m_AdvAPI32Library( CAdvAPI32::Instance() )
	{
        _WINQ_FCONTEXT( "CRegKey::CRegKey" );
		m_AdvAPI32Library.RegOpenCurrentUser( samDesired, reinterpret_cast< ::PHKEY >( &m_hKey ) );
	}

	//--------------------------------------------------------------------------------
	CRegKey::CRegKey( const TCHAR* lpMachineName, KeyHandle hKey ) : m_AdvAPI32Library( CAdvAPI32::Instance() )
	{
        _WINQ_FCONTEXT( "CRegKey::CRegKey" );
		m_AdvAPI32Library.RegConnectRegistry( lpMachineName, reinterpret_cast< ::HKEY >( hKey ), reinterpret_cast< ::PHKEY >( &m_hKey ) );
	}

	//--------------------------------------------------------------------------------
	CRegKey::CRegKey( const CRegKey& Parent, const TCHAR* lpSubKey, bool bCreate ) : m_AdvAPI32Library( CAdvAPI32::Instance() )
	{
        _WINQ_FCONTEXT( "CRegKey::CRegKey" );
		if( !bCreate )
		{
			m_AdvAPI32Library.RegOpenKey( reinterpret_cast< ::HKEY >( Parent.m_hKey ), lpSubKey, reinterpret_cast< ::PHKEY >( &m_hKey ) );
		}
		else
		{
			m_AdvAPI32Library.RegCreateKey( reinterpret_cast< ::HKEY >( Parent.m_hKey ), lpSubKey, reinterpret_cast< ::PHKEY >( &m_hKey ) );
		}
	}		

	//--------------------------------------------------------------------------------
	CRegKey::CRegKey( const CRegKey& Parent, const TCHAR* lpSubKey, unsigned long ulOptions, unsigned long samDesired ) : m_AdvAPI32Library( CAdvAPI32::Instance() )
	{
        _WINQ_FCONTEXT( "CRegKey::CRegKey" );
		m_AdvAPI32Library.RegOpenKeyEx( reinterpret_cast< ::HKEY >( Parent.m_hKey ), lpSubKey, ulOptions, samDesired, reinterpret_cast< ::PHKEY >( &m_hKey ) );
	}

	//--------------------------------------------------------------------------------
	CRegKey::CRegKey( const CRegKey& Parent, const TCHAR* lpSubKey, unsigned long Reserved, 
		TCHAR* lpClass, unsigned long dwOptions, unsigned long samDesired, 
		LPSECURITY_ATTRIBUTES lpSecurityAttributes, unsigned long* lpdwDisposition ) : m_AdvAPI32Library( CAdvAPI32::Instance() )
	{
        _WINQ_FCONTEXT( "CRegKey::CRegKey" );
		m_AdvAPI32Library.RegCreateKeyEx( reinterpret_cast< ::HKEY >( Parent.m_hKey ), lpSubKey, Reserved, lpClass, dwOptions, 
			samDesired, reinterpret_cast< ::LPSECURITY_ATTRIBUTES >( lpSecurityAttributes ), reinterpret_cast< ::PHKEY >( &m_hKey ), lpdwDisposition );
	}

	//--------------------------------------------------------------------------------
	CRegKey::CRegKey( const CRegKey& Parent, const TCHAR* lpSubKey, unsigned long ulOptions, unsigned long samDesired, void* hTransaction, void* pExtendedParameter ) : m_AdvAPI32Library( CAdvAPI32::Instance() ) 
	{
        _WINQ_FCONTEXT( "CRegKey::CRegKey" );
		m_AdvAPI32Library.RegOpenKeyTransacted( reinterpret_cast< ::HKEY >( Parent.m_hKey ), lpSubKey, ulOptions, samDesired, 
			reinterpret_cast< ::PHKEY >( &m_hKey ), hTransaction, pExtendedParameter );
	}

	//--------------------------------------------------------------------------------
	CRegKey::CRegKey( const CRegKey& Parent, const TCHAR* lpSubKey, unsigned long Reserved, TCHAR* lpClass,
		unsigned long dwOptions, unsigned long samDesired, const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
		unsigned long* lpdwDisposition, void* hTransaction, void* pExtendedParemeter ) : m_AdvAPI32Library( CAdvAPI32::Instance() )
	{
        _WINQ_FCONTEXT( "CRegKey::CRegKey" );
		m_AdvAPI32Library.RegCreateKeyTransacted( reinterpret_cast< ::HKEY >( Parent.m_hKey ), lpSubKey, Reserved, lpClass, dwOptions,
			samDesired, reinterpret_cast< ::LPSECURITY_ATTRIBUTES >( lpSecurityAttributes ), reinterpret_cast< ::PHKEY >( &m_hKey ), lpdwDisposition, hTransaction, pExtendedParemeter );
	}

	//--------------------------------------------------------------------------------
	CRegKey::CRegKey( const TCHAR* lpFile, unsigned long samDesired, unsigned long dwOptions ) : m_AdvAPI32Library( CAdvAPI32::Instance() )
	{
        _WINQ_FCONTEXT( "CRegKey::CRegKey" );
		m_AdvAPI32Library.RegLoadAppKey( lpFile, reinterpret_cast< ::PHKEY >( &m_hKey ), samDesired, dwOptions, 0 );
	}

    //--------------------------------------------------------------------------------
    CRegKey::CRegKey( void* hToken, unsigned long dwOptions, unsigned long samDesired ) : m_AdvAPI32Library( CAdvAPI32::Instance() )
    {
        _WINQ_FCONTEXT( "CRegKey::CRegKey" );
        m_AdvAPI32Library.RegOpenUserClassesRoot( hToken, dwOptions, samDesired, reinterpret_cast< ::PHKEY >( &m_hKey ) );
    }

	//--------------------------------------------------------------------------------
	CRegKey::~CRegKey()
	{
        _WINQ_FCONTEXT( "CRegKey::~CRegKey" );
		Close();
	}

    //--------------------------------------------------------------------------------
    long CRegKey::OverridePredef( KeyHandle hNewHKey )
    {
        _WINQ_FCONTEXT( "CRegKey::OverridePredef" );
        long lResult = 0;
        lResult = m_AdvAPI32Library.RegOverridePredefKey( reinterpret_cast< ::HKEY >( m_hKey ), reinterpret_cast< ::HKEY >( hNewHKey ) );
        return lResult;
    }

	//--------------------------------------------------------------------------------
	long CRegKey::Close()
	{
        _WINQ_FCONTEXT( "CRegKey::Close" );
		long lResult = 0;
		lResult = m_AdvAPI32Library.RegCloseKey( reinterpret_cast< ::HKEY >( m_hKey ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CRegKey::CopyTree( const TCHAR* lpSubKey, KeyHandle hKeyDest )
	{
        _WINQ_FCONTEXT( "CRegKey::CopyTree" );
		long lResult = 0;
		lResult = m_AdvAPI32Library.RegCopyTree( reinterpret_cast< ::HKEY >( m_hKey ), lpSubKey, reinterpret_cast< ::HKEY >( hKeyDest ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CRegKey::Delete( const TCHAR* lpSubKey, unsigned long samDesired, void* hTransaction )
	{
        _WINQ_FCONTEXT( "CRegKey::Delete" );
		long lResult = 0;
		if( samDesired == 0 )
		{
			lResult = m_AdvAPI32Library.RegDeleteKey( reinterpret_cast< ::HKEY >( m_hKey ), lpSubKey );
		}
		else if( hTransaction == 0 )
		{
			lResult = m_AdvAPI32Library.RegDeleteKeyEx( reinterpret_cast< ::HKEY >( m_hKey ), lpSubKey, samDesired, 0 );
		}
		else
		{
			lResult = m_AdvAPI32Library.RegDeleteKeyTransacted( reinterpret_cast< ::HKEY >( m_hKey ), lpSubKey, samDesired, 0, 
			hTransaction, 0 );
		}
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CRegKey::DeleteKeyValue( const TCHAR* lpSubKey, const TCHAR* lpValueName )
	{
        _WINQ_FCONTEXT( "CRegKey::DeleteKeyValue" );
		long lResult = 0;
		lResult = m_AdvAPI32Library.RegDeleteKeyValue( reinterpret_cast< ::HKEY >( m_hKey ), lpSubKey, lpValueName );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CRegKey::DeleteTree( const TCHAR* lpSubKey )
	{
        _WINQ_FCONTEXT( "CRegKey::DeleteTree" );
		long lResult = 0;
		lResult = m_AdvAPI32Library.RegDeleteTree( reinterpret_cast< ::HKEY >( m_hKey ), lpSubKey );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CRegKey::DeleteValue( const TCHAR* lpValueName )
	{
        _WINQ_FCONTEXT( "CRegKey::DeleteValue" );
		long lResult = 0;
		lResult = m_AdvAPI32Library.RegDeleteValue( reinterpret_cast< ::HKEY >( m_hKey ), lpValueName );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CRegKey::DisableReflection()
	{
        _WINQ_FCONTEXT( "CRegKey::DisableReflection" );
		long lResult = 0;
		lResult = m_AdvAPI32Library.RegDisableReflectionKey( reinterpret_cast< ::HKEY >( m_hKey ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CRegKey::EnableReflection()
	{
        _WINQ_FCONTEXT( "CRegKey::EnableReflection" );
		long lResult = 0;
		lResult = m_AdvAPI32Library.RegEnableReflectionKey( reinterpret_cast< ::HKEY >( m_hKey ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CRegKey::EnumKey( unsigned long dwIndex, TCHAR* lpName, unsigned long cchName )
	{
        _WINQ_FCONTEXT( "CRegKey::EnumKey" );
		long lResult = 0;
		lResult = m_AdvAPI32Library.RegEnumKey( reinterpret_cast< ::HKEY >( m_hKey ), dwIndex, lpName, cchName );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CRegKey::EnumKeyEx( unsigned long dwIndex, TCHAR* lpName, unsigned long* lpcName, TCHAR* lpClass, unsigned long* lpcClass, 
		PFILETIME lpftLastWriteTime )
	{
        _WINQ_FCONTEXT( "CRegKey::EnumKeyEx" );
		long lResult = 0;
		lResult = m_AdvAPI32Library.RegEnumKeyEx( reinterpret_cast< ::HKEY >( m_hKey ), dwIndex, lpName, lpcName, 0, lpClass,
			lpcClass, reinterpret_cast< ::PFILETIME >( lpftLastWriteTime ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CRegKey::EnumValue( unsigned long dwIndex, TCHAR* lpValueName, unsigned long* lpcchValueName, unsigned long* lpType, 
		unsigned char* lpData, unsigned long* lpcbData )
	{
        _WINQ_FCONTEXT( "CRegKey::EnumValue" );
		long lResult = 0;
		lResult = m_AdvAPI32Library.RegEnumValue( reinterpret_cast< ::HKEY >( m_hKey ), dwIndex, lpValueName, lpcchValueName, 0, lpType,
			lpData, lpcbData );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CRegKey::Flush( void )
	{
        _WINQ_FCONTEXT( "CRegKey::Flush" );
		long lResult = 0;
		lResult = m_AdvAPI32Library.RegFlushKey( reinterpret_cast< ::HKEY >( m_hKey ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CRegKey::GetValue( const TCHAR* lpSubKey, const TCHAR* lpValue, unsigned long dwFlags, unsigned long* pdwType, void* pvData, 
		unsigned long* pcbData )
	{
        _WINQ_FCONTEXT( "CRegKey::GetValue" );
		long lResult = 0;
		lResult = m_AdvAPI32Library.RegGetValue( reinterpret_cast< ::HKEY >( m_hKey ), lpSubKey, lpValue, dwFlags, pdwType, pvData, 
			pcbData );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CRegKey::LoadKey( const TCHAR* lpSubKey, const TCHAR* lpFile )
	{
        _WINQ_FCONTEXT( "CRegKey::LoadKey" );
		long lResult = 0;
		lResult = m_AdvAPI32Library.RegLoadKey( reinterpret_cast< ::HKEY >( m_hKey ), lpSubKey, lpFile );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CRegKey::LoadMUIString( const TCHAR* pszValue, TCHAR* pszOutBuf, unsigned long cbOutBuf, unsigned long* pcbData, unsigned long Flags,
		const TCHAR* pszDirectory )
	{
        _WINQ_FCONTEXT( "CRegKey::LoadMUIString" );
		long lResult = 0;
		lResult = m_AdvAPI32Library.RegLoadMUIString( reinterpret_cast< ::HKEY >( m_hKey ), pszValue, pszOutBuf, cbOutBuf, pcbData,
			Flags, pszDirectory );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CRegKey::NotifyChange( bool bWatchSubtree, unsigned long dwNotifyFilter, void* hEvent, bool fAsynchronous )
	{
        _WINQ_FCONTEXT( "CRegKey::NotifyChange" );
		long lResult = 0;
		lResult = m_AdvAPI32Library.RegNotifyChangeKeyValue( reinterpret_cast< ::HKEY >( m_hKey ), bWatchSubtree, dwNotifyFilter,
			hEvent, fAsynchronous );
		return lResult;
	}

    //--------------------------------------------------------------------------------
    long CRegKey::QueryInfo( TCHAR* lpClass, unsigned long* lpcClass, unsigned long* lpReserved, unsigned long* lpcSubKeys, 
        unsigned long* lpcMaxSubKeyLen, unsigned long* lpcMaxClassLen, unsigned long*  lpcValues, unsigned long* lpcMaxValueNameLen, 
        unsigned long* lpcMaxValueLen, unsigned long* lpcbSecurityDescriptor, PFILETIME lpftLastWriteTime )
    {
        _WINQ_FCONTEXT( "CRegKey::QueryInfo" );
        long lResult = 0;
        lResult = m_AdvAPI32Library.RegQueryInfoKey( reinterpret_cast< ::HKEY >( m_hKey ), lpClass, lpcClass, lpReserved, lpcSubKeys, 
            lpcMaxSubKeyLen, lpcMaxClassLen, lpcValues, lpcMaxValueNameLen, lpcMaxValueLen, 
            lpcbSecurityDescriptor, reinterpret_cast< ::PFILETIME >( lpftLastWriteTime ) );
        return lResult;
    }

    //--------------------------------------------------------------------------------
    long CRegKey::QueryMultipleValues( ValEnt* val_list, unsigned long num_vals, TCHAR* lpValueBuf, unsigned long* ldwTotsize )
    {
        _WINQ_FCONTEXT( "CRegKey::QueryMultipleValues" );
        long lResult = 0;
        lResult = m_AdvAPI32Library.RegQueryMultipleValues( reinterpret_cast< ::HKEY >( m_hKey ), reinterpret_cast< ::PVALENT >( val_list ), num_vals, lpValueBuf, ldwTotsize );
        return lResult;
    }

    //--------------------------------------------------------------------------------
    long CRegKey::QueryReflection( int* bIsReflectionDisabled )
    {
        _WINQ_FCONTEXT( "CRegKey::QueryReflection" );
        long lResult = 0;
        lResult = m_AdvAPI32Library.RegQueryReflectionKey( reinterpret_cast< ::HKEY >( m_hKey ), bIsReflectionDisabled );
        return lResult;
    }

    //--------------------------------------------------------------------------------
	long CRegKey::QueryValue( const TCHAR* lpSubKey, TCHAR* lpValue, long* lpcbValue )
	{
        _WINQ_FCONTEXT( "CRegKey::QueryValue" );
		long lResult = 0;
		lResult = m_AdvAPI32Library.RegQueryValue( reinterpret_cast< ::HKEY >( m_hKey ), lpSubKey, lpValue, lpcbValue );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CRegKey::QueryValueEx( const TCHAR* lpValueName, unsigned long* lpType, unsigned char* lpData, unsigned long* lpcbData )
	{
        _WINQ_FCONTEXT( "CRegKey::QueryValueEx" );
		long lResult = 0;
		lResult = m_AdvAPI32Library.RegQueryValueEx( reinterpret_cast< ::HKEY >( m_hKey ), lpValueName, 0, lpType, lpData, lpcbData );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CRegKey::Replace( const TCHAR* lpSubKey, const TCHAR* lpNewFile, const TCHAR* lpOldFile )
	{
        _WINQ_FCONTEXT( "CRegKey::Replace" );
		long lResult = 0;
		lResult = m_AdvAPI32Library.RegReplaceKey( reinterpret_cast< ::HKEY >( m_hKey ), lpSubKey, lpNewFile, lpOldFile );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CRegKey::Restore( const TCHAR* lpFile, unsigned long dwFlags )
	{
        _WINQ_FCONTEXT( "CRegKey::Restore" );
		long lResult = 0;
		lResult = m_AdvAPI32Library.RegRestoreKey( reinterpret_cast< ::HKEY >( m_hKey ), lpFile, dwFlags );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CRegKey::Save( const TCHAR* lpFile, LPSECURITY_ATTRIBUTES lpSecurityAttributes, unsigned long Flags )
	{
        _WINQ_FCONTEXT( "CRegKey::Save" );
		long lResult = 0;
		if( Flags == 0 )
		{
			lResult = m_AdvAPI32Library.RegSaveKey( reinterpret_cast< ::HKEY >( m_hKey ), lpFile, reinterpret_cast< ::LPSECURITY_ATTRIBUTES >( lpSecurityAttributes ) );
		}
		else
		{
			lResult = m_AdvAPI32Library.RegSaveKeyEx( reinterpret_cast< ::HKEY >( m_hKey ), lpFile, reinterpret_cast< ::LPSECURITY_ATTRIBUTES >( lpSecurityAttributes ), Flags );
		}
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CRegKey::SetKeyValue( const TCHAR* lpSubKey, const TCHAR* lpValueName, unsigned long dwType, const void* lpData, unsigned long cbData )
	{
        _WINQ_FCONTEXT( "CRegKey::SetKeyValue" );
		long lResult = 0;
		lResult = m_AdvAPI32Library.RegSetKeyValue( reinterpret_cast< ::HKEY >( m_hKey ), lpSubKey, lpValueName, dwType, lpData, cbData );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CRegKey::SetValue( const TCHAR* lpSubKey, unsigned long dwType, const TCHAR* lpData, unsigned long cbData )
	{
        _WINQ_FCONTEXT( "CRegKey::SetValue" );
		long lResult = 0;
		lResult = m_AdvAPI32Library.RegSetValue( reinterpret_cast< ::HKEY >( m_hKey ), lpSubKey, dwType, lpData, cbData );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CRegKey::SetValueEx( const TCHAR* lpValueName, unsigned long dwType, const unsigned char* lpData, unsigned long cbData )
	{
        _WINQ_FCONTEXT( "CRegKey::SetValueEx" );
		long lResult = 0;
		lResult = m_AdvAPI32Library.RegSetValueEx( reinterpret_cast< ::HKEY >( m_hKey ), lpValueName, 0, dwType, lpData, cbData );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CRegKey::UnLoadKey( const TCHAR* lpSubKey )
	{
        _WINQ_FCONTEXT( "CRegKey::UnLoadKey" );
		long lResult = 0;
		lResult = m_AdvAPI32Library.RegUnLoadKey( reinterpret_cast< ::HKEY >( m_hKey ), lpSubKey );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	CRegistry::CRegistry()
	{
	}

	//--------------------------------------------------------------------------------
	CRegistry::~CRegistry()
	{
	}

	//--------------------------------------------------------------------------------
	CRegistry::CProfile::CProfile( const TCHAR* lpStrAppName )
	{
        m_strAppName = lpStrAppName;
	}

	//--------------------------------------------------------------------------------
	CRegistry::CProfile::~CProfile()
	{
	}

	//--------------------------------------------------------------------------------
	unsigned int CRegistry::CProfile::GetInt( const TCHAR* lpKeyName, int nDefault )
	{
		unsigned int uiResult = m_Win32ProfileHelper.GetProfileIntT( m_strAppName, lpKeyName, nDefault );
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CRegistry::CProfile::GetSection( TCHAR* lpReturnedString, unsigned long nSize )
	{
		unsigned long dwResult = m_Win32ProfileHelper.GetProfileSectionT( m_strAppName, lpReturnedString, nSize );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	int CRegistry::CProfile::WriteSection( const TCHAR* lpString )
	{
		int bResult = m_Win32ProfileHelper.WriteProfileSectionT( m_strAppName, lpString );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CRegistry::CProfile::GetString( const TCHAR* lpKeyName, const TCHAR* lpDefault, TCHAR* lpReturnedString, unsigned long nSize )
	{
		unsigned long dwResult = m_Win32ProfileHelper.GetProfileStringT( m_strAppName, lpKeyName, lpDefault, lpReturnedString, nSize );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	int CRegistry::CProfile::WriteString( const TCHAR* lpKeyName, const TCHAR* lpString )
	{
		int bResult = m_Win32ProfileHelper.WriteProfileStringT( m_strAppName, lpKeyName, lpString );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	CRegistry::CPrivateProfile::CPrivateProfile( const TCHAR* szFile, const TCHAR* lpAppName ) : CProfile( lpAppName )
	{
		m_szFileName = szFile;
	}

	//--------------------------------------------------------------------------------
	CRegistry::CPrivateProfile::~CPrivateProfile()
	{
	}

	//--------------------------------------------------------------------------------
	unsigned int CRegistry::CPrivateProfile::GetInt( const TCHAR* lpAppName, const TCHAR* lpKeyName, int nDefault )
	{
		unsigned int uiResult = m_Win32ProfileHelper.GetPrivateProfileIntT( lpAppName, lpKeyName, nDefault, m_szFileName );
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CRegistry::CPrivateProfile::GetSection( const TCHAR* lpAppName, TCHAR* lpReturnedString, unsigned long nSize )
	{
		unsigned long dwResult = m_Win32ProfileHelper.GetPrivateProfileSectionT( lpAppName, lpReturnedString, nSize, m_szFileName );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	int CRegistry::CPrivateProfile::WriteSection( const TCHAR* lpAppName, const TCHAR* lpString )
	{
		int bResult = m_Win32ProfileHelper.WritePrivateProfileSectionT( lpAppName, lpString, m_szFileName );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CRegistry::CPrivateProfile::GetSectionNames( TCHAR* lpszReturnBuffer, unsigned long nSize )
	{
		unsigned long dwResult = m_Win32ProfileHelper.GetPrivateProfileSectionNamesT( lpszReturnBuffer, nSize, m_szFileName );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CRegistry::CPrivateProfile::GetString( const TCHAR* lpAppName, const TCHAR* lpKeyName, const TCHAR* lpDefault, TCHAR* lpReturnedString, unsigned long nSize )
	{
		unsigned long dwResult = m_Win32ProfileHelper.GetPrivateProfileStringT( lpAppName, lpKeyName, lpDefault, lpReturnedString, nSize, m_szFileName );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	int CRegistry::CPrivateProfile::WriteString( const TCHAR* lpAppName, const TCHAR* lpKeyName, const TCHAR* lpString )
	{
		int bResult = m_Win32ProfileHelper.WritePrivateProfileStringT( lpAppName, lpKeyName, lpString, m_szFileName );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CRegistry::CPrivateProfile::GetStruct( const TCHAR* lpszSection, const TCHAR* lpszKey, void* lpStruct, unsigned int uSizeStruct )
	{
		int bResult = m_Win32ProfileHelper.GetPrivateProfileStructT( lpszSection, lpszKey, lpStruct, uSizeStruct, m_szFileName );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CRegistry::CPrivateProfile::WriteStruct( const TCHAR* lpszSection, const TCHAR* lpszKey, void* lpStruct, unsigned int uSizeStruct )
	{
		int bResult = m_Win32ProfileHelper.WritePrivateProfileStructT( lpszSection, lpszKey, lpStruct, uSizeStruct, m_szFileName );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	CRegistry::CPrivateProfileRef CRegistry::GetPrivateProfile( const TCHAR* szFile, const TCHAR* szApp )
	{
		CPrivateProfileRef RefProfile( new CPrivateProfile( szFile, szApp ), true );
		return RefProfile;
	}

    //--------------------------------------------------------------------------------
    CRegistry::CProfileRef CRegistry::GetProfile( const TCHAR* strApp )
    {
        CProfileRef RefProfile( new CProfile( strApp ), true );
        return RefProfile;
    }

    //--------------------------------------------------------------------------------
    CRegistry::CKeyRef CRegistry::LocalMachine( void )
    {
        CKeyRef HKLM( new CRegKey( nsWin32::HKey_Local_Machine ), true );
        return HKLM;
    }

    //--------------------------------------------------------------------------------
    CRegistry::CKeyRef CRegistry::Classes( void )
    {
        CKeyRef HKCR( new CRegKey( nsWin32::HKey_Classes_Root ), true );
        return HKCR;
    }

    //--------------------------------------------------------------------------------
    CRegistry::CKeyRef CRegistry::CurrentConfig( void )
    {
        CKeyRef HKCC( new CRegKey( nsWin32::HKey_Current_Config ), true );
        return HKCC;
    }

    //--------------------------------------------------------------------------------
    CRegistry::CKeyRef CRegistry::CurrentUser( void )
    {
        CKeyRef HKCU( new CRegKey( nsWin32::HKey_Current_User ), true );
        return HKCU;
    }

    //--------------------------------------------------------------------------------
#if		( _WIN32_WINNT > 0x0600 )
    CRegistry::CKeyRef CRegistry::CurrentUserLocalSettings( void )
    {
        CKeyRef HKCULS( new CRegKey( nsWin32::HKey_Current_User_Local_Settings ), true );
        return HKCULS;
    }
#endif//( _WIN32_WINNT > 0x0600 )

    //--------------------------------------------------------------------------------
    CRegistry::CKeyRef CRegistry::PerformanceData( void )
    {
		CKeyRef HKPD( new CRegKey( nsWin32::HKey_Performance_Data ), true );
        return HKPD;
    }

    //--------------------------------------------------------------------------------
    CRegistry::CKeyRef CRegistry::PerformanceNLSText( void )
    {
		CKeyRef HKPNT( new CRegKey( nsWin32::HKey_Performance_NLSText ), true );
        return HKPNT;
    }

    //--------------------------------------------------------------------------------
    CRegistry::CKeyRef CRegistry::PerformanceText( void )
    {
		CKeyRef HKPT( new CRegKey( nsWin32::HKey_Performance_Text ), true );
        return HKPT;
    }

    //--------------------------------------------------------------------------------
    CRegistry::CKeyRef CRegistry::Users( void )
    {
		CKeyRef HKU( new CRegKey( nsWin32::HKey_Users ), true );
        return HKU;
    }            

}//nsWin32
