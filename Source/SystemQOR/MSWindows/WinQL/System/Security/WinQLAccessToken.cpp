//WinQLAccessToken.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/System/Security/WinQLAccessToken.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQAPI/AdvAPI32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace ::nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CAccessToken );

	//------------------------------------------------------------------------------
	CAccessToken::CAccessToken( void* TokenHandle ) : m_AdvAPI32Library( CAdvAPI32::Instance() )
	, m_TokenHandle( TokenHandle )
	{
		_WINQ_FCONTEXT( "CAccessToken::CAccessToken" );
	}

    //------------------------------------------------------------------------------
    CAccessToken::CAccessToken( nsWin32::CProcess& Process, unsigned long dwDesiredAccess ) : m_AdvAPI32Library( CAdvAPI32::Instance() )
	, m_TokenHandle( 0 )
    {
        _WINQ_FCONTEXT( "CAccessToken::CAccessToken" );
		m_AdvAPI32Library.OpenProcessToken( Process.ProcessHandle().Use(), dwDesiredAccess, m_TokenHandle.pptr() );
    }

    //------------------------------------------------------------------------------
    CAccessToken::CAccessToken( CThread& Thread, unsigned long dwDesiredAccess, bool bOpenAsSelf ) : m_AdvAPI32Library( CAdvAPI32::Instance() )
	, m_TokenHandle( 0 )
    {
        _WINQ_FCONTEXT( "CAccessToken::CAccessToken" );
        __QOR_PROTECT
        {
            m_AdvAPI32Library.OpenThreadToken( Thread.Handle(), dwDesiredAccess, bOpenAsSelf ? TRUE : FALSE, m_TokenHandle.pptr() );
        }__QOR_ENDPROTECT
    }

	//------------------------------------------------------------------------------
	CAccessToken::CAccessToken( const CAccessToken& src, nsWin32::SECURITY_IMPERSONATION_LEVEL ImpersonationLevel ) : m_AdvAPI32Library( CAdvAPI32::Instance() )
	,	m_TokenHandle( 0 )
	{
		_WINQ_FCONTEXT( "CAccessToken::CAccessToken" );
		__QOR_PROTECT
		{
			m_AdvAPI32Library.DuplicateToken( src.Handle().Use(), static_cast< ::SECURITY_IMPERSONATION_LEVEL >( ImpersonationLevel ), m_TokenHandle.pptr() );
		}__QOR_ENDPROTECT
	}

	//------------------------------------------------------------------------------
	CAccessToken::CAccessToken( const CAccessToken& src, unsigned long dwDesiredAccess, nsWin32::LPSECURITY_ATTRIBUTES lpTokenAttributes,
		nsWin32::SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, nsWin32::eTokenType TokenType ) : m_AdvAPI32Library( CAdvAPI32::Instance() )
	,	m_TokenHandle( 0 )
	{
		_WINQ_FCONTEXT( "CAccessToken::CAccessToken" );
		__QOR_PROTECT
		{
			m_AdvAPI32Library.DuplicateTokenEx( src.Handle().Use(), dwDesiredAccess, reinterpret_cast< ::LPSECURITY_ATTRIBUTES >( lpTokenAttributes ),
				static_cast< ::SECURITY_IMPERSONATION_LEVEL >( ImpersonationLevel ), static_cast< ::TOKEN_TYPE >( TokenType ), m_TokenHandle.pptr() );
		}__QOR_ENDPROTECT
	}

	//------------------------------------------------------------------------------
	CAccessToken::CAccessToken( const CAccessToken& src, unsigned long Flags, unsigned long DisableSidCount, 
		nsWin32::PSID_AND_ATTRIBUTES SidsToDisable, unsigned long DeletePrivilegeCount, 
		nsWin32::PLUID_AND_ATTRIBUTES PrivilegesToDelete, unsigned long RestrictedSidCount, 
		nsWin32::PSID_AND_ATTRIBUTES SidsToRestrict ) : m_AdvAPI32Library( CAdvAPI32::Instance() )
	,	m_TokenHandle( 0 )
	{
		_WINQ_FCONTEXT( "CAccessToken::CAccessToken" );
		__QOR_PROTECT
		{
			m_AdvAPI32Library.CreateRestrictedToken( src.Handle().Use(), Flags, DisableSidCount, reinterpret_cast< ::PSID_AND_ATTRIBUTES >( SidsToDisable ),
				DeletePrivilegeCount, reinterpret_cast< ::PLUID_AND_ATTRIBUTES >( PrivilegesToDelete ), RestrictedSidCount, reinterpret_cast< ::PSID_AND_ATTRIBUTES >( SidsToRestrict ), m_TokenHandle.pptr() );
		}__QOR_ENDPROTECT
	}

	//------------------------------------------------------------------------------
	CAccessToken::~CAccessToken()
	{
		_WINQ_FCONTEXT( "CAccessToken::~CAccessToken" );
	}

	//------------------------------------------------------------------------------
	bool CAccessToken::AdjustGroups( bool ResetToDefault, nsWin32::PTOKEN_GROUPS NewState, unsigned long BufferLength,
		nsWin32::PTOKEN_GROUPS PreviousState, unsigned long* ReturnLength )
	{
		_WINQ_FCONTEXT( "CAccessToken::AdjustGroups" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_AdvAPI32Library.AdjustTokenGroups( m_TokenHandle.Use(), ResetToDefault ? TRUE : FALSE, 
				reinterpret_cast< ::PTOKEN_GROUPS >( NewState ), BufferLength, reinterpret_cast< ::PTOKEN_GROUPS >( PreviousState ), ReturnLength ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CAccessToken::AdjustPrivileges( bool DisableAllPrivileges, nsWin32::PTOKEN_PRIVILEGES NewState, 
		unsigned long BufferLength, nsWin32::PTOKEN_PRIVILEGES PreviousState, unsigned long* ReturnLength, int& bAllSuccess )
	{
		_WINQ_FCONTEXT( "CAccessToken::AdjustPrivileges" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_AdvAPI32Library.AdjustTokenPrivileges( m_TokenHandle.Use(), DisableAllPrivileges ? TRUE : FALSE, 
				reinterpret_cast< ::PTOKEN_PRIVILEGES >( NewState ), BufferLength, reinterpret_cast< ::PTOKEN_PRIVILEGES >( PreviousState ), ReturnLength, bAllSuccess ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CAccessToken::CheckMembership( void* SidToCheck, int* IsMember )
	{
		_WINQ_FCONTEXT( "CAccessToken::CheckMembership" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_AdvAPI32Library.CheckTokenMembership( m_TokenHandle.Use(), SidToCheck, IsMember ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CAccessToken::PrivilegeCheck( nsWin32::PPRIVILEGE_SET RequiredPrivileges, int* pfResult )
	{
		_WINQ_FCONTEXT( "CAccessToken::PrivilegeCheck" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_AdvAPI32Library.PrivilegeCheck( m_TokenHandle.Use(), reinterpret_cast< ::PPRIVILEGE_SET >( RequiredPrivileges ), pfResult ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CAccessToken::GetInformation( nsWin32::TokenInformationClass TokenInformationClass, void* TokenInformation, unsigned long TokenInformationLength, unsigned long* ReturnLength )
	{
		_WINQ_FCONTEXT( "CAccessToken::GetInformation" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_AdvAPI32Library.GetTokenInformation( m_TokenHandle.Use(), static_cast< ::TOKEN_INFORMATION_CLASS >( TokenInformationClass ), 
				TokenInformation, TokenInformationLength, ReturnLength ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CAccessToken::SetInformation( nsWin32::TokenInformationClass TokenInformationClass, void* TokenInformation, unsigned long TokenInformationLength )
	{
		_WINQ_FCONTEXT( "CAccessToken::SetInformation" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_AdvAPI32Library.SetTokenInformation( m_TokenHandle.Use(), static_cast< ::TOKEN_INFORMATION_CLASS >( TokenInformationClass ), 
				TokenInformation, TokenInformationLength ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CAccessToken::IsRestricted()
	{
		_WINQ_FCONTEXT( "CAccessToken::IsRestricted" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_AdvAPI32Library.IsTokenRestricted( m_TokenHandle.Use() ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CAccessToken::IsUntrusted()
	{
		_WINQ_FCONTEXT( "CAccessToken::IsUntrusted" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_AdvAPI32Library.IsTokenUntrusted( m_TokenHandle.Use() ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	const CHandle& CAccessToken::Handle() const
	{
		_WINQ_FCONTEXT( "CAccessToken::Handle" );
		return m_TokenHandle;
	}

    //------------------------------------------------------------------------------
	bool CAccessToken::LookupPrivilegeValueT( const TCHAR* lpSystemName, const TCHAR* lpName, nsWin32::PLUID lpLuid )
    {
        _WINQ_FCONTEXT( "CAccessToken::LookupPrivilegeValue" );
        bool bResult = false;
        __QOR_PROTECT
        {
			bResult = m_AdvAPI32Library.LookupPrivilegeValue( lpSystemName, lpName, reinterpret_cast< ::PLUID >( lpLuid ) ) ? true : false;
        }__QOR_ENDPROTECT
        return bResult;
    }

}//nsWin32
