//WinQLAccessControlList.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/System/Security/WinQLAccessControlList.h"
#include "WinQAPI/AdvAPI32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace ::nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CAccessControlList );

	//--------------------------------------------------------------------------------
	CAccessControlList::CAccessControlList() : m_AdvAPI32Library( CAdvAPI32::Instance() )
	{
		_WINQ_FCONTEXT( "CAccessControlList::CAccessControlList" );
		m_pACL = 0;
	}

	//--------------------------------------------------------------------------------
	CAccessControlList::CAccessControlList( const CAccessControlList& src ) : m_AdvAPI32Library( CAdvAPI32::Instance() )
	{
		_WINQ_FCONTEXT( "CAccessControlList::CAccessControlList" );
		__QOR_PROTECT
		{
			*this = src;
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CAccessControlList::CAccessControlList( unsigned long cCountOfExplicitEntries, nsWin32::ExplicitAccess* pListOfExplicitEntries ) : m_AdvAPI32Library( CAdvAPI32::Instance() )			
	{
		_WINQ_FCONTEXT( "CAccessControlList::CAccessControlList" );
		m_pACL = 0;
		__QOR_PROTECT
		{
			m_AdvAPI32Library.SetEntriesInAcl( cCountOfExplicitEntries, reinterpret_cast< ::PEXPLICIT_ACCESS >( pListOfExplicitEntries ), 0, reinterpret_cast< ::PACL* >( &m_pACL ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CAccessControlList::~CAccessControlList()
	{
		_WINQ_FCONTEXT( "CAccessControlList::~CAccessControlList" );
	}

	//--------------------------------------------------------------------------------
	CAccessControlList& CAccessControlList::operator=( const CAccessControlList& src )
	{
		_WINQ_FCONTEXT( "CAccessControlList::operator=" );
		m_pACL = src.m_pACL;
		return *this;
	}

	//--------------------------------------------------------------------------------
	unsigned long CAccessControlList::SetEntries( unsigned long cCountOfExplicitEntries, nsWin32::ExplicitAccess* pListOfExplicitEntries )
	{
		_WINQ_FCONTEXT( "CAccessControlList::SetEntries" );
		DWORD dwResult = 0;
		AccessControlList* pNewAcl = 0;
		__QOR_PROTECT
		{
			dwResult = m_AdvAPI32Library.SetEntriesInAclA( cCountOfExplicitEntries, 
				reinterpret_cast< ::PEXPLICIT_ACCESS >( pListOfExplicitEntries ), reinterpret_cast< ::PACL >( m_pACL ), reinterpret_cast< ::PACL* >( &pNewAcl ) );
			if( dwResult == ERROR_SUCCESS )
			{
				m_pACL = pNewAcl;
			}
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	bool CAccessControlList::AddAccessAllowedAce( unsigned long dwAceRevision, unsigned long AccessMask, void* pSid )
	{
		_WINQ_FCONTEXT( "CAccessControlList::AddAccessAllowedAce" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_AdvAPI32Library.AddAccessAllowedAce( reinterpret_cast< ::PACL >( m_pACL ), dwAceRevision, AccessMask, pSid ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CAccessControlList::AddAccessAllowedAceEx( unsigned long dwAceRevision, unsigned long AceFlags, unsigned long AccessMask, void* pSid )
	{
		_WINQ_FCONTEXT( "CAccessControlList::AddAccessAllowedAceEx" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_AdvAPI32Library.AddAccessAllowedAceEx( reinterpret_cast< ::PACL >( m_pACL ), dwAceRevision, AceFlags, AccessMask, pSid ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CAccessControlList::AddAccessAllowedObjectAce( unsigned long dwAceRevision, unsigned long AceFlags, unsigned long AccessMask, nsWin32::GUID* ObjectTypeGuid,
		nsWin32::GUID* InheritedObjectTypeGuid, void* pSid )
	{
		_WINQ_FCONTEXT( "CAccessControlList::AddAccessAllowedObjectAce" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_AdvAPI32Library.AddAccessAllowedObjectAce( reinterpret_cast< ::PACL >( m_pACL ), dwAceRevision, AceFlags, 
				AccessMask, reinterpret_cast< ::GUID* >( ObjectTypeGuid ), reinterpret_cast< ::GUID* >( InheritedObjectTypeGuid ), pSid ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CAccessControlList::AddAccessDeniedAce( unsigned long dwAceRevision, unsigned long AccessMask, void* pSid )
	{
		_WINQ_FCONTEXT( "CAccessControlList::AddAccessDeniedAce" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_AdvAPI32Library.AddAccessDeniedAce( reinterpret_cast< ::PACL >( m_pACL ), dwAceRevision, AccessMask, pSid ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CAccessControlList::AddAccessDeniedAceEx( unsigned long dwAceRevision, unsigned long AceFlags, unsigned long AccessMask, void* pSid )
	{
		_WINQ_FCONTEXT( "CAccessControlList::AddAccessDeniedAceEx" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_AdvAPI32Library.AddAccessDeniedAceEx( reinterpret_cast< ::PACL >( m_pACL ), dwAceRevision, AceFlags, AccessMask, pSid ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CAccessControlList::AddAccessDeniedObjectAce( unsigned long dwAceRevision, unsigned long AceFlags, unsigned long AccessMask, nsWin32::GUID* ObjectTypeGuid, 
		nsWin32::GUID* InheritedObjectTypeGuid, void* pSid )
	{
		_WINQ_FCONTEXT( "CAccessControlList::AddAccessDeniedObjectAce" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_AdvAPI32Library.AddAccessDeniedObjectAce( reinterpret_cast< ::PACL >( m_pACL ), dwAceRevision, AceFlags, 
				AccessMask, reinterpret_cast< ::GUID* >( ObjectTypeGuid ), reinterpret_cast< ::GUID* >( InheritedObjectTypeGuid ), pSid ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CAccessControlList::AddAce( unsigned long dwAceRevision, unsigned long dwStartingAceIndex, void* pAceList, unsigned long nAceListLength )
	{
		_WINQ_FCONTEXT( "CAccessControlList::AddAce" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_AdvAPI32Library.AddAce( reinterpret_cast< ::PACL >( m_pACL ), dwAceRevision, dwStartingAceIndex, pAceList, nAceListLength ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CAccessControlList::AddAuditAccessAce( unsigned long dwAceRevision, unsigned long dwAccessMask, void* pSid, bool bAuditSuccess, bool bAuditFailure )
	{
		_WINQ_FCONTEXT( "CAccessControlList::AddAuditAccessAce" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_AdvAPI32Library.AddAuditAccessAce( reinterpret_cast< ::PACL >( m_pACL ), dwAceRevision, dwAccessMask, pSid, 
				bAuditSuccess ? TRUE : FALSE, bAuditFailure ? TRUE : FALSE ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CAccessControlList::AddAuditAccessAceEx( unsigned long dwAceRevision, unsigned long AceFlags, unsigned long dwAccessMask, void* pSid, bool bAuditSuccess, bool bAuditFailure )
	{
		_WINQ_FCONTEXT( "CAccessControlList::AddAuditAccessAceEx" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_AdvAPI32Library.AddAuditAccessAceEx( reinterpret_cast< ::PACL >( m_pACL ), dwAceRevision, AceFlags, dwAccessMask,
				pSid, bAuditSuccess ? TRUE : FALSE, bAuditFailure ? TRUE : FALSE ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CAccessControlList::AddAuditAccessObjectAce( unsigned long dwAceRevision, unsigned long AceFlags, unsigned long dwAccessMask, nsWin32::GUID* ObjectTypeGuid, 
		nsWin32::GUID* InheritedObjectTypeGuid, void* pSid, bool bAuditSuccess, bool bAuditFailure )
	{
		_WINQ_FCONTEXT( "CAccessControlList::AddAuditAccessObjectAce" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_AdvAPI32Library.AddAuditAccessObjectAce( reinterpret_cast< ::PACL >( m_pACL ), dwAceRevision, AceFlags, 
				dwAccessMask, reinterpret_cast< ::GUID* >( ObjectTypeGuid ), reinterpret_cast< ::GUID* >( InheritedObjectTypeGuid ), 
				pSid, bAuditSuccess ? TRUE : FALSE, bAuditFailure ? TRUE : FALSE ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CAccessControlList::DeleteAce( unsigned long dwAceIndex )
	{
		_WINQ_FCONTEXT( "CAccessControlList::DeleteAce" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_AdvAPI32Library.DeleteAce( reinterpret_cast< ::PACL >( m_pACL ), dwAceIndex ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CAccessControlList::FindFirstFreeAce( void** pAce )
	{
		_WINQ_FCONTEXT( "CAccessControlList::FindFirstFreeAce" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_AdvAPI32Library.FindFirstFreeAce( reinterpret_cast< ::PACL >( m_pACL ), pAce ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CAccessControlList::GetAce( unsigned long dwAceIndex, void** pAce )
	{
		_WINQ_FCONTEXT( "CAccessControlList::GetAce" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_AdvAPI32Library.GetAce( reinterpret_cast< ::PACL >( m_pACL ), dwAceIndex, pAce ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CAccessControlList::GetAuditedPermissions( nsWin32::Trustee* pTrustee, unsigned long* pSuccessfulAuditedRights, unsigned long* pFailedAuditRights )
	{
		_WINQ_FCONTEXT( "CAccessControlList::GetAuditedPermissions" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = m_AdvAPI32Library.GetAuditedPermissionsFromAcl( reinterpret_cast< ::PACL >( m_pACL ), reinterpret_cast< ::PTRUSTEE >( pTrustee ), reinterpret_cast< ::PACCESS_MASK >( pSuccessfulAuditedRights ), reinterpret_cast< ::PACCESS_MASK >( pFailedAuditRights ) );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CAccessControlList::GetEffectiveRights( nsWin32::Trustee* pTrustee, unsigned long* pAccessRights )
	{
		_WINQ_FCONTEXT( "CAccessControlList::GetEffectiveRights" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = m_AdvAPI32Library.GetEffectiveRightsFromAcl( reinterpret_cast< ::PACL >( m_pACL ), reinterpret_cast< ::PTRUSTEE >( pTrustee ), reinterpret_cast< ::PACCESS_MASK >( pAccessRights ) );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CAccessControlList::GetEntries( unsigned long* pcCountOfExplicitEntries, nsWin32::ExplicitAccess** pListOfExplicitEntries ) const
	{
		_WINQ_FCONTEXT( "CAccessControlList::GetEntries" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = m_AdvAPI32Library.GetExplicitEntriesFromAclW( reinterpret_cast< ::PACL >( m_pACL ), pcCountOfExplicitEntries, reinterpret_cast< ::PEXPLICIT_ACCESS* >( pListOfExplicitEntries ) );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	bool CAccessControlList::GetInformation( void* pAclInformation, unsigned long nAclInformationLength, nsWin32::ACLInformationClass dwAclInformationClass )
	{
		_WINQ_FCONTEXT( "CAccessControlList::GetInformation" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_AdvAPI32Library.GetAclInformation( reinterpret_cast< ::PACL >( m_pACL ), pAclInformation, nAclInformationLength, static_cast< ::ACL_INFORMATION_CLASS >( dwAclInformationClass ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CAccessControlList::Initialize( unsigned long nAclLength, unsigned long dwAclRevision )
	{
		_WINQ_FCONTEXT( "CAccessControlList::Initialize" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_AdvAPI32Library.InitializeAcl( reinterpret_cast< ::PACL >( m_pACL ), nAclLength, dwAclRevision ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CAccessControlList::IsValid()
	{
		_WINQ_FCONTEXT( "CAccessControlList::IsValid" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_AdvAPI32Library.IsValidAcl( reinterpret_cast< ::PACL >( m_pACL ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CAccessControlList::SetInformation( void* pAclInformation, unsigned long nAclInformationLength, nsWin32::ACLInformationClass dwAclInformationClass )
	{
		_WINQ_FCONTEXT( "CAccessControlList::SetInformation" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_AdvAPI32Library.SetAclInformation( reinterpret_cast< ::PACL >( m_pACL ), pAclInformation, 
				nAclInformationLength, static_cast< ::ACL_INFORMATION_CLASS >( dwAclInformationClass ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}




	__QOR_IMPLEMENT_OCLASS_LUID( CWindowsAccessControlList );

	//--------------------------------------------------------------------------------
	CWindowsAccessControlList::CWindowsAccessControlList()
	{        
		_WINQ_FCONTEXT( "CAccessControlList::CAccessControlList" );
		m_Revision = Revision2;
		m_Win32ACL.Initialize( sizeof( nsWin32::ExplicitAccess ) * 16, static_cast< unsigned long >( m_Revision ) );
	}

	//--------------------------------------------------------------------------------
	CWindowsAccessControlList::CWindowsAccessControlList( const CWindowsAccessControlList& src )
	{
		_WINQ_FCONTEXT( "CAccessControlList::CAccessControlList" );
		*this = src;
	}

	//--------------------------------------------------------------------------------
	CWindowsAccessControlList::~CWindowsAccessControlList()
	{
		_WINQ_FCONTEXT( "CAccessControlList::~CAccessControlList" );
	}

	//--------------------------------------------------------------------------------
	CWindowsAccessControlList::CWindowsAccessControlList( CExplicitAccessArray& src )
	{
		_WINQ_FCONTEXT( "CAccessControlList::CAccessControlList" );
		*this = src;
	}

	//--------------------------------------------------------------------------------
	CWindowsAccessControlList& CWindowsAccessControlList::operator=( const CWindowsAccessControlList& src )
	{
		_WINQ_FCONTEXT( "CAccessControlList::operator=" );
		CExplicitAccessArray EntryArray( 0 );
		src.GetEntries( EntryArray );
		*this = EntryArray;
		return *this;
	}

	//--------------------------------------------------------------------------------
	CWindowsAccessControlList& CWindowsAccessControlList::operator=( CAccessControlList& src )
	{
		_WINQ_FCONTEXT( "CAccessControlList::operator=" );
		unsigned long ulEntryCount = 0;
		nsWin32::ExplicitAccess* pListOfExplicitEntries = 0;
		CExplicitAccessArray EntryArray( 0 );
		/*unsigned long dwResult =*/ src.GetEntries( &ulEntryCount, &pListOfExplicitEntries );
		unsigned long ulEntry = ulEntryCount;
		while( ulEntry > 0 )
		{            
			nsWin32::ExplicitAccess& refItem( pListOfExplicitEntries[ --ulEntry ] );
			EntryArray.CTArray::Append( refItem );
		}
		*this = EntryArray;
		return *this;
	}

	//--------------------------------------------------------------------------------
	CWindowsAccessControlList& CWindowsAccessControlList::operator=( CExplicitAccessArray& src )
	{
		_WINQ_FCONTEXT( "CAccessControlList::operator=" );
		unsigned long ulEntry = 0;
		while( ulEntry < src.Size() )
		{
			AddEntries( ulEntry, &src[ ulEntry ], sizeof( nsWin32::ExplicitAccess ) );
			ulEntry++;
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	bool CWindowsAccessControlList::AddAllowedEntry( sAccessMask AccessMask, uEntryFlags Flags, CSID& Sid )
	{
		_WINQ_FCONTEXT( "CAccessControlList::AddAllowedEntry" );
		bool bResult = false;
		if( Flags.ulFlags == 0 )
		{
			bResult = m_Win32ACL.AddAccessAllowedAce( static_cast< unsigned long >( m_Revision ), AccessMask.Mask, Sid.Data() );
		}
		else
		{
			bResult = m_Win32ACL.AddAccessAllowedAceEx( static_cast< unsigned long >( m_Revision ), Flags.ulFlags, AccessMask.Mask, Sid.Data() );
		}
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CWindowsAccessControlList::AddDeniedEntry( sAccessMask AccessMask, uEntryFlags Flags, CSID& Sid )
	{
		_WINQ_FCONTEXT( "CAccessControlList::AddDeniedEntry" );
		bool bResult = false;
		if( Flags.ulFlags == 0 )
		{
			bResult = m_Win32ACL.AddAccessDeniedAce( static_cast< unsigned long >( m_Revision ), AccessMask.Mask, Sid.Data() );
		}
		else
		{
			bResult = m_Win32ACL.AddAccessDeniedAceEx( static_cast< unsigned long >( m_Revision ), Flags.ulFlags, AccessMask.Mask, Sid.Data() );
		}
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CWindowsAccessControlList::AddAllowedObjectEntry( sAccessMask AccessMask, uEntryFlags Flags, nsWin32::GUID* ObjectTypeGuid, nsWin32::GUID* InheritedObjectTypeGuid, CSID& Sid )
	{
		_WINQ_FCONTEXT( "CAccessControlList::AddAllowedObjectEntry" );
		bool bResult = false;
		bResult = m_Win32ACL.AddAccessAllowedObjectAce( static_cast< unsigned long >( m_Revision ), Flags.ulFlags,
			AccessMask.Mask, ObjectTypeGuid, InheritedObjectTypeGuid, Sid.Data() );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CWindowsAccessControlList::AddDeniedObjectEntry( sAccessMask AccessMask, uEntryFlags Flags, nsWin32::GUID* ObjectTypeGuid, 
			nsWin32::GUID* InheritedObjectTypeGuid, CSID& Sid )
	{
		_WINQ_FCONTEXT( "CAccessControlList::AddDeniedObjectEntry" );
		bool bResult = false;
		bResult = m_Win32ACL.AddAccessDeniedObjectAce( static_cast< unsigned long >( m_Revision ), Flags.ulFlags, 
			AccessMask.Mask, ObjectTypeGuid, InheritedObjectTypeGuid, Sid.Data() );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CWindowsAccessControlList::AddEntries( unsigned long ulStartingIndex, void* pData, unsigned long ulDataBytes )
	{
		_WINQ_FCONTEXT( "CAccessControlList::AddEntries" );
		bool bResult = false;
		bResult = m_Win32ACL.AddAce( static_cast< unsigned long >( m_Revision ), static_cast< unsigned long >( ulStartingIndex ), pData, ulDataBytes );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CWindowsAccessControlList::AddAuditEntry( sAccessMask AccessMask, uEntryFlags Flags, 
		CSID& Sid, bool bAuditSuccess, bool bAuditFailure )
	{
		_WINQ_FCONTEXT( "CAccessControlList::AddAuditEntry" );
		bool bResult = false;
		if( Flags.ulFlags == 0 )
		{
			bResult = m_Win32ACL.AddAuditAccessAce( static_cast< unsigned long >( m_Revision ), AccessMask.Mask, Sid.Data(), bAuditSuccess, bAuditFailure );
		}
		else
		{
			bResult = m_Win32ACL.AddAuditAccessAceEx( static_cast< unsigned long >( m_Revision ), Flags.ulFlags, AccessMask.Mask, Sid.Data(), bAuditSuccess, bAuditFailure );
		}
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CWindowsAccessControlList::AddAuditObjectEntry( sAccessMask AccessMask, uEntryFlags Flags, 
		nsWin32::GUID* ObjectTypeGuid, nsWin32::GUID* InheritedObjectTypeGuid, CSID& Sid, 
		bool bAuditSuccess, bool bAuditFailure )
	{
		_WINQ_FCONTEXT( "CAccessControlList::AddAuditObjectEntry" );
		bool bResult = false;
		bResult = m_Win32ACL.AddAuditAccessObjectAce( static_cast< unsigned long >( m_Revision ), Flags.ulFlags, 
			AccessMask.Mask, ObjectTypeGuid, InheritedObjectTypeGuid, Sid.Data(), bAuditSuccess, bAuditFailure );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CWindowsAccessControlList::DeleteEntry( unsigned long ulIndex )
	{
		_WINQ_FCONTEXT( "CAccessControlList::DeleteEntry" );
		bool bResult = false;
		bResult = m_Win32ACL.DeleteAce( static_cast< unsigned long >( ulIndex ) );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CWindowsAccessControlList::FindFirstFreeEntry( void** ppData )
	{
		_WINQ_FCONTEXT( "CAccessControlList::FindFirstFreeEntry" );
		bool bResult = false;
		bResult = m_Win32ACL.FindFirstFreeAce( ppData );
		return bResult;
	}
       
	//--------------------------------------------------------------------------------
	bool CWindowsAccessControlList::GetEntry( unsigned long ulIndex, void** ppEntry )
	{
		_WINQ_FCONTEXT( "CAccessControlList::GetEntry" );
		bool bResult = false;
		if( ppEntry != 0 )
		{
			*ppEntry = 0;
			bResult = m_Win32ACL.GetAce( static_cast< unsigned long >( ulIndex ), ppEntry );
		}
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CWindowsAccessControlList::GetAuditedPermissions( 
		CTrustee& Trustee, sAccessMask& SuccessfulAuditedRights, sAccessMask& FailedAuditRights )
	{
		_WINQ_FCONTEXT( "CAccessControlList::GetAuditedPermissions" );
		unsigned long ulResult = 0;
		ulResult = m_Win32ACL.GetAuditedPermissions( &Trustee, reinterpret_cast< unsigned long* >( &SuccessfulAuditedRights.Mask ), reinterpret_cast< unsigned long* >( &FailedAuditRights.Mask ) );
		return ulResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CWindowsAccessControlList::GetEffectiveRights( CTrustee& Trustee,
		sAccessMask& AccessRights )
	{
		_WINQ_FCONTEXT( "CAccessControlList::GetEffectiveRights" );
		unsigned long ulResult = 0;
		ulResult = m_Win32ACL.GetEffectiveRights( &Trustee, reinterpret_cast< unsigned long* >( &AccessRights.Mask ) );
		return ulResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CWindowsAccessControlList::GetEntries( CExplicitAccessArray& ArrayOfEntries ) const
	{
		_WINQ_FCONTEXT( "CAccessControlList::GetEntries" );
		unsigned long ulResult = 0;
		unsigned long ulEntryCount = 0;
		nsWin32::ExplicitAccess* pListOfExplicitEntries = 0;
		ulResult = m_Win32ACL.GetEntries( &ulEntryCount, &pListOfExplicitEntries );
		unsigned long ulEntry = ulEntryCount;
		while( ulEntry > 0 )
		{            
			ArrayOfEntries.CTArray::Append( pListOfExplicitEntries[ --ulEntry ] );            
		}
		return ulResult;
	}

	//--------------------------------------------------------------------------------
	CWindowsAccessControlList::ERevision CWindowsAccessControlList::GetRevisionInformation( void )
	{        
		_WINQ_FCONTEXT( "CAccessControlList::GetRevisionInformation" );
		return m_Revision;
	}

	//--------------------------------------------------------------------------------
	bool CWindowsAccessControlList::GetSizeInformation( unsigned long& ulEntryCount, unsigned long& ulBytesInUse, 
		unsigned long& ulBytesFree )
	{
		_WINQ_FCONTEXT( "CAccessControlList::GetSizeInformation" );
		bool bResult = false;
		nsWin32::ACLSizeInformation SizeInfo;
		bResult = m_Win32ACL.GetInformation( &SizeInfo, sizeof( SizeInfo ), nsWin32::eAclSizeInformation );
		if( bResult )
		{
			ulEntryCount = SizeInfo.AceCount;
			ulBytesInUse = SizeInfo.AclBytesInUse;
			ulBytesFree = SizeInfo.AclBytesFree;
		}
		return bResult;
	}
        
	//--------------------------------------------------------------------------------
	bool CWindowsAccessControlList::IsValid( void )
	{
		_WINQ_FCONTEXT( "CAccessControlList::IsValid" );
		bool bResult = false;
		bResult = m_Win32ACL.IsValid();
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CWindowsAccessControlList::SetRevisionInformation( ERevision Revision )
	{
		_WINQ_FCONTEXT( "CAccessControlList::SetRevisionInformation" );
		bool bResult = false;
		nsWin32::ACLRevisionInformation RevInfo;
		RevInfo.AclRevision = static_cast< unsigned long >( Revision );
		bResult = m_Win32ACL.SetInformation( &RevInfo, sizeof( nsWin32::ACLRevisionInformation ), nsWin32::eAclRevisionInformation );
		if( bResult )
		{
			m_Revision = Revision;
		}
		return bResult;
	}

}//nsWin32
