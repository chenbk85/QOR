//WinQLServiceControlSession.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/System/ProcessManager/WinQLServiceControlManager.h"
#include "WinQAPI/AdvAPI32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CServiceControlSession );


	//--------------------------------------------------------------------------------
	CServiceControlSession::CServiceControlSession( CServiceControlManager& Manager, const TCHAR* szMachineName, const TCHAR* szDatabaseName, unsigned long ulDesiredAccess ) : m_Manager( Manager )
	{
		_WINQ_FCONTEXT( "CServiceControlSession::CServiceControlSession" );

		m_SessionHandle = m_Manager.OpenSCManagerT( szMachineName, szDatabaseName, ulDesiredAccess );
		m_Lock = m_Manager.LockServiceDatabase( m_SessionHandle );
	}


	//--------------------------------------------------------------------------------
	CServiceControlSession::~CServiceControlSession()
	{
		_WINQ_FCONTEXT( "CServiceControlSession::~CServiceControlSession" );

		m_Manager.UnlockServiceDatabase( m_Lock );
		m_Manager.CloseServiceHandle( m_SessionHandle );
	}

	//--------------------------------------------------------------------------------
	CServiceController::refType CServiceControlSession::Open( CTString& strServiceName, unsigned long ulDesiredAccess )
	{
		_WINQ_FCONTEXT( "CServiceControlSession::OpenServiceT" );

		CServiceController::refType Result( new CServiceController( m_Manager, reinterpret_cast< ServiceControlHandle >( m_Manager.m_AdvAPI32Library.OpenService( reinterpret_cast< ::SC_HANDLE >( m_SessionHandle ), strServiceName.GetNullableBuffer(), ulDesiredAccess ) ) ), true );
		strServiceName.ReleaseBuffer();
		return Result;
	}

	//--------------------------------------------------------------------------------
	CServiceController::refType CServiceControlSession::Create( CTString& strServiceName, CTString& strDisplayName, unsigned long ulDesiredAccess, unsigned long ulServiceType, unsigned long dwStartType, unsigned long dwErrorControl, CTString& strBinaryPathName, CTString& strLoadOrderGroup, unsigned long* pulTagId, CTString& strDependencies, CTString& strServiceStartName, CTString& strPassword )
	{
		_WINQ_FCONTEXT( "CServiceControlSession::CreateServiceT" );

		CServiceController::refType Result( new CServiceController( m_Manager, reinterpret_cast< ServiceControlHandle >( m_Manager.m_AdvAPI32Library.CreateService(
			reinterpret_cast< ::SC_HANDLE >( m_SessionHandle ), strServiceName.GetNullableBuffer(), strDisplayName.GetNullableBuffer(),
			ulDesiredAccess, ulServiceType, dwStartType, dwErrorControl, strBinaryPathName.GetNullableBuffer(), strLoadOrderGroup.GetNullableBuffer(), 
			pulTagId, strDependencies.GetNullableBuffer(), strServiceStartName.GetNullableBuffer(), 
			strPassword.GetNullableBuffer() ) ) ), true );

		strServiceName.ReleaseBuffer();
		strDisplayName.ReleaseBuffer();
		strBinaryPathName.ReleaseBuffer();
		strLoadOrderGroup.ReleaseBuffer();
		strDependencies.ReleaseBuffer();
		strServiceStartName.ReleaseBuffer();
		strPassword.ReleaseBuffer();

		return Result;
	}

	//--------------------------------------------------------------------------------
	bool CServiceControlSession::EnumServices( unsigned long ulServiceType, unsigned long ulServiceState, LPENUM_SERVICE_STATUS lpServices, unsigned long cbBufSize, unsigned long* pcbBytesNeeded, unsigned long* lpServicesReturned, unsigned long* lpResumeHandle )
	{
		_WINQ_FCONTEXT( "CServiceControlSession::EnumServicesStatusT" );

		bool bResult = m_Manager.m_AdvAPI32Library.EnumServicesStatus( reinterpret_cast< ::SC_HANDLE >( m_SessionHandle ), ulServiceType, ulServiceState, 
			reinterpret_cast< ::LPENUM_SERVICE_STATUS >( lpServices ), cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle ) ? true : false;
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CServiceControlSession::EnumServicesEx( SC_ENUM_TYPE InfoLevel, unsigned long ulServiceType, unsigned long ulServiceState, byte* lpServices, unsigned long cbBufSize, unsigned long* pcbBytesNeeded, unsigned long* lpServicesReturned, unsigned long* lpResumeHandle, CTString& strGroupName )
	{
		_WINQ_FCONTEXT( "CServiceControlSession::EnumServicesStatusExT" );

		bool bResult = m_Manager.m_AdvAPI32Library.EnumServicesStatusEx( reinterpret_cast< ::SC_HANDLE >( m_SessionHandle ), static_cast< ::SC_ENUM_TYPE >( InfoLevel ), ulServiceType, ulServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle, strGroupName.GetNullableBuffer() ) ? true : false;
		strGroupName.ReleaseBuffer();
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CServiceControlSession::GetDisplayName( CTString& strServiceName, CTString& strDisplayName, unsigned long* lpcchBuffer )
	{
		_WINQ_FCONTEXT( "CServiceControlSession::GetDisplayName" );

		unsigned long ulCharCount = 0;
		m_Manager.m_AdvAPI32Library.GetServiceDisplayName( reinterpret_cast< ::SC_HANDLE >( m_SessionHandle ), strServiceName.GetNullableBuffer(), 0, &ulCharCount );
		strServiceName.ReleaseBuffer();

		bool bResult = m_Manager.m_AdvAPI32Library.GetServiceDisplayName( reinterpret_cast< ::SC_HANDLE >( m_SessionHandle ), 
			strServiceName.GetNullableBuffer(), 
			strDisplayName.GetBufferSetLength( static_cast< unsigned short >( ulCharCount ) ), &ulCharCount ) ? true : false;

		strServiceName.ReleaseBuffer();
		
		if( bResult )
		{
			strDisplayName.ValidateBuffer( static_cast< unsigned short >( ulCharCount ) );
		}
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CServiceControlSession::GetKeyName( CTString& strDisplayName, CTString& strServiceName )
	{
		_WINQ_FCONTEXT( "CServiceControlSession::GetKeyName" );

		unsigned long ulCharCount = 0;

		m_Manager.m_AdvAPI32Library.GetServiceKeyName( reinterpret_cast< ::SC_HANDLE >( m_SessionHandle ), strDisplayName.GetNullableBuffer(), 0, &ulCharCount );
		strDisplayName.ReleaseBuffer();

		bool bResult = m_Manager.m_AdvAPI32Library.GetServiceKeyName( reinterpret_cast< ::SC_HANDLE >( m_SessionHandle ), strDisplayName.GetNullableBuffer(), 
			strServiceName.GetBufferSetLength( static_cast< unsigned short >( ulCharCount ) ), &ulCharCount ) ? true : false;

		strDisplayName.ReleaseBuffer();

		if( bResult )
		{
			strServiceName.ValidateBuffer( static_cast< unsigned short >( ulCharCount ) );
		}

		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CServiceControlSession::QueryLockStatus( QUERY_SERVICE_LOCK_STATUS** ppLockStatus, unsigned long& ulBytesReturned )
	{
		_WINQ_FCONTEXT( "CServiceControlSession::QueryLockStatus" );

		bool bResult = false;
		ulBytesReturned = 0;

		if( ppLockStatus != 0 && *ppLockStatus == 0 )
		{
			unsigned long ulBytesNeeded = 0;
			QUERY_SERVICE_LOCK_STATUS tmpLockStatus;
			*ppLockStatus = &tmpLockStatus;

			bResult = m_Manager.m_AdvAPI32Library.QueryServiceLockStatus( reinterpret_cast< ::SC_HANDLE >( m_SessionHandle ), 
			reinterpret_cast< ::LPQUERY_SERVICE_LOCK_STATUS >( *ppLockStatus ), sizeof( QUERY_SERVICE_LOCK_STATUS ), &ulBytesNeeded ) ? true : false;

			if( bResult )
			{
				*ppLockStatus = new QUERY_SERVICE_LOCK_STATUS;
				memcpy( *ppLockStatus, &tmpLockStatus, sizeof( QUERY_SERVICE_LOCK_STATUS ) );
				ulBytesReturned = sizeof( QUERY_SERVICE_LOCK_STATUS );
			}
			else
			{
				*ppLockStatus = reinterpret_cast< QUERY_SERVICE_LOCK_STATUS* >( new byte[ ulBytesNeeded ] );
				ulBytesReturned = ulBytesNeeded;
				bResult = m_Manager.m_AdvAPI32Library.QueryServiceLockStatus( reinterpret_cast< ::SC_HANDLE >( m_SessionHandle ), 
				reinterpret_cast< ::LPQUERY_SERVICE_LOCK_STATUS >( *ppLockStatus ), ulBytesNeeded, &ulBytesNeeded ) ? true : false;				
			}
		}

		return bResult;
	}

}//nsWin32


