//WinQLServiceController.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/System/ProcessManager/WinQLServiceControlManager.h"
#include "WinQAPI/AdvAPI32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CServiceController );

	//--------------------------------------------------------------------------------
	CServiceController::CServiceController( CServiceControlManager& Manager, ServiceControlHandle Handle ) : m_Manager( Manager ), m_Handle( Handle )
	{
		_WINQ_FCONTEXT( "CServiceController::CServiceController" );
	}

	//--------------------------------------------------------------------------------
	CServiceController::~CServiceController()
	{
		_WINQ_FCONTEXT( "CServiceController::~CServiceController" );
	}

	//--------------------------------------------------------------------------------
	bool CServiceController::ChangeConfig2( unsigned long ulInfoLevel, void* pInfo )
	{
		_WINQ_FCONTEXT( "CServiceController::ChangeConfig2" );

		bool bResult = m_Manager.m_AdvAPI32Library.ChangeServiceConfig2( reinterpret_cast< ::SC_HANDLE >( m_Handle ), ulInfoLevel, pInfo ) ? true : false;
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CServiceController::ChangeConfig( unsigned long ulServiceType, unsigned long ulStartType, unsigned long ulErrorControl, CTString& strBinaryPathName, CTString& strLoadOrderGroup, unsigned long* lpdwTagId, CTString& strDependencies, CTString& strServiceStartName, CTString& strPassword, CTString& strDisplayName )
	{
		_WINQ_FCONTEXT( "CServiceController::ChangeConfig" );

		bool bResult = m_Manager.m_AdvAPI32Library.ChangeServiceConfig( reinterpret_cast< ::SC_HANDLE >( m_Handle ), ulServiceType, ulStartType, ulErrorControl,
			strBinaryPathName.GetNullableBuffer(), strLoadOrderGroup.GetNullableBuffer(), lpdwTagId, 
			strDependencies.GetNullableBuffer(), strServiceStartName.GetNullableBuffer(), strPassword.GetNullableBuffer(), strDisplayName.GetNullableBuffer() ) ? true : false;

		strBinaryPathName.ReleaseBuffer();
		strLoadOrderGroup.ReleaseBuffer();
		strDependencies.ReleaseBuffer();
		strServiceStartName.ReleaseBuffer();
		strPassword.ReleaseBuffer();
		strDisplayName.ReleaseBuffer();
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CServiceController::Control( unsigned long ulControl, LPSERVICE_STATUS lpServiceStatus )
	{
		_WINQ_FCONTEXT( "CServiceController::Control" );

		bool bResult = m_Manager.m_AdvAPI32Library.ControlService( reinterpret_cast< ::SC_HANDLE >( m_Handle ), ulControl, reinterpret_cast< ::LPSERVICE_STATUS >( lpServiceStatus ) ) ? true : false;
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CServiceController::EnumDependencies( unsigned long ulServiceState, LPENUM_SERVICE_STATUS lpServices, unsigned long cbBufSize, unsigned long* pcbBytesNeeded, unsigned long* lpServicesReturned )
	{
		_WINQ_FCONTEXT( "CServiceController::EnumDependencies" );
		bool bResult = m_Manager.m_AdvAPI32Library.EnumDependentServices( reinterpret_cast< ::SC_HANDLE >( m_Handle ), ulServiceState, reinterpret_cast< ::LPENUM_SERVICE_STATUS >( lpServices ), cbBufSize, pcbBytesNeeded, lpServicesReturned ) ? true : false;
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CServiceController::NotifyStatusChange( unsigned long ulNotifyMask, PSERVICE_NOTIFY pNotifyBuffer )
	{
		_WINQ_FCONTEXT( "CServiceController::NotifyStatusChange" );
		unsigned long ulResult = m_Manager.m_AdvAPI32Library.NotifyServiceStatusChange( reinterpret_cast< ::SC_HANDLE >( m_Handle ), ulNotifyMask, reinterpret_cast< ::PSERVICE_NOTIFY >( pNotifyBuffer ) );
		return ulResult;
	}

	//--------------------------------------------------------------------------------
	bool CServiceController::QueryConfig2( unsigned long ulInfoLevel, byte* lpBuffer, unsigned long cbBufSize, unsigned long* pcbBytesNeeded )
	{
		_WINQ_FCONTEXT( "CServiceController::QueryConfig2" );

		bool bResult = m_Manager.m_AdvAPI32Library.QueryServiceConfig2( reinterpret_cast< ::SC_HANDLE >( m_Handle ), ulInfoLevel, lpBuffer, cbBufSize, pcbBytesNeeded ) ? true : false; 
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CServiceController::QueryConfig( LPQUERY_SERVICE_CONFIG lpServiceConfig, unsigned long cbBufSize, unsigned long* pcbBytesNeeded )
	{
		_WINQ_FCONTEXT( "CServiceController::QueryConfig" );

		bool bResult = m_Manager.m_AdvAPI32Library.QueryServiceConfig( reinterpret_cast< ::SC_HANDLE >( m_Handle ), reinterpret_cast< ::LPQUERY_SERVICE_CONFIG >( lpServiceConfig ), cbBufSize, pcbBytesNeeded ) ? true : false;
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CServiceController::QueryStatus( LPSERVICE_STATUS lpServiceStatus )
	{
		_WINQ_FCONTEXT( "CServiceController::QueryStatus" );
		bool bResult = m_Manager.m_AdvAPI32Library.QueryServiceStatus( reinterpret_cast< ::SC_HANDLE >( m_Handle ), reinterpret_cast< ::LPSERVICE_STATUS >( lpServiceStatus ) ) ? true : false;
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CServiceController::QueryStatusEx( SC_STATUS_TYPE InfoLevel, byte* lpBuffer, unsigned long cbBufSize, unsigned long* pcbBytesNeeded )
	{
		_WINQ_FCONTEXT( "CServiceController::QueryStatusEx" );
		bool bResult = m_Manager.m_AdvAPI32Library.QueryServiceStatusEx( reinterpret_cast<::SC_HANDLE >( m_Handle ), static_cast< ::SC_STATUS_TYPE >( InfoLevel ), lpBuffer, cbBufSize, pcbBytesNeeded ) ? true : false;
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CServiceController::Start( unsigned long ulNumServiceArgs, const TCHAR** pServiceArgVectors )
	{
		_WINQ_FCONTEXT( "CServiceController::Start" );
		bool bResult = m_Manager.m_AdvAPI32Library.StartService( reinterpret_cast< ::SC_HANDLE >( m_Handle ), ulNumServiceArgs, pServiceArgVectors ) ? true : false;
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CServiceController::Delete( void )
	{
		_WINQ_FCONTEXT( "CServiceController::Delete" );
		bool bResult = m_Manager.m_AdvAPI32Library.DeleteService( reinterpret_cast< ::SC_HANDLE >( m_Handle ) ) ? true : false;
		return bResult;
	}

}//nsWin32


