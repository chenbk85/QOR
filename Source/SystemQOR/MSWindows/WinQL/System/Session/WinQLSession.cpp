//WinQLSession.cpp

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usafe: stored in member for later use" );
#include "WinQL/System/Session/WinQLSession.h"
__QCMP_WARNING_POP
#include "WinQAPI/User32.h"
#include "WinQAPI/AdvAPI32.h"

#ifdef __MINGW32__
#	ifdef UNICODE
#		define InitiateShutdown InitiateShutdownW
#		define InitiateSystemShutdownEx InitiateSystemShutdownExW
#	else
#		define InitiateShutdown InitiateShutdownA
#		define InitiateSystemShutdownEx InitiateSystemShutdownExA
#	endif
#endif//__MINGW32__

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CSessionHelper );

	//--------------------------------------------------------------------------------
	CSessionHelper::CSessionHelper() : m_User32Library( CUser32::Instance() ), m_AdvAPI32Library( CAdvAPI32::Instance() )
	{
		_WINQ_FCONTEXT( "CSessionHelper::CSessionHelper" );
	}

	//--------------------------------------------------------------------------------
	CSessionHelper::~CSessionHelper()
	{
		_WINQ_FCONTEXT( "CSessionHelper::~CSessionHelper" );
	}

	//--------------------------------------------------------------------------------
	bool CSessionHelper::ExitWindowsEx( unsigned int uFlags, unsigned long dwReason )
	{
		_WINQ_FCONTEXT( "CSessionHelper::ExitWindowsEx" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.ExitWindowsEx( uFlags, dwReason ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CSessionHelper::LockWorkStation()
	{
		_WINQ_FCONTEXT( "CSessionHelper::LockWorkStation" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.LockWorkStation() ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CSessionHelper::ShutdownBlockReasonCreate( COSWindow::refType Wnd, const wchar_t* pwszReason )
	{
		_WINQ_FCONTEXT( "CSessionHelper::ShutdownBlockReasonCreate" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.ShutdownBlockReasonCreate( reinterpret_cast< HWND >( Wnd->Handle()->Use() ), pwszReason ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CSessionHelper::ShutdownBlockReasonDestroy( COSWindow::refType Wnd )
	{
		_WINQ_FCONTEXT( "CSessionHelper::ShutdownBlockReasonDestroy" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.ShutdownBlockReasonDestroy( reinterpret_cast< HWND >( Wnd->Handle()->Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	CWString CSessionHelper::ShutdownBlockReasonQuery( COSWindow::refType Wnd )
	{
		_WINQ_FCONTEXT( "CSessionHelper::ShutdownBlockReasonQuery" );
		CWString strReason;
		__QOR_PROTECT
		{
			unsigned long ulResult = m_User32Library.ShutdownBlockReasonQuery( reinterpret_cast< HWND >( Wnd->Handle()->Use() ), 0, 0 );
			if( ulResult > 0 )
			{
				ulResult = m_User32Library.ShutdownBlockReasonQuery( reinterpret_cast< HWND >( Wnd->Handle()->Use() ), strReason.GetBufferSetLength( static_cast< unsigned short >( ulResult ) ), &ulResult );
				strReason.ValidateBuffer( static_cast< unsigned short >( ulResult ) );
			}
		}__QOR_ENDPROTECT
		return strReason;
	}

	//--------------------------------------------------------------------------------
	bool CSessionHelper::EnumWindowStationsT( WindowStationEnumCallback lpEnumFunc, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CSession::EnumWindowStations" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.EnumWindowStations( reinterpret_cast< WINSTAENUMPROC >( lpEnumFunc ), lParam ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CSessionHelper::AbortSystemShutdownT( const TCHAR* lpMachineName )
	{
		_WINQ_FCONTEXT( "CSession::AbortSystemShutdown" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_AdvAPI32Library.AbortSystemShutdown( const_cast< TCHAR* >( lpMachineName ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	//If its Vista just call down
	//else rearrange the params and call InitiateSystemShutdownEx or InitiateSystemShutdown if no reason is given
	bool CSessionHelper::InitiateShutdownT( const TCHAR* lpMachineName, const TCHAR* lpMessage, unsigned long dwGracePeriod, unsigned long dwShutdownFlags, unsigned long dwReason )
	{
		_WINQ_FCONTEXT( "CSessionHelper::InitiateShutdown" );
		bool bResult = false;
		__QOR_PROTECT
		{
			static DWORD dwMajorVersion = ( DWORD )( LOBYTE( LOWORD( CKernel32::GetVersion() ) ) );
#			if ( _WIN32_WINNT >= 0x0600 )
			if( dwMajorVersion >= 6 )
			{
				unsigned long dwResult = m_AdvAPI32Library.InitiateShutdown( const_cast< TCHAR* >( lpMachineName ), const_cast< TCHAR* >( lpMessage ), dwGracePeriod, dwShutdownFlags, dwReason );
				bResult = ( dwResult == 0 ) ? true : false;
			}
			else
			{
#			endif
				BOOL bIntResult = FALSE;
				DWORD dwTimeOut = dwGracePeriod;
				BOOL bForceAppsClosed = dwShutdownFlags & SHUTDOWN_FORCE_SELF;
				BOOL bRebootAfterShutdown = dwShutdownFlags & SHUTDOWN_RESTART;						
				if( dwReason != 0 )
				{
					bIntResult = m_AdvAPI32Library.InitiateSystemShutdownEx( const_cast< TCHAR* >( lpMachineName ), const_cast< TCHAR* >( lpMessage ), dwTimeOut, bForceAppsClosed, bRebootAfterShutdown, dwReason );
				}
				else
				{
					bIntResult = m_AdvAPI32Library.InitiateSystemShutdown( const_cast< TCHAR* >( lpMachineName ), const_cast< TCHAR* >( lpMessage ), dwTimeOut, bForceAppsClosed, bRebootAfterShutdown );
				}
				bResult = bIntResult ? true : false;
#			if ( _WIN32_WINNT >= 0x0600 )
			}
#			endif
		}__QOR_ENDPROTECT
		return bResult;
	}
			
	//--------------------------------------------------------------------------------
	bool CSessionHelper::LogonUserT( wchar_t* lpszUsername, wchar_t* lpszDomain, wchar_t* lpszPassword, unsigned long dwLogonType, unsigned long dwLogonProvider,
		nsWin32::PTOKEN_GROUPS pTokenGroups, void** phToken, void** ppLogonSid, void** ppProfileBuffer, unsigned long* pdwProfileLength, nsWin32::QuotaLimits* pQuotaLimits )
	{
		_WINQ_FCONTEXT( "CSessionHelper::LogonUser" );
		bool bResult = false;
		__QOR_PROTECT
		{
			static unsigned long dwMajorVersion = ( unsigned long )( LOBYTE( LOWORD( CKernel32::GetVersion() ) ) );
#			if ( _WIN32_WINNT >= 0x0600 )
			if( dwMajorVersion >= 6 )
			{
				bResult = m_AdvAPI32Library.LogonUserExExW( lpszUsername, lpszDomain, lpszPassword, dwLogonType, dwLogonProvider, reinterpret_cast< ::PTOKEN_GROUPS >( pTokenGroups ), phToken, ppLogonSid, ppProfileBuffer, pdwProfileLength, reinterpret_cast< ::PQUOTA_LIMITS >( pQuotaLimits ) ) ? true : false;
			}
			else
			{
#           else
            __QCMP_UNREF( pTokenGroups );
#			endif
#				if ( _WIN32_WINNT >= 0x0501 )
				if( dwMajorVersion >= 5 )
				{
					DWORD dwMinorVersion = (DWORD)( HIBYTE( LOWORD( CKernel32::GetVersion() ) ) );
					if( dwMinorVersion >= 1 )
					{
						bResult = m_AdvAPI32Library.LogonUserExW( lpszUsername, lpszDomain, lpszPassword, dwLogonType, dwLogonProvider, phToken, ppLogonSid, ppProfileBuffer, pdwProfileLength, reinterpret_cast< ::PQUOTA_LIMITS >( pQuotaLimits ) ) ? true : false;
					}
					else
					{
						bResult = m_AdvAPI32Library.LogonUserW( lpszUsername, lpszDomain, lpszPassword, dwLogonType, dwLogonProvider, phToken ) ? true : false;
					}
				}
#				endif						
#			if ( _WIN32_WINNT >= 0x0600 )
			}
#			endif
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CSessionHelper::MSChapSrvChangePassword( wchar_t* ServerName, wchar_t* UserName, unsigned char LmOldPresent, 
		LMOWFPassword* LmOldOwfPassword, LMOWFPassword* LmNewOwfPassword, NTOWFPassword* NtOldOwfPassword, NTOWFPassword* NtNewOwfPassword )
	{
		_WINQ_FCONTEXT( "CSessionHelper::MSChapSrvChangePassword" );
		unsigned long dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = m_AdvAPI32Library.MSChapSrvChangePassword( ServerName, UserName, LmOldPresent, reinterpret_cast< ::PLM_OWF_PASSWORD >( LmOldOwfPassword ), reinterpret_cast< ::PLM_OWF_PASSWORD >( LmNewOwfPassword ), reinterpret_cast< ::PNT_OWF_PASSWORD >( NtOldOwfPassword ), reinterpret_cast< ::PNT_OWF_PASSWORD >( NtNewOwfPassword ) );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CSessionHelper::MSChapSrvChangePassword2( wchar_t* ServerName, wchar_t* UserName, SamprEncryptedUserPassword* NewPasswordEncryptedWithOldNt, EncryptedNTOWFPassword* OldNtOwfPasswordEncryptedWithNewNt, unsigned char LmPresent, SamprEncryptedUserPassword* NewPasswordEncryptedWithOldLm, EncryptedLMOWFPassword* OldLmOwfPasswordEncryptedWithNewLmOrNt )
	{
		_WINQ_FCONTEXT( "CSessionHelper::MSChapSrvChangePassword2" );
		unsigned long dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = m_AdvAPI32Library.MSChapSrvChangePassword2( ServerName, UserName, reinterpret_cast< ::PSAMPR_ENCRYPTED_USER_PASSWORD >( NewPasswordEncryptedWithOldNt ), reinterpret_cast< ::PENCRYPTED_NT_OWF_PASSWORD >( OldNtOwfPasswordEncryptedWithNewNt ), LmPresent, reinterpret_cast< ::PSAMPR_ENCRYPTED_USER_PASSWORD >( NewPasswordEncryptedWithOldLm ), reinterpret_cast< ::PENCRYPTED_LM_OWF_PASSWORD >( OldLmOwfPasswordEncryptedWithNewLmOrNt ) );
		}__QOR_ENDPROTECT
		return dwResult;
	}
	/*
	//--------------------------------------------------------------------------------
	CWindowStation::refType CSession::WindowStation( CTString StrWinStation, unsigned long dwFlags, bool fInherit, unsigned long dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa )
	{
		if( !m_bWinStationsEnumerated )
		{
			EnumAllWinStations();
		}

		if( StrWinStation.IsEmpty() )
		{	
			//Get the current process Window Station
			CWindowStation::refType refWinSta( new CWindowStation, true );
			return refWinSta;			
		}
		else
		{
			CWindowStation* pResult = m_WinStationNameMap.Find( StrWinStation );
			if( pResult == 0 )
			{	
				pResult = new CWindowStation( StrWinStation, dwFlags, dwDesiredAccess, lpsa );
				m_WinStationNameMap.Insert( StrWinStation, pResult );
			}

			return CWindowStation::refType( pResult, false );
		}
	}
	*/
	//--------------------------------------------------------------------------------
	CUser& CSession::User()
	{
		_WINQ_FCONTEXT( "CSession::User" );
		return m_User;
	}

//private:
	/*
	//--------------------------------------------------------------------------------
	bool CSession::EnumAllWinStations()
	{
		bool bResult = false;

		m_WinStationNameMap.Clear();
		bResult = EnumWindowStationsT( &CSession::EnumAllWinStationsProc, reinterpret_cast< Cmp_long_ptr >( this ) );
		m_bWinStationsEnumerated = true;

		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CSession::EnumWinStation( TCHAR* StrName )
	{
		bool bResult = false;
		CTString Name( StrName );
		WinStationNameMapItem Item( Name, 0 );
		m_WinStationNameMap.Append( Item );
		bResult = true;
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool __QCMP_STDCALLCONVENTION CSession::EnumAllWinStationsProc( TCHAR* StrName, Cmp_long_ptr lParam )
	{
		bool bResult = false;
		if( lParam != 0 )
		{
			CSession* pThis = reinterpret_cast< CSession* >( lParam );
			bResult = pThis->EnumWinStation( StrName );
		}
		return bResult;
	}		
	*/
}//nsWin32
