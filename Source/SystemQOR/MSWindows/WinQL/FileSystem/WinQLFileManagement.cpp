//WinQLFileManagement.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/CodeServices/ErrorSystem/Error.h"
#include "WinQL/CodeServices/ErrorSystem/Win32ErrDomain.h"
#include "WinQL/FileSystem/FileManagement.h"
#include "WinQL/DeviceIO/DeviceHandle.h"
#include "WinQAPI/Kernel32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	//--------------------------------------------------------------------------------

	__QOR_IMPLEMENT_OCLASS_LUID( CFileHelper );

	//--------------------------------------------------------------------------------
	CFileHelper::CFileHelper()
	{
		_WINQ_FCONTEXT( "CFileHelper::CFileHelper" );
	}

	//--------------------------------------------------------------------------------
	CFileHelper::~CFileHelper()
	{
		_WINQ_FCONTEXT( "CFileHelper::~CFileHelper" );
	}

	//--------------------------------------------------------------------------------
	bool CFileHelper::AreApisANSI()
	{
		_WINQ_FCONTEXT( "CFileHelper::AreApisANSI" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::AreFileApisANSI() ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CFileHelper::CancelSynchronousIo( nsWin32::CThread& Thread )
	{
		_WINQ_FCONTEXT( "CFileHelper::CancelSynchronousIo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::Instance().CancelSynchronousIo( Thread.Handle() ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CFileHelper::CheckNameLegalDOS8Dot3T( const TCHAR* lpName, char* lpOemName, unsigned long OemNameSize, int* pbNameContainsSpaces, int* pbNameLegal )
	{
		_WINQ_FCONTEXT( "CFileHelper::CheckNameLegalDOS8Dot3" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::CheckNameLegalDOS8Dot3( lpName, lpOemName, OemNameSize, pbNameContainsSpaces, pbNameLegal ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CFileHelper::Copy( const TCHAR* lpExistingFileName, const TCHAR* lpNewFileName, bool bFailIfExists )
	{
		_WINQ_FCONTEXT( "CFileHelper::Copy" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::CopyFile( lpExistingFileName, lpNewFileName, bFailIfExists ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CFileHelper::Copy( const TCHAR* lpExistingFileName, const TCHAR* lpNewFileName, nsWin32::LPPROGRESS_ROUTINE lpProgressRoutine, void* lpData, int* pbCancel, unsigned long dwCopyFlags )
	{
		_WINQ_FCONTEXT( "CFileHelper::Copy" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::CopyFileEx( lpExistingFileName, lpNewFileName, reinterpret_cast< ::LPPROGRESS_ROUTINE >( lpProgressRoutine ), lpData, pbCancel, dwCopyFlags ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CFileHelper::CopyTransacted( const TCHAR* lpExistingFileName, const TCHAR* lpNewFileName, nsWin32::LPPROGRESS_ROUTINE lpProgressRoutine, void* lpData, int* pbCancel, unsigned long dwCopyFlags, void* hTransaction )
	{
		_WINQ_FCONTEXT( "CFileHelper::CopyTransacted" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::Instance().CopyFileTransacted( lpExistingFileName, lpNewFileName, reinterpret_cast< ::LPPROGRESS_ROUTINE >( lpProgressRoutine ), lpData, pbCancel, dwCopyFlags, hTransaction ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CFileHelper::CreateHardLinkT( const TCHAR* lpFileName, const TCHAR* lpExistingFileName, nsWin32::LPSECURITY_ATTRIBUTES lpSecurityAttributes )
	{
		_WINQ_FCONTEXT( "CFileHelper::CreateHardLink" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::CreateHardLink( lpFileName, lpExistingFileName, reinterpret_cast< ::LPSECURITY_ATTRIBUTES >( lpSecurityAttributes ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CFileHelper::CreateHardLinkTransactedT( const TCHAR* lpFileName, const TCHAR* lpExistingFileName, nsWin32::LPSECURITY_ATTRIBUTES lpSecurityAttributes, void* hTransaction )
	{
		_WINQ_FCONTEXT( "CFileHelper::CreateHardLinkTransacted" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::Instance().CreateHardLinkTransacted( lpFileName, lpExistingFileName, reinterpret_cast< ::LPSECURITY_ATTRIBUTES >( lpSecurityAttributes ), hTransaction ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CFileHelper::CreateSymbolicLinkT( const TCHAR* lpSymlinkFileName, const TCHAR* lpTargetFileName, unsigned long dwFlags )
	{
		_WINQ_FCONTEXT( "CFileHelper::CreateSymbolicLinkT" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::CreateSymbolicLink( lpSymlinkFileName, lpTargetFileName, dwFlags ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CFileHelper::CreateSymbolicLinkTransactedT( const TCHAR* lpSymlinkFileName, const TCHAR* lpTargetFileName, unsigned long dwFlags, void* hTransaction )
	{
		_WINQ_FCONTEXT( "CFileHelper::CreateSymbolicLinkTransactedT" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::Instance().CreateSymbolicLinkTransacted( lpSymlinkFileName, lpTargetFileName, dwFlags, hTransaction ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CFileHelper::Delete( const TCHAR* lpFileName )
	{
		_WINQ_FCONTEXT( "CFileHelper::Delete" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::DeleteFile( lpFileName ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CFileHelper::DeleteTransacted( const TCHAR* lpFileName, void* hTransaction )
	{
		_WINQ_FCONTEXT( "CFileHelper::DeleteTransacted" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::Instance().DeleteFileTransacted( lpFileName, hTransaction ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CFileHelper::GetBinaryTypeT( const TCHAR* lpApplicationName, unsigned long* lpBinaryType )
	{
		_WINQ_FCONTEXT( "CFileHelper::GetBinaryType" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetBinaryType( lpApplicationName, lpBinaryType ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CFileHelper::GetCompressedSize( const TCHAR* lpFileName, unsigned long* lpFileSizeHigh )
	{
		_WINQ_FCONTEXT( "CFileHelper::GetCompressedSize" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::GetCompressedFileSize( lpFileName, lpFileSizeHigh );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CFileHelper::GetCompressedSizeTransacted( const TCHAR* lpFileName, unsigned long* lpFileSizeHigh, void* hTransaction )
	{
		_WINQ_FCONTEXT( "CFileHelper::GetCompressedSizeTransacted" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::Instance().GetCompressedFileSizeTransacted( lpFileName, lpFileSizeHigh, hTransaction );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CFileHelper::GetAttributes( const TCHAR* lpFileName )
	{
		_WINQ_FCONTEXT( "CFileHelper::GetAttributes" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::GetFileAttributes( lpFileName );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	bool CFileHelper::GetAttributes( const TCHAR* lpFileName, nsWin32::GET_FILEEX_INFO_LEVELS fInfoLevelId, void* lpFileInformation )
	{
		_WINQ_FCONTEXT( "CFileHelper::GetAttributes" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetFileAttributesEx( lpFileName, static_cast< ::GET_FILEEX_INFO_LEVELS >( fInfoLevelId ), lpFileInformation ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CFileHelper::GetAttributesTransacted( const TCHAR* lpFileName, nsWin32::GET_FILEEX_INFO_LEVELS fInfoLevelId, void* lpFileInformation, void* hTransaction )
	{
		_WINQ_FCONTEXT( "CFileHelper::GetAttributesTransacted" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::Instance().GetFileAttributesTransacted( lpFileName, static_cast< ::GET_FILEEX_INFO_LEVELS >( fInfoLevelId ), lpFileInformation, hTransaction ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CFileHelper::GetFullPathNameT( const TCHAR* lpFileName, unsigned long nBufferLength, TCHAR* lpBuffer, TCHAR** lpFilePart )
	{
		_WINQ_FCONTEXT( "CFileHelper::GetFullPathName" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::GetFullPathName( lpFileName, nBufferLength, lpBuffer, lpFilePart );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CFileHelper::GetFullPathNameTransactedT( const TCHAR* lpFileName, unsigned long nBufferLength, TCHAR* lpBuffer, TCHAR** lpFilePart, void* hTransaction )
	{
		_WINQ_FCONTEXT( "CFileHelper::GetFullPathNameTransactedT" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::Instance().GetFullPathNameTransacted( lpFileName, nBufferLength, lpBuffer, lpFilePart, hTransaction );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CFileHelper::GetLongPathNameT( const TCHAR* lpszShortPath, TCHAR* lpszLongPath, unsigned long cchBuffer )
	{
		_WINQ_FCONTEXT( "CFileHelper::GetLongPathName" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::GetLongPathName( lpszShortPath, lpszLongPath, cchBuffer );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CFileHelper::GetLongPathNameTransactedT( const TCHAR* lpszShortPath, TCHAR* lpszLongPath, unsigned long cchBuffer, void* hTransaction )
	{
		_WINQ_FCONTEXT( "CFileHelper::GetLongPathNameTransactedT" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::Instance().GetLongPathNameTransacted( lpszShortPath, lpszLongPath, cchBuffer, hTransaction );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CFileHelper::GetShortPathNameT( const TCHAR* lpszLongPath, TCHAR* lpszShortPath, unsigned long cchBuffer )
	{
		_WINQ_FCONTEXT( "CFileHelper::GetShortPathName" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::GetShortPathName( lpszLongPath, lpszShortPath, cchBuffer );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	unsigned int CFileHelper::GetTempName( const TCHAR* lpPathName, const TCHAR* lpPrefixString, unsigned int uUnique, TCHAR* lpTempFileName )
	{
		_WINQ_FCONTEXT( "CFileHelper::GetTempName" );
		UINT uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = CKernel32::GetTempFileName( lpPathName, lpPrefixString, uUnique, lpTempFileName );
		}__QOR_ENDPROTECT
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CFileHelper::GetTempPathT( unsigned long nBufferLength, TCHAR* lpBuffer )
	{
		_WINQ_FCONTEXT( "CFileHelper::GetTempPath" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::GetTempPath( nBufferLength, lpBuffer );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	bool CFileHelper::Move( const TCHAR* lpExistingFileName, const TCHAR* lpNewFileName )
	{
		_WINQ_FCONTEXT( "CFileHelper::Move" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::MoveFile( lpExistingFileName, lpNewFileName ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CFileHelper::Move( const TCHAR* lpExistingFileName, const TCHAR* lpNewFileName, unsigned long dwFlags )
	{
		_WINQ_FCONTEXT( "CFileHelper::Move" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::MoveFileEx( lpExistingFileName, lpNewFileName, dwFlags ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CFileHelper::MoveTransacted( const TCHAR* lpExistingFileName, const TCHAR* lpNewFileName, nsWin32::LPPROGRESS_ROUTINE lpProgressRoutine, void* lpData, unsigned long dwFlags, void* hTransaction )
	{
		_WINQ_FCONTEXT( "CFileHelper::MoveTransacted" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::Instance().MoveFileTransacted( lpExistingFileName, lpNewFileName, reinterpret_cast< ::LPPROGRESS_ROUTINE >( lpProgressRoutine ), lpData, dwFlags, hTransaction ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CFileHelper::MoveWithProgress( const TCHAR* lpExistingFileName, const TCHAR* lpNewFileName, nsWin32::LPPROGRESS_ROUTINE lpProgressRoutine, void* lpData, unsigned long dwFlags )
	{
		_WINQ_FCONTEXT( "CFileHelper::MoveWithProgress" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::MoveFileWithProgress( lpExistingFileName, lpNewFileName, reinterpret_cast< ::LPPROGRESS_ROUTINE >( lpProgressRoutine ), lpData, dwFlags ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CFileHelper::Replace( const TCHAR* lpReplacedFileName, const TCHAR* lpReplacementFileName, const TCHAR* lpBackupFileName, unsigned long dwReplaceFlags, void* lpExclude, void* lpReserved )
	{
		_WINQ_FCONTEXT( "CFileHelper::Replace" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::ReplaceFile( lpReplacedFileName, lpReplacementFileName, lpBackupFileName, dwReplaceFlags, lpExclude, lpReserved ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CFileHelper::SearchPathT( const TCHAR* lpPath, const TCHAR* lpFileName, const TCHAR* lpExtension, unsigned long nBufferLength, TCHAR* lpBuffer, TCHAR** lpFilePart )
	{
		_WINQ_FCONTEXT( "CFileHelper::SearchPath" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::SearchPath( lpPath, lpFileName, lpExtension, nBufferLength, lpBuffer, lpFilePart );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	void CFileHelper::SetApisToANSI()
	{
		_WINQ_FCONTEXT( "CFileHelper::SetApisToANSI" );
		__QOR_PROTECT
		{
			CKernel32::SetFileApisToANSI();
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	void CFileHelper::SetApisToOEM()
	{
		_WINQ_FCONTEXT( "CFileHelper::SetApisToOEM" );
		__QOR_PROTECT
		{
			CKernel32::SetFileApisToOEM();
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	bool CFileHelper::SetAttributes( const TCHAR* lpFileName, unsigned long dwFileAttributes )
	{
		_WINQ_FCONTEXT( "CFileHelper::SetAttributes" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetFileAttributes( lpFileName, dwFileAttributes ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CFileHelper::SetAttributesTransacted( const TCHAR* lpFileName, unsigned long dwFileAttributes, void* hTransaction )
	{
		_WINQ_FCONTEXT( "CFileHelper::SetAttributesTransacted" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::Instance().SetFileAttributesTransacted( lpFileName, dwFileAttributes, hTransaction ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CFileHelper::Wow64DisableWow64FsRedirection( void** OldValue )
	{
		_WINQ_FCONTEXT( "CFileHelper::Wow64DisableWow64FsRedirection" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::Instance().Wow64DisableWow64FsRedirection( OldValue ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned char CFileHelper::Wow64EnableWow64FsRedirection( unsigned char Wow64FsEnableRedirection )
	{
		_WINQ_FCONTEXT( "CFileHelper::Wow64EnableWow64FsRedirection" );
		BOOLEAN bResult = FALSE;
		__QOR_PROTECT
		{
			bResult = CKernel32::Instance().Wow64EnableWow64FsRedirection( Wow64FsEnableRedirection );
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CFileHelper::Wow64RevertWow64FsRedirection( void* OldValue )
	{
		_WINQ_FCONTEXT( "CFileHelper::Wow64RevertWow64FsRedirection" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::Instance().Wow64RevertWow64FsRedirection( OldValue ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned int CFileHelper::SetHandleCount( unsigned int uNumber )
	{
		_WINQ_FCONTEXT( "CFileHelper::SetHandleCount" );
		UINT uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = CKernel32::SetHandleCount( uNumber );
		}__QOR_ENDPROTECT
		return uiResult;
	}

}//nsWin32
