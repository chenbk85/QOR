//MSW_ctype.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Character type functions

#include "SystemQOR.h"

#if		(QOR_SYS_OS == QOR_SYS_MSW)

#include <errno.h>
#include "SystemQOR/MSWindows/MSW_ctype.h"
#include "WinQL/WinQL.h"
#include "WinQL/CodeServices/Text/WinQLCharDecl.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	Cctype::Cctype()
	{
		__QCS_MEMBER_FCONTEXT( "Cctype::Cctype" );
	}

	//--------------------------------------------------------------------------------
	Cctype::~Cctype()
	{
		__QCS_MEMBER_FCONTEXT( "Cctype::~Cctype" );
	}

	//--------------------------------------------------------------------------------
	//The isalnum() function shall test whether c is a character of class alpha or digit in the program's current locale
	//The isalnum() function shall return non-zero if c is an alphanumeric character; otherwise, it shall return 0.
	int Cctype::isalnum( int c )
	{
		_WINQ_FCONTEXT( "Cctype::isalnum" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = ( ( static_cast< nsWin32::IChar >( c ) ).isalnum() ) ? 1 : 0;
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cctype::isalnum_l( int c, locale_t l )
	{
		_WINQ_FCONTEXT( "Cctype::isalnum_l" );
		int iResult = 0;
		__QOR_PROTECT
		{
			//iResult = ( ( static_cast< nsWin32::IChar >( c ) ).isalnum() ) ? 1 : 0;
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	//The isalpha() function shall test whether c is a character of class alpha in the program's current locale
	//The isalpha() function shall return non-zero if c is an alphabetic character; otherwise, it shall return 0.
	
	int Cctype::isalpha( int c )
	{
		_WINQ_FCONTEXT( "Cctype::isalpha" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = ( ( static_cast< nsWin32::IChar >( c ) ).isalpha() ) ? 1 : 0;
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cctype::isalpha_l( int c, locale_t l )
	{
		_WINQ_FCONTEXT( "Cctype::isalpha_l" );
		int iResult = 0;
		//TODO:
		return iResult;
	}

	//--------------------------------------------------------------------------------
	//The isblank() function shall test whether c is a character of class blank in the program's current locale
	//The isblank() function shall return non-zero if c is a <blank>; otherwise, it shall return 0.
	
	int Cctype::isblank( int c )
	{
		_WINQ_FCONTEXT( "Cctype::isblank" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = ( ( static_cast< nsWin32::IChar >( c ) ).isblank() ) ? 1 : 0;
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cctype::isblank_l( int c, locale_t l )
	{
		_WINQ_FCONTEXT( "Cctype::isblank_l" );
		int iResult = 0;
		//TODO:
		return iResult;
	}

	//--------------------------------------------------------------------------------
	///The iscntrl() function shall test whether c is a character of class cntrl in the program's current locale
	///The iscntrl() function shall return non-zero if c is a control character; otherwise, it shall return 0.
	
	int Cctype::iscntrl( int c )
	{
		_WINQ_FCONTEXT( "Cctype::iscntrl" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = ( ( static_cast< nsWin32::IChar >( c ) ).iscntrl() ) ? 1 : 0;
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cctype::iscntrl_l( int c, locale_t l )
	{
		_WINQ_FCONTEXT( "Cctype::iscntrl_l" );
		int iResult = 0;
		//TODO:
		return iResult;
	}

	//--------------------------------------------------------------------------------
	///The isdigit() function shall test whether c is a character of class digit in the program's current locale
	///The isdigit() function shall return non-zero if c is a decimal digit; otherwise, it shall return 0.
	
	int Cctype::isdigit( int c )
	{
		_WINQ_FCONTEXT( "Cctype::isdigit" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = ( ( static_cast< nsWin32::IChar >( c ) ).isdigit() ) ? 1 : 0;
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cctype::isdigit_l( int c, locale_t l )
	{
		_WINQ_FCONTEXT( "Cctype::isdigit_l" );
		int iResult = 0;
		//TODO:
		return iResult;
	}

	//--------------------------------------------------------------------------------
	///The isgraph() function shall test whether c is a character of class graph in the program's current locale
	///The isgraph() function shall return non-zero if c is a character with a visible representation; otherwise, it shall return 0.
	
	int Cctype::isgraph( int c )
	{
		_WINQ_FCONTEXT( "Cctype::isgraph" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = ( ( static_cast< nsWin32::IChar >( c ) ).isgraph() ) ? 1 : 0;
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cctype::isgraph_l( int c, locale_t l )
	{
		_WINQ_FCONTEXT( "Cctype::isgraph_l" );
		int iResult = 0;
		//TODO:
		return iResult;
	}

	//--------------------------------------------------------------------------------
	///The islower() function shall test whether c is a character of class lower in the program's current locale
	///The islower() function shall return non-zero if c is a lowercase letter; otherwise, it shall return 0.
	
	int Cctype::islower( int c )
	{
		_WINQ_FCONTEXT( "Cctype::islower" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = ( ( static_cast< nsWin32::IChar >( c ) ).islower() ) ? 1 : 0;
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cctype::islower_l( int c, locale_t l )
	{
		_WINQ_FCONTEXT( "Cctype::islower_l" );
		int iResult = 0;
		//TODO:
		return iResult;
	}

	//--------------------------------------------------------------------------------
	///The isprint() function shall test whether c is a character of class print in the program's current locale
	///The isprint() function shall return non-zero if c is a printable character; otherwise, it shall return 0.
	int Cctype::isprint( int c )
	{
		_WINQ_FCONTEXT( "Cctype::isprint" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = ( ( static_cast< nsWin32::IChar >( c ) ).isprint() ) ? 1 : 0;
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cctype::isprint_l( int c, locale_t l )
	{
		_WINQ_FCONTEXT( "Cctype::isprint_l" );
		int iResult = 0;
		//TODO:
		return iResult;
	}

	//--------------------------------------------------------------------------------
	///The ispunct() function shall test whether c is a character of class punct in the program's current locale
	///The ispunct() function shall return non-zero if c is a punctuation character; otherwise, it shall return 0.
	int Cctype::ispunct( int c )
	{
		_WINQ_FCONTEXT( "Cctype::ispunct" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = ( ( static_cast< nsWin32::IChar >( c ) ).ispunct() ) ? 1 : 0;
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cctype::ispunct_l( int c, locale_t l )
	{
		_WINQ_FCONTEXT( "Cctype::ispunct_l" );
		int iResult = 0;
		//TODO:
		return iResult;
	}

	//--------------------------------------------------------------------------------
	///The isspace() function shall test whether c is a character of class space in the program's current locale
	///The isspace() function shall return non-zero if c is a white-space character; otherwise, it shall return 0.
	int Cctype::isspace( int c )
	{
		_WINQ_FCONTEXT( "Cctype::isspace" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = ( ( static_cast< nsWin32::IChar >( c ) ).isspace() ) ? 1 : 0;
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cctype::isspace_l( int c, locale_t l )
	{
		_WINQ_FCONTEXT( "Cctype::isspace_l" );
		int iResult = 0;
		//TODO:
		return iResult;
	}

	//--------------------------------------------------------------------------------
	///The isupper() function shall test whether c is a character of class upper in the program's current locale
	///The isupper() function shall return non-zero if c is an uppercase letter; otherwise, it shall return 0.
	int Cctype::isupper( int c )
	{
		_WINQ_FCONTEXT( "Cctype::isupper" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = ( ( static_cast< nsWin32::IChar >( c ) ).isupper() ) ? 1 : 0;
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cctype::isupper_l( int c, locale_t l )
	{
		_WINQ_FCONTEXT( "Cctype::isupper_l" );
		int iResult = 0;
		//TODO:
		return iResult;
	}

	//--------------------------------------------------------------------------------
	///The isxdigit() function shall test whether c is a character of class xdigit in the program's current locale
	///The isxdigit() function shall return non-zero if c is a hexadecimal digit; otherwise, it shall return 0.
	int Cctype::isxdigit( int c )
	{
		_WINQ_FCONTEXT( "Cctype::isxdigit" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = ( ( static_cast< nsWin32::IChar >( c ) ).isxdigit() ) ? 1 : 0;
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cctype::isxdigit_l( int c, locale_t l )
	{
		_WINQ_FCONTEXT( "Cctype::isxdigit_l" );
		int iResult = 0;
		//TODO:
		return iResult;
	}

	//--------------------------------------------------------------------------------
	///The tolower() function has as a domain a type int, the value of which is 
	///representable as an unsigned char or the value of EOF. If the argument has any 
	///other value, the behavior is undefined. If the argument of tolower() represents 
	///an uppercase letter, and there exists a corresponding lowercase letter [CX]   
	///(as defined by character type information in the program locale category 
	///LC_CTYPE ),  the result shall be the corresponding lowercase letter. All other 
	///arguments in the domain are returned unchanged.	
	///Upon successful completion, tolower() shall return the lowercase letter corresponding to the argument passed; otherwise, it shall return the argument unchanged.
	int Cctype::tolower( int c )
	{
		_WINQ_FCONTEXT( "Cctype::tolower" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = static_cast< int >( ( static_cast< nsWin32::IChar >( c ) ).tolower() );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cctype::tolower_l( int c, locale_t l )
	{
		_WINQ_FCONTEXT( "Cctype::tolower_l" );
		int iResult = 0;
		//TODO:
		return iResult;
	}

	//--------------------------------------------------------------------------------
	///The toupper() function has as a domain a type int, the value of which is 
	///representable as an unsigned char or the value of EOF. If the argument has any 
	///other value, the behavior is undefined. If the argument of toupper() represents 
	///a lowercase letter, and there exists a corresponding uppercase letter [CX]   
	///(as defined by character type information in the program locale category 
	///LC_CTYPE ),  the result shall be the corresponding uppercase letter. All other 
	///arguments in the domain are returned unchanged.
	///Upon successful completion, toupper() shall return the uppercase letter corresponding to the argument passed.
	int Cctype::toupper( int c )
	{
		_WINQ_FCONTEXT( "Cctype::toupper" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = static_cast< int >( ( static_cast< nsWin32::IChar >( c ) ).toupper() );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cctype::toupper_l( int c, locale_t l )
	{
		_WINQ_FCONTEXT( "Cctype::toupper_l" );
		int iResult = 0;
		//TODO:
		return iResult;
	}

	//--------------------------------------------------------------------------------
	///The isascii() function shall test whether c is a 7-bit US-ASCII character code.
	///The isascii() function is defined on all integer values.
	///The isascii() function shall return non-zero if c is a 7-bit US-ASCII character code between 0 and octal 0177 inclusive; otherwise, it shall return 0.
	int Cctype::isascii( int c )
	{
		_WINQ_FCONTEXT( "Cctype::isascii" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = static_cast< int >( ( static_cast< nsWin32::IChar >( c ) ).isascii() );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	///The toascii() function shall convert its argument into a 7-bit ASCII character.
	///The toascii() function shall return the value (c &0x7f).
	int Cctype::toascii( int c ) __QCMP_THROW0()
	{
		_WINQ_FCONTEXT( "Cctype::toascii" );
		int iResult = ( c & 0x7f );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cctype::_ismbbalnum( unsigned int c )
	{
		_WINQ_FCONTEXT( "Cctype::_imbbalnum" );
		int iResult = static_cast<int>( ( static_cast<nsWin32::IChar>( c ) ).isalnum() );
		return iResult;
	}

}//nsWin32

#endif//(QOR_SYS_OS == QOR_SYS_MSW)
