//MSW_socket.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "SystemQOR.h"

#if		(QOR_SYS_OS == QOR_SYS_MSW)

#include "SystemQOR/MSWindows/sys/MSW_socket.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	Csocket::Csocket()
	{
		__QCS_MEMBER_FCONTEXT( "Csocket::Csocket" );
	}

	//--------------------------------------------------------------------------------
	Csocket::~Csocket()
	{
		__QCS_MEMBER_FCONTEXT( "Csocket::~Csocket" );
	}

	//--------------------------------------------------------------------------------
	int Csocket::accept( int socket, sockaddr* __QCMP_RESTRICT address, socklen_t* __QCMP_RESTRICT address_length )
	{
		__QCS_MEMBER_FCONTEXT( "Csocket::accept" );
		int iResult = 0;
		__QOR_PROTECT
		{
			//TODO:
			/*
			map socket to a nsWin32 CSocket instance or a WinPosum wrapper for the same.
			call Accept on that instance
			translate if necessary and return the result
			*/
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Csocket::bind( int socket, const sockaddr* address, socklen_t address_length )
	{
		__QCS_MEMBER_FCONTEXT( "Csocket::bind" );
		int iResult = 0;
		__QOR_PROTECT
		{
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Csocket::connect( int socket, const sockaddr* address, socklen_t address_length )
	{
		__QCS_MEMBER_FCONTEXT( "Csocket::connect" );
		int iResult = 0;
		__QOR_PROTECT
		{
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Csocket::getpeername( int socket, sockaddr* __QCMP_RESTRICT address, socklen_t* __QCMP_RESTRICT address_length )
	{
		__QCS_MEMBER_FCONTEXT( "Csocket::getpeername" );
		int iResult = 0;
		__QOR_PROTECT
		{
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Csocket::getsockname( int socket, sockaddr* __QCMP_RESTRICT address, socklen_t* __QCMP_RESTRICT address_length )
	{
		__QCS_MEMBER_FCONTEXT( "Csocket::getsockname" );
		int iResult = 0;
		__QOR_PROTECT
		{
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Csocket::getsockopt( int socket, int level, int option_name, void* __QCMP_RESTRICT option_value, socklen_t* __QCMP_RESTRICT option_len )
	{
		__QCS_MEMBER_FCONTEXT( "Csocket::getsockopt" );
		int iResult = 0;
		__QOR_PROTECT
		{
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Csocket::listen( int socket, int backlog )
	{
		__QCS_MEMBER_FCONTEXT( "Csocket::listen" );
		int iResult = 0;
		__QOR_PROTECT
		{
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	ssize_t Csocket::recv( int socket, void* buffer, size_t length , int flags )
	{
		__QCS_MEMBER_FCONTEXT( "Csocket::recv" );
		int iResult = 0;
		__QOR_PROTECT
		{
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	ssize_t Csocket::recvfrom( int socket, void* __QCMP_RESTRICT buffer, size_t length, int flags, sockaddr* __QCMP_RESTRICT address, socklen_t* __QCMP_RESTRICT address_length )
	{
		__QCS_MEMBER_FCONTEXT( "Csocket::recvfrom" );
		int iResult = 0;
		__QOR_PROTECT
		{
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	ssize_t Csocket::recvmsg( int socket, msghdr* message, int flags )
	{
		__QCS_MEMBER_FCONTEXT( "Csocket::recvmsg" );
		int iResult = 0;
		__QOR_PROTECT
		{
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	ssize_t Csocket::send( int socket, const void* buffer, size_t length , int flags )
	{
		__QCS_MEMBER_FCONTEXT( "Csocket::send" );
		int iResult = 0;
		__QOR_PROTECT
		{
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	ssize_t Csocket::sendmsg( int socket, const msghdr* message , int flags )
	{
		__QCS_MEMBER_FCONTEXT( "Csocket::sendmsg" );
		int iResult = 0;
		__QOR_PROTECT
		{
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	ssize_t Csocket::sendto( int socket, const void* message, ::size_t length, int flags, const sockaddr* dest_addr, socklen_t dest_len )
	{
		__QCS_MEMBER_FCONTEXT( "Csocket::sendto" );
		int iResult = 0;
		__QOR_PROTECT
		{
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Csocket::setsockopt( int socket, int level, int option_name, const void* option_value, socklen_t option_len )
	{
		__QCS_MEMBER_FCONTEXT( "Csocket::setsockopt" );
		int iResult = 0;
		__QOR_PROTECT
		{
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Csocket::shutdown( int socket, int how )
	{
		__QCS_MEMBER_FCONTEXT( "Csocket::shutdown" );
		int iResult = 0;
		__QOR_PROTECT
		{
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Csocket::sockatmark( int socket )
	{
		__QCS_MEMBER_FCONTEXT( "Csocket::sockatmark" );
		int iResult = 0;
		__QOR_PROTECT
		{
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Csocket::socket( int domain, int type, int protocol )
	{
		__QCS_MEMBER_FCONTEXT( "Csocket::socket" );
		int iResult = 0;
		__QOR_PROTECT
		{
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Csocket::socketpair( int domain, int type, int protocol, int scoket_vector[ 2 ] )
	{
		__QCS_MEMBER_FCONTEXT( "Csocket::socketpair" );
		int iResult = 0;
		__QOR_PROTECT
		{
		}__QOR_ENDPROTECT
		return iResult;
	}

}//nsWin32

#endif	//(QOR_SYS_OS == QOR_SYS_MSW)
