// MSW_CRT0.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//C Runtime Implementation for Microsoft Windows

#include "SystemQOR.h"

#if		(QOR_SYS_OS == QOR_SYS_MSW)

#include "SystemQOR/MSWindows/MSW_CRT.h"
#include "WinQL/Application/Process/WinQLProcess.h"
#include "WinQL/Application/Threading/WinQLThread.h"

nsBaseCRT::CCRTImpl* g_pCRT;

//--------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_OCLASS_LUID( CCRTLocks );
	__QOR_IMPLEMENT_OCLASS_LUID( CCRTLocks::CLock );

	//--------------------------------------------------------------------------------
	__QOR_INTERFACE( __QSYS ) nsBaseCRT::CCRTImpl*& PlatformCRTPointer( void )
	{
		return g_pCRT;
	}

	//--------------------------------------------------------------------------------
    CmxCRT::CmxCRT()
	{
		__QCS_MEMBER_FCONTEXT( "CmxCRT::CmxCRT" );
        g_pCRT = this;
	}

	//--------------------------------------------------------------------------------
	CmxCRT::~CmxCRT()
	{
		__QCS_MEMBER_FCONTEXT( "CmxCRT::~CmxCRT" );
		g_pCRT->Cleanup();
	}

	//--------------------------------------------------------------------------------
	void CmxCRT::Init()
	{
		__QCS_MEMBER_FCONTEXT( "CmxCRT::Init" );
		/*
		m_stdlib.crtInit();
		m_time.crtInit();
		m_locale.crtInit();
		*/
	}

	//--------------------------------------------------------------------------------
	void CmxCRT::Cleanup()
	{
		__QCS_MEMBER_FCONTEXT( "CmxCRT::Cleanup" );
		//m_locale.crtCleanup();
		//m_time.crtCleanup();
		//m_stdlib.crtCleanup();
	}

	//--------------------------------------------------------------------------------
	void* CmxCRT::GetExecutionContext()
	{
		__QCS_MEMBER_FCONTEXT( "CmxCRT::GetExecutionContext" );
		void* pResult;			
		pResult = nsWin32::GetCurrentWin32Thread()->CRTThreadData();//CProcess::ThisProcess()->GetCRTContext();
		return pResult;
	}

	//--------------------------------------------------------------------------------
	CCRTLocks::CLock::CLock( CCRTLocks::E_Lock LockNum ) /*: 
    m_Lock( ( reinterpret_cast< CmxCRT* >(g_pCRT) )->Locks().m_aSections[ LockNum ] )*/
	{	
		__QCS_MEMBER_FCONTEXT( "CCRTLocks::CLock::CLock" );
	}

	//--------------------------------------------------------------------------------
	CCRTLocks::CLock::~CLock()
	{
		__QCS_MEMBER_FCONTEXT( "CCRTLocks::CLock::~CLock" );
    }

}//nsWin32


#endif//(QOR_SYS_OS == QOR_SYS_MSW)
