//MSW_time.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "SystemQOR.h"

#if		(QOR_SYS_OS == QOR_SYS_MSW)

#include "SystemQOR/MSWindows/MSW_time.h"
#include "WinQL/WinQL.h"
#include "WinQL/System/Clock/WinQLTime.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
    //--------------------------------------------------------------------------------
    Ctime::Ctime() : nsBaseCRT::Ctime()
    {
    }

	Ctime::~Ctime()
	{
	}

	//--------------------------------------------------------------------------------
	void Ctime::crtInit( void )
	{
		nsWin32::FILETIME st;
		nsWin32::CTimeHelper timeHelper;
		timeHelper.GetSystemTimeAsFileTime( &st );

        m_start_tics = (unsigned __int64)st.dwLowDateTime + ( ( (unsigned __int64)st.dwHighDateTime ) << 32 );
	}

	//--------------------------------------------------------------------------------
	void Ctime::crtCleanup( void )
	{
	}

	//--------------------------------------------------------------------------------
	//The clock() function shall return the implementation's best approximation to 
	//the processor time used by the process since the beginning of an 
	//implementation-defined era related only to the process invocation.
	clock_t Ctime::clock(void)
	{
		_WINQ_FCONTEXT( "Ctime::clock" );

        unsigned __int64 current_tics;
		nsWin32::FILETIME ct;
		nsWin32::CTimeHelper timeHelper;
		timeHelper.GetSystemTimeAsFileTime( &ct );
        
        current_tics = (unsigned __int64)ct.dwLowDateTime + ( ( (unsigned __int64)ct.dwHighDateTime ) << 32 );
        current_tics -= m_start_tics;                   // calculate the elapsed number of 100 nanosecond units
        return (clock_t)( current_tics / 10000 );       // return number of elapsed milliseconds
	}

	//--------------------------------------------------------------------------------
	char* Ctime::asctime_r( const tm* timeptr, char* szBuf )
	{
		//TODO:
		char* pResult = 0;
		return pResult;
	}

	//--------------------------------------------------------------------------------
	errno_t Ctime::asctime_s( char* pBuf, size_t SizeInBytes, const tm* pTm )
	{
		//TODO:
		errno_t Result = 0;
		return Result;
	}

	//--------------------------------------------------------------------------------
	int Ctime::clock_getcpuclockid( pid_t pid, clockid_t* pClockID )
	{
		int iResult = -1;
		return -1;
	}

	//--------------------------------------------------------------------------------
	int Ctime::clock_getres( clockid_t, timespec* )
	{
		//TODO:
		int iResult = -1;
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Ctime::clock_gettime( clockid_t, timespec* )
	{
		//TODO:
		int iResult = -1;
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Ctime::clock_nanosleep( clockid_t, int, const timespec*, timespec* )
	{
		//TODO:
		int iResult = -1;
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Ctime::clock_settime( clockid_t, const timespec* )
	{
		//TODO:
		int iResult = -1;
		return iResult;
	}

	//-------------------------------------------------------------------------------
	char* Ctime::ctime_r( const time_t*, char* )
	{
		//TODO:
		char* pResult = 0;
		return pResult;
	}

	//--------------------------------------------------------------------------------
	double Ctime::difftime( time_t time1, time_t time0 )
	{
		_WINQ_FCONTEXT( "Ctime::difftime" );
		double dResult = time1 - time0;
		return dResult;
	}

	//--------------------------------------------------------------------------------
	tm* Ctime::getdate( const char* )
	{
		//TODO:
		tm* pResult = 0;
		return pResult;
	}

	//--------------------------------------------------------------------------------
	time_t Ctime::mktime( struct tm* timeptr )
	{
		_WINQ_FCONTEXT( "Ctime::mktime" );
		time_t tResult = 0;
		return tResult;
	}

	//--------------------------------------------------------------------------------
	int Ctime::nanosleep( const timespec*, timespec* )
	{
		_WINQ_FCONTEXT( "Ctime::nanosleep" );
		//TODO:
		int iResult = -1;
		return iResult;
	}

	//--------------------------------------------------------------------------------
	time_t Ctime::time( time_t* timer )
	{
		_WINQ_FCONTEXT( "Ctime::time" );
		time_t tResult = 0;
		return tResult;
	}

	//--------------------------------------------------------------------------------
	char* Ctime::asctime( const struct tm* timeptr )
	{
		_WINQ_FCONTEXT( "Ctime::asctime" );
		char* pszResult = 0;
		return pszResult;
	}

	//--------------------------------------------------------------------------------
	char* Ctime::ctime( const time_t* timer )
	{
		_WINQ_FCONTEXT( "Ctime::ctime" );
		char* pszResult = 0;
		return pszResult;
	}

	//--------------------------------------------------------------------------------
	tm* Ctime::gmtime( const time_t* timer )
	{
		_WINQ_FCONTEXT( "Ctime::gmtime" );
		tm* pResult = 0;
		return pResult;
	}

	//--------------------------------------------------------------------------------
	tm* Ctime::gmtime_r( const time_t*, tm* )
	{
		//TODO:
		tm* pResult = 0;
		return pResult;
	}

	//--------------------------------------------------------------------------------
	tm* Ctime::localtime( const time_t* timer )
	{
		_WINQ_FCONTEXT( "Ctime::localtime" );
		tm* pResult = 0;
		return pResult;
	}

	//--------------------------------------------------------------------------------
	tm* Ctime::localtime_r( const time_t* , tm* )
	{
		//TODO:
		_WINQ_FCONTEXT( "Ctime::localtime_r" );
		tm* pResult = 0;
		return pResult;
	}

	//--------------------------------------------------------------------------------
	size_t Ctime::strftime( char* s, size_t maxsize, const char* format, const struct tm* timeptr )
	{
		_WINQ_FCONTEXT( "Ctime::strftime" );
		size_t stResult = 0;
		return stResult;
	}

	//--------------------------------------------------------------------------------
	size_t Ctime::strftime_l( char*, size_t, const char*, const tm*, locale_t )
	{
		_WINQ_FCONTEXT( "Ctime::strftime" );
		size_t stResult = 0;
		return stResult;
	}

	//--------------------------------------------------------------------------------
	char* Ctime::strptime( const char*, const char*, tm* )
	{
		_WINQ_FCONTEXT( "Ctime::strptime" );
		char* pResult = 0;
		return pResult;
	}

	//--------------------------------------------------------------------------------
	int Ctime::timer_create( clockid_t, sigevent*, timer_t* )
	{
		//TODO:
		int iResult = -1;
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Ctime::timer_delete( timer_t )
	{
		//TODO:
		int iResult = -1;
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Ctime::timer_gettime( timer_t, itimerspec* )
	{
		//TODO:
		int iResult = -1;
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Ctime::timer_getoverrun( timer_t )
	{
		//TODO:
		int iResult = -1;
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Ctime::timer_settime( timer_t, int, const itimerspec*, itimerspec* )
	{
		//TODO:
		int iResult = -1;
		return iResult;
	}

	//--------------------------------------------------------------------------------
	void Ctime::tzset( void )
	{
		//TODO:
	}

	//--------------------------------------------------------------------------------
	int& Ctime::daylight( void )
	{
		static int iDummy;
		return iDummy;
	}

	//--------------------------------------------------------------------------------
	long& Ctime::timezone( void )
	{
		static long lDummy;
		return lDummy;
	}

	//--------------------------------------------------------------------------------
	char**& Ctime::tzname( void )
	{
		static char** pDummy;
		return pDummy;
	}

}//nsWin32


#endif//(QOR_SYS_OS == QOR_SYS_MSW)
