//MSW_wctype.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "SystemQOR.h"

#if		(QOR_SYS_OS == QOR_SYS_MSW)

#include "SystemQOR/MSWindows/MSW_wctype.h"
#include "WinQL/WinQL.h"
#include "WinQL/CodeServices/Text/WinQLCharDecl.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	Cwctype::Cwctype()
	{
		__QCS_MEMBER_FCONTEXT( "Cwctype::Cwctype" );
	}

	//--------------------------------------------------------------------------------
	Cwctype::~Cwctype()
	{
		__QCS_MEMBER_FCONTEXT( "Cwctype::~Cwctype" );
	}

	//--------------------------------------------------------------------------------
	int Cwctype::iswascii( wint_t wc )
	{
		_WINQ_FCONTEXT( "Cwctype::iswascii" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = ( ( static_cast< nsWin32::UTF16Char >( wc ) ).isascii() ) ? 1 : 0;
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cwctype::iswalnum( wint_t wc )
	{
		_WINQ_FCONTEXT( "Cwctype::iswalnum" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = ( (static_cast< nsWin32::UTF16Char >(wc)).isalnum() ) ? 1 : 0;
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cwctype::iswalnum_l( wint_t, locale_t )
	{
		//TODO:
		return 0;
	}

	//--------------------------------------------------------------------------------
	int Cwctype::iswalpha( wint_t wc )
	{
		_WINQ_FCONTEXT( "Cwctype::iswalpha" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = ( ( static_cast< nsWin32::UTF16Char>(wc) ).isalpha() ) ? 1 : 0;
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cwctype::iswalpha_l( wint_t, locale_t )
	{
		//TODO:
		return 0;
	}

	//--------------------------------------------------------------------------------
	int Cwctype::iswblank( wint_t wc )
	{
		_WINQ_FCONTEXT( "Cwctype::iswblank" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = ( ( static_cast< nsWin32::UTF16Char>(wc) ).isblank() ) ? 1 : 0;
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cwctype::iswblank_l( wint_t, locale_t )
	{
		//TODO:
		return 0;
	}

	//--------------------------------------------------------------------------------
	int Cwctype::iswcntrl( wint_t wc )
	{
		_WINQ_FCONTEXT( "Cwctype::iswcntrl" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = ( ( static_cast< nsWin32::UTF16Char>(wc) ).iscntrl() ) ? 1 : 0;
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cwctype::iswcntrl_l( wint_t, locale_t )
	{
		//TODO:
		return 0;
	}

	//--------------------------------------------------------------------------------
	int Cwctype::iswdigit( wint_t wc )
	{
		_WINQ_FCONTEXT( "Cwctype::iswdigit" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = ( ( static_cast< nsWin32::UTF16Char>(wc) ).isdigit() ) ? 1 : 0;
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cwctype::iswdigit_l( wint_t, locale_t )
	{
		//TODO:
		return 0;
	}

	//--------------------------------------------------------------------------------
	int Cwctype::iswgraph( wint_t wc )
	{
		_WINQ_FCONTEXT( "Cwctype::iswgraph" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = ( ( static_cast< nsWin32::UTF16Char>(wc) ).isgraph() ) ? 1 : 0;
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cwctype::iswgraph_l( wint_t, locale_t )
	{
		//TODO:
		return 0;
	}

	//--------------------------------------------------------------------------------
	int Cwctype::iswlower( wint_t wc )
	{
		_WINQ_FCONTEXT( "Cwctype::iswlower" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = ( ( static_cast< nsWin32::UTF16Char>(wc) ).islower() ) ? 1 : 0;
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cwctype::iswlower_l( wint_t, locale_t )
	{
		//TODO:
		return 0;
	}

	//--------------------------------------------------------------------------------
	int Cwctype::iswprint( wint_t wc )
	{
		_WINQ_FCONTEXT( "Cwctype::iswprint" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = ( ( static_cast< nsWin32::UTF16Char>(wc) ).isprint() ) ? 1 : 0;
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cwctype::iswprint_l( wint_t, locale_t )
	{
		//TODO:
		return 0;
	}

	//--------------------------------------------------------------------------------
	int Cwctype::iswpunct( wint_t wc )
	{
		_WINQ_FCONTEXT( "Cwctype::iswpunct" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = ( ( static_cast< nsWin32::UTF16Char>(wc) ).ispunct() ) ? 1 : 0;
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cwctype::iswpunct_l( wint_t wc, locale_t )
	{
		//TODO:
		return 0;
	}

	//--------------------------------------------------------------------------------
	int Cwctype::iswspace( wint_t wc )
	{
		_WINQ_FCONTEXT( "Cwctype::iswspace" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = ( ( static_cast< nsWin32::UTF16Char>(wc) ).isspace() ) ? 1 : 0;
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cwctype::iswspace_l( wint_t wc, locale_t )
	{
		//TODO:
		return 0;
	}

	//--------------------------------------------------------------------------------
	int Cwctype::iswupper( wint_t wc )
	{
		_WINQ_FCONTEXT( "Cwctype::iswupper" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = ( ( static_cast< nsWin32::UTF16Char>(wc) ).isupper() ) ? 1 : 0;
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cwctype::iswupper_l( wint_t wc, locale_t )
	{
		//TODO:
		return 0;
	}

	//--------------------------------------------------------------------------------
	int Cwctype::iswxdigit( wint_t wc )
	{
		_WINQ_FCONTEXT( "Cwctype::iswxdigit" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = ( ( static_cast< nsWin32::UTF16Char>(wc) ).isxdigit() ) ? 1 : 0;
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cwctype::iswxdigit_l( wint_t wc, locale_t l)
	{
		//TODO:
		return 0;
	}

	//--------------------------------------------------------------------------------
	int Cwctype::iswctype( wint_t wc, wctype_t desc )
	{
		_WINQ_FCONTEXT( "Cwctype::iswctype" );
		int iResult = 0;//TODO: ( ( static_cast<UTF16Char>(wc) ).IsType( desc ) ) ? 1 : 0;
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cwctype::iswctype_l( wint_t wc, wctype_t desc, locale_t )
	{
		//TODO:
		return 0;
	}

	//--------------------------------------------------------------------------------
	///The wctype() function is defined for valid character class names as defined in the current locale. The property argument is a string identifying a generic character class for which codeset-specific type information is required. The following character class names shall be defined in all locales:
	///alnum, alpha, blank, cntrl, digit, graph, lower, print, punct, space, upper, xdigit
	///Additional character class names defined in the locale definition file (category LC_CTYPE ) can also be specified.
	///The function shall return a value of type wctype_t, which can be used as the second argument to subsequent calls of iswctype(). The wctype() function shall determine values of wctype_t according to the rules of the coded character set defined by character type information in the program's locale (category LC_CTYPE ). The values returned by wctype() shall be valid until a call to setlocale() that modifies the category LC_CTYPE .
	wctype_t Cwctype::wctype( const char* pproperty )
	{
		_WINQ_FCONTEXT( "Cwctype::wctype" );
		wctype_t tResult = 0;
		return tResult;
	}

	//--------------------------------------------------------------------------------
	wctype_t Cwctype::wctype_l( const char* pProperty, locale_t l )
	{
		_WINQ_FCONTEXT( "Cwctype::wctype_l" );
		wctype_t tResult = 0;
		return tResult;
	}

	//--------------------------------------------------------------------------------
	wint_t Cwctype::towlower( wint_t wc )
	{
		_WINQ_FCONTEXT( "Cwctype::towlower" );
		wint_t tResult = 0;
		__QOR_PROTECT
		{
			tResult = static_cast< wint_t >( ( static_cast< nsWin32::UTF16Char>(wc) ).tolower() );
		}__QOR_ENDPROTECT
		return tResult;
	}

	//--------------------------------------------------------------------------------
	wint_t Cwctype::towlower_l( wint_t wc, locale_t l )
	{
		//TODO:
		return 0;
	}

	//--------------------------------------------------------------------------------
	wint_t Cwctype::towupper( wint_t wc )
	{
		_WINQ_FCONTEXT( "Cwctype::towupper" );
		wint_t tResult = 0;
		__QOR_PROTECT
		{
			tResult = static_cast< wint_t >( ( static_cast< nsWin32::UTF16Char>(wc) ).toupper() );
		}__QOR_ENDPROTECT
		return tResult;
	}

	//--------------------------------------------------------------------------------
	wint_t Cwctype::towupper_l( wint_t wc, locale_t l )
	{
		//TODO:
		return 0;
	}

	//--------------------------------------------------------------------------------
	//Transliterate wc according to wctrans_t
	wint_t Cwctype::towctrans( wint_t wc, wctrans_t desc )
	{
		_WINQ_FCONTEXT( "Cwctype::towctrans" );
		wint_t tResult = 0;
		return tResult;
	}

	//--------------------------------------------------------------------------------
	wint_t Cwctype::towctrans_l( wint_t wc, wctrans_t desc, locale_t )
	{
		//TODO:
		return 0;
	}

	//--------------------------------------------------------------------------------
	//Return an enumerator for the named transliteration type, towupper, tolower
	wctrans_t Cwctype::wctrans( const char* pproperty )
	{
		_WINQ_FCONTEXT( "Cwctype::wctrans" );
		wctrans_t tResult = 0;
		return tResult;
	}

	//--------------------------------------------------------------------------------
	wctrans_t Cwctype::wctrans_l( const char* pProperty, locale_t l )
	{
		_WINQ_FCONTEXT( "Cwctype::wctrans_l" );
		wctrans_t tResult = 0;
		return tResult;
	}

}//nsWin32


#endif//(QOR_SYS_OS == QOR_SYS_MSW)

