//MSW_complex.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "SystemQOR.h"

#if		(QOR_SYS_OS == QOR_SYS_MSW)

#include "SystemQOR/MSWindows/MSW__complex.h"
#include "CodeQOR/Tracing/FunctionContextBase.h"
#include <errno.h>

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	Ccomplex::Ccomplex()
	{
		__QCS_MEMBER_FCONTEXT( "Ccomplex::Ccomplex" );
	}

	//--------------------------------------------------------------------------------
	Ccomplex::~Ccomplex()
	{
		__QCS_MEMBER_FCONTEXT( "Ccomplex::~Ccomplex" );
	}

    //--------------------------------------------------------------------------------
    double_complex Ccomplex::cacos( double_complex z )
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::cacos" );
        double_complex Result;
        double_complex y = casin ( z );
        __CQOR_REAL_(Result) = (double) M_PI_2 - __CQOR_IMAG_(y);
        __CQOR_IMAG_(Result) = - __CQOR_IMAG_(y);

        return Result;
    }

    //--------------------------------------------------------------------------------
    float_complex Ccomplex::cacosf( float_complex z )
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::cacosf" );
        float_complex Result;
        float_complex y = casinf( z );
        __CQOR_REAL_(Result) = (float) M_PI_2 - __CQOR_REAL_(y);
        __CQOR_IMAG_(Result) = - __CQOR_IMAG_(y);

        return Result;
    }

    //--------------------------------------------------------------------------------
    long_double_complex Ccomplex::cacosl( long_double_complex z )
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::cacol" );
        long_double_complex Result;
        long_double_complex y = casinl( z );
        __CQOR_REAL_(Result) = ( long double ) M_PI_2 - __CQOR_REAL_(y);
        __CQOR_IMAG_(Result) = - __CQOR_IMAG_(y);

        return Result;
    }

    //--------------------------------------------------------------------------------
    double_complex Ccomplex::casin( double_complex z )
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::casin" );
        double_complex Result;
        double x, y;

        x = __CQOR_REAL_(z);
        y = __CQOR_IMAG_(z);

        if( y == 0.0 )
        {
            __CQOR_REAL_(Result) = asin( x );
            __CQOR_IMAG_(Result) = 0.0;
        }
        else  // -I * clog(I * Z + csqrt(1.0 - Z * Z)))
        {
            double_complex ZZ;

            // Z * Z = ((x - y) * (x + y)) + (2.0 * x * y) * I
            // calculate 1 - Z * Z
            __CQOR_REAL_(ZZ) = 1.0 - ( x - y ) * ( x + y );
            __CQOR_IMAG_(ZZ) = -2.0 * x * y;
            ZZ = csqrt( ZZ );

            // add  I * Z  to ZZ

            __CQOR_REAL_(ZZ) -= y;
            __CQOR_IMAG_(ZZ) += x;

            ZZ = clog( ZZ );

            // mult by -I
            __CQOR_REAL_(Result) = __CQOR_IMAG_(ZZ);
            __CQOR_IMAG_(Result) = - __CQOR_REAL_(ZZ);
        }

        return Result;
    }

    //--------------------------------------------------------------------------------
    float_complex Ccomplex::casinf(float_complex z)
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::casinf" );

        float_complex Result;
        float x, y;

        x = __CQOR_REAL_(z);
        y = __CQOR_IMAG_(z);

        if( y == 0.0f )
        {
            __CQOR_REAL_(Result) = asinf( x );
            __CQOR_IMAG_(Result) = 0.0f;
        }
        else  // -I * clog(I * Z + csqrt(1.0 - Z * Z)))
        {
            float_complex ZZ;

            // Z * Z = ((x - y) * (x + y)) + (2.0 * x * y) * I
            // calculate 1 - Z * Z
            __CQOR_REAL_(ZZ) = 1.0f - ( x - y ) * ( x + y );
            __CQOR_IMAG_(ZZ) = -2.0f * x * y;
            ZZ = csqrtf( ZZ );

            // add  I * Z  to ZZ
            __CQOR_REAL_(ZZ) -= y;
            __CQOR_IMAG_(ZZ) += x;

            ZZ = clogf( ZZ );

            // mult by -I
            __CQOR_REAL_(Result) = __CQOR_IMAG_(ZZ);
            __CQOR_IMAG_(Result) = - __CQOR_REAL_(ZZ);
        }

        return Result;
    }

    //--------------------------------------------------------------------------------
    long_double_complex Ccomplex::casinl(long_double_complex z)
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::casinl" );

        long_double_complex Result;
        long double x, y;

        x = __CQOR_REAL_(z);
        y = __CQOR_IMAG_(z);

        if( y == 0.0L )
        {
            __CQOR_REAL_(Result) = asinl( x );
            __CQOR_IMAG_(Result) = 0.0L;
        }
        else  // -I * clog(I * Z + csqrt(1.0 - Z * Z)))
        {
            long_double_complex ZZ;

            // Z * Z = ((x - y) * (x + y)) + (2.0 * x * y) * I
            // calculate 1 - Z * Z
            __CQOR_REAL_(ZZ) = 1.0L - ( x - y ) * ( x + y );
            __CQOR_IMAG_(ZZ) = -2.0L * x * y;
            ZZ = csqrtl( ZZ );

            // add  I * Z  to ZZ

            __CQOR_REAL_(ZZ) -= y;
            __CQOR_IMAG_(ZZ) += x;

            ZZ = clogl( ZZ );

            // mult by -I
            __CQOR_REAL_(Result) = __CQOR_IMAG_(ZZ);
            __CQOR_IMAG_(Result) = - __CQOR_REAL_(ZZ);
        }

        return Result;
    }

    //--------------------------------------------------------------------------------
    double_complex Ccomplex::catan( double_complex z )
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::catan" );

        double_complex Result;
        double_complex Tmp;
        double x = __CQOR_REAL_(z);
        double y = __CQOR_IMAG_(z);

        if( x == 0.0 && ( 1.0 - fabs( y ) ) == 0.0 )
        {
            errno = ERANGE;
            __CQOR_REAL_(Result) = ASSIGN_HUGE_VAL;
            __CQOR_IMAG_(Result) = ASSIGN_HUGE_VAL;
        }
        else if( isinf( hypot( x, y ) ) )
        {
            __CQOR_REAL_(Result) = (double)( x > 0 ? M_PI_2 : -M_PI_2 );
            __CQOR_IMAG_(Result) = 0.0;
        }
        else
        {
            __CQOR_REAL_(Tmp) = - x;
            __CQOR_IMAG_(Tmp) = 1.0 - y;

            __CQOR_REAL_(Result) = x;
            __CQOR_IMAG_(Result) = y + 1.0;

            Tmp = clog( Result / Tmp );
            __CQOR_REAL_(Result) = - 0.5 * __CQOR_IMAG_(Tmp);
            __CQOR_IMAG_(Result) =  0.5 * __CQOR_REAL_(Tmp);
        }

        return Result;
    }

    //--------------------------------------------------------------------------------
    float_complex Ccomplex::catanf( float_complex z )
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::catanf" );

        float_complex Result;
        float_complex Tmp;
        float x = __CQOR_REAL_(z);
        float y = __CQOR_IMAG_(z);

        if( x == 0.0f && ( 1.0f - fabsf( y ) ) == 0.0f )
        {
            errno = ERANGE;
            __CQOR_REAL_(Result) = ASSIGN_HUGE_VALF;
            __CQOR_IMAG_(Result) = ASSIGN_HUGE_VALF;
        }
        else if( isinf( hypotf( x, y ) ) )
        {
            __CQOR_REAL_(Result) = (float)( x > 0 ? M_PI_2 : -M_PI_2 );
            __CQOR_IMAG_(Result) = 0.0f;
        }
        else
        {
            __CQOR_REAL_(Tmp) = - x;
            __CQOR_IMAG_(Tmp) = 1.0f - y;

            __CQOR_REAL_(Result) = x;
            __CQOR_IMAG_(Result) = y + 1.0f;

            Tmp = clogf( Result / Tmp );
            __CQOR_REAL_(Result) = - 0.5f * __CQOR_IMAG_(Tmp);
            __CQOR_IMAG_(Result) =  0.5f * __CQOR_REAL_(Tmp);
        }

        return Result;
    }

    //--------------------------------------------------------------------------------
    long_double_complex Ccomplex::catanl( long_double_complex z )
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::catanl" );

        long_double_complex Result;
        long_double_complex Tmp;
        long double x = __CQOR_REAL_(z);
        long double y = __CQOR_IMAG_(z);

        if( x == 0.0L && ( 1.0L - fabsl( y ) ) == 0.0L )
        {
            errno = ERANGE;
            __CQOR_REAL_(Result) = ASSIGN_HUGE_VALL;
            __CQOR_IMAG_(Result) = ASSIGN_HUGE_VALL;
        }
        else if( isinf( hypotl( x, y ) ) )
        {
            __CQOR_REAL_(Result) = ( x > 0 ? M_PI_2 : -M_PI_2 );
            __CQOR_IMAG_(Result) = 0.0L;
        }
        else
        {
            __CQOR_REAL_(Tmp) = - x;
            __CQOR_IMAG_(Tmp) = 1.0L - y;

            __CQOR_REAL_(Result) = x;
            __CQOR_IMAG_(Result) = y + 1.0L;

            Tmp = clogl( Result / Tmp );
            __CQOR_REAL_(Result) = - 0.5L * __CQOR_IMAG_(Tmp);
            __CQOR_IMAG_(Result) =  0.5L * __CQOR_REAL_(Tmp);
        }

        return Result;
    }

    //--------------------------------------------------------------------------------
    double_complex Ccomplex::ccos( double_complex z )
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::ccos" );

        double_complex Result;
        __CQOR_REAL_(Result) = cos( __CQOR_REAL_(z) ) * cosh ( __CQOR_IMAG_(z) );
        __CQOR_IMAG_(Result) = -sin( __CQOR_REAL_(z) ) * sinh ( __CQOR_IMAG_(z) );
        return Result;
    }

    //--------------------------------------------------------------------------------
    float_complex Ccomplex::ccosf( float_complex z )
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::ccosf" );

        float_complex Result;
        __CQOR_REAL_(Result) = cosf( __CQOR_REAL_(z) ) * coshf( __CQOR_IMAG_(z) );
        __CQOR_IMAG_(Result) = -sinf( __CQOR_REAL_(z) ) * sinhf( __CQOR_IMAG_(z) );
        return Result;
    }

    //--------------------------------------------------------------------------------
    long_double_complex Ccomplex::ccosl( long_double_complex z )
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::ccosl" );

        long_double_complex Result;
        __CQOR_REAL_(Result) = cosl( __CQOR_REAL_(z) ) * coshl( __CQOR_IMAG_(z) );
        __CQOR_IMAG_(Result) = -sinl( __CQOR_REAL_(z) ) * sinhl( __CQOR_IMAG_(z) );
        return Result;
    }

    //--------------------------------------------------------------------------------
    double_complex Ccomplex::csin( double_complex z )
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::csin" );

        double_complex Result;
        __CQOR_REAL_(Result) = sin( __CQOR_REAL_(z) ) * cosh( __CQOR_IMAG_(z) );
        __CQOR_IMAG_(Result)= cos( __CQOR_REAL_(z) ) * sinh( __CQOR_IMAG_(z) );
        return Result;
    }

    //--------------------------------------------------------------------------------
    float_complex Ccomplex::csinf(float_complex z)
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::csinf" );

        float_complex Result;
        __CQOR_REAL_(Result) = sinf( __CQOR_REAL_(z) ) * coshf( __CQOR_IMAG_(z) );
        __CQOR_IMAG_(Result) = cosf( __CQOR_REAL_(z) ) * sinhf( __CQOR_IMAG_(z) );
        return Result;
    }

    //--------------------------------------------------------------------------------
    long_double_complex Ccomplex::csinl(long_double_complex z)
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::csinl" );

        long_double_complex Result;
        __CQOR_REAL_(Result) = sinl( __CQOR_REAL_(z) ) * coshl( __CQOR_IMAG_(z) );
        __CQOR_IMAG_(Result) = cosl( __CQOR_REAL_(z) ) * sinhl( __CQOR_IMAG_(z) );
        return Result;
    }

    //--------------------------------------------------------------------------------
    double_complex Ccomplex::ctan(double_complex z)
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::ctan" );

        double_complex Result;
        double two_I = 2.0 * __CQOR_IMAG_(z);
        double two_R = 2.0 * __CQOR_REAL_(z);
        double denom = cos( two_R ) + cosh( two_I );

        if( denom == 0.0 )
        {
            errno = ERANGE;
            __CQOR_REAL_(Result) = ASSIGN_HUGE_VAL;
            __CQOR_IMAG_(Result) = ASSIGN_HUGE_VAL;
        }
        else if( isinf ( denom ) )
        {
            errno = ERANGE;
            __CQOR_REAL_(Result) = 0.0;
            __CQOR_IMAG_(Result) = two_I > 0 ? 1.0 : -1.0;
        }
        else
        {
            __CQOR_REAL_(Result) = sin( two_R ) / denom;
            __CQOR_IMAG_(Result) = sinh( two_I ) / denom;
        }
        return Result;
    }

    //--------------------------------------------------------------------------------
    float_complex Ccomplex::ctanf(float_complex z)
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::ctanf" );

        float_complex Result;
        float two_I = 2.0f * __CQOR_IMAG_(z);
        float two_R = 2.0f * __CQOR_REAL_(z);
        float denom = cosf( two_R ) + coshf( two_I );
        if( denom == 0.0f )
        {
            errno = ERANGE;
            __CQOR_REAL_(Result) = ASSIGN_HUGE_VALF;
            __CQOR_IMAG_(Result) = ASSIGN_HUGE_VALF;
        }
        else if( isinf ( denom ) )
        {
            errno = ERANGE;
            __CQOR_REAL_(Result) = 0.0;
            __CQOR_IMAG_(Result) = two_I > 0 ? 1.0f : -1.0f;
        }
        else
        {
            __CQOR_REAL_(Result) = sinf( two_R ) / denom;
            __CQOR_IMAG_(Result) = sinhf( two_I ) / denom;
        }
        return Result;
    }

    //--------------------------------------------------------------------------------
    long_double_complex Ccomplex::ctanl(long_double_complex z)
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::ctanl" );

        long_double_complex Result;
        long double two_I = 2.0L * __CQOR_IMAG_(z);
        long double two_R = 2.0L * __CQOR_REAL_(z);
        long double denom = cosl( two_R ) + coshl( two_I );

        if( denom == 0.0L )
        {
            errno = ERANGE;
            __CQOR_REAL_(Result) = ASSIGN_HUGE_VALL;
            __CQOR_IMAG_(Result) = ASSIGN_HUGE_VALL;
        }
        else if( isinf ( denom ) )
        {
            errno = ERANGE;
            __CQOR_REAL_(Result) = 0.0;
            __CQOR_IMAG_(Result) = two_I > 0 ? 1.0L : -1.0L;
        }
        else
        {
            __CQOR_REAL_(Result) = sinl( two_R ) / denom;
            __CQOR_IMAG_(Result) = sinhl( two_I ) / denom;
        }
        return Result;
    }

    //--------------------------------------------------------------------------------
    double_complex Ccomplex::cacosh(double_complex z)
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::cacosh" );

        double_complex Result;
        double_complex Tmp;
        Tmp = casin( z );
        __CQOR_REAL_(Result) = __CQOR_IMAG_(Tmp);
        __CQOR_IMAG_(Result) = (double)( M_PI_2 - __CQOR_REAL_(Tmp) );
        return Result;
    }

    //--------------------------------------------------------------------------------
    float_complex Ccomplex::cacoshf( float_complex z )
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::cacoshf" );

        float_complex Result;
        float_complex Tmp;
        Tmp = casinf( z );
        __CQOR_REAL_(Result) = __CQOR_IMAG_(Tmp);
        __CQOR_IMAG_(Result) = (float)( M_PI_2 - __CQOR_REAL_(Tmp) );
        return Result;
    }

    //--------------------------------------------------------------------------------
    long_double_complex Ccomplex::cacoshl( long_double_complex z )
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::cacoshl" );

        long_double_complex Result;
        long_double_complex Tmp;
        Tmp = casinl( z );
        __CQOR_REAL_(Result) = __CQOR_IMAG_(Tmp);
        __CQOR_IMAG_(Result) = M_PI_2 - __CQOR_REAL_(Tmp);
        return Result;
    }

    //--------------------------------------------------------------------------------
    double_complex Ccomplex::casinh( double_complex z )
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::casinh" );

        double_complex Result;
        double_complex Tmp;
        __CQOR_REAL_(Tmp) = - __CQOR_IMAG_(z);
        __CQOR_IMAG_(Tmp) = __CQOR_REAL_(z);
        Tmp = casin( Tmp );
        __CQOR_REAL_(Result) = __CQOR_IMAG_(Tmp);
        __CQOR_IMAG_(Result) = -__CQOR_REAL_(Tmp);
        return Result;
    }

    //--------------------------------------------------------------------------------
    float_complex Ccomplex::casinhf( float_complex z )
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::casinhf" );

        float_complex Result;
        float_complex Tmp;
        __CQOR_REAL_(Tmp) = - __CQOR_IMAG_(z);
        __CQOR_IMAG_(Tmp) = __CQOR_REAL_(z);
        Tmp = casinf( Tmp );
        __CQOR_REAL_(Result) = __CQOR_IMAG_(Tmp);
        __CQOR_IMAG_(Result) = - __CQOR_REAL_(Tmp);
        return Result;
    }

    //--------------------------------------------------------------------------------
    long_double_complex Ccomplex::casinhl( long_double_complex z )
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::casinhl" );
        long_double_complex Result;
        long_double_complex Tmp;
        __CQOR_REAL_(Tmp) = - __CQOR_IMAG_(z);
        __CQOR_IMAG_(Tmp) = __CQOR_REAL_(z);
        Tmp = casinl( Tmp );
        __CQOR_REAL_(Result) = __CQOR_IMAG_(Tmp);
        __CQOR_IMAG_(Result) = - __CQOR_REAL_(Tmp);
        return Result;
    }

    //--------------------------------------------------------------------------------
    double_complex Ccomplex::catanh(double_complex z)
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::catanh" );

        double_complex Result;
        double_complex Tmp;
        __CQOR_REAL_(Tmp) = - __CQOR_IMAG_(z);
        __CQOR_IMAG_(Tmp) = __CQOR_REAL_(z);
        Tmp = catan( Tmp );
        __CQOR_REAL_(Result) = __CQOR_IMAG_(Tmp);
        __CQOR_IMAG_(Result) = - __CQOR_REAL_(Tmp);
        return Result;
    }

    //--------------------------------------------------------------------------------
    float_complex Ccomplex::catanhf(float_complex z)
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::catanhf" );

        float_complex Result;
        float_complex Tmp;
        __CQOR_REAL_(Tmp) = - __CQOR_IMAG_(z);
        __CQOR_IMAG_(Tmp) = __CQOR_REAL_(z);
        Tmp = catanf( Tmp );
        __CQOR_REAL_(Result) = __CQOR_IMAG_(Tmp);
        __CQOR_IMAG_(Result) = - __CQOR_REAL_(Tmp);
        return Result;
    }

    //--------------------------------------------------------------------------------
    long_double_complex Ccomplex::catanhl(long_double_complex z)
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::catanhl" );

        long_double_complex Result;
        long_double_complex Tmp;
        __CQOR_REAL_(Tmp) = - __CQOR_IMAG_(z);
        __CQOR_IMAG_(Tmp) = __CQOR_REAL_(z);
        Tmp = catanl( Tmp );
        __CQOR_REAL_(Result) = __CQOR_IMAG_(Tmp);
        __CQOR_IMAG_(Result) = - __CQOR_REAL_(Tmp);
        return Result;
    }

    //--------------------------------------------------------------------------------
    double_complex Ccomplex::ccosh(double_complex z)
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::ccosh" );

        double_complex Result;
        __CQOR_REAL_(Result) = cosh( __CQOR_REAL_(z) ) * cos( __CQOR_IMAG_(z) );
        __CQOR_IMAG_(Result) = sinh( __CQOR_REAL_(z) ) * sin( __CQOR_IMAG_(z) );
        return Result;
    }

    //--------------------------------------------------------------------------------
    float_complex Ccomplex::ccoshf( float_complex z )
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::ccoshf" );

        float_complex Result;
        __CQOR_REAL_(Result) = coshf( __CQOR_REAL_(z) ) * cosf( __CQOR_IMAG_(z) );
        __CQOR_IMAG_(Result) = sinhf( __CQOR_REAL_(z) ) * sinf( __CQOR_IMAG_(z) );
        return Result;
    }

    //--------------------------------------------------------------------------------
    long_double_complex Ccomplex::ccoshl( long_double_complex z )
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::ccoshl" );

        long_double_complex Result;
        __CQOR_REAL_(Result) = coshl( __CQOR_REAL_(z) ) * cosl( __CQOR_IMAG_(z) );
        __CQOR_IMAG_(Result) = sinhl( __CQOR_REAL_(z) ) * sinl( __CQOR_IMAG_(z) );
        return Result;
    }

    //--------------------------------------------------------------------------------
    double_complex Ccomplex::csinh( double_complex z )
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::csinh" );

        double_complex Result;
        __CQOR_REAL_(Result) = sinh( __CQOR_REAL_(z) ) * cos( __CQOR_IMAG_(z) );
        __CQOR_IMAG_(Result) = cosh( __CQOR_REAL_(z) ) * sin( __CQOR_IMAG_(z) );
        return Result;
    }

    //--------------------------------------------------------------------------------
    float_complex Ccomplex::csinhf(float_complex z)
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::csinhf" );

        float_complex Result;
        __CQOR_REAL_(Result) = sinhf( __CQOR_REAL_(z) ) * cosf( __CQOR_IMAG_(z) );
        __CQOR_IMAG_(Result) = coshf( __CQOR_REAL_(z) ) * sinf( __CQOR_IMAG_(z) );
        return Result;
    }

    //--------------------------------------------------------------------------------
    long_double_complex Ccomplex::csinhl( long_double_complex z )
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::csinhl" );

        long_double_complex Result;
        __CQOR_REAL_(Result) = sinhl( __CQOR_REAL_(z) ) * cosl( __CQOR_IMAG_(z) );
        __CQOR_IMAG_(Result) = coshl( __CQOR_REAL_(z) ) * sinl( __CQOR_IMAG_(z) );
        return Result;
    }

    //--------------------------------------------------------------------------------
    double_complex Ccomplex::ctanh( double_complex z )
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::ctanh" );

        double_complex Result;
        double two_R = 2.0 * __CQOR_REAL_(z);
        double two_I = 2.0 * __CQOR_IMAG_(z);
        double denom = cosh( two_R ) + cos( two_I );

        if( denom == 0.0 )
        {
            errno = ERANGE;
            __CQOR_REAL_(Result) = ASSIGN_HUGE_VAL;
            __CQOR_IMAG_(Result) = ASSIGN_HUGE_VAL;
        }
        else if( isinf ( denom ) )
        {
            errno = ERANGE;
            __CQOR_REAL_(Result) = two_R > 0 ? 1.0 : -1.0;
            __CQOR_IMAG_(Result) = 0.0;
        }
        else
        {
            __CQOR_REAL_(Result) = sinh( two_R ) / denom;
            __CQOR_IMAG_(Result) = sin( two_I ) / denom;
        }

        return Result;
    }

    //--------------------------------------------------------------------------------
    float_complex Ccomplex::ctanhf( float_complex z )
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::ctanhf" );

        float_complex Result;
        float two_R = 2.0f * __CQOR_REAL_(z);
        float two_I = 2.0f * __CQOR_IMAG_(z);
        float denom = coshf( two_R ) + cosf( two_I );

        if( denom == 0.0f )
        {
            errno = ERANGE;
            __CQOR_REAL_(Result) = ASSIGN_HUGE_VALF;
            __CQOR_IMAG_(Result) = ASSIGN_HUGE_VALF;
        }
        else if( isinf ( denom ) )
        {
            errno = ERANGE;
            __CQOR_REAL_(Result) = two_R > 0 ? 1.0f : -1.0f;
            __CQOR_IMAG_(Result) = 0.0f;
        }
        else
        {
            __CQOR_REAL_(Result) = sinhf( two_R ) / denom;
            __CQOR_IMAG_(Result) = sinf( two_I ) / denom;
        }
        return Result;
    }

    //--------------------------------------------------------------------------------
    long_double_complex Ccomplex::ctanhl(long_double_complex z)
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::ctanhl" );

        long_double_complex Result;

        long double two_R = 2.0L * __CQOR_REAL_(z);
        long double two_I = 2.0L * __CQOR_IMAG_(z);
        long double denom = coshl( two_R ) + cosl( two_I );

        if( denom == 0.0L )
        {
            errno = ERANGE;
            __CQOR_REAL_(Result) = ASSIGN_HUGE_VALL;
            __CQOR_IMAG_(Result) = ASSIGN_HUGE_VALL;
        }
        else if( isinf ( denom ) )
        {
            errno = ERANGE;
            __CQOR_REAL_(Result) = two_R > 0 ? 1.0L : -1.0L;
            __CQOR_IMAG_(Result) = 0.0L;
        }
        else
        {
            __CQOR_REAL_(Result) = sinhl( two_R ) / denom;
            __CQOR_IMAG_(Result) = sinl( two_I ) / denom;
        }
        return Result;
    }

    //--------------------------------------------------------------------------------
    double_complex Ccomplex::cexp(double_complex z)
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::cexp" );

        double_complex Result;
        double rho = exp( __CQOR_REAL_(z) );
        __CQOR_REAL_(Result) = rho * cos( __CQOR_IMAG_(z) );
        __CQOR_IMAG_(Result) = rho * sin( __CQOR_IMAG_(z) );
        return Result;
    }

    //--------------------------------------------------------------------------------
    float_complex Ccomplex::cexpf(float_complex z)
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::cexpf" );

        float_complex Result;
        double rho = exp( __CQOR_REAL_(z) );
        __CQOR_REAL_(Result) = (float)( rho * cosf( __CQOR_IMAG_(z) ) );
        __CQOR_IMAG_(Result) = (float)( rho * sinf( __CQOR_IMAG_(z) ) );
        return Result;
    }

    //--------------------------------------------------------------------------------
    long_double_complex Ccomplex::cexpl(long_double_complex z)
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::cexpl" );

        long_double_complex Result;
        long double rho = expl( __CQOR_REAL_(z) );
        __CQOR_REAL_(Result) = rho * cosl( __CQOR_IMAG_(z) );
        __CQOR_IMAG_(Result) = rho * sinl( __CQOR_IMAG_(z) );
        return Result;
    }

    //--------------------------------------------------------------------------------
    double_complex Ccomplex::clog(double_complex z)
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::clog" );

        double_complex Result;
        __CQOR_REAL_(Result) = log( hypot( __CQOR_REAL_(z), __CQOR_IMAG_(z) ) );
        __CQOR_IMAG_(Result) = carg( z );
        return Result;
    }

    //--------------------------------------------------------------------------------
    float_complex Ccomplex::clogf(float_complex z)
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::clogf" );

        float_complex Result;
        __CQOR_REAL_(Result) = logf( (float)( hypot( __CQOR_REAL_(z), __CQOR_IMAG_(z) ) ) );
        __CQOR_IMAG_(Result) = cargf( z );
        return Result;
    }

    //--------------------------------------------------------------------------------
    long_double_complex Ccomplex::clogl(long_double_complex z)
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::clogl" );

        long_double_complex Result;
        __CQOR_REAL_(Result) = logl( hypotl( __CQOR_REAL_(z), __CQOR_IMAG_(z) ) );
        __CQOR_IMAG_(Result) = cargl( z );
        return Result;
    }

    //--------------------------------------------------------------------------------
    double Ccomplex::cabs( double_complex z )
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::cabs" );
        return hypot( __CQOR_REAL_(z), __CQOR_IMAG_(z) );
    }

    //--------------------------------------------------------------------------------
    float Ccomplex::cabsf(float_complex z)
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::cabsf" );
        return (float) hypot( __CQOR_REAL_(z), __CQOR_IMAG_(z) );
    }

    //--------------------------------------------------------------------------------
    long double Ccomplex::cabsl(long_double_complex z)
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::cabsl" );
        return hypotl( __CQOR_REAL_(z), __CQOR_IMAG_(z) );
    }

    //--------------------------------------------------------------------------------
    double_complex Ccomplex::cpow( double_complex x, double_complex y )
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::cpow" );

        double_complex Result;
        double i;
        double r = hypot( __CQOR_REAL_(x), __CQOR_IMAG_(x) );
        if( r == 0.0 )
        {
            __CQOR_REAL_(Result) = __CQOR_IMAG_(Result) = 0.0;
        }
        else
        {
            double rho;
            double theta;
            i = carg( x );
            theta = i * __CQOR_REAL_(y);

            if( __CQOR_IMAG_(y) == 0.0 )
            {
                // This gives slightly more accurate results in these cases.
                rho = pow( r, __CQOR_REAL_(y) );
            }
            else
            {
                r = log( r );
                // rearrangement of cexp(X * clog(Y))
                theta += r * __CQOR_IMAG_(y);
                rho = exp( r * __CQOR_REAL_(y) - i * __CQOR_IMAG_(y) );
            }

            __CQOR_REAL_(Result) = rho * cos( theta );
            __CQOR_IMAG_(Result) = rho * sin( theta );
        }

        return Result;
    }

    //--------------------------------------------------------------------------------
    float_complex Ccomplex::cpowf(float_complex x, float_complex y)
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::cpowf" );

        float_complex Result;
        float i;
        float r = (float)hypot( __CQOR_REAL_(x), __CQOR_IMAG_(x) );
        if( r == 0.0f )
        {
            __CQOR_REAL_(Result) = __CQOR_IMAG_(Result) = 0.0;
        }
        else
        {
            float rho;
            float theta;
            i = cargf( x );
            theta = i * __CQOR_REAL_(y);

            if( __CQOR_IMAG_(y) == 0.0f )
            {
                // This gives slightly more accurate results in these cases.
                rho = powf( r, __CQOR_REAL_(y) );
            }
            else
            {
                r = logf( r );
                // rearrangement of cexp(X * clog(Y))
                theta += r * __CQOR_IMAG_(y);
                rho = expf( r * __CQOR_REAL_(y) - i * __CQOR_IMAG_(y) );
            }

            __CQOR_REAL_(Result) = rho * cosf( theta );
            __CQOR_IMAG_(Result) = rho * sinf( theta );
        }

        return Result;
    }

    //--------------------------------------------------------------------------------
    long_double_complex Ccomplex::cpowl(long_double_complex x, long_double_complex y)
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::cpowl" );

        long_double_complex Result;
        long double i;
        long double r = hypotl( __CQOR_REAL_(x), __CQOR_IMAG_(x) );
        if( r == 0.0L )
        {
            __CQOR_REAL_(Result) = __CQOR_IMAG_(Result) = 0.0L;
        }
        else
        {
            long double rho;
            long double theta;
            i = cargl( x );
            theta = i * __CQOR_REAL_(y);

            if( __CQOR_IMAG_(y) == 0.0L )
            {
                // This gives slightly more accurate results in these cases.
                rho = powl( r, __CQOR_REAL_(y) );
            }
            else
            {
                r = logl( r );
                // rearrangement of cexp(X * clog(Y))
                theta += r * __CQOR_IMAG_(y);
                rho = expl( r * __CQOR_REAL_(y) - i * __CQOR_IMAG_(y) );
            }

            __CQOR_REAL_(Result) = rho * cosl( theta );
            __CQOR_IMAG_(Result) = rho * sinl( theta );
        }

        return Result;
    }

    //--------------------------------------------------------------------------------
    double_complex Ccomplex::csqrt( double_complex z )
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::csqrt" );

        double_complex Result;
        double t;
        double x = __CQOR_REAL_(z);
        double y = __CQOR_IMAG_(z);

        if( y == 0.0 )
        {
            if( x < 0.0 )
            {
                __CQOR_REAL_(Result) = 0.0;
                __CQOR_IMAG_(Result) = sqrt( -x );
            }
            else
            {
                __CQOR_REAL_(Result) = sqrt( x );
                __CQOR_IMAG_(Result) = 0.0;
            }
        }
        else if( x == 0.0 )
        {
            t = sqrt( 0.5 * fabs( y ) );
            __CQOR_REAL_(Result) = t;
            __CQOR_IMAG_(Result) = y > 0 ? t : -t;
        }
        else
        {
            t = sqrt( 2.0 * ( hypot( x, y ) + fabs( x ) ) );
            double u = t / 2.0;
            if( x > 0.0 )
            {
                __CQOR_REAL_(Result) = u;
                __CQOR_IMAG_(Result) = y / t;
            }
            else
            {
                __CQOR_REAL_(Result) = fabs( y / t);
                __CQOR_IMAG_(Result) = y < 0.0 ? -u : u;
            }
        }

        return Result;
    }

    //--------------------------------------------------------------------------------
    float_complex Ccomplex::csqrtf( float_complex z )
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::csqrtf" );

        float_complex Result;
        float r;
        float x = __CQOR_REAL_(z);
        float y = __CQOR_IMAG_(z);

        if( y == 0.0f )
        {
            if( x < 0.0f )
            {
                __CQOR_REAL_(Result) = 0.0f;
                __CQOR_IMAG_(Result) = sqrtf( -x );
            }
            else
            {
                __CQOR_REAL_(Result) = sqrtf( x );
                __CQOR_IMAG_(Result) = 0.0f;
            }
        }
        else if( x == 0.0f )
        {
            r = sqrtf( 0.5f * fabsf( y ) );
            __CQOR_REAL_(Result) = r;
            __CQOR_IMAG_(Result) = y > 0 ? r : -r;
        }
        else
        {
            float t = sqrtf( (float)( 2 * ( hypot( __CQOR_REAL_(z), __CQOR_IMAG_(z) ) + fabsf( x ) ) ) );
            float u = t / 2.0f;
            if( x > 0.0f )
            {
                __CQOR_REAL_(Result) = u;
                __CQOR_IMAG_(Result) = y / t;
            }
            else
            {
                __CQOR_REAL_(Result) = fabsf( y / t );
                __CQOR_IMAG_(Result) = y < 0 ? -u : u;
            }
        }
        return Result;
    }

    //--------------------------------------------------------------------------------
    long_double_complex Ccomplex::csqrtl( long_double_complex z )
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::csqrtl" );

        long_double_complex Result;
        long double r;
        long double x = __CQOR_REAL_(z);
        long double y = __CQOR_IMAG_(z);

        if( y == 0.0L )
        {
            if( x < 0.0L )
            {
                __CQOR_REAL_(Result) = 0.0L;
                __CQOR_IMAG_(Result) = sqrtl( -x );
            }
            else
            {
                __CQOR_REAL_(Result) = sqrtl( x );
                __CQOR_IMAG_(Result) = 0.0L;
            }
        }
        else if( x == 0.0L )
        {
            r = sqrtl( 0.5L * fabsl( y ) );
            __CQOR_REAL_(Result) = r;
            __CQOR_IMAG_(Result) = y > 0 ? r : -r;
        }
        else
        {
            long double t = sqrtl( 2.0L * ( hypotl( __CQOR_REAL_(z), __CQOR_IMAG_(z) ) + fabsl( x ) ) );
            long double u = t / 2.0L;
            if( x > 0.0L )
            {
                __CQOR_REAL_(Result) = u;
                __CQOR_IMAG_(Result) = y / t;
            }
            else
            {
                __CQOR_REAL_(Result) = fabsl( y / t);
                __CQOR_IMAG_(Result) = y < 0 ? -u : u;
            }
        }

        return Result;
    }

    //--------------------------------------------------------------------------------
    double Ccomplex::carg( double_complex z )
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::carg" );
        return atan2( __CQOR_IMAG_(z), __CQOR_REAL_(z) );
    }

    //--------------------------------------------------------------------------------
    float Ccomplex::cargf(float_complex z)
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::cargf" );
        return atan2f( __CQOR_IMAG_(z), __CQOR_REAL_(z) );
    }

    //--------------------------------------------------------------------------------
    long double Ccomplex::cargl(long_double_complex z)
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::cargl" );
        return atan2l( __CQOR_IMAG_(z), __CQOR_REAL_(z) );
    }

    //--------------------------------------------------------------------------------
    double Ccomplex::cimag( double_complex z )
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::cimag" );
        return __CQOR_IMAG_(z);
    }

    //--------------------------------------------------------------------------------
    float Ccomplex::cimagf( float_complex z )
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::cimagf" );
        return __CQOR_IMAG_(z);
    }

    //--------------------------------------------------------------------------------
    long double Ccomplex::cimagl( long_double_complex z )
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::cimagl" );
        return __CQOR_IMAG_(z);
    }

    //--------------------------------------------------------------------------------
    double_complex Ccomplex::conj(double_complex z)
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::conj" );
        double_complex Result;
        __CQOR_REAL_(Result) = __CQOR_REAL_(z);
        __CQOR_IMAG_(Result) = - __CQOR_IMAG_(z);
        return Result;
    }

    //--------------------------------------------------------------------------------
    float_complex Ccomplex::conjf(float_complex z)
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::conjf" );
        float_complex Result;
        __CQOR_REAL_(Result) = __CQOR_REAL_(z);
        __CQOR_IMAG_(Result) = - __CQOR_IMAG_(z);
        return Result;
    }

    //--------------------------------------------------------------------------------
    long_double_complex Ccomplex::conjl(long_double_complex z)
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::conjl" );
        long_double_complex Result;
        __CQOR_REAL_(Result) = __CQOR_REAL_(z);
        __CQOR_IMAG_(Result) = - __CQOR_IMAG_(z);
        return Result;
    }

    //--------------------------------------------------------------------------------
    double_complex Ccomplex::cproj(double_complex z)
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::cproj" );
        double_complex Result = z;
        if( isinf( __CQOR_REAL_(z) ) || isinf ( __CQOR_IMAG_(z) ) )
        {
            __CQOR_REAL_(Result) = ASSIGN_HUGE_VAL;
            __CQOR_IMAG_(Result) = copysign( 0.0, __CQOR_IMAG_(z) );
        }
        return Result;
    }

    //--------------------------------------------------------------------------------
    float_complex Ccomplex::cprojf( float_complex z )
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::cprojf" );
        float_complex Result = z;
        if( isinf( __CQOR_REAL_(z) ) || isinf ( __CQOR_IMAG_(z) ) )
        {
            __CQOR_REAL_(Result) = ASSIGN_HUGE_VALF;
            __CQOR_IMAG_(Result) = copysignf( 0.0, __CQOR_IMAG_(z) );
        }
        return Result;
    }

    //--------------------------------------------------------------------------------
    long_double_complex Ccomplex::cprojl(long_double_complex z)
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::cprojl" );

        long_double_complex Result = z;
        if( isinf( __CQOR_REAL_(z) ) || isinf ( __CQOR_IMAG_(z) ) )
        {
            __CQOR_REAL_(Result) = ASSIGN_HUGE_VALL;
            __CQOR_IMAG_(Result) = copysignl( 0.0, __CQOR_IMAG_(z) );
        }
        return Result;
    }

    //--------------------------------------------------------------------------------
    double Ccomplex::creal( double_complex z )
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::creal" );
        return __CQOR_REAL_(z);
    }

    //--------------------------------------------------------------------------------
    float Ccomplex::crealf( float_complex z )
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::crealf" );
        return __CQOR_REAL_(z);
    }

    //--------------------------------------------------------------------------------
    long double Ccomplex::creall( long_double_complex z )
    {
        __QCS_MEMBER_FCONTEXT( "Ccomplex::creall" );
        return __CQOR_REAL_(z);
    }

}//nsWin32

#endif//(QOR_SYS_OS == QOR_SYS_MSW)
