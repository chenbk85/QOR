//MSW_aio.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "SystemQOR.h"

#if		(QOR_SYS_OS == QOR_SYS_MSW)

#include <errno.h>

#include "SystemQOR/MSWindows/MSW_aio.h"
#include "PosumQOR/Descriptor.h"
#include "PosumQOR/AsyncIOSession.h"
#include "CodeQOR/Tracing/FunctionContextBase.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	Caio::Caio()
	{
		__QCS_MEMBER_FCONTEXT( "Caio::Caio" );
	}

	//--------------------------------------------------------------------------------
	Caio::~Caio()
	{
		__QCS_MEMBER_FCONTEXT( "Caio::~Caio" );
	}

	//--------------------------------------------------------------------------------
    int Caio::cancel( int iFD, aiocb* paiocb )
    {
		__QCS_MEMBER_FCONTEXT( "Caio::cancel" );
		int iResult = -1;
		nsPosum::CDescriptor Descriptor( iFD );
		nsPosum::CAsyncIOSession* pSession = reinterpret_cast< nsPosum::CAsyncIOSession* >( paiocb );
		if( pSession )
		{
			iResult = pSession->Cancel( /*Descriptor*/ );
		}
		return iResult;
    }

    //--------------------------------------------------------------------------------
    int Caio::error( const aiocb* paiocb )
    {
		__QCS_MEMBER_FCONTEXT( "Caio::error" );
		int iResult = 0;
		nsPosum::CDescriptor Descriptor( paiocb->aio_fildes );
		nsPosum::CAsyncIOSession* pSession = reinterpret_cast< nsPosum::CAsyncIOSession* >( const_cast< aiocb* >( paiocb ) );
		if( pSession )
		{
			iResult = pSession->Error();
		}
		return iResult;
    }

    //--------------------------------------------------------------------------------
    int Caio::fsync( int nFD, aiocb* paiocb )
    {
		__QCS_MEMBER_FCONTEXT( "Caio::fsync" );
		int iResult = 0;
		nsPosum::CDescriptor Descriptor( nFD );
		nsPosum::CAsyncIOSession* pSession = reinterpret_cast< nsPosum::CAsyncIOSession* >( paiocb );
		if( pSession )
		{
			iResult = pSession->FSync( nFD );
		}
		return iResult;
    }

    //--------------------------------------------------------------------------------
    int Caio::read( aiocb* paiocb )
    {
		__QCS_MEMBER_FCONTEXT( "Caio::read" );
		int iResult = -1;
		nsPosum::CDescriptor Descriptor( paiocb->aio_fildes );
		nsPosum::CAsyncIOSession* pSession = reinterpret_cast< nsPosum::CAsyncIOSession* >( paiocb );
		if( pSession )
		{
			iResult = pSession->Read();
		}
		return iResult;
    }

    //--------------------------------------------------------------------------------
    ssize_t Caio::_return( aiocb* paiocb )
    {
		__QCS_MEMBER_FCONTEXT( "Caio::_return" );
		ssize_t Result = -1;
		nsPosum::CAsyncIOSession* pSession = reinterpret_cast< nsPosum::CAsyncIOSession* >( paiocb );
		if( pSession )
		{
			Result = pSession->Return();
		}
        return Result;
    }

	//--------------------------------------------------------------------------------
	int Caio::suspend(const aiocb* const list[], int nent, const timespec* timeout)
	{
		__QCS_MEMBER_FCONTEXT("Caio::suspend");
		int iResult = -1;

		for (int i = 0; i < nent; i++)
		{
			if (list[i] && error(list[i]) != EINPROGRESS)
			{
				return 0;
			}
		}

		if(timeout)
		{
			//TODO: timed wait on all the non null list elements
		}
		else
		{
			//TODO: indefinite interruptible wait on all the non null elements
		}

		return iResult;
	}

    //--------------------------------------------------------------------------------
    int Caio::write( aiocb* paiocb )
    {
		__QCS_MEMBER_FCONTEXT( "Caio::write" );
		int iResult = -1;
		nsPosum::CAsyncIOSession* pSession = reinterpret_cast< nsPosum::CAsyncIOSession* >( paiocb );
		if( pSession )
		{
			iResult = pSession->Write();
		}
        return iResult;
    }

	//--------------------------------------------------------------------------------
	int Caio::lio_listio(int, aiocb* __QCMP_RESTRICT const[/*__QCMP_RESTRICT*/], int, sigevent* __QCMP_RESTRICT)
	{
		__QCS_MEMBER_FCONTEXT("Caio::lio_listio");
		int iResult = -1;
		return iResult;
	}

}//nsWin32

#endif//(QOR_SYS_OS == QOR_SYS_MSW)
