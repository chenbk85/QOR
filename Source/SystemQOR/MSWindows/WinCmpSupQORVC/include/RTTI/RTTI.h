//RTTI.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Runtime Type Information for MSVC

#ifndef WINCMPSUPVC_RTTI_H_1
#define WINCMPSUPVC_RTTI_H_1

#if	( __QCMP_EXTENSION( RunTimeTypeInformation ) )

	//  these types are known to MSVC without declaration
#if ( __QCMP_COMPILER == __QCMP_INTEL )
	//------------------------------------------------------------------------------
	struct _PMD
	{
		int mdisp;
		int pdisp;
		int vdisp;
	};

	//------------------------------------------------------------------------------
	//this is just a binary image of type_info
	struct _TypeDescriptor
	{
		const void* pVFTable;
		void* spare;
		char name[1];
	};
#endif

	typedef ::_PMD PMD;
	typedef ::_TypeDescriptor TypeDescriptor;

	struct ClassHierarchyDescriptor;

#pragma pack (push, rttidata, 4)

	//--------------------------------------------------------------------------------
	//_s_RTTIBaseClassDescriptor
	struct BaseClassDescriptor
	{
		TypeDescriptor * pTypeDescriptor;
		unsigned long numContainedBases;
		PMD where;
		unsigned long attributes;
		ClassHierarchyDescriptor* pClassHierarchyDescriptor;
	};

	typedef const BaseClassDescriptor* const* desc_ptr_ptr;
	typedef BaseClassDescriptor const* desc_ptr;

	//--------------------------------------------------------------------------------
#pragma warning (disable:4200)
#if ( __QCMP_COMPILER == __QCMP_INTEL )
	typedef const struct _s__RTTIBaseClassArray
	{
		const BaseClassDescriptor* arrayOfBaseClassDescriptors[];
	}BaseClassArray;
#else
	typedef const _s__RTTIBaseClassArray BaseClassArray;
#endif
#pragma warning (default:4200)

	//--------------------------------------------------------------------------------
	//_s_RTTIClassHierarchyDescriptor
	struct ClassHierarchyDescriptor
	{
		unsigned long signature;
		unsigned long attributes;
		unsigned long numBaseClasses;
		BaseClassArray* pBaseClassArray;
	};

	//--------------------------------------------------------------------------------
	//_s_RTTICompleteObjectLocator
	struct CompleteObjectLocator
	{
		unsigned long signature;
		unsigned long offset;
		unsigned long cdOffset;
		TypeDescriptor* pTypeDescriptor;
		const ClassHierarchyDescriptor* pClassDescriptor;
	};

	void* AdjustPointer( void* pThis, const PMD& pmd );
	bool operator == ( const TypeDescriptor& lhs, const TypeDescriptor& rhs);

#pragma pack (pop, rttidata)

#endif


#endif//WINCMPSUPVC_RTTI_H_1
