//StackCheck.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CompilerQOR.h"
#include "CodeQOR/Macros/CodingMacros.h"
#include "ArchQOR.h"
#include "ArchQOR/Common/Machine.h"
#include "ArchQOR/Common/HLAssembler/JITFunctor.h"

//To generate the stack check assembler function

//------------------------------------------------------------------------------
class CJITchkstk : public nsArch::CVoidJITFunctor0
{
public:

	//------------------------------------------------------------------------------
	CJITchkstk( nsArch::CHighLevelAssemblerBase* pHLA, byte* pLaunchPad = 0 ) : CVoidJITFunctor0( pHLA, pLaunchPad )
	{
		if( m_pLaunchPad != 0 )
		{
			Generate();
		}
	}

protected:

	//------------------------------------------------------------------------------
	virtual FP Generate()
	{
		nsArch::nsx86::Cx86HLAIntrinsics& HLA( *( dynamic_cast< nsArch::nsx86::Cx86HLAIntrinsics* >( m_pHLA ) ) );
		nsArch::nsx86::CCPU& CPU = dynamic_cast< nsArch::nsx86::CCPU& >( TheMachine()->Logic().CPU() );

		static const Cmp_unsigned__int32 PAGESIZE = 4096;

		CPU.clear();

		nsArch::nsx86::CLabel probesetup( CPU.newLabel() );
		nsArch::nsx86::CLabel probepages( CPU.newLabel() );
		nsArch::nsx86::CLabel lastpage( CPU.newLabel() );

	CPU.bind( probesetup );

		CPU.push( CPU.reg_ecx() );
		CPU.lea( CPU.reg_ecx(), nsArch::nsx86::CMem( CPU.reg_esp(), 4 ) );
		CPU.sub( CPU.reg_ecx(), CPU.reg_eax() );

		CPU.sbb( CPU.reg_eax(), CPU.reg_eax() );
		CPU.not_( CPU.reg_eax() );
		CPU.and_( CPU.reg_ecx(), CPU.reg_eax() );
		CPU.mov( CPU.reg_eax(), CPU.reg_esp() );
		CPU.and_( CPU.reg_eax(), nsArch::nsx86::CImm( ~( PAGESIZE - 1 ) ) );

	CPU.bind( probepages );

		CPU.cmp( CPU.reg_ecx(), CPU.reg_eax() );
		CPU.jb( lastpage );
		CPU.mov( CPU.reg_eax(), CPU.reg_ecx() );
		CPU.pop( CPU.reg_ecx() );
		CPU.xchg( CPU.reg_eax(), CPU.reg_esp() );
		CPU.mov( CPU.reg_eax(), nsArch::nsx86::CMem( CPU.reg_eax(), 0 ) );
		CPU.mov( nsArch::nsx86::CMem( CPU.reg_esp(), 0 ), CPU.reg_eax() );
		CPU.ret();

	CPU.bind( lastpage );

		CPU.sub( CPU.reg_eax(),nsArch::nsx86::CImm( PAGESIZE ) );
		CPU.test( nsArch::nsx86::CMem( CPU.reg_eax(), 0 ), CPU.reg_eax() );
		CPU.jmp( probepages );

		CPU.int3();

		// Make JIT function.
		FP fn = reinterpret_cast< FP >( CPU.make() );

		// Ensure that everything is ok and write the launchpad
		if( fn )
		{
			m_bGenerated = true;
			if( m_pLaunchPad )
			{
				HLA.WriteLaunchPad( (byte*)fn, m_pLaunchPad );
			}
		}

		return fn;
	}
};

__QCMP_STARTLINKAGE_C


#pragma code_seg( push )


#pragma section( ".jit", execute )

__declspec( allocate( ".jit" ) ) byte _chkstk[ 16 ];

#pragma comment( linker, "/SECTION:.jit,ERW" )

#pragma code_seg( pop )


__QCMP_ENDLINKAGE_C

CJITchkstk chkstkJIT( &TheMachine()->HLAssembler(), _chkstk );
