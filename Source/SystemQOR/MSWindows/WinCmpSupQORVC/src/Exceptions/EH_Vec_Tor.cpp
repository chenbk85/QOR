//EH_Vec_Tor.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "SystemQOR.h"

//--------------------------------------------------------------------------------
void __stdcall __ehvec_copy_ctor( void* p1, void* p2, unsigned int size, int count, void(__QCMP_THISCALL* pCtor)(void*, void*), void(__QCMP_THISCALL* pDtor)(void*) )
{
	QOR_PP_UNREF( pDtor );
	int i = 0;
	bool bSuccess = false;

	for( ;i< count; i++ )
	{
		(*pCtor)(p1,p2);
		p1 = ((unsigned char*)(p1)) + size;
		p2 = ((unsigned char*)(p2)) + size;
	}

	bSuccess = true;
	if( bSuccess )
	{
		return;
	}
}

//--------------------------------------------------------------------------------
//MSVC 14.0 VS2015
void __stdcall __ehvec_copy_ctor(void* p1, void* p2, unsigned int size, unsigned int count, void(__QCMP_THISCALL* pCtor)(void*, void*), void(__QCMP_THISCALL* pDtor)(void*))
{
	QOR_PP_UNREF(pDtor);
	unsigned int i = 0;
	bool bSuccess = false;

	for (; i< count; i++)
	{
		(*pCtor)(p1, p2);
		p1 = ((unsigned char*)(p1)) + size;
		p2 = ((unsigned char*)(p2)) + size;
	}

	bSuccess = true;
	if (bSuccess)
	{
		return;
	}
}

#	ifdef _WIN64
void __stdcall __ehvec_copy_ctor(void* p1, void* p2, unsigned __int64 size, unsigned __int64 count, void(__cdecl* pCtor)(void*, void*), void(__cdecl* pDtor)(void*))
{
	QOR_PP_UNREF(pDtor);
	unsigned int i = 0;
	bool bSuccess = false;

	for (; i< count; i++)
	{
		(*pCtor)(p1, p2);
		p1 = ((unsigned char*)(p1)) + size;
		p2 = ((unsigned char*)(p2)) + size;
	}

	bSuccess = true;
	if (bSuccess)
	{
		return;
	}
}
#	endif


//--------------------------------------------------------------------------------
void __stdcall __ehvec_ctor( void* ptr, unsigned int size, unsigned int count, void(__QCMP_THISCALL* pCtor)(void*), void(__QCMP_THISCALL* pDtor)(void *))
{
	QOR_PP_UNREF(pDtor);
	unsigned int i = 0;
	bool bSuccess = false;
	for (; i < count; i++)
	{
		(*pCtor)(ptr);
		ptr = ((unsigned char*)(ptr)) + size;
	}
	bSuccess = true;
	if (bSuccess)
	{
		return;
	}
}

//--------------------------------------------------------------------------------
void __stdcall __ehvec_ctor(void* ptr, unsigned int size, int count , void(__QCMP_THISCALL* pCtor)(void*), void(__QCMP_THISCALL* pDtor)(void *) )
{
	QOR_PP_UNREF( pDtor );
	int i = 0;
	bool bSuccess = false;
	for( ;i < count; i++ )
	{		
		(*pCtor)(ptr);
		ptr = ((unsigned char*)(ptr)) + size;
	}
	bSuccess = true;
	if( bSuccess )
	{
		return;
	}
}

//--------------------------------------------------------------------------------
//Win64
void __cdecl __ehvec_ctor( void* ptr, Cmp_unsigned__int64 size, int count , void(__cdecl* pCtor)(void*), void(__cdecl* pDtor)(void *) )
{
	QOR_PP_UNREF( pDtor );
	int i = 0;
	bool bSuccess = false;
	for( ;i < count; i++ )
	{		
		(*pCtor)(ptr);
		ptr = ((unsigned char*)(ptr)) + size;
	}
	bSuccess = true;
	if( bSuccess )
	{
		return;
	}
}

void __cdecl __ehvec_ctor(void* ptr, Cmp_unsigned__int64 size, Cmp_unsigned__int64 count, void(__cdecl* pCtor)(void*), void(__cdecl* pDtor)(void *))
{
	QOR_PP_UNREF(pDtor);
	int i = 0;
	bool bSuccess = false;
	for (; i < count; i++)
	{
		(*pCtor)(ptr);
		ptr = ((unsigned char*)(ptr)) + size;
	}
	bSuccess = true;
	if (bSuccess)
	{
		return;
	}
}

//--------------------------------------------------------------------------------
void __stdcall __ehvec_dtor(void* ptr, unsigned int size, int count, void(__QCMP_THISCALL* pDtor)(void *))
{
	int i = 0;
	bool bSuccess = false;
	for( ;i < count; i++ )
	{
		(*pDtor)(ptr);
		ptr = ((unsigned char*)(ptr))+size;
	}
	bSuccess = true;
	if( bSuccess )
	{
		return;
	}
}

//--------------------------------------------------------------------------------
//MSVC 14.0
void __stdcall __ehvec_dtor(void* ptr, unsigned int size, unsigned int count, void(__QCMP_THISCALL* pDtor)(void *))
{
	unsigned int i = 0;
	bool bSuccess = false;
	for (; i < count; i++)
	{
		(*pDtor)(ptr);
		ptr = ((unsigned char*)(ptr)) + size;
	}
	bSuccess = true;
	if (bSuccess)
	{
		return;
	}
}

//--------------------------------------------------------------------------------
//Win64
void __cdecl __ehvec_dtor( void* ptr, Cmp_unsigned__int64 size, int count, void(__cdecl* pDtor)(void *))
{
	int i = 0;
	bool bSuccess = false;
	for( ;i < count; i++ )
	{
		(*pDtor)(ptr);
		ptr = ((unsigned char*)(ptr))+size;
	}
	bSuccess = true;
	if( bSuccess )
	{
		return;
	}
}

//--------------------------------------------------------------------------------
void __cdecl __ehvec_dtor(void* ptr, Cmp_unsigned__int64 size, Cmp_unsigned__int64 count, void(__cdecl* pDtor)(void *))
{
	int i = 0;
	bool bSuccess = false;
	for (; i < count; i++)
	{
		(*pDtor)(ptr);
		ptr = ((unsigned char*)(ptr)) + size;
	}
	bSuccess = true;
	if (bSuccess)
	{
		return;
	}
}
