//ulldiv.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CompilerQOR.h"
#include "CodeQOR/Macros/CodingMacros.h"
#include "ArchQOR/Common/Machine.h"
#include "ArchQOR/Common/HLAssembler/JITFunctor.h"

//To generate assembler function for aulldiv - unsigned long division

//------------------------------------------------------------------------------
class CJITaulldiv : public nsArch::CJITFunctor0< int >
{
public:

	//------------------------------------------------------------------------------
	CJITaulldiv( nsArch::CHighLevelAssemblerBase* pHLA, byte* pLaunchPad = 0 ) : CJITFunctor0( pHLA, pLaunchPad )
	{
		if( m_pLaunchPad != 0 )
		{
			Generate();
		}
	}

protected:

	//------------------------------------------------------------------------------
	virtual FP Generate()
	{
		nsArch::nsx86::Cx86HLAIntrinsics& HLA = ( *( dynamic_cast< nsArch::nsx86::Cx86HLAIntrinsics* >( m_pHLA ) ) );
		nsArch::nsx86::CCPU& CPU = *( dynamic_cast< nsArch::nsx86::CCPU* >( HLA.getAssembler() ) );

		CPU.clear();

		nsArch::nsx86::CLabel Label1 = CPU.newLabel();
		nsArch::nsx86::CLabel Label2 = CPU.newLabel();
		nsArch::nsx86::CLabel Label3 = CPU.newLabel();
		nsArch::nsx86::CLabel Label4 = CPU.newLabel();
		nsArch::nsx86::CLabel Label5 = CPU.newLabel();

		CPU.push( CPU.reg_ebx() );
		CPU.push( CPU.reg_esi() );

		nsArch::nsx86::CMem Dividend( CPU.reg_esp(), 12 );
		nsArch::nsx86::CMem HiWordDividend( CPU.reg_esp(), 16 );
		nsArch::nsx86::CMem Divisor( CPU.reg_esp(), 20 );
		nsArch::nsx86::CMem HiWordDivisor( CPU.reg_esp(), 24 );

		CPU.mov( CPU.reg_eax(), HiWordDivisor );
		CPU.or_( CPU.reg_eax(), CPU.reg_eax() );
		CPU.jnz( Label1 );
		
		CPU.mov( CPU.reg_ecx(), Divisor );
		CPU.mov( CPU.reg_eax(), HiWordDividend );
		CPU.xor_( CPU.reg_edx(), CPU.reg_edx() );
		CPU.div( CPU.reg_ecx() );
		CPU.mov( CPU.reg_ebx(), CPU.reg_eax() );

		CPU.mov( CPU.reg_eax(), Dividend );
		CPU.div( CPU.reg_ecx() );
		CPU.mov( CPU.reg_edx(), CPU.reg_ebx() );
		CPU.jmp( Label2 );

		CPU.bind( Label1 );

		CPU.mov( CPU.reg_ecx(), CPU.reg_eax() );
		CPU.mov( CPU.reg_ebx(), Divisor );
		CPU.mov( CPU.reg_edx(), HiWordDividend );
		CPU.mov( CPU.reg_eax(), Dividend );

		CPU.bind( Label3 );

		CPU.shr( CPU.reg_ecx(), 1 );
		CPU.rcr( CPU.reg_ebx(), 1 );
		CPU.shr( CPU.reg_edx(), 1 );
		CPU.rcr( CPU.reg_eax(), 1 );
		CPU.or_( CPU.reg_ecx(), CPU.reg_ecx() );
		CPU.jnz( Label3 );
		CPU.div( CPU.reg_ebx() );

		CPU.mov( CPU.reg_esi(), CPU.reg_eax() );

		CPU.mul( HiWordDivisor );
		CPU.mov( CPU.reg_ecx(), CPU.reg_eax() );
		CPU.mov( CPU.reg_eax(), Divisor );
		CPU.mul( CPU.reg_esi() );
		CPU.add( CPU.reg_edx(), CPU.reg_ecx() );
		CPU.jc( Label4 );

		CPU.cmp( CPU.reg_edx(), HiWordDividend );
		CPU.ja( Label4 );
		CPU.jb( Label5 );
		CPU.cmp( CPU.reg_eax(), Dividend );
		CPU.jbe( Label5 );
		
		CPU.bind( Label4 );
		CPU.dec( CPU.reg_esi() );

		CPU.bind( Label5 );
		CPU.xor_( CPU.reg_edx(), CPU.reg_edx() );
		CPU.mov( CPU.reg_eax(), CPU.reg_esi() );

		CPU.bind( Label2 );
		CPU.pop( CPU.reg_esi() );
		CPU.pop( CPU.reg_ebx() );

		CPU.ret( nsArch::nsx86::CImm( 16 ) );

		// Make JIT function.
		FP fn = reinterpret_cast< FP >( CPU.make() );

		// Ensure that everything is ok and write the launchpad
		if( fn )
		{
			m_bGenerated = true;
			if( m_pLaunchPad )
			{
				HLA.WriteLaunchPad( (byte*)fn, m_pLaunchPad );
			}
		}

		return fn;
	}
};

__QCMP_STARTLINKAGE_C

#pragma section( ".jit", execute )

__declspec( allocate( ".jit" ) ) byte _aulldiv[ 16 ];

#pragma comment( linker, "/SECTION:.jit,ERW" )

__QCMP_ENDLINKAGE_C

CJITaulldiv aulldivJIT( &TheMachine()->HLAssembler(), _aulldiv );

