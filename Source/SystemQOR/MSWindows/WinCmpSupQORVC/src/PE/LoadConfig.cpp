//LoadConfig.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Set up the load config table to go into the PE header of the module with the links to 
//enable Safe Exception Handling

#include "SystemQOR.h"

__QCMP_STARTLINKAGE_C

	extern Cmp_uint_ptr     __security_cookie;  // /GS security cookie

#ifndef _WIN64
	//--------------------------------------------------------------------------------
	//The following two names are automatically created by the linker for any image that has the safe exception table present.
	extern void* __safe_se_handler_table[]; // base of safe handler entry table
	extern unsigned char  __safe_se_handler_count;   // absolute symbol whose address is the count of table entries


	//--------------------------------------------------------------------------------
	typedef struct 
	{
		unsigned long       Size;
		unsigned long       TimeDateStamp;
		unsigned short      MajorVersion;
		unsigned short      MinorVersion;
		unsigned long       GlobalFlagsClear;
		unsigned long       GlobalFlagsSet;
		unsigned long       CriticalSectionDefaultTimeout;
		unsigned long       DeCommitFreeBlockThreshold;
		unsigned long       DeCommitTotalFreeThreshold;
		unsigned long       LockPrefixTable;            // VA
		unsigned long       MaximumAllocationSize;
		unsigned long       VirtualMemoryThreshold;
		unsigned long       ProcessHeapFlags;
		unsigned long       ProcessAffinityMask;
		unsigned short      CSDVersion;
		unsigned short      Reserved1;
		unsigned long       EditList;                   // VA
		Cmp_uint_ptr*		SecurityCookie;
		void**				SEHandlerTable;
		unsigned long       SEHandlerCount;
	} IMAGE_LOAD_CONFIG_DIRECTORY32_2;


	//--------------------------------------------------------------------------------
	/*const*/ IMAGE_LOAD_CONFIG_DIRECTORY32_2   _load_config_used = 
	{
		sizeof(IMAGE_LOAD_CONFIG_DIRECTORY32_2),
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		&__security_cookie,
		__safe_se_handler_table,
		(unsigned long)(Cmp_ulong_ptr) &__safe_se_handler_count
	};

#endif //_WIN64

	
__QCMP_ENDLINKAGE_C
