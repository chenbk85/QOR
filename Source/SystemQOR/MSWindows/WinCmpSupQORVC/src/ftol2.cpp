//ftol2.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CompilerQOR.h"
#include "CodeQOR/Macros/CodingMacros.h"
#include "ArchQOR.h"
#include "ArchQOR/Common/Machine.h"
#include "ArchQOR/Common/HLAssembler/JITFunctor.h"

//To generate an assmebler function ftol2 - for float to long conversion

//------------------------------------------------------------------------------
class CJITftol2 : public nsArch::CJITFunctor0< int >
{
public:

	//------------------------------------------------------------------------------
	CJITftol2( nsArch::CHighLevelAssemblerBase* pHLA, byte* pLaunchPad = 0 ) : CJITFunctor0( pHLA, pLaunchPad )
	{
		if( m_pLaunchPad != 0 )
		{
			Generate();
		}
	}

protected:

	//------------------------------------------------------------------------------
	virtual FP Generate()
	{
		nsArch::nsx86::Cx86HLAIntrinsics& HLA = ( *( dynamic_cast< nsArch::nsx86::Cx86HLAIntrinsics* >( m_pHLA ) ) );
		nsArch::nsx86::CCPU& CPU = *( dynamic_cast< nsArch::nsx86::CCPU* >( HLA.getAssembler() ) );

		CPU.clear();

		CPU.push( CPU.reg_ebp() );
		CPU.mov( CPU.reg_ebp(), CPU.reg_esp() );

		CPU.sub( CPU.reg_esp(), nsArch::nsx86::CImm( 8 ) );
		CPU.and_( CPU.reg_esp(), nsArch::nsx86::CImm( 0xFFFFFFF8 ) );
		CPU.fstp( nsArch::nsx86::qword_ptr( CPU.reg_esp() ) );
		CPU.cvttsd2si( CPU.reg_eax(), nsArch::nsx86::mmword_ptr( CPU.reg_esp() ) );

		CPU.mov( CPU.reg_esp(), CPU.reg_ebp() );
		CPU.pop( CPU.reg_ebp() );
		CPU.ret();
		
		FP fn = reinterpret_cast< FP >( CPU.make() );
		// Ensure that everything is ok and write the launchpad
		if( fn )
		{
			m_bGenerated = true;
			if( m_pLaunchPad )
			{
				HLA.WriteLaunchPad( (byte*)fn, m_pLaunchPad );
			}
		}

		return fn;
	}
};

__QCMP_STARTLINKAGE_C

#ifdef _WIN64
	unsigned int _fltused = 0x9876;//TODO: Wrong
#endif

#pragma section( ".jit", execute )

__declspec( allocate( ".jit" ) ) byte _ftol2_sse_excpt[ 16 ];

#pragma comment( linker, "/SECTION:.jit,ERW" ) 

__QCMP_ENDLINKAGE_C

CJITftol2 ftol2JIT( &TheMachine()->HLAssembler(), _ftol2_sse_excpt );

