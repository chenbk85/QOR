//UxTheme.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQAPI/WinQAPI.h"
#include "SystemQOR.h"
#include "WinQAPI/UxTheme.h"
#include "ReturnCheck.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//--------------------------------------------------------------------------------
	HANIMATIONBUFFER CUXTheme::BeginBufferedAnimation( HWND hwnd, HDC hdcTarget, const RECT* rcTarget, BP_BUFFERFORMAT dwFormat, BP_PAINTPARAMS* pPaintParams, BP_ANIMATIONPARAMS* pAnimationParams, HDC* phdcFrom, HDC* phdcTo )
	{
		_WINQ_FCONTEXT( "CUXTheme::BeginBufferedAnimation" );
		CCheckReturn< HANIMATIONBUFFER, CHandleCheck<> >::TType Result;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( BeginBufferedAnimation );
		Result = Call< HANIMATIONBUFFER, HWND, HDC, const RECT*, BP_BUFFERFORMAT, BP_PAINTPARAMS*, BP_ANIMATIONPARAMS*, HDC*, HDC* >( pFunc, hwnd, hdcTarget, rcTarget, dwFormat, pPaintParams, pAnimationParams, phdcFrom, phdcTo );
#else
		QOR_PP_UNREF4( hwnd, hdcTarget, rcTarget, dwFormat );
		QOR_PP_UNREF4( pPaintParams, pAnimationParams, phdcFrom, phdcTo );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "BeginBufferedAnimation" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return Result;
	}

	//--------------------------------------------------------------------------------
	HPAINTBUFFER CUXTheme::BeginBufferedPaint( HDC hdcTarget, const RECT* prcTarget, BP_BUFFERFORMAT dwFormat, BP_PAINTPARAMS* pPaintParams, HDC* phdc )
	{
		_WINQ_FCONTEXT( "CUXTheme::BeginBufferedPaint" );
		CCheckReturn< HPAINTBUFFER, CHandleCheck< > >::TType Result;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( BeginBufferedPaint );
		Result = Call< HPAINTBUFFER, HDC, const RECT*, BP_BUFFERFORMAT, BP_PAINTPARAMS*, HDC* >( pFunc, hdcTarget, prcTarget, dwFormat, pPaintParams, phdc );
#else
		QOR_PP_UNREF4( hdcTarget, prcTarget, dwFormat, pPaintParams );
		QOR_PP_UNREF5( phdc );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "BeginBufferedPaint" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CUXTheme::BeginPanningFeedback( HWND hwnd )
	{
		_WINQ_FCONTEXT( "CUXTheme::BeginPanningFeedback" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0601 )
		_WINQ_USESAPI( BeginPanningFeedback );
		bResult = Call< BOOL, HWND >( pFunc, hwnd );
#else
		QOR_PP_UNREF( hwnd );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "BeginPanningFeedback" ), _T( "Windows 7" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0601 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::BufferedPaintClear( HPAINTBUFFER hBufferedPaint, const RECT* prc )
	{
		_WINQ_FCONTEXT( "CUXTheme::BufferedPaintClear" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( BufferedPaintClear );
		hResult = Call< HRESULT, HPAINTBUFFER, const RECT* >( pFunc, hBufferedPaint, prc );
#else
		QOR_PP_UNREF2( hBufferedPaint, prc );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "BufferedPaintClear" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::BufferedPaintInit( void )
	{
		_WINQ_FCONTEXT( "CUXTheme::BufferedPaintInit" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( BufferedPaintInit );
		hResult = Call< HRESULT >( pFunc );
#else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "BufferedPaintInit" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUXTheme::BufferedPaintRenderAnimation( HWND hwnd, HDC hdcTarget )
	{
		_WINQ_FCONTEXT( "CUXTheme::BufferedPaintRenderAnimation" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( BufferedPaintRenderAnimation );
		bResult = Call< BOOL, HWND, HDC >( pFunc, hwnd, hdcTarget );
#else
		QOR_PP_UNREF( hwnd, hdcTarget );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "BufferedPaintRenderAnimation" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::BufferedPaintSetAlpha( HPAINTBUFFER hBufferedPaint, const RECT* prc, BYTE alpha )
	{
		_WINQ_FCONTEXT( "CUXTheme::BufferedPaintSetAlpha" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( BufferedPaintSetAlpha );
		hResult = Call< HRESULT, HPAINTBUFFER, const RECT*, BYTE >( pFunc, hBufferedPaint, prc, alpha );
#else
		QOR_PP_UNREF3( hBufferedPaint, prc, alpha );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "BufferedPaintSetAlpha" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::BufferedPaintStopAllAnimations( HWND hwnd )
	{
		_WINQ_FCONTEXT( "CUXTheme::BufferedPaintStopAllAnimations" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( BufferedPaintStopAllAnimations );
		hResult = Call< HRESULT, HWND >( pFunc, hwnd );
#else
		QOR_PP_UNREF( hwnd );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "BufferedPaintStopAllAnimations" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::BufferedPaintUnInit( void )
	{
		_WINQ_FCONTEXT( "CUXTheme::BufferedPaintUnInit" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( BufferedPaintUnInit );
		hResult = Call< HRESULT >( pFunc );
#else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "BufferedPaintUnInit" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::CloseThemeData( HTHEME hTheme )
	{
		_WINQ_FCONTEXT( "CUXTheme::CloseThemeData" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( CloseThemeData );
		hResult = Call< HRESULT, HTHEME >( pFunc, hTheme );
#else
		QOR_PP_UNREF( hTheme );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CloseThemeData" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return hResult;
	}
	
	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::DrawThemeBackground( HTHEME hTheme, HDC hdc, int iPartId, int iStateId, const RECT* pRect, const RECT* pClipRect )
	{
		_WINQ_FCONTEXT( "CUXTheme::DrawThemeBackground" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( DrawThemeBackground );
		hResult = Call< HRESULT, HTHEME, HDC, int, int, const RECT*, const RECT* >( pFunc, hTheme, hdc, iPartId, iStateId, pRect, pClipRect );
#else
		QOR_PP_UNREF4( hTheme, hdc, iPartId, iStateId );
		QOR_PP_UNREF2(pRect, pClipRect );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "DrawThemeBackground" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::DrawThemeBackgroundEx( HTHEME hTheme, HDC hdc, int iPartId, int iStateId, const RECT* pRect, const DTBGOPTS* pOptions )
	{
		_WINQ_FCONTEXT( "CUXTheme::DrawThemeBackgroundEx" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;		
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( DrawThemeBackgroundEx );
		hResult = Call< HRESULT, HTHEME, HDC, int, int, const RECT*, const DTBGOPTS* >( pFunc, hTheme, hdc, iPartId, iStateId, pRect, pOptions );
#else
		QOR_PP_UNREF4( hTheme, hdc, iPartId, iStateId );
		QOR_PP_UNREF2( pRect, pOptions );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "DrawThemeBackgroundEx" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return hResult;
	}
	
	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::DrawThemeEdge( HTHEME hTheme, HDC hdc, int iPartId, int iStateId, LPCRECT pDestRect, UINT uEdge, UINT uFlags, LPRECT pContentRect )
	{
		_WINQ_FCONTEXT( "CUXTheme::DrawThemeEdge" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( DrawThemeEdge );
		hResult = Call< HRESULT, HTHEME, HDC, int, int, LPCRECT, UINT, UINT, LPRECT >( pFunc, hTheme, hdc, iPartId, iStateId, pDestRect, uEdge, uFlags, pContentRect );
#else
		QOR_PP_UNREF4( hTheme, hdc, iPartId, iStateId );
		QOR_PP_UNREF4( pDestRect, uEdge, uFlags, pContentRect );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "DrawThemeEdge" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return hResult;
	}
	
	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::DrawThemeIcon( HTHEME hTheme, HDC hdc, int iPartId, int iStateId, LPCRECT pRect, HIMAGELIST himl, int iImageIndex )
	{
		_WINQ_FCONTEXT( "CUXTheme::DrawThemeIcon" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( DrawThemeIcon );
		hResult = Call< HRESULT, HTHEME, HDC, int, int, LPCRECT, HIMAGELIST, int >( pFunc, hTheme, hdc, iPartId, iStateId, pRect, himl, iImageIndex );
#else
		QOR_PP_UNREF4( hTheme, hdc, iPartId, iStateId );
		QOR_PP_UNREF3( pRect, himl, iImageIndex );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "DrawThemeIcon" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return hResult;
	}
	
	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::DrawThemeParentBackground( HWND hwnd, HDC hdc, const RECT* prc )
	{
		_WINQ_FCONTEXT( "CUXTheme::DrawThemeParentBackground" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( DrawThemeParentBackground );
		hResult = Call< HRESULT, HWND, HDC, const RECT* >( pFunc, hwnd, hdc, prc );
#else
		QOR_PP_UNREF3( hwnd, hdc, prc );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "DrawThemeParentBackground" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return hResult;
	}
	
	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::DrawThemeParentBackgroundEx( HWND hwnd, HDC hdc, DWORD dwFlags, const RECT* prc )
	{
		_WINQ_FCONTEXT( "CUXTheme::DrawThemeParentBackgroundEx" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( DrawThemeParentBackgroundEx );
		hResult = Call< HRESULT, HWND, HDC, DWORD, const RECT* >( pFunc, hwnd, hdc, dwFlags, prc );
#else
		QOR_PP_UNREF4( hwnd, hdc, dwFlags, prc );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "DrawThemeParentBackgroundEx" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}
	
	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::DrawThemeText( HTHEME hTheme, HDC hdc, int iPartId, int iStateId, LPCWSTR pszText, int iCharCount, DWORD dwTextFlags, DWORD dwTextFlags2, LPCRECT pRect )
	{
		_WINQ_FCONTEXT( "CUXTheme::DrawThemeText" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( DrawThemeText );
		hResult = Call< HRESULT, HTHEME, HDC, int, int, LPCWSTR, int, DWORD, DWORD, LPCRECT >( pFunc, hTheme, hdc, iPartId, iStateId, pszText, iCharCount, dwTextFlags, dwTextFlags2, pRect );
#else
		QOR_PP_UNREF4( hTheme, hdc, iPartId, iStateId );
		QOR_PP_UNREF4( pszText, iCharCount, dwTextFlags, dwTextFlags2 );
		QOR_PP_UNREF( pRect );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "DrawThemeText" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return hResult;
	}
	
	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::DrawThemeTextEx( HTHEME hTheme, HDC hdc, int iPartId, int iStateId, LPCWSTR pszText, int iCharCount, DWORD dwFlags, LPRECT pRect, const DTTOPTS* pOptions )
	{
		_WINQ_FCONTEXT( "CUXTheme::DrawThemeTextEx" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;	
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( DrawThemeTextEx );
		hResult = Call< HRESULT, HTHEME, HDC, int, int, LPCWSTR, int, DWORD, LPRECT, const DTTOPTS* >( pFunc, hTheme, hdc, iPartId, iStateId, pszText, iCharCount, dwFlags, pRect, pOptions );
#else
		QOR_PP_UNREF4( hTheme, hdc, iPartId, iStateId );
		QOR_PP_UNREF4( pszText, iCharCount, dwFlags, pRect );
		QOR_PP_UNREF( pOptions );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "DrawThemeTextEx" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}
	
	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::EnableThemeDialogTexture( HWND hwnd, DWORD dwFlags )
	{
		_WINQ_FCONTEXT( "CUXTheme::EnableThemeDialogTexture" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( EnableThemeDialogTexture );
		hResult = Call< HRESULT, HWND, DWORD >( pFunc, hwnd, dwFlags );
#else
		QOR_PP_UNREF2( hwnd, dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "EnableThemeDialogTexture" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return hResult;
	}
	
	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::EnableTheming( BOOL fEnable )
	{
		_WINQ_FCONTEXT( "CUXTheme::EnableTheming" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( EnableTheming );
		hResult = Call< HRESULT, BOOL >( pFunc, fEnable );
#else
		QOR_PP_UNREF( fEnable );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "EnableTheming" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return hResult;
	}
	
	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::EndBufferedAnimation( HANIMATIONBUFFER hbpAnimation, BOOL fUpdateTarget )
	{
		_WINQ_FCONTEXT( "CUXTheme::EndBufferedAnimation" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( EndBufferedAnimation );
		hResult = Call< HRESULT, HANIMATIONBUFFER, BOOL >( pFunc, hbpAnimation, fUpdateTarget );
#else
		QOR_PP_UNREF2( hbpAnimation, fUpdateTarget );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "EndBufferedAnimation" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}
	
	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::EndBufferedPaint( HPAINTBUFFER hBufferedPaint, BOOL fUpdateTarget )
	{
		_WINQ_FCONTEXT( "CUXTheme::EndBufferedPaint" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( EndBufferedPaint );
		hResult = Call< HRESULT, HPAINTBUFFER, BOOL >( pFunc, hBufferedPaint, fUpdateTarget );
#else
		QOR_PP_UNREF2( hBufferedPaint, fUpdateTarget );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "EndBufferedPaint" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}
	
	//--------------------------------------------------------------------------------
	BOOL CUXTheme::EndPanningFeedback( HWND hwnd, BOOL fAnimateBack )
	{
		_WINQ_FCONTEXT( "CUXTheme::EndPanningFeedback" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0601 )
		_WINQ_USESAPI( EndPanningFeedback );
		bResult = Call< BOOL, HWND, BOOL >( pFunc, hwnd, fAnimateBack );
#else
		QOR_PP_UNREF2( hwnd, fAnimateBack );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "EndPanningFeedback" ), _T( "Windows 7" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0601 )
		return bResult;
	}
	
	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::GetBufferedPaintBits( HPAINTBUFFER hBufferedPaint, RGBQUAD** ppbBuffer, int* pcxRow )
	{
		_WINQ_FCONTEXT( "CUXTheme::GetBufferedPaintBits" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( GetBufferedPaintBits );
		hResult = Call< HRESULT, HPAINTBUFFER, RGBQUAD**, int* >( pFunc, hBufferedPaint, ppbBuffer, pcxRow );
#else
		QOR_PP_UNREF3( hBufferedPaint, ppbBuffer, pcxRow );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetBufferedPaintBits" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}
	
	//--------------------------------------------------------------------------------
	HDC CUXTheme::GetBufferedPaintDC( HPAINTBUFFER hBufferedPaint )
	{
		_WINQ_FCONTEXT( "CUXTheme::GetBufferedPaintDC" );
		CCheckReturn< HDC, CCheckNonZero< HDC > >::TType Result;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( GetBufferedPaintDC );
		Result = Call< HDC, HPAINTBUFFER >( pFunc, hBufferedPaint );
#else
		QOR_PP_UNREF( hBufferedPaint );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetBufferedPaintDC" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return Result;
	}

	//--------------------------------------------------------------------------------
	HDC CUXTheme::GetBufferedPaintTargetDC( HPAINTBUFFER hBufferedPaint )
	{
		_WINQ_FCONTEXT( "CUXTheme::GetBufferedPaintTargetDC" );
		CCheckReturn< HDC, CCheckNonZero< HDC > >::TType Result;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( GetBufferedPaintTargetDC );
		Result = Call< HDC, HPAINTBUFFER >( pFunc, hBufferedPaint );
#else
		QOR_PP_UNREF( hBufferedPaint );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetBufferedPaintTargetDC" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return Result;
	}
	
	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::GetBufferedPaintTargetRect( HPAINTBUFFER hBufferedPaint, RECT* prc )
	{
		_WINQ_FCONTEXT( "CUXTheme::GetBufferedPaintTargetRect" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( GetBufferedPaintTargetRect );
		hResult = Call< HRESULT, HPAINTBUFFER, RECT* >( pFunc, hBufferedPaint, prc );
#else
		QOR_PP_UNREF2( hBufferedPaint, prc );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetBufferedPaintTargetRect" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::GetCurrentThemeName( LPWSTR pszThemeFileName, int dwMaxNameChars, LPWSTR pszColorBuff, int cchMaxColorChars, LPWSTR pszSizeBuff, int cchMaxSizeChars )
	{
		_WINQ_FCONTEXT( "CUXTheme::GetCurrentThemeName" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( GetCurrentThemeName );
		hResult = Call< HRESULT, LPWSTR, int, LPWSTR, int, LPWSTR, int >( pFunc, pszThemeFileName, dwMaxNameChars, pszColorBuff, cchMaxColorChars, pszSizeBuff, cchMaxSizeChars );
#else
		QOR_PP_UNREF4( pszThemeFileName, dwMaxNameChars, pszColorBuff, cchMaxColorChars );
		QOR_PP_UNREF2( pszSizeBuff, cchMaxSizeChars );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetCurrentThemeName" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x501 )
		return hResult;
	}
	
	//--------------------------------------------------------------------------------
	DWORD CUXTheme::GetThemeAppProperties()
	{
		_WINQ_FCONTEXT( "CUXTheme::GetThemeAppProperties" );
		DWORD dwResult = 0;
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( GetThemeAppProperties );
		dwResult = Call< DWORD >( pFunc );
#else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetThemeAppProperties" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return dwResult;
	}
	
	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::GetThemeBackgroundContentRect( HTHEME hTheme, HDC hdc, int iPartId, int iStateId, LPCRECT pBoundingRect, LPRECT pContentRect )
	{
		_WINQ_FCONTEXT( "CUXTheme::GetThemeBackgroundContentRect" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( GetThemeBackgroundContentRect );
		hResult = Call< HRESULT, HTHEME, HDC, int, int, LPCRECT, LPRECT >( pFunc, hTheme, hdc, iPartId, iStateId, pBoundingRect, pContentRect );
#else
		QOR_PP_UNREF4( hTheme, hdc, iPartId, iStateId );
		QOR_PP_UNREF2( pBoundingRect, pContentRect );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetThemeBackgroundContentRect" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::GetThemeBackgroundExtent( HTHEME hTheme, HDC hdc, int iPartId, int iStateId, LPCRECT pContentRect, LPRECT pExtentRect )
	{
		_WINQ_FCONTEXT( "CUXTheme::GetThemeBackgroundExtent" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( GetThemeBackgroundExtent );
		hResult = Call< HRESULT, HTHEME, HDC, int, int, LPCRECT, LPRECT >( pFunc, hTheme, hdc, iPartId, iStateId, pContentRect, pExtentRect );
#else
		QOR_PP_UNREF4( hTheme, hdc, iPartId, iStateId );
		QOR_PP_UNREF2( pContentRect, pExtentRect );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetThemeBackgroundExtent" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::GetThemeBackgroundRegion( HTHEME hTheme, HDC hdc, int iPartId, int iStateId, LPCRECT pRect, HRGN* pRegion )
	{
		_WINQ_FCONTEXT( "CUXTheme::GetThemeBackgroundRegion" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( GetThemeBackgroundRegion );
		hResult = Call< HRESULT, HTHEME, HDC, int, int, LPCRECT, HRGN* >( pFunc, hTheme, hdc, iPartId, iStateId, pRect, pRegion );
#else
		QOR_PP_UNREF4( hTheme, hdc, iPartId, iStateId );
		QOR_PP_UNREF2( pRect, pRegion );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetThemeBackgroundRegion" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::GetThemeBitmap( HTHEME hTheme, int iPartId, int iStateId, int iPropId, ULONG dwFlags, HBITMAP* phBitmap )
	{
		_WINQ_FCONTEXT( "CUXTheme::GetThemeBitmap" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( GetThemeBitmap );
		hResult = Call< HRESULT, HTHEME, int, int, int, ULONG, HBITMAP* >( pFunc, hTheme, iPartId, iStateId, iPropId, dwFlags, phBitmap );
#else
		QOR_PP_UNREF4( hTheme, iPartId, iStateId, iPropId );
		QOR_PP_UNREF2( dwFlags, phBitmap );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetThemeBitmap" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::GetThemeBool( HTHEME hTheme, int iPartId, int iStateId, int iPropId, BOOL* pfVal )
	{
		_WINQ_FCONTEXT( "CUXTheme::GetThemeBool" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( GetThemeBool );
		hResult = Call< HRESULT, HTHEME, int, int, int, BOOL* >( pFunc, hTheme, iPartId, iStateId, iPropId, pfVal );
#else
		QOR_PP_UNREF4( hTheme, iPartId, iStateId, iPropId );
		QOR_PP_UNREF( pfVal );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetThemeBool" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::GetThemeColor( HTHEME hTheme, int iPartId, int iStateId, int iPropId, COLORREF* pColor )
	{
		_WINQ_FCONTEXT( "CUXTheme::GetThemeColor" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;		
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( GetThemeColor );
		hResult = Call< HRESULT, HTHEME, int, int, int, COLORREF* >( pFunc, hTheme, iPartId, iStateId, iPropId, pColor );
#else
		QOR_PP_UNREF4( hTheme, iPartId, iStateId, iPropId );
		QOR_PP_UNREF( pColor );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetThemeColor" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::GetThemeDocumentationProperty( LPCWSTR pszThemeName, LPCWSTR pszPropertyName, LPWSTR pszValueBuff, int cchMaxValChars )
	{
		_WINQ_FCONTEXT( "CUXTheme::GetThemeDocumentationProperty" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;		
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( GetThemeDocumentationProperty );
		hResult = Call< HRESULT, LPCWSTR, LPCWSTR, LPWSTR, int >( pFunc, pszThemeName, pszPropertyName, pszValueBuff, cchMaxValChars );
#else
		QOR_PP_UNREF4( pszThemeName, pszPropertyName, pszValueBuff, cchMaxValChars );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetThemeDocumentationProperty" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::GetThemeEnumValue( HTHEME hTheme, int iPartId, int iStateId, int iPropId, int* piVal )
	{
		_WINQ_FCONTEXT( "CUXTheme::GetThemeEnumValue" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( GetThemeEnumValue );
		hResult = Call< HRESULT, HTHEME, int, int, int, int* >( pFunc, hTheme, iPartId, iStateId, iPropId, piVal );
#else
		QOR_PP_UNREF4( hTheme, iPartId, iStateId, iPropId )
		QOR_PP_UNREF( piVal );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetThemeEnumValue" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::GetThemeFilename( HTHEME hTheme, int iPartId, int iStateId, int iPropId, LPWSTR pszThemeFilename, int cchMaxBuffChars )
	{
		_WINQ_FCONTEXT( "CUXTheme::GetThemeFilename" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;		
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( GetThemeFilename );
		hResult = Call< HRESULT, HTHEME, int, int, int, LPWSTR, int >( pFunc, hTheme, iPartId, iStateId, iPropId, pszThemeFilename, cchMaxBuffChars );
#else
		QOR_PP_UNREF4( hTheme, iPartId, iStateId, iPropId );
		QOR_PP_UNREF2( pszThemeFilename, cchMaxBuffChars );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetThemeFilename" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return hResult;
	}
	
	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::GetThemeFont( HTHEME hTheme, HDC hdc, int iPartId, int iStateId, int iPropId, LOGFONTW* pFont )
	{
		_WINQ_FCONTEXT( "CUXTheme::GetThemeFont" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( GetThemeFont );
		hResult = Call< HRESULT, HTHEME, HDC, int, int, int, LOGFONTW* >( pFunc, hTheme, hdc, iPartId, iStateId, iPropId, pFont );
#else
		QOR_PP_UNREF4( hTheme, hdc, iPartId, iStateId );
		QOR_PP_UNREF2( iPropId, pFont );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetThemeFont" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return hResult;
	}
	
	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::GetThemeInt( HTHEME hTheme, int iPartId, int iStateId, int iPropId, int* piVal )
	{
		_WINQ_FCONTEXT( "CUXTheme::GetThemeInt" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( GetThemeInt );
		hResult = Call< HRESULT, HTHEME, int, int, int, int* >( pFunc, hTheme, iPartId, iStateId, iPropId, piVal );
#else
		QOR_PP_UNREF( hTheme, iPartId, iStateId, iPropId );
		QOR_PP_UNREF( piVal );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetThemeInt" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return hResult;
	}
	
	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::GetThemeIntList( HTHEME hTheme, int iPartId, int iStateId, int iPropId, INTLIST* pIntList )
	{
		_WINQ_FCONTEXT( "CUXTheme::GetThemeIntList" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( GetThemeIntList );
		hResult = Call< HRESULT, HTHEME, int, int, int, INTLIST* >( pFunc, hTheme, iPartId, iStateId, iPropId, pIntList );
#else
		QOR_PP_UNREF( hTheme, iPartId, iStateId, iPropId )
		QOR_PP_UNREF( pIntList );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetThemeIntList" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return hResult;
	}
	
	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::GetThemeMargins( HTHEME hTheme, HDC hdc, int iPartId, int iStateId, int iPropId, LPRECT prc, MARGINS* pMargins )
	{
		_WINQ_FCONTEXT( "CUXTheme::GetThemeMargins" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( GetThemeMargins );
		hResult = Call< HRESULT, HTHEME, HDC, int, int, int, LPRECT, MARGINS* >( pFunc, hTheme, hdc, iPartId, iStateId, iPropId, prc, pMargins );
#else
		QOR_PP_UNREF4( hTheme, hdc, iPartId, iStateId );
		QOR_PP_UNREF3( iPropId, prc, pMargins );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetThemeMargins" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return hResult;
	}
	
	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::GetThemeMetric( HTHEME hTheme, HDC hdc, int iPartId, int iStateId, int iPropId, int* piVal )
	{
		_WINQ_FCONTEXT( "CUXTheme::GetThemeMetric" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( GetThemeMetric );
		hResult = Call< HRESULT, HTHEME, HDC, int, int, int, int* >( pFunc, hTheme, hdc, iPartId, iStateId, iPropId, piVal );
#else
		QOR_PP_UNREF4( hTheme, hdc, iPartId, iStateId );
		QOR_PP_UNREF2( iPropId, piVal );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetThemeMetric" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return hResult;
	}
	
	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::GetThemePartSize( HTHEME hTheme, HDC hdc, int iPartId, int iStateId, LPCRECT prc, THEMESIZE eSize, SIZE* psz )
	{
		_WINQ_FCONTEXT( "CUXTheme::GetThemePartSize" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;	
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( GetThemePartSize );
		hResult = Call< HRESULT, HTHEME, HDC, int, int, LPCRECT, THEMESIZE, SIZE* >( pFunc, hTheme, hdc, iPartId, iStateId, prc, eSize, psz );
#else
		QOR_PP_UNREF4( hTheme, hdc, iPartId, iStateId );
		QOR_PP_UNREF3( prc, eSize, psz );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetThemePartSize" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return hResult;
	}
	
	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::GetThemePosition( HTHEME hTheme, int iPartId, int iStateId, int iPropId, POINT* pPoint )
	{
		_WINQ_FCONTEXT( "CUXTheme::GetThemePosition" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( GetThemePosition );
		hResult = Call< HRESULT, HTHEME, int, int, int, POINT* >( pFunc, hTheme, iPartId, iStateId, iPropId, pPoint );
#else
		QOR_PP_UNREF( hTheme, iPartId, iStateId, iPropId );
		QOR_PP_UNREF( pPoint );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetThemePosition" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::GetThemePropertyOrigin( HTHEME hTheme, int iPartId, int iStateId, int iPropId, PROPERTYORIGIN* pOrigin )
	{
		_WINQ_FCONTEXT( "CUXTheme::GetThemePropertyOrigin" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( GetThemePropertyOrigin );
		hResult = Call< HRESULT, HTHEME, int, int, int, PROPERTYORIGIN* >( pFunc, hTheme, iPartId, iStateId, iPropId, pOrigin );
#else
		QOR_PP_UNREF4( hTheme, iPartId, iStateId, iPropId );
		QOR_PP_UNREF( pOrigin );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetThemePropertyOrigin" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::GetThemeRect( HTHEME hTheme, int iPartId, int iStateId, int iPropId, LPRECT pRect )
	{
		_WINQ_FCONTEXT( "CUXTheme::GetThemeRect" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( GetThemeRect );
		hResult = Call< HRESULT, HTHEME, int, int, int, LPRECT >( pFunc, hTheme, iPartId, iStateId, iPropId, pRect );
#else
		QOR_PP_UNREF4( hTheme, iPartId, iStateId, iPropId );
		QOR_PP_UNREF( pRect );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetThemeRect" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::GetThemeStream( HTHEME hTheme, int iPartId, int iStateId, int iPropId, VOID** ppvStream, DWORD* pcbStream, HINSTANCE hInst )
	{
		_WINQ_FCONTEXT( "CUXTheme::GetThemeStream" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;		
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( GetThemeStream );
		hResult = Call< HRESULT, HTHEME, int, int, int, VOID**, DWORD*, HINSTANCE >( pFunc, hTheme, iPartId, iStateId, iPropId, ppvStream, pcbStream, hInst );
#else
		QOR_PP_UNREF4( hTheme, iPartId, iStateId, iPropId );
		QOR_PP_UNREF3( ppvStream, pcbStream, hInst );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetThemeStream" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::GetThemeString( HTHEME hTheme, int iPartId, int iStateId, int iPropId, LPWSTR pszBuff, int cchMaxBuffChars )
	{
		_WINQ_FCONTEXT( "CUXTheme::GetThemeString" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( GetThemeString );
		hResult = Call< HRESULT, HTHEME, int, int, int, LPWSTR, int >( pFunc, hTheme, iPartId, iStateId, iPropId, pszBuff, cchMaxBuffChars );
#else
		QOR_PP_UNREF4( hTheme, iPartId, iStateId, iPropId );
		QOR_PP_UNREF2( pszBuff, cchMaxBuffChars );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetThemeString" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUXTheme::GetThemeSysBool( HTHEME hTheme, int iBoolID )
	{
		_WINQ_FCONTEXT( "CUXTheme::GetThemeSysBool" );
		BOOL bResult = FALSE;		
#if		( _WIN32_WINNT >= 0x501 )
		_WINQ_USESAPI( GetThemeSysBool );
		bResult = Call< BOOL, HTHEME, int >( pFunc, hTheme, iBoolID );
#else
		QOR_PP_UNREF2( hTheme, iBoolID );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetThemeSysBool" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x501 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	COLORREF CUXTheme::GetThemeSysColor( HTHEME hTheme, int iColorID )
	{
		_WINQ_FCONTEXT( "CUXTheme::GetThemeSysColor" );
		COLORREF Result = 0;		
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( GetThemeSysColor );
		Result = Call< COLORREF, HTHEME, int >( pFunc, hTheme, iColorID );
#else
		QOR_PP_UNREF2( hTheme, iColorID );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetThemeSysColor" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return Result;
	}

	//--------------------------------------------------------------------------------
	HBRUSH CUXTheme::GetThemeSysColorBrush( HTHEME hTheme, int iColorID )
	{
		_WINQ_FCONTEXT( "CUXTheme::GetThemeSysColorBrush" );
		CCheckReturn< HBRUSH, CCheckNonZero< HBRUSH > >::TType Result;
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( GetThemeSysColorBrush );
		Result = Call< HBRUSH, HTHEME, int >( pFunc, hTheme, iColorID );
#else
		QOR_PP_UNREF2( hTheme, iColorID );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetThemeSysColorBrush" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return Result;
	}

	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::GetThemeSysFont( HTHEME hTheme, int iFontID, LOGFONTW* plf )
	{
		_WINQ_FCONTEXT( "CUXTheme::GetThemeSysFont" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;		
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( GetThemeSysFont );
		hResult = Call< HRESULT, HTHEME, int, LOGFONTW* >( pFunc, hTheme, iFontID, plf );
#else
		QOR_PP_UNREF3( hTheme, iFontID, plf );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetThemeSysFont" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::GetThemeSysInt( HTHEME hTheme, int iIntID, int* piValue )
	{
		_WINQ_FCONTEXT( "CUXTheme::GetThemeSysInt" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;	
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( GetThemeSysInt );
		hResult = Call< HRESULT, HTHEME, int, int* >( pFunc, hTheme, iIntID, piValue );
#else
		QOR_PP_UNREF( hTheme, iIntID, piValue );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetThemeSysInt" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	int CUXTheme::GetThemeSysSize( HTHEME hTheme, int iSizeID )
	{
		_WINQ_FCONTEXT( "CUXTheme::GetThemeSysSize" );
		int iResult = 0;	
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( GetThemeSysSize );
		iResult = Call< int, HTHEME, int >( pFunc, hTheme, iSizeID );
#else
		QOR_PP_UNREF2( hTheme, iSizeID );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetThemeSysSize" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::GetThemeSysString( HTHEME hTheme, int iStringID, LPWSTR pszStringBuff, int cchMaxStringChars )
	{
		_WINQ_FCONTEXT( "CUXTheme::GetThemeSysString" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( GetThemeSysString );
		hResult = Call< HRESULT, HTHEME, int, LPWSTR, int >( pFunc, hTheme, iStringID, pszStringBuff, cchMaxStringChars );
#else
		QOR_PP_UNREF4( hTheme, iStringID, pszStringBuff, cchMaxStringChars );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetThemeSysString" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::GetThemeTextExtent( HTHEME hTheme, HDC hdc, int iPartId, int iStateId, LPCWSTR pszText, int iCharCount, DWORD dwTextFlags, LPCRECT pBoundingRect, LPRECT pExtentRect )
	{
		_WINQ_FCONTEXT( "CUXTheme::GetThemeTextExtent" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( GetThemeTextExtent );
		hResult = Call< HRESULT, HTHEME, HDC, int, int, LPCWSTR, int, DWORD, LPCRECT, LPRECT >( pFunc, hTheme, hdc, iPartId, iStateId, pszText, iCharCount, dwTextFlags, pBoundingRect, pExtentRect );
#else
		QOR_PP_UNREF4( hTheme, hdc, iPartId, iStateId );
		QOR_PP_UNREF4( pszText, iCharCount, dwTextFlags, pBoundingRect );
		QOR_PP_UNREF( pExtentRect );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetThemeTextExtent" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::GetThemeTextMetrics( HTHEME hTheme, HDC hdc, int iPartId, int iStateId, TEXTMETRIC* ptm )
	{
		_WINQ_FCONTEXT( "CUXTheme::GetThemeTextMetrics" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;	
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( GetThemeTextMetrics );
		hResult = Call< HRESULT, HTHEME, HDC, int, int, TEXTMETRIC* >( pFunc, hTheme, hdc, iPartId, iStateId, ptm );
#else
		QOR_PP_UNREF4( hTheme, hdc, iPartId, iStateId );
		QOR_PP_UNREF( ptm );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetThemeTextMetrics" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::GetThemeTransitionDuration( HTHEME hTheme, int iPartId, int iStateIdFrom, int iStateIdTo, int iPropId, DWORD* pdwDuration )
	{
		_WINQ_FCONTEXT( "CUXTheme::GetThemeTransitionDuration" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( GetThemeTransitionDuration );
		hResult = Call< HRESULT, HTHEME, int, int, int, int, DWORD* >( pFunc, hTheme, iPartId, iStateIdFrom, iStateIdTo, iPropId, pdwDuration );
#else
		QOR_PP_UNREF4( hTheme, iPartId, iStateIdFrom, iStateIdTo );
		QOR_PP_UNREF2( iPropId, pdwDuration );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetThemeTransitionDuration" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult ;
	}

	//--------------------------------------------------------------------------------
	HTHEME CUXTheme::GetWindowTheme( HWND hWnd )
	{
		_WINQ_FCONTEXT( "CUXTheme::GetWindowTheme" );
		HTHEME Result = 0;
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( GetWindowTheme );
		Result = Call< HTHEME, HWND >( pFunc, hWnd );
#else
		QOR_PP_UNREF( hWnd );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetWindowTheme" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return Result;
	}

	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::HitTestThemeBackground( HTHEME hTheme, HDC hdc, int iPartId, int iStateId, DWORD dwOptions, LPCRECT pRect, HRGN hrgn, POINT ptTest, WORD* pwHitTestCode )
	{
		_WINQ_FCONTEXT( "CUXTheme::HitTestThemeBackground" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;		
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( HitTestThemeBackground );
		hResult = Call< HRESULT, HTHEME, HDC, int, int, DWORD, LPCRECT, HRGN, POINT, WORD* >( pFunc, hTheme, hdc, iPartId, iStateId, dwOptions, pRect, hrgn, ptTest, pwHitTestCode );
#else
		QOR_PP_UNREF4( hTheme, hdc, iPartId, iStateId );
		QOR_PP_UNREF4( dwOptions, pRect, hrgn, ptTest );
		QOR_PP_UNREF( pwHitTestCode );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "HitTestThemeBackground" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUXTheme::IsAppThemed()
	{
		_WINQ_FCONTEXT( "CUXTheme::IsAppThemed" );
		BOOL bResult = FALSE;
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( IsAppThemed );
		bResult = Call< BOOL >( pFunc );
#else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "IsAppThemed" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUXTheme::IsCompositionActive()
	{
		_WINQ_FCONTEXT( "CUXTheme::IsCompositionActive" );
		BOOL bResult = FALSE;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( IsCompositionActive );
		bResult = Call< BOOL >( pFunc );
#else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "IsCompositionActive" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	//Note: Do not call this function during DllMain or global objects contructors. This may cause invalid return values in Windows Vista and may cause Windows XP to become unstable.
	BOOL CUXTheme::IsThemeActive()
	{
		_WINQ_FCONTEXT( "CUXTheme::IsThemeActive" );
		BOOL bResult = FALSE;		
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( IsThemeActive );
		bResult = Call< BOOL >( pFunc );
#else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "IsThemeActive" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUXTheme::IsThemeBackgroundPartiallyTransparent( HTHEME hTheme, int iPartId, int iStateId )
	{
		_WINQ_FCONTEXT( "CUXTheme::IsThemeBackgroundPartiallyTransparent" );
		BOOL bResult = FALSE;		
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( IsThemeBackgroundPartiallyTransparent );
		bResult = Call< BOOL, HTHEME, int, int >( pFunc, hTheme, iPartId, iStateId );
#else
		QOR_PP_UNREF( hTheme, iPartId, iStateId );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "IsThemeBackgroundPartiallyTransparent" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return bResult;
	}
	
	//--------------------------------------------------------------------------------
	BOOL CUXTheme::IsThemeDialogTextureEnabled( HWND hwnd )
	{
		_WINQ_FCONTEXT( "CUXTheme::IsThemeDialogTextureEnabled" );
		BOOL bResult = FALSE;
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( IsThemeDialogTextureEnabled );
		bResult = Call< BOOL, HWND >( pFunc, hwnd );
#else
		QOR_PP_UNREF( hwnd );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "IsThemeDialogTextureEnabled" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return bResult;
	}
	
	//--------------------------------------------------------------------------------
	BOOL CUXTheme::IsThemePartDefined( HTHEME hTheme, int iPartId, int iStateId )
	{
		_WINQ_FCONTEXT( "CUXTheme::IsThemePartDefined" );
		BOOL bResult = FALSE;
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( IsThemePartDefined );
		bResult = Call< BOOL, HTHEME, int, int >( pFunc, hTheme, iPartId, iStateId );
#else
		QOR_PP_UNREF3( hTheme, iPartId, iStateId );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "IsThemePartDefined" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return bResult;
	}
	
	//--------------------------------------------------------------------------------
	HTHEME CUXTheme::OpenThemeData( HWND hwnd, LPCWSTR pszClassList )
	{
		_WINQ_FCONTEXT( "CUXTheme::OpenThemeData" );
		CCheckReturn< HTHEME, CHandleCheck< > >::TType Result;
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( OpenThemeData );
		Result = Call< HTHEME, HWND, LPCWSTR >( pFunc, hwnd, pszClassList );
#else
		QOR_PP_UNREF2( hwnd, plszClassList );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OpenThemeData" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return Result;
	}
	
	//--------------------------------------------------------------------------------
	HTHEME CUXTheme::OpenThemeDataEx( HWND hwnd, LPCWSTR pszClassIdList, DWORD dwFlags )
	{
		_WINQ_FCONTEXT( "CUXTheme::OpenThemeDataEx" );
		CCheckReturn< HTHEME, CHandleCheck< > >::TType Result;
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( OpenThemeDataEx );
		Result = Call< HTHEME, HWND, LPCWSTR, DWORD >( pFunc, hwnd, pszClassIdList, dwFlags );
#else
		QOR_PP_UNREF3( hwnd, pszClassIdList, dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OpenThemeDataEx" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return Result;
	}
	
	//--------------------------------------------------------------------------------
	void CUXTheme::SetThemeAppProperties( DWORD dwFlags )
	{
		_WINQ_FCONTEXT( "CUXTheme::SetThemeAppProperties" );		
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( SetThemeAppProperties );
		voidCall< DWORD >( pFunc, dwFlags );
#else
		QOR_PP_UNREF( dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "SetThemeAppProperties" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
	}
	
	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::SetWindowTheme( HWND hwnd, LPCWSTR pszSubAppName, LPCWSTR pszSubIdList )
	{
		_WINQ_FCONTEXT( "CUXTheme::SetWindowTheme" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( SetWindowTheme );
		hResult = Call< HRESULT, HWND, LPCWSTR, LPCWSTR >( pFunc, hwnd, pszSubAppName, pszSubIdList );
#else
		QOR_PP_UNREF3( hwnd, pszSubAppName, pszSubIdList );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "SetWindowTheme" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return hResult;
	}
	
	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::SetWindowThemeAttribute( HWND hwnd, enum WINDOWTHEMEATTRIBUTETYPE eAttribute, PVOID pvAttribute, DWORD cbAttribute )
	{
		_WINQ_FCONTEXT( "CUXTheme::SetWindowThemeAttribute" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( SetWindowThemeAttribute );
		hResult = Call< HRESULT, HWND, WINDOWTHEMEATTRIBUTETYPE, PVOID, DWORD >( pFunc, hwnd, eAttribute, pvAttribute, cbAttribute );
#else
		QOR_PP_UNREF4( hwnd, eAttribute, pvAttribute, cbAttribute );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "SetWindowThemeAttribute" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CUXTheme::SetWindowThemeNonClientAttributes( HWND hwnd, DWORD dwMask, DWORD dwAttributes )
	{
		_WINQ_FCONTEXT( "CUXTheme::SetWindowThemeNonClientAttributes" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;	
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( SetWindowThemeNonClientAttributes );
		hResult = Call< HRESULT, HWND, DWORD, DWORD >( pFunc, hwnd, dwMask, dwAttributes );
#else
		QOR_PP_UNREF3( hwnd, dwMask, dwAttributes );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "SetWindowThemeNonClientAttributes" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}
	
	//--------------------------------------------------------------------------------
	//Note: Incremental calls to this function should always pass the sum of the increments and not just the latest increment itself.
	BOOL CUXTheme::UpdatePanningFeedback( HWND hwnd, LONG lTotalOverpanOffsetX, LONG lTotalOverpanOffsetY, BOOL fInInertia )
	{
		_WINQ_FCONTEXT( "CUXTheme::UpdatePanningFeedback" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0601 )
		_WINQ_USESAPI( UpdatePanningFeedback );
		bResult = Call< BOOL, HWND, LONG, LONG, BOOL >( pFunc, hwnd, lTotalOverpanOffsetX, lTotalOverpanOffsetY, fInInertia );
#else
		QOR_PP_UNREF( );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "UpdatePanningFeedback" ), _T( "Windows 7" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0601 )
		return bResult;
	}

}//nsWinQAPI
