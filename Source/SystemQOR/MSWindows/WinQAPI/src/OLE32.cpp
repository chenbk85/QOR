//OLE32.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQAPI/WinQAPI.h"
#include "SystemQOR.h"
#include "WinQAPI/Kernel32.h"
#include "WinQAPI/OLE32.h"
#include "ReturnCheck.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//--------------------------------------------------------------------------------
	HRESULT COLE32::BindMoniker( LPMONIKER pmk,	DWORD grfOpt, REFIID iidResult,	LPVOID* ppvResult )
	{
		_WINQ_FCONTEXT( "COLE32::BindMoniker" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( BindMoniker );
		hResult = Call< HRESULT, LPMONIKER, DWORD, REFIID, LPVOID* >( pFunc, pmk, grfOpt, iidResult, ppvResult );
#else
		__QCMP_UNREF4( pmk, grfOpt, iidResult, ppvResult );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "BindMoniker" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )		
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CLSIDFromProgID( LPCOLESTR lpszProgID, LPCLSID lpclsid )
	{
		_WINQ_FCONTEXT( "COLE32::CLSIDFromProgID" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CLSIDFromProgID );
		hResult = Call< HRESULT, LPCOLESTR, LPCLSID >( pFunc, lpszProgID, lpclsid );
#else
		__QCMP_UNREF( lpszProgID );
		__QCMP_UNREF( lpclsid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CLSIDFromProgID" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CLSIDFromProgIDEx( LPCOLESTR lpszProgID, LPCLSID lpclsid )
	{
		_WINQ_FCONTEXT( "COLE32::CLSIDFromProgIDEx" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CLSIDFromProgIDEx );
		hResult = Call< HRESULT, LPCOLESTR, LPCLSID >( pFunc, lpszProgID, lpclsid );
#else
		__QCMP_UNREF( lpszProgID );
		__QCMP_UNREF( lpclsid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CLSIDFromProgIDEx" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CLSIDFromString( LPCOLESTR lpsz, LPCLSID pclsid	)
	{
		_WINQ_FCONTEXT( "COLE32::CLSIDFromString" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CLSIDFromString );
		hResult = Call< HRESULT, LPCOLESTR, LPCLSID >( pFunc, lpsz, pclsid );
#else
		__QCMP_UNREF( lpsz );
		__QCMP_UNREF( pclsid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CLSIDFromString" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )		
		return hResult;
	}

	//--------------------------------------------------------------------
	ULONG COLE32::CoAddRefServerProcess(void)
	{
		_WINQ_FCONTEXT( "COLE32::CoAddRefServerProcess" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoAddRefServerProcess );
		hResult = Call< ULONG >( pFunc );
#else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoAddRefServerProcess" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoAllowSetForegroundWindow( IUnknown* pUnk, LPVOID lpvReserved )
	{
		_WINQ_FCONTEXT( "COLE32::CoAllowSetForegroundWindow" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoAllowSetForegroundWindow );
		hResult = Call< HRESULT, IUnknown*, LPVOID >( pFunc, pUnk, lpvReserved );
#else
		__QCMP_UNREF( pUnk );
		__QCMP_UNREF( lpvReserved );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoAllowSetForegroundWindow" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoCancelCall( DWORD dwThreadId, ULONG ulTimeout )
	{
		_WINQ_FCONTEXT( "COLE32::CoCancelCall" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoCancelCall );
		hResult = Call< HRESULT, DWORD, ULONG >( pFunc, dwThreadId, ulTimeout );
#else
		__QCMP_UNREF( dwThreadId );
		__QCMP_UNREF( ulTimeout );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoCancelCall" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoCopyProxy( IUnknown* pProxy, IUnknown** ppCopy )
	{
		_WINQ_FCONTEXT( "COLE32::CoCopyProxy" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoCopyProxy );
		hResult = Call< HRESULT, IUnknown*, IUnknown** >( pFunc, pProxy, ppCopy );
#else
		__QCMP_UNREF( pProxy );
		__QCMP_UNREF( ppCopy );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoCopyProxy" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoCreateFreeThreadedMarshaler( LPUNKNOWN punkOuter, LPUNKNOWN* ppunkMarshal )
	{
		_WINQ_FCONTEXT( "COLE32::CoCreateFreeThreadedMarshaler" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoCreateFreeThreadedMarshaler );
		hResult = Call< HRESULT, LPUNKNOWN, LPUNKNOWN* >( pFunc, punkOuter, ppunkMarshal );
#else
		__QCMP_UNREF( punkOuter );
		__QCMP_UNREF( ppunkMarshal );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoCreateFreeThreadedMarshaler" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoCreateGuid( GUID* pguid )
	{
		_WINQ_FCONTEXT( "COLE32::CoCreateGuid" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoCreateGuid );
		hResult = Call< HRESULT, GUID* >( pFunc, pguid );
#else
		__QCMP_UNREF( pguid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoCreateGuid" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoCreateInstance( REFCLSID rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, REFIID riid, LPVOID* ppv )
	{
		_WINQ_FCONTEXT( "COLE32::CoCreateInstance" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoCreateInstance );
		hResult = Call< HRESULT, REFCLSID, LPUNKNOWN, DWORD, REFIID, LPVOID* >( pFunc, rclsid, pUnkOuter, dwClsContext, riid, ppv );
#else
		__QCMP_UNREF4( rclsid, pUnkOuter, dwClsContext, riid );
		__QCMP_UNREF( ppv );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoCreateInstance" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoCreateInstanceEx( REFCLSID rclsid, IUnknown* punkOuter, DWORD dwClsCtx, COSERVERINFO* pServerInfo, DWORD dwCount, MULTI_QI* pResults )
	{
		_WINQ_FCONTEXT( "COLE32::CoCreateInstanceEx" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoCreateInstanceEx );
		hResult = Call< HRESULT, REFCLSID, IUnknown*, DWORD, COSERVERINFO*, DWORD, MULTI_QI* >( pFunc, rclsid, punkOuter, dwClsCtx, pServerInfo, dwCount, pResults );
#else
		__QCMP_UNREF4( rclsid, punkOuter, dwClsCtx, pServerInfo );
		__QCMP_UNREF( dwCount );
		__QCMP_UNREF( pResults );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoCreateInstanceEx" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoDisableCallCancellation( LPVOID pReserved	)
	{
		_WINQ_FCONTEXT( "COLE32::CoDisableCallCancellation" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoDisableCallCancellation );
		hResult = Call< HRESULT, LPVOID >( pFunc, pReserved );
#else
		__QCMP_UNREF( pReserved );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoDisableCallCancellation" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoDisconnectContext( DWORD dwTimeout )
	{
		_WINQ_FCONTEXT( "COLE32::CoDisconnectContext" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( CoDisconnectContext );
		hResult = Call< HRESULT, DWORD >( pFunc, dwTimeout );
#else
		__QCMP_UNREF( dwTimeout );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoDisconnectContext" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoDisconnectObject( LPUNKNOWN pUnk, DWORD dwReserved )
	{
		_WINQ_FCONTEXT( "COLE32::CoDisconnectObject" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoDisconnectObject );
		hResult = Call< HRESULT, LPUNKNOWN, DWORD >( pFunc, pUnk, dwReserved );
#else
		__QCMP_UNREF( pUnk );
		__QCMP_UNREF( dwReserved );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoDisconnectObject" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	BOOL COLE32::CoDosDateTimeToFileTime( WORD nDosDate, WORD nDosTime, ::FILETIME* lpFileTime )
	{
		_WINQ_FCONTEXT( "COLE32::CoDosDateTimeToFileTime" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoDosDateTimeToFileTime );
		bResult = Call< BOOL, WORD, WORD, ::FILETIME* >( pFunc, nDosDate, nDosTime, lpFileTime );
#else
		__QCMP_UNREF( nDosDate );
		__QCMP_UNREF( nDosTime );
		__QCMP_UNREF( lpFileTime );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoDosDateTimeToFileTime" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoEnableCallCancellation( LPVOID pReserved )
	{
		_WINQ_FCONTEXT( "COLE32::CoEnableCallCancellation" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoEnableCallCancellation );
		hResult = Call< HRESULT, LPVOID >( pFunc, pReserved );
#else
		__QCMP_UNREF( pReserved );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoEnableCallCancellation" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoFileTimeNow( ::FILETIME* lpFileTime	)
	{
		_WINQ_FCONTEXT( "COLE32::CoFileTimeNow" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoFileTimeNow );
		hResult = Call< HRESULT, ::FILETIME* >( pFunc, lpFileTime );
#else
		__QCMP_UNREF( lpFileTime );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoFileTimeNow" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	BOOL COLE32::CoFileTimeToDosDateTime( ::FILETIME* lpFileTime, LPWORD lpDosDate, LPWORD lpDosTime )
	{
		_WINQ_FCONTEXT( "COLE32::CoFileTimeToDosDateTime" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoFileTimeToDosDateTime );
		bResult = Call< BOOL, ::FILETIME*, LPWORD, LPWORD >( pFunc, lpFileTime, lpDosDate, lpDosTime );
#else
		__QCMP_UNREF( lpFileTime );
		__QCMP_UNREF( lpDosDate );
		__QCMP_UNREF( lpDosTime );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoFileTimeToDosDateTime" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//--------------------------------------------------------------------
	void COLE32::CoFreeAllLibraries( void )
	{
		_WINQ_FCONTEXT( "COLE32::CoFreeAllLibraries" );
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoFreeAllLibraries );
		voidCallvoid( pFunc );
#else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoFreeAllLibraries" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
	}

	//--------------------------------------------------------------------
	void COLE32::CoFreeLibrary( HINSTANCE hInst	)
	{
		_WINQ_FCONTEXT( "COLE32::CoFreeLibrary" );
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoFreeLibrary );
		voidCall< HINSTANCE >( pFunc, hInst );
#else
		__QCMP_UNREF( hInst );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoFreeLibrary" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
	}

	//--------------------------------------------------------------------
	void COLE32::CoFreeUnusedLibraries( void )
	{
		_WINQ_FCONTEXT( "COLE32::CoFreeUnusedLibraries" );
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoFreeUnusedLibraries );
		voidCallvoid( pFunc );
#else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoFreeUnusedLibraries" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
	}

	//--------------------------------------------------------------------
	void COLE32::CoFreeUnusedLibrariesEx( DWORD dwUnloadDelay, DWORD dwReserved )
	{
		_WINQ_FCONTEXT( "COLE32::CoFreeUnusedLibrariesEx" );
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoFreeUnusedLibrariesEx );
		voidCall< DWORD, DWORD >( pFunc, dwUnloadDelay, dwReserved );
#else
		__QCMP_UNREF( dwUnloadDelay );
		__QCMP_UNREF( dwReserved );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoFreeUnusedLibrariesEx" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoGetApartmentType( APTTYPE* pAptType, APTTYPEQUALIFIER* pAptQualifier )
	{
		_WINQ_FCONTEXT( "COLE32::CoGetApartmentType" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoGetApartmentType );
		hResult = Call< HRESULT, APTTYPE*, APTTYPEQUALIFIER* >( pFunc, pAptType, pAptQualifier );
#else
		__QCMP_UNREF( pAptType );
		__QCMP_UNREF( pAptQualifier );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoGetApartmentType" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoGetCallContext( REFIID riid, void** ppInterface )
	{
		_WINQ_FCONTEXT( "COLE32::CoGetCallContext" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoGetCallContext );
		hResult = Call< HRESULT, REFIID, void** >( pFunc, riid, ppInterface );
#else
		__QCMP_UNREF( riid );
		__QCMP_UNREF( ppInterface );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoGetCallContext" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoGetCallerTID( LPDWORD lpdwTID )
	{
		_WINQ_FCONTEXT( "COLE32::CoGetCallerTID" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoGetCallerTID );
		hResult = Call< HRESULT, LPDWORD >( pFunc, lpdwTID );
#else
		__QCMP_UNREF( lpdwTID );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoGetCallerTID" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoGetCancelObject( DWORD dwThreadId, REFIID iid, void** ppUnk )
	{
		_WINQ_FCONTEXT( "COLE32::CoGetCancelObject" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoGetCancelObject );
		hResult = Call< HRESULT, DWORD, REFIID, void** >( pFunc, dwThreadId, iid, ppUnk );
#else
		__QCMP_UNREF( dwThreadId );
		__QCMP_UNREF( iid );
		__QCMP_UNREF( ppUnk );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoGetCancelObject" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoGetClassObject( REFCLSID rclsid, DWORD dwClsContext, COSERVERINFO* pServerInfo, REFIID riid, LPVOID* ppv )
	{
		_WINQ_FCONTEXT( "COLE32::CoGetClassObject" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoGetClassObject );
		hResult = Call< HRESULT, REFCLSID, DWORD, COSERVERINFO*, REFIID, LPVOID* >( pFunc, rclsid, dwClsContext, pServerInfo, riid, ppv );
#else
		__QCMP_UNREF4( rclsid, dwClsContext, pServerInfo, riid );
		__QCMP_UNREF( ppv );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoGetClassObject" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoGetContextToken( ULONG_PTR* pToken )
	{
		_WINQ_FCONTEXT( "COLE32::CoGetContextToken" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoGetContextToken );
		hResult = Call< HRESULT, ULONG_PTR* >( pFunc, pToken );
#else
		__QCMP_UNREF( pToken );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoGetContextToken" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoGetCurrentLogicalThreadId( GUID* pguid )
	{
		_WINQ_FCONTEXT( "COLE32::CoGetCurrentLogicalThreadId" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoGetCurrentLogicalThreadId );
		hResult = Call< HRESULT, GUID* >( pFunc, pguid );
#else
		__QCMP_UNREF( pguid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoGetCurrentLogicalThreadId" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	DWORD COLE32::CoGetCurrentProcess( void )
	{
		_WINQ_FCONTEXT( "COLE32::CoGetCurrentProcess" );
		DWORD dwResult = 0;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoGetCurrentProcess );
		dwResult = Call< DWORD >( pFunc );
#else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoGetCurrentProcess" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return dwResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoGetDefaultContext( APTTYPE aptType, REFIID riid, void** ppv )
	{
		_WINQ_FCONTEXT( "COLE32::CoGetDefaultContext" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( CoGetDefaultContext );
		hResult = Call< HRESULT, APTTYPE, REFIID, void** >( pFunc, aptType, riid, ppv );
#else
		__QCMP_UNREF( aptType );
		__QCMP_UNREF( riid );
		__QCMP_UNREF( ppv );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoGetDefaultContext" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoGetInstanceFromFile( COSERVERINFO* pServerInfo, CLSID* pClsid, IUnknown* punkOuter, DWORD dwClsCtx, DWORD grfMode, OLECHAR* pwszName, DWORD dwCount, MULTI_QI* pResults )
	{
		_WINQ_FCONTEXT( "COLE32::CoGetInstanceFromFile" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoGetInstanceFromFile );
		hResult = Call< HRESULT, COSERVERINFO*, CLSID*, IUnknown*, DWORD, DWORD, OLECHAR*, DWORD, MULTI_QI* >( pFunc, pServerInfo, pClsid, punkOuter, dwClsCtx, grfMode, pwszName, dwCount, pResults );
#else
		__QCMP_UNREF4( pServerInfo, pClsid, punkOuter, dwClsCtx );
		__QCMP_UNREF4( grfMode, pwszName, dwCount, pResults );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoGetInstanceFromFile" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoGetInstanceFromIStorage( COSERVERINFO* pServerInfo, CLSID* pClsid, IUnknown* punkOuter, DWORD dwClsCtx, IStorage* pstg, DWORD dwCount, MULTI_QI* pResults	)
	{
		_WINQ_FCONTEXT( "COLE32::CoGetInstanceFromIStorage" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoGetInstanceFromIStorage );
		hResult = Call< HRESULT, COSERVERINFO*, CLSID*, IUnknown*, DWORD, IStorage*, DWORD, MULTI_QI* >( pFunc, pServerInfo, pClsid, punkOuter, dwClsCtx, pstg, dwCount, pResults );
#else
		__QCMP_UNREF4( pServerInfo, pClsid, punkOuter, dwClsCtx );
		__QCMP_UNREF( pstg );
		__QCMP_UNREF( dwCount );
		__QCMP_UNREF( pResults );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoGetInstanceFromIStorage" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoGetInterceptor( REFIID iidIntercepted, IUnknown* punkOuter, REFIID iid, void** ppv )
	{
		_WINQ_FCONTEXT( "COLE32::CoGetInterceptor" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoGetInterceptor );
		hResult = Call< HRESULT, REFIID, IUnknown*, REFIID, void** >( pFunc, iidIntercepted, punkOuter, iid, ppv );
#else
		__QCMP_UNREF4( iidIntercepted, punkOuter, iid, ppv );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoGetInterceptor" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoGetInterfaceAndReleaseStream( LPSTREAM pStm, REFIID iid, LPVOID* ppv )
	{
		_WINQ_FCONTEXT( "COLE32::CoGetInterfaceAndReleaseStream" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoGetInterfaceAndReleaseStream );
		hResult = Call< HRESULT, LPSTREAM, REFIID, LPVOID* >( pFunc, pStm, iid, ppv );
#else
		__QCMP_UNREF( pStm );
		__QCMP_UNREF( iid );
		__QCMP_UNREF( ppv );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoGetInterfaceAndReleaseStream" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoGetMalloc( DWORD dwMemContext, LPMALLOC* ppMalloc )
	{
		_WINQ_FCONTEXT( "COLE32::CoGetMalloc" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoGetMalloc );
		hResult = Call< HRESULT, DWORD, LPMALLOC* >( pFunc, dwMemContext, ppMalloc );
#else
		__QCMP_UNREF( dwMemContext );
		__QCMP_UNREF( ppMalloc );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoGetMalloc" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoGetMarshalSizeMax( ULONG* pulSize, REFIID riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags )
	{
		_WINQ_FCONTEXT( "COLE32::CoGetMarshalSizeMax" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoGetMarshalSizeMax );
		hResult = Call< HRESULT, ULONG*, REFIID, LPUNKNOWN, DWORD, LPVOID, DWORD >( pFunc, pulSize, riid, pUnk, dwDestContext, pvDestContext, mshlflags );
#else
		__QCMP_UNREF4( pulSize, riid, pUnk, dwDestContext );
		__QCMP_UNREF( pvDestContext );
		__QCMP_UNREF( mshlflags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoGetMarshalSizeMax" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoGetObject( LPCWSTR pszName, BIND_OPTS* pBindOptions, REFIID riid, void** ppv )
	{
		_WINQ_FCONTEXT( "COLE32::CoGetObject" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoGetObject );
		hResult = Call< HRESULT, LPCWSTR, BIND_OPTS*, REFIID, void** >( pFunc,pszName, pBindOptions, riid, ppv );
#else
		__QCMP_UNREF4( pszName, pBindOptions, riid, ppv );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoGetObject" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoGetObjectContext( REFIID riid, LPVOID* ppv )
	{
		_WINQ_FCONTEXT( "COLE32::CoGetObjectContext" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoGetObjectContext );
		hResult = Call< HRESULT, REFIID, LPVOID* >( pFunc, riid, ppv );
#else
		__QCMP_UNREF( riid );
		__QCMP_UNREF( ppv );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoGetObjectContext" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoGetPSClsid( REFIID riid, CLSID* pClsid )
	{
		_WINQ_FCONTEXT( "COLE32::CoGetPSClsid" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoGetPSClsid );
		hResult = Call< HRESULT, REFIID, CLSID* >( pFunc, riid, pClsid );
#else
		__QCMP_UNREF( riid );
		__QCMP_UNREF( pClsid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoGetPSClsid" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoGetStandardMarshal( REFIID riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags, LPMARSHAL* ppMarshal )
	{
		_WINQ_FCONTEXT( "COLE32::CoGetStandardMarshal" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoGetStandardMarshal );
		hResult = Call< HRESULT, REFIID, LPUNKNOWN, DWORD, LPVOID, DWORD, LPMARSHAL* >( pFunc, riid, pUnk, dwDestContext, pvDestContext, mshlflags, ppMarshal );
#else
		__QCMP_UNREF4( riid, pUnk, dwDestContext, pvDestContext );
		__QCMP_UNREF( mshlflags );
		__QCMP_UNREF( ppMarshal );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoGetStandardMarshal" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoGetStdMarshalEx( LPUNKNOWN pUnkOuter, DWORD smexflags, LPUNKNOWN* ppUnkInner )
	{
		_WINQ_FCONTEXT( "COLE32::CoGetStdMarshalEx" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoGetStdMarshalEx );
		hResult = Call< HRESULT, LPUNKNOWN, DWORD, LPUNKNOWN* >( pFunc, pUnkOuter, smexflags, ppUnkInner );
#else
		__QCMP_UNREF( pUnkOuter );
		__QCMP_UNREF( smexflags );
		__QCMP_UNREF( ppUnkInner );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoGetStdMarshalEx" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoGetTreatAsClass( REFCLSID clsidOld, LPCLSID pClsidNew )
	{
		_WINQ_FCONTEXT( "COLE32::CoGetTreatAsClass" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoGetTreatAsClass );
		hResult = Call< HRESULT, REFCLSID, LPCLSID >( pFunc, clsidOld, pClsidNew );
#else
		__QCMP_UNREF( clsidOld );
		__QCMP_UNREF( pClsidNew );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoGetTreatAsClass" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoImpersonateClient( void )
	{
		_WINQ_FCONTEXT( "COLE32::CoImpersonateClient" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoImpersonateClient );
		hResult = Call< HRESULT >( pFunc );
#else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoImpersonateClient" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoInitialize( LPVOID pvReserved )
	{
		_WINQ_FCONTEXT( "COLE32::CoInitialize" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoInitialize );
		hResult = Call< HRESULT, LPVOID >( pFunc, pvReserved );
#else
		__QCMP_UNREF( pvReserved );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoInitialize" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoInitializeEx( LPVOID pvReserved, DWORD dwCoInit )
	{
		_WINQ_FCONTEXT( "COLE32::CoInitializeEx" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoInitializeEx );
		hResult = Call< HRESULT, LPVOID, DWORD >( pFunc, pvReserved, dwCoInit );
#else
		__QCMP_UNREF( pvReserved );
		__QCMP_UNREF( dwCoInit );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoInitializeEx" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoInitializeSecurity( PSECURITY_DESCRIPTOR pSecDesc, LONG cAuthSvc, SOLE_AUTHENTICATION_SERVICE* asAuthSvc, void* pReserved1, DWORD dwAuthnLevel, DWORD dwImpLevel, void* pAuthList, DWORD dwCapabilities, void* pReserved3 )
	{
		_WINQ_FCONTEXT( "COLE32::CoInitializeSecurity" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoInitializeSecurity );
		hResult = Call< HRESULT, PSECURITY_DESCRIPTOR, LONG, SOLE_AUTHENTICATION_SERVICE*, void*, DWORD, DWORD, void*, DWORD, void* >( pFunc, pSecDesc, cAuthSvc, asAuthSvc, pReserved1, dwAuthnLevel, dwImpLevel, pAuthList, dwCapabilities, pReserved3 );
#else
		__QCMP_UNREF4( pSecDesc, cAuthSvc, asAuthSvc, pReserved1 );
		__QCMP_UNREF4( dwAuthnLevel, dwImpLevel, pAuthList, dwCapabilities );
		__QCMP_UNREF( pReserved3 );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoInitializeSecurity" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoInstall( IBindCtx* pbc, DWORD dwFlags, uCLSSPEC* pClassSpec, QUERYCONTEXT* pQuery, LPWSTR pszCodeBase )
	{
		_WINQ_FCONTEXT( "COLE32::CoInstall" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoInstall );
		hResult = Call< HRESULT, IBindCtx*, DWORD, uCLSSPEC*, QUERYCONTEXT*, LPWSTR >( pFunc, pbc, dwFlags, pClassSpec, pQuery, pszCodeBase );
#else
		__QCMP_UNREF4( pbc, dwFlags, pClassSpec, pQuery );
		__QCMP_UNREF( pszCodeBase );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoInstall" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoInvalidateRemoteMachineBindings( LPOLESTR pszMachineName )
	{
		_WINQ_FCONTEXT( "COLE32::CoInvalidateRemoteMachineBindings" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0502 )
		_WINQ_USESAPI( CoInvalidateRemoteMachineBindings );
		hResult = Call< HRESULT, LPOLESTR >( pFunc, pszMachineName );
#else
		__QCMP_UNREF( pszMachineName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoInvalidateRemoteMachineBindings" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0502 )
		return hResult;
	}

	//--------------------------------------------------------------------
	BOOL COLE32::CoIsHandlerConnected( LPUNKNOWN pUnk )
	{
		_WINQ_FCONTEXT( "COLE32::CoIsHandlerConnected" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoIsHandlerConnected );
		bResult = Call< BOOL, LPUNKNOWN >( pFunc, pUnk );
#else
		__QCMP_UNREF( pUnk );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoIsHandlerConnected" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//--------------------------------------------------------------------
	BOOL COLE32::CoIsOle1Class( REFCLSID rclsid )
	{
		_WINQ_FCONTEXT( "COLE32::CoIsOle1Class" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoIsOle1Class );
		bResult = Call< BOOL, REFCLSID >( pFunc, rclsid );
#else
		__QCMP_UNREF( rclsid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoIsOle1Class" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//--------------------------------------------------------------------
	HINSTANCE COLE32::CoLoadLibrary( LPOLESTR lpszLibName, BOOL bAutoFree )
	{
		_WINQ_FCONTEXT( "COLE32::CoLoadLibrary" );
		CCheckReturn< HINSTANCE, CTSuccessCheck< HINSTANCE > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoLoadLibrary );
		hResult = Call< HINSTANCE,LPOLESTR, BOOL >( pFunc, lpszLibName, bAutoFree );
#else
		__QCMP_UNREF( lpszLibName );
		__QCMP_UNREF( bAutoFree );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoLoadLibrary" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoLockObjectExternal( LPUNKNOWN pUnk, BOOL fLock, BOOL fLastUnlockReleases )
	{
		_WINQ_FCONTEXT( "COLE32::CoLockObjectExternal" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoLockObjectExternal );
		hResult = Call< HRESULT, LPUNKNOWN, BOOL, BOOL >( pFunc, pUnk, fLock, fLastUnlockReleases );
#else
		__QCMP_UNREF( pUnk );
		__QCMP_UNREF( fLock );
		__QCMP_UNREF( fLastUnlockReleases );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoLockObjectExternal" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoMarshalHresult( LPSTREAM pstm, HRESULT hresult )
	{
		_WINQ_FCONTEXT( "COLE32::CoMarshalHresult" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoMarshalHresult );
		hResult = Call< HRESULT, LPSTREAM, HRESULT >( pFunc, pstm, hresult );
#else
		__QCMP_UNREF( pstm );
		__QCMP_UNREF( hresult );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoMarshalHresult" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoMarshalInterThreadInterfaceInStream( REFIID riid, LPUNKNOWN pUnk,	LPSTREAM* ppStm	)
	{
		_WINQ_FCONTEXT( "COLE32::CoMarshalInterThreadInterfaceInStream" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoMarshalInterThreadInterfaceInStream );
		hResult = Call< HRESULT, REFIID, LPUNKNOWN, LPSTREAM* >( pFunc, riid, pUnk, ppStm );
#else
		__QCMP_UNREF( riid );
		__QCMP_UNREF( pUnk );
		__QCMP_UNREF( ppStm );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoMarshalInterThreadInterfaceInStream" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoMarshalInterface( LPSTREAM pStm, REFIID riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags )
	{
		_WINQ_FCONTEXT( "COLE32::CoMarshalInterface" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoMarshalInterface );
		hResult = Call< HRESULT, LPSTREAM, REFIID, LPUNKNOWN, DWORD, LPVOID, DWORD >( pFunc, pStm, riid, pUnk, dwDestContext, pvDestContext, mshlflags );
#else
		__QCMP_UNREF4( pStm, riid, pUnk, dwDestContext );
		__QCMP_UNREF( pvDestContext );
		__QCMP_UNREF( mshlflags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoMarshalInterface" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoQueryAuthenticationServices( DWORD* pcAuthSvc, SOLE_AUTHENTICATION_SERVICE** asAuthSvc )
	{
		_WINQ_FCONTEXT( "COLE32::CoQueryAuthenticationServices" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoQueryAuthenticationServices );
		hResult = Call< HRESULT, DWORD*, SOLE_AUTHENTICATION_SERVICE** >( pFunc, pcAuthSvc, asAuthSvc );
#else
		__QCMP_UNREF( pcAuthSvc );
		__QCMP_UNREF( asAuthSvc );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoQueryAuthenticationServices" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoQueryClientBlanket( DWORD* pAuthnSvc, DWORD* pAuthzSvc, OLECHAR** pServerPrincName, DWORD* pAuthnLevel, DWORD* pImpLevel, RPC_AUTHZ_HANDLE* pPrivs, DWORD* pCapabilities )
	{
		_WINQ_FCONTEXT( "COLE32::CoQueryClientBlanket" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoQueryClientBlanket );
		hResult = Call< HRESULT, DWORD*, DWORD*, OLECHAR**, DWORD*, DWORD*, RPC_AUTHZ_HANDLE*, DWORD* >( pFunc, pAuthnSvc, pAuthzSvc, pServerPrincName, pAuthnLevel, pImpLevel, pPrivs, pCapabilities );
#else
		__QCMP_UNREF4( pAuthnSvc, pAuthzSvc, pServerPrincName, pAuthnLevel );
		__QCMP_UNREF( pImpLevel );
		__QCMP_UNREF( pPrivs );
		__QCMP_UNREF( pCapabilities );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoQueryClientBlanket" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoQueryProxyBlanket( IUnknown* pProxy, DWORD* pwAuthnSvc, DWORD* pAuthzSvc, OLECHAR** pServerPrincName, DWORD* pAuthnLevel, DWORD* pImpLevel, RPC_AUTH_IDENTITY_HANDLE* pAuthInfo, DWORD* pCapabilites )
	{
		_WINQ_FCONTEXT( "COLE32::CoQueryProxyBlanket" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoQueryProxyBlanket );
		hResult = Call< HRESULT, IUnknown*, DWORD*, DWORD*, OLECHAR**, DWORD*, DWORD*, RPC_AUTH_IDENTITY_HANDLE*, DWORD* >( pFunc, pProxy, pwAuthnSvc, pAuthzSvc, pServerPrincName, pAuthnLevel, pImpLevel, pAuthInfo, pCapabilites );
#else
		__QCMP_UNREF4( pProxy, pwAuthnSvc, pAuthzSvc, pServerPrincName );
		__QCMP_UNREF4( pAuthnLevel, pImpLevel, pAuthInfo, pCapabilites );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoQueryProxyBlanket" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoRegisterClassObject( REFCLSID rclsid, LPUNKNOWN pUnk, DWORD dwClsContext, DWORD flags, LPDWORD lpdwRegister )
	{
		_WINQ_FCONTEXT( "COLE32::CoRegisterClassObject" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoRegisterClassObject );
		hResult = Call< HRESULT, REFCLSID, LPUNKNOWN, DWORD, DWORD, LPDWORD >( pFunc, rclsid, pUnk, dwClsContext, flags, lpdwRegister );
#else
		__QCMP_UNREF4( rclsid, pUnk, dwClsContext, flags );
		__QCMP_UNREF( lpdwRegister );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoRegisterClassObject" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoRegisterInitializeSpy( LPINITIALIZESPY pSpy, ULARGE_INTEGER* puliCookie )
	{
		_WINQ_FCONTEXT( "COLE32::CoRegisterInitializeSpy" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoRegisterInitializeSpy );
		hResult = Call< HRESULT, LPINITIALIZESPY, ULARGE_INTEGER* >( pFunc, pSpy, puliCookie );
#else
		__QCMP_UNREF( pSpy );
		__QCMP_UNREF( puliCookie );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoRegisterInitializeSpy" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoRegisterMallocSpy( LPMALLOCSPY pMallocSpy )
	{
		_WINQ_FCONTEXT( "COLE32::CoRegisterMallocSpy" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoRegisterMallocSpy );
		hResult = Call< HRESULT, LPMALLOCSPY >( pFunc, pMallocSpy );
#else
		__QCMP_UNREF( pMallocSpy );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoRegisterMallocSpy" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoRegisterMessageFilter( LPMESSAGEFILTER lpMessageFilter, LPMESSAGEFILTER* lplpMessageFilter )
	{
		_WINQ_FCONTEXT( "COLE32::CoRegisterMessageFilter" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoRegisterMessageFilter );
		hResult = Call< HRESULT, LPMESSAGEFILTER, LPMESSAGEFILTER* >( pFunc,lpMessageFilter, lplpMessageFilter  );
#else
		__QCMP_UNREF( lpMessageFilter );
		__QCMP_UNREF( lplpMessageFilter );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoRegisterMessageFilter" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoRegisterPSClsid( REFIID riid, REFCLSID rclsid )
	{
		_WINQ_FCONTEXT( "COLE32::CoRegisterPSClsid" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoRegisterPSClsid );
		hResult = Call< HRESULT, REFIID, REFCLSID >( pFunc, riid, rclsid );
#else
		__QCMP_UNREF( riid );
		__QCMP_UNREF( rclsid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoRegisterPSClsid" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoRegisterSurrogate( LPSURROGATE pSurrogate )
	{
		_WINQ_FCONTEXT( "COLE32::CoRegisterSurrogate" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoRegisterSurrogate );
		hResult = Call< HRESULT, LPSURROGATE >( pFunc, pSurrogate );
#else
		__QCMP_UNREF( pSurrogate );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoRegisterSurrogate" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoReleaseMarshalData( LPSTREAM pStm )
	{
		_WINQ_FCONTEXT( "COLE32::CoReleaseMarshalData" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoReleaseMarshalData );
		hResult = Call< HRESULT, LPSTREAM >( pFunc, pStm );
#else
		__QCMP_UNREF( pStm );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoReleaseMarshalData" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	ULONG COLE32::CoReleaseServerProcess( void )
	{
		_WINQ_FCONTEXT( "COLE32::CoReleaseServerProcess" );
		ULONG ulResult = 0;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoReleaseServerProcess );
		ulResult = Call< ULONG >( pFunc );
#else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoReleaseServerProcess" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return ulResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoResumeClassObjects( void )
	{
		_WINQ_FCONTEXT( "COLE32::CoResumeClassObjects" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoResumeClassObjects );
		hResult = Call< HRESULT >( pFunc );
#else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoResumeClassObjects" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoRevertToSelf( void )
	{
		_WINQ_FCONTEXT( "COLE32::CoRevertToSelf" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoRevertToSelf );
		hResult = Call< HRESULT >( pFunc );
#else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoRevertToSelf" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoRevokeClassObject( DWORD dwRegister )
	{
		_WINQ_FCONTEXT( "COLE32::CoRevokeClassObject" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoRevokeClassObject );
		hResult = Call< HRESULT, DWORD >( pFunc, dwRegister );
#else
		__QCMP_UNREF( dwRegister );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoRevokeClassObject" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoRevokeInitializeSpy( ULARGE_INTEGER uliCookie )
	{
		_WINQ_FCONTEXT( "COLE32::CoRevokeInitializeSpy" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoRevokeInitializeSpy );
		hResult = Call< HRESULT, ULARGE_INTEGER >( pFunc, uliCookie );
#else
		__QCMP_UNREF( uliCookie );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoRevokeInitializeSpy" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoRevokeMallocSpy( void )
	{
		_WINQ_FCONTEXT( "COLE32::CoRevokeMallocSpy" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoRevokeMallocSpy );
		hResult = Call< HRESULT >( pFunc );
#else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoRevokeMallocSpy" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoSetCancelObject( IUnknown* pUnk )
	{
		_WINQ_FCONTEXT( "COLE32::CoSetCancelObject" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoSetCancelObject );
		hResult = Call< HRESULT, IUnknown* >( pFunc, pUnk );
#else
		__QCMP_UNREF( pUnk );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoSetCancelObject" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoSetProxyBlanket( IUnknown* pProxy, DWORD dwAuthnSvc, DWORD dwAuthzSvc, OLECHAR* pServerPrincName, DWORD dwAuthnLevel, DWORD dwImpLevel, RPC_AUTH_IDENTITY_HANDLE pAuthInfo, DWORD dwCapabilities )
	{
		_WINQ_FCONTEXT( "COLE32::CoSetProxyBlanket" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoSetProxyBlanket );
		hResult = Call< HRESULT, IUnknown*, DWORD, DWORD, OLECHAR*, DWORD, DWORD, RPC_AUTH_IDENTITY_HANDLE, DWORD >( pFunc, pProxy, dwAuthnSvc, dwAuthzSvc, pServerPrincName, dwAuthnLevel, dwImpLevel, pAuthInfo, dwCapabilities );
#else
		__QCMP_UNREF4( pProxy, dwAuthnSvc, dwAuthzSvc, pServerPrincName );
		__QCMP_UNREF4( dwAuthnLevel, dwImpLevel, pAuthInfo, dwCapabilities );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoSetProxyBlanket" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoSuspendClassObjects( void )
	{
		_WINQ_FCONTEXT( "COLE32::CoSuspendClassObjects" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoSuspendClassObjects );
		hResult = Call< HRESULT >( pFunc );
#else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoSuspendClassObjects" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoSwitchCallContext( IUnknown* pNewObject, IUnknown** ppOldObject )
	{
		_WINQ_FCONTEXT( "COLE32::CoSwitchCallContext" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoSwitchCallContext );
		hResult = Call< HRESULT, IUnknown*, IUnknown** >( pFunc, pNewObject, ppOldObject );
#else
		__QCMP_UNREF( pNewObject );
		__QCMP_UNREF( ppOldObject );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoSwitchCallContext" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	LPVOID COLE32::CoTaskMemAlloc( SIZE_T cb )
	{
		_WINQ_FCONTEXT( "COLE32::CoTaskMemAlloc" );
		CCheckReturn< LPVOID, CCheckNonZero< LPVOID > >::TType pResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoTaskMemAlloc );
		pResult = Call< LPVOID, SIZE_T >( pFunc, cb );
#else
		__QCMP_UNREF( cb );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoTaskMemAlloc" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return pResult;
	}

	//--------------------------------------------------------------------
	void COLE32::CoTaskMemFree( LPVOID pv )
	{
		_WINQ_FCONTEXT( "COLE32::CoTaskMemFree" );
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoTaskMemFree );
		voidCall< LPVOID >( pFunc, pv );
#else
		__QCMP_UNREF( pv );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoTaskMemFree" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
	}

	//--------------------------------------------------------------------
	LPVOID COLE32::CoTaskMemRealloc( LPVOID pv, SIZE_T cb )
	{
		_WINQ_FCONTEXT( "COLE32::CoTaskMemRealloc" );
		CCheckReturn< LPVOID, CCheckNonZero< LPVOID > >::TType pResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoTaskMemRealloc );
		pResult = Call< LPVOID, LPVOID, SIZE_T >( pFunc, pv, cb );
#else
		__QCMP_UNREF( pv );
		__QCMP_UNREF( cb );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoTaskMemRealloc" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return pResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoTestCancel( void )
	{
		_WINQ_FCONTEXT( "COLE32::CoTestCancel" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoTestCancel );
		hResult = Call< HRESULT >( pFunc );
#else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoTestCancel" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoTreatAsClass( REFCLSID clsidOld, REFCLSID clsidNew )
	{
		_WINQ_FCONTEXT( "COLE32::CoTreatAsClass" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoTreatAsClass );
		hResult = Call< HRESULT, REFCLSID, REFCLSID >( pFunc, clsidOld, clsidNew );
#else
		__QCMP_UNREF( clsidOld );
		__QCMP_UNREF( clsidNew );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoTreatAsClass" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	void COLE32::CoUninitialize( void )
	{
		_WINQ_FCONTEXT( "COLE32::CoUninitialize" );
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoUninitialize );
		voidCallvoid( pFunc );
#else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoUninitialize" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoUnmarshalHresult( LPSTREAM pstm, HRESULT* phresult )
	{
		_WINQ_FCONTEXT( "COLE32::CoUnmarshalHresult" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoUnmarshalHresult );
		hResult = Call< HRESULT, LPSTREAM, HRESULT* >( pFunc, pstm, phresult );
#else
		__QCMP_UNREF( pstm );
		__QCMP_UNREF( phresult );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoUnmarshalHresult" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoUnmarshalInterface( LPSTREAM pStm, REFIID riid, LPVOID* ppv )
	{
		_WINQ_FCONTEXT( "COLE32::CoUnmarshalInterface" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoUnmarshalInterface );
		hResult = Call< HRESULT, LPSTREAM, REFIID, LPVOID* >( pFunc, pStm, riid, ppv );
#else
		__QCMP_UNREF( pStm );
		__QCMP_UNREF( riid );
		__QCMP_UNREF( ppv );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoUnmarshalInterface" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CoWaitForMultipleHandles( DWORD dwFlags, DWORD dwTimeout, ULONG cHandles, LPHANDLE pHandles, LPDWORD lpdwindex )
	{
		_WINQ_FCONTEXT( "COLE32::CoWaitForMultipleHandles" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CoWaitForMultipleHandles );
		hResult = Call< HRESULT, DWORD, DWORD, ULONG, LPHANDLE, LPDWORD >( pFunc, dwFlags, dwTimeout, cHandles, pHandles, lpdwindex );
#else
		__QCMP_UNREF4( dwFlags, dwTimeout, cHandles, pHandles );
		__QCMP_UNREF( lpdwindex );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CoWaitForMultipleHandles" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CreateAntiMoniker( LPMONIKER* ppmk )
	{
		_WINQ_FCONTEXT( "COLE32::CreateAntiMoniker" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CreateAntiMoniker );
		hResult = Call< HRESULT, LPMONIKER* >( pFunc, ppmk );
#else
		__QCMP_UNREF( ppmk );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CreateAntiMoniker" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CreateBindCtx( DWORD reserved, LPBC* ppbc )
	{
		_WINQ_FCONTEXT( "COLE32::CreateBindCtx" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CreateBindCtx );
		hResult = Call< HRESULT, DWORD, LPBC* >( pFunc, reserved, ppbc );
#else
		__QCMP_UNREF( reserved );
		__QCMP_UNREF( ppbc );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CreateBindCtx" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CreateClassMoniker( REFCLSID rclsid, LPMONIKER* ppmk )
	{
		_WINQ_FCONTEXT( "COLE32::CreateClassMoniker" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CreateClassMoniker );
		hResult = Call< HRESULT, REFCLSID, LPMONIKER* >( pFunc, rclsid, ppmk );
#else
		__QCMP_UNREF( rclsid );
		__QCMP_UNREF( ppmk );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CreateClassMoniker" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CreateDataAdviseHolder( LPDATAADVISEHOLDER* ppDAHolder )
	{
		_WINQ_FCONTEXT( "COLE32::CreateDataAdviseHolder" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CreateDataAdviseHolder );
		hResult = Call< HRESULT, LPDATAADVISEHOLDER* >( pFunc, ppDAHolder );
#else
		__QCMP_UNREF( ppDAHolder );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CreateDataAdviseHolder" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CreateDataCache( LPUNKNOWN pUnkOuter, REFCLSID rclsid, REFIID iid, LPVOID* ppv )
	{
		_WINQ_FCONTEXT( "COLE32::CreateDataCache" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CreateDataCache );
		hResult = Call< HRESULT, LPUNKNOWN, REFCLSID, REFIID, LPVOID* >( pFunc, pUnkOuter, rclsid, iid, ppv );
#else
		__QCMP_UNREF4( pUnkOuter, rclsid, iid, ppv );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CreateDataCache" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CreateErrorInfo( ICreateErrorInfo** pperrinfo )
	{
		_WINQ_FCONTEXT( "COLE32::CreateErrorInfo" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CreateErrorInfo );
		hResult = Call< HRESULT, ICreateErrorInfo** >( pFunc, pperrinfo );
#else
		__QCMP_UNREF( pperrinfo );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CreateErrorInfo" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CreateFileMoniker( LPCOLESTR lpszPathName, LPMONIKER* ppmk )
	{
		_WINQ_FCONTEXT( "COLE32::CreateFileMoniker" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CreateFileMoniker );
		hResult = Call< HRESULT, LPCOLESTR, LPMONIKER* >( pFunc, lpszPathName, ppmk );
#else
		__QCMP_UNREF( lpszPathName );
		__QCMP_UNREF( ppmk );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CreateFileMoniker" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CreateGenericComposite( LPMONIKER pmkFirst, LPMONIKER pmkRest, LPMONIKER* ppmkComposite )
	{
		_WINQ_FCONTEXT( "COLE32::CreateGenericComposite" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CreateGenericComposite );
		hResult = Call< HRESULT, LPMONIKER, LPMONIKER, LPMONIKER* >( pFunc, pmkFirst, pmkRest, ppmkComposite );
#else
		__QCMP_UNREF( pmkFirst );
		__QCMP_UNREF( pmkRest );
		__QCMP_UNREF( ppmkComposite );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CreateGenericComposite" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CreateILockBytesOnHGlobal( HGLOBAL hGlobal, BOOL fDeleteOnRelease, ILockBytes** ppLkbyt )
	{
		_WINQ_FCONTEXT( "COLE32::CreateILockBytesOnHGlobal" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CreateILockBytesOnHGlobal );
		hResult = Call< HRESULT, HGLOBAL, BOOL, ILockBytes** >( pFunc, hGlobal, fDeleteOnRelease, ppLkbyt );
#else
		__QCMP_UNREF( hGlobal );
		__QCMP_UNREF( fDeleteOnRelease );
		__QCMP_UNREF( ppLkbyt );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CreateILockBytesOnHGlobal" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CreateItemMoniker( LPCOLESTR lpszDelim, LPCOLESTR lpszItem, LPMONIKER* ppmk )
	{
		_WINQ_FCONTEXT( "COLE32::CreateItemMoniker" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CreateItemMoniker );
		hResult = Call< HRESULT, LPCOLESTR, LPCOLESTR, LPMONIKER* >( pFunc, lpszDelim, lpszItem, ppmk );
#else
		__QCMP_UNREF( lpszDelim );
		__QCMP_UNREF( lpszItem );
		__QCMP_UNREF( ppmk );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CreateItemMoniker" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CreateObjrefMoniker( LPUNKNOWN punk, LPMONIKER* ppmk )
	{
		_WINQ_FCONTEXT( "COLE32::CreateObjrefMoniker" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CreateObjrefMoniker );
		hResult = Call< HRESULT, LPUNKNOWN, LPMONIKER* >( pFunc, punk, ppmk );
#else
		__QCMP_UNREF( punk );
		__QCMP_UNREF( ppmk );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CreateObjrefMoniker" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CreateOleAdviseHolder( LPOLEADVISEHOLDER* ppOAHolder )
	{
		_WINQ_FCONTEXT( "COLE32::CreateOleAdviseHolder" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CreateOleAdviseHolder );
		hResult = Call< HRESULT, LPOLEADVISEHOLDER* >( pFunc, ppOAHolder );
#else
		__QCMP_UNREF( ppOAHolder );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CreateOleAdviseHolder" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CreatePointerMoniker( LPUNKNOWN punk, LPMONIKER* ppmk )
	{
		_WINQ_FCONTEXT( "COLE32::CreatePointerMoniker" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CreatePointerMoniker );
		hResult = Call< HRESULT, LPUNKNOWN, LPMONIKER* >( pFunc, punk, ppmk );
#else
		__QCMP_UNREF( punk );
		__QCMP_UNREF( ppmk );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CreatePointerMoniker" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::CreateStreamOnHGlobal( HGLOBAL hGlobal, BOOL fDeleteOnRelease, LPSTREAM* ppstm )
	{
		_WINQ_FCONTEXT( "COLE32::CreateStreamOnHGlobal" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CreateStreamOnHGlobal );
		hResult = Call< HRESULT, HGLOBAL, BOOL, LPSTREAM* >( pFunc, hGlobal, fDeleteOnRelease, ppstm );
#else
		__QCMP_UNREF( hGlobal );
		__QCMP_UNREF( fDeleteOnRelease );
		__QCMP_UNREF( ppstm );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CreateStreamOnHGlobal" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

/*
	//--------------------------------------------------------------------
	BOOL WINAPI DllDebugObjectRPCHook( BOOL fTrace, ORPC_INIT_ARGS* lpOrpcInitArgs )
	{
		_WINQ_FCONTEXT( "COLE32::DllDebugObjectRPCHook" );
		BOOL bResult = FALSE;
		
		{
#if		( _WIN32_WINNT >= 0x0500 )
			_WINQ_USESAPI( DllDebugObjectRPCHook );
			bResult = Call< BOOL, BOOL, ORPC_INIT_ARGS* >( pFunc, fTrace, lpOrpcInitArgs );
			if( bResult == FALSE )
			{
				__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "DllDebugObjectRPCHook" ), 0 ));
			}
#else
			__QCMP_UNREF( fTrace );
			__QCMP_UNREF( lpOrpcInitArgs );
			__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "DllDebugObjectRPCHook" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		
		return bResult;
	}
*/
/*
	//--------------------------------------------------------------------
	HRESULT DllGetClassObject( REFCLSID rclsid, REFIID riid, LPVOID* ppv )
	{
		_WINQ_FCONTEXT( "COLE32::DllGetClassObject" );
		HRESULT hResult = E_FAIL;
		
		{
#if		( _WIN32_WINNT >= 0x0500 )
			_WINQ_USESAPI( DllGetClassObject );
			hResult = Call< HRESULT, REFCLSID, REFIID, LPVOID* >( pFunc, rclsid, riid, ppv );
			if( FAILED( hResult ) )
			{
				__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "DllGetClassObject" ), 0 ));
			}
#else
			__QCMP_UNREF( rclsid );
			__QCMP_UNREF( riid );
			__QCMP_UNREF( ppv )
			__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "DllGetClassObject" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT DllRegisterServer( void )
	{
		_WINQ_FCONTEXT( "COLE32::DllRegisterServer" );
		HRESULT hResult = E_FAIL;
		
		{
#if		( _WIN32_WINNT >= 0x0500 )
			_WINQ_USESAPI( DllRegisterServer );
			hResult = Call< HRESULT >( pFunc );
			if( FAILED( hResult ) )
			{
				__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "DllRegisterServer" ), 0 ));
			}
#else
			__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "DllRegisterServer" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		
		return hResult;
	}
*/
	//--------------------------------------------------------------------
	HRESULT COLE32::FmtIdToPropStgName( const FMTID* pfmtid, LPOLESTR oszName )
	{
		_WINQ_FCONTEXT( "COLE32::FmtIdToPropStgName" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( FmtIdToPropStgName );
		hResult = Call< HRESULT, const FMTID*, LPOLESTR >( pFunc, pfmtid, oszName );
#else
		__QCMP_UNREF( pfmtid );
		__QCMP_UNREF( oszName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "FmtIdToPropStgName" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::FreePropVariantArray( ULONG cVariants, PROPVARIANT* rgvars )
	{
		_WINQ_FCONTEXT( "COLE32::FreePropVariantArray" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( FreePropVariantArray );
		hResult = Call< HRESULT, ULONG, PROPVARIANT* >( pFunc, cVariants, rgvars );
#else
		__QCMP_UNREF( cVariants );
		__QCMP_UNREF( rgvars );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "FreePropVariantArray" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::GetClassFile( LPCOLESTR szFilename, CLSID* pclsid )
	{
		_WINQ_FCONTEXT( "COLE32::GetClassFile" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetClassFile );
		hResult = Call< HRESULT, LPCOLESTR, CLSID* >( pFunc, szFilename, pclsid );
#else
		__QCMP_UNREF( szFilename );
		__QCMP_UNREF( pclsid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetClassFile" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::GetConvertStg( IStorage* pStg )
	{
		_WINQ_FCONTEXT( "COLE32::GetConvertStg" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetConvertStg );
		hResult = Call< HRESULT, IStorage* >( pFunc, pStg );
#else
		__QCMP_UNREF( pStg );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetConvertStg" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::GetErrorInfo( DWORD dwReserved, IErrorInfo** pperrinfo )
	{
		_WINQ_FCONTEXT( "COLE32::GetErrorInfo" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetErrorInfo );
		hResult = Call< HRESULT >( pFunc, dwReserved, pperrinfo );
#else
		__QCMP_UNREF( dwReserved );
		__QCMP_UNREF( pperrinfo );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetErrorInfo" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::GetHGlobalFromILockBytes( ILockBytes* pLkbyt, HGLOBAL* phglobal )
	{
		_WINQ_FCONTEXT( "COLE32::GetHGlobalFromILockBytes" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetHGlobalFromILockBytes );
		hResult = Call< HRESULT, ILockBytes*, HGLOBAL* >( pFunc, pLkbyt, phglobal );
#else
		__QCMP_UNREF( pLkbyt );
		__QCMP_UNREF( phglobal );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetHGlobalFromILockBytes" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::GetHGlobalFromStream( IStream* pstm, HGLOBAL* phglobal )
	{
		_WINQ_FCONTEXT( "COLE32::GetHGlobalFromStream" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetHGlobalFromStream );
		hResult = Call< HRESULT, IStream*, HGLOBAL* >( pFunc, pstm, phglobal );
#else
		__QCMP_UNREF( pstm );
		__QCMP_UNREF( phglobal );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetHGlobalFromStream" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::GetRunningObjectTable( DWORD reserved, LPRUNNINGOBJECTTABLE* pprot )
	{
		_WINQ_FCONTEXT( "COLE32::GetRunningObjectTable" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;		
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetRunningObjectTable );
		hResult = Call< HRESULT, DWORD, LPRUNNINGOBJECTTABLE* >( pFunc, reserved, pprot );
#else
		__QCMP_UNREF( reserved );
		__QCMP_UNREF( pprot );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetRunningObjectTable" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::IIDFromString( LPCOLESTR lpsz, LPIID lpiid )
	{
		_WINQ_FCONTEXT( "COLE32::IIDFromString" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( IIDFromString );
		hResult = Call< HRESULT, LPCOLESTR, LPIID >( pFunc, lpsz, lpiid );
#else
		__QCMP_UNREF( lpsz );
		__QCMP_UNREF( lpiid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "IIDFromString" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	BOOL COLE32::IsAccelerator( HACCEL hAccel, int cAccelEntries, LPMSG lpMsg, WORD* lpwCmd )
	{
		_WINQ_FCONTEXT( "COLE32::IsAccelerator" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( IsAccelerator );
		bResult = Call< BOOL, HACCEL, int, LPMSG, WORD* >( pFunc, hAccel, cAccelEntries, lpMsg, lpwCmd );
#else
		__QCMP_UNREF4( hAccel, cAccelEntries, lpMsg, lpwCmd );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "IsAccelerator" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//--------------------------------------------------------------------
	BOOL COLE32::IsEqualGUID( REFGUID rguid1, REFGUID rguid2 )
	{
		_WINQ_FCONTEXT( "COLE32::IsEqualGUID" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( IsEqualGUID );
		bResult = Call< BOOL, REFGUID, REFGUID >( pFunc, rguid1, rguid2 );
#else
		__QCMP_UNREF( rguid1 );
		__QCMP_UNREF( rguid2 );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "IsEqualGUID" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::MkParseDisplayName( LPBC pbc, LPCOLESTR szUserName, ULONG* pchEaten, LPMONIKER* ppmk )
	{
		_WINQ_FCONTEXT( "COLE32::MkParseDisplayName" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( MkParseDisplayName );
		hResult = Call< HRESULT, LPBC, LPCOLESTR, ULONG*, LPMONIKER* >( pFunc, pbc, szUserName, pchEaten, ppmk );
#else
		__QCMP_UNREF4( pbc, szUserName, pchEaten, ppmk );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MkParseDisplayName" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )		
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::MonikerCommonPrefixWith( LPMONIKER pmkThis, LPMONIKER pmkOther, LPMONIKER* ppmkCommon )
	{
		_WINQ_FCONTEXT( "COLE32::MonikerCommonPrefixWith" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( MonikerCommonPrefixWith );
		hResult = Call< HRESULT, LPMONIKER, LPMONIKER, LPMONIKER* >( pFunc, pmkThis, pmkOther, ppmkCommon );
#else
		__QCMP_UNREF( pmkThis );
		__QCMP_UNREF( pmkOther );
		__QCMP_UNREF( ppmkCommon );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MonikerCommonPrefixWith" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::MonikerRelativePathTo( LPMONIKER pmkSrc, LPMONIKER pmkDest, LPMONIKER* ppmkRelPath, BOOL dwReserved )
	{
		_WINQ_FCONTEXT( "COLE32::MonikerRelativePathTo" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( MonikerRelativePathTo );
		hResult = Call< HRESULT, LPMONIKER, LPMONIKER, LPMONIKER*, BOOL >( pFunc, pmkSrc, pmkDest, ppmkRelPath, dwReserved );
#else
		__QCMP_UNREF4( pmkSrc, pmkDest, ppmkRelPath, dwReserved );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MonikerRelativePathTo" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleConvertIStorageToOLESTREAM( IStorage* pStg, LPOLESTREAM lpolestream )
	{
		_WINQ_FCONTEXT( "COLE32::OleConvertIStorageToOLESTREAM" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleConvertIStorageToOLESTREAM );
		hResult = Call< HRESULT, IStorage*, LPOLESTREAM >( pFunc, pStg, lpolestream );
#else
		__QCMP_UNREF( pStg );
		__QCMP_UNREF( lpolestream );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleConvertIStorageToOLESTREAM" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleConvertIStorageToOLESTREAMEx( IStorage* pStg, CLIPFORMAT cfFormat, LONG lWidth, LONG lHeight, DWORD dwSize, STGMEDIUM* pmedium, LPOLESTREAM lpolestm )
	{
		_WINQ_FCONTEXT( "COLE32::OleConvertIStorageToOLESTREAMEx" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleConvertIStorageToOLESTREAMEx );
		hResult = Call< HRESULT, IStorage*, CLIPFORMAT, LONG, LONG, DWORD, STGMEDIUM*, LPOLESTREAM >( pFunc, pStg, cfFormat, lWidth, lHeight, dwSize, pmedium, lpolestm );
#else
		__QCMP_UNREF4( pStg, cfFormat, lWidth, lHeight );
		__QCMP_UNREF( dwSize );
		__QCMP_UNREF( pmedium );
		__QCMP_UNREF( lpolestm );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleConvertIStorageToOLESTREAMEx" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleConvertOLESTREAMToIStorage( LPOLESTREAM lpolestream, IStorage* pstg, const DVTARGETDEVICE* ptd )
	{
		_WINQ_FCONTEXT( "COLE32::OleConvertOLESTREAMToIStorage" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleConvertOLESTREAMToIStorage );
		hResult = Call< HRESULT, LPOLESTREAM, IStorage*, const DVTARGETDEVICE* >( pFunc, lpolestream, pstg, ptd );
#else
		__QCMP_UNREF( lpolestream );
		__QCMP_UNREF( pstg );
		__QCMP_UNREF( ptd );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleConvertOLESTREAMToIStorage" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleConvertOLESTREAMToIStorageEx( LPOLESTREAM lpolestm, IStorage* pstg, CLIPFORMAT* pcfFormat, LONG* plWidth, LONG* plHeight, DWORD* pdwSize, STGMEDIUM* pmedium )
	{
		_WINQ_FCONTEXT( "COLE32::OleConvertOLESTREAMToIStorageEx" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleConvertOLESTREAMToIStorageEx );
		hResult = Call< HRESULT, LPOLESTREAM, IStorage*, CLIPFORMAT*, LONG*, LONG*, DWORD*, STGMEDIUM* >( pFunc, lpolestm, pstg, pcfFormat, plWidth, plHeight, pdwSize, pmedium );
#else
		__QCMP_UNREF4( lpolestm, pstg, pcfFormat, plWidth );
		__QCMP_UNREF( plHeight );
		__QCMP_UNREF( pdwSize );
		__QCMP_UNREF( pmedium );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleConvertOLESTREAMToIStorageEx" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleCreate( REFCLSID rclsid, REFIID riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj )
	{
		_WINQ_FCONTEXT( "COLE32::OleCreate" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleCreate );
		hResult = Call< HRESULT, REFCLSID, REFIID, DWORD, LPFORMATETC, LPOLECLIENTSITE, LPSTORAGE, LPVOID* >( pFunc, rclsid, riid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj );
#else
		__QCMP_UNREF4( rclsid, riid, renderopt, pFormatEtc );
		__QCMP_UNREF( pClientSite );
		__QCMP_UNREF( pStg );
		__QCMP_UNREF( ppvObj );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleCreate" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleCreateDefaultHandler( REFCLSID clsid, LPUNKNOWN pUnkOuter, REFIID riid, LPVOID* lplpObj )
	{
		_WINQ_FCONTEXT( "COLE32::OleCreateDefaultHandler" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleCreateDefaultHandler );
		hResult = Call< HRESULT, REFCLSID, LPUNKNOWN, REFIID, LPVOID* >( pFunc, clsid, pUnkOuter, riid, lplpObj );
#else
		__QCMP_UNREF4( clsid, pUnkOuter, riid, lplpObj );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleCreateDefaultHandler" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleCreateEmbeddingHelper( REFCLSID clsid, LPUNKNOWN pUnkOuter, DWORD flags, LPCLASSFACTORY pCF, REFIID riid, LPVOID* lplpObj )
	{
		_WINQ_FCONTEXT( "COLE32::OleCreateEmbeddingHelper" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleCreateEmbeddingHelper );
		hResult = Call< HRESULT, REFCLSID, LPUNKNOWN, DWORD, LPCLASSFACTORY, REFIID, LPVOID* >( pFunc, clsid, pUnkOuter, flags, pCF, riid, lplpObj );
#else
		__QCMP_UNREF4( clsid, pUnkOuter, flags, pCF );
		__QCMP_UNREF( riid );
		__QCMP_UNREF( lplpObj );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleCreateEmbeddingHelper" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleCreateEx( REFCLSID rclsid, REFIID riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink* lpAdviseSink, DWORD* rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj )
	{
		_WINQ_FCONTEXT( "COLE32::OleCreateEx" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleCreateEx );
		hResult = Call< HRESULT, REFCLSID, REFIID, DWORD, DWORD, ULONG, DWORD*, LPFORMATETC, IAdviseSink*, DWORD*, LPOLECLIENTSITE, LPSTORAGE, LPVOID* >( pFunc, rclsid, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj );
#else
		__QCMP_UNREF4( rclsid, riid, dwFlags, renderopt );
		__QCMP_UNREF4( cFormats, rgAdvf, rgFormatEtc, lpAdviseSink );
		__QCMP_UNREF4( rgdwConnection, pClientSite, pStg, ppvObj );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleCreateEx" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleCreateFromData( LPDATAOBJECT pSrcDataObj, REFIID riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj )
	{
		_WINQ_FCONTEXT( "COLE32::OleCreateFromData" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleCreateFromData );
		hResult = Call< HRESULT, LPDATAOBJECT, REFIID, DWORD, LPFORMATETC, LPOLECLIENTSITE, LPSTORAGE, LPVOID* >( pFunc, pSrcDataObj, riid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj );
#else
		__QCMP_UNREF4( pSrcDataObj, riid, renderopt, pFormatEtc );
		__QCMP_UNREF( pClientSite );
		__QCMP_UNREF( pStg );
		__QCMP_UNREF( ppvObj );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleCreateFromData" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleCreateFromDataEx( LPDATAOBJECT pSrcDataObj, REFIID riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink* lpAdviseSink, DWORD* rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj )
	{
		_WINQ_FCONTEXT( "COLE32::OleCreateFromDataEx" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleCreateFromDataEx );
		hResult = Call< HRESULT, LPDATAOBJECT, REFIID, DWORD, DWORD, ULONG, DWORD*, LPFORMATETC, IAdviseSink*, DWORD*, LPOLECLIENTSITE, LPSTORAGE, LPVOID* >( pFunc, pSrcDataObj, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj );
#else
		__QCMP_UNREF4( pSrcDataObj, riid, dwFlags, renderopt );
		__QCMP_UNREF4( cFormats, rgAdvf, rgFormatEtc, lpAdviseSink );
		__QCMP_UNREF4( rgdwConnection, pClientSite, pStg, ppvObj );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleCreateFromDataEx" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleCreateFromFile( REFCLSID rclsid, LPCOLESTR lpszFileName, REFIID riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj )
	{
		_WINQ_FCONTEXT( "COLE32::OleCreateFromFile" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleCreateFromFile );
		hResult = Call< HRESULT, REFCLSID, LPCOLESTR, REFIID, DWORD, LPFORMATETC, LPOLECLIENTSITE, LPSTORAGE, LPVOID* >( pFunc, rclsid, lpszFileName, riid, renderopt, lpFormatEtc, pClientSite, pStg, ppvObj );
#else
		__QCMP_UNREF4( rclsid, lpszFileName, riid, renderopt );
		__QCMP_UNREF4( lpFormatEtc, pClientSite, pStg, ppvObj );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleCreateFromFile" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleCreateFromFileEx( REFCLSID rclsid, LPCOLESTR lpszFileName, REFIID riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink* lpAdviseSink, DWORD* rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj )
	{
		_WINQ_FCONTEXT( "COLE32::OleCreateFromFileEx" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleCreateFromFileEx );
		hResult = Call< HRESULT, REFCLSID, LPCOLESTR, REFIID, DWORD, DWORD, ULONG, DWORD*, LPFORMATETC, IAdviseSink*, DWORD*, LPOLECLIENTSITE, LPSTORAGE, LPVOID* >( pFunc, rclsid, lpszFileName, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj );
#else
		__QCMP_UNREF4( rclsid, lpszFileName, riid, dwFlags );
		__QCMP_UNREF4( renderopt, cFormats, rgAdvf, rgFormatEtc );
		__QCMP_UNREF4( lpAdviseSink, rgdwConnection, pClientSite, pStg );
		__QCMP_UNREF( ppvObj );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleCreateFromFileEx" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleCreateLink( LPMONIKER pmkLinkSrc, REFIID riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj	)
	{
		_WINQ_FCONTEXT( "COLE32::OleCreateLink" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleCreateLink );
		hResult = Call< HRESULT, LPMONIKER, REFIID, DWORD, LPFORMATETC, LPOLECLIENTSITE, LPSTORAGE, LPVOID* >( pFunc, pmkLinkSrc, riid, renderopt, lpFormatEtc, pClientSite, pStg, ppvObj );
#else
		__QCMP_UNREF4( pmkLinkSrc, riid, renderopt, lpFormatEtc );
		__QCMP_UNREF( pClientSite );
		__QCMP_UNREF( pStg );
		__QCMP_UNREF( ppvObj );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleCreateLink" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleCreateLinkEx( LPMONIKER pmkLinkSrc, REFIID riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink* lpAdviseSink, DWORD* rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj )
	{
		_WINQ_FCONTEXT( "COLE32::OleCreateLinkEx" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleCreateLinkEx );
		hResult = Call< HRESULT, LPMONIKER, REFIID, DWORD, DWORD, ULONG, DWORD*, LPFORMATETC, IAdviseSink*, DWORD*, LPOLECLIENTSITE, LPSTORAGE, LPVOID* >( pFunc, pmkLinkSrc, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj );
#else
		__QCMP_UNREF4( pmkLinkSrc, riid, dwFlags, renderopt );
		__QCMP_UNREF4( cFormats, rgAdvf, rgFormatEtc, lpAdviseSink );
		__QCMP_UNREF4( rgdwConnection, pClientSite, pStg, ppvObj );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleCreateLinkEx" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleCreateLinkFromData( LPDATAOBJECT pSrcDataObj, REFIID riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg,	LPVOID* ppvObj )
	{
		_WINQ_FCONTEXT( "COLE32::OleCreateLinkFromData" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleCreateLinkFromData );
		hResult = Call< HRESULT, LPDATAOBJECT, REFIID, DWORD, LPFORMATETC, LPOLECLIENTSITE, LPSTORAGE, LPVOID* >( pFunc, pSrcDataObj, riid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj );
#else
		__QCMP_UNREF4( pSrcDataObj, riid, renderopt, pFormatEtc );
		__QCMP_UNREF( pClientSite );
		__QCMP_UNREF( pStg );
		__QCMP_UNREF( ppvObj );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleCreateLinkFromData" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleCreateLinkFromDataEx( LPDATAOBJECT pSrcDataObj, REFIID riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink* lpAdviseSink, DWORD* rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj )
	{
		_WINQ_FCONTEXT( "COLE32::OleCreateLinkFromDataEx" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleCreateLinkFromDataEx );
		hResult = Call< HRESULT, LPDATAOBJECT, REFIID, DWORD, DWORD, ULONG, DWORD*, LPFORMATETC, IAdviseSink*, DWORD*, LPOLECLIENTSITE, LPSTORAGE, LPVOID* >( pFunc, pSrcDataObj, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj );
#else
		__QCMP_UNREF4( pSrcDataObj, riid, dwFlags, renderopt );
		__QCMP_UNREF4( cFormats, rgAdvf, rgFormatEtc, lpAdviseSink );
		__QCMP_UNREF4( rgdwConnection, pClientSite, pStg, ppvObj );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleCreateLinkFromDataEx" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleCreateLinkToFile( LPCOLESTR lpszFileName, REFIID riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj )
	{
		_WINQ_FCONTEXT( "COLE32::OleCreateLinkToFile" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleCreateLinkToFile );
		hResult = Call< HRESULT, LPCOLESTR, REFIID, DWORD, LPFORMATETC, LPOLECLIENTSITE, LPSTORAGE, LPVOID* >( pFunc, lpszFileName, riid, renderopt, lpFormatEtc, pClientSite, pStg, ppvObj );
#else
		__QCMP_UNREF4( lpszFileName, riid, renderopt, lpFormatEtc );
		__QCMP_UNREF( pClientSite );
		__QCMP_UNREF( pStg );
		__QCMP_UNREF( ppvObj );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleCreateLinkToFile" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleCreateLinkToFileEx( LPCOLESTR lpszFileName, REFIID riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink* lpAdviseSink, DWORD* rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj )
	{
		_WINQ_FCONTEXT( "COLE32::OleCreateLinkToFileEx" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleCreateLinkToFileEx );
		hResult = Call< HRESULT, LPCOLESTR, REFIID, DWORD, DWORD, ULONG, DWORD*, LPFORMATETC, IAdviseSink*, DWORD*, LPOLECLIENTSITE, LPSTORAGE, LPVOID* >( pFunc, lpszFileName, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj );
#else
		__QCMP_UNREF4( lpszFileName, riid, dwFlags, renderopt );
		__QCMP_UNREF4( cFormats, rgAdvf, rgFormatEtc, lpAdviseSink );
		__QCMP_UNREF4( rgdwConnection, pClientSite, pStg, ppvObj );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleCreateLinkToFileEx" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HOLEMENU COLE32::OleCreateMenuDescriptor( HMENU hmenuCombined, LPOLEMENUGROUPWIDTHS lpMenuWidths )
	{
		_WINQ_FCONTEXT( "COLE32::OleCreateMenuDescriptor" );
		CCheckReturn< HOLEMENU, CCheckNonZero< HOLEMENU > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleCreateMenuDescriptor );
		hResult = Call< HOLEMENU, HMENU, LPOLEMENUGROUPWIDTHS >( pFunc, hmenuCombined, lpMenuWidths );
#else
		__QCMP_UNREF( hmenuCombined );
		__QCMP_UNREF( lpMenuWidths );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleCreateMenuDescriptor" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleCreateStaticFromData( LPDATAOBJECT pSrcDataObj, REFIID iid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj )
	{
		_WINQ_FCONTEXT( "COLE32::OleCreateStaticFromData" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleCreateStaticFromData );
		hResult = Call< HRESULT, LPDATAOBJECT, REFIID, DWORD, LPFORMATETC, LPOLECLIENTSITE, LPSTORAGE, LPVOID* >( pFunc, pSrcDataObj, iid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj );
#else
		__QCMP_UNREF4( pSrcDataObj, iid, renderopt, pFormatEtc );
		__QCMP_UNREF( pClientSite );
		__QCMP_UNREF( pStg );
		__QCMP_UNREF( ppvObj );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleCreateStaticFromData" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )		
		return hResult;
	}

	//--------------------------------------------------------------------
	void COLE32::OleDestroyMenuDescriptor( HOLEMENU holemenu )
	{
		_WINQ_FCONTEXT( "COLE32::OleDestroyMenuDescriptor" );
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleDestroyMenuDescriptor );
		voidCall< HOLEMENU >( pFunc, holemenu );
#else
		__QCMP_UNREF( holemenu );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleDestroyMenuDescriptor" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleDoAutoConvert( LPSTORAGE pStg, LPCLSID pClsidNew )
	{
		_WINQ_FCONTEXT( "COLE32::OleDoAutoConvert" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;		
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleDoAutoConvert );
		hResult = Call< HRESULT, LPSTORAGE, LPCLSID >( pFunc, pStg, pClsidNew );
#else
		__QCMP_UNREF( pStg );
		__QCMP_UNREF( pClsidNew );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleDoAutoConvert" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleDraw( LPUNKNOWN pUnknown, DWORD dwAspect, HDC hdcDraw, LPCRECT lprcBounds )
	{
		_WINQ_FCONTEXT( "COLE32::OleDraw" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleDraw );
		hResult = Call< HRESULT, LPUNKNOWN, DWORD, HDC, LPCRECT >( pFunc, pUnknown, dwAspect, hdcDraw, lprcBounds );
#else
		__QCMP_UNREF4( pUnknown, dwAspect, hdcDraw, lprcBounds );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleDraw" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HANDLE COLE32::OleDuplicateData( HANDLE hSrc, CLIPFORMAT cfFormat, UINT uiFlags )
	{
		_WINQ_FCONTEXT( "COLE32::OleDuplicateData" );
		CCheckReturn< HANDLE, CCheckNonZero< HANDLE > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleDuplicateData );
		hResult = Call< HANDLE, HANDLE, CLIPFORMAT, UINT >( pFunc, hSrc, cfFormat, uiFlags );
#else
		__QCMP_UNREF( hSrc );
		__QCMP_UNREF( cfFormat );
		__QCMP_UNREF( uiFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleDuplicateData" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleFlushClipboard( void )
	{
		_WINQ_FCONTEXT( "COLE32::OleFlushClipboard" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleFlushClipboard );
		hResult = Call< HRESULT >( pFunc );
#else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleFlushClipboard" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleGetAutoConvert( REFCLSID clsidOld, LPCLSID pClsidNew )
	{
		_WINQ_FCONTEXT( "COLE32::OleGetAutoConvert" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleGetAutoConvert );
		hResult = Call< HRESULT, REFCLSID, LPCLSID >( pFunc, clsidOld, pClsidNew );
#else
		__QCMP_UNREF( clsidOld );
		__QCMP_UNREF( pClsidNew );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleGetAutoConvert" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleGetClipboard( LPDATAOBJECT* ppDataObj )
	{
		_WINQ_FCONTEXT( "COLE32::OleGetClipboard" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleGetClipboard );
		hResult = Call< HRESULT >( pFunc, ppDataObj );
#else
		__QCMP_UNREF( ppDataObj );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleGetClipboard" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HGLOBAL COLE32::OleGetIconOfClass( REFCLSID rclsid, LPOLESTR lpszLabel, BOOL fUseTypeAsLabel )
	{
		_WINQ_FCONTEXT( "COLE32::OleGetIconOfClass" );
		CCheckReturn< HGLOBAL, CCheckNonZero< HGLOBAL > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleGetIconOfClass );
		hResult = Call< HGLOBAL, REFCLSID, LPOLESTR, BOOL >( pFunc, rclsid, lpszLabel, fUseTypeAsLabel );
#else
		__QCMP_UNREF( rclsid );
		__QCMP_UNREF( lpszLabel );
		__QCMP_UNREF( fUseTypeAsLabel );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleGetIconOfClass" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HGLOBAL COLE32::OleGetIconOfFile( LPOLESTR lpszPath, BOOL fUseFileAsLabel )
	{
		_WINQ_FCONTEXT( "COLE32::OleGetIconOfFile" );
		CCheckReturn< HGLOBAL, CCheckNonZero< HGLOBAL > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleGetIconOfFile );
		hResult = Call< HGLOBAL, LPOLESTR, BOOL >( pFunc, lpszPath, fUseFileAsLabel );
#else
		__QCMP_UNREF( lpszPath );
		__QCMP_UNREF( fUseFileAsLabel );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleGetIconOfFile" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleInitialize( LPVOID pvReserved )
	{
		_WINQ_FCONTEXT( "COLE32::OleInitialize" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleInitialize );
		hResult = Call< HRESULT, LPVOID >( pFunc, pvReserved );
#else
		__QCMP_UNREF( pvReserved );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleInitialize" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleIsCurrentClipboard( LPDATAOBJECT pDataObj )
	{
		_WINQ_FCONTEXT( "COLE32::OleIsCurrentClipboard" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleIsCurrentClipboard );
		hResult = Call< HRESULT, LPDATAOBJECT >( pFunc, pDataObj );
#else
		__QCMP_UNREF( pDataObj );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleIsCurrentClipboard" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	BOOL COLE32::OleIsRunning( LPOLEOBJECT pObject )
	{
		_WINQ_FCONTEXT( "COLE32::OleIsRunning" );
		BOOL bResult = FALSE;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleIsRunning );
		bResult = Call< BOOL, LPOLEOBJECT >( pFunc, pObject );
#else
		__QCMP_UNREF( pObject );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleIsRunning" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		
		return bResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleLoad( LPSTORAGE pStg, REFIID riid, LPOLECLIENTSITE pClientSite, LPVOID* ppvObj )
	{
		_WINQ_FCONTEXT( "COLE32::OleLoad" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleLoad );
		hResult = Call< HRESULT, LPSTORAGE, REFIID, LPOLECLIENTSITE, LPVOID* >( pFunc, pStg, riid, pClientSite, ppvObj );
#else
		__QCMP_UNREF4( pStg, riid, pClientSite, ppvObj );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleLoad" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleLoadFromStream( LPSTREAM pStm, REFIID iidInterface, LPVOID* ppvObj )
	{
		_WINQ_FCONTEXT( "COLE32::OleLoadFromStream" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleLoadFromStream );
		hResult = Call< HRESULT, LPSTREAM, REFIID, LPVOID* >( pFunc, pStm, iidInterface, ppvObj );
#else
		__QCMP_UNREF( pStm );
		__QCMP_UNREF( iidInterface );
		__QCMP_UNREF( ppvObj );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleLoadFromStream" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleLockRunning( LPUNKNOWN pUnknown, BOOL fLock, BOOL fLastUnlockCloses )
	{
		_WINQ_FCONTEXT( "COLE32::OleLockRunning" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleLockRunning );
		hResult = Call< HRESULT, LPUNKNOWN, BOOL, BOOL >( pFunc, pUnknown, fLock, fLastUnlockCloses );
#else
		__QCMP_UNREF( pUnknown );
		__QCMP_UNREF( fLock );
		__QCMP_UNREF( fLastUnlockCloses );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleLockRunning" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HGLOBAL COLE32::OleMetafilePictFromIconAndLabel( HICON hIcon, LPOLESTR lpszLabel, LPOLESTR lpszSourceFile, UINT iIconIndex )
	{
		_WINQ_FCONTEXT( "COLE32::OleMetafilePictFromIconAndLabel" );
		CCheckReturn< HGLOBAL, CCheckNonZero< HGLOBAL > >::TType Result;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleMetafilePictFromIconAndLabel );
		Result = Call< HGLOBAL, HICON, LPOLESTR, LPOLESTR, UINT >( pFunc, hIcon, lpszLabel, lpszSourceFile, iIconIndex );
#else
		__QCMP_UNREF4( hIcon, lpszLabel, lpszSourceFile, iIconIndex );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleMetafilePictFromIconAndLabel" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return Result;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleNoteObjectVisible( LPUNKNOWN pUnknown, BOOL fVisible )
	{
		_WINQ_FCONTEXT( "COLE32::OleNoteObjectVisible" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleNoteObjectVisible );
		hResult = Call< HRESULT, LPUNKNOWN, BOOL >( pFunc, pUnknown, fVisible );
#else
		__QCMP_UNREF( pUnknown );
		__QCMP_UNREF( fVisible );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleNoteObjectVisible" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleQueryCreateFromData( LPDATAOBJECT pSrcDataObject )
	{
		_WINQ_FCONTEXT( "COLE32::OleQueryCreateFromData" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleQueryCreateFromData );
		hResult = Call< HRESULT, LPDATAOBJECT >( pFunc, pSrcDataObject );
#else
		__QCMP_UNREF( pSrcDataObject );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleQueryCreateFromData" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleQueryLinkFromData( LPDATAOBJECT pSrcDataObject )
	{
		_WINQ_FCONTEXT( "COLE32::OleQueryLinkFromData" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleQueryLinkFromData );
		hResult = Call< HRESULT, LPDATAOBJECT >( pFunc, pSrcDataObject );
#else
		__QCMP_UNREF( pSrcDataObject );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleQueryLinkFromData" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleRegEnumFormatEtc( REFCLSID clsid, DWORD dwDirection, LPENUMFORMATETC* ppenum )
	{
		_WINQ_FCONTEXT( "COLE32::OleRegEnumFormatEtc" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleRegEnumFormatEtc );
		hResult = Call< HRESULT, REFCLSID, DWORD, LPENUMFORMATETC* >( pFunc, clsid, dwDirection, ppenum );
#else
		__QCMP_UNREF( clsid );
		__QCMP_UNREF( dwDirection );
		__QCMP_UNREF( ppenum );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleRegEnumFormatEtc" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleRegEnumVerbs( REFCLSID clsid, LPENUMOLEVERB* ppenum )
	{
		_WINQ_FCONTEXT( "COLE32::OleRegEnumVerbs" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleRegEnumVerbs );
		hResult = Call< HRESULT, REFCLSID, LPENUMOLEVERB* >( pFunc, clsid, ppenum );
#else
		__QCMP_UNREF( clsid );
		__QCMP_UNREF( ppenum );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleRegEnumVerbs" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleRegGetMiscStatus( REFCLSID clsid, DWORD dwAspect, DWORD* pdwStatus )
	{
		_WINQ_FCONTEXT( "COLE32::OleRegGetMiscStatus" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleRegGetMiscStatus );
		hResult = Call< HRESULT, REFCLSID, DWORD, DWORD* >( pFunc, clsid, dwAspect, pdwStatus );
#else
		__QCMP_UNREF( clsid );
		__QCMP_UNREF( dwAspect );
		__QCMP_UNREF( pdwStatus );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleRegGetMiscStatus" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleRegGetUserType( REFCLSID clsid, DWORD dwFormOfType, LPOLESTR* pszUserType )
	{
		_WINQ_FCONTEXT( "COLE32::OleRegGetUserType" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleRegGetUserType );
		hResult = Call< HRESULT, REFCLSID, DWORD, LPOLESTR* >( pFunc, clsid, dwFormOfType, pszUserType );
#else
		__QCMP_UNREF( clsid );
		__QCMP_UNREF( dwFormOfType );
		__QCMP_UNREF( pszUserType );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleRegGetUserType" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleRun( LPUNKNOWN pUnknown )
	{
		_WINQ_FCONTEXT( "COLE32::OleRun" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleRun );
		hResult = Call< HRESULT, LPUNKNOWN >( pFunc, pUnknown );
#else
		__QCMP_UNREF( pUnknown );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleRun" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleSave( LPPERSISTSTORAGE pPS, LPSTORAGE pStg, BOOL fSameAsLoad )
	{
		_WINQ_FCONTEXT( "COLE32::OleSave" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleSave );
		hResult = Call< HRESULT, LPPERSISTSTORAGE, LPSTORAGE, BOOL >( pFunc, pPS, pStg, fSameAsLoad );
#else
		__QCMP_UNREF( pPS );
		__QCMP_UNREF( pStg );
		__QCMP_UNREF( fSameAsLoad );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleSave" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleSaveToStream( LPPERSISTSTREAM pPStm, LPSTREAM pStm )
	{
		_WINQ_FCONTEXT( "COLE32::OleSaveToStream" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleSaveToStream );
		hResult = Call< HRESULT, LPPERSISTSTREAM, LPSTREAM >( pFunc, pPStm, pStm );
#else
		__QCMP_UNREF( pPStm );
		__QCMP_UNREF( pStm );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleSaveToStream" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleSetAutoConvert( REFCLSID clsidOld, REFCLSID clsidNew )
	{
		_WINQ_FCONTEXT( "COLE32::OleSetAutoConvert" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleSetAutoConvert );
		hResult = Call< HRESULT, REFCLSID, REFCLSID >( pFunc, clsidOld, clsidNew );
#else
		__QCMP_UNREF( clsidOld );
		__QCMP_UNREF( clsidNew );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleSetAutoConvert" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleSetClipboard( LPDATAOBJECT pDataObj )
	{
		_WINQ_FCONTEXT( "COLE32::OleSetClipboard" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleSetClipboard );
		hResult = Call< HRESULT, LPDATAOBJECT >( pFunc, pDataObj );
#else
		__QCMP_UNREF( pDataObj );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleSetClipboard" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleSetContainedObject( LPUNKNOWN pUnknown, BOOL fContained )
	{
		_WINQ_FCONTEXT( "COLE32::OleSetContainedObject" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleSetContainedObject );
		hResult = Call< HRESULT, LPUNKNOWN, BOOL >( pFunc, pUnknown, fContained );
#else
		__QCMP_UNREF( pUnknown );
		__QCMP_UNREF( fContained );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleSetContainedObject" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleSetMenuDescriptor( HOLEMENU holemenu, HWND hwndFrame, HWND hwndActiveObject, LPOLEINPLACEFRAME lpFrame, LPOLEINPLACEACTIVEOBJECT lpActiveObj )
	{
		_WINQ_FCONTEXT( "COLE32::OleSetMenuDescriptor" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleSetMenuDescriptor );
		hResult = Call< HRESULT, HOLEMENU, HWND, HWND, LPOLEINPLACEFRAME, LPOLEINPLACEACTIVEOBJECT >( pFunc, holemenu, hwndFrame, hwndActiveObject, lpFrame, lpActiveObj );
#else
		__QCMP_UNREF4( holemenu, hwndFrame, hwndActiveObject, lpFrame );
		__QCMP_UNREF( lpActiveObj );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleSetMenuDescriptor" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::OleTranslateAccelerator( LPOLEINPLACEFRAME lpFrame, LPOLEINPLACEFRAMEINFO lpFrameInfo, LPMSG lpmsg )
	{
		_WINQ_FCONTEXT( "COLE32::OleTranslateAccelerator" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleTranslateAccelerator );
		hResult = Call< HRESULT, LPOLEINPLACEFRAME, LPOLEINPLACEFRAMEINFO, LPMSG >( pFunc, lpFrame, lpFrameInfo, lpmsg );
#else
		__QCMP_UNREF( lpFrame );
		__QCMP_UNREF( lpFrameInfo );
		__QCMP_UNREF( lpmsg );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleTranslateAccelerator" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	void COLE32::OleUninitialize( void )
	{
		_WINQ_FCONTEXT( "COLE32::OleUninitialize" );
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OleUninitialize );
		voidCallvoid( pFunc );
#else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OleUninitialize" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::ProgIDFromCLSID( REFCLSID clsid, LPOLESTR* lplpszProgID )
	{
		_WINQ_FCONTEXT( "COLE32::ProgIDFromCLSID" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ProgIDFromCLSID );
		hResult = Call< HRESULT, REFCLSID, LPOLESTR* >( pFunc, clsid, lplpszProgID );
#else
		__QCMP_UNREF( clsid );
		__QCMP_UNREF( lplpszProgID );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "ProgIDFromCLSID" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::PropStgNameToFmtId( const LPOLESTR oszName, FMTID *pfmtid )
	{
		_WINQ_FCONTEXT( "COLE32::PropStgNameToFmtId" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( PropStgNameToFmtId );
		hResult = Call< HRESULT, const LPOLESTR, FMTID* >( pFunc, oszName, pfmtid );
#else
		__QCMP_UNREF( oszName );
		__QCMP_UNREF( pfmtid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "PropStgNameToFmtId" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::PropVariantClear( PROPVARIANT* pvar )
	{
		_WINQ_FCONTEXT( "COLE32::PropVariantClear" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
		
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( PropVariantClear );
		hResult = Call< HRESULT, PROPVARIANT* >( pFunc, pvar );
#else
		__QCMP_UNREF( pvar );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "PropVariantClear" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::PropVariantCopy( PROPVARIANT* pvarDest, const PROPVARIANT* pvarSrc )
	{
		_WINQ_FCONTEXT( "COLE32::PropVariantCopy" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( PropVariantCopy );
		hResult = Call< HRESULT, PROPVARIANT*, const PROPVARIANT* >( pFunc, pvarDest, pvarSrc );
#else
		__QCMP_UNREF( pvarDest );
		__QCMP_UNREF( pvarSrc );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "PropVariantCopy" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::ReadClassStg( IStorage* pStg, CLSID* pclsid )
	{
		_WINQ_FCONTEXT( "COLE32::ReadClassStg" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ReadClassStg );
		hResult = Call< HRESULT, IStorage*, CLSID* >( pFunc, pStg, pclsid );
#else
		__QCMP_UNREF( pStg );
		__QCMP_UNREF( pclsid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "ReadClassStg" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::ReadClassStm( IStream* pStm, CLSID* pclsid )
	{
		_WINQ_FCONTEXT( "COLE32::ReadClassStm" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ReadClassStm );
		hResult = Call< HRESULT, IStream*, CLSID* >( pFunc, pStm, pclsid );
#else
		__QCMP_UNREF( pStm );
		__QCMP_UNREF( pclsid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "ReadClassStm" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::ReadFmtUserTypeStg( IStorage* pStg, CLIPFORMAT* pcf, LPWSTR* lplpszUserType )
	{
		_WINQ_FCONTEXT( "COLE32::ReadFmtUserTypeStg" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ReadFmtUserTypeStg );
		hResult = Call< HRESULT, IStorage*, CLIPFORMAT*, LPWSTR* >( pFunc, pStg, pcf, lplpszUserType );
#else
		__QCMP_UNREF( pStg );
		__QCMP_UNREF( pcf );
		__QCMP_UNREF( lplpszUserType );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "ReadFmtUserTypeStg" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::RegisterDragDrop( HWND hwnd, LPDROPTARGET pDropTarget )
	{
		_WINQ_FCONTEXT( "COLE32::RegisterDragDrop" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegisterDragDrop );
		hResult = Call< HRESULT, HWND, LPDROPTARGET >( pFunc, hwnd, pDropTarget );
#else
		__QCMP_UNREF( hwnd );
		__QCMP_UNREF( pDropTarget );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegisterDragDrop" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	void COLE32::ReleaseStgMedium( LPSTGMEDIUM pMedium )
	{
		_WINQ_FCONTEXT( "COLE32::ReleaseStgMedium" );
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ReleaseStgMedium );
		voidCall< LPSTGMEDIUM >( pFunc, pMedium );
#else
		__QCMP_UNREF( pMedium );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "ReleaseStgMedium" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )		
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::RevokeDragDrop( HWND hwnd )
	{
		_WINQ_FCONTEXT( "COLE32::RevokeDragDrop" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RevokeDragDrop );
		hResult = Call< HRESULT, HWND >( pFunc, hwnd );
#else
		__QCMP_UNREF( hwnd );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RevokeDragDrop" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::SetConvertStg( IStorage* pStg, BOOL fConvert )
	{
		_WINQ_FCONTEXT( "COLE32::SetConvertStg" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( SetConvertStg );
		hResult = Call< HRESULT, IStorage*, BOOL >( pFunc, pStg, fConvert );
#else
		__QCMP_UNREF( pStg );
		__QCMP_UNREF( fConvert );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "SetConvertStg" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	SERIALIZEDPROPERTYVALUE* COLE32::StgConvertPropertyToVariant( const PROPVARIANT* pvar, USHORT CodePage, SERIALIZEDPROPERTYVALUE* pprop, ULONG* pcb,	PROPID pid,	BOOLEAN fReserved, ULONG* pcIndirect )
	{
		_WINQ_FCONTEXT( "COLE32::StgConvertPropertyToVariant" );
		CCheckReturn< SERIALIZEDPROPERTYVALUE*, CCheckNonZero< SERIALIZEDPROPERTYVALUE* > >::TType pResult;		
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( StgConvertPropertyToVariant );
		pResult = Call< SERIALIZEDPROPERTYVALUE*, const PROPVARIANT*, USHORT, SERIALIZEDPROPERTYVALUE*, ULONG*, PROPID, BOOLEAN, ULONG* >( pFunc, pvar, CodePage, pprop, pcb, pid, fReserved, pcIndirect );
#else
		__QCMP_UNREF4( pvar, CodePage, pprop, pcb );
		__QCMP_UNREF( pid );
		__QCMP_UNREF( fReserved );
		__QCMP_UNREF( pcIndirect );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "StgConvertPropertyToVariant" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return pResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::StgCreateDocfile( const WCHAR* pwcsName, DWORD grfMode, DWORD reserved, IStorage** ppstgOpen )
	{
		_WINQ_FCONTEXT( "COLE32::StgCreateDocfile" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;		
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( StgCreateDocfile );
		hResult = Call< HRESULT, const WCHAR*, DWORD, DWORD, IStorage** >( pFunc, pwcsName, grfMode, reserved, ppstgOpen );
#else
		__QCMP_UNREF( pwcsName );
		__QCMP_UNREF( grfMode );
		__QCMP_UNREF( reserved );
		__QCMP_UNREF( ppstgOpen );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "StgCreateDocfile" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::StgCreateDocfileOnILockBytes( ILockBytes* plkbyt, DWORD grfMode, DWORD reserved, IStorage** ppstgOpen )
	{
		_WINQ_FCONTEXT( "COLE32::StgCreateDocfileOnILockBytes" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( StgCreateDocfileOnILockBytes );
		hResult = Call< HRESULT, ILockBytes*, DWORD, DWORD, IStorage** >( pFunc, plkbyt, grfMode, reserved, ppstgOpen );
#else
		__QCMP_UNREF4( plkbyt, grfMode, reserved, ppstgOpen );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "StgCreateDocfileOnILockBytes" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::StgCreatePropSetStg( IStorage* pStorage, DWORD dwReserved, IPropertySetStorage** ppPropSetStg )
	{
		_WINQ_FCONTEXT( "COLE32::StgCreatePropSetStg" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( StgCreatePropSetStg );
		hResult = Call< HRESULT, IStorage*, DWORD, IPropertySetStorage** >( pFunc, pStorage, dwReserved, ppPropSetStg );
#else
		__QCMP_UNREF( pStorage );
		__QCMP_UNREF( dwReserved );
		__QCMP_UNREF( ppPropSetStg );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "StgCreatePropSetStg" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::StgCreatePropStg( IUnknown* pUnk, REFFMTID fmtid, const CLSID* pclsid, DWORD grfFlags, DWORD dwReserved, IPropertyStorage** ppPropStg )
	{
		_WINQ_FCONTEXT( "COLE32::StgCreatePropStg" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( StgCreatePropStg );
		hResult = Call< HRESULT, IUnknown*, REFFMTID, const CLSID*, DWORD, DWORD, IPropertyStorage** >( pFunc, pUnk, fmtid, pclsid, grfFlags, dwReserved, ppPropStg );
#else
		__QCMP_UNREF4( pUnk, fmtid, pclsid, grfFlags );
		__QCMP_UNREF( dwReserved );
		__QCMP_UNREF( ppPropStg );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "StgCreatePropStg" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::StgCreateStorageEx( const WCHAR* pwcsName, DWORD grfMode, STGFMT stgfmt, DWORD grfAttrs, STGOPTIONS* pStgOptions, PSECURITY_DESCRIPTOR* pSecurityDescriptor, REFIID riid, void** ppObjectOpen )
	{
		_WINQ_FCONTEXT( "COLE32::StgCreateStorageEx" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( StgCreateStorageEx );
		hResult = Call< HRESULT, const WCHAR*, DWORD, STGFMT, DWORD, STGOPTIONS*, PSECURITY_DESCRIPTOR*, REFIID, void** >( pFunc, pwcsName, grfMode, stgfmt, grfAttrs, pStgOptions, pSecurityDescriptor, riid, ppObjectOpen );
#else
		__QCMP_UNREF4( pwcsName, grfMode, stgfmt, grfAttrs );
		__QCMP_UNREF4( pStgOptions, pSecurityDescriptor, riid, ppObjectOpen );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "StgCreateStorageEx" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::StgGetIFillLockBytesOnFile( OLECHAR* pwcsName, IFillLockBytes** ppflb )
	{
		_WINQ_FCONTEXT( "COLE32::StgGetIFillLockBytesOnFile" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( StgGetIFillLockBytesOnFile );
		hResult = Call< HRESULT, OLECHAR*, IFillLockBytes** >( pFunc, pwcsName, ppflb );
#else
		__QCMP_UNREF( pwcsName );
		__QCMP_UNREF( ppflb );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "StgGetIFillLockBytesOnFile" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::StgGetIFillLockBytesOnILockBytes( ILockBytes* pilb, IFillLockBytes** ppflb )
	{
		_WINQ_FCONTEXT( "COLE32::StgGetIFillLockBytesOnILockBytes" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( StgGetIFillLockBytesOnILockBytes );
		hResult = Call< HRESULT, ILockBytes*, IFillLockBytes** >( pFunc, pilb, ppflb );
#else
		__QCMP_UNREF( pilb );
		__QCMP_UNREF( ppflb );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "StgGetIFillLockBytesOnILockBytes" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::StgIsStorageFile( const WCHAR* pwcsName )
	{
		_WINQ_FCONTEXT( "COLE32::StgIsStorageFile" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( StgIsStorageFile );
		hResult = Call< HRESULT, const WCHAR* >( pFunc, pwcsName );
#else
		__QCMP_UNREF( pwcsName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "StgIsStorageFile" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::StgIsStorageILockBytes( ILockBytes* plkbyt )
	{
		_WINQ_FCONTEXT( "COLE32::StgIsStorageILockBytes" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( StgIsStorageILockBytes );
		hResult = Call< HRESULT, ILockBytes* >( pFunc, plkbyt );
#else
		__QCMP_UNREF( plkbyt );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "StgIsStorageILockBytes" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::StgOpenAsyncDocfileOnIFillLockBytes( IFillLockBytes* ppflb, DWORD grfmode, DWORD asyncFlags, IStorage** ppstgOpen )
	{
		_WINQ_FCONTEXT( "COLE32::StgOpenAsyncDocfileOnIFillLockBytes" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( StgOpenAsyncDocfileOnIFillLockBytes );
		hResult = Call< HRESULT, IFillLockBytes*, DWORD, DWORD, IStorage** >( pFunc, ppflb, grfmode, asyncFlags, ppstgOpen );
#else
		__QCMP_UNREF4( ppflb, grfmode, asyncFlags, ppstgOpen );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "StgOpenAsyncDocfileOnIFillLockBytes" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::StgOpenPropStg( IUnknown* pUnk, REFFMTID fmtid, DWORD grfFlags, DWORD dwReserved, IPropertyStorage** ppPropStg )
	{
		_WINQ_FCONTEXT( "COLE32::StgOpenPropStg" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( StgOpenPropStg );
		hResult = Call< HRESULT, IUnknown*, REFFMTID, DWORD, DWORD, IPropertyStorage** >( pFunc, pUnk, fmtid, grfFlags, dwReserved, ppPropStg );
#else
		__QCMP_UNREF4( pUnk, fmtid, grfFlags, dwReserved );
		__QCMP_UNREF( ppPropStg );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "StgOpenPropStg" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::StgOpenStorage( const WCHAR* pwcsName, IStorage* pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage** ppstgOpen )
	{
		_WINQ_FCONTEXT( "COLE32::StgOpenStorage" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( StgOpenStorage );
		hResult = Call< HRESULT, const WCHAR*, IStorage*, DWORD, SNB, DWORD, IStorage** >( pFunc, pwcsName, pstgPriority, grfMode, snbExclude, reserved, ppstgOpen );
#else
		__QCMP_UNREF4( pwcsName, pstgPriority, grfMode, snbExclude );
		__QCMP_UNREF( reserved );
		__QCMP_UNREF( ppstgOpen  );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "StgOpenStorage" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::StgOpenStorageEx( const WCHAR* pwcsName, DWORD grfMode, STGFMT stgfmt, DWORD grfAttrs, STGOPTIONS* pStgOptions, void* reserved2, REFIID riid, void** ppObjectOpen )
	{
		_WINQ_FCONTEXT( "COLE32::StgOpenStorageEx" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( StgOpenStorageEx );
		hResult = Call< HRESULT, const WCHAR*, DWORD, STGFMT, DWORD, STGOPTIONS*, void*, REFIID, void** >( pFunc, pwcsName, grfMode, stgfmt, grfAttrs, pStgOptions, reserved2, riid, ppObjectOpen );
#else
		__QCMP_UNREF4( pwcsName, grfMode, stgfmt, grfAttrs );
		__QCMP_UNREF4( pStgOptions, reserved2, riid, ppObjectOpen );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "StgOpenStorageEx" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::StgOpenStorageOnILockBytes(	ILockBytes* plkbyt,	IStorage* pStgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage** ppstgOpen	)
	{
		_WINQ_FCONTEXT( "COLE32::StgOpenStorageOnILockBytes" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( StgOpenStorageOnILockBytes );
		hResult = Call< HRESULT, ILockBytes*, IStorage*, DWORD, SNB, DWORD, IStorage** >( pFunc, plkbyt, pStgPriority, grfMode, snbExclude, reserved, ppstgOpen );
#else
		__QCMP_UNREF4( plkbyt, pStgPriority, grfMode, snbExclude );
		__QCMP_UNREF( reserved );
		__QCMP_UNREF( ppstgOpen );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "StgOpenStorageOnILockBytes" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	ULONG COLE32::StgPropertyLengthAsVariant( const SERIALIZEDPROPERTYVALUE* pProp, ULONG cbProp, USHORT CodePage, BYTE bReserved )
	{
		_WINQ_FCONTEXT( "COLE32::StgPropertyLengthAsVariant" );
		ULONG ulResult = 0;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( StgPropertyLengthAsVariant );
		ulResult = Call< ULONG, const SERIALIZEDPROPERTYVALUE*, ULONG, USHORT, BYTE >( pFunc, pProp, cbProp, CodePage, bReserved );
#else
		__QCMP_UNREF4( pProp, cbProp, CodePage, bReserved );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "StgPropertyLengthAsVariant" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return ulResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::StgSetTimes( WCHAR const* lpszName, FILETIME const* pctime, FILETIME const* patime, FILETIME const* pmtime )
	{
		_WINQ_FCONTEXT( "COLE32::StgSetTimes" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( StgSetTimes );
		hResult = Call< HRESULT, WCHAR const*, FILETIME const*, FILETIME const*, FILETIME const* >( pFunc, lpszName, pctime, patime, pmtime );
#else
		__QCMP_UNREF4( lpszName, pctime, patime, pmtime );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "StgSetTimes" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::StringFromCLSID( REFCLSID rclsid, LPOLESTR* lplpsz )
	{
		_WINQ_FCONTEXT( "COLE32::StringFromCLSID" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( StringFromCLSID );
		hResult = Call< HRESULT, REFCLSID, LPOLESTR* >( pFunc, rclsid, lplpsz );
#else
		__QCMP_UNREF( rclsid );
		__QCMP_UNREF( lplpsz );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "StringFromCLSID" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	int COLE32::StringFromGUID2( REFGUID rguid, LPOLESTR lpsz, int cchMax )
	{
		_WINQ_FCONTEXT( "COLE32::StringFromGUID2" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( StringFromGUID2 );
		hResult = Call< int, REFGUID, LPOLESTR, int >( pFunc, rguid, lpsz, cchMax );
#else
		__QCMP_UNREF( rguid );
		__QCMP_UNREF( lpsz );
		__QCMP_UNREF( cchMax );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "StringFromGUID2" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::StringFromIID( REFIID rclsid, LPOLESTR* lplpsz )
	{
		_WINQ_FCONTEXT( "COLE32::StringFromIID" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( StringFromIID );
		hResult = Call< HRESULT, REFIID, LPOLESTR* >( pFunc, rclsid, lplpsz );
#else
		__QCMP_UNREF( rclsid );
		__QCMP_UNREF( lplpsz );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "StringFromIID" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::WriteClassStg( IStorage* pStg, REFCLSID rclsid )
	{
		_WINQ_FCONTEXT( "COLE32::WriteClassStg" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WriteClassStg );
		hResult = Call< HRESULT, IStorage*, REFCLSID >( pFunc, pStg, rclsid );
#else
		__QCMP_UNREF( pStg );
		__QCMP_UNREF( rclsid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WriteClassStg" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::WriteClassStm( IStream* pStm, REFCLSID rclsid )
	{
		_WINQ_FCONTEXT( "COLE32::WriteClassStm" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WriteClassStm );
		hResult = Call< HRESULT, IStream*, REFCLSID >( pFunc, pStm, rclsid );
#else
		__QCMP_UNREF( pStm );
		__QCMP_UNREF( rclsid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WriteClassStm" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::WriteFmtUserTypeStg( IStorage* pStg, CLIPFORMAT cf, LPWSTR* lpszUserType )
	{
		_WINQ_FCONTEXT( "COLE32::WriteFmtUserTypeStg" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WriteFmtUserTypeStg );
		hResult = Call< HRESULT, IStorage*, CLIPFORMAT, LPWSTR* >( pFunc, pStg, cf, lpszUserType );
#else
		__QCMP_UNREF( pStg );
		__QCMP_UNREF( cf );
		__QCMP_UNREF( lpszUserType );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WriteFmtUserTypeStg" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

	//--------------------------------------------------------------------
	HRESULT COLE32::DoDragDrop( LPDATAOBJECT pDataObj, LPDROPSOURCE pDropSource, DWORD dwOKEffects, LPDWORD pdwEffect )
	{
		_WINQ_FCONTEXT( "COLE32::DoDragDrop" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( DoDragDrop );
		hResult = Call< HRESULT, LPDATAOBJECT, LPDROPSOURCE, DWORD, LPDWORD >( pFunc, pDataObj, pDropSource, dwOKEffects, pdwEffect );
#else
		__QCMP_UNREF4( pDataObj, pDropSource, dwOKEffects, pdwEffect );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "DoDragDrop" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return hResult;
	}

}//nsWinQAPI

