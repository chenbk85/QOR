//MinGW32.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQAPI/WinQAPI.h"
#include "WinQAPI/Kernel32.h"

#ifdef __MINGW32__

//------------------------------------------------------------------------------
VOID TpInitializeCallbackEnviron( PTP_CALLBACK_ENVIRON CallbackEnviron )
{

#if (_WIN32_WINNT >= _WIN32_WINNT_WIN7)

    CallbackEnviron->Version = 3;

#else

    CallbackEnviron->Version = 1;

#endif

    CallbackEnviron->Pool = NULL;
    CallbackEnviron->CleanupGroup = NULL;
    CallbackEnviron->CleanupGroupCancelCallback = NULL;
    CallbackEnviron->RaceDll = NULL;
    CallbackEnviron->ActivationContext = NULL;
    CallbackEnviron->FinalizationCallback = NULL;
    CallbackEnviron->u.Flags = 0;

#if (_WIN32_WINNT >= _WIN32_WINNT_WIN7)

    CallbackEnviron->CallbackPriority = TP_CALLBACK_PRIORITY_NORMAL;
    CallbackEnviron->Size = sizeof(TP_CALLBACK_ENVIRON);

#endif

}

//------------------------------------------------------------------------------
VOID InitializeThreadpoolEnvironment( PTP_CALLBACK_ENVIRON pcbe )
{
    TpInitializeCallbackEnviron(pcbe);
}

//------------------------------------------------------------------------------
VOID TpDestroyCallbackEnviron( PTP_CALLBACK_ENVIRON CallbackEnviron )
{
    // For the current version of the callback environment, no actions
    // need to be taken to tear down an initialized structure.  This
    // may change in a future release.

    UNREFERENCED_PARAMETER(CallbackEnviron);
}

//------------------------------------------------------------------------------
VOID DestroyThreadpoolEnvironment( PTP_CALLBACK_ENVIRON pcbe )
{
    TpDestroyCallbackEnviron(pcbe);
}

//------------------------------------------------------------------------------
PVOID RtlSecureZeroMemory( PVOID ptr, SIZE_T cnt )
{
    volatile char *vptr = (volatile char *)ptr;

#if defined(_M_AMD64)

        __stosb((PBYTE )((DWORD64)vptr), 0, cnt);

#else

    while (cnt)
    {
        *vptr = 0;
        vptr++;
        cnt--;
    }

#endif

    return ptr;
}

//------------------------------------------------------------------------------
VOID TpSetCallbackCleanupGroup( PTP_CALLBACK_ENVIRON CallbackEnviron, PTP_CLEANUP_GROUP CleanupGroup, PTP_CLEANUP_GROUP_CANCEL_CALLBACK CleanupGroupCancelCallback )
{
    CallbackEnviron->CleanupGroup = CleanupGroup;
    CallbackEnviron->CleanupGroupCancelCallback = CleanupGroupCancelCallback;
}

//------------------------------------------------------------------------------
VOID SetThreadpoolCallbackCleanupGroup( PTP_CALLBACK_ENVIRON pcbe, PTP_CLEANUP_GROUP ptpcg, PTP_CLEANUP_GROUP_CANCEL_CALLBACK pfng )
{
    TpSetCallbackCleanupGroup(pcbe, ptpcg, pfng);
}

//------------------------------------------------------------------------------
VOID TpSetCallbackRaceWithDll( PTP_CALLBACK_ENVIRON CallbackEnviron, PVOID DllHandle )
{
    CallbackEnviron->RaceDll = DllHandle;
}

//------------------------------------------------------------------------------
VOID SetThreadpoolCallbackLibrary( PTP_CALLBACK_ENVIRON pcbe, PVOID mod )
{
    TpSetCallbackRaceWithDll(pcbe, mod);
}

//------------------------------------------------------------------------------
VOID TpSetCallbackThreadpool( PTP_CALLBACK_ENVIRON CallbackEnviron, PTP_POOL Pool )
{
    CallbackEnviron->Pool = Pool;
}

//------------------------------------------------------------------------------
VOID SetThreadpoolCallbackPool( PTP_CALLBACK_ENVIRON pcbe, PTP_POOL ptpp )
{
    TpSetCallbackThreadpool(pcbe, ptpp);
}

//------------------------------------------------------------------------------
VOID TpSetCallbackLongFunction( PTP_CALLBACK_ENVIRON CallbackEnviron )
{
    CallbackEnviron->u.s.LongFunction = 1;
}

//------------------------------------------------------------------------------
VOID SetThreadpoolCallbackRunsLong( PTP_CALLBACK_ENVIRON pcbe )
{
    TpSetCallbackLongFunction(pcbe);
}

#endif//__MINGW32__
