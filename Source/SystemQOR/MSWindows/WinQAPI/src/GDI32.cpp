//GDI32.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQAPI/WinQAPI.h"

#include "SystemQOR.h"
#include "WinQAPI/Kernel32.h"
#include "WinQAPI/GDI32.h"
#include "ReturnCheck.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	__QOR_IMPLEMENT_OCLASS_LUID( CGDI32 );

	//--------------------------------------------------------------------------------
	BOOL CGDI32::AlphaBlend( HDC hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, HDC hdcSrc, int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, BLENDFUNCTION ftn )
	{
		_WINQ_FCONTEXT( "CGDI32::AlphaBlend" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( AlphaBlend );
		bResult = Call< BOOL, HDC, int, int, int, int, HDC, int, int, int, int, BLENDFUNCTION >( pFunc, hdcDest, xoriginDest, yoriginDest, wDest, hDest, hdcSrc, xoriginSrc, yoriginSrc, wSrc, hSrc, ftn );
		return bResult;
	}

	//Bitmap functions
	//--------------------------------------------------------------------------------
	BOOL CGDI32::BitBlt( HDC hdcDest, int nXDest, int nYDest, int nWidth, int nHeight, HDC hdcSrc, int nXSrc, int nYSrc, DWORD dwRop )
	{
		_WINQ_FCONTEXT( "CGDI32::BitBlt" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( BitBlt );
		bResult = Call< BOOL, HDC, int, int, int, int, HDC, int, int, DWORD >( pFunc, hdcDest, nXDest, nYDest, nWidth, nHeight, hdcSrc, nXSrc, nYSrc, dwRop );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	HBITMAP CGDI32::CreateBitmap( int nWidth, int nHeight, UINT cPlanes, UINT cBitsPerPel, CONST VOID* lpvBits )
	{
		_WINQ_FCONTEXT( "CGDI32::CreateBitmap" );
		CCheckReturn< HBITMAP, CCheckNonZero< HBITMAP > >::TType Result;
		_WINQ_USESAPI( CreateBitmap );
		Result = Call< HBITMAP, int, int, UINT, UINT, CONST VOID* >( pFunc, nWidth, nHeight, cPlanes, cBitsPerPel, lpvBits );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HBITMAP CGDI32::CreateBitmapIndirect( CONST ::BITMAP* lpbm )
	{
		_WINQ_FCONTEXT( "CGDI32::CreateBitmapIndirect" );
		CCheckReturn< HBITMAP, CCheckNonZero< HBITMAP > >::TType Result;
		_WINQ_USESAPI( CreateBitmapIndirect );
		Result = Call< HBITMAP, CONST BITMAP* >( pFunc, lpbm );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HBITMAP CGDI32::CreateCompatibleBitmap( HDC hdc, int nWidth, int nHeight )
	{
		_WINQ_FCONTEXT( "CGDI32::CreateCompatibleBitmap" );
		CCheckReturn< HBITMAP, CCheckNonZero< HBITMAP > >::TType Result;
		_WINQ_USESAPI( CreateCompatibleBitmap );
		Result = Call< HBITMAP, HDC, int, int >( pFunc, hdc, nWidth, nHeight );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HBITMAP CGDI32::CreateDIBitmap( HDC hdc, CONST ::BITMAPINFOHEADER* lpbmih, DWORD fdwInit, CONST VOID* lpbInit, CONST ::BITMAPINFO* lpbmi, UINT fuUsage )
	{
		_WINQ_FCONTEXT( "CGDI32::CreateDIBitmap" );
		CCheckReturn< HBITMAP, CCheckNonZero< HBITMAP > >::TType Result;
		_WINQ_USESAPI( CreateDIBitmap );
		Result = Call< HBITMAP, HDC, CONST ::BITMAPINFOHEADER*, DWORD, CONST VOID*, CONST ::BITMAPINFO*, UINT >( pFunc,hdc, lpbmih, fdwInit, lpbInit, lpbmi, fuUsage );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HBITMAP CGDI32::CreateDIBSection( HDC hdc, CONST ::BITMAPINFO* pbmi, UINT iUsage, VOID** ppvBits, HANDLE hSection, DWORD dwOffset )
	{
		_WINQ_FCONTEXT( "CGDI32::CreateDIBSection" );
		CCheckReturn< HBITMAP, CCheckNonZero< HBITMAP > >::TType Result;
		_WINQ_USESAPI( CreateDIBSection );
		Result = Call< HBITMAP, HDC, CONST ::BITMAPINFO*, UINT, VOID**, HANDLE, DWORD >( pFunc, hdc, pbmi, iUsage, ppvBits, hSection, dwOffset );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HBITMAP CGDI32::CreateDiscardableBitmap( HDC hdc, int nWidth, int nHeight )
	{
		_WINQ_FCONTEXT( "CGDI32::CreateDiscardableBitmap" );
		CCheckReturn< HBITMAP, CCheckNonZero< HBITMAP > >::TType Result;
		_WINQ_USESAPI( CreateDiscardableBitmap );
		Result = Call< HBITMAP, HDC, int, int >( pFunc, hdc, nWidth, nHeight );
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::ExtFloodFill( HDC hdc, int nXStart, int nYStart, COLORREF crColor, UINT fuFillType )
	{
		_WINQ_FCONTEXT( "CGDI32::ExtFloodFill" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( ExtFloodFill );
		bResult = Call< BOOL, HDC, int, int, COLORREF, UINT >( pFunc, hdc, nXStart, nYStart, crColor, fuFillType );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::FloodFill( HDC hdc, int nXStart, int nYStart, COLORREF crFill )
	{
		_WINQ_FCONTEXT( "CGDI32::FloodFill" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( FloodFill );
		bResult = Call< BOOL, HDC, int, int, COLORREF >( pFunc, hdc, nXStart, nYStart, crFill );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	LONG CGDI32::GetBitmapBits( HBITMAP hbmp, LONG cbBuffer, LPVOID lpvBits )
	{
		_WINQ_FCONTEXT( "CGDI32::GetBitmapBits" );
		CCheckReturn< LONG, CCheckNonZero< LONG > >::TType lResult;
		_WINQ_USESAPI( GetBitmapBits );
		lResult = Call< LONG, HBITMAP, LONG, LPVOID >( pFunc, hbmp, cbBuffer, lpvBits );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::GetBitmapDimensionEx( HBITMAP hBitmap, LPSIZE lpDimension )
	{
		_WINQ_FCONTEXT( "CGDI32::GetBitmapDimensionEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetBitmapDimensionEx );
		bResult = Call< BOOL, HBITMAP, LPSIZE >( pFunc, hBitmap, lpDimension );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	UINT CGDI32::GetDIBColorTable( HDC hdc, UINT uStartIndex, UINT cEntries, ::RGBQUAD* pColors )
	{
		_WINQ_FCONTEXT( "CGDI32::GetDIBColorTable" );
		CCheckReturn< UINT, CCheckNonZero< UINT > >::TType uiResult;
		_WINQ_USESAPI( GetDIColorTable );
		uiResult = Call< UINT, HDC, UINT, UINT, ::RGBQUAD* >( pFunc, hdc, uStartIndex, cEntries, pColors );
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::GetDIBits( HDC hdc, HBITMAP hbmp, UINT uStartScan, UINT cScanLines, LPVOID lpvBits, ::LPBITMAPINFO lpbi, UINT uUsage )
	{
		_WINQ_FCONTEXT( "CGDI32::GetDIBits" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		_WINQ_USESAPI( GetDIBits );
		iResult = Call< int, HDC, HBITMAP, UINT, UINT, LPVOID, ::LPBITMAPINFO, UINT >( pFunc, hdc, hbmp, uStartScan, cScanLines, lpvBits, lpbi, uUsage );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	COLORREF CGDI32::GetPixel( HDC hdc, int nXPos, int nYPos )
	{
		_WINQ_FCONTEXT( "CGDI32::GetPixel" );
		CCheckReturn< COLORREF, CTCheckFailureValue< COLORREF, CLR_INVALID > >::TType Result;
		_WINQ_USESAPI( GetPixel );
		Result = Call< COLORREF, HDC, int, int >( pFunc, hdc, nXPos, nYPos );
		return Result;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::GetStretchBltMode( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::GetStretchBltMode" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		_WINQ_USESAPI( GetStretchBltMode );
		iResult = Call< int, HDC >( pFunc, hdc );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::MaskBlt( HDC hdcDest, int nXDest, int nYDest, int nWidth, int nHeight, HDC hdcSrc, int nXSrc, int nYSrc, HBITMAP hbmMask, int xMask, int yMask, DWORD dwRop )
	{
		_WINQ_FCONTEXT( "CGDI32::MaskBlt" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( MaskBlt );
		bResult = Call< BOOL, HDC, int, int, int, int, HDC, int, int, HBITMAP, int, int, DWORD >( pFunc, hdcDest, nXDest, nYDest, nWidth, nHeight, hdcSrc, nXSrc, nYSrc, hbmMask, xMask, yMask, dwRop );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::PlgBlt( HDC hdcDest, CONST ::POINT* lpPoint, HDC hdcSrc, int nXSrc, int nYSrc, int nWidth, int nHeight, HBITMAP hbmMask, int xMask, int yMask )
	{
		_WINQ_FCONTEXT( "CGDI32::PlgBlt" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( PlgBlt );
		bResult = Call< BOOL, HDC, CONST ::POINT*, HDC, int, int, int, int, HBITMAP, int, int >( pFunc, hdcDest, lpPoint, hdcSrc, nXSrc, nYSrc, nWidth, nHeight, hbmMask, xMask, yMask );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	LONG CGDI32::SetBitmapBits( HBITMAP hbmp, DWORD cBytes, CONST VOID* lpBits )
	{
		_WINQ_FCONTEXT( "CGDI32::SetBitmapBits" );
		CCheckReturn< LONG, CCheckNonZero< LONG > >::TType lResult;
		_WINQ_USESAPI( SetBitmapBits );
		lResult = Call< LONG, HBITMAP, DWORD, CONST VOID* >( pFunc, hbmp, cBytes, lpBits );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::SetBitmapDimensionEx( HBITMAP hBitmap, int nWidth, int nHeight, LPSIZE lpSize )
	{
		_WINQ_FCONTEXT( "CGDI32::SetBitmapDimensionEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( SetBitmapDimensionEx );
		bResult = Call< BOOL, HBITMAP, int, int, LPSIZE >( pFunc, hBitmap, nWidth, nHeight, lpSize );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	UINT CGDI32::SetDIBColorTable( HDC hdc, UINT uStartIndex, UINT cEntries, CONST ::RGBQUAD* pColors )
	{
		_WINQ_FCONTEXT( "CGDI32::SetDIBColorTable" );
		CCheckReturn< UINT, CCheckNonZero< UINT > >::TType uiResult;
		_WINQ_USESAPI( SetDIBColorTable );
		uiResult = Call< UINT, HDC, UINT, UINT, CONST ::RGBQUAD* >( pFunc, hdc, uStartIndex, cEntries, pColors );
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::SetDIBits( HDC hdc, HBITMAP hbmp, UINT uStartScan, UINT cScanLines, CONST VOID* lpvBits, CONST ::BITMAPINFO* lpbmi, UINT fuColorUse )
	{
		_WINQ_FCONTEXT( "CGDI32::SetDIBits" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		_WINQ_USESAPI( SetDIBits );
		iResult = Call< int, HDC, HBITMAP, UINT, UINT, CONST VOID*, CONST ::BITMAPINFO*, UINT >( pFunc, hdc, hbmp, uStartScan, cScanLines, lpvBits, lpbmi, fuColorUse );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::SetDIBitsToDevice( HDC hdc, int XDest, int YDest, DWORD dwWidth, DWORD dwHeight, int XSrc, int YSrc, UINT uStartScan, UINT cScanLines, CONST VOID* lpvBits, CONST ::BITMAPINFO* lpbmi, UINT fuColorUse )
	{
		_WINQ_FCONTEXT( "CGDI32::SetDIBitsToDevice" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		_WINQ_USESAPI( SetDIBitsToDevice );
		iResult = Call< int, HDC, int, int, DWORD, DWORD, int, int, UINT, UINT, CONST VOID*, CONST ::BITMAPINFO*, UINT >( pFunc, hdc, XDest, YDest, dwWidth, dwHeight, XSrc, YSrc, uStartScan, cScanLines, lpvBits, lpbmi, fuColorUse );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	COLORREF CGDI32::SetPixel( HDC hdc, int X, int Y, COLORREF crColor )
	{
		_WINQ_FCONTEXT( "CGDI32::SetPixel" );
		CCheckReturn< COLORREF, CTCheckFailureValue< COLORREF, 1 > >::TType Result;
		_WINQ_USESAPI( SetPixel );
		Result = Call< COLORREF, HDC, int, int, COLORREF >( pFunc, hdc, X, Y, crColor );
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::SetPixelV( HDC hdc, int X, int Y, COLORREF crColor )
	{
		_WINQ_FCONTEXT( "CGDI32::SetPixelV" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( SetPixelV );
		bResult = Call< BOOL, HDC, int, int, COLORREF >( pFunc, hdc, X, Y, crColor );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::SetStretchBltMode( HDC hdc, int iStretchMode )
	{
		_WINQ_FCONTEXT( "CGDI32::SetStretchBltMode" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		_WINQ_USESAPI( SetStretchBltMode );
		iResult = Call< int, HDC, int >( pFunc, hdc, iStretchMode );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::StretchBlt( HDC hdcDest, int nXOriginDest, int nYOriginDest, int nWidthDest, int nHeightDest, HDC hdcSrc, int nXOriginSrc, int nYOriginSrc, int nWidthSrc, int nHeightSrc, DWORD dwRop )
	{
		_WINQ_FCONTEXT( "CGDI32::StretchBlt" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( StretchBlt );
		bResult = Call< BOOL, HDC, int, int, int, int, HDC, int, int, int, int, DWORD >( pFunc, hdcDest, nXOriginDest, nYOriginDest, nWidthDest, nHeightDest, hdcSrc, nXOriginSrc, nYOriginSrc, nWidthSrc, nHeightSrc, dwRop );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::StretchDIBits( HDC hdc, int XDest, int YDest, int nDestWidth, int nDestHeight, int XSrc, int YSrc, int nSrcWidth, int nSrcHeight, CONST VOID* lpBits, CONST ::BITMAPINFO* lpBitsInfo, UINT iUsage, DWORD dwRop )
	{
		_WINQ_FCONTEXT( "CGDI32::StretchDIBits" );
		CCheckReturn< int, CTCheckFailureValue< int, GDI_ERROR > >::TType iResult;
		_WINQ_USESAPI( StretchDIBits );
		iResult = Call< int, HDC, int, int, int, int, int, int, int, int, CONST VOID*, CONST ::BITMAPINFO*, UINT, DWORD >( pFunc, hdc, XDest, YDest, nDestWidth, nDestHeight, XSrc, YSrc, nSrcWidth, nSrcHeight, lpBits, lpBitsInfo, iUsage, dwRop );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	//Brush functions
	HBRUSH CGDI32::CreateBrushIndirect( CONST ::LOGBRUSH* lplb )
	{
		_WINQ_FCONTEXT( "CGDI32::CreateBrushIndirect" );
		CCheckReturn< HBRUSH, CCheckNonZero< HBRUSH > >::TType Result;
		_WINQ_USESAPI( CreateBrushIndirect );
		Result = Call< HBRUSH, CONST ::LOGBRUSH* >( pFunc, lplb );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HBRUSH CGDI32::CreateDIBPatternBrush( HGLOBAL hglbDIBPacked, UINT fuColorSpec )
	{
		_WINQ_FCONTEXT( "CGDI32::CreateDIBPatternBrush" );
		CCheckReturn< HBRUSH, CCheckNonZero< HBRUSH > >::TType Result;
		_WINQ_USESAPI( CreateDIBPatternBrush );
		Result = Call< HBRUSH, HGLOBAL, UINT >( pFunc, hglbDIBPacked, fuColorSpec );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HBRUSH CGDI32::CreateDIBPatternBrushPt( CONST VOID* lpPackedDIB, UINT iUsage )
	{
		_WINQ_FCONTEXT( "CGDI32::CreateDIBPatternBrushPt" );
		CCheckReturn< HBRUSH, CCheckNonZero< HBRUSH > >::TType Result;
		_WINQ_USESAPI( CreateDIBPatternBrushPt );
		Result = Call< HBRUSH, CONST VOID*, UINT >( pFunc, lpPackedDIB, iUsage );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HBRUSH CGDI32::CreateHatchBrush( int fnStyle, COLORREF clrref )
	{
		_WINQ_FCONTEXT( "CGDI32::CreateHatchBrush" );
		CCheckReturn< HBRUSH, CCheckNonZero< HBRUSH > >::TType Result;
		_WINQ_USESAPI( CreateHatchBrush );
		Result = Call< HBRUSH, int, COLORREF >( pFunc, fnStyle, clrref );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HBRUSH CGDI32::CreatePatternBrush( HBITMAP hbmp )
	{
		_WINQ_FCONTEXT( "CGDI32::CreatePatternBrush" );
		CCheckReturn< HBRUSH, CCheckNonZero< HBRUSH > >::TType Result;
		_WINQ_USESAPI( CreatePatternBrush );
		Result = Call< HBRUSH, HBITMAP >( pFunc, hbmp );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HBRUSH CGDI32::CreateSolidBrush( COLORREF crColor )
	{
		_WINQ_FCONTEXT( "CGDI32::CreateSolidBrush" );
		CCheckReturn< HBRUSH, CCheckNonZero< HBRUSH > >::TType Result;
		_WINQ_USESAPI( CreateSolidBrush );
		Result = Call< HBRUSH, COLORREF >( pFunc, crColor );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HBRUSH CGDI32::ClearBrushAttributes( HBRUSH hbm, DWORD dwFlags )
	{
		_WINQ_FCONTEXT( "CGDI32::ClearBrushAttributes" );
		CCheckReturn< HBRUSH, CCheckNonZero< HBRUSH > >::TType Result;
		_WINQ_USESAPI( ClearBrushAttributes );
		Result = Call< HBRUSH, HBRUSH, DWORD >( pFunc, hbm, dwFlags );
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::GetBrushOrgEx( HDC hdc, ::LPPOINT lppt )
	{
		_WINQ_FCONTEXT( "CGDI32::GetBrushOrgEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetBrushOrgEx );
		bResult = Call< BOOL, HDC, ::LPPOINT >( pFunc, hdc, lppt );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::PatBlt( HDC hdc, int nXLeft, int nYLeft, int nWidth, int nHeight, DWORD dwRop )
	{
		_WINQ_FCONTEXT( "CGDI32::PatBlt" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( PatBlt );
		bResult = Call< BOOL, HDC, int, int, int, int, DWORD >( pFunc, hdc, nXLeft, nYLeft, nWidth, nHeight, dwRop );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::SetBrushOrgEx( HDC hdc, int nXOrg, int nYOrg, ::LPPOINT lppt )
	{
		_WINQ_FCONTEXT( "CGDI32::SetBrushOrgEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( SetBrushOrgEx );
		bResult = Call< BOOL, HDC, int, int, ::LPPOINT >( pFunc, hdc, nXOrg, nYOrg, lppt );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CGDI32::GetBrushAttributes ( HBRUSH hbr )
	{
		_WINQ_FCONTEXT( "CGDI32::GetBrushAttributes" );
		_WINQ_USESAPI( GetBrushAttributes );
		return Call< DWORD, HBRUSH >( pFunc, hbr );
	}

	//--------------------------------------------------------------------------------
	HBRUSH CGDI32::SetBrushAttributes ( HBRUSH hbm, DWORD dwFlags ) 
	{
		_WINQ_FCONTEXT( "CGDI32::SetBrushAttributes" );
		CCheckReturn< HBRUSH, CCheckNonZero< HBRUSH > >::TType Result;
		_WINQ_USESAPI( SetBrushAttributes );
		Result = Call< HBRUSH, HBRUSH, DWORD >( pFunc, hbm, dwFlags );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HBRUSH CGDI32::SelectBrushLocal ( HBRUSH Currenthbm, HBRUSH Newhbm )
	{
		_WINQ_FCONTEXT( "CGDI32::SelectBrushLocal" );
		CCheckReturn< HBRUSH, CCheckNonZero< HBRUSH > >::TType Result;
		_WINQ_USESAPI( SelectBrushLocal );
		Result = Call< HBRUSH, HBRUSH, HBRUSH >( pFunc, Currenthbm, Newhbm );
		return Result;
	}

	//Clipping functions

	//--------------------------------------------------------------------------------
	int CGDI32::ExcludeClipRect( HDC hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect )
	{
		_WINQ_FCONTEXT( "CGDI32::ExcludeClipRect" );
		CCheckReturn< int, CTCheckFailureValue< int, ERROR > >::TType iResult;
		_WINQ_USESAPI( ExcludeClipRect );
		iResult = Call< int, HDC, int, int, int, int >( pFunc, hdc, nLeftRect, nTopRect, nRightRect, nBottomRect );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::ExtSelectClipRgn( HDC hdc, HRGN hrgn, int fnMode )
	{
		_WINQ_FCONTEXT( "CGDI32::ExtSelectClipRgn" );
		CCheckReturn< int, CTCheckFailureValue< int, ERROR > >::TType iResult;
		_WINQ_USESAPI( ExtSelectClipRgn );
		iResult = Call< int, HDC, HRGN, int >( pFunc, hdc, hrgn, fnMode );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::GetClipBox( HDC hdc, ::LPRECT lprc )
	{
		_WINQ_FCONTEXT( "CGDI32::GetClipBox" );
		CCheckReturn< int, CTCheckFailureValue< int, ERROR > >::TType iResult;
		_WINQ_USESAPI( GetClipBox );
		iResult = Call< int, HDC, ::LPRECT >( pFunc, hdc, lprc );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::GetClipRgn( HDC hdc, HRGN hrgn )
	{
		_WINQ_FCONTEXT( "CGDI32::GetClipRgn" );
		CCheckReturn< int, CTCheckFailureValue< int, -1 > >::TType iResult;
		_WINQ_USESAPI( GetClipRgn );
		iResult = Call< int, HDC, HRGN >( pFunc, hdc, hrgn );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::GetMetaRgn( HDC hdc, HRGN hrgn )
	{
		_WINQ_FCONTEXT( "CGDI32::GetMetaRgn" );
		CCheckReturn< int, CTCheckFailureValue< int, 0 > >::TType iResult;
		_WINQ_USESAPI( GetMetaRgn );
		iResult = Call< int, HDC, HRGN >( pFunc, hdc, hrgn );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::SetMetaRgn( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::SetMetaRgn" );
		CCheckReturn< int, CTCheckFailureValue< int, ERROR > >::TType iResult;
		_WINQ_USESAPI( SetMetaRgn );
		iResult = Call< int, HDC >( pFunc, hdc );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::GetRandomRgn( HDC hdc, HRGN hrgn, INT iNum )
	{
		_WINQ_FCONTEXT( "CGDI32::GetRandomRgn" );
		CCheckReturn< int, CTCheckFailureValue< int, -1 > >::TType iResult;
		_WINQ_USESAPI( GetRandomRgn );
		iResult = Call< int, HDC, HRGN, INT >( pFunc, hdc, hrgn, iNum );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::IntersectClipRect( HDC hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect )
	{
		_WINQ_FCONTEXT( "CGDI32::IntersectClipRect" );
		CCheckReturn< int, CTCheckFailureValue< int, ERROR > >::TType iResult;
		_WINQ_USESAPI( IntersectClipRect );
		iResult = Call< int, HDC, int, int, int, int >( pFunc, hdc, nLeftRect, nTopRect, nRightRect, nBottomRect );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::OffsetClipRgn( HDC hdc, int nXOffset, int nYOffset )
	{
		_WINQ_FCONTEXT( "CGDI32::OffsetClipRgn" );
		CCheckReturn< int, CTCheckFailureValue< int, ERROR > >::TType iResult;
		_WINQ_USESAPI( OffsetClipRgn );
		iResult = Call< int, HDC, int, int >( pFunc, hdc, nXOffset, nYOffset );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::PtVisible( HDC hdc, int X, int Y )
	{
		_WINQ_FCONTEXT( "CGDI32::PtVisible" );
		CCheckReturn< BOOL, CTCheckFailureValue< BOOL, -1 > >::TType bResult;
		_WINQ_USESAPI( PtVisible );
		bResult = Call< BOOL, HDC, int, int >( pFunc, hdc, X, Y );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::RectVisible( HDC hdc, CONST ::RECT* lprc )
	{
		_WINQ_FCONTEXT( "CGDI32::RectVisible" );
		CCheckReturn< BOOL, CTRangeCheck< BOOL, 0, 1 > >::TType bResult;
		_WINQ_USESAPI( RectVisible );
		bResult = Call< BOOL, HDC, CONST ::RECT* >( pFunc, hdc, lprc );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::SelectClipPath( HDC hdc, int iMode )
	{
		_WINQ_FCONTEXT( "CGDI32::SelectClipPath" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( SelectClipPath );
		bResult = Call< BOOL, HDC, int >( pFunc, hdc, iMode );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::SelectClipRgn( HDC hdc, HRGN hrgn )
	{
		_WINQ_FCONTEXT( "CGDI32::SelectClipRgn" );
		CCheckReturn< int, CTCheckFailureValue< int, ERROR > >::TType iResult;
		_WINQ_USESAPI( SelectClipRgn );
		iResult = Call< int, HDC, HRGN >( pFunc, hdc, hrgn );
		return iResult;
	}

	//Colour functions

	//--------------------------------------------------------------------------------
	BOOL CGDI32::AnimatePalette( HPALETTE hpal, UINT iStartIndex, UINT cEntries, CONST ::PALETTEENTRY* ppe )
	{
		_WINQ_FCONTEXT( "CGDI32::AnimatePalette" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( AnimatePalette );
		bResult = Call< BOOL, HPALETTE, UINT, UINT, CONST ::PALETTEENTRY* >( pFunc, hpal, iStartIndex, cEntries, ppe );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	HPALETTE CGDI32::CreateHalftonePalette( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::CreateHalftonePalette" );
		CCheckReturn< HPALETTE, CCheckNonZero< HPALETTE > >::TType Result;
		_WINQ_USESAPI( CreateHalftonePalette );
		Result = Call< HPALETTE, HDC >( pFunc, hdc );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HPALETTE CGDI32::CreatePalette( CONST ::LOGPALETTE* lplgpl )
	{
		_WINQ_FCONTEXT( "CGDI32::CreatePalette" );
		CCheckReturn< HPALETTE, CCheckNonZero< HPALETTE > >::TType Result;
		_WINQ_USESAPI( CreatePalette );
		Result = Call< HPALETTE, CONST ::LOGPALETTE* >( pFunc, lplgpl );
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::GetColorAdjustment( HDC hdc, ::LPCOLORADJUSTMENT lpca )
	{
		_WINQ_FCONTEXT( "CGDI32::GetColorAdjustment" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetColorAdjustment );
		bResult = Call< BOOL, HDC, ::LPCOLORADJUSTMENT >( pFunc, hdc, lpca );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	COLORREF CGDI32::GetNearestColor( HDC hdc, COLORREF crColor )
	{
		_WINQ_FCONTEXT( "CGDI32::GetNearestColor" );
		CCheckReturn< COLORREF, CTCheckFailureValue< COLORREF, CLR_INVALID > >::TType Result;
		_WINQ_USESAPI( GetNearestColor );
		Result = Call< COLORREF, HDC, COLORREF >( pFunc, hdc, crColor );
		return Result;
	}

	//--------------------------------------------------------------------------------
	UINT CGDI32::GetNearestPaletteIndex( HPALETTE hpal, COLORREF crColor )
	{
		_WINQ_FCONTEXT( "CGDI32::GetNearestPaletteIndex" );
		CCheckReturn< UINT, CTCheckFailureValue< UINT, CLR_INVALID > >::TType uiResult;
		_WINQ_USESAPI( GetNearestPaletteIndex );
		uiResult = Call< UINT, HPALETTE, COLORREF >( pFunc, hpal, crColor );
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	UINT CGDI32::GetPaletteEntries( HPALETTE hpal, UINT iStartIndex, UINT nEntries, ::LPPALETTEENTRY lppe )
	{
		_WINQ_FCONTEXT( "CGDI32::GetPaletteEntries" );
		CCheckReturn< UINT, CCheckNonZero< UINT > >::TType uiResult;
		_WINQ_USESAPI( GetPaletteEntries );
		uiResult = Call< UINT, HPALETTE, UINT, UINT, ::LPPALETTEENTRY >( pFunc, hpal, iStartIndex, nEntries, lppe );
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	UINT CGDI32::GetSystemPaletteEntries( HDC hdc, UINT iStartIndex, UINT nEntries, ::LPPALETTEENTRY lppe )
	{
		_WINQ_FCONTEXT( "CGDI32::GetSystemPaletteEntries" );
		CCheckReturn< UINT, CCheckNonZero< UINT > >::TType uiResult;
		_WINQ_USESAPI( GetSystemPaletteEntries );
		uiResult = Call< UINT, HDC, UINT, UINT, ::LPPALETTEENTRY >( pFunc, hdc, iStartIndex, nEntries, lppe );
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	UINT CGDI32::GetSystemPaletteUse( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::GetSystemPaletteUse" );
		CCheckReturn< UINT, CTCheckFailureValue< UINT, SYSPAL_ERROR > >::TType uiResult;
		_WINQ_USESAPI( GetSystemPaletteUse );
		uiResult = Call< UINT, HDC >( pFunc, hdc );
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	UINT CGDI32::RealizePalette( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::RealizePalette" );
		CCheckReturn< UINT, CTCheckFailureValue< UINT, GDI_ERROR > >::TType uiResult;
		_WINQ_USESAPI( RealizePalette );
		uiResult = Call< UINT, HDC >( pFunc, hdc );
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::ResizePalette( HPALETTE hpal, UINT nEntries )
	{
		_WINQ_FCONTEXT( "CGDI32::ResizePalette" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( ResizePalette );
		bResult = Call< BOOL, HPALETTE, UINT >( pFunc, hpal, nEntries );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	HPALETTE CGDI32::SelectPalette( HDC hdc, HPALETTE hpal, BOOL bForceBackground )
	{
		_WINQ_FCONTEXT( "CGDI32::SelectPalette" );
		CCheckReturn< HPALETTE, CCheckNonZero< HPALETTE > >::TType Result;
		_WINQ_USESAPI( SelectPalette );
		Result = Call< HPALETTE, HDC, HPALETTE, BOOL >( pFunc, hdc, hpal, bForceBackground );
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::SetColorAdjustment( HDC hdc, CONST ::COLORADJUSTMENT* lpca )
	{
		_WINQ_FCONTEXT( "CGDI32::SetColorAdjustment" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( SetColorAdjustment );
		bResult = Call< BOOL, HDC, CONST ::COLORADJUSTMENT* >( pFunc, hdc, lpca );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	UINT CGDI32::SetPaletteEntries( HPALETTE hpal, UINT iStart, UINT cEntries, CONST ::PALETTEENTRY* lppe )
	{
		_WINQ_FCONTEXT( "CGDI32::SetPaletteEntries" );
		CCheckReturn< UINT, CCheckNonZero< UINT > >::TType uiResult;
		_WINQ_USESAPI( SetPaletteEntries );
		uiResult = Call< UINT, HPALETTE, UINT, UINT, CONST ::PALETTEENTRY* >( pFunc, hpal, iStart, cEntries, lppe );
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	UINT CGDI32::SetSystemPaletteUse( HDC hdc, UINT uUsage )
	{
		_WINQ_FCONTEXT( "CGDI32::SetSystemPaletteUse" );
		CCheckReturn< UINT, CTCheckFailureValue< UINT, SYSPAL_ERROR > >::TType uiResult;
		_WINQ_USESAPI( SetSystemPaletteUse );
		uiResult = Call< UINT, HDC, UINT >( pFunc, hdc, uUsage );
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::UnrealizeObject( HGDIOBJ hgdiobj )
	{
		_WINQ_FCONTEXT( "CGDI32::UnrealizeObject" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( UnrealizeObject );
		bResult = Call< BOOL, HGDIOBJ >( pFunc, hgdiobj );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::UpdateColors( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::UpdateColors" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( UpdateColors );
		bResult = Call< BOOL, HDC >( pFunc, hdc );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::GetDeviceGammaRamp( HDC hDC, LPVOID lpRamp )
	{
		_WINQ_FCONTEXT( "CGDI32::GetDeviceGammaRamp" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetDeviceGammaRamp );
		bResult = Call< BOOL, HDC, LPVOID >( pFunc, hDC, lpRamp );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::SetDeviceGammaRamp( HDC hDC, LPVOID lpRamp )
	{
		_WINQ_FCONTEXT( "CGDI32::SetDeviceGammaRamp" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( SetDeviceGammaRamp );
		bResult = Call< BOOL, HDC, LPVOID >( pFunc, hDC, lpRamp );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::EnumICMProfiles( HDC hDC, ::ICMENUMPROC lpEnumICMProfilesFunc, LPARAM lParam )
	{
		_WINQ_FCONTEXT( "CGDI32::EnumICMProfiles" );
		_WINQ_USESAPI( EnumICmProfiles );
		return Call< int, HDC, ::ICMENUMPROC, LPARAM >( pFunc, hDC, lpEnumICMProfilesFunc, lParam );
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::GetICMProfile( HDC hDC, LPDWORD lpcbName, LPTSTR lpszFilename )
	{
		_WINQ_FCONTEXT( "CGDI32::GetICMProfile" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetICMProfile );
		bResult = Call< BOOL, HDC, LPDWORD, LPTSTR >( pFunc, hDC, lpcbName, lpszFilename );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::SetICMMode( HDC hDC, int iEnableICM )
	{
		_WINQ_FCONTEXT( "CGDI32::SetICMMode" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		_WINQ_USESAPI( SetICMMode );
		iResult = Call< int, HDC, int >( pFunc, hDC, iEnableICM );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::SetICMProfile( HDC hDC, LPTSTR lpFileName )
	{
		_WINQ_FCONTEXT( "CGDI32::SetICMProfile" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( SetICMProfile );
		bResult = Call< BOOL, HDC, LPTSTR >( pFunc, hDC, lpFileName );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::UpdateICMRegKey( DWORD dwReserved, LPTSTR lpszCMID, LPTSTR lpszFileName, UINT nCommand )
	{
		_WINQ_FCONTEXT( "CGDI32::UpdateICMRegKey" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( UpdateICMRegKey );
		bResult = Call< BOOL, DWORD, LPTSTR, LPTSTR, UINT >( pFunc, dwReserved, lpszCMID, lpszFileName, nCommand );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::CheckColorsInGamut( HDC hDC, LPVOID lpRGBTriples, LPVOID lpBuffer, UINT nCount )
	{
		_WINQ_FCONTEXT( "CGDI32::CheckColorsInGamut" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( CheckColorsInGamut );
		bResult = Call< BOOL, HDC, LPVOID, LPVOID, UINT >( pFunc, hDC, lpRGBTriples, lpBuffer, nCount );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::ColorCorrectPalette( HDC hDC, HPALETTE hPalette, DWORD dwFirstEntry, DWORD dwNumOfEntries )
	{
		_WINQ_FCONTEXT( "CGDI32::ColorCorrectPalette" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( ColorCorrectPalette );
		bResult = Call< BOOL, HDC, HPALETTE, DWORD, DWORD >( pFunc, hDC, hPalette, dwFirstEntry, dwNumOfEntries );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::ColorMatchToTarget( HDC hDC, HDC hdcTarget, DWORD uiAction )
	{
		_WINQ_FCONTEXT( "CGDI32::ColorMatchToTarget" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( ColorMatchToTarget );
		bResult = Call< BOOL, HDC, HDC, DWORD >( pFunc, hDC, hdcTarget, uiAction );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	HCOLORSPACE CGDI32::CreateColorSpace( ::LPLOGCOLORSPACE lpLogColorSpace )
	{
		_WINQ_FCONTEXT( "CGDI32::CreateColorSpace" );
		CCheckReturn< HCOLORSPACE, CCheckNonZero< HCOLORSPACE > >::TType Result;
		_WINQ_USESAPI( CreateColorSpace );
		Result = Call< HCOLORSPACE, ::LPLOGCOLORSPACE >( pFunc, lpLogColorSpace );
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::DeleteColorSpace( HCOLORSPACE hColorSpace )
	{
		_WINQ_FCONTEXT( "CGDI32::DeleteColorSpace" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( DeleteColorSpace );
		bResult = Call< BOOL, HCOLORSPACE >( pFunc, hColorSpace );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	HCOLORSPACE CGDI32::GetColorSpace( HDC hDC )
	{
		_WINQ_FCONTEXT( "CGDI32::GetColorSpace" );
		CCheckReturn< HCOLORSPACE, CCheckNonZero< HCOLORSPACE > >::TType Result;
		_WINQ_USESAPI( GetColorSpace );
		Result = Call< HCOLORSPACE, HDC >( pFunc, hDC );
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::GetLogColorSpace( HCOLORSPACE hColorSpace, ::LPLOGCOLORSPACE lpBuffer, DWORD nSize )
	{
		_WINQ_FCONTEXT( "CGDI32::GetLogColorSpace" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPIAW( GetLogColorSpace );
		bResult = Call< BOOL, HCOLORSPACE, ::LPLOGCOLORSPACE, DWORD >( pFunc, hColorSpace, lpBuffer, nSize );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	HCOLORSPACE CGDI32::SetColorSpace( HDC hDC, HCOLORSPACE hColorSpace )
	{
		_WINQ_FCONTEXT( "CGDI32::SetColorSpace" );
		CCheckReturn< HCOLORSPACE, CCheckNonZero< HCOLORSPACE > >::TType Result;
		_WINQ_USESAPI( SetColorSpace );
		Result = Call< HCOLORSPACE, HDC, HCOLORSPACE >( pFunc, hDC, hColorSpace );
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::SetMagicColors( HDC hdc, ULONG u1, ULONG u2 )
	{
		_WINQ_FCONTEXT( "CGDI32::SetMagicColors" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( SetMagicColors );
		bResult = Call< BOOL, HDC, ULONG, ULONG >( pFunc, hdc, u1, u2 );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	//Coordinate transformation functions
	BOOL CGDI32::CombineTransform( ::LPXFORM lpxformResult, CONST ::XFORM* lpxform1, CONST ::XFORM* lpxform2 )
	{
		_WINQ_FCONTEXT( "CGDI32::CombineTransform" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( CombineTransform );
		bResult = Call< BOOL, ::LPXFORM, CONST ::XFORM*, CONST ::XFORM* >( pFunc, lpxformResult, lpxform1, lpxform2 );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::DPtoLP( HDC hdc, ::LPPOINT lpPoints, int nCount )
	{
		_WINQ_FCONTEXT( "CGDI32::DPtoLP" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( DPtoLP );
		bResult = Call< BOOL, HDC, ::LPPOINT, int >( pFunc, hdc, lpPoints, nCount );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::GetCurrentPositionEx( HDC hdc, ::LPPOINT lpPoint )
	{
		_WINQ_FCONTEXT( "CGDI32::GetCurrentPositionEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetCurrentPositionEx );
		bResult = Call< BOOL, HDC, ::LPPOINT >( pFunc, hdc, lpPoint );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::GetGraphicsMode( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::GetGraphicsMode" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		_WINQ_USESAPI( GetGraphicsMode );
		iResult = Call< int, HDC >( pFunc, hdc );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::GetMapMode( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::GetMapMode" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		_WINQ_USESAPI( GetMapMode );
		iResult = Call< int, HDC >( pFunc, hdc );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::GetViewportExtEx( HDC hdc, ::LPSIZE lpSize )
	{
		_WINQ_FCONTEXT( "CGDI32::GetViewportExtEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetViewportExtEx );
		bResult = Call< BOOL, HDC, ::LPSIZE >( pFunc, hdc, lpSize );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::GetViewportOrgEx( HDC hdc, ::LPPOINT lpPoint )
	{
		_WINQ_FCONTEXT( "CGDI32::GetViewportOrgEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetViewportOrgEx );
		bResult = Call< BOOL, HDC, ::LPPOINT >( pFunc, hdc, lpPoint );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::GetWindowExtEx( HDC hdc, ::LPSIZE lpSize )
	{
		_WINQ_FCONTEXT( "CGDI32::GetWindowExtEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetWindowExtEx );
		bResult = Call< BOOL, HDC, ::LPSIZE >( pFunc, hdc, lpSize );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::GetWindowOrgEx( HDC hdc, ::LPPOINT lpPoint )
	{
		_WINQ_FCONTEXT( "CGDI32::GetWindowOrgEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetWindowOrgEx );
		bResult = Call< BOOL, HDC, ::LPPOINT >( pFunc, hdc, lpPoint );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::GetWorldTransform( HDC hdc, ::LPXFORM lpXform )
	{
		_WINQ_FCONTEXT( "CGDI32::GetWorldTransform" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetWorldTransform );
		bResult = Call< BOOL, HDC, ::LPXFORM >( pFunc, hdc, lpXform );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::LPtoDP( HDC hdc, ::LPPOINT lpPoints, int nCount )
	{
		_WINQ_FCONTEXT( "CGDI32::LPtoDP" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( LPtoDP );
		bResult = Call< BOOL, HDC, ::LPPOINT, int >( pFunc, hdc, lpPoints, nCount );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::ModifyWorldTransform( HDC hdc, CONST ::XFORM* lpXform, DWORD iMode )
	{
		_WINQ_FCONTEXT( "CGDI32::ModifyWorldTransform" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( ModifyWorldTransform );
		bResult = Call< BOOL, HDC, CONST ::XFORM*, DWORD >( pFunc, hdc, lpXform, iMode );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::OffsetViewportOrgEx( HDC hdc, int nXOffset, int nYOffset, ::LPPOINT lpPoint )
	{
		_WINQ_FCONTEXT( "CGDI32::OffsetViewportOrgEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( OffsetViewportOrgEx );
		bResult = Call< BOOL, HDC, int, int, ::LPPOINT >( pFunc, hdc, nXOffset, nYOffset, lpPoint );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::OffsetWindowOrgEx( HDC hdc, int nXOffset, int nYOffset, ::LPPOINT lpPoint )
	{
		_WINQ_FCONTEXT( "CGDI32::OffsetWindowOrgEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( OffsetWindowOrgEx );
		bResult = Call< BOOL, HDC, int, int, ::LPPOINT >( pFunc, hdc, nXOffset, nYOffset, lpPoint );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::ScaleViewportExtEx( HDC hdc, int Xnum, int Xdenom, int Ynum, int Ydenom, ::LPSIZE lpSize )
	{
		_WINQ_FCONTEXT( "CGDI32::ScaleViewportExtEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( ScaleViewportExtEx );
		bResult = Call< BOOL, HDC, int, int, int, int, ::LPSIZE >( pFunc, hdc, Xnum, Xdenom, Ynum, Ydenom, lpSize );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::ScaleWindowExtEx( HDC hdc, int Xnum, int Xdenom, int Ynum, int Ydenom, ::LPSIZE lpSize )
	{
		_WINQ_FCONTEXT( "CGDI32::ScaleWindowExtEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( ScaleWindowExtEx );
		bResult = Call< BOOL, HDC, int, int, int, int, ::LPSIZE >( pFunc, hdc, Xnum, Xdenom, Ynum, Ydenom, lpSize );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::SetGraphicsMode( HDC hdc, int iMode )
	{
		_WINQ_FCONTEXT( "CGDI32::SetGraphicsMode" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		_WINQ_USESAPI( SetGraphicsMode );
		iResult = Call< int, HDC, int >( pFunc, hdc, iMode );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::SetMapMode( HDC hdc, int fnMapMode )
	{
		_WINQ_FCONTEXT( "CGDI32::SetMapMode" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		_WINQ_USESAPI( SetMapMode );
		iResult = Call< int, HDC, int >( pFunc, hdc, fnMapMode );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::SetViewportExtEx( HDC hdc, int nXExtent, int nYExtent, ::LPSIZE lpSize )
	{
		_WINQ_FCONTEXT( "CGDI32::SetViewportExtEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( SetViewportExtEx );
		bResult = Call< BOOL, HDC, int, int, ::LPSIZE >( pFunc, hdc, nXExtent, nYExtent, lpSize );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::SetViewportOrgEx( HDC hdc, int X, int Y, ::LPPOINT lpPoint )
	{
		_WINQ_FCONTEXT( "CGDI32::SetViewportOrgEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( SetViewportOrgEx );
		bResult = Call< BOOL, HDC, int, int, ::LPPOINT >( pFunc, hdc, X, Y, lpPoint );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::SetWindowExtEx( HDC hdc, int nXExtent, int nYExtent, ::LPSIZE lpSize )
	{
		_WINQ_FCONTEXT( "CGDI32::SetWindowExtEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( SetWindowExtEx );
		bResult = Call< BOOL, HDC, int, int, ::LPSIZE >( pFunc, hdc, nXExtent, nYExtent, lpSize );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::SetWindowOrgEx( HDC hdc, int X, int Y, ::LPPOINT lpPoint )
	{
		_WINQ_FCONTEXT( "CGDI32::SetWindowOrgEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( SetWindowOrgEx );
		bResult = Call< BOOL, HDC, int, int, ::LPPOINT >( pFunc, hdc, X, Y, lpPoint );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::SetWorldTransform( HDC hdc, CONST ::XFORM* lpXform )
	{
		_WINQ_FCONTEXT( "CGDI32::SetWorldTransform" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( SetWorldTransform );
		bResult = Call< BOOL, HDC, CONST ::XFORM* >( pFunc, hdc, lpXform );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	//Device Context functions
	HDC CGDI32::CreateCompatibleDC( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::CreateCompatibleDC" );
		CCheckReturn< HDC, CCheckNonZero< HDC > >::TType Result;
		_WINQ_USESAPI( CreateCompatibleDC );
		Result = Call< HDC, HDC >( pFunc, hdc );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HDC CGDI32::CreateDC( LPCTSTR lpszDriver, LPCTSTR lpszDevice, LPCTSTR lpszOutput, CONST ::DEVMODE* lpInitData )
	{
		_WINQ_FCONTEXT( "CGDI32::CreateDC" );
		CCheckReturn< HDC, CCheckNonZero< HDC > >::TType Result;
		_WINQ_USESAPI( CreateDC );
		Result = Call< HDC, LPCTSTR, LPCTSTR, LPCTSTR, CONST ::DEVMODE* >( pFunc, lpszDriver, lpszDevice, lpszOutput, lpInitData );
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::DeleteDC( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::DeleteDC" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( DeleteDC );
		bResult = Call< BOOL, HDC >( pFunc, hdc );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::CancelDC( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::CancelDC" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( CancelDC );
		bResult = Call< BOOL, HDC >( pFunc, hdc );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	HDC CGDI32::CreateIC( LPCTSTR lpszDriver, LPCTSTR lpszDevice, LPCTSTR lpszOutput, CONST ::DEVMODE* lpdvmInit )
	{
		_WINQ_FCONTEXT( "CGDI32::CreateIC" );
		CCheckReturn< HDC, CCheckNonZero< HDC > >::TType Result;
		_WINQ_USESAPIAW( CreateIC );
		Result = Call< HDC, LPCTSTR, LPCTSTR, LPCTSTR, CONST ::DEVMODE* >( pFunc, lpszDriver, lpszDevice, lpszOutput, lpdvmInit );
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::DeleteObject( HGDIOBJ hObject )
	{
		_WINQ_FCONTEXT( "CGDI32::DeleteObject" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( DeleteObject );
		bResult = Call< BOOL, HGDIOBJ >( pFunc, hObject );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::DrawEscape( HDC hdc, int nEscape, int cbInput, LPCSTR lpszInData )
	{
		_WINQ_FCONTEXT( "CGDI32::DrawEscape" );
		CCheckReturn< int, CTCheckNotLess< int, 0 > >::TType iResult; 
		_WINQ_USESAPI( DrawEscape );
		iResult = Call< int, HDC, int, int, LPCSTR >( pFunc, hdc, nEscape, cbInput, lpszInData );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::EnumObjects( HDC hdc, int nObjectType, GOBJENUMPROC lpObjectFunc, LPARAM lParam )
	{
		_WINQ_FCONTEXT( "CGDI32::EnumObjects" );
		_WINQ_USESAPI( EnumObjects );
		return Call< int, HDC, int, GOBJENUMPROC, LPARAM >( pFunc, hdc, nObjectType, lpObjectFunc, lParam );
	}

	//--------------------------------------------------------------------------------
	HGDIOBJ CGDI32::GetCurrentObject( HDC hdc, UINT uObjectType )
	{
		_WINQ_FCONTEXT( "CGDI32::GetCurrentObject" );
		CCheckReturn< HGDIOBJ, CCheckNonZero< HGDIOBJ > >::TType Result;
		_WINQ_USESAPI( GetCurrentObject );
		Result = Call< HGDIOBJ, HDC, UINT >( pFunc, hdc, uObjectType );
		return Result;
	}

	//--------------------------------------------------------------------------------
	//?msimg32.dll
	COLORREF CGDI32::GetDCBrushColor( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::GetDCBrushColor" );
		CCheckReturn< COLORREF, CTCheckFailureValue< COLORREF, CLR_INVALID > >::TType Result;
		_WINQ_USESAPI( GetDCBrushColor );
		Result = Call< COLORREF, HDC >( pFunc, hdc );
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::GetDCOrgEx( HDC hdc, ::LPPOINT lpPoint )
	{
		_WINQ_FCONTEXT( "CGDI32::GetDCOrgEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetDCOrgEx );
		bResult = Call< BOOL, HDC, ::LPPOINT >( pFunc, hdc, lpPoint );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	//?msimg32.dll
	COLORREF CGDI32::GetDCPenColor( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::GetDCPenColor" );
		CCheckReturn< COLORREF, CTCheckFailureValue< COLORREF, CLR_INVALID > >::TType Result;
		_WINQ_USESAPI( GetDCPenColor );
		Result = Call< COLORREF, HDC >( pFunc, hdc );
		return Result;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::GetDeviceCaps( HDC hdc, int nIndex )
	{
		_WINQ_FCONTEXT( "CGDI32::GetDeviceCaps" );
		_WINQ_USESAPI( GetDeviceCaps );
		return Call< int, HDC, int >( pFunc, hdc, nIndex );
	}

	//--------------------------------------------------------------------------------
	DWORD CGDI32::GetLayout( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::GetLayout" );
		CCheckReturn< DWORD, CTCheckFailureValue< DWORD, GDI_ERROR > >::TType dwResult;
		_WINQ_USESAPI( GetLayout );
		dwResult = Call< DWORD, HDC >( pFunc, hdc );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::GetObject( HGDIOBJ hgdiobj, int cbBuffer, LPVOID lpvObject )
	{
		_WINQ_FCONTEXT( "CGDI32::GetObject" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		_WINQ_USESAPI( GetObject );
		iResult = Call< int, HGDIOBJ, int, LPVOID >( pFunc, hgdiobj, cbBuffer, lpvObject );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CGDI32::GetObjectType( HGDIOBJ h )
	{
		_WINQ_FCONTEXT( "CGDI32::GetObjectType" );
		CCheckReturn< DWORD, CCheckNonZero< DWORD > >::TType dwResult;
		_WINQ_USESAPI( GetObjectType );
		dwResult = Call< DWORD, HGDIOBJ >( pFunc, h );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	HGDIOBJ CGDI32::GetStockObject( int fnObject )
	{
		_WINQ_FCONTEXT( "CGDI32::GetStockObject" );
		CCheckReturn< HGDIOBJ, CCheckNonZero< HGDIOBJ > >::TType Result;
		_WINQ_USESAPI( GetStockObject );
		Result = Call< HGDIOBJ, int >( pFunc, fnObject );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HDC CGDI32::ResetDC( HDC hdc, CONST ::DEVMODE* lpInitData )
	{
		_WINQ_FCONTEXT( "CGDI32::ResetDC" );
		CCheckReturn< HDC, CCheckNonZero< HDC > >::TType Result;
		_WINQ_USESAPI( ResetDC );
		Result = Call< HDC, HDC, CONST ::DEVMODE* >( pFunc, hdc, lpInitData );
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::RestoreDC( HDC hdc, int nSavedDC )
	{
		_WINQ_FCONTEXT( "CGDI32::RestoreDC" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( RestoreDC );
		bResult = Call< BOOL, HDC, int >( pFunc, hdc, nSavedDC );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::SaveDC( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::SaveDC" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		_WINQ_USESAPI( SaveDC );
		iResult = Call< int, HDC >( pFunc, hdc );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	HGDIOBJ CGDI32::SelectObject( HDC hdc, HGDIOBJ hgdiobj )
	{
		_WINQ_FCONTEXT( "CGDI32::SelectObject" );
		HGDIOBJ Result = 0;
		_WINQ_USESAPI( SelectObject );
		Result = Call< HGDIOBJ, HDC, HGDIOBJ >( pFunc, hdc, hgdiobj );
		if( Result == 0 || Result == HGDI_ERROR )
		{
			__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "SelectObject" ), 0 ));
		}
		return Result;
	}

	//--------------------------------------------------------------------------------
	COLORREF CGDI32::SetDCBrushColor( HDC hdc, COLORREF crColor )
	{
		_WINQ_FCONTEXT( "CGDI32::SetDCBrushColor" );
		CCheckReturn< COLORREF, CTCheckFailureValue< COLORREF, CLR_INVALID > >::TType Result;
		_WINQ_USESAPI( SetDCBrushColor );
		Result = Call< COLORREF, HDC, COLORREF >( pFunc, hdc, crColor );
		return Result;
	}

	//--------------------------------------------------------------------------------
	COLORREF CGDI32::SetDCPenColor( HDC hdc, COLORREF crColor )
	{
		_WINQ_FCONTEXT( "CGDI32::SetDCPenColor" );
		CCheckReturn< COLORREF, CTCheckFailureValue< COLORREF, CLR_INVALID > >::TType Result;
		_WINQ_USESAPI( SetDCPenColor );
		Result = Call< COLORREF, HDC, COLORREF >( pFunc, hdc, crColor );
		return Result;
	}

	//--------------------------------------------------------------------------------
	DWORD CGDI32::SetLayout( HDC hdc, DWORD dwLayout )
	{
		_WINQ_FCONTEXT( "CGDI32::SetLayout" );
		CCheckReturn< DWORD, CTCheckFailureValue< DWORD, GDI_ERROR > >::TType dwResult;
		_WINQ_USESAPI( SetLayout );
		dwResult = Call< DWORD, HDC, DWORD >( pFunc, hdc, dwLayout );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	//Drawing & Filled shape functions
	BOOL CGDI32::AngleArc( HDC hdc, int X, int Y, DWORD dwRadius, FLOAT eStartAngle, FLOAT eSweepAngle )
	{
		_WINQ_FCONTEXT( "CGDI32::AngleArc" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( AngleArc );
		bResult = Call< BOOL, HDC, int, int, DWORD, FLOAT, FLOAT >( pFunc, hdc, X, Y, dwRadius, eStartAngle, eSweepAngle );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::Arc( HDC hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect, int nXStartArc, int nYStartArc, int nXEndArc, int nYEndArc )
	{
		_WINQ_FCONTEXT( "CGDI32::Arc" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( Arc );
		bResult = Call< BOOL, HDC, int, int, int, int ,int, int, int, int >( pFunc, hdc, nLeftRect, nTopRect, nRightRect, nBottomRect, nXStartArc, nYStartArc, nXEndArc, nYEndArc );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::ArcTo( HDC hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect, int nXRadial1, int nYRadial1, int nXRadial2, int nYRadial2 )
	{
		_WINQ_FCONTEXT( "CGDI32::ArcTo" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( ArcTo );
		bResult = Call< BOOL, HDC, int, int, int, int, int, int, int, int >( pFunc, hdc, nLeftRect, nTopRect, nRightRect, nBottomRect, nXRadial1, nYRadial1, nXRadial2, nYRadial2 );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::GetArcDirection( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::GetArcDirection" );
		_WINQ_USESAPI( GetArcDirection );
		return Call< int, HDC >( pFunc, hdc );
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::LineDDA( int nXStart, int nYStart, int nXEnd, int nYEnd, ::LINEDDAPROC lpLineFunc, LPARAM lpData )
	{
		_WINQ_FCONTEXT( "CGDI32::LineDDA" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( LineDDA );
		bResult = Call< BOOL, int, int, int, int, ::LINEDDAPROC, LPARAM >( pFunc, nXStart, nYStart, nXEnd, nYEnd, lpLineFunc, lpData );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::LineTo( HDC hdc, int nXEnd, int nYEnd )
	{
		_WINQ_FCONTEXT( "CGDI32::LineTo" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( LineTo );
		bResult = Call< BOOL, HDC, int, int >( pFunc, hdc, nXEnd, nYEnd );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::MoveToEx( HDC hdc, int X, int Y, ::LPPOINT lpPoint )
	{
		_WINQ_FCONTEXT( "CGDI32::MoveToEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( MoveToEx );
		bResult = Call< BOOL, HDC, int, int, ::LPPOINT >( pFunc, hdc, X, Y, lpPoint );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::PolyBezier( HDC hdc, CONST ::POINT* lppt, DWORD cPoints )
	{
		_WINQ_FCONTEXT( "CGDI32::PolyBezier" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( PolyBezier );
		bResult = Call< BOOL, HDC, CONST ::POINT*, DWORD >( pFunc, hdc, lppt, cPoints );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::PolyBezierTo( HDC hdc, CONST ::POINT* lppt, DWORD cCount )
	{
		_WINQ_FCONTEXT( "CGDI32::PolyBezierTo" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( PolyBezierTo );
		bResult = Call< BOOL, HDC, CONST ::POINT*, DWORD >( pFunc, hdc, lppt, cCount );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::PolyDraw( HDC hdc, CONST ::POINT* lppt, CONST BYTE* lpbTypes, int cCount )
	{
		_WINQ_FCONTEXT( "CGDI32::PolyDraw" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( PolyDraw );
		bResult = Call< BOOL, HDC, CONST ::POINT*, CONST BYTE*, int >( pFunc, hdc, lppt, lpbTypes, cCount );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::Polyline( HDC hdc, CONST ::POINT* lppt, int cPoints )
	{
		_WINQ_FCONTEXT( "CGDI32::Polyline" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( Polyline );
		bResult = Call< BOOL, HDC, CONST ::POINT*, int >( pFunc, hdc, lppt, cPoints );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::PolylineTo( HDC hdc, CONST ::POINT* lppt, DWORD cCount )
	{
		_WINQ_FCONTEXT( "CGDI32::PolylineTo" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( PolylineTo );
		bResult = Call< BOOL, HDC, CONST ::POINT*, DWORD >( pFunc, hdc, lppt, cCount );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::PolyPolyline( HDC hdc, CONST ::POINT* lppt, CONST DWORD* lpdwPolyPoints, DWORD cCount )
	{
		_WINQ_FCONTEXT( "CGDI32::PolyPolyline" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( PolyPolyline );
		bResult = Call< BOOL, HDC, CONST ::POINT*, CONST DWORD*, DWORD >( pFunc, hdc, lppt, lpdwPolyPoints, cCount );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::SetArcDirection( HDC hdc, int ArcDirection )
	{
		_WINQ_FCONTEXT( "CGDI32::SetArcDirection" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		_WINQ_USESAPI( SetArcDirection );
		iResult = Call< int, HDC, int >( pFunc, hdc, ArcDirection );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::Chord( HDC hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect, int nXRadial1, int nYRadial1, int nXRadial2, int nYRadial2 )
	{
		_WINQ_FCONTEXT( "CGDI32::Chord" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( Chord );
		bResult = Call< BOOL, HDC, int, int, int, int, int, int, int, int >( pFunc, hdc, nLeftRect, nTopRect, nRightRect, nBottomRect, nXRadial1, nYRadial1, nXRadial2, nYRadial2 );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::Ellipse( HDC hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect )
	{
		_WINQ_FCONTEXT( "CGDI32::Ellipse" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( Ellipse );
		bResult = Call< BOOL, HDC, int, int, int, int >( pFunc, hdc, nLeftRect, nTopRect, nRightRect, nBottomRect );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::Pie( HDC hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect, int nXRadial1, int nYRadial1, int nXRadial2, int nYRadial2 )
	{
		_WINQ_FCONTEXT( "CGDI32::Pie" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( Pie );
		bResult = Call< BOOL, HDC, int, int, int, int, int, int, int, int >( pFunc, hdc, nLeftRect, nTopRect, nRightRect, nBottomRect, nXRadial1, nYRadial1, nXRadial2, nYRadial2 );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::Polygon( HDC hdc, CONST ::POINT* lpPoints, int nCount )
	{
		_WINQ_FCONTEXT( "CGDI32::Polygon" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( Polygon );
		bResult = Call< BOOL, HDC, CONST ::POINT*, int >( pFunc, hdc, lpPoints, nCount );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::PolyPolygon( HDC hdc, CONST ::POINT* lpPoints, CONST INT* lpPolyCounts, int nCount )
	{
		_WINQ_FCONTEXT( "CGDI32::PolyPolygon" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( PolyPolygon );
		bResult = Call< BOOL, HDC, CONST ::POINT*, CONST INT*, int >( pFunc, hdc, lpPoints, lpPolyCounts, nCount );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::Rectangle( HDC hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect )
	{
		_WINQ_FCONTEXT( "CGDI32::Rectangle" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( Rectangle );
		bResult = Call< BOOL, HDC, int, int, int, int >( pFunc, hdc, nLeftRect, nTopRect, nRightRect, nBottomRect );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::RoundRect( HDC hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect, int nWidth, int nHeight )
	{
		_WINQ_FCONTEXT( "CGDI32::RoundRect" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( RoundRect );
		bResult = Call< BOOL, HDC, int, int, int, int, int, int >( pFunc, hdc, nLeftRect, nTopRect, nRightRect, nBottomRect, nWidth, nHeight );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	//Font & Text functions
	HANDLE CGDI32::AddFontMemResourceEx( PVOID pbFont, DWORD cbFont, PVOID pdv, DWORD* pcFonts )
	{
		_WINQ_FCONTEXT( "CGDI32::AddFontMemResourceEx" );
		CCheckReturn< HANDLE, CHandleNullCheck< > >::TType Result;
		_WINQ_USESAPI( AddFontMemResourceEx );
		Result = Call< HANDLE, PVOID, DWORD, PVOID, DWORD* >( pFunc, pbFont, cbFont, pdv, pcFonts );
		return Result;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::AddFontResource( LPCTSTR lpszFilename )
	{
		_WINQ_FCONTEXT( "CGDI32::AddFontResource" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		_WINQ_USESAPI( AddFontResource );
		iResult = Call< int, LPCTSTR >( pFunc, lpszFilename );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::AddFontResourceEx( LPCTSTR lpszFilename, DWORD fl, PVOID pdv )
	{
		_WINQ_FCONTEXT( "CGDI32::AddFontResourceEx" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		_WINQ_USESAPI( AddfontResourceEx );
		iResult = Call< int, LPCTSTR, DWORD, PVOID >( pFunc, lpszFilename, fl, pdv );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::AddFontResourceTracking ( LPCSTR lpString, int unknown )
	{
		_WINQ_FCONTEXT( "CGDI32::AddFontResourceTracking" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		_WINQ_USESAPI( AddFontResourceTracking );
		iResult = Call< int, LPCSTR, int >( pFunc, lpString, unknown );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	HFONT CGDI32::CreateFont( int nHeight, int nWidth, int nEscapement, int nOrientation, int fnWeight, DWORD fdwItalic, DWORD fdwUnderline, DWORD fdwStrikeOut, DWORD fdwCharSet, DWORD fdwOutputPrecision, DWORD fdwClipPrecision, DWORD fdwQuality, DWORD fdwPitchAndFamily, LPCTSTR lpszFace )
	{
		_WINQ_FCONTEXT( "CGDI32::CreateFont" );
		CCheckReturn< HFONT, CCheckNonZero< HFONT > >::TType Result;
		_WINQ_USESAPI( CreateFont );
		Result = Call< HFONT, int, int, int, int, int, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD, LPCTSTR >( pFunc, nHeight, nWidth, nEscapement, nOrientation, fnWeight, fdwItalic, fdwUnderline, fdwStrikeOut, fdwCharSet, fdwOutputPrecision, fdwClipPrecision, fdwQuality, fdwPitchAndFamily, lpszFace );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HFONT CGDI32::CreateFontIndirect( CONST ::LOGFONT* lplf )
	{
		_WINQ_FCONTEXT( "CGDI32::CreateFontIndirect" );
		CCheckReturn< HFONT, CCheckNonZero< HFONT > >::TType Result;
		_WINQ_USESAPI( CreateFontIndirect );
		Result = Call< HFONT, CONST ::LOGFONT* >( pFunc, lplf );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HFONT CGDI32::CreateFontIndirectEx( CONST ::ENUMLOGFONTEXDV* penumlfex )
	{
		_WINQ_FCONTEXT( "CGDI32::CreateFontIndirectEx" );
		CCheckReturn< HFONT, CCheckNonZero< HFONT > >::TType Result;
		_WINQ_USESAPI( CreateFontIndirectEx );
		Result = Call< HFONT, CONST ::ENUMLOGFONTEXDV* >( pFunc, penumlfex );
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::CreateScalableFontResource( DWORD fdwHidden, LPCTSTR lpszFontRes, LPCTSTR lpszFontFile, LPCTSTR lpszCurrentPath )
	{
		_WINQ_FCONTEXT( "CGDI32::CreateScalableFontResource" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( CreateScalableFontResource );
		bResult = Call< BOOL, DWORD, LPCTSTR, LPCTSTR, LPCTSTR >( pFunc, fdwHidden, lpszFontRes, lpszFontFile, lpszCurrentPath );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::EnableEUDC( BOOL fEnableEUDC )
	{
		_WINQ_FCONTEXT( "CGDI32::EnableEUDC" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( EnableEUDC );
		bResult = Call< BOOL, BOOL >( pFunc, fEnableEUDC );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::EnumFontFamilies( HDC hdc, LPCTSTR lpszFamily, ::FONTENUMPROC lpEnumFontFamProc, LPARAM lParam )
	{
		_WINQ_FCONTEXT( "CGDI32::EnumFontFamilies" );
		_WINQ_USESAPI( EnumFontFamilies );
		return Call< int, HDC, LPCTSTR, ::FONTENUMPROC, LPARAM >( pFunc, hdc, lpszFamily, lpEnumFontFamProc, lParam );
	}

	//--------------------------------------------------------------------------------
	int CGDI32::EnumFontFamiliesEx( HDC hdc, ::LPLOGFONT lpLogfont, ::FONTENUMPROC lpEnumFontFamExProc, LPARAM lParam, DWORD dwFlags )
	{
		_WINQ_FCONTEXT( "CGDI32::EnumFontFamiliesEx" );
		_WINQ_USESAPI( EnumFontFamiliesEx );
		return Call< int, HDC, ::LPLOGFONT, ::FONTENUMPROC, LPARAM, DWORD >( pFunc, hdc, lpLogfont, lpEnumFontFamExProc, lParam, dwFlags );
	}

	//--------------------------------------------------------------------------------
	int CGDI32::EnumFonts( HDC hdc, LPCTSTR lpFaceName, ::FONTENUMPROC lpFontFunc, LPARAM lParam )
	{
		_WINQ_FCONTEXT( "CGDI32::EnumFonts" );
		_WINQ_USESAPI( EnumFonts );
		return Call< int, HDC, LPCTSTR, ::FONTENUMPROC, LPARAM >( pFunc, hdc, lpFaceName, lpFontFunc, lParam );
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::ExtTextOut( HDC hdc, int X, int Y, UINT fuOptions, CONST ::RECT* lprc, LPCTSTR lpString, UINT cbCount, CONST INT* lpDx )
	{
		_WINQ_FCONTEXT( "CGDI32::ExtTextOut" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( ExtTextOut );
		bResult = Call< BOOL, HDC, int, int, UINT, CONST ::RECT*, LPCTSTR, UINT, CONST INT* >( pFunc, hdc, X, Y, fuOptions, lprc, lpString, cbCount, lpDx );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::GetAspectRatioFilterEx( HDC hdc, ::LPSIZE lpAspectRatio )
	{
		_WINQ_FCONTEXT( "CGDI32::GetAspectRatioFilterEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetAspectRatioFilterEx );
		bResult = Call< BOOL, HDC, ::LPSIZE >( pFunc, hdc, lpAspectRatio );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::GetCharABCWidths( HDC hdc, UINT uFirstChar, UINT uLastChar, LPABC lpabc )
	{
		_WINQ_FCONTEXT( "CGDI32::GetCharABCWidths" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetCharABCWidths );
		bResult = Call< BOOL, HDC, UINT, UINT, LPABC >( pFunc, hdc, uFirstChar, uLastChar, lpabc );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::GetCharABCWidthsFloat( HDC hdc, UINT iFirstChar, UINT iLastChar, ::LPABCFLOAT lpABCF )
	{
		_WINQ_FCONTEXT( "CGDI32::GetCharABCWidthsFloat" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetCharABCWidthsFloat );
		bResult = Call< BOOL, HDC, UINT, UINT, ::LPABCFLOAT >( pFunc, hdc, iFirstChar, iLastChar, lpABCF );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::GetCharABCWidthsI( HDC hdc, UINT giFirst, UINT cgi, LPWORD pgi, LPABC lpabc )
	{
		_WINQ_FCONTEXT( "CGDI32::GetCharABCWidthsI" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetCharABcWidthsI );
		bResult = Call< BOOL, HDC, UINT, UINT, LPWORD, LPABC >( pFunc, hdc, giFirst, cgi, pgi, lpabc );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CGDI32::GetCharacterPlacement( HDC hdc, LPCTSTR lpString, int nCount, int nMaxExtent, ::LPGCP_RESULTS lpResults, DWORD dwFlags )
	{
		_WINQ_FCONTEXT( "CGDI32::GetCharacterPlacement" );
		CCheckReturn< DWORD, CCheckNonZero< DWORD > >::TType dwResult;
		_WINQ_USESAPI( GetCharacterPlacement );
		dwResult = Call< DWORD, HDC, LPCTSTR, int, int, ::LPGCP_RESULTS, DWORD >( pFunc, hdc, lpString, nCount, nMaxExtent, lpResults, dwFlags );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::GetCharWidth( HDC hdc, UINT iFirstChar, UINT iLastChar, LPINT lpBuffer )
	{
		_WINQ_FCONTEXT( "CGDI32::GetCharWidth" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetCharWidth );
		bResult = Call< BOOL, HDC, UINT, UINT, LPINT >( pFunc, hdc, iFirstChar, iLastChar, lpBuffer );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::GetCharWidth32( HDC hdc, UINT iFirstChar, UINT iLastChar, LPINT lpBuffer )
	{
		_WINQ_FCONTEXT( "CGDI32::GetCharWidth32" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetCharWidth32 );
		bResult = Call< BOOL, HDC, UINT, UINT, LPINT >( pFunc, hdc, iFirstChar, iLastChar, lpBuffer );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::GetCharWidthFloat( HDC hdc, UINT iFirstChar, UINT iLastChar, PFLOAT pxBuffer )
	{
		_WINQ_FCONTEXT( "CGDI32::GetCharWidthFloat" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetCharWidthFloat );
		bResult = Call< BOOL, HDC, UINT, UINT, PFLOAT >( pFunc, hdc, iFirstChar, iLastChar, pxBuffer );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::GetCharWidthI( HDC hdc, UINT giFirst, UINT cgi, LPWORD pgi, LPINT lpBuffer )
	{
		_WINQ_FCONTEXT( "CGDI32::GetCharWidthI" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetCharWidthI );
		bResult = Call< BOOL, HDC, UINT, UINT, LPWORD, LPINT >( pFunc, hdc, giFirst, cgi, pgi, lpBuffer );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CGDI32::GetFontData( HDC hdc, DWORD dwTable, DWORD dwOffset, LPVOID lpvBuffer, DWORD cbData )
	{
		_WINQ_FCONTEXT( "CGDI32::GetFontData" );
		CCheckReturn< DWORD, CTCheckFailureValue< DWORD, GDI_ERROR > >::TType dwResult;
		_WINQ_USESAPI( GetFontData );
		dwResult = Call< DWORD, HDC, DWORD, DWORD, LPVOID, DWORD >( pFunc, hdc, dwTable, dwOffset, lpvBuffer, cbData );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CGDI32::GetFontLanguageInfo( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::GetFontLanguageInfo" );
		CCheckReturn< DWORD, CTCheckFailureValue< DWORD, GCP_ERROR > >::TType dwResult;
		_WINQ_USESAPI( GetFontLanguageInfo );
		dwResult = Call< DWORD, HDC >( pFunc, hdc );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CGDI32::GetFontUnicodeRanges( HDC hdc, ::LPGLYPHSET lpgs )
	{
		_WINQ_FCONTEXT( "CGDI32::GetFontUnicodeRanges" );
		CCheckReturn< DWORD, CCheckNonZero< DWORD > >::TType dwResult;
		_WINQ_USESAPI( GetFontUnicodeRanges );
		dwResult = Call< DWORD, HDC, ::LPGLYPHSET >( pFunc, hdc, lpgs );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CGDI32::GetGlyphIndices( HDC hdc, LPCTSTR lpstr, int c, LPWORD pgi, DWORD fl )
	{
		_WINQ_FCONTEXT( "CGDI32::GetGlyphIndices" );
		CCheckReturn< DWORD, CTCheckFailureValue< DWORD, GDI_ERROR > >::TType dwResult;
		_WINQ_USESAPI( GetGlyphIndices );
		dwResult = Call< DWORD, HDC, LPCTSTR, int, LPWORD, DWORD >( pFunc, hdc, lpstr, c, pgi, fl );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CGDI32::GetFontResourceInfo( LPCTSTR szFontName, DWORD dwBufSize, LPTSTR szBuffer, DWORD dwInfo)
	{
		_WINQ_FCONTEXT( "CGDI32::GetFontResourceInfo" );
		DWORD dwResult = 0;
		_WINQ_USESAPI( GetFontResourceInfo );
		dwResult = Call< DWORD, LPCTSTR, DWORD, LPTSTR, DWORD >( pFunc, szFontName, dwBufSize, szBuffer, dwInfo );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CGDI32::GetGlyphOutline( HDC hdc, UINT uChar, UINT uFormat, ::LPGLYPHMETRICS lpgm, DWORD cbBuffer, LPVOID lpvBuffer, CONST ::MAT2* lpmat2 )
	{
		_WINQ_FCONTEXT( "CGDI32::GetGlyphOutline" );
		CCheckReturn< DWORD, CTCheckFailureValue< DWORD, GDI_ERROR > >::TType dwResult;
		_WINQ_USESAPI( GetGlyphOutline );
		dwResult = Call< DWORD, HDC, UINT, UINT, ::LPGLYPHMETRICS, DWORD, LPVOID, CONST ::MAT2* >( pFunc, hdc, uChar, uFormat, lpgm, cbBuffer, lpvBuffer, lpmat2 );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CGDI32::GetKerningPairs( HDC hdc, DWORD nNumPairs, ::LPKERNINGPAIR lpkrnpair )
	{
		_WINQ_FCONTEXT( "CGDI32::GetKerningPairs" );
		CCheckReturn< DWORD, CCheckNonZero< DWORD > >::TType dwResult;
		_WINQ_USESAPI( GetKerningPairs );
		dwResult = Call< DWORD, HDC, DWORD, ::LPKERNINGPAIR >( pFunc, hdc, nNumPairs, lpkrnpair );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	UINT CGDI32::GetOutlineTextMetrics( HDC hdc, UINT cbData, ::LPOUTLINETEXTMETRIC lpOTM )
	{
		_WINQ_FCONTEXT( "CGDI32::GetOutlineTextMetrics" );
		CCheckReturn< UINT, CCheckNonZero< UINT > >::TType uiResult;
		_WINQ_USESAPI( GetOutlineTextMetrics );
		uiResult = Call< UINT, HDC, UINT, ::LPOUTLINETEXTMETRIC >( pFunc, hdc, cbData, lpOTM );
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::GetRasterizerCaps( ::LPRASTERIZER_STATUS lprs, UINT cb )
	{
		_WINQ_FCONTEXT( "CGDI32::GetRasterizerCaps" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetRasterizerCaps );
		bResult = Call< BOOL, ::LPRASTERIZER_STATUS, UINT >( pFunc, lprs, cb );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	UINT CGDI32::GetTextAlign( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::GetTextAlign" );
		CCheckReturn< UINT, CTCheckFailureValue< UINT, GDI_ERROR > >::TType uiResult;
		_WINQ_USESAPI( GetTextAlign );
		uiResult = Call< UINT, HDC >( pFunc, hdc );
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::GetTextCharacterExtra( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::GetTextCharacterExtra" );
		CCheckReturn< int, CTCheckFailureValue< int, 0x8000000 > >::TType iResult;
		_WINQ_USESAPI( GetTextCharacterExtra );
		iResult = Call< int, HDC >( pFunc, hdc );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::GetTextCharset( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::GetTextCharset" );
		_WINQ_USESAPI( GetTextCharset );
		return Call< int, HDC >( pFunc, hdc );
	}

	//--------------------------------------------------------------------------------
	int CGDI32::GetTextCharsetInfo( HDC hdc, ::LPFONTSIGNATURE lpSig, DWORD dwFlags )
	{
		_WINQ_FCONTEXT( "CGDI32::GetTextCharsetInfo" );
		_WINQ_USESAPI( GetTextCharsetInfo );
		return Call< int, HDC, ::LPFONTSIGNATURE, DWORD >( pFunc, hdc, lpSig, dwFlags );
	}

	//--------------------------------------------------------------------------------
	COLORREF CGDI32::GetTextColor( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::GetTextColor" );
		CCheckReturn< COLORREF, CTCheckFailureValue< COLORREF, CLR_INVALID > >::TType Result;
		_WINQ_USESAPI( GetTextColor );
		Result = Call< COLORREF, HDC >( pFunc, hdc );
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::GetTextExtentExPoint( HDC hdc, LPCTSTR lpszStr, int cchString, int nMaxExtent, LPINT lpnFit, LPINT alpDx, ::LPSIZE lpSize )
	{
		_WINQ_FCONTEXT( "CGDI32::GetTextExtentExPoint" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetTextExtentExPoint );
		bResult = Call< BOOL, HDC, LPCTSTR, int, int, LPINT, LPINT, ::LPSIZE >( pFunc, hdc, lpszStr, cchString, nMaxExtent, lpnFit, alpDx, lpSize );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::GetTextExtentExPointI( HDC hdc, LPWORD pgiIn, int cgi, int nMaxExtent, LPINT lpnFit, LPINT alpDx, ::LPSIZE lpSize )
	{
		_WINQ_FCONTEXT( "CGDI32::GetTextExtentExPointI" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetTextExtentExPointI );
		bResult = Call< BOOL, HDC, LPWORD, int, int, LPINT, LPINT, ::LPSIZE >( pFunc, hdc, pgiIn, cgi, nMaxExtent, lpnFit, alpDx, lpSize );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::GetTextExtentPoint( HDC hdc, LPCTSTR lpString, int cbString, ::LPSIZE lpSize )
	{
		_WINQ_FCONTEXT( "CGDI32::GetTextExtentPoint" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetTextExtentPoint );
		bResult = Call< BOOL, HDC, LPCTSTR, int, ::LPSIZE >( pFunc, hdc, lpString, cbString, lpSize );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::GetTextExtentPoint32( HDC hdc, LPCTSTR lpString, int c, ::LPSIZE lpSize )
	{
		_WINQ_FCONTEXT( "CGDI32::GetTextExtentPoint32" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetTextExtentPoint32 );
		bResult = Call< BOOL, HDC, LPCTSTR, int, ::LPSIZE >( pFunc, hdc, lpString, c, lpSize );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::GetTextExtentPointI( HDC hdc, LPWORD pgiIn, int cgi, ::LPSIZE lpSize )
	{
		_WINQ_FCONTEXT( "CGDI32::GetTextExtentPointI" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetTextExtentPointI );
		bResult = Call< BOOL, HDC, LPWORD, int, ::LPSIZE >( pFunc, hdc, pgiIn, cgi, lpSize );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::GetTextFace( HDC hdc, int nCount, LPTSTR lpFaceName )
	{
		_WINQ_FCONTEXT( "CGDI32::GetTextFace" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		_WINQ_USESAPI( GetTextFace );
		iResult = Call< int, HDC, int, LPTSTR >( pFunc, hdc, nCount, lpFaceName );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::GetTextMetrics( HDC hdc, ::LPTEXTMETRIC lptm )
	{
		_WINQ_FCONTEXT( "CGDI32::GetTextMetrics" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetTextMetrics );
		bResult = Call< BOOL, HDC, ::LPTEXTMETRIC >( pFunc, hdc, lptm );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::PolyTextOut( HDC hdc, CONST ::POLYTEXT* pptxt, int cStrings )
	{
		_WINQ_FCONTEXT( "CGDI32::PolyTextOut" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( PolyTextOut );
		bResult = Call< BOOL, HDC, CONST ::POLYTEXT*, int >( pFunc, hdc, pptxt, cStrings );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::RemoveFontMemResourceEx( HANDLE fh )
	{
		_WINQ_FCONTEXT( "CGDI32::RemoveFontMemResourceEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( RemoveFontMemResourceEx );
		bResult = Call< BOOL, HANDLE >( pFunc, fh );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::RemoveFontResource( LPCTSTR lpFileName )
	{
		_WINQ_FCONTEXT( "CGDI32::RemoveFontResource" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( RemoveFontResource );
		bResult = Call< BOOL, LPCTSTR >( pFunc, lpFileName );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::RemoveFontResourceEx( LPCTSTR lpFileName, DWORD fl, PVOID pdv )
	{
		_WINQ_FCONTEXT( "CGDI32::RemoveFontResourceEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( RemoveFontResourceEx );
		bResult = Call< BOOL, LPCTSTR, DWORD, PVOID >( pFunc, lpFileName, fl, pdv );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CGDI32::SetMapperFlags( HDC hdc, DWORD dwFlag )
	{
		_WINQ_FCONTEXT( "CGDI32::SetMapperFlags" );
		CCheckReturn< DWORD, CTCheckFailureValue< DWORD, GDI_ERROR > >::TType dwResult;
		_WINQ_USESAPI( SetMapperFlags );
		dwResult = Call< DWORD, HDC, DWORD >( pFunc, hdc, dwFlag );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	UINT CGDI32::SetTextAlign( HDC hdc, UINT fMode )
	{
		_WINQ_FCONTEXT( "CGDI32::SetTextAlign" );
		CCheckReturn< UINT, CTCheckFailureValue< UINT, GDI_ERROR > >::TType uiResult;
		_WINQ_USESAPI( SetTextAlign );
		uiResult = Call< UINT, HDC, UINT >( pFunc, hdc, fMode );
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::SetTextCharacterExtra( HDC hdc, int nCharExtra )
	{
		_WINQ_FCONTEXT( "CGDI32::SetTextCharacterExtra" );
		CCheckReturn< int, CTCheckFailureValue< int, 0x80000000 > >::TType iResult;
		_WINQ_USESAPI( SetTextCharacterExtra );
		iResult = Call< int, HDC, int >( pFunc, hdc, nCharExtra );
		__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "SetTextCharacterExtra" ), 0 ));
		return iResult;
	}

	//--------------------------------------------------------------------------------
	COLORREF CGDI32::SetTextColor( HDC hdc, COLORREF crColor )
	{
		_WINQ_FCONTEXT( "CGDI32::SetTextColor" );
		CCheckReturn< COLORREF, CTCheckFailureValue< COLORREF, CLR_INVALID > >::TType Result;
		_WINQ_USESAPI( SetTextColor );
		Result = Call< COLORREF, HDC, COLORREF >( pFunc, hdc, crColor );
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::SetTextJustification( HDC hdc, int nBreakExtra, int nBreakCount )
	{
		_WINQ_FCONTEXT( "CGDI32::SetTextJustification" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( SetTextJustification );
		bResult = Call< BOOL, HDC, int, int >( pFunc, hdc, nBreakExtra, nBreakCount );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::TextOut( HDC hdc, int nXStart, int nYStart, LPCTSTR lpString, int cbString )
	{
		_WINQ_FCONTEXT( "CGDI32::TextOut" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( TextOut );
		bResult = Call< BOOL, HDC, int, int, LPCTSTR, int >( pFunc, hdc, nXStart, nYStart, lpString, cbString );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::TranslateCharsetInfo( DWORD* pSrc, LPCHARSETINFO lpCs, DWORD dwFlags )
	{
		_WINQ_FCONTEXT( "CGDI32::TranslateCharsetInfo" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( TranslateCharsetInfo );
		bResult = Call< BOOL, DWORD*, LPCHARSETINFO, DWORD >( pFunc, pSrc, lpCs, dwFlags );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	//MetaFile and EnhMetaFile functions
	HENHMETAFILE CGDI32::CloseEnhMetaFile( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::CloseEnhMetaFile" );
		CCheckReturn< HENHMETAFILE, CCheckNonZero< HENHMETAFILE > >::TType Result;
		_WINQ_USESAPI( CloseEnhMetaFile );
		Result = Call< HENHMETAFILE, HDC >( pFunc, hdc );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HMETAFILE CGDI32::CloseMetaFile( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::CloseMetaFile" );
		CCheckReturn< HMETAFILE, CCheckNonZero< HMETAFILE > >::TType Result;
		_WINQ_USESAPI( CloseMetaFile );
		Result = Call< HMETAFILE, HDC >( pFunc, hdc );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HENHMETAFILE CGDI32::CopyEnhMetaFile( HENHMETAFILE hemfSrc, LPCTSTR lpszFile )
	{
		_WINQ_FCONTEXT( "CGDI32::CopyEnhMetaFile" );
		CCheckReturn< HENHMETAFILE, CCheckNonZero< HENHMETAFILE > >::TType Result;
		_WINQ_USESAPI( CopyEnhMetaFile );
		Result = Call< HENHMETAFILE, HENHMETAFILE, LPCTSTR >( pFunc, hemfSrc, lpszFile );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HMETAFILE CGDI32::CopyMetaFile( HMETAFILE hmfSrc, LPCTSTR lpszFile )
	{
		_WINQ_FCONTEXT( "CGDI32::CopyMetaFile" );
		CCheckReturn< HMETAFILE, CCheckNonZero< HMETAFILE > >::TType Result;
		_WINQ_USESAPI( CopyMetaFile );
		Result = Call< HMETAFILE, HMETAFILE, LPCTSTR >( pFunc, hmfSrc, lpszFile );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HDC CGDI32::CreateEnhMetaFile( HDC hdcRef, LPCTSTR lpFilename, CONST ::RECT* lpRect, LPCTSTR lpDescription )
	{
		_WINQ_FCONTEXT( "CGDI32::CreateEnhMetaFile" );
		CCheckReturn< HDC, CCheckNonZero< HDC > >::TType Result;
		_WINQ_USESAPI( CreateEnhMetaFile );
		Result = Call< HDC, HDC, LPCTSTR, CONST ::RECT*, LPCTSTR >( pFunc, hdcRef, lpFilename, lpRect, lpDescription );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HDC CGDI32::CreateMetaFile( LPCTSTR lpszFile )
	{
		_WINQ_FCONTEXT( "CGDI32::CreateMetaFile" );
		CCheckReturn< HDC, CCheckNonZero< HDC > >::TType Result;
		_WINQ_USESAPI( CreateMetaFile );
		Result = Call< HDC, LPCTSTR >( pFunc, lpszFile );
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::DeleteEnhMetaFile( HENHMETAFILE hemf )
	{
		_WINQ_FCONTEXT( "CGDI32::DeleteEnhMetaFile" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( DeleteEnhMetaFile );
		bResult = Call< BOOL, HENHMETAFILE >( pFunc, hemf );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::DeleteMetaFile( HMETAFILE hmf )
	{
		_WINQ_FCONTEXT( "CGDI32::DeleteMetaFile" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( DeleteMetaFile );
		bResult = Call< BOOL, HMETAFILE >( pFunc, hmf );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::EnumEnhMetaFile( HDC hdc, HENHMETAFILE hemf, ::ENHMFENUMPROC lpEnhMetaFunc, LPVOID lpData, CONST ::RECT* lpRect )
	{
		_WINQ_FCONTEXT( "CGDI32::EnumEnhMetaFile" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( EnumEnhMetaFile );
		bResult = Call< BOOL, HDC, HENHMETAFILE, ::ENHMFENUMPROC, LPVOID, CONST ::RECT* >( pFunc, hdc, hemf, lpEnhMetaFunc, lpData, lpRect );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::EnumMetaFile( HDC hdc, HMETAFILE hmf, ::MFENUMPROC lpMetaFunc, LPARAM lParam )
	{
		_WINQ_FCONTEXT( "CGDI32::EnumMetaFile" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( EnumMetaFile );
		bResult = Call< BOOL, HDC, HMETAFILE, ::MFENUMPROC, LPARAM >( pFunc, hdc, hmf, lpMetaFunc, lParam );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::GdiComment( HDC hdc, UINT cbSize, CONST BYTE* lpData )
	{
		_WINQ_FCONTEXT( "CGDI32::GdiComment" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GdiComment );
		bResult = Call< BOOL, HDC, UINT, CONST BYTE* >( pFunc, hdc, cbSize, lpData );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	HENHMETAFILE CGDI32::GetEnhMetaFile( LPCTSTR lpszMetaFile )
	{
		_WINQ_FCONTEXT( "CGDI32::GetEnhMetaFile" );
		CCheckReturn< HENHMETAFILE, CCheckNonZero< HENHMETAFILE > >::TType Result;
		_WINQ_USESAPI( GetEnhMetaFile );
		Result = Call< HENHMETAFILE, LPCTSTR >( pFunc, lpszMetaFile );
		return Result;
	}

	//--------------------------------------------------------------------------------
	UINT CGDI32::GetEnhMetaFileBits( HENHMETAFILE hemf, UINT cbBuffer, LPBYTE lpbBuffer )
	{
		_WINQ_FCONTEXT( "CGDI32::GetEnhMetaFileBits" );
		CCheckReturn< UINT, CCheckNonZero< UINT > >::TType uiResult;
		_WINQ_USESAPI( GetEnhMetaFileBits );
		uiResult = Call< UINT, HENHMETAFILE, UINT, LPBYTE >( pFunc, hemf, cbBuffer, lpbBuffer );
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	UINT CGDI32::GetEnhMetaFileDescription( HENHMETAFILE hemf, UINT cchBuffer, LPTSTR lpszDescription )
	{
		_WINQ_FCONTEXT( "CGDI32::GetEnhMetaFileDescription" );
		CCheckReturn< UINT, CTCheckFailureValue< UINT, GDI_ERROR > >::TType uiResult;
		_WINQ_USESAPI( GetEnhMetaFileDescription );
		uiResult = Call< UINT, HENHMETAFILE, UINT, LPTSTR >( pFunc, hemf, cchBuffer, lpszDescription );
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	UINT CGDI32::GetEnhMetaFileHeader( HENHMETAFILE hemf, UINT cbBuffer, ::LPENHMETAHEADER lpemh )
	{
		_WINQ_FCONTEXT( "CGDI32::GetEnhMetaFileHeader" );
		CCheckReturn< UINT, CCheckNonZero< UINT > >::TType uiResult;
		_WINQ_USESAPI( GetEnhMetaFileHeader );
		uiResult = Call< UINT, HENHMETAFILE, UINT, ::LPENHMETAHEADER >( pFunc, hemf, cbBuffer, lpemh );
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	UINT CGDI32::GetEnhMetaFilePaletteEntries( HENHMETAFILE hemf, UINT cEntries, ::LPPALETTEENTRY lppe )
	{
		_WINQ_FCONTEXT( "CGDI32::GetEnhMetaFilePaletteEntries" );
		CCheckReturn< UINT, CTCheckFailureValue< UINT, GDI_ERROR > >::TType uiResult;
		_WINQ_USESAPI( GetEnhMetaFilePaletteEntries );
		uiResult = Call< UINT, HENHMETAFILE, UINT, ::LPPALETTEENTRY >( pFunc, hemf, cEntries, lppe );
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	UINT CGDI32::GetMetaFileBitsEx( HMETAFILE hmf, UINT nSize, LPVOID lpvData )
	{
		_WINQ_FCONTEXT( "CGDI32::GetMetaFileBitsEx" );
		CCheckReturn< UINT, CCheckNonZero< UINT > >::TType uiResult;
		_WINQ_USESAPI( GetMetaFileBitsEx );
		uiResult = Call< UINT, HMETAFILE, UINT, LPVOID >( pFunc, hmf, nSize, lpvData );
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	UINT CGDI32::GetWinMetaFileBits( HENHMETAFILE hemf, UINT cbBuffer, LPBYTE lpbBuffer, INT fnMapMode, HDC hdcRef )
	{
		_WINQ_FCONTEXT( "CGDI32::GetWinMetaFileBits" );
		CCheckReturn< UINT, CCheckNonZero< UINT > >::TType uiResult;
		_WINQ_USESAPI( GetWinMetaFileBits );
		uiResult = Call< UINT, HENHMETAFILE, UINT, LPBYTE, INT, HDC >( pFunc, hemf, cbBuffer, lpbBuffer, fnMapMode, hdcRef );
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::PlayEnhMetaFile( HDC hdc, HENHMETAFILE hemf, CONST ::RECT* lpRect )
	{
		_WINQ_FCONTEXT( "CGDI32::PlayEnhMetaFile" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( PlayEnhMetaFile );
		bResult = Call< BOOL, HDC, HENHMETAFILE, CONST ::RECT* >( pFunc, hdc, hemf, lpRect );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::PlayEnhMetaFileRecord( HDC hdc, LPHANDLETABLE lpHandletable, CONST ENHMETARECORD* lpEnhMetaRecord, UINT nHandles )
	{
		_WINQ_FCONTEXT( "CGDI32::PlayEnhMetaFileRecord" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( PlayEnhMetaFileRecord );
		bResult = Call< BOOL, HDC, LPHANDLETABLE, CONST ENHMETARECORD*, UINT >( pFunc, hdc, lpHandletable, lpEnhMetaRecord, nHandles );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::PlayMetaFile( HDC hdc, HMETAFILE hmf )
	{
		_WINQ_FCONTEXT( "CGDI32::PlayMetaFile" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( PlayMetaFile );
		bResult = Call< BOOL, HDC, HMETAFILE >( pFunc, hdc, hmf );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::PlayMetaFileRecord( HDC hdc, LPHANDLETABLE lpHandletable, LPMETARECORD lpMetaRecord, UINT nHandles )
	{
		_WINQ_FCONTEXT( "CGDI32::PlayMetaFileRecord" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( PlayMetaFileRecord );
		bResult = Call< BOOL, HDC, LPHANDLETABLE, LPMETARECORD, UINT >( pFunc, hdc, lpHandletable, lpMetaRecord, nHandles );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	HENHMETAFILE CGDI32::SetEnhMetaFileBits( UINT cbBuffer, CONST BYTE* lpData )
	{
		_WINQ_FCONTEXT( "CGDI32::SetEnhMetaFileBits" );
		CCheckReturn< HENHMETAFILE, CCheckNonZero< HENHMETAFILE > >::TType Result;
		_WINQ_USESAPI( SetEnhMetaFileBits );
		Result = Call< HENHMETAFILE, UINT, CONST BYTE* >( pFunc, cbBuffer, lpData );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HMETAFILE CGDI32::SetMetaFileBitsEx( UINT nSize, CONST BYTE* lpData )
	{
		_WINQ_FCONTEXT( "CGDI32::SetMetaFileBitsEx" );
		CCheckReturn< HMETAFILE, CCheckNonZero< HMETAFILE > >::TType Result;
		_WINQ_USESAPI( SetMetaFileBitsEx );
		Result = Call< HMETAFILE, UINT, CONST BYTE* >( pFunc, nSize, lpData );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HENHMETAFILE CGDI32::SetWinMetaFileBits( UINT cbBuffer, CONST BYTE* lpbBuffer, HDC hdcRef, CONST ::METAFILEPICT* lpmfp )
	{
		_WINQ_FCONTEXT( "CGDI32::SetWinMetaFileBits" );
		CCheckReturn< HENHMETAFILE, CCheckNonZero< HENHMETAFILE > >::TType Result;
		_WINQ_USESAPI( SetWinMetaFileBits );
		Result = Call< HENHMETAFILE, UINT, CONST BYTE*, HDC, CONST ::METAFILEPICT* >( pFunc, cbBuffer, lpbBuffer, hdcRef, lpmfp );
		return Result;
	}

	//--------------------------------------------------------------------------------
	//OpenGl extension functions
	int CGDI32::ChoosePixelFormat( HDC hdc, CONST ::PIXELFORMATDESCRIPTOR* ppfd )
	{
		_WINQ_FCONTEXT( "CGDI32::ChoosePixelFormat" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		_WINQ_USESAPI( ChoosePixelFormat );
		iResult = Call< int, HDC, CONST ::PIXELFORMATDESCRIPTOR* >( pFunc, hdc, ppfd );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::DescribePixelFormat( HDC hdc, int iPixelFormat, UINT nBytes, ::LPPIXELFORMATDESCRIPTOR ppfd )
	{
		_WINQ_FCONTEXT( "CGDI32::DescribePixelFormat" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		_WINQ_USESAPI( DescribePixelFormat );
		iResult = Call< int, HDC, int, UINT, ::LPPIXELFORMATDESCRIPTOR >( pFunc, hdc, iPixelFormat, nBytes, ppfd );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	UINT CGDI32::GetEnhMetaFilePixelFormat( HENHMETAFILE hemf, DWORD cbBuffer, CONST ::PIXELFORMATDESCRIPTOR* ppfd )
	{
		_WINQ_FCONTEXT( "CGDI32::GetEnhMetaFilePixelFormat" );
		CCheckReturn< UINT, CTCheckFailureValue< UINT, GDI_ERROR > >::TType uiResult;
		_WINQ_USESAPI( GetEnhMetaFilePixelFormat );
		uiResult = Call< UINT, HENHMETAFILE, DWORD, CONST ::PIXELFORMATDESCRIPTOR* >( pFunc, hemf, cbBuffer, ppfd );
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::GetPixelFormat( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::GetPixelFormat" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		_WINQ_USESAPI( GetPixelFormat );
		iResult = Call< int, HDC >( pFunc, hdc );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::SetPixelFormat( HDC hdc, int iPixelFormat, CONST ::PIXELFORMATDESCRIPTOR* ppfd )
	{
		_WINQ_FCONTEXT( "CGDI32::SetPixelFormat" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( SetPixelFormat );
		bResult = Call< BOOL, HDC, int, CONST ::PIXELFORMATDESCRIPTOR* >( pFunc, hdc, iPixelFormat, ppfd );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::SwapBuffers( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::SwapBuffers" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( SwapBuffers );
		bResult = Call< BOOL, HDC >( pFunc, hdc );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	//Painting functions
	BOOL CGDI32::GdiFlush(VOID)
	{
		_WINQ_FCONTEXT( "CGDI32::GdiFlush" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GdiFlush );
		bResult = Call< BOOL >( pFunc );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CGDI32::GdiGetBatchLimit(VOID)
	{
		_WINQ_FCONTEXT( "CGDI32::GdiGetBatchLimit" );
		CCheckReturn< DWORD, CCheckNonZero< DWORD > >::TType dwResult;
		_WINQ_USESAPI( GdiGetBatchLimit );
		dwResult = Call< DWORD >( pFunc );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CGDI32::GdiSetBatchLimit( DWORD dwLimit )
	{
		_WINQ_FCONTEXT( "CGDI32::GdiSetBatchLimit" );
		CCheckReturn< DWORD, CCheckNonZero< DWORD > >::TType dwResult;
		_WINQ_USESAPI( GdiSetBatchLimit );
		dwResult = Call< DWORD, DWORD >( pFunc, dwLimit );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	COLORREF CGDI32::GetBkColor( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::GetBkColor" );
		CCheckReturn< COLORREF, CTCheckFailureValue< COLORREF, CLR_INVALID > >::TType Result;
		_WINQ_USESAPI( GetBkColor );
		Result = Call< COLORREF, HDC >( pFunc, hdc );
		return Result;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::GetBkMode( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::GetBkMode" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		_WINQ_USESAPI( GetBkMode );
		iResult = Call< int, HDC >( pFunc, hdc );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	UINT CGDI32::GetBoundsRect( HDC hdc, ::LPRECT lprcBounds, UINT flags )
	{
		_WINQ_FCONTEXT( "CGDI32::GetBoundsRect" );
		CCheckReturn< UINT, CCheckNonZero< UINT > >::TType uiResult;
		_WINQ_USESAPI( GetBoundsRect );
		uiResult = Call< UINT, HDC, ::LPRECT, UINT >( pFunc, hdc, lprcBounds, flags );
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::GetROP2( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::GetROP2" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		_WINQ_USESAPI( GetROP2 );
		iResult = Call< int, HDC >( pFunc, hdc );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	COLORREF CGDI32::SetBkColor( HDC hdc, COLORREF crColor )
	{
		_WINQ_FCONTEXT( "CGDI32::SetBkColor" );
		CCheckReturn< COLORREF, CTCheckFailureValue< COLORREF, CLR_INVALID > >::TType Result;
		_WINQ_USESAPI( SetBkColor );
		Result = Call< COLORREF, HDC, COLORREF >( pFunc, hdc, crColor );
		return Result;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::SetBkMode( HDC hdc, int iBkMode )
	{
		_WINQ_FCONTEXT( "CGDI32::SetBkMode" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		_WINQ_USESAPI( SetBkMode );
		iResult = Call< int, HDC, int >( pFunc, hdc, iBkMode );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	UINT CGDI32::SetBoundsRect( HDC hdc, CONST RECT* lprcBounds, UINT flags )
	{
		_WINQ_FCONTEXT( "CGDI32::SetBoundsRect" );
		CCheckReturn< UINT, CCheckNonZero< UINT > >::TType uiResult;
		_WINQ_USESAPI( SetBoundsRect );
		uiResult = Call< UINT, HDC, CONST RECT*, UINT >( pFunc, hdc, lprcBounds, flags );
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::SetROP2( HDC hdc, int fnDrawMode )
	{
		_WINQ_FCONTEXT( "CGDI32::SetROP2" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		_WINQ_USESAPI( SetROP2 );
		iResult = Call< int, HDC, int >( pFunc, hdc, fnDrawMode );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	//Path functions
	BOOL CGDI32::AbortPath( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::AbortPath" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( AbortPath );
		bResult = Call< BOOL, HDC >( pFunc, hdc );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::BeginPath( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::BeginPath" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( BeginPath );
		bResult = Call< BOOL, HDC >( pFunc, hdc );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::CloseFigure( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::CloseFigure" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( CloseFigure );
		bResult = Call< BOOL, HDC >( pFunc, hdc );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::EndPath( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::EndPath" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( EndPath );
		bResult = Call< BOOL, HDC >( pFunc, hdc );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::FillPath( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::FillPath" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( FillPath );
		bResult = Call< BOOL, HDC >( pFunc, hdc );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::FlattenPath( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::FlattenPath" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( FlattenPath );
		bResult = Call< BOOL, HDC >( pFunc, hdc );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::GetMiterLimit( HDC hdc, PFLOAT peLimit )
	{
		_WINQ_FCONTEXT( "CGDI32::GetMiterLimit" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetMiterLimit );
		bResult = Call< BOOL, HDC, PFLOAT >( pFunc, hdc, peLimit );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::GetPath( HDC hdc, ::LPPOINT lpPoints, LPBYTE lpTypes, int nSize )
	{
		_WINQ_FCONTEXT( "CGDI32::GetPath" );
		_WINQ_USESAPI( GetPath );
		return Call< int, HDC, ::LPPOINT, LPBYTE, int >( pFunc, hdc, lpPoints, lpTypes, nSize );
	}

	//--------------------------------------------------------------------------------
	HRGN CGDI32::PathToRegion( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::PathToRegion" );
		CCheckReturn< HRGN, CCheckNonZero< HRGN > >::TType Result;
		_WINQ_USESAPI( PathToRegion );
		Result = Call< HRGN, HDC >( pFunc, hdc );
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::SetMiterLimit( HDC hdc, FLOAT eNewLimit, PFLOAT peOldLimit )
	{
		_WINQ_FCONTEXT( "CGDI32::SetMiterLimit" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( SetMiterLimit );
		bResult = Call< BOOL, HDC, FLOAT, PFLOAT >( pFunc, hdc, eNewLimit, peOldLimit );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::StrokeAndFillPath( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::StrokeAndFillPath" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( StrokeAndFillPath );
		bResult = Call< BOOL, HDC >( pFunc, hdc );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::StrokePath( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::StrokePath" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( StrokePath );
		bResult = Call< BOOL, HDC >( pFunc, hdc );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::WidenPath( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::WidenPath" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( WidenPath );
		bResult = Call< BOOL, HDC >( pFunc, hdc );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	//Pen functions
	HPEN CGDI32::CreatePen( int fnPenStyle, int nWidth, COLORREF crColor )
	{
		_WINQ_FCONTEXT( "CGDI32::CreatePen" );
		CCheckReturn< HPEN, CCheckNonZero< HPEN > >::TType Result;
		_WINQ_USESAPI( CreatePen );
		Result = Call< HPEN, int, int, COLORREF >( pFunc, fnPenStyle, nWidth, crColor );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HPEN CGDI32::CreatePenIndirect( CONST ::LOGPEN* lplgpn )
	{
		_WINQ_FCONTEXT( "CGDI32::CreatePenIndirect" );
		CCheckReturn< HPEN, CCheckNonZero< HPEN > >::TType Result;
		_WINQ_USESAPI( CreatePenIndirect );
		Result = Call< HPEN, CONST ::LOGPEN* >( pFunc, lplgpn );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HPEN CGDI32::ExtCreatePen( DWORD dwPenStyle, DWORD dwWidth, CONST ::LOGBRUSH* lplb, DWORD dwStyleCount, CONST DWORD* lpStyle )
	{
		_WINQ_FCONTEXT( "CGDI32::ExtCreatePen" );
		CCheckReturn< HPEN, CCheckNonZero< HPEN > >::TType Result;
		_WINQ_USESAPI( ExtCreatePen );
		Result = Call< HPEN, DWORD, DWORD, CONST ::LOGBRUSH*, DWORD, CONST DWORD* >( pFunc, dwPenStyle, dwWidth, lplb, dwStyleCount, lpStyle );
		return Result;
	}

	//--------------------------------------------------------------------------------
	//Printing & Spooling functions
	int CGDI32::AbortDoc( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::AbortDoc" );
		CCheckReturn< int, CTCheckFailureValue< int, SP_ERROR > >::TType iResult;
		_WINQ_USESAPI( AbortDoc );
		iResult = Call< int, HDC >( pFunc, hdc );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::EndDoc( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::EndDoc" );
		CCheckReturn< int, CTCheckNotLess< int, 1 > >::TType iResult;
		_WINQ_USESAPI( EndDoc );
		iResult = Call< int, HDC >( pFunc, hdc );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::EndPage( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::EndPage" );
		CCheckReturn< int, CTCheckNotLess< int, 1 > >::TType iResult;
		_WINQ_USESAPI( EndPage );
		iResult = Call< int, HDC >( pFunc, hdc );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::Escape( HDC hdc, int nEscape, int cbInput, LPCSTR lpvInData, LPVOID lpvOutData )
	{
		_WINQ_FCONTEXT( "CGDI32::Escape" );
		int iResult = 0;
		_WINQ_USESAPI( Escape );
		iResult = Call< int, HDC, int, int, LPCSTR, LPVOID >( pFunc, hdc, nEscape, cbInput, lpvInData, lpvOutData );
		if( iResult <= 0 )
		{
			switch ( iResult )
			{
			case SP_ERROR:
				__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "Escape" ), 0 ));
				break;
			case SP_OUTOFDISK:
				__WINQAPI_CONT_ERROR(( SPOOLER_API_ERROR, _T( "Escape" ), _T( "Not enough disk space is currently available for spooling, and no more space will become available." ), 0 ));
				break;
			case SP_OUTOFMEMORY:
				__WINQAPI_CONT_ERROR(( SPOOLER_API_ERROR, _T( "Escape" ), _T( "Not enough memory is available for spooling." ), 0 ));
				break;
			case SP_USERABORT:
				__WINQAPI_CONT_ERROR(( SPOOLER_API_ERROR, _T( "Escape" ), _T( "The user terminated the job through Print Manager." ), 0 ));
				break;
			default:
				__WINQAPI_CONT_ERROR(( SPOOLER_API_ERROR, _T( "Escape" ), _T( "Unknown Error!" ), 0 ));
				break;
			}
		}
		else if( iResult == 0 )
		{
			__WINQAPI_WARNING(( RESULT_INDICATES_UNSUPPORTED_FEATURE, _T( "Escape" ), 0 ));
		}
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::ExtEscape( HDC hdc, int nEscape, int cbInput, LPCSTR lpszInData, int cbOutput, LPSTR lpszOutData )
	{
		_WINQ_FCONTEXT( "CGDI32::ExtEscape" );
		int iResult = 0;
		_WINQ_USESAPI( ExtEscape );
		iResult = Call< int, HDC, int, int, LPCSTR, int, LPSTR >( pFunc, hdc, nEscape, cbInput, lpszInData, cbOutput, lpszOutData );
		if( iResult <= 0 )
		{
			__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "ExtEscape" ), 0 ));
		}
		else if( iResult == 0 )
		{
			__WINQAPI_WARNING(( RESULT_INDICATES_UNSUPPORTED_FEATURE, _T( "Escape" ), 0 ));
		}
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::SetAbortProc( HDC hdc, ::ABORTPROC lpAbortProc )
	{
		_WINQ_FCONTEXT( "CGDI32::SetAbortProc" );
		CCheckReturn< int, CTCheckFailureValue< int, SP_ERROR > >::TType iResult;
		_WINQ_USESAPI( SetAbortProc );
		iResult = Call< int, HDC, ::ABORTPROC >( pFunc, hdc, lpAbortProc );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::StartDoc( HDC hdc, CONST ::DOCINFO* lpdi )
	{
		_WINQ_FCONTEXT( "CGDI32::StartDoc" );
		CCheckReturn< int, CTCheckNotLess< int, 1 > >::TType iResult;
		_WINQ_USESAPI( StartDoc );
		iResult = Call< int, HDC, CONST ::DOCINFO* >( pFunc, hdc, lpdi );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::StartPage( HDC hDC )
	{
		_WINQ_FCONTEXT( "CGDI32::StartPage" );
		CCheckReturn< int, CTCheckNotLess< int, 1 > >::TType iResult;
		_WINQ_USESAPI( StartPage );
		iResult = Call< int, HDC >( pFunc, hDC );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	//Region functions
	int CGDI32::CombineRgn( HRGN hrgnDest, HRGN hrgnSrc1, HRGN hrgnSrc2, int fnCombineMode )
	{
		_WINQ_FCONTEXT( "CGDI32::CombineRgn" );
		CCheckReturn< int, CTCheckFailureValue< int, ERROR > >::TType iResult;
		_WINQ_USESAPI( CombineRgn );
		iResult = Call< int, HRGN, HRGN, HRGN, int >( pFunc, hrgnDest, hrgnSrc1, hrgnSrc2, fnCombineMode );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	HRGN CGDI32::CreateEllipticRgn( int nLeftRect, int nTopRect, int nRightRect, int nBottomRect )
	{
		_WINQ_FCONTEXT( "CGDI32::CreateEllipticRgn" );
		CCheckReturn< HRGN, CCheckNonZero< HRGN > >::TType Result;
		_WINQ_USESAPI( CreateEllipticRgn );
		Result = Call< HRGN, int, int, int, int >( pFunc, nLeftRect, nTopRect, nRightRect, nBottomRect );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HRGN CGDI32::CreateEllipticRgnIndirect( CONST ::RECT* lprc )
	{
		_WINQ_FCONTEXT( "CGDI32::CreateEllipticRgnIndirect" );
		CCheckReturn< HRGN, CCheckNonZero< HRGN > >::TType Result;
		_WINQ_USESAPI( CreateEllipticRgnIndirect );
		Result = Call< HRGN, CONST ::RECT* >( pFunc, lprc );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HRGN CGDI32::CreatePolygonRgn( CONST ::POINT* lppt, int cPoints, int fnPolyFillMode )
	{
		_WINQ_FCONTEXT( "CGDI32::CreatePolygonRgn" );
		CCheckReturn< HRGN, CCheckNonZero< HRGN > >::TType Result;
		_WINQ_USESAPI( CreatePolygonRgn );
		Result = Call< HRGN, CONST ::POINT*, int, int >( pFunc, lppt, cPoints, fnPolyFillMode );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HRGN CGDI32::CreatePolyPolygonRgn( CONST ::POINT* lppt, CONST INT* lpPolyCounts, int nCount, int fnPolyFillMode )
	{
		_WINQ_FCONTEXT( "CGDI32::CreatePolyPolygonRgn" );
		CCheckReturn< HRGN, CCheckNonZero< HRGN > >::TType Result;
		_WINQ_USESAPI( CreatePolyPolygonRgn );
		Result = Call< HRGN, CONST ::POINT*, CONST INT*, int, int >( pFunc, lppt, lpPolyCounts, nCount, fnPolyFillMode );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HRGN CGDI32::CreateRectRgn( int nLeftRect, int nTopRect, int nRightRect, int nBottomRect )
	{
		_WINQ_FCONTEXT( "CGDI32::CreateRectRgn" );
		CCheckReturn< HRGN, CCheckNonZero< HRGN > >::TType Result;
		_WINQ_USESAPI( CreateRectRgn );
		Result = Call< HRGN, int, int, int, int >( pFunc, nLeftRect, nTopRect, nRightRect, nBottomRect );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HRGN CGDI32::CreateRectRgnIndirect( CONST ::RECT* lprc )
	{
		_WINQ_FCONTEXT( "CGDI32::CreateRectRgnIndirect" );
		CCheckReturn< HRGN, CCheckNonZero< HRGN > >::TType Result;
		_WINQ_USESAPI( CreateRectRgnIndirect );
		Result = Call< HRGN, CONST ::RECT* >( pFunc, lprc );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HRGN CGDI32::CreateRoundRectRgn( int nLeftRect, int nTopRect, int nRightRect, int nBottomRect, int nWidthEllipse, int nHeightEllipse )
	{
		_WINQ_FCONTEXT( "CGDI32::CreateRoundRectRgn" );
		CCheckReturn< HRGN, CCheckNonZero< HRGN > >::TType Result;
		_WINQ_USESAPI( CreateRoundRectRgn );
		Result = Call< HRGN, int, int, int, int, int, int >( pFunc, nLeftRect, nTopRect, nRightRect, nBottomRect, nWidthEllipse, nHeightEllipse );
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::EqualRgn( HRGN hSrcRgn1, HRGN hSrcRgn2 )
	{
		_WINQ_FCONTEXT( "CGDI32::EqualRgn" );
		CCheckReturn< BOOL, CTCheckFailureValue< BOOL, ERROR > >::TType bResult;
		_WINQ_USESAPI( EqualRgn );
		bResult = Call< BOOL, HRGN, HRGN >( pFunc, hSrcRgn1, hSrcRgn2 );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	HRGN CGDI32::ExtCreateRegion( CONST ::XFORM* lpXform, DWORD nCount, CONST ::RGNDATA* lpRgnData )
	{
		_WINQ_FCONTEXT( "CGDI32::ExtCreateRegion" );
		CCheckReturn< HRGN, CCheckNonZero< HRGN > >::TType Result;
		_WINQ_USESAPI( ExtCreateRegion );
		Result = Call< HRGN, CONST ::XFORM*, DWORD, CONST ::RGNDATA* >( pFunc, lpXform, nCount, lpRgnData );
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::FillRgn( HDC hdc, HRGN hrgn, HBRUSH hbr )
	{
		_WINQ_FCONTEXT( "CGDI32::FillRgn" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( FillRgn );
		bResult = Call< BOOL, HDC, HRGN, HBRUSH >( pFunc, hdc, hrgn, hbr );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::FrameRgn( HDC hdc, HRGN hrgn, HBRUSH hbr, int nWidth, int nHeight )
	{
		_WINQ_FCONTEXT( "CGDI32::FrameRgn" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( FrameRgn );
		bResult = Call< BOOL, HDC, HRGN, HBRUSH, int, int >( pFunc, hdc, hrgn, hbr, nWidth, nHeight );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::GetPolyFillMode( HDC hdc )
	{
		_WINQ_FCONTEXT( "CGDI32::GetPolyFillMode" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		_WINQ_USESAPI( GetPolyFillMode );
		iResult = Call< int, HDC >( pFunc, hdc );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CGDI32::GetRegionData( HRGN hRgn, DWORD dwCount, ::LPRGNDATA lpRgnData )
	{
		_WINQ_FCONTEXT( "CGDI32::GetRegionData" );
		CCheckReturn< DWORD, CCheckNonZero< DWORD > >::TType dwResult;
		_WINQ_USESAPI( GetRegionData );
		dwResult = Call< DWORD, HRGN, DWORD, ::LPRGNDATA >( pFunc, hRgn, dwCount, lpRgnData );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::GetRgnBox( HRGN hrgn, ::LPRECT lprc )
	{
		_WINQ_FCONTEXT( "CGDI32::GetRgnBox" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		_WINQ_USESAPI( GetRgnBox );
		iResult = Call< int, HRGN, ::LPRECT >( pFunc, hrgn, lprc );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::InvertRgn( HDC hdc, HRGN hrgn )
	{
		_WINQ_FCONTEXT( "CGDI32::InvertRgn" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( InvertRgn );
		bResult = Call< BOOL, HDC, HRGN >( pFunc, hdc, hrgn );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CGDI32::OffsetRgn( HRGN hrgn, int nXOffset, int nYOffset )
	{
		_WINQ_FCONTEXT( "CGDI32::OffsetRgn" );
		CCheckReturn< int, CTCheckFailureValue< int, ERROR > >::TType iResult;
		_WINQ_USESAPI( OffsetRgn );
		iResult = Call< int, HRGN, int , int >( pFunc, hrgn, nXOffset, nYOffset );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::PtInRegion( HRGN hrgn, int X, int Y )
	{
		_WINQ_FCONTEXT( "CGDI32::PtInRegion" );
		_WINQ_USESAPI( PtInRegion );
		return Call< BOOL, HRGN, int, int >( pFunc, hrgn, X, Y );
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::PaintRgn( HDC hdc, HRGN hrgn )
	{
		_WINQ_FCONTEXT( "CGDI32::PaintRgn" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( PaintRgn );
		bResult = Call< BOOL, HDC, HRGN >( pFunc, hdc, hrgn );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::RectInRegion( HRGN hrgn, CONST ::RECT* lprc )
	{
		_WINQ_FCONTEXT( "CGDI32::RectInRegion" );
		_WINQ_USESAPI( RectInRegion );
		return Call< BOOL, HRGN, CONST ::RECT* >( pFunc, hrgn, lprc );
	}

	//--------------------------------------------------------------------------------
	int CGDI32::SetPolyFillMode( HDC hdc, int iPolyFillMode )
	{
		_WINQ_FCONTEXT( "CGDI32::SetPolyFillMode" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		_WINQ_USESAPI( SetPolyFillMode );
		iResult = Call< int, HDC, int >( pFunc, hdc, iPolyFillMode );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CGDI32::SetRectRgn( HRGN hrgn, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect )
	{
		_WINQ_FCONTEXT( "CGDI32::SetRectRgn" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( SetRectRgn );
		bResult = Call< BOOL, HRGN, int, int, int, int >( pFunc, hrgn, nLeftRect, nTopRect, nRightRect, nBottomRect );
		return bResult;
	}

}//nsWinQAPI

