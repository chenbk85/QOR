//EventLogging.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQAPI/AdvAPI32.h"
#include "../Source/SystemQOR/MSWindows/WinQAPI/include/ReturnCheck.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::BackupEventLogA( HANDLE hEventLog, LPCSTR lpBackupFileName )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::BackupEventLogA" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( BackupEventLogA );
		bResult = Call< BOOL, HANDLE, LPCSTR >( pFunc, hEventLog, lpBackupFileName );
#	else
		QOR_PP_UNREF( hEventLog );
		QOR_PP_UNREF( lpBackupFileName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("BackupEventLogA"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::BackupEventLogW( HANDLE hEventLog, LPCWSTR lpBackupFileName )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::BackupEventLogW" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( BackupEventLogW );
		bResult = Call< BOOL, HANDLE, LPCWSTR >( pFunc, hEventLog, lpBackupFileName );
#	else
		QOR_PP_UNREF( hEventLog );
		QOR_PP_UNREF( lpBackupFileName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("BackupEventLogW"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::ClearEventLogA( HANDLE hEventLog, LPCSTR lpBackupFileName )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::ClearEventLogA" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ClearEventLogA );
		bResult = Call< BOOL, HANDLE, LPCSTR >( pFunc, hEventLog, lpBackupFileName );
#	else
		QOR_PP_UNREF( hEventLog );
		QOR_PP_UNREF( lpBackupFileName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("ClearEventLogA"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::ClearEventLogW( HANDLE hEventLog, LPCWSTR lpBackupFileName )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::ClearEventLogW" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ClearEventLogW );
		bResult = Call< BOOL, HANDLE, LPCWSTR >( pFunc, hEventLog, lpBackupFileName );
#	else
		QOR_PP_UNREF( hEventLog );
		QOR_PP_UNREF( lpBackupFileName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("ClearEventLogW"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CloseEventLog( HANDLE hEventLog )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CloseEventLog" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CloseEventLog );
		bResult = Call< BOOL, HANDLE >( pFunc, hEventLog );
#	else
		QOR_PP_UNREF( hEventLog );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("CloseEventLog"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::GetEventLogInformation( HANDLE hEventLog, DWORD dwInfoLevel, LPVOID lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetEventLogInformation" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetEventLogInformation );
		bResult = Call< BOOL, HANDLE, DWORD, LPVOID, DWORD, LPDWORD >( pFunc, hEventLog, dwInfoLevel, lpBuffer, cbBufSize, pcbBytesNeeded );
#	else
		QOR_PP_UNREF4( hEventLog, dwInfoLevel, lpBuffer, cbBufSize );
		QOR_PP_UNREF( pcbBytesNeeded );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("GetEventLogInformation"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::GetNumberOfEventLogRecords( HANDLE hEventLog, PDWORD NumberOfRecords )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetNumberOfEventLogRecords" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetNumberOfEventLogRecords );
		bResult = Call< BOOL, HANDLE, PDWORD >( pFunc, hEventLog, NumberOfRecords );
#	else
		QOR_PP_UNREF( hEventLog );
		QOR_PP_UNREF( NumberOfRecords );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("GetNumberOfEventLogRecords"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::GetOldestEventLogRecord( HANDLE hEventLog, PDWORD OldestRecord )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetOldestEventLogRecord" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetOldestEventLogRecord );
		bResult = Call< BOOL, HANDLE, PDWORD >( pFunc, hEventLog, OldestRecord );
#	else
		QOR_PP_UNREF( hEventLog );
		QOR_PP_UNREF( OldestRecord );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("GetOldestEventLogRecord"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::NotifyChangeEventLog( HANDLE hEventLog, HANDLE hEvent )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::NotifyChangeEventLog" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( NotifyChangeEventLog );
		bResult = Call< BOOL, HANDLE, HANDLE >( pFunc, hEventLog, hEvent );
#	else
		QOR_PP_UNREF( hEventLog );
		QOR_PP_UNREF( hEvent );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("NotifyChangeEventLog"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	HANDLE CAdvAPI32::OpenBackupEventLogA( LPCSTR lpUNCServerName, LPCSTR lpFileName )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::OpenBackupEventLogA" );
		CCheckReturn< HANDLE, CHandleNullCheck< > >::TType Result;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OpenBackupEventLogA );
		Result = Call< HANDLE, LPCSTR, LPCSTR >( pFunc, lpUNCServerName, lpFileName );
#	else
		QOR_PP_UNREF( lpUNCServerName );
		QOR_PP_UNREF( lpFileName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("OpenBackupEventLogA"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return Result;
	}

	//------------------------------------------------------------------------------
	HANDLE CAdvAPI32::OpenBackupEventLogW( LPCWSTR lpUNCServerName, LPCWSTR lpFileName )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::OpenBackupEventLogW" );
		CCheckReturn< HANDLE, CHandleNullCheck< > >::TType Result;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OpenBackupEventLogW );
		Result = Call< HANDLE, LPCWSTR, LPCWSTR >( pFunc, lpUNCServerName, lpFileName );
#	else
		QOR_PP_UNREF( lpUNCServerName );
		QOR_PP_UNREF( lpFileName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("OpenBackupEventLogW"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return Result;
	}

	//------------------------------------------------------------------------------
	HANDLE CAdvAPI32::OpenEventLogA( LPCSTR lpUNCServerName, LPCSTR lpSourceName )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::OpenEventLogA" );
		CCheckReturn< HANDLE, CHandleNullCheck< > >::TType Result;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OpenEventLogA );
		Result = Call< HANDLE, LPCSTR, LPCSTR >( pFunc, lpUNCServerName, lpSourceName );
#	else
		QOR_PP_UNREF( lpUNCServerName );
		QOR_PP_UNREF( lpSourceName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("OpenEventLogA"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return Result;
	}

	//------------------------------------------------------------------------------
	HANDLE CAdvAPI32::OpenEventLogW( LPCWSTR lpUNCServerName, LPCWSTR lpSourceName )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::OpenEventLogW" );
		CCheckReturn< HANDLE, CHandleNullCheck< > >::TType Result;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OpenEventLogW );
		Result = Call< HANDLE, LPCWSTR, LPCWSTR >( pFunc, lpUNCServerName, lpSourceName );
#	else
		QOR_PP_UNREF( lpUNCServerName );
		QOR_PP_UNREF( lpSourceName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("OpenEventLogW"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return Result;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::ReadEventLogA( HANDLE hEventLog, DWORD dwReadFlags, DWORD dwRecordOffset, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, DWORD* pnBytesRead, DWORD* pnMinNumberOfBytesNeeded )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::ReadEventLogA" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ReadEventLogA );
		bResult = Call< BOOL, HANDLE, DWORD, DWORD, LPVOID, DWORD, DWORD*, DWORD* >( pFunc, hEventLog, dwReadFlags, dwRecordOffset, lpBuffer, nNumberOfBytesToRead, pnBytesRead, pnMinNumberOfBytesNeeded );
#	else
		QOR_PP_UNREF4( hEventLog, dwReadFlags, dwRecordOffset, lpBuffer );
		QOR_PP_UNREF( nNumberOfBytesToRead );
		QOR_PP_UNREF( pnBytesRead );
		QOR_PP_UNREF( pnMinNumberOfBytesNeeded );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("ReadEventLogA"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::ReadEventLogW( HANDLE hEventLog, DWORD dwReadFlags, DWORD dwRecordOffset, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, DWORD* pnBytesRead, DWORD* pnMinNumberOfBytesNeeded )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::ReadEventLogW" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ReadEventLogW );
		bResult = Call< BOOL, HANDLE, DWORD, DWORD, LPVOID, DWORD, DWORD*, DWORD* >( pFunc, hEventLog, dwReadFlags, dwRecordOffset, lpBuffer, nNumberOfBytesToRead, pnBytesRead, pnMinNumberOfBytesNeeded );
#	else
		QOR_PP_UNREF4( hEventLog, dwReadFlags, dwRecordOffset, lpBuffer );
		QOR_PP_UNREF( nNumberOfBytesToRead );
		QOR_PP_UNREF( pnBytesRead );
		QOR_PP_UNREF( pnMinNumberOfBytesNeeded );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("ReadEventLogW"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL WINAPI CAdvAPI32::SaferRecordEventLogEntry( SAFER_LEVEL_HANDLE hLevel, LPCWSTR szTargetPath, LPVOID lpReserved )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::SaferRecordEventLogEntry" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( SaferRecordEventLogEntry );
		bResult = Call< BOOL, SAFER_LEVEL_HANDLE, LPCWSTR, LPVOID >( pFunc, hLevel, szTargetPath, lpReserved );
#	else
		QOR_PP_UNREF( hLevel );
		QOR_PP_UNREF( szTargetPath );
		QOR_PP_UNREF( lpReserved );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("SaferRecordEventLogEntry"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::DeregisterEventSource( HANDLE hEventLog )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::DeregisterEventSource" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( DeregisterEventSource );
		bResult = Call< BOOL, HANDLE >( pFunc, hEventLog );
#	else
		QOR_PP_UNREF( hEventLog );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("DeregisterEventSource"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	HANDLE CAdvAPI32::RegisterEventSourceA( LPCSTR lpUNCServerName, LPCSTR lpSourceName )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegisterEventSourceA" );
		CCheckReturn< HANDLE, CHandleNullCheck< > >::TType Result;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegisterEventSourceA );
		Result = Call< HANDLE, LPCSTR, LPCSTR >( pFunc, lpUNCServerName, lpSourceName );
#	else
		QOR_PP_UNREF( lpUNCServerName );
		QOR_PP_UNREF( lpSourceName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("RegisterEventSourceA"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return Result;
	}

	//------------------------------------------------------------------------------
	HANDLE CAdvAPI32::RegisterEventSourceW( LPCWSTR lpUNCServerName, LPCWSTR lpSourceName )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegisterEventSourceW" );
		CCheckReturn< HANDLE, CHandleNullCheck< > >::TType Result;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegisterEventSourceW );
		Result = Call< HANDLE, LPCWSTR, LPCWSTR >( pFunc, lpUNCServerName, lpSourceName );
#	else
		QOR_PP_UNREF( lpUNCServerName );
		QOR_PP_UNREF( lpSourceName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("RegisterEventSourceW"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return Result;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::ReportEventA( HANDLE hEventLog, WORD wType, WORD wCategory, DWORD dwEventID, PSID lpUserSid, WORD wNumStrings, DWORD dwDataSize, LPCSTR* lpStrings, LPVOID lpRawData )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::ReportEventA" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ReportEventA );
		bResult = Call< BOOL, HANDLE, WORD, WORD, DWORD, PSID, WORD, DWORD, LPCSTR*, LPVOID >( pFunc, hEventLog, wType, wCategory, dwEventID, lpUserSid, wNumStrings, dwDataSize, lpStrings, lpRawData );
#	else
		QOR_PP_UNREF4( hEventLog, wType, wCategory, dwEventID );
		QOR_PP_UNREF4( lpUserSid, wNumStrings, dwDataSize, lpStrings );
		QOR_PP_UNREF( lpRawData );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("ReportEventA"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::ReportEventW( HANDLE hEventLog, WORD wType, WORD wCategory, DWORD dwEventID, PSID lpUserSid, WORD wNumStrings, DWORD dwDataSize, LPCWSTR* lpStrings, LPVOID lpRawData )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::ReportEventW" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ReportEventW );
		bResult = Call< BOOL, HANDLE, WORD, WORD, DWORD, PSID, WORD, DWORD, LPCWSTR*, LPVOID >( pFunc, hEventLog, wType, wCategory, dwEventID, lpUserSid, wNumStrings, dwDataSize, lpStrings, lpRawData );
#	else
		QOR_PP_UNREF4( hEventLog, wType, wCategory, dwEventID );
		QOR_PP_UNREF4( lpUserSid, wNumStrings, dwDataSize, lpStrings );
		QOR_PP_UNREF( lpRawData );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("ReportEventW"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

}//nsWinQAPI

