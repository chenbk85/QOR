//Crypto.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQAPI/AdvAPI32.h"
#include "../SystemQOR/MSWindows/WinQAPI/include/ReturnCheck.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//------------------------------------------------------------------------------
	//Cryptography functions
	BOOL CAdvAPI32::CryptAcquireContextA( HCRYPTPROV* phProv, LPCSTR pszContainer, LPCSTR pszProvider, DWORD dwProvType, DWORD dwFlags )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CryptAcquireContextA" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CryptAcquireContextA );
		bResult = Call< BOOL, HCRYPTPROV*, LPCSTR, LPCSTR, DWORD, DWORD >( pFunc, phProv, pszContainer, pszProvider, dwProvType, dwFlags );
#else
		QOR_PP_UNREF4( phProv, pszContainer, pszProvider, dwProvType );
		QOR_PP_UNREF( dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CryptAcquireContextA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}


	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CryptAcquireContextW( HCRYPTPROV* phProv, LPCWSTR pszContainer, LPCWSTR pszProvider, DWORD dwProvType, DWORD dwFlags )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CryptAcquireContextW" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CryptAcquireContextW );
		bResult = Call< BOOL, HCRYPTPROV*, LPCWSTR, LPCWSTR, DWORD, DWORD >( pFunc, phProv, pszContainer, pszProvider, dwProvType, dwFlags );
#else
		QOR_PP_UNREF4( phProv, pszContainer, pszProvider, dwProvType );
		QOR_PP_UNREF( dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CryptAcquireContextW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CryptContextAddRef( HCRYPTPROV hProv, DWORD* pdwReserved, DWORD dwFlags )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CryptContextAddRef" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CryptContextAddRef );
		bResult = Call< BOOL, HCRYPTPROV, DWORD*, DWORD >( pFunc, hProv, pdwReserved, dwFlags );
#else
		QOR_PP_UNREF( hProv );
		QOR_PP_UNREF( pdwReserved );
		QOR_PP_UNREF( dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CryptContextAddRef" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CryptCreateHash( HCRYPTPROV hProv, ALG_ID Algid, HCRYPTKEY hKey, DWORD dwFlags, HCRYPTHASH* phHash )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CryptCreateHash" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CryptCreateHash );
		bResult = Call< BOOL, HCRYPTPROV, ALG_ID, HCRYPTKEY, DWORD, HCRYPTHASH* >( pFunc, hProv, Algid, hKey, dwFlags, phHash );
#else
		QOR_PP_UNREF4( hProv, Algid, hKey, dwFlags );
		QOR_PP_UNREF( phHash );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CryptCreateHash" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CryptDecrypt( HCRYPTKEY hKey, HCRYPTHASH hHash, BOOL Final, DWORD dwFlags, BYTE* pbData, DWORD* pdwDataLen )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CryptDecrypt" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CryptDecrypt );
		bResult = Call< BOOL, HCRYPTKEY, HCRYPTHASH, BOOL, DWORD, BYTE*, DWORD* >( pFunc, hKey, hHash, Final, dwFlags, pbData, pdwDataLen );
#else
		QOR_PP_UNREF4( hKey, hHash, Final, dwFlags );
		QOR_PP_UNREF( pbData );
		QOR_PP_UNREF( pdwDataLen );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CryptDecrypt" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CryptDeriveKey( HCRYPTPROV hProv, ALG_ID Algid, HCRYPTHASH hBaseData, DWORD dwFlags, HCRYPTKEY* phKey )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CryptDeriveKey" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CryptDeriveKey );
		bResult = Call< BOOL, HCRYPTPROV, ALG_ID, HCRYPTHASH, DWORD, HCRYPTKEY* >( pFunc, hProv, Algid, hBaseData, dwFlags, phKey );
#else
		QOR_PP_UNREF4( hProv, Algid, hBaseData, dwFlags );
		QOR_PP_UNREF( phKey );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CryptDeriveKey" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CryptDestroyHash( HCRYPTHASH hHash )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CryptDestroyHash" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CryptDestroyHash );
		bResult = Call< BOOL, HCRYPTHASH >( pFunc, hHash );
#else
		QOR_PP_UNREF( hHash );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CryptDestroyHash" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CryptDestroyKey( HCRYPTKEY hKey )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CryptDestroyKey" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CryptDestroyKey );
		bResult = Call< BOOL, HCRYPTKEY >( pFunc, hKey );
#else
		QOR_PP_UNREF( hKey );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CryptDestroyKey" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CryptDuplicateHash( HCRYPTHASH hHash, DWORD* pdwReserved, DWORD dwFlags, HCRYPTHASH* phHash )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CryptDuplicateHash" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CryptDuplicateHash );
		bResult = Call< BOOL, HCRYPTHASH, DWORD*, DWORD, HCRYPTHASH* >( pFunc, hHash, pdwReserved, dwFlags, phHash );
#else
		QOR_PP_UNREF4( hHash, pdwReserved, dwFlags, phHash );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CryptDuplicateHash" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CryptDuplicateKey( HCRYPTKEY hKey, DWORD* pdwReserved, DWORD dwFlags, HCRYPTKEY* phKey )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CryptDuplicateKey" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CryptDuplicateKey );
		bResult = Call< BOOL, HCRYPTKEY, DWORD*, DWORD, HCRYPTKEY* >( pFunc, hKey, pdwReserved, dwFlags, phKey );
#else
		QOR_PP_UNREF4( hKey, pdwReserved, dwFlags, phKey );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CryptDuplicateKey" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CryptEncrypt( HCRYPTKEY hKey, HCRYPTHASH hHash, BOOL Final, DWORD dwFlags, BYTE* pbData, DWORD* pdwDataLen, DWORD dwBufLen )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CryptEncrypt" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CryptEncrypt );
		bResult = Call< BOOL, HCRYPTKEY, HCRYPTHASH, BOOL, DWORD, BYTE*, DWORD*, DWORD >( pFunc, hKey, hHash, Final, dwFlags, pbData, pdwDataLen, dwBufLen );
#else
		QOR_PP_UNREF4( hKey, hHash, Final, dwFlags );
		QOR_PP_UNREF( pbData );
		QOR_PP_UNREF( pdwDataLen );
		QOR_PP_UNREF( dwBufLen );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CryptEncrypt" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CryptEnumProvidersA( DWORD dwIndex, DWORD* pdwReserved, DWORD dwFlags, DWORD* pdwProvType, LPSTR pszProvName, DWORD* pcbProvName )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CryptEnumProvidersA" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CryptEnumProvidersA );
		bResult = Call< BOOL, DWORD, DWORD*, DWORD, DWORD*, LPSTR, DWORD* >( pFunc, dwIndex, pdwReserved, dwFlags, pdwProvType, pszProvName, pcbProvName );
#else
		QOR_PP_UNREF4( dwIndex, pdwReserved, dwFlags, pdwProvType );
		QOR_PP_UNREF( pszProvName );
		QOR_PP_UNREF( pcbProvName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CryptEnumProvidersA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CryptEnumProvidersW( DWORD dwIndex, DWORD* pdwReserved, DWORD dwFlags, DWORD* pdwProvType, LPWSTR pszProvName, DWORD* pcbProvName )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CryptEnumProvidersW" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CryptEnumProvidersW );
		bResult = Call< BOOL, DWORD, DWORD*, DWORD, DWORD*, LPWSTR, DWORD* >( pFunc, dwIndex, pdwReserved, dwFlags, pdwProvType, pszProvName, pcbProvName );
#else
		QOR_PP_UNREF4( dwIndex, pdwReserved, dwFlags, pdwProvType );
		QOR_PP_UNREF( pszProvName );
		QOR_PP_UNREF( pcbProvName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CryptEnumProvidersW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CryptEnumProviderTypesA( DWORD dwIndex, DWORD* pdwReserved, DWORD dwFlags, DWORD* pdwProvType, LPSTR pszTypeName, DWORD* pcbTypeName )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CryptEnumProviderTypesA" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CryptEnumProviderTypesA );
		bResult = Call< BOOL, DWORD, DWORD*, DWORD, DWORD*, LPSTR, DWORD* >( pFunc, dwIndex, pdwReserved, dwFlags, pdwProvType, pszTypeName, pcbTypeName );
#else
		QOR_PP_UNREF4( dwIndex, pdwReserved, dwFlags, pdwProvType );
		QOR_PP_UNREF( pszTypeName );
		QOR_PP_UNREF( pcbTypeName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CryptEnumProviderTypesA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CryptEnumProviderTypesW( DWORD dwIndex, DWORD* pdwReserved, DWORD dwFlags, DWORD* pdwProvType, LPWSTR pszTypeName, DWORD* pcbTypeName )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CryptEnumProviderTypesW" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CryptEnumProviderTypesW );
		bResult = Call< BOOL, DWORD, DWORD*, DWORD, DWORD*, LPWSTR, DWORD* >( pFunc, dwIndex, pdwReserved, dwFlags, pdwProvType, pszTypeName, pcbTypeName );
#else
		QOR_PP_UNREF4( dwIndex, pdwReserved, dwFlags, pdwProvType );
		QOR_PP_UNREF( pszTypeName );
		QOR_PP_UNREF( pcbTypeName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CryptEnumProviderTypesW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CryptExportKey( HCRYPTKEY hKey, HCRYPTKEY hExpKey, DWORD dwBlobType, DWORD dwFlags, BYTE* pbData, DWORD* pdwDataLen )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CryptExportKey" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CryptExportKey );
		bResult = Call< BOOL, HCRYPTKEY, HCRYPTKEY, DWORD, DWORD, BYTE*, DWORD* >( pFunc, hKey, hExpKey, dwBlobType, dwFlags, pbData, pdwDataLen );
#else
		QOR_PP_UNREF4( hKey, hExpKey, dwBlobType, dwFlags );
		QOR_PP_UNREF( pbData );
		QOR_PP_UNREF( pdwDataLen );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CryptExportKey" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CryptGenKey( HCRYPTPROV hProv, ALG_ID Algid, DWORD dwFlags, HCRYPTKEY* phKey )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CryptGenKey" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CryptGenKey );
		bResult = Call< BOOL, HCRYPTPROV, ALG_ID, DWORD, HCRYPTKEY* >( pFunc, hProv, Algid, dwFlags, phKey );
#else
		QOR_PP_UNREF4( hProv, Algid, dwFlags, phKey );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CryptGenKey" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CryptGenRandom( HCRYPTPROV hProv, DWORD dwLen, BYTE* pbBuffer )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CryptGenRandom" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CryptGenRandom );
		bResult = Call< BOOL, HCRYPTPROV, DWORD, BYTE* >( pFunc, hProv, dwLen, pbBuffer );
#else
		QOR_PP_UNREF( hProv );
		QOR_PP_UNREF( dwLen );
		QOR_PP_UNREF( pbBuffer );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CryptGenRandom" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CryptGetDefaultProviderA( DWORD dwProvType, DWORD* pdwReserved, DWORD dwFlags, LPSTR pszProvName, DWORD* pcbProvName )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CryptGetDefaultProviderA" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CryptGetDefaultProviderA );
		bResult = Call< BOOL, DWORD, DWORD*, DWORD, LPSTR, DWORD* >( pFunc, dwProvType, pdwReserved, dwFlags, pszProvName, pcbProvName );
#else
		QOR_PP_UNREF4( dwProvType, pdwReserved, dwFlags, pszProvName );
		QOR_PP_UNREF( pcbProvName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CryptGetDefaultProviderA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CryptGetDefaultProviderW( DWORD dwProvType, DWORD* pdwReserved, DWORD dwFlags, LPWSTR pszProvName, DWORD* pcbProvName )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CryptGetDefaultProviderW" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CryptGetDefaultProviderW );
		bResult = Call< BOOL, DWORD, DWORD*, DWORD, LPWSTR, DWORD* >( pFunc, dwProvType, pdwReserved, dwFlags, pszProvName, pcbProvName );
#else
		QOR_PP_UNREF4( dwProvType, pdwReserved, dwFlags, pszProvName );
		QOR_PP_UNREF( pcbProvName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CryptGetDefaultProviderW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CryptGetHashParam( HCRYPTHASH hHash, DWORD dwParam, BYTE* pbData, DWORD* pdwDataLen, DWORD dwFlags )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CryptGetHashParam" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CryptGetHashParam );
		bResult = Call< BOOL, HCRYPTHASH, DWORD, BYTE*, DWORD*, DWORD >( pFunc, hHash, dwParam, pbData, pdwDataLen, dwFlags );
#else
		QOR_PP_UNREF4( hHash, dwParam, pbData, pdwDataLen );
		QOR_PP_UNREF( dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CryptGetHashParam" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CryptGetKeyParam( HCRYPTKEY hKey, DWORD dwParam, BYTE* pbData, DWORD* pdwDataLen, DWORD dwFlags )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CryptGetKeyParam" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CryptGetKeyParam );
		bResult = Call< BOOL, HCRYPTKEY, DWORD, BYTE*, DWORD*, DWORD >( pFunc, hKey, dwParam, pbData, pdwDataLen, dwFlags );
#else
		QOR_PP_UNREF4( hKey, dwParam, pbData, pdwDataLen );
		QOR_PP_UNREF( dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CryptGetKeyParam" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CryptGetProvParam( HCRYPTPROV hProv, DWORD dwParam, BYTE* pbData, DWORD* pdwDataLen, DWORD dwFlags )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CryptGetProvParam" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CryptGetProvParam );
		bResult = Call< BOOL, HCRYPTPROV, DWORD, BYTE*, DWORD*, DWORD >( pFunc, hProv, dwParam, pbData, pdwDataLen, dwFlags );
#else
		QOR_PP_UNREF4( hProv, dwParam, pbData, pdwDataLen );
		QOR_PP_UNREF( dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CryptGetProvParam" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CryptGetUserKey( HCRYPTPROV hProv, DWORD dwKeySpec, HCRYPTKEY* phUserKey )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CryptGetUserKey" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CryptGetUserKey );
		bResult = Call< BOOL, HCRYPTPROV, DWORD, HCRYPTKEY* >( pFunc, hProv, dwKeySpec, phUserKey );
#else
		QOR_PP_UNREF( hProv );
		QOR_PP_UNREF( dwKeySpec );
		QOR_PP_UNREF( phUserKey );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CryptGetUserKey" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CryptHashData( HCRYPTHASH hHash, BYTE* pbData, DWORD dwDataLen, DWORD dwFlags )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CryptHashData" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CryptHashData );
		bResult = Call< BOOL, HCRYPTHASH, BYTE*, DWORD, DWORD >( pFunc, hHash, pbData, dwDataLen, dwFlags );
#else
		QOR_PP_UNREF4( hHash, pbData, dwDataLen, dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CryptHashData" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CryptHashSessionKey( HCRYPTHASH hHash, HCRYPTKEY hKey, DWORD dwFlags )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CryptHashSessionKey" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CryptHashSessionKey );
		bResult = Call< BOOL, HCRYPTHASH, HCRYPTKEY, DWORD >( pFunc, hHash, hKey, dwFlags );
#else
		QOR_PP_UNREF( hHash );
		QOR_PP_UNREF( hKey );
		QOR_PP_UNREF( dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CryptHashSessionKey" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CryptImportKey( HCRYPTPROV hProv, BYTE* pbData, DWORD dwDataLen, HCRYPTKEY hPubKey, DWORD dwFlags, HCRYPTKEY* phKey )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CryptImportKey" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CryptImportKey );
		bResult = Call< BOOL, HCRYPTPROV, BYTE*, DWORD, HCRYPTKEY, DWORD, HCRYPTKEY* >( pFunc, hProv, pbData, dwDataLen, hPubKey, dwFlags, phKey );
#else
		QOR_PP_UNREF4( hProv, pbData, dwDataLen, hPubKey );
		QOR_PP_UNREF( dwFlags );
		QOR_PP_UNREF( phKey );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CryptImportKey" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CryptReleaseContext( HCRYPTPROV hProv, DWORD dwFlags )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CryptReleaseContext" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CryptReleaseContext );
		bResult = Call< BOOL, HCRYPTPROV, DWORD >( pFunc, hProv, dwFlags );
#else
		QOR_PP_UNREF( hProv );
		QOR_PP_UNREF( dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CryptReleaseContext" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CryptSetHashParam( HCRYPTHASH hHash, DWORD dwParam, const BYTE *pbData, DWORD dwFlags )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CryptSetHashParam" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CryptSetHashParam );
		bResult = Call< BOOL, HCRYPTHASH, DWORD, const BYTE*, DWORD >( pFunc, hHash, dwParam, pbData, dwFlags );
#else
		QOR_PP_UNREF4( hHash, dwParam, pbData, dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CryptSetHashParam" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CryptSetKeyParam( HCRYPTKEY hKey, DWORD dwParam, const BYTE* pbData, DWORD dwFlags )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CryptSetKeyParam" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CryptSetKeyParam );
		bResult = Call< BOOL, HCRYPTKEY, DWORD, const BYTE*, DWORD >( pFunc, hKey, dwParam, pbData, dwFlags );
#else
		QOR_PP_UNREF4( hKey, dwParam, pbData, dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CryptSetKeyParam" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CryptSetProviderA( LPCSTR pszProvName, DWORD dwProvType )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CryptSetProviderA" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CryptSetProviderA );
		bResult = Call< BOOL, LPCSTR, DWORD >( pFunc, pszProvName, dwProvType );
#else
		QOR_PP_UNREF( pszProvName );
		QOR_PP_UNREF( dwProvType );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CryptSetProviderA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CryptSetProviderW( LPCWSTR pszProvName, DWORD dwProvType )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CryptSetProviderW" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CryptSetProviderW );
		bResult = Call< BOOL, LPCWSTR, DWORD >( pFunc, pszProvName, dwProvType );
#else
		QOR_PP_UNREF( pszProvName );
		QOR_PP_UNREF( dwProvType );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CryptSetProviderW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CryptSetProviderExA( LPCSTR pszProvName, DWORD dwProvType, DWORD* pdwReserved, DWORD dwFlags )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CryptSetProviderExA" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CryptSetProviderExA );
		bResult = Call< BOOL, LPCSTR, DWORD, DWORD*, DWORD >( pFunc, pszProvName, dwProvType, pdwReserved, dwFlags );
#else
		QOR_PP_UNREF4( pszProvName, dwProvType, pdwReserved, dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CryptSetProviderExA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CryptSetProviderExW( LPCWSTR pszProvName, DWORD dwProvType, DWORD* pdwReserved, DWORD dwFlags )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CryptSetProviderExW" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CryptSetProviderExW );
		bResult = Call< BOOL, LPCWSTR, DWORD, DWORD*, DWORD >( pFunc, pszProvName, dwProvType, pdwReserved, dwFlags );
#else
		QOR_PP_UNREF4( pszProvName, dwProvType, pdwReserved, dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CryptSetProviderExW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CryptSetProvParam( HCRYPTPROV hProv, DWORD dwParam, const BYTE* pbData, DWORD dwFlags )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CryptSetProvParam" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CryptSetProvParam );
		bResult = Call< BOOL, HCRYPTPROV, DWORD, const BYTE*, DWORD >( pFunc, hProv, dwParam, pbData, dwFlags );
#else
		QOR_PP_UNREF4( hProv, dwParam, pbData, dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CryptSetProvParam" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CryptSignHashA( HCRYPTHASH hHash, DWORD dwKeySpec, LPCSTR sDescription, DWORD dwFlags, BYTE* pbSignature, DWORD* pdwSigLen )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CryptSignHashA" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CryptSignHashA );
		bResult = Call< BOOL, HCRYPTHASH, DWORD, LPCSTR, DWORD, BYTE*, DWORD* >( pFunc, hHash, dwKeySpec, sDescription, dwFlags, pbSignature, pdwSigLen );
#else
		QOR_PP_UNREF4( hHash, dwKeySpec, sDescription, dwFlags );
		QOR_PP_UNREF( pbSignature );
		QOR_PP_UNREF( pdwSigLen );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CryptSignHashA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CryptSignHashW( HCRYPTHASH hHash, DWORD dwKeySpec, LPCWSTR sDescription, DWORD dwFlags, BYTE* pbSignature, DWORD* pdwSigLen )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CryptSignHashW" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CryptSignHashW );
		bResult = Call< BOOL, HCRYPTHASH, DWORD, LPCWSTR, DWORD, BYTE*, DWORD* >( pFunc, hHash, dwKeySpec, sDescription, dwFlags, pbSignature, pdwSigLen );
#else
		QOR_PP_UNREF4( hHash, dwKeySpec, sDescription, dwFlags );
		QOR_PP_UNREF( pbSignature );
		QOR_PP_UNREF( pdwSigLen );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CryptSignHashW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CryptVerifySignatureA( HCRYPTHASH hHash, BYTE* pbSignature, DWORD dwSigLen, HCRYPTKEY hPubKey, LPCSTR sDescription, DWORD dwFlags )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CryptVerifySignatureA" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CryptVerifySignatureA );
		bResult = Call< BOOL, HCRYPTHASH, BYTE*, DWORD, HCRYPTKEY, LPCSTR, DWORD >( pFunc, hHash, pbSignature, dwSigLen, hPubKey, sDescription, dwFlags );
#else
		QOR_PP_UNREF4( hHash, pbSignature, dwSigLen, hPubKey );
		QOR_PP_UNREF( sDescription );
		QOR_PP_UNREF( dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CryptVerifySignatureA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CryptVerifySignatureW( HCRYPTHASH hHash, BYTE* pbSignature, DWORD dwSigLen, HCRYPTKEY hPubKey, LPCWSTR sDescription, DWORD dwFlags )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CryptVerifySignatureW" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CryptVerifySignatureW );
		bResult = Call< BOOL, HCRYPTHASH, BYTE*, DWORD, HCRYPTKEY, LPCWSTR, DWORD >( pFunc, hHash, pbSignature, dwSigLen, hPubKey, sDescription, dwFlags );
#else
		QOR_PP_UNREF4( hHash, pbSignature, dwSigLen, hPubKey );
		QOR_PP_UNREF( sDescription );
		QOR_PP_UNREF( dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CryptVerifySignatureW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

}//nsWinQAPI
