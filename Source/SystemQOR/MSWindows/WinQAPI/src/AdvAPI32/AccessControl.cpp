//AccessControl.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQAPI/AdvAPI32.h"
#include "../Source/SystemQOR/MSWindows/WinQAPI/include/ReturnCheck.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::AllocateAndInitializeSid( PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority, BYTE nSubAuthorityCount, DWORD dwSubAuthority0, DWORD dwSubAuthority1, DWORD dwSubAuthority2, DWORD dwSubAuthority3, DWORD dwSubAuthority4, DWORD dwSubAuthority5, DWORD dwSubAuthority6, DWORD dwSubAuthority7, PSID* pSid )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::AllocateAndInitializeSid" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( AllocateAndInitializeSid );
		bResult = Call< BOOL, PSID_IDENTIFIER_AUTHORITY, BYTE, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD, PSID* >( pFunc, pIdentifierAuthority, nSubAuthorityCount, dwSubAuthority0, dwSubAuthority1, dwSubAuthority2, dwSubAuthority3, dwSubAuthority4, dwSubAuthority5, dwSubAuthority6, dwSubAuthority7, pSid );
#	else
		QOR_PP_UNREF( pIdentifierAuthority );
		QOR_PP_UNREF( nSubAuthorityCount );
		QOR_PP_UNREF( dwSubAuthority0 );
		QOR_PP_UNREF( dwSubAuthority1 );
		QOR_PP_UNREF( dwSubAuthority2 );
		QOR_PP_UNREF( dwSubAuthority3 );
		QOR_PP_UNREF( dwSubAuthority4 );
		QOR_PP_UNREF( dwSubAuthority5 );
		QOR_PP_UNREF( dwSubAuthority6 );
		QOR_PP_UNREF( dwSubAuthority7 );
		QOR_PP_UNREF( pSid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("AllocateAndInitializeSid"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	PVOID CAdvAPI32::FreeSid( PSID pSid )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::FreeSid" );
		PVOID pResult = pSid;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( FreeSid );
		pResult = Call< PVOID, PSID >( pFunc, pSid );
		if( pResult != 0 )
		{
			__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "FreeSid" ), 0 ));
		}
#	else
		QOR_PP_UNREF( pSid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "FreeSid" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return pResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::ConvertSidToStringSidA( PSID Sid, LPSTR* StringSid ) const
	{
		_WINQ_FCONTEXT( "CAdvAPI32::ConvertSidToStringSid" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ConvertSidToStringSidA );
		bResult = Call< BOOL, PSID, LPSTR* >( pFunc, Sid, StringSid );
#	else
		QOR_PP_UNREF( Sid );
		QOR_PP_UNREF( StringSid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "ConvertSidToStringSid" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::ConvertSidToStringSidW( PSID Sid, LPWSTR* StringSid ) const
	{
		_WINQ_FCONTEXT( "CAdvAPI32::ConvertSidToStringSid" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ConvertSidToStringSidW );
		bResult = Call< BOOL, PSID, LPWSTR* >( pFunc, Sid, StringSid );
#	else
		QOR_PP_UNREF( Sid );
		QOR_PP_UNREF( StringSid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "ConvertSidToStringSid" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::ConvertStringSidToSidA( LPCSTR StringSid, PSID* Sid )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::ConvertStringSidToSid" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ConvertStringSidToSidA );
		bResult = Call< BOOL, LPCSTR, PSID* >( pFunc, StringSid, Sid );
#	else
		QOR_PP_UNREF( Sid );
		QOR_PP_UNREF( StringSid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "ConvertStringSidToSid" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::ConvertStringSidToSidW( LPCWSTR StringSid, PSID* Sid )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::ConvertStringSidToSid" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ConvertStringSidToSidW );
		bResult = Call< BOOL, LPCWSTR, PSID* >( pFunc, StringSid, Sid );
#	else
		QOR_PP_UNREF( Sid );
		QOR_PP_UNREF( StringSid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "ConvertStringSidToSid" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CopySid( DWORD nDestinationSidLength, PSID pDestinationSid, PSID pSourceSid )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CopySid" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CopySid );
		bResult = Call< BOOL, DWORD, PSID, PSID >( pFunc, nDestinationSidLength, pDestinationSid, pSourceSid );
#	else
		QOR_PP_UNREF( nDestinationSidLength );
		QOR_PP_UNREF( pDestinationSid );
		QOR_PP_UNREF( pSourceSid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CopySid" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::GetLengthSid( PSID pSid )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CopySid" );
		DWORD dwResult = 0;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetLengthSid );
		dwResult = Call< DWORD, PSID >( pFunc, pSid );
#	else
		QOR_PP_UNREF( pSid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetLengthSid" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CreateWellKnownSid( WELL_KNOWN_SID_TYPE WellKnownSidType, PSID DomainSid, PSID pSid, DWORD* cbSid )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CreateWellKnownSid" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( CreateWellKnownSid );
		bResult = Call< BOOL, WELL_KNOWN_SID_TYPE, PSID, PSID, DWORD* >( pFunc, WellKnownSidType, DomainSid, pSid, cbSid );
#	else
		QOR_PP_UNREF( WellKnownSidType );
		QOR_PP_UNREF( DomainSid );
		QOR_PP_UNREF( pSid );
		QOR_PP_UNREF( cbSid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CreateWellKnownSid" ), _T( "Windows XP" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::EqualDomainSid( PSID pSid1, PSID pSid2, BOOL* pfEqual )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::EqualDomainSid" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( EqualDomainSid );
		bResult = Call< BOOL, PSID, PSID, BOOL* >( pFunc, pSid1, pSid2, pfEqual );
#	else
		QOR_PP_UNREF( pSid1 );
		QOR_PP_UNREF( pSid2 );
		QOR_PP_UNREF( pfEqual );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "EqualDomainSid" ), _T( "Windows XP" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::EqualPrefixSid( PSID pSid1, PSID pSid2 )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::EqualPrefixSid" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( EqualPrefixSid );
		bResult = Call< BOOL, PSID, PSID >( pFunc, pSid1, pSid2 );
#	else
		QOR_PP_UNREF( pSid1 );
		QOR_PP_UNREF( pSid2 );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "EqualPrefixSid" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::EqualSid( PSID pSid1, PSID pSid2 )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::EqualSid" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( EqualSid );
		bResult = Call< BOOL, PSID, PSID >( pFunc, pSid1, pSid2 );
#	else
		QOR_PP_UNREF( pSid1 );
		QOR_PP_UNREF( pSid2 );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "EqualSid" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	PSID_IDENTIFIER_AUTHORITY CAdvAPI32::GetSidIdentifierAuthority( PSID pSid )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetSidIdentifierAuthority" );
		PSID_IDENTIFIER_AUTHORITY pResult = 0;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetSidIdentifierAuthority );
		if( IsValidSid( pSid ) )
		{
			pResult = Call< PSID_IDENTIFIER_AUTHORITY, PSID >( pFunc, pSid );
		}
		else
		{
			__WINQAPI_CONT_ERROR(( INVALID_SID, 0 ));
		}
#	else
		QOR_PP_UNREF( pSid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetSidIdentifierAuthority" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return pResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::GetSidLengthRequired( UCHAR nSubAuthorityCount )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetSidLengthRequired" );
		DWORD dwResult = 0;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetSidLengthRequired );
		dwResult = Call< DWORD, UCHAR >( pFunc, nSubAuthorityCount );
#	else
		QOR_PP_UNREF( nSubAuthorityCount );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetSidLengthRequired" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	PDWORD CAdvAPI32::GetSidSubAuthority( PSID pSid, DWORD nSubAuthority )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetSidSubAuthority" );
		PDWORD pResult = 0;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetSidSubAuthority );
		pResult = Call< PDWORD, PSID, DWORD >( pFunc, pSid, nSubAuthority );
#	else
		QOR_PP_UNREF( nSubAuthority );
		QOR_PP_UNREF( pSid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetSidSubAuthority" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return pResult;
	}

	//------------------------------------------------------------------------------
	PUCHAR CAdvAPI32::GetSidSubAuthorityCount( PSID pSid )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetSidSubAuthority" );
		PUCHAR pResult = 0;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetSidSubAuthorityCount );
		pResult = Call< PUCHAR, PSID >( pFunc, pSid );
#	else
		QOR_PP_UNREF( pSid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetSidSubAuthorityCount" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return pResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::GetWindowsAccountDomainSid( PSID pSid, PSID ppDomainSid, DWORD* cbSid )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetWindowsAccountDomainSid" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( GetWindowsAccountDomainSid );
		bResult = Call< BOOL, PSID, PSID, DWORD* >( pFunc, pSid, ppDomainSid, cbSid );
#	else
		QOR_PP_UNREF( pSid );
		QOR_PP_UNREF( ppDomainSid );
		QOR_PP_UNREF( cbSid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetWindowsAccountDomainSid" ), _T( "Windows XP" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::InitializeSid( PSID Sid, PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority, BYTE nSubAuthorityCount )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::InitializeSid" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( InitializeSid );
		bResult = Call< BOOL, PSID, PSID_IDENTIFIER_AUTHORITY, BYTE >( pFunc, Sid, pIdentifierAuthority, nSubAuthorityCount );
#	else
		QOR_PP_UNREF( Sid );
		QOR_PP_UNREF( pIdentifierAuthority );
		QOR_PP_UNREF( nSubAuthorityCount );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "InitializeSid" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::IsValidSid( PSID pSid )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::IsValidSid" );
		BOOL bResult = FALSE;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( IsValidSid );
		bResult = Call< BOOL, PSID >( pFunc, pSid );
#	else
		QOR_PP_UNREF( pSid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "IsValidSid" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::IsWellKnownSid( PSID pSid, WELL_KNOWN_SID_TYPE WellKnownSidType )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::IsWellKnownSid" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( IsWellKnownSid );
		bResult = Call< BOOL, PSID, WELL_KNOWN_SID_TYPE >( pFunc, pSid, WellKnownSidType );
#	else
		QOR_PP_UNREF( pSid );
		QOR_PP_UNREF( WellKnownSidType );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "IsWellKnownSid" ), _T( "Windows XP" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::LookupAccountSidA( LPCSTR lpSystemName, PSID lpSid, LPSTR lpName, LPDWORD cchName, LPSTR lpReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::LookupAccountSidA" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( LookupAccountSidA );
		bResult = Call< BOOL, LPCSTR, PSID, LPSTR, LPDWORD, LPSTR, LPDWORD, PSID_NAME_USE >( pFunc, lpSystemName, lpSid, lpName, cchName, lpReferencedDomainName, cchReferencedDomainName, peUse );
#	else
		QOR_PP_UNREF( lpSystemName );
		QOR_PP_UNREF( lpSid );
		QOR_PP_UNREF( lpName );
		QOR_PP_UNREF( cchName );
		QOR_PP_UNREF( lpReferencedDomainName );
		QOR_PP_UNREF( cchReferencedDomainName );
		QOR_PP_UNREF( peUse );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "LookupAccountSidA" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::LookupAccountSidW( LPCWSTR lpSystemName, PSID lpSid, LPWSTR lpName, LPDWORD cchName, LPWSTR lpReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::LookupAccountSidW" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( LookupAccountSidW );
		bResult = Call< BOOL, LPCWSTR, PSID, LPWSTR, LPDWORD, LPWSTR, LPDWORD, PSID_NAME_USE >( pFunc, lpSystemName, lpSid, lpName, cchName, lpReferencedDomainName, cchReferencedDomainName, peUse );
#	else
		QOR_PP_UNREF( lpSystemName );
		QOR_PP_UNREF( lpSid );
		QOR_PP_UNREF( lpName );
		QOR_PP_UNREF( cchName );
		QOR_PP_UNREF( lpReferencedDomainName );
		QOR_PP_UNREF( cchReferencedDomainName );
		QOR_PP_UNREF( peUse );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "LookupAccountSidW" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}


	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::AccessCheck( PSECURITY_DESCRIPTOR pSecurityDescriptor, HANDLE ClientToken, DWORD DesiredAccess, ::PGENERIC_MAPPING GenericMapping, ::PPRIVILEGE_SET PrivilegeSet, LPDWORD PrivilegeSetLength, LPDWORD GrantedAccess, LPBOOL AccessStatus )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::AccessCheck" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( AccessCheck );
		bResult = Call< BOOL, PSECURITY_DESCRIPTOR, HANDLE, DWORD, ::PGENERIC_MAPPING, ::PPRIVILEGE_SET, LPDWORD, LPDWORD, LPBOOL >( pFunc, pSecurityDescriptor, ClientToken, DesiredAccess, GenericMapping, PrivilegeSet, PrivilegeSetLength, GrantedAccess, AccessStatus );
#	else
		QOR_PP_UNREF( pSecurityDescriptor );
		QOR_PP_UNREF( ClientToken );
		QOR_PP_UNREF( DesiredAccess );
		QOR_PP_UNREF( GenericMapping );
		QOR_PP_UNREF( PrivilegeSet );
		QOR_PP_UNREF( PrivilegeSetLength );
		QOR_PP_UNREF( GrantedAccess );
		QOR_PP_UNREF( AccessStatus );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("AccessCheck"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::AccessCheckAndAuditAlarmA( LPCSTR SubsystemName, LPVOID HandleId, LPSTR ObjectTypeName, LPSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, DWORD DesiredAccess, ::PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, LPDWORD GrantedAccess, LPBOOL AccessStatus, LPBOOL pfGenerateOnClose )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::AccessCheckAndAuditAlarmA" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( AccessCheckAndAuditAlarmA );
		bResult = Call< BOOL, LPCSTR, LPVOID, LPSTR, LPSTR, PSECURITY_DESCRIPTOR, DWORD, ::PGENERIC_MAPPING, BOOL, LPDWORD, LPBOOL, LPBOOL >( pFunc, SubsystemName, HandleId, ObjectTypeName, ObjectName, SecurityDescriptor, DesiredAccess, GenericMapping, ObjectCreation, GrantedAccess, AccessStatus, pfGenerateOnClose );
#	else
		QOR_PP_UNREF( SubsystemName );
		QOR_PP_UNREF( HandleId );
		QOR_PP_UNREF( ObjectTypeName );
		QOR_PP_UNREF( ObjectName );
		QOR_PP_UNREF( SecurityDescriptor );
		QOR_PP_UNREF( DesiredAccess );
		QOR_PP_UNREF( GenericMapping );
		QOR_PP_UNREF( ObjectCreation );
		QOR_PP_UNREF( GrantedAccess );
		QOR_PP_UNREF( AccessStatus );
		QOR_PP_UNREF( pfGenerateOnClose );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("AccessCheckAndAuditAlarmA"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL WINAPI CAdvAPI32::AccessCheckAndAuditAlarmW( LPCWSTR SubsystemName, LPVOID HandleId, LPWSTR ObjectTypeName, LPWSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, DWORD DesiredAccess, ::PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, LPDWORD GrantedAccess, LPBOOL AccessStatus, LPBOOL pfGenerateOnClose )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::AccessCheckAndAuditAlarmW" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( AccessCheckAndAuditAlarmW );
		bResult = Call< BOOL, LPCWSTR, LPVOID, LPWSTR, LPWSTR, PSECURITY_DESCRIPTOR, DWORD, ::PGENERIC_MAPPING, BOOL, LPDWORD, LPBOOL, LPBOOL >( pFunc, SubsystemName, HandleId, ObjectTypeName, ObjectName, SecurityDescriptor, DesiredAccess, GenericMapping, ObjectCreation, GrantedAccess, AccessStatus, pfGenerateOnClose );
#	else
		QOR_PP_UNREF( SubsystemName );
		QOR_PP_UNREF( HandleId );
		QOR_PP_UNREF( ObjectTypeName );
		QOR_PP_UNREF( ObjectName );
		QOR_PP_UNREF( SecurityDescriptor );
		QOR_PP_UNREF( DesiredAccess );
		QOR_PP_UNREF( GenericMapping );
		QOR_PP_UNREF( ObjectCreation );
		QOR_PP_UNREF( GrantedAccess );
		QOR_PP_UNREF( AccessStatus );
		QOR_PP_UNREF( pfGenerateOnClose );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("AccessCheckAndAuditAlarmW"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::AccessCheckByType( PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, DWORD DesiredAccess, ::POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, ::PGENERIC_MAPPING GenericMapping, ::PPRIVILEGE_SET PrivilegeSet, LPDWORD PrivilegeSetLength, LPDWORD GrantedAccess, LPBOOL AccessStatus )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::AccessCheckByType" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( AccessCheckByType );
		bResult = Call< BOOL, PSECURITY_DESCRIPTOR, PSID, HANDLE, DWORD, ::POBJECT_TYPE_LIST, DWORD, ::PGENERIC_MAPPING, ::PPRIVILEGE_SET, LPDWORD, LPDWORD, LPBOOL >( pFunc, pSecurityDescriptor, PrincipalSelfSid, ClientToken, DesiredAccess, ObjectTypeList, ObjectTypeListLength, GenericMapping, PrivilegeSet, PrivilegeSetLength, GrantedAccess, AccessStatus );
#	else
		QOR_PP_UNREF( pSecurityDescriptor );
		QOR_PP_UNREF( PrincipalSelfSid );
		QOR_PP_UNREF( ClientToken );
		QOR_PP_UNREF( DesiredAccess );
		QOR_PP_UNREF( ObjectTypeList );
		QOR_PP_UNREF( ObjectTypeListLength );
		QOR_PP_UNREF( GenericMapping );
		QOR_PP_UNREF( PrivilegeSet );
		QOR_PP_UNREF( PrivilegeSetLength );
		QOR_PP_UNREF( GrantedAccess );
		QOR_PP_UNREF( AccessStatus );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("AccessCheckByType"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::AccessCheckByTypeAndAuditAlarmA( LPCSTR SubsystemName, LPVOID HandleId, LPCSTR ObjectTypeName,
										 LPCSTR ObjectName, PSECURITY_DESCRIPTOR pSecurityDescriptor,
										 PSID PrincipalSelfSid, DWORD DesiredAccess, ::AUDIT_EVENT_TYPE AuditType,
										 DWORD Flags, ::POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength,
										 ::PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, LPDWORD GrantedAccess,
										 LPBOOL AccessStatus, LPBOOL pfGenerateOnClose )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::AccessCheckByTypeAndAuditAlarm" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( AccessCheckByTypeAndAuditAlarmA );
		bResult = Call< BOOL, LPCSTR, LPVOID, LPCSTR, LPCSTR, PSECURITY_DESCRIPTOR, PSID, DWORD,
			::AUDIT_EVENT_TYPE, DWORD, ::POBJECT_TYPE_LIST, DWORD, ::PGENERIC_MAPPING, BOOL,
			LPDWORD, LPBOOL, LPBOOL >( pFunc, SubsystemName, HandleId, ObjectTypeName,
			ObjectName, pSecurityDescriptor, PrincipalSelfSid, DesiredAccess, AuditType,
			Flags, ObjectTypeList, ObjectTypeListLength, GenericMapping, ObjectCreation,
			GrantedAccess, AccessStatus, pfGenerateOnClose );
#	else
		QOR_PP_UNREF4( SubsystemName, HandleId, ObjectTypeName, ObjectName );
		QOR_PP_UNREF4( pSecurityDescriptor, PrincipalSelfSid, DesiredAccess, AuditType );
		QOR_PP_UNREF4( Flags, ObjectTypeList, ObjectTypeListLength, GenericMapping );
		QOR_PP_UNREF4( ObjectCreation, GrantedAccess, AccessStatus, pfGenerateOnClose );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "AccessCheckByTypeAndAuditAlarmA" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::AccessCheckByTypeAndAuditAlarmW( LPCWSTR SubsystemName, LPVOID HandleId, LPCWSTR ObjectTypeName,
										 LPCWSTR ObjectName, PSECURITY_DESCRIPTOR pSecurityDescriptor,
										 PSID PrincipalSelfSid, DWORD DesiredAccess, ::AUDIT_EVENT_TYPE AuditType,
										 DWORD Flags, ::POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength,
										 ::PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, LPDWORD GrantedAccess,
										 LPBOOL AccessStatus, LPBOOL pfGenerateOnClose )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::AccessCheckByTypeAndAuditAlarm" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( AccessCheckByTypeAndAuditAlarmW );
		bResult = Call< BOOL, LPCWSTR, LPVOID, LPCWSTR, LPCWSTR, PSECURITY_DESCRIPTOR, PSID, DWORD,
			::AUDIT_EVENT_TYPE, DWORD, ::POBJECT_TYPE_LIST, DWORD, ::PGENERIC_MAPPING, BOOL,
			LPDWORD, LPBOOL, LPBOOL >( pFunc, SubsystemName, HandleId, ObjectTypeName,
			ObjectName, pSecurityDescriptor, PrincipalSelfSid, DesiredAccess, AuditType,
			Flags, ObjectTypeList, ObjectTypeListLength, GenericMapping, ObjectCreation,
			GrantedAccess, AccessStatus, pfGenerateOnClose );
#	else
		QOR_PP_UNREF4( SubsystemName, HandleId, ObjectTypeName, ObjectName );
		QOR_PP_UNREF4( pSecurityDescriptor, PrincipalSelfSid, DesiredAccess, AuditType );
		QOR_PP_UNREF4( Flags, ObjectTypeList, ObjectTypeListLength, GenericMapping );
		QOR_PP_UNREF4( ObjectCreation, GrantedAccess, AccessStatus, pfGenerateOnClose );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "AccessCheckByTypeAndAuditAlarmW" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::AccessCheckByTypeResultList( PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken,
									 DWORD DesiredAccess, ::POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength,
									  ::PGENERIC_MAPPING GenericMapping, ::PPRIVILEGE_SET PrivilegeSet, LPDWORD PrivilegeSetLength,
									  LPDWORD GrantedAccessList, LPDWORD AccessStatusList )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::AccessCheckByTypeResultList" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( AccessCheckByTypeResultList );
		bResult = Call< BOOL, PSECURITY_DESCRIPTOR, PSID, HANDLE, DWORD, ::POBJECT_TYPE_LIST, DWORD, 
			::PGENERIC_MAPPING, ::PPRIVILEGE_SET, LPDWORD, LPDWORD, LPDWORD >( pFunc, 
			pSecurityDescriptor, PrincipalSelfSid, ClientToken, DesiredAccess, 
			ObjectTypeList, ObjectTypeListLength, GenericMapping, PrivilegeSet, 
			PrivilegeSetLength, GrantedAccessList, AccessStatusList );
#	else
		QOR_PP_UNREF4( pSecurityDescriptor, PrincipalSelfSid, ClientToken, DesiredAccess  );
		QOR_PP_UNREF4( ObjectTypeList, ObjectTypeListLength, GenericMapping, PrivilegeSet );
		QOR_PP_UNREF( PrivilegeSetLength );
		QOR_PP_UNREF( GrantedAccessList );
		QOR_PP_UNREF( AccessStatusList );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "AccessCheckByTypeResultList" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::AccessCheckByTypeResultListAndAuditAlarmA( LPCSTR SubsystemName, LPVOID HandleId, LPCSTR ObjectTypeName,
												  LPCSTR ObjectName, PSECURITY_DESCRIPTOR pSecurityDescriptor,
												  PSID PrincipalSelfSid, DWORD DesiredAccess, 
												  ::AUDIT_EVENT_TYPE AuditType, DWORD Flags, 
												  ::POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength,
												  ::PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, 
												  LPDWORD GrantedAccess, LPDWORD AccessStatusList, 
												  LPBOOL pfGenerateOnClose )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::AccessCheckByTypeResultListAndAuditAlarm" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( AccessCheckByTypeResultListAndAuditAlarmA );
		bResult = Call< BOOL, LPCSTR, LPVOID, LPCSTR, LPCSTR, PSECURITY_DESCRIPTOR, PSID, DWORD,
		::AUDIT_EVENT_TYPE, DWORD, ::POBJECT_TYPE_LIST, DWORD, ::PGENERIC_MAPPING, BOOL, LPDWORD, LPDWORD, 
		LPBOOL >( pFunc, SubsystemName, HandleId, ObjectTypeName, ObjectName, pSecurityDescriptor,
		PrincipalSelfSid, DesiredAccess, AuditType, Flags, ObjectTypeList, ObjectTypeListLength,
		GenericMapping, ObjectCreation, GrantedAccess, AccessStatusList, pfGenerateOnClose );
#	else
		QOR_PP_UNREF4( SubsystemName, HandleId, ObjectTypeName, ObjectName );
		QOR_PP_UNREF4( pSecurityDescriptor, PrincipalSelfSid, DesiredAccess, AuditType );
		QOR_PP_UNREF4( Flags, ObjectTypeList, ObjectTypeListLength, GenericMapping );
		QOR_PP_UNREF4( ObjectCreation, GrantedAccess, AccessStatusList, pfGenerateOnClose );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "AccessCheckByTypeResultListAndAuditAlarmA" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::AccessCheckByTypeResultListAndAuditAlarmW( LPCWSTR SubsystemName, LPVOID HandleId, LPCWSTR ObjectTypeName,
												  LPCWSTR ObjectName, PSECURITY_DESCRIPTOR pSecurityDescriptor,
												  PSID PrincipalSelfSid, DWORD DesiredAccess, 
												  ::AUDIT_EVENT_TYPE AuditType, DWORD Flags, 
												  ::POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength,
												  ::PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, 
												  LPDWORD GrantedAccess, LPDWORD AccessStatusList, 
												  LPBOOL pfGenerateOnClose )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::AccessCheckByTypeResultListAndAuditAlarm" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( AccessCheckByTypeResultListAndAuditAlarmW );
		bResult = Call< BOOL, LPCWSTR, LPVOID, LPCWSTR, LPCWSTR, PSECURITY_DESCRIPTOR, PSID, DWORD,
			::AUDIT_EVENT_TYPE, DWORD, ::POBJECT_TYPE_LIST, DWORD, ::PGENERIC_MAPPING, BOOL, LPDWORD, LPDWORD, 
			LPBOOL >( pFunc, SubsystemName, HandleId, ObjectTypeName, ObjectName, pSecurityDescriptor,
			PrincipalSelfSid, DesiredAccess, AuditType, Flags, ObjectTypeList, ObjectTypeListLength,
			GenericMapping, ObjectCreation, GrantedAccess, AccessStatusList, pfGenerateOnClose );
#	else
		QOR_PP_UNREF4( SubsystemName, HandleId, ObjectTypeName, ObjectName );
		QOR_PP_UNREF4( pSecurityDescriptor, PrincipalSelfSid, DesiredAccess, AuditType );
		QOR_PP_UNREF4( Flags, ObjectTypeList, ObjectTypeListLength, GenericMapping );
		QOR_PP_UNREF4( ObjectCreation, GrantedAccess, AccessStatusList, pfGenerateOnClose );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "AccessCheckByTypeResultListAndAuditAlarmW" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::AccessCheckByTypeResultListAndAuditAlarmByHandleA( LPCSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken,
														   LPCSTR ObjectTypeName, LPCSTR ObjectName, 
														   PSECURITY_DESCRIPTOR pSecurityDescriptor, 
														   PSID PrincipalSelfSid, DWORD DesiredAccess, 
														   ::AUDIT_EVENT_TYPE AuditType, DWORD Flags, 
														   ::POBJECT_TYPE_LIST ObjectTypeList, 
														   DWORD ObjectTypeListLength, ::PGENERIC_MAPPING GenericMapping,
														   BOOL ObjectCreation, LPDWORD GrantedAccess, 
														   LPDWORD AccessStatusList, LPBOOL pfGenerateOnClose )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::AccessCheckByTypeResultListAndAuditAlarmByHandle" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( AccessCheckByTypeResultListAndAuditAlarmByHandleA );
		bResult = Call< BOOL, LPCSTR, LPVOID, HANDLE, LPCSTR, LPCSTR, PSECURITY_DESCRIPTOR, PSID, DWORD, 
			::AUDIT_EVENT_TYPE, DWORD, ::POBJECT_TYPE_LIST, DWORD, ::PGENERIC_MAPPING, BOOL, LPDWORD, LPDWORD,
			LPBOOL >( pFunc, SubsystemName, HandleId, ClientToken, ObjectTypeName, ObjectName, 
			pSecurityDescriptor, PrincipalSelfSid, DesiredAccess, AuditType, Flags, ObjectTypeList, 
			ObjectTypeListLength, GenericMapping, ObjectCreation, GrantedAccess, AccessStatusList, 
			pfGenerateOnClose );
#	else
		QOR_PP_UNREF4( SubsystemName, HandleId, ClientToken, ObjectTypeName );
		QOR_PP_UNREF4( ObjectName, pSecurityDescriptor, PrincipalSelfSid, DesiredAccess );
		QOR_PP_UNREF4( AuditType, Flags, ObjectTypeList, ObjectTypeListLength );
		QOR_PP_UNREF4( GenericMapping, ObjectCreation, GrantedAccess, AccessStatusList );
		QOR_PP_UNREF( pfGenerateOnClose );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "AccessCheckByTypeResultListAndAuditAlarmByHandleA" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::AccessCheckByTypeResultListAndAuditAlarmByHandleW( LPCWSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken,
														   LPCWSTR ObjectTypeName, LPCWSTR ObjectName,
														   PSECURITY_DESCRIPTOR pSecurityDescriptor,
														   PSID PrincipalSelfSid, DWORD DesiredAccess,
														   ::AUDIT_EVENT_TYPE AuditType, DWORD Flags,
														   ::POBJECT_TYPE_LIST ObjectTypeList,
														   DWORD ObjectTypeListLength, ::PGENERIC_MAPPING GenericMapping,
														   BOOL ObjectCreation, LPDWORD GrantedAccess,
														   LPDWORD AccessStatusList, LPBOOL pfGenerateOnClose )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::AccessCheckByTypeResultListAndAuditAlarmByHandle" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( AccessCheckByTypeResultListAndAuditAlarmByHandleW );
		bResult = Call< BOOL, LPCWSTR, LPVOID, HANDLE, LPCWSTR, LPCWSTR, PSECURITY_DESCRIPTOR, PSID, DWORD, 
			::AUDIT_EVENT_TYPE, DWORD, ::POBJECT_TYPE_LIST, DWORD, ::PGENERIC_MAPPING, BOOL, LPDWORD, LPDWORD,
			LPBOOL >( pFunc, SubsystemName, HandleId, ClientToken, ObjectTypeName, ObjectName, 
			pSecurityDescriptor, PrincipalSelfSid, DesiredAccess, AuditType, Flags, ObjectTypeList, 
			ObjectTypeListLength, GenericMapping, ObjectCreation, GrantedAccess, AccessStatusList, 
			pfGenerateOnClose );
#	else
		QOR_PP_UNREF4( SubsystemName, HandleId, ClientToken, ObjectTypeName );
		QOR_PP_UNREF4( ObjectName, pSecurityDescriptor, PrincipalSelfSid, DesiredAccess );
		QOR_PP_UNREF4( AuditType, Flags, ObjectTypeList, ObjectTypeListLength );
		QOR_PP_UNREF4( GenericMapping, ObjectCreation, GrantedAccess, AccessStatusList );
		QOR_PP_UNREF( pfGenerateOnClose );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "AccessCheckByTypeResultListAndAuditAlarmByHandleW" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::AdjustTokenGroups( HANDLE TokenHandle, BOOL ResetToDefault, PTOKEN_GROUPS NewState, DWORD BufferLength,
						   PTOKEN_GROUPS PreviousState, PDWORD ReturnLength )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::AdjustTokenGroups" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( AdjustTokenGroups );
		bResult = Call< BOOL, HANDLE, BOOL, PTOKEN_GROUPS, DWORD, PTOKEN_GROUPS, PDWORD >( pFunc, TokenHandle, 
		ResetToDefault, NewState, BufferLength, PreviousState, ReturnLength );
#	else
		QOR_PP_UNREF4( TokenHandle, ResetToDefault, NewState, BufferLength );
		QOR_PP_UNREF( PreviousState );
		QOR_PP_UNREF( ReturnLength );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "AdjustTokenGroups" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::AdjustTokenPrivileges( HANDLE TokenHandle, BOOL DisableAllPrivileges, PTOKEN_PRIVILEGES NewState, 
							   DWORD BufferLength, PTOKEN_PRIVILEGES PreviousState, PDWORD ReturnLength, BOOL& bAllSuccess )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::AdjustTokenPrivileges" );
		BOOL bResult = FALSE;
#	if ( _WIN32_WINNT >= 0x0500 )
		bAllSuccess = FALSE;
		_WINQ_USESAPI( AdjustTokenPrivileges );		
		bResult = Call< BOOL, HANDLE, BOOL, PTOKEN_PRIVILEGES, DWORD, PTOKEN_PRIVILEGES, PDWORD >( pFunc, 
			TokenHandle, DisableAllPrivileges, NewState, BufferLength, PreviousState, ReturnLength );		
		if( bResult == FALSE )
		{
			__WINQAPI_ERROR;
		}
		else
		{
			DWORD dwSuccess = CKernel32::GetLastError();
			if( dwSuccess == ERROR_SUCCESS )
			{
				bAllSuccess = TRUE;
			}
		}
#	else
		QOR_PP_UNREF4( TokenHandle, DisableAllPrivileges, NewState, BufferLength );
		QOR_PP_UNREF( PreviousState );
		QOR_PP_UNREF( ReturnLength );
		QOR_PP_UNREF( bAllSuccess );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "AdjustTokenPrivileges" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::AllocateLocallyUniqueId( ::PLUID Luid )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::AllocateLocallyUniqueId" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( AllocateLocallyUniqueId );		
		bResult = Call< BOOL, ::PLUID >( pFunc, Luid );
#	else
		QOR_PP_UNREF( Luid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "AllocateLocallyUniqueId" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	VOID CAdvAPI32::BuildExplicitAccessWithNameA( ::PEXPLICIT_ACCESS pExplicitAccess, LPSTR pTrusteeName, DWORD AccessPermissions, ::ACCESS_MODE AccessMode, DWORD Inheritance )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::BuildExplicitAccessWithName" );
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( BuildExplicitAccessWithNameA );
		voidCall< ::PEXPLICIT_ACCESS, LPSTR, DWORD, ::ACCESS_MODE, DWORD >( pFunc, pExplicitAccess, pTrusteeName, AccessPermissions, AccessMode, Inheritance );
#	else
		QOR_PP_UNREF4( pExplicitAccess, pTrusteeName, AccessPermissions, AccessMode );
		QOR_PP_UNREF( Inheritance );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "BuildExplicitAccessWithNameA" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
	}

	//------------------------------------------------------------------------------
	VOID CAdvAPI32::BuildExplicitAccessWithNameW( ::PEXPLICIT_ACCESS pExplicitAccess, LPWSTR pTrusteeName, DWORD AccessPermissions, ::ACCESS_MODE AccessMode, DWORD Inheritance )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::BuildExplicitAccessWithName" );
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( BuildExplicitAccessWithNameW );
		voidCall< ::PEXPLICIT_ACCESS, LPWSTR, DWORD, ::ACCESS_MODE, DWORD >( pFunc, pExplicitAccess, pTrusteeName, AccessPermissions, AccessMode, Inheritance );
#	else
		QOR_PP_UNREF4( pExplicitAccess, pTrusteeName, AccessPermissions, AccessMode );
		QOR_PP_UNREF( Inheritance );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "BuildExplicitAccessWithNameW" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
	}

	//------------------------------------------------------------------------------
	VOID CAdvAPI32::BuildTrusteeWithNameA( ::PTRUSTEE pTrustee, LPSTR pName )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::BuildTrusteeWithName" );
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( BuildTrusteeWithNameA );
		voidCall< ::PTRUSTEE, LPSTR >( pFunc, pTrustee, pName );
#	else		
		QOR_PP_UNREF( pTrustee );
		QOR_PP_UNREF( pName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "BuildTrusteeWithNameA" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
	}

	//------------------------------------------------------------------------------
	VOID CAdvAPI32::BuildTrusteeWithNameW( ::PTRUSTEE pTrustee, LPWSTR pName )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::BuildTrusteeWithName" );
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( BuildTrusteeWithNameW );
		voidCall< ::PTRUSTEE, LPWSTR >( pFunc, pTrustee, pName );
#	else		
		QOR_PP_UNREF( pTrustee );
		QOR_PP_UNREF( pName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "BuildTrusteeWithNameW" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
	}

	//------------------------------------------------------------------------------
	void CAdvAPI32::BuildTrusteeWithObjectsAndNameA( ::PTRUSTEE pTrustee, ::POBJECTS_AND_NAME_ pObjName, ::SE_OBJECT_TYPE ObjectType,
										 LPSTR ObjectTypeName, LPSTR InheritedObjectTypeName, LPSTR Name )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::BuildTrusteeWithObjectsAndName" );
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( BuildTrusteeWithObjectsAndNameA );
		voidCall< ::PTRUSTEE, ::POBJECTS_AND_NAME_, ::SE_OBJECT_TYPE, LPSTR, LPSTR, LPSTR >( pFunc, pTrustee, pObjName, ObjectType, ObjectTypeName, InheritedObjectTypeName, Name );
#	else		
		QOR_PP_UNREF4( pTrustee, pObjName, ObjectType, ObjectTypeName );
		QOR_PP_UNREF( InheritedObjectTypeName );
		QOR_PP_UNREF( Name );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "BuildTrusteeWithObjectsAndNameA" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
	}

	//------------------------------------------------------------------------------
	void CAdvAPI32::BuildTrusteeWithObjectsAndNameW( ::PTRUSTEE pTrustee, ::POBJECTS_AND_NAME_ pObjName, 
												::SE_OBJECT_TYPE ObjectType, LPWSTR ObjectTypeName, 
												LPWSTR InheritedObjectTypeName, LPWSTR Name )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::BuildTrusteeWithObjectsAndName" );
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( BuildTrusteeWithObjectsAndNameW );
		voidCall< ::PTRUSTEE, ::POBJECTS_AND_NAME_, ::SE_OBJECT_TYPE, LPWSTR, LPWSTR, LPWSTR >( pFunc, pTrustee, pObjName, 
			ObjectType, ObjectTypeName, InheritedObjectTypeName, Name );
#	else		
		QOR_PP_UNREF4( pTrustee, pObjName, ObjectType, ObjectTypeName );
		QOR_PP_UNREF( InheritedObjectTypeName );
		QOR_PP_UNREF( Name );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "BuildTrusteeWithObjectsAndNameW" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
	}

	//------------------------------------------------------------------------------
	void CAdvAPI32::BuildTrusteeWithObjectsAndSidA( ::PTRUSTEE pTrustee, ::POBJECTS_AND_SID pObjSid, ::GUID* pObjectGuid, ::GUID* pInheritedObjectGuid, PSID pSid )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::BuildTrusteeWithObjectsAndSid" );
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( BuildTrusteeWithObjectsAndSidA );
		voidCall< ::PTRUSTEE, ::POBJECTS_AND_SID, ::GUID*, ::GUID*, PSID >( pFunc, pTrustee, pObjSid, 
			pObjectGuid, pInheritedObjectGuid, pSid );
#	else		
		QOR_PP_UNREF4( pTrustee, pObjSid, pObjectGuid, pInheritedObjectGuid );
		QOR_PP_UNREF( pSid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "BuildTrusteeWithObjectsAndSidA" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
	}

	//------------------------------------------------------------------------------
	void CAdvAPI32::BuildTrusteeWithObjectsAndSidW( ::PTRUSTEE pTrustee, ::POBJECTS_AND_SID pObjSid, ::GUID* pObjectGuid, ::GUID* pInheritedObjectGuid, PSID pSid )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::BuildTrusteeWithObjectsAndSid" );
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( BuildTrusteeWithObjectsAndSidW );
		voidCall< ::PTRUSTEE, ::POBJECTS_AND_SID, ::GUID*, ::GUID*, PSID >( pFunc, pTrustee, pObjSid, pObjectGuid, pInheritedObjectGuid, pSid );
#	else		
		QOR_PP_UNREF4( pTrustee, pObjSid, pObjectGuid, pInheritedObjectGuid );
		QOR_PP_UNREF( pSid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "BuildTrusteeWithObjectsAndSidW" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
	}

	//------------------------------------------------------------------------------
	VOID CAdvAPI32::BuildTrusteeWithSidA( ::PTRUSTEE pTrustee, PSID pSid )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::BuildTrusteeWithSid" );
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( BuildTrusteeWithSidA );
		voidCall< ::PTRUSTEE, PSID >( pFunc, pTrustee, pSid );
#	else		
		QOR_PP_UNREF( pTrustee );
		QOR_PP_UNREF( pSid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "BuildTrusteeWithSidA" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
	}

	//------------------------------------------------------------------------------
	VOID CAdvAPI32::BuildTrusteeWithSidW( ::PTRUSTEE pTrustee, PSID pSid )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::BuildTrusteeWithSid" );
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( BuildTrusteeWithSidW );
		voidCall< ::PTRUSTEE, PSID >( pFunc, pTrustee, pSid );
#	else		
		QOR_PP_UNREF( pTrustee );
		QOR_PP_UNREF( pSid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "BuildTrusteeWithSidW" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CheckTokenMembership( HANDLE TokenHandle, PSID SidToCheck, PBOOL IsMember )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CheckTokenMembership" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CheckTokenMembership );
		bResult = Call< BOOL, HANDLE, PSID, PBOOL >( pFunc, TokenHandle, SidToCheck, IsMember );
#	else		
		QOR_PP_UNREF( TokenHandle );
		QOR_PP_UNREF( SidToCheck );
		QOR_PP_UNREF( IsMember );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CheckTokenMembership" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::ConvertSecurityDescriptorToStringSecurityDescriptorA( PSECURITY_DESCRIPTOR SecurityDescriptor,
															  DWORD RequestedStringSDRevision,
															  SECURITY_INFORMATION SecurityInformation,
															  LPSTR* StringSecurityDescriptor,
															  PULONG StringSecurityDescriptorLen )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::ConvertSecurityDescriptorToStringSecurityDescriptor" );
		BOOL bResult = FALSE;
		__QOR_CODESTRING( APIName, "ConvertSecurityDescriptorToStringSecurityDescriptorA" );
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ConvertSecurityDescriptorToStringSecurityDescriptorA );
		bResult = Call< BOOL, PSECURITY_DESCRIPTOR, DWORD, SECURITY_INFORMATION, LPSTR*, PULONG >( pFunc,
			SecurityDescriptor, RequestedStringSDRevision, SecurityInformation, StringSecurityDescriptor,
			StringSecurityDescriptorLen );
		if( bResult == FALSE )
		{
			DWORD dwError = CKernel32::GetLastError();
			if( dwError == ERROR_INVALID_PARAMETER || dwError == ERROR_UNKNOWN_REVISION || dwError == ERROR_NONE_MAPPED || dwError == ERROR_INVALID_ACL )
			{
				__WINQAPI_CONT_ERROR(( API_INVALID_PARAMETER, APIName, 0 ));
			}			else
			{
				__WINQAPI_ERROR;
			}
		}
#	else		
		QOR_PP_UNREF4( SecurityDescriptor, RequestedStringSDRevision, SecurityInformation, StringSecurityDescriptor );
		QOR_PP_UNREF( StringSecurityDescriptorLen );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "ConvertSecurityDescriptorToStringSecurityDescriptorA" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::ConvertSecurityDescriptorToStringSecurityDescriptorW( PSECURITY_DESCRIPTOR SecurityDescriptor,
																	DWORD RequestedStringSDRevision,
																	SECURITY_INFORMATION SecurityInformation,
																	LPWSTR* StringSecurityDescriptor,
																	PULONG StringSecurityDescriptorLen )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::ConvertSecurityDescriptorToStringSecurityDescriptor" );
		BOOL bResult = FALSE;
		__QOR_CODESTRING( APIName, "ConvertSecurityDescriptorToStringSecurityDescriptorW" );
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ConvertSecurityDescriptorToStringSecurityDescriptorW );
		bResult = Call< BOOL, PSECURITY_DESCRIPTOR, DWORD, SECURITY_INFORMATION, LPWSTR*, PULONG >( pFunc,
			SecurityDescriptor, RequestedStringSDRevision, SecurityInformation, StringSecurityDescriptor,
			StringSecurityDescriptorLen );
		if( bResult == FALSE )
		{
			DWORD dwError = CKernel32::GetLastError();
			if( dwError == ERROR_INVALID_PARAMETER || dwError == ERROR_UNKNOWN_REVISION || dwError == ERROR_NONE_MAPPED || dwError == ERROR_INVALID_ACL )
			{
				__WINQAPI_CONT_ERROR(( API_INVALID_PARAMETER, APIName, 0 ));
			}
			else
			{
				__WINQAPI_ERROR;
			}
		}
#	else		
		QOR_PP_UNREF4( SecurityDescriptor, RequestedStringSDRevision, SecurityInformation, StringSecurityDescriptor );
		QOR_PP_UNREF( StringSecurityDescriptorLen );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "ConvertSecurityDescriptorToStringSecurityDescriptorW" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::ConvertStringSecurityDescriptorToSecurityDescriptorA( LPCSTR StringSecurityDescriptor, DWORD StringSDRevision,
															  PSECURITY_DESCRIPTOR* SecurityDescriptor, PULONG SecurityDescriptorSize )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::ConvertStringSecurityDescriptorToSecurityDescriptor" );
		BOOL bResult = FALSE;
		__QOR_CODESTRING( APIName, "ConvertStringSecurityDescriptorToSecurityDescriptorA" );
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ConvertStringSecurityDescriptorToSecurityDescriptorA );
		bResult = Call< BOOL, LPCSTR, DWORD, PSECURITY_DESCRIPTOR*, PULONG >( pFunc,
			StringSecurityDescriptor, StringSDRevision, SecurityDescriptor, SecurityDescriptorSize );
		if( bResult == FALSE )
		{
			DWORD dwError = CKernel32::GetLastError();
			if( dwError == ERROR_INVALID_PARAMETER || dwError == ERROR_UNKNOWN_REVISION || dwError == ERROR_NONE_MAPPED )
			{
				__WINQAPI_CONT_ERROR(( API_INVALID_PARAMETER, APIName, 0 ));
			}
			else
			{
				__WINQAPI_ERROR;
			}
		}
#	else		
		QOR_PP_UNREF4( StringSecurityDescriptor, StringSDRevision, SecurityDescriptor, SecurityDescriptorSize );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "ConvertStringSecurityDescriptorToSecurityDescriptorA" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::ConvertStringSecurityDescriptorToSecurityDescriptorW( LPCWSTR StringSecurityDescriptor, DWORD StringSDRevision, 
															  PSECURITY_DESCRIPTOR* SecurityDescriptor, PULONG SecurityDescriptorSize )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::ConvertStringSecurityDescriptorToSecurityDescriptor" );
		BOOL bResult = FALSE;
		__QOR_CODESTRING( APIName, "ConvertStringSecurityDescriptorToSecurityDescriptorW" );
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ConvertStringSecurityDescriptorToSecurityDescriptorW );
		bResult = Call< BOOL, LPCWSTR, DWORD, PSECURITY_DESCRIPTOR*, PULONG >( pFunc,
			StringSecurityDescriptor, StringSDRevision, SecurityDescriptor, SecurityDescriptorSize );
		if( bResult == FALSE )
		{
			DWORD dwError = CKernel32::GetLastError();
			if( dwError == ERROR_INVALID_PARAMETER || dwError == ERROR_UNKNOWN_REVISION || dwError == ERROR_NONE_MAPPED )
			{
				__WINQAPI_CONT_ERROR(( API_INVALID_PARAMETER, APIName, 0 ));
			}
			else
			{
				__WINQAPI_ERROR;
			}
		}
#	else		
		QOR_PP_UNREF4( StringSecurityDescriptor, StringSDRevision, SecurityDescriptor, SecurityDescriptorSize );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "ConvertStringSecurityDescriptorToSecurityDescriptorW" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CreateRestrictedToken( HANDLE ExistingTokenHandle, DWORD Flags, DWORD DisableSidCount, 
							   PSID_AND_ATTRIBUTES SidsToDisable, DWORD DeletePrivilegeCount, 
							   PLUID_AND_ATTRIBUTES PrivilegesToDelete, DWORD RestrictedSidCount, 
							   PSID_AND_ATTRIBUTES SidsToRestrict, PHANDLE NewTokenHandle )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CreateRestrictedToken" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		__QOR_CODESTRING( APIName, "CreateRestrictedToken" );
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CreateRestrictedToken );
		bResult = Call< BOOL, HANDLE, DWORD, DWORD, PSID_AND_ATTRIBUTES, DWORD, PLUID_AND_ATTRIBUTES,
			DWORD, PSID_AND_ATTRIBUTES, PHANDLE >( pFunc, ExistingTokenHandle, Flags, DisableSidCount,
			SidsToDisable, DeletePrivilegeCount, PrivilegesToDelete, RestrictedSidCount, SidsToRestrict,
			NewTokenHandle );
#	else		
		QOR_PP_UNREF4( ExistingTokenHandle, Flags, DisableSidCount, SidsToDisable );
		QOR_PP_UNREF4( DeletePrivilegeCount, PrivilegesToDelete, RestrictedSidCount, SidsToRestrict );
		QOR_PP_UNREF( NewTokenHandle );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CreateRestrictedToken" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::DuplicateToken( HANDLE ExistingTokenHandle, ::SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, PHANDLE DuplicateTokenHandle )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::DuplicateToken" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		__QOR_CODESTRING( APIName, "DuplicateToken" );
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( DuplicateToken );
		bResult = Call< BOOL, HANDLE, ::SECURITY_IMPERSONATION_LEVEL, PHANDLE >( pFunc, ExistingTokenHandle, ImpersonationLevel, DuplicateTokenHandle );
#	else		
		QOR_PP_UNREF( ExistingTokenHandle );
		QOR_PP_UNREF( ImpersonationLevel );
		QOR_PP_UNREF( DuplicateTokenHandle );			
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "DuplicateToken" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::DuplicateTokenEx( HANDLE hExistingToken, DWORD dwDesiredAccess, ::LPSECURITY_ATTRIBUTES lpTokenAttributes,
						  ::SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, ::TOKEN_TYPE TokenType, PHANDLE phNewToken )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::DuplicateTokenEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		__QOR_CODESTRING( APIName, "DuplicateTokenEx" );
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( DuplicateTokenEx );
		bResult = Call< BOOL, HANDLE, DWORD, ::LPSECURITY_ATTRIBUTES, ::SECURITY_IMPERSONATION_LEVEL,
			::TOKEN_TYPE, PHANDLE >( pFunc, hExistingToken, dwDesiredAccess, lpTokenAttributes, ImpersonationLevel,
			TokenType, phNewToken );
#	else		
		QOR_PP_UNREF4( hExistingToken, dwDesiredAccess, lpTokenAttributes, ImpersonationLevel );
		QOR_PP_UNREF( TokenType );
		QOR_PP_UNREF( phNewToken );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "DuplicateTokenEx" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::GetAuditedPermissionsFromAclA( ::PACL pacl, ::PTRUSTEE pTrustee, PACCESS_MASK pSuccessfulAuditedRights, PACCESS_MASK pFailedAuditRights )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetAuditedPermissionsFromAcl" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
		__QOR_CODESTRING( APIName, "GetAuditedPermissionsFromAclA" );
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetAuditedPermissionsFromAclA );
		dwResult = Call< DWORD, ::PACL, ::PTRUSTEE, PACCESS_MASK, PACCESS_MASK >( pFunc, pacl, pTrustee, pSuccessfulAuditedRights, pFailedAuditRights );
#	else		
		QOR_PP_UNREF4( pacl, pTrustee, pSuccessfulAuditedRights, pFailedAuditRights );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetAuditedPermissionsFromAclA" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::GetAuditedPermissionsFromAclW( ::PACL pacl, ::PTRUSTEE pTrustee, PACCESS_MASK pSuccessfulAuditedRights, PACCESS_MASK pFailedAuditRights )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetAuditedPermissionsFromAcl" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
		__QOR_CODESTRING( APIName, "GetAuditedPermissionsFromAclW" );
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetAuditedPermissionsFromAclW );
		dwResult = Call< DWORD, ::PACL, ::PTRUSTEE, PACCESS_MASK, PACCESS_MASK >( pFunc, pacl, pTrustee, 
			pSuccessfulAuditedRights, pFailedAuditRights );
#	else		
		QOR_PP_UNREF4( pacl, pTrustee, pSuccessfulAuditedRights, pFailedAuditRights );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetAuditedPermissionsFromAclW" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::GetEffectiveRightsFromAclA( ::PACL pacl, ::PTRUSTEE pTrustee, PACCESS_MASK pAccessRights )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetEffectiveRightsFromAcl" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
		__QOR_CODESTRING( APIName, "GetEffectiveRightsFromAclA" );
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetEffectiveRightsFromAclA );
		dwResult = Call< DWORD, ::PACL, ::PTRUSTEE, PACCESS_MASK >( pFunc, pacl, pTrustee, pAccessRights );
#	else		
		QOR_PP_UNREF( pacl );
		QOR_PP_UNREF( pTrustee );
		QOR_PP_UNREF( pAccessRights );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetEffectiveRightsFromAclA" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::GetEffectiveRightsFromAclW( ::PACL pacl, ::PTRUSTEE pTrustee, PACCESS_MASK pAccessRights )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetEffectiveRightsFromAcl" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
		__QOR_CODESTRING( APIName, "GetEffectiveRightsFromAclW" );
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetEffectiveRightsFromAclW );
		dwResult = Call< DWORD, ::PACL, ::PTRUSTEE, PACCESS_MASK >( pFunc, pacl, pTrustee, pAccessRights );
#	else		
		QOR_PP_UNREF( pacl );
		QOR_PP_UNREF( pTrustee );
		QOR_PP_UNREF( pAccessRights );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetEffectiveRightsFromAclW" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::GetExplicitEntriesFromAclA( ::PACL pacl, PULONG pcCountOfExplicitEntries, ::PEXPLICIT_ACCESS* pListOfExplicitEntries ) const
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetExplicitEntriesFromAcl" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
		__QOR_CODESTRING( APIName, "GetExplicitEntriesFromAclA" );
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetExplicitEntriesFromAclA );
		dwResult = Call< DWORD, ::PACL, PULONG, ::PEXPLICIT_ACCESS* >( pFunc, pacl, pcCountOfExplicitEntries, pListOfExplicitEntries );			
#	else		
		QOR_PP_UNREF( pacl );
		QOR_PP_UNREF( pcCountOfExplicitEntries );
		QOR_PP_UNREF( pListOfExplicitEntries );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetExplicitEntriesFromAclA" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::GetExplicitEntriesFromAclW( ::PACL pacl, PULONG pcCountOfExplicitEntries, ::PEXPLICIT_ACCESS* pListOfExplicitEntries ) const
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetExplicitEntriesFromAcl" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
		__QOR_CODESTRING( APIName, "GetExplicitEntriesFromAclW" );
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetExplicitEntriesFromAclW );
		dwResult = Call< DWORD, ::PACL, PULONG, ::PEXPLICIT_ACCESS* >( pFunc, pacl, pcCountOfExplicitEntries, pListOfExplicitEntries );			
#	else		
		QOR_PP_UNREF( pacl );
		QOR_PP_UNREF( pcCountOfExplicitEntries );
		QOR_PP_UNREF( pListOfExplicitEntries );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetExplicitEntriesFromAclW" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::GetNamedSecurityInfoA( LPCSTR pObjectName, ::SE_OBJECT_TYPE ObjectType, SECURITY_INFORMATION SecurityInfo,
								PSID* ppsidOwner, PSID* ppsidGroup, ::PACL* ppDacl, ::PACL* ppSacl, PSECURITY_DESCRIPTOR* ppSecurityDescriptor )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetNamedSecurityInfo" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
		__QOR_CODESTRING( APIName, "GetNamedSecurityInfoA" );
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetNamedSecurityInfoA );
		dwResult = Call< DWORD, LPCSTR, ::SE_OBJECT_TYPE, SECURITY_INFORMATION, PSID*, PSID*, ::PACL*, ::PACL*,
			PSECURITY_DESCRIPTOR* >( pFunc, pObjectName, ObjectType, SecurityInfo, ppsidOwner, ppsidGroup, ppDacl, ppSacl, ppSecurityDescriptor );
#	else
		QOR_PP_UNREF4( pObjectName, ObjectType, SecurityInfo, ppSecurityDescriptor );
		QOR_PP_UNREF4( ppsidOwner, ppsidGroup, ppDacl, ppSacl );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetNamedSecurityInfoA" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::GetNamedSecurityInfoW( LPCWSTR pObjectName, ::SE_OBJECT_TYPE ObjectType, SECURITY_INFORMATION SecurityInfo,
								PSID* ppsidOwner, PSID* ppsidGroup, ::PACL* ppDacl, ::PACL* ppSacl, PSECURITY_DESCRIPTOR* ppSecurityDescriptor )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetNamedSecurityInfo" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
		__QOR_CODESTRING( APIName, "GetNamedSecurityInfoW" );
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetNamedSecurityInfoW );
		dwResult = Call< DWORD, LPCWSTR, ::SE_OBJECT_TYPE, SECURITY_INFORMATION, PSID*, PSID*, ::PACL*, ::PACL*,
			PSECURITY_DESCRIPTOR* >( pFunc, pObjectName, ObjectType, SecurityInfo, ppsidOwner, ppsidGroup, ppDacl, ppSacl, ppSecurityDescriptor );
#	else
		QOR_PP_UNREF4( pObjectName, ObjectType, SecurityInfo, ppSecurityDescriptor );
		QOR_PP_UNREF4( ppsidOwner, ppsidGroup, ppDacl, ppSacl );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetNamedSecurityInfoW" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::GetNamedSecurityInfoExA( LPCSTR lpObject, ::SE_OBJECT_TYPE objectType, SECURITY_INFORMATION securityInfo, 
								  LPCSTR lpProvider, LPCSTR lpProperty, PACTRL_ACCESS* ppAccessList, 
								  PACTRL_AUDIT* ppAuditList, LPSTR* lppOwner, LPSTR* lppGroup )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetNamedSecurityInfoEx" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
		__QOR_CODESTRING( APIName, "GetNamedSecurityInfoExA" );
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetNamedSecurityInfoExA );
		dwResult = Call< DWORD, LPCSTR, ::SE_OBJECT_TYPE, SECURITY_INFORMATION, LPCSTR, LPCSTR, PACTRL_ACCESS*,
			PACTRL_AUDIT*, LPSTR*, LPSTR* >( pFunc, lpObject, objectType, securityInfo, lpProvider, lpProperty, 
			ppAccessList, ppAuditList, lppOwner, lppGroup );
#	else
		QOR_PP_UNREF4( lpObject, objectType, securityInfo, lpProvider );
		QOR_PP_UNREF4( lpProperty, ppAccessList, ppAuditList, lppOwner );
		QOR_PP_UNREF( lppGroup );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetNamedSecurityInfoExA" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::GetNamedSecurityInfoExW( LPCWSTR lpObject, ::SE_OBJECT_TYPE objectType, SECURITY_INFORMATION securityInfo,
								  LPCWSTR lpProvider, LPCWSTR lpProperty, PACTRL_ACCESS* ppAccessList, 
								  PACTRL_AUDIT* ppAuditList, LPWSTR* lppOwner, LPWSTR* lppGroup )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetNamedSecurityInfoEx" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
		__QOR_CODESTRING( APIName, "GetNamedSecurityInfoExW" );
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetNamedSecurityInfoExW );
		dwResult = Call< DWORD, LPCWSTR, ::SE_OBJECT_TYPE, SECURITY_INFORMATION, LPCWSTR, LPCWSTR, PACTRL_ACCESS*,
			PACTRL_AUDIT*, LPWSTR*, LPWSTR* >( pFunc, lpObject, objectType, securityInfo, lpProvider, lpProperty, 
			ppAccessList, ppAuditList, lppOwner, lppGroup );
#	else
		QOR_PP_UNREF4( lpObject, objectType, securityInfo, lpProvider );
		QOR_PP_UNREF4( lpProperty, ppAccessList, ppAuditList, lppOwner );
		QOR_PP_UNREF( lppGroup );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetNamedSecurityInfoExW" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::GetSecurityDescriptorControl( PSECURITY_DESCRIPTOR pSecurityDescriptor, PSECURITY_DESCRIPTOR_CONTROL pControl, LPDWORD lpdwRevision )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetSecurityDescriptorControl" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		__QOR_CODESTRING( APIName, "GetSecurityDescriptorControl" );
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetSecurityDescriptorControl );
		bResult = Call< BOOL, PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR_CONTROL, LPDWORD >( pFunc, pSecurityDescriptor, pControl, lpdwRevision );
#	else
		QOR_PP_UNREF( pSecurityDescriptor );
		QOR_PP_UNREF( pControl );
		QOR_PP_UNREF( lpdwRevision );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetSecurityDescriptorControl" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::GetSecurityInfo( HANDLE handle, ::SE_OBJECT_TYPE ObjectType, SECURITY_INFORMATION SecurityInfo, 
						   PSID* ppsidOwner, PSID* ppsidGroup, PACL* ppDacl, PACL* ppSacl, 
						   PSECURITY_DESCRIPTOR* ppSecurityDescriptor )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetSecurityInfo" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
		__QOR_CODESTRING( APIName, "GetSecurityInfo" );
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetSecurityInfo );
		dwResult = Call< DWORD, HANDLE, ::SE_OBJECT_TYPE, SECURITY_INFORMATION, PSID*, PSID*, PACL*, PACL* >( 
			pFunc, handle, ObjectType, SecurityInfo, ppsidOwner, ppsidGroup, ppDacl, ppSacl, ppSecurityDescriptor );
#	else
		QOR_PP_UNREF4( handle, ObjectType, SecurityInfo, ppsidOwner );
		QOR_PP_UNREF4( ppsidGroup, ppDacl, ppSacl, ppSecurityDescriptor );		
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetSecurityInfo" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::GetSecurityInfoExA( HANDLE hObject, ::SE_OBJECT_TYPE objectType, SECURITY_INFORMATION securityInfo, 
							  LPCSTR lpProvider, LPCSTR lpProperty, PACTRL_ACCESS* ppAccessList, 
							  PACTRL_AUDIT* ppAuditList, LPSTR* lppOwner, LPSTR* lppGroup )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetSecurityInfoEx" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
		__QOR_CODESTRING( APIName, "GetSecurityInfoExA" );
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetSecurityInfoExA );
		dwResult = Call< DWORD, HANDLE, ::SE_OBJECT_TYPE, SECURITY_INFORMATION, LPCSTR, LPCSTR, PACTRL_ACCESS*, 
			PACTRL_AUDIT*, LPSTR*, LPSTR* >( pFunc, hObject, objectType, securityInfo, lpProvider, lpProperty,
			ppAccessList, ppAuditList, lppOwner, lppGroup );
#	else
		QOR_PP_UNREF4( hObject, objectType, securityInfo, lpProvider );
		QOR_PP_UNREF4( lpProperty, ppAccessList, ppAuditList, lppOwner );
		QOR_PP_UNREF( lppGroup );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetSecurityInfoExA" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::GetSecurityInfoExW( HANDLE hObject, ::SE_OBJECT_TYPE objectType, SECURITY_INFORMATION securityInfo,
							 LPCWSTR lpProvider, LPCWSTR lpProperty, PACTRL_ACCESS* ppAccessList,
							 PACTRL_AUDIT* ppAuditList, LPWSTR* lppOwner, LPWSTR* lppGroup )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetSecurityInfoEx" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
		__QOR_CODESTRING( APIName, "GetSecurityInfoExW" );
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetSecurityInfoExW );
		dwResult = Call< DWORD, HANDLE, ::SE_OBJECT_TYPE, SECURITY_INFORMATION, LPCWSTR, LPCWSTR, PACTRL_ACCESS*, 
			PACTRL_AUDIT*, LPWSTR*, LPWSTR* >( pFunc, hObject, objectType, securityInfo, lpProvider, lpProperty,
			ppAccessList, ppAuditList, lppOwner, lppGroup );
#	else
		QOR_PP_UNREF4( hObject, objectType, securityInfo, lpProvider );
		QOR_PP_UNREF4( lpProperty, ppAccessList, ppAuditList, lppOwner );
		QOR_PP_UNREF( lppGroup );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetSecurityInfoExW" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::GetTokenInformation( HANDLE TokenHandle, ::TOKEN_INFORMATION_CLASS TokenInformationClass, 
							 LPVOID TokenInformation, DWORD TokenInformationLength, PDWORD ReturnLength )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetTokenInformation" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		__QOR_CODESTRING( APIName, "GetTokenInformation" );
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetTokenInformation );
		bResult = Call< BOOL, HANDLE, ::TOKEN_INFORMATION_CLASS, LPVOID, DWORD, PDWORD >( pFunc, TokenHandle,
			TokenInformationClass, TokenInformation, TokenInformationLength, ReturnLength );
#	else
		QOR_PP_UNREF4( TokenHandle, TokenInformationClass, TokenInformation, TokenInformationLength );		
		QOR_PP_UNREF( ReturnLength );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetTokenInformation" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	TRUSTEE_FORM CAdvAPI32::GetTrusteeFormA( ::PTRUSTEE pTrustee )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetTrusteeForm" );
		TRUSTEE_FORM Result = ::TRUSTEE_BAD_FORM;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetTrusteeFormA );
		Result = Call< TRUSTEE_FORM, ::PTRUSTEE >( pFunc, pTrustee );
#	else		
		QOR_PP_UNREF( pTrustee );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetTrusteeFormA" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return Result;
	}

	//------------------------------------------------------------------------------
	TRUSTEE_FORM CAdvAPI32::GetTrusteeFormW( ::PTRUSTEE pTrustee )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetTrusteeForm" );
		TRUSTEE_FORM Result = ::TRUSTEE_BAD_FORM;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetTrusteeFormW );
		Result = Call< TRUSTEE_FORM, ::PTRUSTEE >( pFunc, pTrustee );
#	else		
		QOR_PP_UNREF( pTrustee );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetTrusteeFormW" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return Result;
	}

	//------------------------------------------------------------------------------
	LPSTR CAdvAPI32::GetTrusteeNameA( ::PTRUSTEE pTrustee )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetTrusteeName" );
		LPSTR pResult = 0;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetTrusteeNameA );
		pResult = Call< LPSTR, ::PTRUSTEE >( pFunc, pTrustee );
#	else		
		QOR_PP_UNREF( pTrustee );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetTrusteeNameA" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return pResult;
	}

	//------------------------------------------------------------------------------
	LPWSTR CAdvAPI32::GetTrusteeNameW( ::PTRUSTEE pTrustee )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetTrusteeName" );
		LPWSTR pResult = 0;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetTrusteeNameW );
		pResult = Call< LPWSTR, ::PTRUSTEE >( pFunc, pTrustee );
#	else		
		QOR_PP_UNREF( pTrustee );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetTrusteeNameW" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return pResult;
	}

	//------------------------------------------------------------------------------
	::TRUSTEE_TYPE CAdvAPI32::GetTrusteeTypeA( ::PTRUSTEE pTrustee )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetTrusteeType" );
		::TRUSTEE_TYPE Result = ::TRUSTEE_IS_UNKNOWN;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetTrusteeTypeA );
		Result = Call< TRUSTEE_TYPE, ::PTRUSTEE >( pFunc, pTrustee );
#	else		
		QOR_PP_UNREF( pTrustee );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetTrusteeTypeA" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return Result;
	}

	//------------------------------------------------------------------------------
	::TRUSTEE_TYPE CAdvAPI32::GetTrusteeTypeW( ::PTRUSTEE pTrustee )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetTrusteeType" );
		::TRUSTEE_TYPE Result = ::TRUSTEE_IS_UNKNOWN;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetTrusteeTypeW );
		Result = Call< TRUSTEE_TYPE, ::PTRUSTEE >( pFunc, pTrustee );
#	else		
		QOR_PP_UNREF( pTrustee );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetTrusteeTypeW" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return Result;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::IsTokenRestricted( HANDLE TokenHandle )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::IsTokenRestricted" );
		BOOL bResult = FALSE;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( IsTokenRestricted );
		bResult = Call< BOOL, HANDLE >( pFunc, TokenHandle );
		if( bResult == FALSE )
		{
			DWORD dwError = CKernel32::GetLastError();
			if( dwError != ERROR_SUCCESS )
			{
				__WINQAPI_CONT_ERROR(( API_FAILED, _T( "GetSecurityInfoExA" ), dwError, 0 ));
			}
		}
#	else
		QOR_PP_UNREF( TokenHandle );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "IsTokenRestricted" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::LookupAccountNameA( LPCSTR lpSystemName, LPCSTR lpAccountName, PSID Sid, LPDWORD cbSid, 
							LPSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, ::PSID_NAME_USE peUse )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::LookupAccountName" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( LookupAccountNameA );
		bResult = Call< BOOL, LPCSTR, LPCSTR, PSID, LPDWORD, LPSTR, LPDWORD, ::PSID_NAME_USE >( pFunc, 
			lpSystemName, lpAccountName, Sid, cbSid, ReferencedDomainName, cchReferencedDomainName, peUse );
#	else
		QOR_PP_UNREF4( lpSystemName, lpAccountName, Sid, cbSid );
		QOR_PP_UNREF( ReferencedDomainName );
		QOR_PP_UNREF( cchReferencedDomainName );
		QOR_PP_UNREF( peUse );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "LookupAccountNameA" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::LookupAccountNameW( LPCWSTR lpSystemName, LPCWSTR lpAccountName, PSID Sid, LPDWORD cbSid, 
							LPWSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, ::PSID_NAME_USE peUse )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::LookupAccountName" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( LookupAccountNameW );
		bResult = Call< BOOL, LPCWSTR, LPCWSTR, PSID, LPDWORD, LPWSTR, LPDWORD, ::PSID_NAME_USE >( pFunc, 
			lpSystemName, lpAccountName, Sid, cbSid, ReferencedDomainName, cchReferencedDomainName, peUse );
#	else
		QOR_PP_UNREF4( lpSystemName, lpAccountName, Sid, cbSid );
		QOR_PP_UNREF( ReferencedDomainName );
		QOR_PP_UNREF( cchReferencedDomainName );
		QOR_PP_UNREF( peUse );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "LookupAccountNameW" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::LookupPrivilegeDisplayNameA( LPCSTR lpSystemName, LPCSTR lpName, LPSTR lpDisplayName, LPDWORD cchDisplayName, 
									 LPDWORD lpLanguageId )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::LookupPrivilegeDisplayName" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( LookupPrivilegeDisplayNameA );
		bResult = Call< BOOL, LPCSTR, LPCSTR, LPSTR, LPDWORD, LPDWORD >( pFunc, lpSystemName, lpName, lpDisplayName, cchDisplayName, lpLanguageId );
#	else
		QOR_PP_UNREF4( lpSystemName, lpName, lpDisplayName, cchDisplayName );
		QOR_PP_UNREF( lpLanguageId );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "LookupPrivilegeDisplayNameA" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::LookupPrivilegeDisplayNameW( LPCWSTR lpSystemName, LPCWSTR lpName, LPWSTR lpDisplayName, LPDWORD cchDisplayName, LPDWORD lpLanguageId )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::LookupPrivilegeDisplayName" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( LookupPrivilegeDisplayNameW );
		bResult = Call< BOOL, LPCWSTR, LPCWSTR, LPWSTR, LPDWORD, LPDWORD >( pFunc, lpSystemName, lpName, lpDisplayName, cchDisplayName, lpLanguageId );
#	else
		QOR_PP_UNREF4( lpSystemName, lpName, lpDisplayName, cchDisplayName );
		QOR_PP_UNREF( lpLanguageId );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "LookupPrivilegeDisplayNameW" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::LookupPrivilegeNameA( LPCSTR lpSystemName, PLUID lpLuid, LPSTR lpName, LPDWORD cchName )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::LookupPrivilegeName" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( LookupPrivilegeNameA );
		bResult = Call< BOOL, LPCSTR, PLUID, LPSTR, LPDWORD >( pFunc, lpSystemName, lpLuid, lpName, cchName );
#	else
		QOR_PP_UNREF4( lpSystemName, lpLuid, lpName, cchName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "LookupPrivilegeNameA" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::LookupPrivilegeNameW( LPCWSTR lpSystemName, PLUID lpLuid, LPWSTR lpName, LPDWORD cchName )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::LookupPrivilegeName" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( LookupPrivilegeNameW );
		bResult = Call< BOOL, LPCWSTR, PLUID, LPWSTR, LPDWORD >( pFunc, lpSystemName, lpLuid, lpName, cchName );
#	else
		QOR_PP_UNREF4( lpSystemName, lpLuid, lpName, cchName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "LookupPrivilegeNameW" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::LookupPrivilegeValueA( LPCSTR lpSystemName, LPCSTR lpName, ::PLUID lpLuid )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::LookupPrivilegeValue" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( LookupPrivilegeValueA );
		bResult = Call< BOOL, LPCSTR, LPCSTR, ::PLUID >( pFunc, lpSystemName, lpName, lpLuid );
#	else
		QOR_PP_UNREF( lpSystemName );
		QOR_PP_UNREF( lpName );
		QOR_PP_UNREF( lpLuid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "LookupPrivilegeValueA" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::LookupPrivilegeValueW( LPCWSTR lpSystemName, LPCWSTR lpName, ::PLUID lpLuid )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::LookupPrivilegeValue" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( LookupPrivilegeValueW );
		bResult = Call< BOOL, LPCWSTR, LPCWSTR, ::PLUID >( pFunc, lpSystemName, lpName, lpLuid );
#	else
		QOR_PP_UNREF( lpSystemName );
		QOR_PP_UNREF( lpName );
		QOR_PP_UNREF( lpLuid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "LookupPrivilegeValueW" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::OpenProcessToken( HANDLE ProcessHandle, DWORD DesiredAccess, PHANDLE TokenHandle )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::OpenProcessToken" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OpenProcessToken );
		bResult = Call< BOOL, HANDLE, DWORD, PHANDLE >( pFunc, ProcessHandle, DesiredAccess, TokenHandle );
#	else
		QOR_PP_UNREF( ProcessHandle );
		QOR_PP_UNREF( DesiredAccess );
		QOR_PP_UNREF( TokenHandle );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OpenProcessToken" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::OpenThreadToken( HANDLE ThreadHandle, DWORD DesiredAccess, BOOL OpenAsSelf, PHANDLE TokenHandle )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::OpenThreadToken" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OpenThreadToken );
		bResult = Call< BOOL, HANDLE, DWORD, BOOL, PHANDLE >( pFunc, ThreadHandle, DesiredAccess, OpenAsSelf, TokenHandle );
#	else
		QOR_PP_UNREF4( ThreadHandle, DesiredAccess, OpenAsSelf, TokenHandle );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OpenThreadToken" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	VOID CAdvAPI32::QuerySecurityAccessMask( SECURITY_INFORMATION SecurityInformation, LPDWORD DesiredAccess )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::QuerySecurityAccessMask" );	
#	if ( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( QuerySecurityAccessMask );
		voidCall< SECURITY_INFORMATION, LPDWORD >( pFunc, SecurityInformation, DesiredAccess );
#	else
		QOR_PP_UNREF( SecurityInformation );
		QOR_PP_UNREF( DesiredAccess );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "QuerySecurityAccessMask" ), _T( "Windows Vista" ), 0 ));
#	endif
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::SetEntriesInAclA( ULONG cCountOfExplicitEntries, ::PEXPLICIT_ACCESS pListOfExplicitEntries, ::PACL OldAcl,
						   ::PACL* NewAcl )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::SetEntriesInAcl" );	
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( SetEntriesInAclA );
		dwResult = Call< DWORD, ULONG, ::PEXPLICIT_ACCESS, ::PACL, ::PACL* >( pFunc, cCountOfExplicitEntries, pListOfExplicitEntries, OldAcl, NewAcl );
#	else
		QOR_PP_UNREF4( cCountOfExplicitEntries, pListOfExplicitEntries, OldAcl, NewAcl );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "SetEntriesInAclA" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::SetEntriesInAclW( ULONG cCountOfExplicitEntries, ::PEXPLICIT_ACCESS pListOfExplicitEntries, ::PACL OldAcl, ::PACL* NewAcl )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::SetEntriesInAcl" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( SetEntriesInAclW );
		dwResult = Call< DWORD, ULONG, ::PEXPLICIT_ACCESS, ::PACL, ::PACL* >( pFunc, cCountOfExplicitEntries, 
			pListOfExplicitEntries, OldAcl, NewAcl );
#	else
		QOR_PP_UNREF4( cCountOfExplicitEntries, pListOfExplicitEntries, OldAcl, NewAcl );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "SetEntriesInAclW" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::SetNamedSecurityInfoA( LPSTR pObjectName, ::SE_OBJECT_TYPE ObjectType, SECURITY_INFORMATION SecurityInfo,
								PSID psidOwner, PSID psidGroup, ::PACL pDacl, ::PACL pSacl )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::SetNamedSecurityInfo" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( SetNamedSecurityInfoA );
		dwResult = Call< DWORD, LPSTR, ::SE_OBJECT_TYPE, SECURITY_INFORMATION, PSID, PSID, ::PACL, ::PACL >( pFunc, 
			pObjectName, ObjectType, SecurityInfo, psidOwner, psidGroup, pDacl, pSacl );
#	else
		QOR_PP_UNREF4( pObjectName, ObjectType, SecurityInfo, psidOwner );
		QOR_PP_UNREF( psidGroup );
		QOR_PP_UNREF( pDacl );
		QOR_PP_UNREF( pSacl );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "SetNamedSecurityInfoA" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::SetNamedSecurityInfoW( LPWSTR pObjectName, ::SE_OBJECT_TYPE ObjectType, SECURITY_INFORMATION SecurityInfo,
							   PSID psidOwner, PSID psidGroup, ::PACL pDacl, ::PACL pSacl )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::SetNamedSecurityInfo" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( SetNamedSecurityInfoW );
		dwResult = Call< DWORD, LPWSTR, ::SE_OBJECT_TYPE, SECURITY_INFORMATION, PSID, PSID, ::PACL, ::PACL >( pFunc, 
			pObjectName, ObjectType, SecurityInfo, psidOwner, psidGroup, pDacl, pSacl );
#	else
		QOR_PP_UNREF4( pObjectName, ObjectType, SecurityInfo, psidOwner );
		QOR_PP_UNREF( psidGroup );
		QOR_PP_UNREF( pDacl );
		QOR_PP_UNREF( pSacl );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "SetNamedSecurityInfoW" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::SetNamedSecurityInfoExA( LPCSTR lpObject, ::SE_OBJECT_TYPE objectType, SECURITY_INFORMATION securityInfo,
								  LPCSTR lpProvider, PACTRL_ACCESS pAccessList, PACTRL_AUDIT pAuditList, 
								  LPSTR lpOwner, LPSTR lpGroup, PACTRL_OVERLAPPED pOverlapped )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::SetNamedSecurityInfoEx" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( SetNamedSecurityInfoExA );
		dwResult = Call< DWORD, LPCSTR, ::SE_OBJECT_TYPE, SECURITY_INFORMATION, LPCSTR, PACTRL_ACCESS,
			PACTRL_AUDIT, LPSTR, LPSTR, PACTRL_OVERLAPPED >( pFunc, lpObject, objectType, securityInfo, 
			lpProvider, pAccessList, pAuditList, lpOwner, lpGroup, pOverlapped );
#	else
		QOR_PP_UNREF4( lpObject, objectType, securityInfo, lpProvider );
		QOR_PP_UNREF4( pAccessList, pAuditList, lpOwner, lpGroup );
		QOR_PP_UNREF( pOverlapped );		
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "SetNamedSecurityInfoExA" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::SetNamedSecurityInfoExW( LPCWSTR lpObject, ::SE_OBJECT_TYPE objectType, SECURITY_INFORMATION securityInfo,
								  LPCWSTR lpProvider, PACTRL_ACCESS pAccessList, PACTRL_AUDIT pAuditList, 
								  LPWSTR lpOwner, LPWSTR lpGroup, PACTRL_OVERLAPPED pOverlapped )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::SetNamedSecurityInfoEx" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( SetNamedSecurityInfoExW );
		dwResult = Call< DWORD, LPCWSTR, ::SE_OBJECT_TYPE, SECURITY_INFORMATION, LPCWSTR, PACTRL_ACCESS,
			PACTRL_AUDIT, LPWSTR, LPWSTR, PACTRL_OVERLAPPED >( pFunc, lpObject, objectType, securityInfo, 
			lpProvider, pAccessList, pAuditList, lpOwner, lpGroup, pOverlapped );
#	else
		QOR_PP_UNREF4( lpObject, objectType, securityInfo, lpProvider );
		QOR_PP_UNREF4( pAccessList, pAuditList, lpOwner, lpGroup );
		QOR_PP_UNREF( pOverlapped );		
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "SetNamedSecurityInfoExW" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	VOID CAdvAPI32::SetSecurityAccessMask( SECURITY_INFORMATION SecurityInformation, LPDWORD DesiredAccess )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::SetSecurityAccessMask" );	
#	if ( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( SetSecurityAccessMask );
		voidCall< SECURITY_INFORMATION, LPDWORD >( pFunc, SecurityInformation, DesiredAccess );
#	else
		QOR_PP_UNREF( SecurityInformation );		
		QOR_PP_UNREF( DesiredAccess );		
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "SetSecurityAccessMask" ), _T( "Windows Vista" ), 0 ));
#	endif
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::SetSecurityDescriptorControl( PSECURITY_DESCRIPTOR pSecurityDescriptor, 
									  SECURITY_DESCRIPTOR_CONTROL ControlBitsOfInterest, 
									  SECURITY_DESCRIPTOR_CONTROL ControlBitsToSet )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::SetSecurityDescriptorControl" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( SetSecurityDescriptorControl );
		bResult = Call< BOOL, PSECURITY_DESCRIPTOR, SECURITY_DESCRIPTOR_CONTROL, SECURITY_DESCRIPTOR_CONTROL >(
			pFunc, pSecurityDescriptor, ControlBitsOfInterest, ControlBitsToSet );
#	else
		QOR_PP_UNREF( pSecurityDescriptor );
		QOR_PP_UNREF( ControlBitsOfInterest );
		QOR_PP_UNREF( ControlBitsToSet );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "SetSecurityDescriptorControl" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::SetSecurityInfo( HANDLE handle, ::SE_OBJECT_TYPE ObjectType, SECURITY_INFORMATION SecurityInfo, 
						  PSID psidOwner, PSID psidGroup, ::PACL pDacl, ::PACL pSacl )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::SetSecurityInfo" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( SetSecurityInfo );
		dwResult = Call< DWORD, HANDLE, ::SE_OBJECT_TYPE, SECURITY_INFORMATION, PSID, PSID, ::PACL, ::PACL >( pFunc,
			handle, ObjectType, SecurityInfo, psidOwner, psidGroup, pDacl, pSacl );
#	else
		QOR_PP_UNREF4( handle, ObjectType, SecurityInfo, psidOwner );
		QOR_PP_UNREF( psidGroup );
		QOR_PP_UNREF( pDacl );
		QOR_PP_UNREF( pSacl );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "SetSecurityInfo" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::SetSecurityInfoExA( HANDLE hObject, ::SE_OBJECT_TYPE objectType, SECURITY_INFORMATION securityInfo, 
							 LPCSTR lpProvider, PACTRL_ACCESS pAccessList, PACTRL_AUDIT pAuditList, LPSTR lpOwner,
							 LPSTR lpGroup, PACTRL_OVERLAPPED pOverlapped )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::SetSecurityInfoEx" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( SetSecurityInfoExA );
		dwResult = Call< DWORD, HANDLE, ::SE_OBJECT_TYPE, SECURITY_INFORMATION, LPCSTR, PACTRL_ACCESS, PACTRL_AUDIT, 
		LPSTR, LPSTR, PACTRL_OVERLAPPED >( pFunc, hObject, objectType, securityInfo, lpProvider, pAccessList,
		pAuditList, lpOwner, lpGroup, pOverlapped );
#	else
		QOR_PP_UNREF4( hObject, objectType, securityInfo, lpProvider);
		QOR_PP_UNREF4( pAccessList, pAuditList, lpOwner, lpGroup );
		QOR_PP_UNREF( pOverlapped );		
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "SetSecurityInfoExA" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::SetSecurityInfoExW( HANDLE hObject, ::SE_OBJECT_TYPE objectType, SECURITY_INFORMATION securityInfo, 
							 LPCWSTR lpProvider, PACTRL_ACCESS pAccessList, PACTRL_AUDIT pAuditList, LPWSTR lpOwner, 
							 LPWSTR lpGroup, PACTRL_OVERLAPPED pOverlapped )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::SetSecurityInfoEx" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( SetSecurityInfoExW );
		dwResult = Call< DWORD, HANDLE, ::SE_OBJECT_TYPE, SECURITY_INFORMATION, LPCWSTR, PACTRL_ACCESS, PACTRL_AUDIT, 
		LPWSTR, LPWSTR, PACTRL_OVERLAPPED >( pFunc, hObject, objectType, securityInfo, lpProvider, pAccessList,
		pAuditList, lpOwner, lpGroup, pOverlapped );
#	else
		QOR_PP_UNREF4( hObject, objectType, securityInfo, lpProvider);
		QOR_PP_UNREF4( pAccessList, pAuditList, lpOwner, lpGroup );
		QOR_PP_UNREF( pOverlapped );		
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "SetSecurityInfoExW" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::SetThreadToken( PHANDLE Thread, HANDLE Token )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::SetThreadToken" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( SetThreadToken );
		bResult = Call< BOOL, PHANDLE, HANDLE >( pFunc, Thread, Token );
#	else
		QOR_PP_UNREF( Thread );
		QOR_PP_UNREF( Token );		
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "SetThreadToken" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::SetTokenInformation( HANDLE TokenHandle, ::TOKEN_INFORMATION_CLASS TokenInformationClass, 
							 LPVOID TokenInformation, DWORD TokenInformationLength )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::SetTokenInformation" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( SetTokenInformation );
		bResult = Call< BOOL, HANDLE, ::TOKEN_INFORMATION_CLASS, LPVOID, DWORD >( pFunc, TokenHandle, 
			TokenInformationClass, TokenInformation, TokenInformationLength );
#	else
		QOR_PP_UNREF4( TokenHandle, TokenInformationClass, TokenInformation, TokenInformationLength );			
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "SetTokenInformation" ), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::TreeResetNamedSecurityInfoA( LPSTR pObjectName, ::SE_OBJECT_TYPE ObjectType, SECURITY_INFORMATION SecurityInfo,
									  PSID pOwner, PSID pGroup, ::PACL pDacl, ::PACL pSacl, BOOL KeepExplicit, 
									  FN_PROGRESS fnProgress, PROG_INVOKE_SETTING ProgressInvokeSetting, PVOID Args )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::TreeResetNamedSecurityInfo" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
#	if ( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( TreeResetNamedSecurityInfoA );
		dwResult = Call< DWORD, LPSTR, ::SE_OBJECT_TYPE, SECURITY_INFORMATION, PSID, PSID, ::PACL, ::PACL, 
			BOOL, FN_PROGRESS, PROG_INVOKE_SETTING, PVOID >( pFunc, pObjectName, ObjectType, 
			SecurityInfo, pOwner, pGroup, pDacl, pSacl, KeepExplicit, fnProgress, ProgressInvokeSetting, Args );
#	else
		QOR_PP_UNREF4( pObjectName, ObjectType, SecurityInfo, pOwner );
		QOR_PP_UNREF4( pGroup, pDacl, pSacl, KeepExplicit );
		QOR_PP_UNREF( fnProgress );
		QOR_PP_UNREF( ProgressInvokeSetting );
		QOR_PP_UNREF( Args );		
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "TreeResetNamedSecurityInfoA" ), _T( "Windows XP" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::TreeResetNamedSecurityInfoW( LPWSTR pObjectName, ::SE_OBJECT_TYPE ObjectType, 
									  SECURITY_INFORMATION SecurityInfo, PSID pOwner, PSID pGroup, ::PACL pDacl, 
									  ::PACL pSacl, BOOL KeepExplicit, FN_PROGRESS fnProgress, 
									  PROG_INVOKE_SETTING ProgressInvokeSetting, PVOID Args )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::TreeResetNamedSecurityInfo" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
#	if ( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( TreeResetNamedSecurityInfoW );
		dwResult = Call< DWORD, LPWSTR, ::SE_OBJECT_TYPE, SECURITY_INFORMATION, PSID, PSID, ::PACL, ::PACL, 
			BOOL, FN_PROGRESS, PROG_INVOKE_SETTING, PVOID >( pFunc, pObjectName, ObjectType, 
			SecurityInfo, pOwner, pGroup, pDacl, pSacl, KeepExplicit, fnProgress, ProgressInvokeSetting, Args );
#	else
		QOR_PP_UNREF4( pObjectName, ObjectType, SecurityInfo, pOwner );
		QOR_PP_UNREF4( pGroup, pDacl, pSacl, KeepExplicit );
		QOR_PP_UNREF( fnProgress );
		QOR_PP_UNREF( ProgressInvokeSetting );
		QOR_PP_UNREF( Args );		
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "TreeResetNamedSecurityInfoW" ), _T( "Windows XP" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::TreeSetNamedSecurityInfoA( LPSTR pObjectName, ::SE_OBJECT_TYPE ObjectType, SECURITY_INFORMATION SecurityInfo, 
									PSID pOwner, PSID pGroup, ::PACL pDacl, ::PACL pSacl, DWORD dwAction, 
									FN_PROGRESS fnProgress, PROG_INVOKE_SETTING ProgressInvokeSetting, PVOID Args )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::TreeSetNamedSecurityInfo" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( TreeSetNamedSecurityInfoA );
		dwResult = Call< DWORD, LPSTR, ::SE_OBJECT_TYPE, SECURITY_INFORMATION, PSID, PSID, ::PACL, ::PACL, 
			DWORD, FN_PROGRESS, PROG_INVOKE_SETTING, PVOID >( pFunc, pObjectName, ObjectType, 
			SecurityInfo, pOwner, pGroup, pDacl, pSacl, dwAction, fnProgress, ProgressInvokeSetting, Args );
#	else
		QOR_PP_UNREF4( pObjectName, ObjectType, SecurityInfo, pOwner );
		QOR_PP_UNREF4( pGroup, pDacl, pSacl, dwAction );
		QOR_PP_UNREF( fnProgress );
		QOR_PP_UNREF( ProgressInvokeSetting );
		QOR_PP_UNREF( Args );		
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "TreeSetNamedSecurityInfoA" ), _T( "Windows Vista" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::TreeSetNamedSecurityInfoW( LPWSTR pObjectName, ::SE_OBJECT_TYPE ObjectType, SECURITY_INFORMATION SecurityInfo,
									PSID pOwner, PSID pGroup, ::PACL pDacl, ::PACL pSacl, DWORD dwAction, 
									FN_PROGRESS fnProgress, PROG_INVOKE_SETTING ProgressInvokeSetting, PVOID Args )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::TreeSetNamedSecurityInfo" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( TreeSetNamedSecurityInfoW );
		dwResult = Call< DWORD, LPWSTR, ::SE_OBJECT_TYPE, SECURITY_INFORMATION, PSID, PSID, ::PACL, ::PACL, 
			DWORD, FN_PROGRESS, PROG_INVOKE_SETTING, PVOID >( pFunc, pObjectName, ObjectType, 
			SecurityInfo, pOwner, pGroup, pDacl, pSacl, dwAction, fnProgress, ProgressInvokeSetting, Args );
#	else
		QOR_PP_UNREF4( pObjectName, ObjectType, SecurityInfo, pOwner );
		QOR_PP_UNREF4( pGroup, pDacl, pSacl, dwAction );
		QOR_PP_UNREF( fnProgress );
		QOR_PP_UNREF( ProgressInvokeSetting );
		QOR_PP_UNREF( Args );		
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "TreeSetNamedSecurityInfoW" ), _T( "Windows Vista" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::AreAllAccessesGranted( DWORD GrantedAccess, DWORD DesiredAccess )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::AreAllAccessesGranted" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( AreAllAccessesGranted );
		bResult = Call< BOOL, DWORD, DWORD >( pFunc, GrantedAccess, DesiredAccess );
#	else
		QOR_PP_UNREF( GrantedAccess );
		QOR_PP_UNREF( DesiredAccess );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("AreAllAccessesGranted"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::AreAnyAccessesGranted( DWORD GrantedAccess, DWORD DesiredAccess )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::AreAnyAccessesGranted" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( AreAnyAccessesGranted );
		bResult = Call< BOOL, DWORD, DWORD >( pFunc, GrantedAccess, DesiredAccess );
#	else
		QOR_PP_UNREF( GrantedAccess );
		QOR_PP_UNREF( DesiredAccess );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("AreAnyAccessesGranted"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::BuildSecurityDescriptorA( ::PTRUSTEE pOwner, ::PTRUSTEE pGroup, ULONG cCountOfAccessEntries, 
								   ::PEXPLICIT_ACCESS pListOfAccessEntries, ULONG cCountOfAuditEntries, 
								   ::PEXPLICIT_ACCESS pListOfAuditEntries, PSECURITY_DESCRIPTOR pOldSD, 
								   PULONG pSizeNewSD, PSECURITY_DESCRIPTOR* pNewSD )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::BuildSecurityDescriptor" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( BuildSecurityDescriptorA );
		dwResult = Call< DWORD, ::PTRUSTEE, ::PTRUSTEE, ULONG, ::PEXPLICIT_ACCESS, ULONG, ::PEXPLICIT_ACCESS, 
			PSECURITY_DESCRIPTOR, PULONG, PSECURITY_DESCRIPTOR* >( pFunc, pOwner, pGroup, cCountOfAccessEntries,
			pListOfAccessEntries, cCountOfAuditEntries, pListOfAuditEntries, pOldSD, pSizeNewSD, pNewSD );
#	else
		QOR_PP_UNREF4( pOwner, pGroup, cCountOfAccessEntries, pListOfAccessEntries );
		QOR_PP_UNREF4( cCountOfAuditEntries, pListOfAuditEntries, pOldSD, pSizeNewSD );
		QOR_PP_UNREF( pNewSD );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("BuildSecurityDescriptorA"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::BuildSecurityDescriptorW( ::PTRUSTEE pOwner, ::PTRUSTEE pGroup, ULONG cCountOfAccessEntries, 
								   ::PEXPLICIT_ACCESS pListOfAccessEntries, ULONG cCountOfAuditEntries, 
								   ::PEXPLICIT_ACCESS pListOfAuditEntries, PSECURITY_DESCRIPTOR pOldSD, 
								   PULONG pSizeNewSD, PSECURITY_DESCRIPTOR* pNewSD )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::BuildSecurityDescriptor" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( BuildSecurityDescriptorW );
		dwResult = Call< DWORD, ::PTRUSTEE, ::PTRUSTEE, ULONG, ::PEXPLICIT_ACCESS, ULONG, ::PEXPLICIT_ACCESS, 
			PSECURITY_DESCRIPTOR, PULONG, PSECURITY_DESCRIPTOR* >( pFunc, pOwner, pGroup, cCountOfAccessEntries,
			pListOfAccessEntries, cCountOfAuditEntries, pListOfAuditEntries, pOldSD, pSizeNewSD, pNewSD );
#	else
		QOR_PP_UNREF4( pOwner, pGroup, cCountOfAccessEntries, pListOfAccessEntries );
		QOR_PP_UNREF4( cCountOfAuditEntries, pListOfAuditEntries, pOldSD, pSizeNewSD );
		QOR_PP_UNREF( pNewSD );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("BuildSecurityDescriptorW"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::ConvertToAutoInheritPrivateObjectSecurity( PSECURITY_DESCRIPTOR ParentDescriptor, 
												   PSECURITY_DESCRIPTOR CurrentSecurityDescriptor, 
												   PSECURITY_DESCRIPTOR* NewSecurityDescriptor, ::GUID* ObjectType,
												   BOOLEAN IsDirectoryObject, ::PGENERIC_MAPPING GenericMapping )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::ConvertToAutoInheritPrivateObjectSecurity" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ConvertToAutoInheritPrivateObjectSecurity );
		bResult = Call< BOOL, PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR*,
			::GUID*, BOOLEAN, ::PGENERIC_MAPPING >( pFunc, ParentDescriptor, CurrentSecurityDescriptor, 
			NewSecurityDescriptor, ObjectType, IsDirectoryObject, GenericMapping );
#	else
		QOR_PP_UNREF4( ParentDescriptor, CurrentSecurityDescriptor, NewSecurityDescriptor, ObjectType );
		QOR_PP_UNREF( IsDirectoryObject );
		QOR_PP_UNREF( GenericMapping );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("ConvertToAutoInheritPrivateObjectSecurity"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CreatePrivateObjectSecurity( PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CreatorDescriptor,
									 PSECURITY_DESCRIPTOR* NewDescriptor, BOOL IsDirectoryObject, HANDLE Token,
									 ::PGENERIC_MAPPING GenericMapping )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CreatePrivateObjectSecurity" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CreatePrivateObjectSecurity );
		bResult = Call< BOOL, PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR*, BOOL, HANDLE,
			::PGENERIC_MAPPING >( pFunc, ParentDescriptor, CreatorDescriptor, NewDescriptor, IsDirectoryObject, 
			Token, GenericMapping );
#	else
		QOR_PP_UNREF4( ParentDescriptor, CreatorDescriptor, NewDescriptor, IsDirectoryObject );
		QOR_PP_UNREF( Token );
		QOR_PP_UNREF( GenericMapping );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("CreatePrivateObjectSecurity"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CreatePrivateObjectSecurityEx( PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CreatorDescriptor,
									   PSECURITY_DESCRIPTOR* NewDescriptor, ::GUID* ObjectType, BOOL IsContainerObject,
									   ULONG AutoInheritFlags, HANDLE Token, ::PGENERIC_MAPPING GenericMapping )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CreatePrivateObjectSecurityEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CreatePrivateObjectSecurityEx );
		bResult = Call< BOOL, PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR*, ::GUID*, BOOL, 
			ULONG, HANDLE, ::PGENERIC_MAPPING >( pFunc, ParentDescriptor, CreatorDescriptor, NewDescriptor, 
			ObjectType, IsContainerObject, AutoInheritFlags, Token, GenericMapping );
#	else
		QOR_PP_UNREF4( ParentDescriptor, CreatorDescriptor, NewDescriptor, ObjectType );
		QOR_PP_UNREF4( IsContainerObject, AutoInheritFlags, Token, GenericMapping );		
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("CreatePrivateObjectSecurityEx"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CreatePrivateObjectSecurityWithMultipleInheritance( PSECURITY_DESCRIPTOR ParentDescriptor,
															PSECURITY_DESCRIPTOR CreatorDescriptor,
															PSECURITY_DESCRIPTOR *NewDescriptor,
															::GUID** ObjectTypes, ULONG GuidCount, 
															BOOL IsContainerObject, ULONG AutoInheritFlags, 
															HANDLE Token, ::PGENERIC_MAPPING GenericMapping )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CreatePrivateObjectSecurityWithMultipleInheritance" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( CreatePrivateObjectSecurityWithMultipleInheritance );
		bResult = Call< BOOL, PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR*, ::GUID**, ULONG, 
			BOOL, ULONG, HANDLE, ::PGENERIC_MAPPING >( pFunc, ParentDescriptor, CreatorDescriptor, NewDescriptor, 
			ObjectTypes, GuidCount, IsContainerObject, AutoInheritFlags, Token, GenericMapping );
#	else
		QOR_PP_UNREF4( ParentDescriptor, CreatorDescriptor, NewDescriptor, ObjectTypes );
		QOR_PP_UNREF4( GuidCount, IsContainerObject, AutoInheritFlags, Token );
		QOR_PP_UNREF( GenericMapping );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("CreatePrivateObjectSecurityWithMultipleInheritance"), _T( "Windows XP" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CreateProcessAsUserA( HANDLE hToken, LPCSTR lpApplicationName, LPSTR lpCommandLine, 
							  LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes,
							  BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, 
							  LPCSTR lpCurrentDirectory, LPSTARTUPINFO lpStartupInfo, 
							  LPPROCESS_INFORMATION lpProcessInformation )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CreateProcessAsUser" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CreateProcessAsUserA );
		bResult = Call< BOOL, HANDLE, LPCSTR, LPSTR, LPSECURITY_ATTRIBUTES, LPSECURITY_ATTRIBUTES,
			BOOL, DWORD, LPVOID, LPCSTR, LPSTARTUPINFO, LPPROCESS_INFORMATION >( pFunc, hToken, lpApplicationName,
			lpCommandLine, lpProcessAttributes, lpThreadAttributes, bInheritHandles, dwCreationFlags, 
			lpEnvironment, lpCurrentDirectory, lpStartupInfo, lpProcessInformation );
#	else
		QOR_PP_UNREF4( hToken, lpApplicationName, lpCommandLine, lpProcessAttributes );		
		QOR_PP_UNREF4( lpThreadAttributes, bInheritHandles, dwCreationFlags, lpEnvironment );		
		QOR_PP_UNREF( lpCurrentDirectory );
		QOR_PP_UNREF( lpStartupInfo );
		QOR_PP_UNREF( lpProcessInformation );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("CreateProcessAsUserA"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CreateProcessAsUserW( HANDLE hToken, LPCWSTR lpApplicationName, LPWSTR lpCommandLine, 
							  LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes,
							  BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, 
							  LPCWSTR lpCurrentDirectory, LPSTARTUPINFO lpStartupInfo, 
							  LPPROCESS_INFORMATION lpProcessInformation )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CreateProcessAsUser" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CreateProcessAsUserW );
		bResult = Call< BOOL, HANDLE, LPCWSTR, LPWSTR, LPSECURITY_ATTRIBUTES, LPSECURITY_ATTRIBUTES,
			BOOL, DWORD, LPVOID, LPCWSTR, LPSTARTUPINFO, LPPROCESS_INFORMATION >( pFunc, hToken, lpApplicationName,
			lpCommandLine, lpProcessAttributes, lpThreadAttributes, bInheritHandles, dwCreationFlags, 
			lpEnvironment, lpCurrentDirectory, lpStartupInfo, lpProcessInformation );
#	else
		QOR_PP_UNREF4( hToken, lpApplicationName, lpCommandLine, lpProcessAttributes );		
		QOR_PP_UNREF4( lpThreadAttributes, bInheritHandles, dwCreationFlags, lpEnvironment );		
		QOR_PP_UNREF( lpCurrentDirectory );
		QOR_PP_UNREF( lpStartupInfo );
		QOR_PP_UNREF( lpProcessInformation );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("CreateProcessAsUserW"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::CreateProcessWithLogonW( LPCWSTR lpUsername, LPCWSTR lpDomain, LPCWSTR lpPassword, DWORD dwLogonFlags, 
								 LPCWSTR lpApplicationName, LPWSTR lpCommandLine, DWORD dwCreationFlags, 
								 LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, 
								 LPPROCESS_INFORMATION lpProcessInfo )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CreateProcessWithLogonW" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CreateProcessWithLogonW );
		bResult = Call< BOOL, LPCWSTR, LPCWSTR, LPCWSTR, DWORD, LPCWSTR, LPWSTR, DWORD, LPVOID, LPCWSTR,
			LPSTARTUPINFOW, LPPROCESS_INFORMATION >( pFunc, lpUsername, lpDomain, lpPassword, dwLogonFlags, 
			lpApplicationName, lpCommandLine, dwCreationFlags, lpEnvironment, lpCurrentDirectory, lpStartupInfo,
			lpProcessInfo );
#	else
		QOR_PP_UNREF4( lpUsername, lpDomain, lpPassword, dwLogonFlags );		
		QOR_PP_UNREF4( lpApplicationName, lpCommandLine, dwCreationFlags, lpEnvironment );		
		QOR_PP_UNREF( lpCurrentDirectory );
		QOR_PP_UNREF( lpStartupInfo );
		QOR_PP_UNREF( lpProcessInfo );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("CreateProcessWithLogonW"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::DestroyPrivateObjectSecurity( PSECURITY_DESCRIPTOR* ObjectDescriptor )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::DestroyPrivateObjectSecurity" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( DestroyPrivateObjectSecurity );
		bResult = Call< BOOL, PSECURITY_DESCRIPTOR* >( pFunc, ObjectDescriptor );
#	else
		QOR_PP_UNREF( ObjectDescriptor );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("DestroyPrivateObjectSecurity"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::GetPrivateObjectSecurity( PSECURITY_DESCRIPTOR ObjectDescriptor, SECURITY_INFORMATION SecurityInformation,
								  PSECURITY_DESCRIPTOR ResultantDescriptor, DWORD DescriptorLength, 
								  PDWORD ReturnLength )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetPrivateObjectSecurity" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetPrivateObjectSecurity );
		bResult = Call< BOOL, PSECURITY_DESCRIPTOR, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR, DWORD, PDWORD >( 
			pFunc, ObjectDescriptor, SecurityInformation, ResultantDescriptor, DescriptorLength, ReturnLength );
#	else
		QOR_PP_UNREF4( ObjectDescriptor, SecurityInformation, ResultantDescriptor, DescriptorLength );
		QOR_PP_UNREF( ReturnLength );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("GetPrivateObjectSecurity"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::ImpersonateAnonymousToken( HANDLE ThreadHandle )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::ImpersonateAnonymousToken" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ImpersonateAnonymousToken );
		bResult = Call< BOOL, HANDLE >( pFunc, ThreadHandle );
#	else
		QOR_PP_UNREF( ThreadHandle );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("ImpersonateAnonymousToken"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::ImpersonateLoggedOnUser( HANDLE hToken )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::ImpersonateLoggedOnUser" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ImpersonateLoggedOnUser );
		bResult = Call< BOOL, HANDLE >( pFunc, hToken );
#	else
		QOR_PP_UNREF( hToken );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("ImpersonateLoggedOnUser"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::ImpersonateNamedPipeClient( HANDLE hNamedPipe )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::ImpersonateNamedPipeClient" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ImpersonateNamedPipeClient );
		bResult = Call< BOOL, HANDLE >( pFunc, hNamedPipe );
#	else
		QOR_PP_UNREF( hNamedPipe );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("ImpersonateNamedPipeClient"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::ImpersonateSelf( SECURITY_IMPERSONATION_LEVEL ImpersonationLevel )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::ImpersonateSelf" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ImpersonateSelf );
		bResult = Call< BOOL, SECURITY_IMPERSONATION_LEVEL >( pFunc, ImpersonationLevel );
#	else
		QOR_PP_UNREF( ImpersonationLevel );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("ImpersonateSelf"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::LookupSecurityDescriptorPartsA( ::PTRUSTEE* pOwner, ::PTRUSTEE* pGroup, PULONG cCountOfAccessEntries, 
										 ::PEXPLICIT_ACCESS* pListOfAccessEntries, PULONG cCountOfAuditEntries, 
										 ::PEXPLICIT_ACCESS* pListOfAuditEntries, PSECURITY_DESCRIPTOR pSD )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::LookupSecurityDescriptorParts" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( LookupSecurityDescriptorPartsA );
		dwResult = Call< DWORD, ::PTRUSTEE*, ::PTRUSTEE*, PULONG, ::PEXPLICIT_ACCESS*, PULONG, 
			::PEXPLICIT_ACCESS*, PSECURITY_DESCRIPTOR >( pFunc, pOwner, pGroup, cCountOfAccessEntries, 
			pListOfAccessEntries, cCountOfAuditEntries, pListOfAuditEntries, pSD );
#	else
		QOR_PP_UNREF4( pOwner, pGroup, cCountOfAccessEntries, pListOfAccessEntries );
		QOR_PP_UNREF( cCountOfAuditEntries );
		QOR_PP_UNREF( pListOfAuditEntries );
		QOR_PP_UNREF( pSD );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("LookupSecurityDescriptorPartsA"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::LookupSecurityDescriptorPartsW( ::PTRUSTEE* pOwner, ::PTRUSTEE* pGroup, PULONG cCountOfAccessEntries, 
										 ::PEXPLICIT_ACCESS* pListOfAccessEntries, PULONG cCountOfAuditEntries, 
										 ::PEXPLICIT_ACCESS* pListOfAuditEntries, PSECURITY_DESCRIPTOR pSD )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::LookupSecurityDescriptorParts" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( LookupSecurityDescriptorPartsW );
		dwResult = Call< DWORD, ::PTRUSTEE*, ::PTRUSTEE*, PULONG, ::PEXPLICIT_ACCESS*, PULONG, 
			::PEXPLICIT_ACCESS*, PSECURITY_DESCRIPTOR >( pFunc, pOwner, pGroup, cCountOfAccessEntries, 
			pListOfAccessEntries, cCountOfAuditEntries, pListOfAuditEntries, pSD );
#	else
		QOR_PP_UNREF4( pOwner, pGroup, cCountOfAccessEntries, pListOfAccessEntries );
		QOR_PP_UNREF( cCountOfAuditEntries );
		QOR_PP_UNREF( pListOfAuditEntries );
		QOR_PP_UNREF( pSD );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("LookupSecurityDescriptorPartsW"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	VOID CAdvAPI32::MapGenericMask( PDWORD AccessMask, ::PGENERIC_MAPPING GenericMapping )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::MapGenericMask" );
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( MapGenericMask );
		voidCall< PDWORD, ::PGENERIC_MAPPING >( pFunc, AccessMask, GenericMapping );
#	else
		QOR_PP_UNREF( AccessMask );
		QOR_PP_UNREF( GenericMapping );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("MapGenericMask"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::ObjectCloseAuditAlarmA( LPCSTR SubsystemName, LPVOID HandleId, BOOL GenerateOnClose )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::ObjectCloseAuditAlarm" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ObjectCloseAuditAlarmA );
		bResult = Call< BOOL, LPCSTR, LPVOID, BOOL >( pFunc, SubsystemName, HandleId, GenerateOnClose );
#	else
		QOR_PP_UNREF( SubsystemName );
		QOR_PP_UNREF( HandleId );
		QOR_PP_UNREF( GenerateOnClose );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("ObjectCloseAuditAlarmA"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::ObjectCloseAuditAlarmW( LPCWSTR SubsystemName, LPVOID HandleId, BOOL GenerateOnClose )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::ObjectCloseAuditAlarm" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ObjectCloseAuditAlarmW );
		bResult = Call< BOOL, LPCWSTR, LPVOID, BOOL >( pFunc, SubsystemName, HandleId, GenerateOnClose );
#	else
		QOR_PP_UNREF( SubsystemName );
		QOR_PP_UNREF( HandleId );
		QOR_PP_UNREF( GenerateOnClose );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("ObjectCloseAuditAlarmW"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::ObjectDeleteAuditAlarmA( LPCSTR SubsystemName, LPVOID HandleId, BOOL GenerateOnClose )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::ObjectDeleteAuditAlarm" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ObjectDeleteAuditAlarmA );
		bResult = Call< BOOL, LPCSTR, LPVOID, BOOL >( pFunc, SubsystemName, HandleId, GenerateOnClose );
#	else
		QOR_PP_UNREF( SubsystemName );
		QOR_PP_UNREF( HandleId );
		QOR_PP_UNREF( GenerateOnClose );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("ObjectDeleteAuditAlarmA"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::ObjectDeleteAuditAlarmW( LPCWSTR SubsystemName, LPVOID HandleId, BOOL GenerateOnClose )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::ObjectDeleteAuditAlarm" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ObjectDeleteAuditAlarmW );
		bResult = Call< BOOL, LPCWSTR, LPVOID, BOOL >( pFunc, SubsystemName, HandleId, GenerateOnClose );
#	else
		QOR_PP_UNREF( SubsystemName );
		QOR_PP_UNREF( HandleId );
		QOR_PP_UNREF( GenerateOnClose );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("ObjectDeleteAuditAlarmW"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::ObjectOpenAuditAlarmA( LPCSTR SubsystemName, LPVOID HandleId, LPSTR ObjectTypeName, LPSTR ObjectName, 
							   PSECURITY_DESCRIPTOR pSecurityDescriptor, HANDLE ClientToken, DWORD DesiredAccess,
							   DWORD GrantedAccess, ::PPRIVILEGE_SET Privileges, BOOL ObjectCreation, 
							   BOOL AccessGranted, LPBOOL GenerateOnClose )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::ObjectOpenAuditAlarm" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ObjectOpenAuditAlarmA );
		bResult = Call< BOOL, LPCSTR, LPVOID, LPSTR, LPSTR, PSECURITY_DESCRIPTOR, HANDLE, DWORD, DWORD,
			::PPRIVILEGE_SET, BOOL, BOOL, LPBOOL >( pFunc, SubsystemName, HandleId, ObjectTypeName, ObjectName,
			pSecurityDescriptor, ClientToken, DesiredAccess, GrantedAccess, Privileges, ObjectCreation, 
			AccessGranted, GenerateOnClose );
#	else
		QOR_PP_UNREF4( SubsystemName, HandleId, ObjectTypeName, ObjectName );
		QOR_PP_UNREF4( pSecurityDescriptor, ClientToken, DesiredAccess, GrantedAccess );
		QOR_PP_UNREF4( Privileges, ObjectCreation, AccessGranted, GenerateOnClose );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("ObjectOpenAuditAlarmA"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::ObjectOpenAuditAlarmW( LPCWSTR SubsystemName, LPVOID HandleId, LPWSTR ObjectTypeName, LPWSTR ObjectName,
							   PSECURITY_DESCRIPTOR pSecurityDescriptor, HANDLE ClientToken, DWORD DesiredAccess,
							   DWORD GrantedAccess, ::PPRIVILEGE_SET Privileges, BOOL ObjectCreation,
							   BOOL AccessGranted, LPBOOL GenerateOnClose )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::ObjectOpenAuditAlarm" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ObjectOpenAuditAlarmW );
		bResult = Call< BOOL, LPCWSTR, LPVOID, LPWSTR, LPWSTR, PSECURITY_DESCRIPTOR, HANDLE, DWORD, DWORD,
			::PPRIVILEGE_SET, BOOL, BOOL, LPBOOL >( pFunc, SubsystemName, HandleId, ObjectTypeName, ObjectName,
			pSecurityDescriptor, ClientToken, DesiredAccess, GrantedAccess, Privileges, ObjectCreation, 
			AccessGranted, GenerateOnClose );
#	else
		QOR_PP_UNREF4( SubsystemName, HandleId, ObjectTypeName, ObjectName );
		QOR_PP_UNREF4( pSecurityDescriptor, ClientToken, DesiredAccess, GrantedAccess );
		QOR_PP_UNREF4( Privileges, ObjectCreation, AccessGranted, GenerateOnClose );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("ObjectOpenAuditAlarmW"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::ObjectPrivilegeAuditAlarmA( LPCSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken, DWORD DesiredAccess,
									::PPRIVILEGE_SET Privileges, BOOL AccessGranted )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::ObjectPrivilegeAuditAlarm" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ObjectPrivilegeAuditAlarmA );
		bResult = Call< BOOL, LPCSTR, LPVOID, HANDLE, DWORD, ::PPRIVILEGE_SET, BOOL >( pFunc, SubsystemName, 
			HandleId, ClientToken, DesiredAccess, Privileges, AccessGranted );
#	else
		QOR_PP_UNREF4( SubsystemName, HandleId, ClientToken, DesiredAccess );
		QOR_PP_UNREF( Privileges );
		QOR_PP_UNREF( AccessGranted );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("ObjectPrivilegeAuditAlarmA"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::ObjectPrivilegeAuditAlarmW( LPCWSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken, DWORD DesiredAccess,
									::PPRIVILEGE_SET Privileges, BOOL AccessGranted )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::ObjectPrivilegeAuditAlarm" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ObjectPrivilegeAuditAlarmW );
		bResult = Call< BOOL, LPCWSTR, LPVOID, HANDLE, DWORD, ::PPRIVILEGE_SET, BOOL >( pFunc, SubsystemName, 
			HandleId, ClientToken, DesiredAccess, Privileges, AccessGranted );
#	else
		QOR_PP_UNREF4( SubsystemName, HandleId, ClientToken, DesiredAccess );
		QOR_PP_UNREF( Privileges );
		QOR_PP_UNREF( AccessGranted );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("ObjectPrivilegeAuditAlarmW"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::PrivilegeCheck( HANDLE ClientToken, ::PPRIVILEGE_SET RequiredPrivileges, LPBOOL pfResult )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::PrivilegeCheck" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( PrivilegeCheck );
		bResult = Call< BOOL, HANDLE, ::PPRIVILEGE_SET, LPBOOL >( pFunc, ClientToken, RequiredPrivileges, pfResult );
#	else
		QOR_PP_UNREF( ClientToken );
		QOR_PP_UNREF( RequiredPrivileges );
		QOR_PP_UNREF( pfResult );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("PrivilegeCheck"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::PrivilegedServiceAuditAlarmA( LPCSTR SubsystemName, LPCSTR ServiceName, HANDLE ClientToken, 
									  ::PPRIVILEGE_SET Privileges, BOOL AccessGranted )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::PrivilegedServiceAuditAlarm" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( PrivilegedServiceAuditAlarmA );
		bResult = Call< BOOL, LPCSTR, LPCSTR, HANDLE, ::PPRIVILEGE_SET, BOOL >( pFunc, SubsystemName, 
			ServiceName, ClientToken, Privileges, AccessGranted );
#	else
		QOR_PP_UNREF4( SubsystemName, ServiceName, ClientToken, Privileges );
		QOR_PP_UNREF( AccessGranted );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("PrivilegedServiceAuditAlarmA"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::PrivilegedServiceAuditAlarmW( LPCWSTR SubsystemName, LPCWSTR ServiceName, HANDLE ClientToken, 
									  ::PPRIVILEGE_SET Privileges, BOOL AccessGranted )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::PrivilegedServiceAuditAlarm" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( PrivilegedServiceAuditAlarmW );
		bResult = Call< BOOL, LPCWSTR, LPCWSTR, HANDLE, ::PPRIVILEGE_SET, BOOL >( pFunc, SubsystemName, 
			ServiceName, ClientToken, Privileges, AccessGranted );
#	else
		QOR_PP_UNREF4( SubsystemName, ServiceName, ClientToken, Privileges );
		QOR_PP_UNREF( AccessGranted );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("PrivilegedServiceAuditAlarmW"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::RevertToSelf( void )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RevertToSelf" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RevertToSelf );
		bResult = Call< BOOL >( pFunc );
#	else		
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("RevertToSelf"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::SetPrivateObjectSecurity( SECURITY_INFORMATION SecurityInformation, 
								  PSECURITY_DESCRIPTOR ModificationDescriptor, 
								  PSECURITY_DESCRIPTOR* ObjectsSecurityDescriptor, ::PGENERIC_MAPPING GenericMapping,
								  HANDLE Token )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::SetPrivateObjectSecurity" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( SetPrivateObjectSecurity );
		bResult = Call< BOOL, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR*,
			::PGENERIC_MAPPING, HANDLE >( pFunc, SecurityInformation, ModificationDescriptor, 
			ObjectsSecurityDescriptor, GenericMapping, Token );
#	else
		QOR_PP_UNREF4( SecurityInformation, ModificationDescriptor, ObjectsSecurityDescriptor, GenericMapping );
		QOR_PP_UNREF( Token );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("SetPrivateObjectSecurity"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::SetPrivateObjectSecurityEx( SECURITY_INFORMATION SecurityInformation, 
									PSECURITY_DESCRIPTOR ModificationDescriptor, 
									PSECURITY_DESCRIPTOR* ObjectsSecurityDescriptor, ULONG AutoInheritFlags,
									::PGENERIC_MAPPING GenericMapping, HANDLE Token )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::SetPrivateObjectSecurityEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( SetPrivateObjectSecurityEx );
		bResult = Call< BOOL, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR*, ULONG, 
			::PGENERIC_MAPPING, HANDLE >( pFunc, SecurityInformation, ModificationDescriptor, 
			ObjectsSecurityDescriptor, AutoInheritFlags, GenericMapping, Token );
#	else		
		QOR_PP_UNREF4( SecurityInformation, ModificationDescriptor, ObjectsSecurityDescriptor, AutoInheritFlags );
		QOR_PP_UNREF( GenericMapping );
		QOR_PP_UNREF( Token );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("SetPrivateObjectSecurityEx"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::AddAccessAllowedAce( ::PACL pAcl, DWORD dwAceRevision, DWORD AccessMask, PSID pSid )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::AddAccessAllowedAce" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( AddAccessAllowedAce );
		bResult = Call< BOOL, ::PACL, DWORD, DWORD, PSID >( pFunc, pAcl, dwAceRevision, AccessMask, pSid );
#	else
		QOR_PP_UNREF4( pAcl, dwAceRevision, AccessMask, pSid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("AddAccessAllowedAce"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::AddAccessAllowedAceEx( ::PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, PSID pSid )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::AddAccessAllowedAceEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( AddAccessAllowedAceEx );
		bResult = Call< BOOL, ::PACL, DWORD, DWORD, DWORD, PSID >( pFunc, pAcl, dwAceRevision, AceFlags, AccessMask, pSid );
#	else
		QOR_PP_UNREF4( pAcl, dwAceRevision, AceFlags, AccessMask);
		QOR_PP_UNREF( pSid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("AddAccessAllowedAceEx"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::AddAccessAllowedObjectAce( ::PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, 
								   ::GUID* ObjectTypeGuid, ::GUID* InheritedObjectTypeGuid, PSID pSid )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::AddAccessAllowedObjectAce" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( AddAccessAllowedObjectAce );
		bResult = Call< BOOL, ::PACL, DWORD, DWORD, DWORD, ::GUID*, ::GUID*, PSID >( pFunc, pAcl, dwAceRevision, 
			AceFlags, AccessMask, ObjectTypeGuid, InheritedObjectTypeGuid, pSid );
#	else
		QOR_PP_UNREF4( pAcl, dwAceRevision, AceFlags, AccessMask);
		QOR_PP_UNREF( ObjectTypeGuid );
		QOR_PP_UNREF( InheritedObjectTypeGuid );
		QOR_PP_UNREF( pSid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("AddAccessAllowedObjectAce"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::AddAccessDeniedAce( ::PACL pAcl, DWORD dwAceRevision, DWORD AccessMask, PSID pSid )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::AddAccessDeniedAce" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( AddAccessDeniedAce );
		bResult = Call< BOOL, ::PACL, DWORD, DWORD, PSID >( pFunc, pAcl, dwAceRevision, AccessMask, pSid );
#	else
		QOR_PP_UNREF4( pAcl, dwAceRevision, AccessMask, pSid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("AddAccessDeniedAce"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::AddAccessDeniedAceEx( ::PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, PSID pSid )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::AddAccessDeniedAceEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( AddAccessDeniedAceEx );
		bResult = Call< BOOL, ::PACL, DWORD, DWORD, DWORD, PSID >( pFunc, pAcl, dwAceRevision, AceFlags, AccessMask, pSid );
#	else
		QOR_PP_UNREF4( pAcl, dwAceRevision, AceFlags, AccessMask );
		QOR_PP_UNREF( pSid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("AddAccessDeniedAceEx"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::AddAccessDeniedObjectAce( ::PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, 
								  ::GUID* ObjectTypeGuid, ::GUID* InheritedObjectTypeGuid, PSID pSid )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::AddAccessDeniedObjectAce" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( AddAccessDeniedObjectAce );
		bResult = Call< BOOL, ::PACL, DWORD, DWORD, DWORD, ::GUID*, ::GUID*, PSID >( pFunc, pAcl, dwAceRevision, 
			AceFlags, AccessMask, ObjectTypeGuid, InheritedObjectTypeGuid, pSid );
#	else
		QOR_PP_UNREF4( pAcl, dwAceRevision, AceFlags, AccessMask );
		QOR_PP_UNREF( ObjectTypeGuid );
		QOR_PP_UNREF( InheritedObjectTypeGuid );
		QOR_PP_UNREF( pSid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("AddAccessDeniedObjectAce"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::AddAce( ::PACL pAcl, DWORD dwAceRevision, DWORD dwStartingAceIndex, LPVOID pAceList, DWORD nAceListLength )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::AddAce" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( AddAce );
		bResult = Call< BOOL, ::PACL, DWORD, DWORD, LPVOID, DWORD >( pFunc, pAcl, dwAceRevision, dwStartingAceIndex,
			pAceList, nAceListLength );
#	else
		QOR_PP_UNREF4( pAcl, dwAceRevision, dwStartingAceIndex, pAceList );
		QOR_PP_UNREF( nAceListLength );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("AddAce"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::AddAuditAccessAce( ::PACL pAcl, DWORD dwAceRevision, DWORD dwAccessMask, PSID pSid, BOOL bAuditSuccess, 
						   BOOL bAuditFailure )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::AddAuditAccessAce" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( AddAuditAccessAce );
		bResult = Call< BOOL, ::PACL, DWORD, DWORD, PSID, BOOL, BOOL >( pFunc, pAcl, dwAceRevision, dwAccessMask,
			pSid, bAuditSuccess, bAuditFailure );
#	else
		QOR_PP_UNREF4( pAcl, dwAceRevision, dwAccessMask, pSid );
		QOR_PP_UNREF( bAuditSuccess );
		QOR_PP_UNREF( bAuditFailure );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("AddAuditAccessAce"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::AddAuditAccessAceEx( ::PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD dwAccessMask, PSID pSid, 
							 BOOL bAuditSuccess, BOOL bAuditFailure )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::AddAuditAccessAceEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( AddAuditAccessAceEx );
		bResult = Call< BOOL, ::PACL, DWORD, DWORD, DWORD, PSID, BOOL, BOOL >( pFunc, pAcl, dwAceRevision, 
			AceFlags, dwAccessMask, pSid, bAuditSuccess, bAuditFailure );
#	else
		QOR_PP_UNREF4( pAcl, dwAceRevision, AceFlags, dwAccessMask );
		QOR_PP_UNREF( pSid );
		QOR_PP_UNREF( bAuditSuccess );
		QOR_PP_UNREF( bAuditFailure );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("AddAuditAccessAceEx"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::AddAuditAccessObjectAce( ::PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD dwAccessMask, 
								 ::GUID* ObjectTypeGuid, ::GUID* InheritedObjectTypeGuid, PSID pSid, 
								 BOOL bAuditSuccess, BOOL bAuditFailure )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::AddAuditAccessObjectAce" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( AddAuditAccessObjectAce );
		bResult = Call< BOOL, ::PACL, DWORD, DWORD, DWORD, ::GUID*, ::GUID*, PSID, BOOL, BOOL >( pFunc, pAcl, 
			dwAceRevision, AceFlags, dwAccessMask, ObjectTypeGuid, InheritedObjectTypeGuid, pSid, bAuditSuccess, bAuditFailure );
#	else
		QOR_PP_UNREF4( pAcl, dwAceRevision, AceFlags, dwAccessMask );
		QOR_PP_UNREF4( ObjectTypeGuid, InheritedObjectTypeGuid, bAuditSuccess, bAuditFailure );
		QOR_PP_UNREF( pSid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("AddAuditAccessObjectAce"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::DeleteAce( ::PACL pAcl, DWORD dwAceIndex )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::DeleteAce" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( DeleteAce );
		bResult = Call< BOOL, ::PACL, DWORD >( pFunc, pAcl, dwAceIndex );
#	else
		QOR_PP_UNREF( pAcl );
		QOR_PP_UNREF( dwAceIndex );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("DeleteAce"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::FindFirstFreeAce( ::PACL pAcl, LPVOID* pAce )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::FindFirstFreeAce" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( FindFirstFreeAce );
		bResult = Call< BOOL, ::PACL, LPVOID* >( pFunc, pAcl, pAce );
#	else
		QOR_PP_UNREF( pAcl );
		QOR_PP_UNREF( pAce );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("FindFirstFreeAce"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::FreeInheritedFromArray( PINHERITED_FROM pInheritArray, USHORT AceCnt, PFN_OBJECT_MGR_FUNCTS pfnArray )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::FreeInheritedFromArray" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
#	if ( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( FreeInheritedFromArray );
		dwResult = Call< DWORD, PINHERITED_FROM, USHORT, PFN_OBJECT_MGR_FUNCTS >( pFunc, pInheritArray, AceCnt,
			pfnArray );
#	else
		QOR_PP_UNREF( pInheritArray );
		QOR_PP_UNREF( AceCnt );
		QOR_PP_UNREF( pfnArray );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("FreeInheritedFromArray"), _T( "Windows XP" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::GetAce( ::PACL pAcl, DWORD dwAceIndex, LPVOID* pAce )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetAce" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetAce );
		bResult = Call< BOOL, ::PACL, DWORD, LPVOID* >( pFunc, pAcl, dwAceIndex, pAce );
#	else
		QOR_PP_UNREF( pAcl );
		QOR_PP_UNREF( dwAceIndex );
		QOR_PP_UNREF( pAce );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("GetAce"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::GetAclInformation( ::PACL pAcl, LPVOID pAclInformation, DWORD nAclInformationLength, 
						   ::ACL_INFORMATION_CLASS dwAclInformationClass )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetAclInformation" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetAclInformation );
		bResult = Call< BOOL, ::PACL, LPVOID, DWORD, ::ACL_INFORMATION_CLASS >( pFunc, pAcl, pAclInformation, nAclInformationLength, dwAclInformationClass );
#	else
		QOR_PP_UNREF4( pAcl, pAclInformation, nAclInformationLength, dwAclInformationClass );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("GetAclInformation"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::GetFileSecurityA( LPCSTR lpFileName, SECURITY_INFORMATION RequestedInformation, 
						 PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD nLength, LPDWORD lpnLengthNeeded )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetFileSecurity" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetFileSecurityA );
		bResult = Call< BOOL, LPCSTR, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR, DWORD, LPDWORD >( pFunc, 
			lpFileName, RequestedInformation, pSecurityDescriptor, nLength, lpnLengthNeeded );
#	else
		QOR_PP_UNREF4( lpFileName, RequestedInformation, pSecurityDescriptor, nLength );
		QOR_PP_UNREF( lpnLengthNeeded );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("GetFileSecurityA"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::GetFileSecurityW( LPCWSTR lpFileName, SECURITY_INFORMATION RequestedInformation, 
						 PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD nLength, LPDWORD lpnLengthNeeded )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetFileSecurity" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetFileSecurityW );
		bResult = Call< BOOL, LPCWSTR, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR, DWORD, LPDWORD >( pFunc, 
			lpFileName, RequestedInformation, pSecurityDescriptor, nLength, lpnLengthNeeded );
#	else
		QOR_PP_UNREF4( lpFileName, RequestedInformation, pSecurityDescriptor, nLength );
		QOR_PP_UNREF( lpnLengthNeeded );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("GetFileSecurityW"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::GetInheritanceSourceA( LPSTR pObjectName, SE_OBJECT_TYPE ObjectType, SECURITY_INFORMATION SecurityInfo, 
								BOOL Container, ::GUID** pObjectClassGuids, DWORD GuidCount, ::PACL pAcl, 
								PFN_OBJECT_MGR_FUNCTS pfnArray, PGENERIC_MAPPING pGenericMapping, 
								PINHERITED_FROM pInheritArray )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetInheritanceSource" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
#	if ( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( GetInheritanceSourceA );
		dwResult = Call< DWORD, LPSTR, SE_OBJECT_TYPE, SECURITY_INFORMATION, BOOL, ::GUID**, DWORD, ::PACL, 
			PFN_OBJECT_MGR_FUNCTS, PGENERIC_MAPPING, PINHERITED_FROM >( pFunc, pObjectName, ObjectType,
			SecurityInfo, Container, pObjectClassGuids, GuidCount, pAcl, pfnArray, pGenericMapping, 
			pInheritArray );
#	else
		QOR_PP_UNREF4( pObjectName, ObjectType, SecurityInfo, Container );
		QOR_PP_UNREF4( pObjectClassGuids, GuidCount, pAcl, pfnArray );
		QOR_PP_UNREF( pGenericMapping );
		QOR_PP_UNREF( pInheritArray );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("GetInheritanceSourceA"), _T( "Windows XP" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::GetInheritanceSourceW( LPWSTR pObjectName, SE_OBJECT_TYPE ObjectType, SECURITY_INFORMATION SecurityInfo,
								BOOL Container, ::GUID** pObjectClassGuids, DWORD GuidCount, ::PACL pAcl,
								PFN_OBJECT_MGR_FUNCTS pfnArray, PGENERIC_MAPPING pGenericMapping,
								PINHERITED_FROM pInheritArray )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetInheritanceSource" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
#	if ( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( GetInheritanceSourceW );
		dwResult = Call< DWORD, LPWSTR, SE_OBJECT_TYPE, SECURITY_INFORMATION, BOOL, ::GUID**, DWORD, ::PACL, 
			PFN_OBJECT_MGR_FUNCTS, PGENERIC_MAPPING, PINHERITED_FROM >( pFunc, pObjectName, ObjectType,
			SecurityInfo, Container, pObjectClassGuids, GuidCount, pAcl, pfnArray, pGenericMapping, 
			pInheritArray );
#	else
		QOR_PP_UNREF4( pObjectName, ObjectType, SecurityInfo, Container );
		QOR_PP_UNREF4( pObjectClassGuids, GuidCount, pAcl, pfnArray );
		QOR_PP_UNREF( pGenericMapping );
		QOR_PP_UNREF( pInheritArray );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("GetInheritanceSourceW"), _T( "Windows XP" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::GetKernelObjectSecurity( HANDLE Handle, SECURITY_INFORMATION RequestedInformation, 
								 PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD nLength, LPDWORD lpnLengthNeeded )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetKernelObjectSecurity" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetFileSecurityW );
		bResult = Call< BOOL, HANDLE, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR, DWORD, LPDWORD >( pFunc, Handle,
			RequestedInformation, pSecurityDescriptor, nLength, lpnLengthNeeded );
#	else
		QOR_PP_UNREF4( Handle, RequestedInformation, pSecurityDescriptor, nLength );
		QOR_PP_UNREF( lpnLengthNeeded );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("GetKernelObjectSecurity"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::GetSecurityDescriptorDacl( PSECURITY_DESCRIPTOR pSecurityDescriptor, LPBOOL lpbDaclPresent, ::PACL* pDacl, 
								   LPBOOL lpbDaclDefaulted )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetSecurityDescriptorDacl" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetSecurityDescriptorDacl );
		bResult = Call< BOOL, PSECURITY_DESCRIPTOR, LPBOOL, ::PACL*, LPBOOL >( pFunc, pSecurityDescriptor, lpbDaclPresent, pDacl, lpbDaclDefaulted );
#	else
		QOR_PP_UNREF4( pSecurityDescriptor, lpbDaclPresent, pDacl, lpbDaclDefaulted );		
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("GetSecurityDescriptorDacl"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::GetSecurityDescriptorGroup( PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID* pGroup, LPBOOL lpbGroupDefaulted )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetSecurityDescriptorGroup" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetSecurityDescriptorGroup );
		bResult = Call< BOOL, PSECURITY_DESCRIPTOR, PSID*, LPBOOL >( pFunc, pSecurityDescriptor, pGroup, lpbGroupDefaulted );
#	else
		QOR_PP_UNREF( pSecurityDescriptor );
		QOR_PP_UNREF( pGroup );
		QOR_PP_UNREF( lpbGroupDefaulted );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("GetSecurityDescriptorGroup"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::GetSecurityDescriptorLength( PSECURITY_DESCRIPTOR pSecurityDescriptor )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetSecurityDescriptorLength" );
		DWORD dwResult = 0;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetSecurityDescriptorLength );
		dwResult = Call< DWORD, PSECURITY_DESCRIPTOR >( pFunc, pSecurityDescriptor );
#	else
		QOR_PP_UNREF( pSecurityDescriptor );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("GetSecurityDescriptorLength"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::GetSecurityDescriptorOwner( PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID* pOwner, LPBOOL lpbOwnerDefaulted )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetSecurityDescriptorOwner" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetSecurityDescriptorOwner );
		bResult = Call< BOOL, PSECURITY_DESCRIPTOR, PSID*, LPBOOL >( pFunc, pSecurityDescriptor, pOwner, lpbOwnerDefaulted );
#	else
		QOR_PP_UNREF( pSecurityDescriptor );
		QOR_PP_UNREF( pOwner );
		QOR_PP_UNREF( lpbOwnerDefaulted );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("GetSecurityDescriptorOwner"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::GetSecurityDescriptorRMControl( PSECURITY_DESCRIPTOR SecurityDescriptor, PUCHAR RMControl )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetSecurityDescriptorRMControl" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetSecurityDescriptorRMControl );
		dwResult = Call< DWORD, PSECURITY_DESCRIPTOR, PUCHAR >( pFunc, SecurityDescriptor, RMControl );
#	else
		QOR_PP_UNREF( SecurityDescriptor );
		QOR_PP_UNREF( RMControl );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("GetSecurityDescriptorRMControl"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::GetSecurityDescriptorSacl( PSECURITY_DESCRIPTOR pSecurityDescriptor, LPBOOL lpbSaclPresent, ::PACL* pSacl, 
								   LPBOOL lpbSaclDefaulted )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetSecurityDescriptorSacl" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetSecurityDescriptorSacl );
		bResult = Call< BOOL, PSECURITY_DESCRIPTOR, LPBOOL, ::PACL*, LPBOOL >( pFunc, pSecurityDescriptor, lpbSaclPresent, pSacl, lpbSaclDefaulted );
#	else
		QOR_PP_UNREF4( pSecurityDescriptor, lpbSaclPresent, pSacl, lpbSaclDefaulted );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("GetSecurityDescriptorSacl"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::InitializeAcl( ::PACL pAcl, DWORD nAclLength, DWORD dwAclRevision )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::InitializeAcl" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( InitializeAcl );
		bResult = Call< BOOL, ::PACL, DWORD, DWORD >( pFunc, pAcl, nAclLength, dwAclRevision );
#	else
		QOR_PP_UNREF( pAcl );
		QOR_PP_UNREF( nAclLength );
		QOR_PP_UNREF( dwAclRevision );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("InitializeAcl"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::InitializeSecurityDescriptor( PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD dwRevision )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::InitializeSecurityDescriptor" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( InitializeSecurityDescriptor );
		bResult = Call< BOOL, PSECURITY_DESCRIPTOR, DWORD >( pFunc, pSecurityDescriptor, dwRevision );
#	else
		QOR_PP_UNREF( pSecurityDescriptor );
		QOR_PP_UNREF( dwRevision );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("InitializeSecurityDescriptor"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::IsValidAcl( ::PACL pAcl )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::IsValidAcl" );
		BOOL bResult = FALSE;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( IsValidAcl );
		bResult = Call< BOOL, ::PACL >( pFunc, pAcl );		
#	else
		QOR_PP_UNREF( pAcl );		
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("IsValidAcl"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::IsValidSecurityDescriptor( PSECURITY_DESCRIPTOR pSecurityDescriptor )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::IsValidSecurityDescriptor" );
		BOOL bResult = FALSE;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( IsValidSecurityDescriptor );
		bResult = Call< BOOL, PSECURITY_DESCRIPTOR >( pFunc, pSecurityDescriptor );		
#	else
		QOR_PP_UNREF( pSecurityDescriptor );		
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("IsValidSecurityDescriptor"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::MakeAbsoluteSD( PSECURITY_DESCRIPTOR pSelfRelativeSD, PSECURITY_DESCRIPTOR pAbsoluteSD, 
						LPDWORD lpdwAbsoluteSDSize, ::PACL pDacl, LPDWORD lpdwDaclSize, ::PACL pSacl, 
						LPDWORD lpdwSaclSize, PSID pOwner, LPDWORD lpdwOwnerSize, PSID pPrimaryGroup, 
						LPDWORD lpdwPrimaryGroupSize )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::MakeAbsoluteSD" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( MakeAbsoluteSD );
		bResult = Call< BOOL, PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR, LPDWORD, ::PACL, LPDWORD, ::PACL, LPDWORD,
			PSID, LPDWORD, PSID, LPDWORD >( pFunc, pSelfRelativeSD, pAbsoluteSD, lpdwAbsoluteSDSize, pDacl, 
			lpdwDaclSize, pSacl, lpdwSaclSize, pOwner, lpdwOwnerSize, pPrimaryGroup, lpdwPrimaryGroupSize );		
#	else
		QOR_PP_UNREF4( pSelfRelativeSD, pAbsoluteSD, lpdwAbsoluteSDSize, pDacl );
		QOR_PP_UNREF4( lpdwDaclSize, pSacl, lpdwSaclSize, pOwner );
		QOR_PP_UNREF( lpdwOwnerSize );
		QOR_PP_UNREF( pPrimaryGroup );
		QOR_PP_UNREF( lpdwPrimaryGroupSize );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("MakeAbsoluteSD"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::MakeAbsoluteSD2( PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor, LPDWORD lpdwBufferSize )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::MakeAbsoluteSD2" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( MakeAbsoluteSD2 );
		bResult = Call< BOOL, PSECURITY_DESCRIPTOR, LPDWORD >( pFunc, pSelfRelativeSecurityDescriptor, lpdwBufferSize );		
#	else
		QOR_PP_UNREF( pSelfRelativeSecurityDescriptor );		
		QOR_PP_UNREF( lpdwBufferSize );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("MakeAbsoluteSD2"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::MakeSelfRelativeSD( PSECURITY_DESCRIPTOR pAbsoluteSD, PSECURITY_DESCRIPTOR pSelfRelativeSD,
							LPDWORD lpdwBufferLength )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::MakeSelfRelativeSD" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( MakeSelfRelativeSD );
		bResult = Call< BOOL, PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR, LPDWORD >( pFunc, pAbsoluteSD, pSelfRelativeSD, lpdwBufferLength );		
#	else
		QOR_PP_UNREF( pAbsoluteSD );		
		QOR_PP_UNREF( pSelfRelativeSD );
		QOR_PP_UNREF( lpdwBufferLength );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("MakeSelfRelativeSD"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::QueryServiceObjectSecurity( SC_HANDLE hService, SECURITY_INFORMATION dwSecurityInformation, 
									PSECURITY_DESCRIPTOR lpSecurityDescriptor, DWORD cbBufSize, 
									LPDWORD pcbBytesNeeded )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::QueryServiceObjectSecurity" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( QueryServiceObjectSecurity );
		bResult = Call< BOOL, SC_HANDLE, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR, DWORD, LPDWORD >( pFunc, 
			hService, dwSecurityInformation, lpSecurityDescriptor, cbBufSize, pcbBytesNeeded  );		
#	else
		QOR_PP_UNREF4( hService, dwSecurityInformation, lpSecurityDescriptor, cbBufSize );		
		QOR_PP_UNREF( pcbBytesNeeded );		
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("QueryServiceObjectSecurity"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegGetKeySecurity( HKEY hKey, SECURITY_INFORMATION SecurityInformation, 
						   PSECURITY_DESCRIPTOR pSecurityDescriptor, LPDWORD lpcbSecurityDescriptor )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegGetKeySecurity" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegGetKeySecurity );
		lResult = Call< LONG, HKEY, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR, LPDWORD >( pFunc, hKey,
			SecurityInformation, pSecurityDescriptor, lpcbSecurityDescriptor );
#	else
		QOR_PP_UNREF4( hKey, SecurityInformation, pSecurityDescriptor, lpcbSecurityDescriptor );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("RegGetKeySecurity"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegSetKeySecurity( HKEY hKey, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegSetKeySecurity" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegSetKeySecurity );
		lResult = Call< LONG, HKEY, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR >( pFunc, hKey, 
			SecurityInformation, pSecurityDescriptor );
#	else
		QOR_PP_UNREF( hKey );
		QOR_PP_UNREF( SecurityInformation );
		QOR_PP_UNREF( pSecurityDescriptor );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("RegSetKeySecurity"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::SetAclInformation( ::PACL pAcl, LPVOID pAclInformation, DWORD nAclInformationLength, 
						   ::ACL_INFORMATION_CLASS dwAclInformationClass )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::SetAclInformation" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( SetAclInformation );
		bResult = Call< BOOL, ::PACL, LPVOID, DWORD, ::ACL_INFORMATION_CLASS >( pFunc, pAcl, pAclInformation, nAclInformationLength, dwAclInformationClass  );		
#	else
		QOR_PP_UNREF4( pAcl, pAclInformation, nAclInformationLength, dwAclInformationClass );		
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("SetAclInformation"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::SetFileSecurityA( LPCSTR lpFileName, SECURITY_INFORMATION SecurityInformation, 
						  PSECURITY_DESCRIPTOR pSecurityDescriptor )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::SetFileSecurity" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( SetFileSecurityA );
		bResult = Call< BOOL, LPCSTR, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR >( pFunc, lpFileName, SecurityInformation, pSecurityDescriptor );		
#	else
		QOR_PP_UNREF( lpFileName );
		QOR_PP_UNREF( SecurityInformation );
		QOR_PP_UNREF( pSecurityDescriptor );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("SetFileSecurityA"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::SetFileSecurityW( LPCWSTR lpFileName, SECURITY_INFORMATION SecurityInformation, 
						  PSECURITY_DESCRIPTOR pSecurityDescriptor )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::SetFileSecurity" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( SetFileSecurityW );
		bResult = Call< BOOL, LPCWSTR, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR >( pFunc, lpFileName, SecurityInformation, pSecurityDescriptor );		
#	else
		QOR_PP_UNREF( lpFileName );
		QOR_PP_UNREF( SecurityInformation );
		QOR_PP_UNREF( pSecurityDescriptor );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("SetFileSecurityW"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::SetKernelObjectSecurity( HANDLE Handle, SECURITY_INFORMATION SecurityInformation, 
								 PSECURITY_DESCRIPTOR SecurityDescriptor )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::SetKernelObjectSecurity" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( SetKernelObjectSecurity );
		bResult = Call< BOOL, HANDLE, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR >( pFunc, Handle, SecurityInformation, SecurityDescriptor );		
#	else
		QOR_PP_UNREF( Handle );
		QOR_PP_UNREF( SecurityInformation );
		QOR_PP_UNREF( SecurityDescriptor );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("SetKernelObjectSecurity"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::SetSecurityDescriptorDacl( PSECURITY_DESCRIPTOR pSecurityDescriptor, BOOL bDaclPresent, ::PACL pDacl,
								   BOOL bDaclDefaulted )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::SetSecurityDescriptorDacl" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( SetSecurityDescriptorDacl );
		bResult = Call< BOOL, PSECURITY_DESCRIPTOR, BOOL, ::PACL, BOOL >( pFunc, pSecurityDescriptor, bDaclPresent, pDacl, bDaclDefaulted );
#	else
		QOR_PP_UNREF4( pSecurityDescriptor, bDaclPresent, pDacl, bDaclDefaulted );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("SetSecurityDescriptorDacl"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::SetSecurityDescriptorGroup( PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID pGroup, BOOL bGroupDefaulted )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::SetSecurityDescriptorGroup" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( SetSecurityDescriptorGroup );
		bResult = Call< BOOL, PSECURITY_DESCRIPTOR, PSID, BOOL >( pFunc, pSecurityDescriptor, pGroup, bGroupDefaulted );
#	else
		QOR_PP_UNREF( pSecurityDescriptor );
		QOR_PP_UNREF( pGroup );
		QOR_PP_UNREF( bGroupDefaulted );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("SetSecurityDescriptorGroup"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::SetSecurityDescriptorOwner( PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID pOwner, BOOL bOwnerDefaulted )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::SetSecurityDescriptorOwner" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( SetSecurityDescriptorOwner );
		bResult = Call< BOOL, PSECURITY_DESCRIPTOR, PSID, BOOL >( pFunc, pSecurityDescriptor, pOwner, bOwnerDefaulted );
#	else
		QOR_PP_UNREF( pSecurityDescriptor );
		QOR_PP_UNREF( pOwner );
		QOR_PP_UNREF( bOwnerDefaulted );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("SetSecurityDescriptorOwner"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::SetSecurityDescriptorRMControl( PSECURITY_DESCRIPTOR SecurityDescriptor, PUCHAR RMControl )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::SetSecurityDescriptorRMControl" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( SetSecurityDescriptorRMControl );
		dwResult = Call< BOOL, PSECURITY_DESCRIPTOR, PUCHAR >( pFunc, SecurityDescriptor, RMControl );
#	else
		QOR_PP_UNREF( SecurityDescriptor );
		QOR_PP_UNREF( RMControl );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("SetSecurityDescriptorRMControl"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::SetSecurityDescriptorSacl( PSECURITY_DESCRIPTOR pSecurityDescriptor, BOOL bSaclPresent, ::PACL pSacl, BOOL bSaclDefaulted )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::SetSecurityDescriptorSacl" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( SetSecurityDescriptorSacl );
		bResult = Call< BOOL, PSECURITY_DESCRIPTOR, BOOL, ::PACL, BOOL >( pFunc, pSecurityDescriptor, bSaclPresent, pSacl, bSaclDefaulted );
#	else
		QOR_PP_UNREF4( pSecurityDescriptor, bSaclPresent, pSacl, bSaclDefaulted );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("SetSecurityDescriptorSacl"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::SetServiceObjectSecurity( SC_HANDLE hService, SECURITY_INFORMATION dwSecurityInformation, 
								  PSECURITY_DESCRIPTOR lpSecurityDescriptor )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::SetServiceObjectSecurity" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( SetServiceObjectSecurity );
		bResult = Call< BOOL, SC_HANDLE, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR >( pFunc, hService, dwSecurityInformation, lpSecurityDescriptor );
#	else
		QOR_PP_UNREF( hService );
		QOR_PP_UNREF( dwSecurityInformation );
		QOR_PP_UNREF( lpSecurityDescriptor );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("SetServiceObjectSecurity"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::ConvertAccessToSecurityDescriptorA( PACTRL_ACCESS pAccessList, PACTRL_AUDIT pAuditList, LPCSTR lpOwner,
											 LPCSTR lpGroup, PSECURITY_DESCRIPTOR* ppSecDescriptor )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::ConvertAccessToSecurityDescriptor" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ConvertAccessToSecurityDescriptorA );
		dwResult = Call< DWORD, PACTRL_ACCESS, PACTRL_AUDIT, LPCSTR, LPCSTR, PSECURITY_DESCRIPTOR* >( pFunc, pAccessList, pAuditList, lpOwner, lpGroup, ppSecDescriptor );
#	else
		QOR_PP_UNREF4( pAccessList, pAuditList, lpOwner, lpGroup );
		QOR_PP_UNREF( ppSecDescriptor );		
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("ConvertAccessToSecurityDescriptorA"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::ConvertAccessToSecurityDescriptorW( PACTRL_ACCESS pAccessList, PACTRL_AUDIT pAuditList, LPCWSTR lpOwner, 
											 LPCWSTR lpGroup, PSECURITY_DESCRIPTOR *ppSecDescriptor )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::ConvertAccessToSecurityDescriptor" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ConvertAccessToSecurityDescriptorW );
		dwResult = Call< DWORD, PACTRL_ACCESS, PACTRL_AUDIT, LPCWSTR, LPCWSTR, PSECURITY_DESCRIPTOR* >( pFunc, pAccessList, pAuditList, lpOwner, lpGroup, ppSecDescriptor );
#	else
		QOR_PP_UNREF4( pAccessList, pAuditList, lpOwner, lpGroup );
		QOR_PP_UNREF( ppSecDescriptor );		
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("ConvertAccessToSecurityDescriptorW"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::IsTokenUntrusted( HANDLE TokenHandle )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::IsTokenUntrusted" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( IsTokenUntrusted );
		bResult = Call< BOOL, HANDLE >( pFunc, TokenHandle );
#	else
		QOR_PP_UNREF( TokenHandle );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("IsTokenUntrusted"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::SetEntriesInAccessListA( ULONG cEntries, PACTRL_ACCESS_ENTRY pAccessEntryList, ACCESS_MODE accessMode,
								  LPCSTR lpProperty, PACTRL_ACCESS pOldList, PACTRL_ACCESS* ppNewList )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::SetEntriesInAccessList" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( SetEntriesInAccessListA );
		dwResult = Call< DWORD, ULONG, PACTRL_ACCESS_ENTRY, ACCESS_MODE, LPCSTR, PACTRL_ACCESS, PACTRL_ACCESS* >( 
			pFunc, cEntries, pAccessEntryList, accessMode, lpProperty, pOldList, ppNewList );
#	else
		QOR_PP_UNREF4( cEntries, pAccessEntryList, accessMode, lpProperty );
		QOR_PP_UNREF( pOldList );
		QOR_PP_UNREF( ppNewList );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("SetEntriesInAccessListA"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::SetEntriesInAccessListW( ULONG cEntries, PACTRL_ACCESS_ENTRY pAccessEntryList, ACCESS_MODE accessMode, 
								 LPCWSTR lpProperty, PACTRL_ACCESS pOldList, PACTRL_ACCESS* ppNewList )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::SetEntriesInAccessList" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( SetEntriesInAccessListW );
		dwResult = Call< DWORD, ULONG, PACTRL_ACCESS_ENTRY, ACCESS_MODE, LPCWSTR, PACTRL_ACCESS, PACTRL_ACCESS* >( 
			pFunc, cEntries, pAccessEntryList, accessMode, lpProperty, pOldList, ppNewList );
#	else
		QOR_PP_UNREF4( cEntries, pAccessEntryList, accessMode, lpProperty );
		QOR_PP_UNREF( pOldList );
		QOR_PP_UNREF( ppNewList );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("SetEntriesInAccessListW"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::SetEntriesInAuditListA( ULONG cEntries, PACTRL_ACCESS_ENTRY pAccessEntryList, ACCESS_MODE accessMode, 
								 LPCSTR lpProperty, PACTRL_AUDIT pOldList, PACTRL_AUDIT* ppNewList )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::SetEntriesInAuditList" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( SetEntriesInAuditListA );
		dwResult = Call< DWORD, ULONG, PACTRL_ACCESS_ENTRY, ACCESS_MODE, LPCSTR, PACTRL_AUDIT, PACTRL_AUDIT* >( 
			pFunc, cEntries, pAccessEntryList, accessMode, lpProperty, pOldList, ppNewList );
#	else
		QOR_PP_UNREF4( cEntries, pAccessEntryList, accessMode, lpProperty );
		QOR_PP_UNREF( pOldList );
		QOR_PP_UNREF( ppNewList );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("SetEntriesInAuditListA"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::SetEntriesInAuditListW( ULONG cEntries, PACTRL_ACCESS_ENTRY pAccessEntryList, ACCESS_MODE accessMode, 
								 LPCWSTR lpProperty, PACTRL_AUDIT pOldList, PACTRL_AUDIT* ppNewList )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::SetEntriesInAuditList" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( SetEntriesInAuditListW );
		dwResult = Call< DWORD, ULONG, PACTRL_ACCESS_ENTRY, ACCESS_MODE, LPCWSTR, PACTRL_AUDIT, PACTRL_AUDIT* >( 
			pFunc, cEntries, pAccessEntryList, accessMode, lpProperty, pOldList, ppNewList );
#	else
		QOR_PP_UNREF4( cEntries, pAccessEntryList, accessMode, lpProperty );
		QOR_PP_UNREF( pOldList );
		QOR_PP_UNREF( ppNewList );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("SetEntriesInAuditListW"), _T( "Windows 2000 Professional" ), 0 ));
#	endif
		return dwResult;
	}

}//nsWinQAPI

