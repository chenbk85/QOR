//AdvAPI32.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Encrypted File functions

#include "WinQAPI/AdvAPI32.h"
#include "ReturnCheck.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::AddUsersToEncryptedFile( LPCWSTR lpFileName, PENCRYPTION_CERTIFICATE_LIST pUsers )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::AddUsersToEncryptedFile" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( AddUsersToEncryptedFile );
		dwResult = Call< DWORD, LPCWSTR, PENCRYPTION_CERTIFICATE_LIST >( pFunc, lpFileName, pUsers );
#else
		QOR_PP_UNREF( lpFileName );
		QOR_PP_UNREF( pUsers );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("AddUsersToEncryptedFile"), _T( "Windows 2000" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return dwResult;
	}

	//------------------------------------------------------------------------------
	void CAdvAPI32::CloseEncryptedFileRaw( PVOID pvContext )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CloseEncryptedFileRaw" );
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CloseEncryptedFileRaw );
		voidCall< PVOID >( pFunc, pvContext );
#else
		QOR_PP_UNREF( pvContext );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("CloseEncryptedFileRaw"), _T( "Windows 2000" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::DecryptFileA( LPCSTR lpFileName, DWORD dwReserved )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::DecryptFileA" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( DecryptFileA );
		bResult = Call< BOOL, LPCSTR, DWORD >( pFunc, lpFileName, dwReserved );
#else
		QOR_PP_UNREF( lpFileName );
		QOR_PP_UNREF( dwReserved );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("DecryptFileA"), _T( "Windows 2000" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::DecryptFileW( LPCWSTR lpFileName, DWORD dwReserved )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::DecryptFileW" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( DecryptFileW );
		bResult = Call< BOOL, LPCWSTR, DWORD >( pFunc, lpFileName, dwReserved );
#else
		QOR_PP_UNREF( lpFileName );
		QOR_PP_UNREF( dwReserved );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("DecryptFileW"), _T( "Windows 2000" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::DuplicateEncryptionInfoFile( LPCTSTR SrcFileName, LPCTSTR DstFileName, DWORD dwCreationDistribution, DWORD dwAttributes, const LPSECURITY_ATTRIBUTES lpSecurityAttributes )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::DuplicateEncryptionInfoFile" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( DuplicateEncryptionInfoFile );
		dwResult = Call< DWORD, LPCTSTR, LPCTSTR, DWORD, DWORD, const LPSECURITY_ATTRIBUTES >( pFunc, SrcFileName, DstFileName, dwCreationDistribution, dwAttributes, lpSecurityAttributes );
#else
		QOR_PP_UNREF4( SrcFileName, DstFileName, dwCreationDistribution, dwAttributes );
		QOR_PP_UNREF( lpSecurityAttributes );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("DuplicateEncryptionInfoFile"), _T( "Windows 2000" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return dwResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::EncryptFileA( LPCSTR lpFileName )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::EncryptFileA" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( EncryptFileA );
		bResult = Call< BOOL, LPCSTR >( pFunc, lpFileName );
#else
		QOR_PP_UNREF( lpFileName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("EncryptFileA"), _T( "Windows 2000" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::EncryptFileW( LPCWSTR lpFileName )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::EncryptFileW" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( EncryptFileW );
		bResult = Call< BOOL, LPCWSTR >( pFunc, lpFileName );
#else
		QOR_PP_UNREF( lpFileName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("EncryptFileW"), _T( "Windows 2000" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::EncryptionDisable( LPCWSTR DirPath, BOOL Disable )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::EncryptionDisable" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( EncryptionDisable );
		bResult = Call< BOOL, LPCWSTR, BOOL >( pFunc, DirPath, Disable );
#else
		QOR_PP_UNREF( DirPath );
		QOR_PP_UNREF( Disable );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("EncryptionDisable"), _T( "Windows 2000" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::FileEncryptionStatusA( LPCSTR lpFileName, LPDWORD lpStatus )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::FileEncryptionStatusA" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( FileEncryptionStatusA );
		bResult = Call< BOOL, LPCSTR, LPDWORD >( pFunc, lpFileName, lpStatus );
#else
		QOR_PP_UNREF( lpFileName );
		QOR_PP_UNREF( lpStatus );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("FileEncryptionStatusA"), _T( "Windows 2000" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CAdvAPI32::FileEncryptionStatusW( LPCWSTR lpFileName, LPDWORD lpStatus )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::FileEncryptionStatusW" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( FileEncryptionStatusW );
		bResult = Call< BOOL, LPCWSTR, LPDWORD >( pFunc, lpFileName, lpStatus );
#else
		QOR_PP_UNREF( lpFileName );
		QOR_PP_UNREF( lpStatus );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("FileEncryptionStatusW"), _T( "Windows 2000" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::OpenEncryptedFileRawA( LPCSTR lpFileName, ULONG ulFlags, PVOID* pvContext )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::OpenEncryptedFileRawA" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OpenEncryptedFileRawA );
		dwResult = Call< DWORD, LPCSTR, ULONG, PVOID* >( pFunc, lpFileName, ulFlags, pvContext );
#else
		QOR_PP_UNREF( lpFileName );
		QOR_PP_UNREF( ulFlags );
		QOR_PP_UNREF( pvContext );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("OpenEncryptedFileRawA"), _T( "Windows 2000" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return dwResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::OpenEncryptedFileRawW( LPCWSTR lpFileName, ULONG ulFlags, PVOID* pvContext )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::OpenEncryptedFileRawW" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OpenEncryptedFileRawW );
		dwResult = Call< DWORD, LPCWSTR, ULONG, PVOID* >( pFunc, lpFileName, ulFlags, pvContext );
#else
		QOR_PP_UNREF( lpFileName );
		QOR_PP_UNREF( ulFlags );
		QOR_PP_UNREF( pvContext );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("OpenEncryptedFileRawW"), _T( "Windows 2000" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return dwResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::ReadEncryptedFileRaw( PFE_EXPORT_FUNC pfExportCallback, PVOID pvCallbackContext, PVOID pvContext )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::ReadEncryptedFileRaw" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ReadEncryptedFileRaw );
		dwResult = Call< DWORD, PFE_EXPORT_FUNC, PVOID, PVOID >( pFunc, pfExportCallback, pvCallbackContext, pvContext );
#else
		QOR_PP_UNREF( pfExportCallback );
		QOR_PP_UNREF( pvCallbackContext );
		QOR_PP_UNREF( pvContext );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("ReadEncryptedFileRaw"), _T( "Windows 2000" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return dwResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::QueryRecoveryAgentsOnEncryptedFile( LPCWSTR lpFileName, PENCRYPTION_CERTIFICATE_HASH_LIST* pRecoveryAgents )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::QueryRecoveryAgentsOnEncryptedFile" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( QueryRecoveryAgentsOnEncryptedFile );
		dwResult = Call< DWORD, LPCWSTR, PENCRYPTION_CERTIFICATE_HASH_LIST* >( pFunc, lpFileName, pRecoveryAgents );
#else
		QOR_PP_UNREF( lpFileName );
		QOR_PP_UNREF( pRecoveryAgents );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("QueryRecoveryAgentsOnEncryptedFile"), _T( "Windows 2000" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return dwResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::QueryUsersOnEncryptedFile( LPCWSTR lpFileName, PENCRYPTION_CERTIFICATE_HASH_LIST* pUsers )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::QueryUsersOnEncryptedFile" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( QueryUsersOnEncryptedFile );
		dwResult = Call< DWORD, LPCWSTR, PENCRYPTION_CERTIFICATE_HASH_LIST* >( pFunc, lpFileName, pUsers );
#else
		QOR_PP_UNREF( lpFileName );
		QOR_PP_UNREF( pUsers );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("QueryUsersOnEncryptedFile"), _T( "Windows 2000" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return dwResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::WriteEncryptedFileRaw( PFE_IMPORT_FUNC pfImportCallback, PVOID pvCallbackContext, PVOID pvContext )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::WriteEncryptedFileRaw" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WriteEncryptedFileRaw );
		dwResult = Call< DWORD, PFE_IMPORT_FUNC, PVOID, PVOID >( pFunc, pfImportCallback, pvCallbackContext, pvContext );
#else
		QOR_PP_UNREF( pfImportCallback );
		QOR_PP_UNREF( pvCallbackContext );
		QOR_PP_UNREF( pvContext );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("WriteEncryptedFileRaw"), _T( "Windows 2000" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return dwResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::SetUserFileEncryptionKey( PENCRYPTION_CERTIFICATE pEncryptionCertificate )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::SetUserFileEncryptionKey" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( SetUserFileEncryptionKey );
		dwResult = Call< DWORD, PENCRYPTION_CERTIFICATE >( pFunc, pEncryptionCertificate );
#else
		QOR_PP_UNREF( pEncryptionCertificate );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("SetUserFileEncryptionKey"), _T( "Windows 2000" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return dwResult;
	}

	//------------------------------------------------------------------------------
	DWORD CAdvAPI32::RemoveUsersFromEncryptedFile( LPCWSTR lpFileName, PENCRYPTION_CERTIFICATE_HASH_LIST pHashes )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RemoveUsersFromEncryptedFile" );
		CCheckReturn< DWORD, CTSuccessCheck< DWORD > >::TType dwResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RemoveUsersFromEncryptedFile );
		dwResult = Call< DWORD, LPCWSTR, PENCRYPTION_CERTIFICATE_HASH_LIST >( pFunc, lpFileName, pHashes );
#else
		QOR_PP_UNREF( lpFileName );
		QOR_PP_UNREF( pHashes );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("RemoveUsersFromEncryptedFile"), _T( "Windows 2000" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return dwResult;
	}

	//------------------------------------------------------------------------------
	void CAdvAPI32::FreeEncryptionCertificateHashList( PENCRYPTION_CERTIFICATE_HASH_LIST pHashes )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::FreeEncryptionCertificateHashList" );
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( FreeEncryptionCertificateHashList );
		voidCall< PENCRYPTION_CERTIFICATE_HASH_LIST >( pFunc, pHashes );
#else
		QOR_PP_UNREF( pHashes );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T("FreeEncryptionCertificateHashList"), _T( "Windows 2000" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
	}

}//nsWinQAPI
