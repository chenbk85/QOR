//EventTracing.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQAPI/AdvAPI32.h"
#include "../Source/SystemQOR/MSWindows/WinQAPI/include/ReturnCheck.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//------------------------------------------------------------------------------
	ULONG CAdvAPI32::ControlTraceA( TRACEHANDLE SessionHandle, LPCSTR SessionName, PEVENT_TRACE_PROPERTIES Properties, ULONG ControlCode )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::ControlTraceA" );
		CCheckReturn< ULONG, CTSuccessCheck< ULONG > >::TType ulResult;
#if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ControlTraceA );
		ulResult = Call< ULONG, TRACEHANDLE, LPCSTR, PEVENT_TRACE_PROPERTIES, ULONG >( pFunc, SessionHandle, SessionName, Properties, ControlCode );
#else
		QOR_PP_UNREF4( SessionHandle, SessionName, Properties, ControlCode );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "ControlTraceA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return ulResult;
	}

	//------------------------------------------------------------------------------
	ULONG CAdvAPI32::ControlTraceW( TRACEHANDLE SessionHandle, LPCWSTR SessionName, PEVENT_TRACE_PROPERTIES Properties, ULONG ControlCode )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::ControlTraceW" );
		CCheckReturn< ULONG, CTSuccessCheck< ULONG > >::TType ulResult;
#if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ControlTraceW );
		ulResult = Call< ULONG, TRACEHANDLE, LPCWSTR, PEVENT_TRACE_PROPERTIES, ULONG >( pFunc, SessionHandle, SessionName, Properties, ControlCode );
#else
		QOR_PP_UNREF4( SessionHandle, SessionName, Properties, ControlCode );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "ControlTraceW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return ulResult;
	}

	//------------------------------------------------------------------------------
	ULONG CAdvAPI32::CreateTraceInstanceId( HANDLE RegHandle, PEVENT_INSTANCE_INFO pInstInfo )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CreateTraceInstanceId" );
		CCheckReturn< ULONG, CTSuccessCheck< ULONG > >::TType ulResult;
#if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CreateTraceInstanceId );
		ulResult = Call< ULONG, HANDLE, PEVENT_INSTANCE_INFO >( pFunc, RegHandle, pInstInfo );
#else
		QOR_PP_UNREF( RegHandle );
		QOR_PP_UNREF( pInstInfo );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CreateTraceInstanceId" ), _T( "Windows 2000 Profesional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return ulResult;
	}

	//------------------------------------------------------------------------------
	ULONG CAdvAPI32::EnableTrace( ULONG Enable, ULONG EnableFlag, ULONG EnableLevel, LPCGUID ControlGuid, TRACEHANDLE SessionHandle )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::EnableTrace" );
		CCheckReturn< ULONG, CTSuccessCheck< ULONG > >::TType ulResult;
#if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( EnableTrace );
		ulResult = Call< ULONG, ULONG, ULONG, ULONG, LPCGUID, TRACEHANDLE >( pFunc, Enable, EnableFlag, EnableLevel, ControlGuid, SessionHandle );
#else
		QOR_PP_UNREF( Enable );
		QOR_PP_UNREF4( EnableFlag, EnableLevel, ControlGuid, SessionHandle );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "EnableTrace" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return ulResult;
	}

	//------------------------------------------------------------------------------
	ULONG CAdvAPI32::CloseTrace( TRACEHANDLE TraceHandle )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::CloseTrace" );
		CCheckReturn< ULONG, CTSuccessCheck< ULONG > >::TType ulResult;
#if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( CloseTrace );
		ulResult = Call< ULONG, TRACEHANDLE >( pFunc, TraceHandle );
#else
		QOR_PP_UNREF( TraceHandle );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CloseTrace" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return ulResult;
	}

	//------------------------------------------------------------------------------
	ULONG CAdvAPI32::EnumerateTraceGuids( PTRACE_GUID_PROPERTIES *GuidPropertiesArray, ULONG PropertyArrayCount, PULONG GuidCount )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::EnumerateTraceGuids" );
		CCheckReturn< ULONG, CTSuccessCheck< ULONG > >::TType ulResult;
#if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( EnumerateTraceGuids );
		ulResult = Call< ULONG, PTRACE_GUID_PROPERTIES*, ULONG, PULONG >( pFunc, GuidPropertiesArray, PropertyArrayCount, GuidCount );
#else
		QOR_PP_UNREF( GuidPropertiesArray );
		QOR_PP_UNREF( PropertyArrayCount );
		QOR_PP_UNREF( GuidCount );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "EnumerateTraceGuids" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )	
		return ulResult;
	}

	//------------------------------------------------------------------------------
	ULONG CAdvAPI32::FlushTraceA( TRACEHANDLE SessionHandle, LPCSTR SessionName, PEVENT_TRACE_PROPERTIES Properties )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::FlushTraceA" );
		CCheckReturn< ULONG, CTSuccessCheck< ULONG > >::TType ulResult;
#if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( FlushTraceA );
		ulResult = Call< ULONG, TRACEHANDLE, LPCSTR, PEVENT_TRACE_PROPERTIES >( pFunc, SessionHandle, SessionName, Properties );
#else
		QOR_PP_UNREF( SessionHandle );
		QOR_PP_UNREF( SessionName );
		QOR_PP_UNREF( Properties );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "FlushTraceA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )	#
		return ulResult;
	}

	//------------------------------------------------------------------------------
	ULONG CAdvAPI32::FlushTraceW( TRACEHANDLE SessionHandle, LPCWSTR SessionName, PEVENT_TRACE_PROPERTIES Properties )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::FlushTraceW" );
		CCheckReturn< ULONG, CTSuccessCheck< ULONG > >::TType ulResult;
#if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( FlushTraceW );
		ulResult = Call< ULONG, TRACEHANDLE, LPCWSTR, PEVENT_TRACE_PROPERTIES >( pFunc, SessionHandle, SessionName, Properties );
#else
		QOR_PP_UNREF( SessionHandle );
		QOR_PP_UNREF( SessionName );
		QOR_PP_UNREF( Properties );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "FlushTraceW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )	
		return ulResult;
	}

	//------------------------------------------------------------------------------
	ULONG CAdvAPI32::GetTraceEnableFlags( TRACEHANDLE SessionHandle )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetTraceEnableFlags" );
		ULONG ulResult = 0;
#if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetTraceEnableFlags );
		ulResult = Call< ULONG, TRACEHANDLE >( pFunc, SessionHandle );
		if( ulResult == 0 )
		{
			unsigned long ulOSErr = CKernel32::GetLastError();
			if( ulOSErr != 0 )
			{
				__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "GetTraceEnableFlags" ), 0 ));
			}
		}
#else
		QOR_PP_UNREF( SessionHandle );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetTraceEnableFlags" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )	
		return ulResult;
	}

	//------------------------------------------------------------------------------
	UCHAR CAdvAPI32::GetTraceEnableLevel( TRACEHANDLE SessionHandle )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetTraceEnableLevel" );
		UCHAR ucResult = 0;
#if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetTraceEnableLevel );
		ucResult = Call< UCHAR, TRACEHANDLE >( pFunc, SessionHandle );
		if( ucResult == 0 )
		{
			unsigned long ulOSErr = CKernel32::GetLastError();
			if( ulOSErr != 0 )
			{
				__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "GetTraceEnableLevel" ), 0 ));
			}
		}
#else
		QOR_PP_UNREF( SessionHandle );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetTraceEnableLevel" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )	
		return ucResult;
	}

	//------------------------------------------------------------------------------
	TRACEHANDLE CAdvAPI32::GetTraceLoggerHandle( PVOID Buffer )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::GetTraceLoggerHandle" );
		TRACEHANDLE thResult = 0xFFFFFFFF;
#if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( GetTraceLoggerHandle );
		thResult = Call< TRACEHANDLE, PVOID >( pFunc, Buffer );
#else
		QOR_PP_UNREF( Buffer );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetTraceLoggerHandle" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )	
		return thResult;
	}

	//------------------------------------------------------------------------------
	TRACEHANDLE CAdvAPI32::OpenTraceA( PEVENT_TRACE_LOGFILE Logfile )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::OpenTraceA" );
		TRACEHANDLE thResult = 0xFFFFFFFF;
#if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OpenTraceA );
		thResult = Call< TRACEHANDLE, PEVENT_TRACE_LOGFILE >( pFunc, Logfile );
#else
		QOR_PP_UNREF( Logfile );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OpenTraceA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )	
		return thResult;
	}

	//------------------------------------------------------------------------------
	TRACEHANDLE CAdvAPI32::OpenTraceW( PEVENT_TRACE_LOGFILE Logfile )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::OpenTraceW" );
		TRACEHANDLE thResult = 0xFFFFFFFF;
#if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( OpenTraceW );
		thResult = Call< TRACEHANDLE, PEVENT_TRACE_LOGFILE >( pFunc, Logfile );
#else
		QOR_PP_UNREF( Logfile );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "OpenTraceW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )	
		return thResult;
	}

	//------------------------------------------------------------------------------
	ULONG CAdvAPI32::ProcessTrace( PTRACEHANDLE HandleArray, ULONG HandleCount, LPFILETIME StartTime, LPFILETIME EndTime )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::ProcessTrace" );
		CCheckReturn< ULONG, CTSuccessCheck< ULONG > >::TType ulResult;
#if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ProcessTrace );
		ulResult = Call< ULONG, PTRACEHANDLE, ULONG, LPFILETIME, LPFILETIME >( pFunc, HandleArray, HandleCount, StartTime, EndTime );
#else
		QOR_PP_UNREF( HandleArray );
		QOR_PP_UNREF( HandleCount );
		QOR_PP_UNREF( StartTime );
		QOR_PP_UNREF( EndTime );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "ProcessTrace" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )	
		return ulResult;
	}

	//------------------------------------------------------------------------------
	ULONG CAdvAPI32::QueryAllTracesA( PEVENT_TRACE_PROPERTIES* PropertyArray, ULONG PropertyArrayCount, PULONG SessionCount )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::QueryAllTracesA" );
		CCheckReturn< ULONG, CTSuccessCheck< ULONG > >::TType ulResult;
#if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( QueryAllTracesA );
		ulResult = Call< ULONG, PEVENT_TRACE_PROPERTIES*, ULONG, PULONG >( pFunc, PropertyArray, PropertyArrayCount, SessionCount );
#else
		QOR_PP_UNREF( PropertyArray );
		QOR_PP_UNREF( PropertyArrayCount );
		QOR_PP_UNREF( SessionCount ); 
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "QueryAllTracesA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )	
		return ulResult;
	}

	//------------------------------------------------------------------------------
	//QueryAllTracesW
	ULONG CAdvAPI32::QueryAllTracesW( PEVENT_TRACE_PROPERTIES* PropertyArray, ULONG PropertyArrayCount, PULONG SessionCount )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::QueryAllTracesW" );
		CCheckReturn< ULONG, CTSuccessCheck< ULONG > >::TType ulResult;
#if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( QueryAllTracesW );
		ulResult = Call< ULONG, PEVENT_TRACE_PROPERTIES*, ULONG, PULONG >( pFunc, PropertyArray, PropertyArrayCount, SessionCount );
#else
		QOR_PP_UNREF( PropertyArray );
		QOR_PP_UNREF( PropertyArrayCount );
		QOR_PP_UNREF( SessionCount );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "QueryAllTracesW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )	
		return ulResult;
	}

	//------------------------------------------------------------------------------
	ULONG CAdvAPI32::QueryTraceA( TRACEHANDLE SessionHandle, LPCSTR SessionName, PEVENT_TRACE_PROPERTIES Properties )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::QueryTraceA" );
		CCheckReturn< ULONG, CTSuccessCheck< ULONG > >::TType ulResult;
#if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( QueryTraceA );
		ulResult = Call< ULONG, TRACEHANDLE, LPCSTR, PEVENT_TRACE_PROPERTIES >( pFunc, SessionHandle, SessionName, Properties );
#else
		QOR_PP_UNREF( SessionHandle );
		QOR_PP_UNREF( SessionName );
		QOR_PP_UNREF( Properties );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "QueryTraceA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )	
		return ulResult;
	}

	//------------------------------------------------------------------------------
	ULONG CAdvAPI32::QueryTraceW( TRACEHANDLE SessionHandle, LPCWSTR SessionName, PEVENT_TRACE_PROPERTIES Properties )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::QueryTraceW" );
		CCheckReturn< ULONG, CTSuccessCheck< ULONG > >::TType ulResult;
#if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( QueryTraceW );
		ulResult = Call< ULONG, TRACEHANDLE, LPCWSTR, PEVENT_TRACE_PROPERTIES >( pFunc, SessionHandle, SessionName, Properties );
#else
		QOR_PP_UNREF( SessionHandle );
		QOR_PP_UNREF( SessionName );
		QOR_PP_UNREF( Properties );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "QueryTraceW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )	
		return ulResult;
	}

	//------------------------------------------------------------------------------
	ULONG CAdvAPI32::RegisterTraceGuidsA( WMIDPREQUEST RequestAddress, PVOID RequestContext, LPCGUID ControlGuid, ULONG GuidCount, PTRACE_GUID_REGISTRATION TraceGuidReg, LPCSTR MofImagePath, LPCSTR MofResourceName, PTRACEHANDLE RegistrationHandle )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegisterTraceGuidsA" );
		CCheckReturn< ULONG, CTSuccessCheck< ULONG > >::TType ulResult;
#if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegisterTraceGuidsA );
		ulResult = Call< ULONG, WMIDPREQUEST, PVOID, LPCGUID, ULONG, PTRACE_GUID_REGISTRATION, LPCSTR, LPCSTR, PTRACEHANDLE >( pFunc, RequestAddress, RequestContext, ControlGuid, GuidCount, TraceGuidReg, MofImagePath, MofResourceName, RegistrationHandle );
#else
		QOR_PP_UNREF( RequestAddress );
		QOR_PP_UNREF( RequestContext );
		QOR_PP_UNREF( ControlGuid );
		QOR_PP_UNREF( GuidCount );
		QOR_PP_UNREF( TraceGuidReg );
		QOR_PP_UNREF( MofImagePath );
		QOR_PP_UNREF( MofResourceName );
		QOR_PP_UNREF( RegistrationHandle );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegisterTraceGuidsA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )	
		return ulResult;
	}

	//------------------------------------------------------------------------------
	ULONG CAdvAPI32::RegisterTraceGuidsW( WMIDPREQUEST RequestAddress, PVOID RequestContext, LPCGUID ControlGuid, ULONG GuidCount, PTRACE_GUID_REGISTRATION TraceGuidReg, LPCWSTR MofImagePath, LPCWSTR MofResourceName, PTRACEHANDLE RegistrationHandle )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegisterTraceGuidsW" );
		CCheckReturn< ULONG, CTSuccessCheck< ULONG > >::TType ulResult;
#if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegisterTraceGuidsW );
		ulResult = Call< ULONG, WMIDPREQUEST, PVOID, LPCGUID, ULONG, PTRACE_GUID_REGISTRATION, LPCWSTR, LPCWSTR, PTRACEHANDLE >( pFunc, RequestAddress, RequestContext, ControlGuid, GuidCount, TraceGuidReg, MofImagePath, MofResourceName, RegistrationHandle );
#else
		QOR_PP_UNREF( RequestAddress );
		QOR_PP_UNREF( RequestContext );
		QOR_PP_UNREF( ControlGuid );
		QOR_PP_UNREF( GuidCount );
		QOR_PP_UNREF( TraceGuidReg );
		QOR_PP_UNREF( MofImagePath );
		QOR_PP_UNREF( MofResourceName );
		QOR_PP_UNREF( RegistrationHandle );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegisterTraceGuidsW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )	
		return ulResult;
	}

	//------------------------------------------------------------------------------
	ULONG CAdvAPI32::SetTraceCallback( LPCGUID pGuid, PEVENT_CALLBACK EventCallback )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::SetTraceCallback" );
		CCheckReturn< ULONG, CTSuccessCheck< ULONG > >::TType ulResult;
#if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( SetTraceCallback );
		ulResult = Call< ULONG, LPCGUID, PEVENT_CALLBACK >( pFunc, pGuid, EventCallback );
#else
		QOR_PP_UNREF( pGuid );
		QOR_PP_UNREF( EventCallback );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "SetTraceCallback" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )	
		return ulResult;
	}

	//------------------------------------------------------------------------------
	ULONG CAdvAPI32::StartTraceA( PTRACEHANDLE SessionHandle, LPCSTR SessionName, PEVENT_TRACE_PROPERTIES Properties )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::StartTraceA" );
		CCheckReturn< ULONG, CTSuccessCheck< ULONG > >::TType ulResult;
#if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( StartTraceA );
		ulResult = Call< ULONG, PTRACEHANDLE, LPCSTR, PEVENT_TRACE_PROPERTIES >( pFunc, SessionHandle, SessionName, Properties );
#else
		QOR_PP_UNREF( SessionHandle );
		QOR_PP_UNREF( SessionName );
		QOR_PP_UNREF( Properties );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "StartTraceA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )	
		return ulResult;
	}

	//------------------------------------------------------------------------------
	ULONG CAdvAPI32::StartTraceW( PTRACEHANDLE SessionHandle, LPCWSTR SessionName, PEVENT_TRACE_PROPERTIES Properties )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::StartTraceW" );
		CCheckReturn< ULONG, CTSuccessCheck< ULONG > >::TType ulResult;
#if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( StartTraceW );
		ulResult = Call< ULONG, PTRACEHANDLE, LPCWSTR, PEVENT_TRACE_PROPERTIES >( pFunc, SessionHandle, SessionName, Properties );
#else
		QOR_PP_UNREF( SessionHandle );
		QOR_PP_UNREF( SessionName );
		QOR_PP_UNREF( Properties );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "StartTraceW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )	
		return ulResult;
	}

	//------------------------------------------------------------------------------
	ULONG CAdvAPI32::StopTraceA( TRACEHANDLE SessionHandle, LPCSTR SessionName, PEVENT_TRACE_PROPERTIES Properties )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::StopTraceA" );
		CCheckReturn< ULONG, CTSuccessCheck< ULONG > >::TType ulResult;
#if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( StopTraceA );
		ulResult = Call< ULONG, TRACEHANDLE, LPCSTR, PEVENT_TRACE_PROPERTIES >( pFunc, SessionHandle, SessionName, Properties );
#else
		QOR_PP_UNREF( SessionHandle );
		QOR_PP_UNREF( SessionName );
		QOR_PP_UNREF( Properties );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "StopTraceA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )	
		return ulResult;
	}

	//------------------------------------------------------------------------------
	ULONG CAdvAPI32::StopTraceW( TRACEHANDLE SessionHandle, LPCWSTR SessionName, PEVENT_TRACE_PROPERTIES Properties )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::StopTraceW" );
		CCheckReturn< ULONG, CTSuccessCheck< ULONG > >::TType ulResult;
#if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( StopTraceW );
		ulResult = Call< ULONG, TRACEHANDLE, LPCWSTR, PEVENT_TRACE_PROPERTIES >( pFunc, SessionHandle, SessionName, Properties );
#else
		QOR_PP_UNREF( SessionHandle );
		QOR_PP_UNREF( SessionName );
		QOR_PP_UNREF( Properties );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "StopTraceW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )	
		return ulResult;
	}

	//------------------------------------------------------------------------------
	ULONG CAdvAPI32::TraceEvent( TRACEHANDLE SessionHandle, PEVENT_TRACE_HEADER EventTrace )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::TraceEvent" );
		CCheckReturn< ULONG, CTSuccessCheck< ULONG > >::TType ulResult;
#if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( TraceEvent );
		ulResult = Call< ULONG, TRACEHANDLE, PEVENT_TRACE_HEADER >( pFunc, SessionHandle, EventTrace );
#else
		QOR_PP_UNREF( SessionHandle );
		QOR_PP_UNREF( EventTrace );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "TraceEvent" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )	
		return ulResult;
	}

	//------------------------------------------------------------------------------
	ULONG CAdvAPI32::TraceEventInstance( TRACEHANDLE SessionHandle, PEVENT_INSTANCE_HEADER EventTrace, PEVENT_INSTANCE_INFO pInstInfo, PEVENT_INSTANCE_INFO pParentInstInfo )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::TraceEventInstance" );
		CCheckReturn< ULONG, CTSuccessCheck< ULONG > >::TType ulResult;
#if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( TraceEventInstance );
		ulResult = Call< ULONG, TRACEHANDLE, PEVENT_INSTANCE_HEADER, PEVENT_INSTANCE_INFO, PEVENT_INSTANCE_INFO >( pFunc, SessionHandle, EventTrace, pInstInfo, pParentInstInfo );
#else
		QOR_PP_UNREF4( SessionHandle, EventTrace, pInstInfo, pParentInstInfo );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "TraceEventInstance" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )	
		return ulResult;
	}

	//------------------------------------------------------------------------------
	ULONG CAdvAPI32::TraceMessage( TRACEHANDLE SessionHandle, ULONG MessageFlags, LPGUID MessageGuid, USHORT MessageNumber, ... )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::TraceMessage" );
		CCheckReturn< ULONG, CTSuccessCheck< ULONG > >::TType ulResult;
#if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( TraceMessageVa );
		va_list vargs;
		va_start( vargs, MessageNumber );
		ulResult = Call< ULONG, TRACEHANDLE, ULONG, LPGUID, USHORT, va_list >( pFunc, SessionHandle, MessageFlags, MessageGuid, MessageNumber, vargs );
		va_end( vargs );
#else
		QOR_PP_UNREF( SessionHandle );
		QOR_PP_UNREF( MessageFlags );
		QOR_PP_UNREF( MessageGuid );
		QOR_PP_UNREF( MessageNumber );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "TraceMessage" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )	
		return ulResult;
	}

	//------------------------------------------------------------------------------
	ULONG CAdvAPI32::TraceMessageVa( TRACEHANDLE SessionHandle, ULONG MessageFlags, LPGUID MessageGuid, USHORT MessageNumber, va_list MessageArgList )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::TraceMessageVa" );
		CCheckReturn< ULONG, CTSuccessCheck< ULONG > >::TType ulResult;
#if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( TraceMessageVa );
		ulResult = Call< ULONG, TRACEHANDLE, ULONG, LPGUID, USHORT, va_list >( pFunc, SessionHandle, MessageFlags, MessageGuid, MessageNumber, MessageArgList );
#else
		QOR_PP_UNREF4( SessionHandle, MessageFlags, MessageGuid, MessageNumber );
		QOR_PP_UNREF( MessageArgList );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "TraceMessageVa" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )	
		return ulResult;
	}

	//------------------------------------------------------------------------------
	ULONG CAdvAPI32::UpdateTraceA( TRACEHANDLE SessionHandle, LPCSTR SessionName, PEVENT_TRACE_PROPERTIES Properties )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::UpdateTraceA" );
		CCheckReturn< ULONG, CTSuccessCheck< ULONG > >::TType ulResult;
#if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( UpdateTraceA );
		ulResult = Call< ULONG, TRACEHANDLE, LPCSTR, PEVENT_TRACE_PROPERTIES >( pFunc, SessionHandle, SessionName, Properties );
#else
		QOR_PP_UNREF( SessionHandle );
		QOR_PP_UNREF( SessionName );
		QOR_PP_UNREF( Properties );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "UpdateTraceA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )	
		return ulResult;
	}

	//------------------------------------------------------------------------------
	ULONG CAdvAPI32::UpdateTraceW( TRACEHANDLE SessionHandle, LPCWSTR SessionName, PEVENT_TRACE_PROPERTIES Properties )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::UpdateTraceW" );
		CCheckReturn< ULONG, CTSuccessCheck< ULONG > >::TType ulResult;
#if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( UpdateTraceW );
		ulResult = Call< ULONG, TRACEHANDLE, LPCWSTR, PEVENT_TRACE_PROPERTIES >( pFunc, SessionHandle, SessionName, Properties );
#else
		QOR_PP_UNREF( SessionHandle );
		QOR_PP_UNREF( SessionName );
		QOR_PP_UNREF( Properties );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "UpdateTraceW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )	
		return ulResult;
	}

	//------------------------------------------------------------------------------
	ULONG CAdvAPI32::UnregisterTraceGuids( TRACEHANDLE RegistrationHandle )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::UnregisterTraceGuids" );
		CCheckReturn< ULONG, CTSuccessCheck< ULONG > >::TType ulResult;
#if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( UnregisterTraceGuids );
		ulResult = Call< ULONG, TRACEHANDLE >( pFunc, RegistrationHandle );
#else
		QOR_PP_UNREF( RegistrationHandle );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "UnregisterTraceGuids" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )	
		return ulResult;
	}

	//------------------------------------------------------------------------------
	ULONG CAdvAPI32::RemoveTraceCallback( LPCGUID pGuid )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RemoveTraceCallback" );
		CCheckReturn< ULONG, CTSuccessCheck< ULONG > >::TType ulResult;
#if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RemoveTraceCallback );
		ulResult = Call< ULONG, LPCGUID >( pFunc, pGuid );
#else
		QOR_PP_UNREF( pGuid );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RemoveTraceCallback" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )	
		return ulResult;
	}

}//nsWinQAPI

