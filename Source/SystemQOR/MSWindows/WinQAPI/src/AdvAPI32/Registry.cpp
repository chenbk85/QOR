//Registry.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQAPI/AdvAPI32.h"
#include "ReturnCheck.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//Registry functions

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegCloseKey( HKEY hKey )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegCloseKey" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegCloseKey );
		lResult = Call< LONG, HKEY >( pFunc, hKey );
#	else
		QOR_PP_UNREF( hKey );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegCloseKey" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegConnectRegistryA( LPCSTR lpMachineName, HKEY hKey, PHKEY phkResult )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegConnectRegistry" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegConnectRegistryA );
		lResult = Call< LONG, LPCSTR, HKEY, PHKEY >( pFunc, lpMachineName, hKey, phkResult );
#	else
		QOR_PP_UNREF( lpMachineName );
		QOR_PP_UNREF( hKey );
		QOR_PP_UNREF( phkResult );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegConnectRegistryA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegConnectRegistryW( LPCWSTR lpMachineName, HKEY hKey, PHKEY phkResult )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegConnectRegistry" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegConnectRegistryW );
		lResult = Call< LONG, LPCWSTR, HKEY, PHKEY >( pFunc, lpMachineName, hKey, phkResult );
#	else
		QOR_PP_UNREF( lpMachineName );
		QOR_PP_UNREF( hKey );
		QOR_PP_UNREF( phkResult );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegConnectRegistryW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	#if( _WIN32_WINNT < 0x0600 )
	#   ifdef UNICODE
	#       define RegCopyTree RegCopyTreeW
	#   else
	#       define RegCopyTree RegCopyTreeA
	#   endif
	#endif

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegCopyTreeA( HKEY hKeySrc, LPCSTR lpSubKey, HKEY hKeyDest )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegCopyTree" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( RegCopyTreeA );
		lResult = Call< LONG, HKEY, LPCSTR, HKEY >( pFunc, hKeySrc, lpSubKey, hKeyDest );
#	else
		QOR_PP_UNREF( hKeySrc );
		QOR_PP_UNREF( lpSubKey );
		QOR_PP_UNREF( hKeyDest );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegCopyTreeA" ), _T( "Windows Vista" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegCopyTreeW( HKEY hKeySrc, LPCWSTR lpSubKey, HKEY hKeyDest )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegCopyTree" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( RegCopyTreeW );
		lResult = Call< LONG, HKEY, LPCWSTR, HKEY >( pFunc, hKeySrc, lpSubKey, hKeyDest );
#	else
		QOR_PP_UNREF( hKeySrc );
		QOR_PP_UNREF( lpSubKey );
		QOR_PP_UNREF( hKeyDest );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegCopyTreeW" ), _T( "Windows Vista" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegCreateKeyA( HKEY hKey, LPCSTR lpSubKey, PHKEY phkResult )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegCreateKey" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegCreateKeyA );
		lResult = Call< LONG, HKEY, LPCSTR, PHKEY >( pFunc, hKey, lpSubKey, phkResult );
#	else
		QOR_PP_UNREF( hKey );
		QOR_PP_UNREF( lpSubKey );
		QOR_PP_UNREF( phkResult );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegCreateKeyA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegCreateKeyW( HKEY hKey, LPCWSTR lpSubKey, PHKEY phkResult )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegCreateKey" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegCreateKeyW );
		lResult = Call< LONG, HKEY, LPCWSTR, PHKEY >( pFunc, hKey, lpSubKey, phkResult );
#	else
		QOR_PP_UNREF( hKey );
		QOR_PP_UNREF( lpSubKey );
		QOR_PP_UNREF( phkResult );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegCreateKeyW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegCreateKeyExA( HKEY hKey, LPCSTR lpSubKey, DWORD Reserved, LPSTR lpClass, DWORD dwOptions, 
						 REGSAM samDesired, ::LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, 
						 LPDWORD lpdwDisposition )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegCreateKeyEx" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegCreateKeyExA );
		lResult = Call< LONG, HKEY, LPCSTR, DWORD, LPSTR, DWORD, REGSAM, ::LPSECURITY_ATTRIBUTES, PHKEY, LPDWORD >( 
			pFunc, hKey, lpSubKey, Reserved, lpClass, dwOptions, samDesired, lpSecurityAttributes, phkResult, 
			lpdwDisposition );
#	else
		__QCMP_UNREF4( hKey, lpSubKey, Reserved, lpClass );
		__QCMP_UNREF4( dwOptions, samDesired, lpSecurityAttributes, phkResult );
		QOR_PP_UNREF( lpdwDisposition );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegCreateKeyExA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegCreateKeyExW( HKEY hKey, LPCWSTR lpSubKey, DWORD Reserved, LPWSTR lpClass, DWORD dwOptions, 
						 REGSAM samDesired, ::LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, 
						 LPDWORD lpdwDisposition )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegCreateKeyEx" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegCreateKeyExW );
		lResult = Call< LONG, HKEY, LPCWSTR, DWORD, LPWSTR, DWORD, REGSAM, ::LPSECURITY_ATTRIBUTES, PHKEY, LPDWORD >( 
			pFunc, hKey, lpSubKey, Reserved, lpClass, dwOptions, samDesired, lpSecurityAttributes, phkResult, 
			lpdwDisposition );
#	else
		__QCMP_UNREF4( hKey, lpSubKey, Reserved, lpClass );
		__QCMP_UNREF4( dwOptions, samDesired, lpSecurityAttributes, phkResult );
		QOR_PP_UNREF( lpdwDisposition );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegCreateKeyExW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegCreateKeyTransactedA( HKEY hKey, LPCSTR lpSubKey, DWORD Reserved, LPSTR lpClass, DWORD dwOptions, 
								 REGSAM samDesired, const ::LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult,
								 LPDWORD lpdwDisposition, HANDLE hTransaction, PVOID pExtendedParemeter )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegCreateKeyTransacted" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( RegCreateKeyTransactedA );
		lResult = Call< LONG, HKEY, LPCSTR, DWORD, LPSTR, DWORD, REGSAM, const ::LPSECURITY_ATTRIBUTES,
			PHKEY, LPDWORD, HANDLE, PVOID >( pFunc, hKey, lpSubKey, Reserved, lpClass, dwOptions, samDesired,
			lpSecurityAttributes, phkResult, lpdwDisposition, hTransaction, pExtendedParemeter );
#	else
		__QCMP_UNREF4( hKey, lpSubKey, Reserved, lpClass );
		__QCMP_UNREF4( dwOptions, samDesired, lpSecurityAttributes, phkResult );
		QOR_PP_UNREF( lpdwDisposition );
		QOR_PP_UNREF( hTransaction );
		QOR_PP_UNREF( pExtendedParemeter );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegCreateKeyTransactedA" ), _T( "Windows Vista" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegCreateKeyTransactedW( HKEY hKey, LPCWSTR lpSubKey, DWORD Reserved, LPWSTR lpClass, DWORD dwOptions, 
								 REGSAM samDesired, const ::LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult,
								 LPDWORD lpdwDisposition, HANDLE hTransaction, PVOID pExtendedParemeter )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegCreateKeyTransacted" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( RegCreateKeyTransactedW );
		lResult = Call< LONG, HKEY, LPCWSTR, DWORD, LPWSTR, DWORD, REGSAM, const ::LPSECURITY_ATTRIBUTES,
			PHKEY, LPDWORD, HANDLE, PVOID >( pFunc, hKey, lpSubKey, Reserved, lpClass, dwOptions, samDesired,
			lpSecurityAttributes, phkResult, lpdwDisposition, hTransaction, pExtendedParemeter );
#	else
		__QCMP_UNREF4( hKey, lpSubKey, Reserved, lpClass );
		__QCMP_UNREF4( dwOptions, samDesired, lpSecurityAttributes, phkResult );
		QOR_PP_UNREF( lpdwDisposition );
		QOR_PP_UNREF( hTransaction );
		QOR_PP_UNREF( pExtendedParemeter );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegCreateKeyTransactedW" ), _T( "Windows Vista" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegDeleteKeyA( HKEY hKey, LPCSTR lpSubKey )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegDeleteKey" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegDeleteKeyA );
		lResult = Call< LONG, HKEY, LPCSTR >( pFunc, hKey, lpSubKey );
#	else
		QOR_PP_UNREF( hKey );
		QOR_PP_UNREF( lpSubKey );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegDeleteKeyA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegDeleteKeyW( HKEY hKey, LPCWSTR lpSubKey )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegDeleteKey" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegDeleteKeyW );
		lResult = Call< LONG, HKEY, LPCWSTR >( pFunc, hKey, lpSubKey );
#	else
		QOR_PP_UNREF( hKey );
		QOR_PP_UNREF( lpSubKey );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegDeleteKeyW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegDeleteKeyExA( HKEY hKey, LPCSTR lpSubKey, REGSAM samDesired, DWORD Reserved )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegDeleteKeyEx" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( NTDDI_VERSION >= 0x05020100 )
		_WINQ_USESAPI( RegDeleteKeyExA );
		lResult = Call< LONG, HKEY, LPCSTR, REGSAM, DWORD >( pFunc, hKey, lpSubKey, samDesired, Reserved );
#	else
		__QCMP_UNREF4( hKey, lpSubKey, samDesired, Reserved );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegDeleteKeyExA" ), _T( "Windows Server 2003 with SP1" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegDeleteKeyExW( HKEY hKey, LPCWSTR lpSubKey, REGSAM samDesired, DWORD Reserved )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegDeleteKeyEx" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( NTDDI_VERSION >= 0x05020100 )
		_WINQ_USESAPI( RegDeleteKeyExW );
		lResult = Call< LONG, HKEY, LPCWSTR, REGSAM, DWORD >( pFunc, hKey, lpSubKey, samDesired, Reserved );
#	else
		__QCMP_UNREF4( hKey, lpSubKey, samDesired, Reserved );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegDeleteKeyExW" ), _T( "Windows Server 2003 with SP1" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegDeleteKeyTransactedA( HKEY hKey, LPCSTR lpSubKey, REGSAM samDesired, DWORD Reserved, HANDLE hTransaction,
								 PVOID pExtendedParameter )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegDeleteKeyTransacted" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( RegDeleteKeyTransactedA );
		lResult = Call< LONG, HKEY, LPCSTR, REGSAM, DWORD, HANDLE, PVOID >( pFunc, hKey, lpSubKey, samDesired,
			Reserved, hTransaction, pExtendedParameter );
#	else
		__QCMP_UNREF4( hKey, lpSubKey, samDesired, Reserved );
		QOR_PP_UNREF( hTransaction );
		QOR_PP_UNREF( pExtendedParameter );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegDeleteKeyTransactedA" ), _T( "Windows Vista" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegDeleteKeyTransactedW( HKEY hKey, LPCWSTR lpSubKey, REGSAM samDesired, DWORD Reserved, HANDLE hTransaction,
								 PVOID pExtendedParameter )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegDeleteKeyTransacted" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( RegDeleteKeyTransactedW );
		lResult = Call< LONG, HKEY, LPCWSTR, REGSAM, DWORD, HANDLE, PVOID >( pFunc, hKey, lpSubKey, samDesired, Reserved, hTransaction, pExtendedParameter );
#	else
		__QCMP_UNREF4( hKey, lpSubKey, samDesired, Reserved );
		QOR_PP_UNREF( hTransaction );
		QOR_PP_UNREF( pExtendedParameter );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegDeleteKeyTransactedW" ), _T( "Windows Vista" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	#if( _WIN32_WINNT < 0x0600 )
	#   ifdef UNICODE
	#       define RegDeleteKeyValue RegDeleteKeyValueW
	#   else
	#       define RegDeleteKeyValue RegDeleteKeyValueA
	#   endif
	#endif

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegDeleteKeyValueA( HKEY hKey, LPCSTR lpSubKey, LPCSTR lpValueName )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegDeleteKeyValue" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( RegDeleteKeyValueA );
		lResult = Call< LONG, HKEY, LPCSTR, LPCSTR >( pFunc, hKey, lpSubKey, lpValueName );
#	else
		QOR_PP_UNREF( hKey );
		QOR_PP_UNREF( lpSubKey );
		QOR_PP_UNREF( lpValueName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegDeleteKeyValueA" ), _T( "Windows Vista" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegDeleteKeyValueW( HKEY hKey, LPCWSTR lpSubKey, LPCWSTR lpValueName )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegDeleteKeyValue" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( RegDeleteKeyValueW );
		lResult = Call< LONG, HKEY, LPCWSTR, LPCWSTR >( pFunc, hKey, lpSubKey, lpValueName );
#	else
		QOR_PP_UNREF( hKey );
		QOR_PP_UNREF( lpSubKey );
		QOR_PP_UNREF( lpValueName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegDeleteKeyValueW" ), _T( "Windows Vista" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	#ifndef RegDeleteTree
	#   if  ( __QOR_UNICODE )
	#       define RegDeleteTree RegDeleteTreeW
	#   else
	#       define RegDeleteTree RegDeleteTreeA
	#   endif
	#endif

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegDeleteTreeA( HKEY hKey, LPCSTR lpSubKey )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegDeleteTree" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( RegDeleteTreeA );
		lResult = Call< LONG, HKEY, LPCSTR >( pFunc, hKey, lpSubKey );
#	else
		QOR_PP_UNREF( hKey );
		QOR_PP_UNREF( lpSubKey );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegDeleteTreeA" ), _T( "Windows Vista" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegDeleteTreeW( HKEY hKey, LPCWSTR lpSubKey )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegDeleteTree" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( RegDeleteTreeW );
		lResult = Call< LONG, HKEY, LPCWSTR >( pFunc, hKey, lpSubKey );
#	else
		QOR_PP_UNREF( hKey );
		QOR_PP_UNREF( lpSubKey );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegDeleteTreeW" ), _T( "Windows Vista" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegDeleteValueA( HKEY hKey, LPCSTR lpValueName )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegDeleteValueA" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegDeleteValueA );
		lResult = Call< LONG, HKEY, LPCSTR >( pFunc, hKey, lpValueName );
#	else
		QOR_PP_UNREF( hKey );
		QOR_PP_UNREF( lpValueName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegDeleteValueA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegDeleteValueW( HKEY hKey, LPCWSTR lpValueName )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegDeleteValueA" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegDeleteValueW );
		lResult = Call< LONG, HKEY, LPCWSTR >( pFunc, hKey, lpValueName );
#	else
		QOR_PP_UNREF( hKey );
		QOR_PP_UNREF( lpValueName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegDeleteValueW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegDisablePredefinedCache( void )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegDisablePredefinedCache" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegDisablePredefinedCache );
		lResult = Call< LONG >( pFunc );
#	else		
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegDisablePredefinedCache" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegDisablePredefinedCacheEx( void )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegDisablePredefinedCacheEx" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( RegDisablePredefinedCacheEx );
		lResult = Call< LONG >( pFunc );
#	else		
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegDisablePredefinedCacheEx" ), _T( "Vista" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegDisableReflectionKey( HKEY hBase )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegDisableReflectionKey" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( NTDDI_VERSION >= 0x05020100 )
		_WINQ_USESAPI( RegDisableReflectionKey );
		lResult = Call< LONG, HKEY >( pFunc, hBase );
#	else
		QOR_PP_UNREF( hBase );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegDisableReflectionKey" ), _T( "Windows Server 2003 with SP1" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegEnableReflectionKey( HKEY hBase )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegEnableReflectionKey" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( NTDDI_VERSION >= 0x05020100 )
		_WINQ_USESAPI( RegEnableReflectionKey );
		lResult = Call< LONG, HKEY >( pFunc, hBase );
#	else
		QOR_PP_UNREF( hBase );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegEnableReflectionKey" ), _T( "Windows Server 2003 with SP1" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegEnumKeyA( HKEY hKey, DWORD dwIndex, LPSTR lpName, DWORD cchName )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegEnumKey" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegEnumKeyA );
		lResult = Call< LONG, HKEY, DWORD, LPSTR, DWORD >( pFunc, hKey, dwIndex, lpName, cchName );
#	else
		__QCMP_UNREF4( hKey, dwIndex, lpName, cchName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegEnumKeyA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegEnumKeyW( HKEY hKey, DWORD dwIndex, LPWSTR lpName, DWORD cchName )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegEnumKey" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegEnumKeyW );
		lResult = Call< LONG, HKEY, DWORD, LPWSTR, DWORD >( pFunc, hKey, dwIndex, lpName, cchName );
#	else
		__QCMP_UNREF4( hKey, dwIndex, lpName, cchName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegEnumKeyW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegEnumKeyExA( HKEY hKey, DWORD dwIndex, LPSTR lpName, LPDWORD lpcName, LPDWORD lpReserved, LPSTR lpClass,
					   LPDWORD lpcClass, ::PFILETIME lpftLastWriteTime )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegEnumKeyEx" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegEnumKeyExA );
		lResult = Call< LONG, HKEY, DWORD, LPSTR, LPDWORD, LPDWORD, LPSTR, LPDWORD, ::PFILETIME >( pFunc, hKey, 
			dwIndex, lpName, lpcName, lpReserved, lpClass, lpcClass, lpftLastWriteTime );
#	else
		__QCMP_UNREF4( hKey, dwIndex, lpName, lpcName );
		__QCMP_UNREF4( lpReserved, lpClass, lpcClass, lpftLastWriteTime );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegEnumKeyExA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegEnumKeyExW( HKEY hKey, DWORD dwIndex, LPWSTR lpName, LPDWORD lpcName, LPDWORD lpReserved, LPWSTR lpClass,
					   LPDWORD lpcClass, ::PFILETIME lpftLastWriteTime )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegEnumKeyEx" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegEnumKeyExW );
		lResult = Call< LONG, HKEY, DWORD, LPWSTR, LPDWORD, LPDWORD, LPWSTR, LPDWORD, ::PFILETIME >( pFunc, hKey, 
			dwIndex, lpName, lpcName, lpReserved, lpClass, lpcClass, lpftLastWriteTime );
#	else
		__QCMP_UNREF4( hKey, dwIndex, lpName, lpcName );
		__QCMP_UNREF4( lpReserved, lpClass, lpcClass, lpftLastWriteTime );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegEnumKeyExW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegEnumValueA( HKEY hKey, DWORD dwIndex, LPSTR lpValueName, LPDWORD lpcchValueName, LPDWORD lpReserved, 
					   LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegEnumValue" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegEnumValueA );
		lResult = Call< LONG, HKEY, DWORD, LPSTR, LPDWORD, LPDWORD, LPDWORD, LPBYTE, LPDWORD >( pFunc, hKey,
			dwIndex, lpValueName, lpcchValueName, lpReserved, lpType, lpData, lpcbData );
#	else
		__QCMP_UNREF4( hKey, dwIndex, lpValueName, lpcchValueName );
		__QCMP_UNREF4( lpReserved, lpType, lpData, lpcbData );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegEnumValueA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegEnumValue( HKEY hKey, DWORD dwIndex, LPWSTR lpValueName, LPDWORD lpcchValueName, LPDWORD lpReserved, 
					   LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegEnumValue" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegEnumValueW );
		lResult = Call< LONG, HKEY, DWORD, LPWSTR, LPDWORD, LPDWORD, LPDWORD, LPBYTE, LPDWORD >( pFunc, hKey,
			dwIndex, lpValueName, lpcchValueName, lpReserved, lpType, lpData, lpcbData );
#	else
		__QCMP_UNREF4( hKey, dwIndex, lpValueName, lpcchValueName );
		__QCMP_UNREF4( lpReserved, lpType, lpData, lpcbData );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegEnumValueW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegFlushKey( HKEY hKey )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegFlushKey" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegFlushKey );
		lResult = Call< LONG, HKEY >( pFunc, hKey );
#	else
		QOR_PP_UNREF( hKey );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegFlushKey" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	#if( NTDDI_VERSION < 0x05020100 )
	#   ifdef UNICODE
	#       define RegGetValue RegGetValueW
	#   else
	#       define RegGetValue RegGetValueA
	#   endif
	#endif

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegGetValueA( HKEY hkey, LPCSTR lpSubKey, LPCSTR lpValue, DWORD dwFlags, LPDWORD pdwType, PVOID pvData, 
					 LPDWORD pcbData )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegGetValue" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( NTDDI_VERSION >= 0x05020100 )
		_WINQ_USESAPI( RegGetValueA );
		lResult = Call< LONG, HKEY, LPCSTR, LPCSTR, DWORD, LPDWORD, PVOID, LPDWORD >( pFunc, hkey, lpSubKey, 
			lpValue, dwFlags, pdwType, pvData, pcbData );
#	else
		__QCMP_UNREF4( hkey, lpSubKey, lpValue, dwFlags );
		QOR_PP_UNREF( pdwType );
		QOR_PP_UNREF( pvData );
		QOR_PP_UNREF( pcbData );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegGetValueA" ), _T( "Windows Server 2003 with SP1" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegGetValueW( HKEY hkey, LPCWSTR lpSubKey, LPCWSTR lpValue, DWORD dwFlags, LPDWORD pdwType, PVOID pvData, 
					  LPDWORD pcbData )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegGetValue" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( NTDDI_VERSION >= 0x05020100 )
		_WINQ_USESAPI( RegGetValueW );
		lResult = Call< LONG, HKEY, LPCWSTR, LPCWSTR, DWORD, LPDWORD, PVOID, LPDWORD >( pFunc, hkey, lpSubKey, 
			lpValue, dwFlags, pdwType, pvData, pcbData );
#	else
		__QCMP_UNREF4( hkey, lpSubKey, lpValue, dwFlags );
		QOR_PP_UNREF( pdwType );
		QOR_PP_UNREF( pvData );
		QOR_PP_UNREF( pcbData );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegGetValueW" ), _T( "Windows Server 2003 with SP1" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	#if( _WIN32_WINNT < 0x0600 )
	#   ifdef UNICODE
	#       define RegLoadAppKey RegLoadAppKeyW
	#   else
	#       define RegLoadAppKey RegLoadAppKeyA
	#   endif
	#endif

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegLoadAppKeyA( LPCSTR lpFile, PHKEY phkResult, REGSAM samDesired, DWORD dwOptions, DWORD Reserved )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegLoadAppKey" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( RegLoadAppKeyA );
		lResult = Call< LONG, LPCSTR, PHKEY, REGSAM, DWORD, DWORD >( pFunc, lpFile, phkResult, samDesired, 
			dwOptions, Reserved );
#	else
		__QCMP_UNREF4( lpFile, phkResult, samDesired, dwOptions );
		QOR_PP_UNREF( Reserved );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegLoadAppKeyA" ), _T( "Windows Vista" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegLoadAppKeyW( LPCWSTR lpFile, PHKEY phkResult, REGSAM samDesired, DWORD dwOptions, DWORD Reserved )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegLoadAppKey" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( RegLoadAppKeyW );
		lResult = Call< LONG, LPCWSTR, PHKEY, REGSAM, DWORD, DWORD >( pFunc, lpFile, phkResult, samDesired, 
			dwOptions, Reserved );
#	else
		__QCMP_UNREF4( lpFile, phkResult, samDesired, dwOptions );
		QOR_PP_UNREF( Reserved );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegLoadAppKeyW" ), _T( "Windows Vista" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegLoadKeyA( HKEY hKey, LPCSTR lpSubKey, LPCSTR lpFile )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegLoadKey" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegLoadKeyA );
		lResult = Call< LONG, HKEY, LPCSTR, LPCSTR >( pFunc, hKey, lpSubKey, lpFile );
#	else
		QOR_PP_UNREF( hKey );
		QOR_PP_UNREF( lpSubKey );
		QOR_PP_UNREF( lpFile );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegLoadKeyA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegLoadKeyW( HKEY hKey, LPCWSTR lpSubKey, LPCWSTR lpFile )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegLoadKey" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegLoadKeyW );
		lResult = Call< LONG, HKEY, LPCWSTR, LPCWSTR >( pFunc, hKey, lpSubKey, lpFile );
#	else
		QOR_PP_UNREF( hKey );
		QOR_PP_UNREF( lpSubKey );
		QOR_PP_UNREF( lpFile );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegLoadKeyW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	#if( _WIN32_WINNT < 0x0600 )
	#   ifdef UNICODE
	#       define RegLoadMUIString RegLoadMUIStringW
	#   else
	#       define RegLoadMUIString RegLoadMUIStringA
	#   endif
	#endif

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegLoadMUIStringA( HKEY hKey, LPCSTR pszValue, LPSTR pszOutBuf, DWORD cbOutBuf, LPDWORD pcbData, DWORD Flags,
						   LPCSTR pszDirectory )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegLoadMUIString" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( RegLoadMUIStringA );
		lResult = Call< LONG, HKEY, LPCSTR, LPSTR, DWORD, LPDWORD, DWORD, LPCSTR >( pFunc, hKey, pszValue, 
			pszOutBuf, cbOutBuf, pcbData, Flags, pszDirectory );
#	else
		__QCMP_UNREF4( hKey, pszValue, pszOutBuf, cbOutBuf );
		QOR_PP_UNREF( pcbData );
		QOR_PP_UNREF( Flags );
		QOR_PP_UNREF( pszDirectory );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegLoadMUIStringA" ), _T( "Windows Vista" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegLoadMUIStringW( HKEY hKey, LPCWSTR pszValue, LPWSTR pszOutBuf, DWORD cbOutBuf, LPDWORD pcbData, 
						   DWORD Flags, LPCWSTR pszDirectory )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegLoadMUIString" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( RegLoadMUIStringW );
		lResult = Call< LONG, HKEY, LPCWSTR, LPWSTR, DWORD, LPDWORD, DWORD, LPCWSTR >( pFunc, hKey, pszValue, 
			pszOutBuf, cbOutBuf, pcbData, Flags, pszDirectory );
#	else
		__QCMP_UNREF4( hKey, pszValue, pszOutBuf, cbOutBuf );
		QOR_PP_UNREF( pcbData );
		QOR_PP_UNREF( Flags );
		QOR_PP_UNREF( pszDirectory );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegLoadMUIStringW" ), _T( "Windows Vista" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegNotifyChangeKeyValue( HKEY hKey, BOOL bWatchSubtree, DWORD dwNotifyFilter, HANDLE hEvent, 
								 BOOL fAsynchronous )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegNotifyChangeKeyValue" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegNotifyChangeKeyValue );
		lResult = Call< LONG, HKEY, BOOL, DWORD, HANDLE, BOOL >( pFunc, hKey, bWatchSubtree, dwNotifyFilter, 
			hEvent, fAsynchronous );
#	else
		__QCMP_UNREF4( hKey, bWatchSubtree, dwNotifyFilter, hEvent );
		QOR_PP_UNREF( fAsynchronous );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegNotifyChangeKeyValue" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegOpenCurrentUser( REGSAM samDesired, PHKEY phkResult )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegOpenCurrentUser" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegOpenCurrentUser );
		lResult = Call< LONG, REGSAM, PHKEY >( pFunc, samDesired, phkResult );
#	else
		QOR_PP_UNREF( samDesired );
		QOR_PP_UNREF( phkResult );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegOpenCurrentUser" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegOpenKeyA( HKEY hKey, LPCSTR lpSubKey, PHKEY phkResult )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegOpenKey" );
		CCheckReturn< long, CSuccessCheck<> >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegOpenKeyA );
		lResult = Call< LONG, HKEY, LPCSTR, PHKEY >( pFunc, hKey, lpSubKey, phkResult );
#	else
		QOR_PP_UNREF( hKey );
		QOR_PP_UNREF( lpSubKey );
		QOR_PP_UNREF( phkResult );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegOpenKeyA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegOpenKeyW( HKEY hKey, LPCWSTR lpSubKey, PHKEY phkResult )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegOpenKey" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegOpenKeyW );
		lResult = Call< LONG, HKEY, LPCWSTR, PHKEY >( pFunc, hKey, lpSubKey, phkResult );
#	else
		QOR_PP_UNREF( hKey );
		QOR_PP_UNREF( lpSubKey );
		QOR_PP_UNREF( phkResult );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegOpenKeyW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegOpenKeyExA( HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegOpenKeyEx" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegOpenKeyExA );
		lResult = Call< LONG, HKEY, LPCSTR, DWORD, REGSAM, PHKEY >( pFunc, hKey, lpSubKey, ulOptions, samDesired,
			phkResult);
#	else
		__QCMP_UNREF4( hKey, lpSubKey, ulOptions, samDesired );
		QOR_PP_UNREF( phkResult );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegOpenKeyExA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegOpenKeyExW( HKEY hKey, LPCWSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegOpenKeyEx" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegOpenKeyExW );
		lResult = Call< LONG, HKEY, LPCWSTR, DWORD, REGSAM, PHKEY >( pFunc, hKey, lpSubKey, ulOptions, samDesired,
			phkResult);
#	else
		__QCMP_UNREF4( hKey, lpSubKey, ulOptions, samDesired );
		QOR_PP_UNREF( phkResult );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegOpenKeyExW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegOpenKeyTransactedA( HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult, 
							   HANDLE hTransaction, PVOID pExtendedParameter )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegOpenKeyTransacted" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( RegOpenKeyTransactedA );
		lResult = Call< LONG, HKEY, LPCSTR, DWORD, REGSAM, PHKEY, HANDLE, PVOID >( pFunc, hKey, lpSubKey, 
			ulOptions, samDesired, phkResult, hTransaction, pExtendedParameter );
#	else
		__QCMP_UNREF4( hKey, lpSubKey, ulOptions, samDesired );
		QOR_PP_UNREF( phkResult );
		QOR_PP_UNREF( hTransaction );
		QOR_PP_UNREF( pExtendedParameter );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegOpenKeyTransactedA" ), _T( "Windows Vista" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegOpenKeyTransactedW( HKEY hKey, LPCWSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult, 
							   HANDLE hTransaction, PVOID pExtendedParameter )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegOpenKeyTransacted" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( RegOpenKeyTransactedW );
		lResult = Call< LONG, HKEY, LPCWSTR, DWORD, REGSAM, PHKEY, HANDLE, PVOID >( pFunc, hKey, lpSubKey, 
			ulOptions, samDesired, phkResult, hTransaction, pExtendedParameter );
#	else
		__QCMP_UNREF4( hKey, lpSubKey, ulOptions, samDesired );
		QOR_PP_UNREF( phkResult );
		QOR_PP_UNREF( hTransaction );
		QOR_PP_UNREF( pExtendedParameter );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegOpenKeyTransactedW" ), _T( "Windows Vista" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegOpenUserClassesRoot( HANDLE hToken, DWORD dwOptions, REGSAM samDesired, PHKEY phkResult )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegOpenUserClassesRoot" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegOpenUserClassesRoot );
		lResult = Call< LONG, HANDLE, DWORD, REGSAM, PHKEY >( pFunc, hToken, dwOptions, samDesired, phkResult );
#	else
		__QCMP_UNREF4( hToken, dwOptions, samDesired, phkResult );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegOpenUserClassesRoot" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegOverridePredefKey( HKEY hKey, HKEY hNewHKey )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegOverridePredefKey" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegOverridePredefKey );
		lResult = Call< LONG, HKEY, HKEY >( pFunc, hKey, hNewHKey );
#	else
		QOR_PP_UNREF( hKey );
		QOR_PP_UNREF( hNewHKey );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegOverridePredefKey" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegQueryInfoKeyA( HKEY hKey, LPSTR lpClass, LPDWORD lpcClass, LPDWORD lpReserved, LPDWORD lpcSubKeys, 
						  LPDWORD lpcMaxSubKeyLen, LPDWORD lpcMaxClassLen, LPDWORD lpcValues, LPDWORD lpcMaxValueNameLen,
						  LPDWORD lpcMaxValueLen, LPDWORD lpcbSecurityDescriptor, ::PFILETIME lpftLastWriteTime )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegQueryInfoKey" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegQueryInfoKeyA );
		lResult = Call< LONG, HKEY, LPSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD, LPDWORD, LPDWORD, LPDWORD,
			LPDWORD, LPDWORD, ::PFILETIME >( pFunc, hKey, lpClass, lpcClass, lpReserved, lpcSubKeys, lpcMaxSubKeyLen, 
			lpcMaxClassLen, lpcValues, lpcMaxValueNameLen, lpcMaxValueLen, lpcbSecurityDescriptor, lpftLastWriteTime );
#	else
		__QCMP_UNREF4( hKey, lpClass, lpcClass, lpReserved );
		__QCMP_UNREF4( lpcSubKeys, lpcMaxSubKeyLen, lpcMaxClassLen, lpcValues );
		__QCMP_UNREF4( lpcMaxValueNameLen, lpcMaxValueLen, lpcbSecurityDescriptor, lpftLastWriteTime );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegQueryInfoKeyA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegQueryInfoKeyW( HKEY hKey, LPWSTR lpClass, LPDWORD lpcClass, LPDWORD lpReserved, LPDWORD lpcSubKeys, 
						  LPDWORD lpcMaxSubKeyLen, LPDWORD lpcMaxClassLen, LPDWORD lpcValues, LPDWORD lpcMaxValueNameLen, 
						  LPDWORD lpcMaxValueLen, LPDWORD lpcbSecurityDescriptor, ::PFILETIME lpftLastWriteTime )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegQueryInfoKey" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegQueryInfoKeyW );
		lResult = Call< LONG, HKEY, LPWSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD, LPDWORD, LPDWORD, LPDWORD,
			LPDWORD, LPDWORD, ::PFILETIME >( pFunc, hKey, lpClass, lpcClass, lpReserved, lpcSubKeys, lpcMaxSubKeyLen, 
			lpcMaxClassLen, lpcValues, lpcMaxValueNameLen, lpcMaxValueLen, lpcbSecurityDescriptor, lpftLastWriteTime );
#	else
		__QCMP_UNREF4( hKey, lpClass, lpcClass, lpReserved );
		__QCMP_UNREF4( lpcSubKeys, lpcMaxSubKeyLen, lpcMaxClassLen, lpcValues );
		__QCMP_UNREF4( lpcMaxValueNameLen, lpcMaxValueLen, lpcbSecurityDescriptor, lpftLastWriteTime );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegQueryInfoKeyW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegQueryMultipleValuesA( HKEY hKey, ::PVALENT val_list, DWORD num_vals, LPSTR lpValueBuf, LPDWORD ldwTotsize )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegQueryMultipleValues" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegQueryMultipleValuesA );
		lResult = Call< LONG, HKEY, ::PVALENT, DWORD, LPSTR, LPDWORD >( pFunc, hKey, val_list, num_vals, lpValueBuf, 
			ldwTotsize );
#	else
		__QCMP_UNREF4( hKey, val_list, num_vals, lpValueBuf );
		QOR_PP_UNREF( ldwTotsize );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegQueryMultipleValuesA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegQueryMultipleValuesW( HKEY hKey, ::PVALENT val_list, DWORD num_vals, LPWSTR lpValueBuf, LPDWORD ldwTotsize )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegQueryMultipleValues" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegQueryMultipleValuesW );
		lResult = Call< LONG, HKEY, ::PVALENT, DWORD, LPWSTR, LPDWORD >( pFunc, hKey, val_list, num_vals, lpValueBuf, 
			ldwTotsize );
#	else
		__QCMP_UNREF4( hKey, val_list, num_vals, lpValueBuf );
		QOR_PP_UNREF( ldwTotsize );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegQueryMultipleValuesW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegQueryReflectionKey( HKEY hBase, BOOL* bIsReflectionDisabled )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegQueryReflectionKey" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( RegQueryReflectionKey );
		lResult = Call< LONG, HKEY, BOOL* >( pFunc, hBase, bIsReflectionDisabled );
#	else
		QOR_PP_UNREF( hBase );
		QOR_PP_UNREF( bIsReflectionDisabled );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegQueryReflectionKey" ), _T( "Windows Vista" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegQueryValueA( HKEY hKey, LPCSTR lpSubKey, LPSTR lpValue, PLONG lpcbValue )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegQueryValue" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegQueryValueA );
		lResult = Call< LONG, HKEY, LPCSTR, LPSTR, PLONG >( pFunc, hKey, lpSubKey, lpValue, lpcbValue );
#	else
		__QCMP_UNREF4( hKey, lpSubKey, lpValue, lpcbValue );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegQueryValueA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegQueryValueW( HKEY hKey, LPCWSTR lpSubKey, LPWSTR lpValue, PLONG lpcbValue )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegQueryValue" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegQueryValueW );
		lResult = Call< LONG, HKEY, LPCWSTR, LPWSTR, PLONG >( pFunc, hKey, lpSubKey, lpValue, lpcbValue );
#	else
		__QCMP_UNREF4( hKey, lpSubKey, lpValue, lpcbValue );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegQueryValueW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegQueryValueExA( HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, 
						  LPDWORD lpcbData )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegQueryValueEx" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegQueryValueExA );
		lResult = Call< LONG, HKEY, LPCSTR, LPDWORD, LPDWORD, LPBYTE, LPDWORD >( pFunc, hKey, lpValueName, 
			lpReserved, lpType, lpData, lpcbData );
#	else
		__QCMP_UNREF4( hKey, lpValueName, lpReserved, lpType );
		QOR_PP_UNREF( lpData );
		QOR_PP_UNREF( lpcbData );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegQueryValueExA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegQueryValueExW( HKEY hKey, LPCWSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, 
						  LPDWORD lpcbData )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegQueryValueEx" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegQueryValueExW );
		lResult = Call< LONG, HKEY, LPCWSTR, LPDWORD, LPDWORD, LPBYTE, LPDWORD >( pFunc, hKey, lpValueName, lpReserved, lpType, lpData, lpcbData );
#	else
		__QCMP_UNREF4( hKey, lpValueName, lpReserved, lpType );
		QOR_PP_UNREF( lpData );
		QOR_PP_UNREF( lpcbData );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegQueryValueExW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegReplaceKeyA( HKEY hKey, LPCSTR lpSubKey, LPCSTR lpNewFile, LPCSTR lpOldFile )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegReplaceKey" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegReplaceKeyA );
		lResult = Call< LONG, HKEY, LPCSTR, LPCSTR, LPCSTR >( pFunc, hKey, lpSubKey, lpNewFile, lpOldFile );
#	else
		__QCMP_UNREF4( hKey, lpSubKey, lpNewFile, lpOldFile );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegReplaceKeyA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegReplaceKeyW( HKEY hKey, LPCWSTR lpSubKey, LPCWSTR lpNewFile, LPCWSTR lpOldFile )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegReplaceKey" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegReplaceKeyW );
		lResult = Call< LONG, HKEY, LPCWSTR, LPCWSTR, LPCWSTR >( pFunc, hKey, lpSubKey, lpNewFile, lpOldFile );
#	else
		__QCMP_UNREF4( hKey, lpSubKey, lpNewFile, lpOldFile );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegReplaceKeyW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegRestoreKeyA( HKEY hKey, LPCSTR lpFile, DWORD dwFlags )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegRestoreKey" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegRestoreKeyA );
		lResult = Call< LONG, HKEY, LPCSTR, DWORD >( pFunc, hKey, lpFile, dwFlags );
#	else
		QOR_PP_UNREF( hKey );
		QOR_PP_UNREF( lpFile );
		QOR_PP_UNREF( dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegRestoreKeyA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegRestoreKeyW( HKEY hKey, LPCWSTR lpFile, DWORD dwFlags )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegRestoreKey" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegRestoreKeyW );
		lResult = Call< LONG, HKEY, LPCWSTR, DWORD >( pFunc, hKey, lpFile, dwFlags );
#	else
		QOR_PP_UNREF( hKey );
		QOR_PP_UNREF( lpFile );
		QOR_PP_UNREF( dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegRestoreKeyW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegSaveKeyA( HKEY hKey, LPCSTR lpFile, ::LPSECURITY_ATTRIBUTES lpSecurityAttributes )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegSaveKey" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegSaveKeyA );
		lResult = Call< LONG, HKEY, LPCSTR, ::LPSECURITY_ATTRIBUTES >( pFunc, hKey, lpFile, lpSecurityAttributes );
#	else
		QOR_PP_UNREF( hKey );
		QOR_PP_UNREF( lpFile );
		QOR_PP_UNREF( lpSecurityAttributes );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegSaveKeyA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegSaveKeyW( HKEY hKey, LPCWSTR lpFile, ::LPSECURITY_ATTRIBUTES lpSecurityAttributes )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegSaveKey" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegSaveKeyW );
		lResult = Call< LONG, HKEY, LPCWSTR, ::LPSECURITY_ATTRIBUTES >( pFunc, hKey, lpFile, lpSecurityAttributes );
#	else
		QOR_PP_UNREF( hKey );
		QOR_PP_UNREF( lpFile );
		QOR_PP_UNREF( lpSecurityAttributes );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegSaveKeyW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegSaveKeyExA( HKEY hKey, LPCSTR lpFile, ::LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD Flags )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegSaveKeyEx" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( RegSaveKeyExA );
		lResult = Call< LONG, HKEY, LPCSTR, ::LPSECURITY_ATTRIBUTES, DWORD >( pFunc, hKey, lpFile, lpSecurityAttributes, Flags );
#	else
		__QCMP_UNREF4( hKey, lpFile, lpSecurityAttributes, Flags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegSaveKeyExA" ), _T( "Windows XP" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegSaveKeyExW( HKEY hKey, LPCWSTR lpFile, ::LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD Flags )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegSaveKeyEx" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( RegSaveKeyExW );
		lResult = Call< LONG, HKEY, LPCWSTR, ::LPSECURITY_ATTRIBUTES, DWORD >( pFunc, hKey, lpFile, lpSecurityAttributes, Flags );
#	else
		__QCMP_UNREF4( hKey, lpFile, lpSecurityAttributes, Flags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegSaveKeyExW" ), _T( "Windows XP" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	#if( _WIN32_WINNT < 0x0600 )
	#   ifdef UNICODE
	#       define RegSetKeyValue RegSetKeyValueW
	#   else
	#       define RegSetKeyValue RegSetKeyValueA
	#   endif
	#endif

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegSetKeyValueA( HKEY hKey, LPCSTR lpSubKey, LPCSTR lpValueName, DWORD dwType, LPCVOID lpData, DWORD cbData )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegSetKeyValue" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( RegSetKeyValueA );
		lResult = Call< LONG, HKEY, LPCSTR, LPCSTR, DWORD, LPCVOID, DWORD >( pFunc, hKey, lpSubKey, lpValueName, dwType, lpData, cbData );
#	else
		__QCMP_UNREF4( hKey, lpSubKey, lpValueName, dwType );
		QOR_PP_UNREF( lpData );
		QOR_PP_UNREF( cbData );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegSetKeyValueA" ), _T( "Windows Vista" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegSetKeyValueW( HKEY hKey, LPCWSTR lpSubKey, LPCWSTR lpValueName, DWORD dwType, LPCVOID lpData, DWORD cbData )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegSetKeyValue" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( RegSetKeyValueW );
		lResult = Call< LONG, HKEY, LPCWSTR, LPCWSTR, DWORD, LPCVOID, DWORD >( pFunc, hKey, lpSubKey, lpValueName, dwType, lpData, cbData );
#	else
		__QCMP_UNREF4( hKey, lpSubKey, lpValueName, dwType );
		QOR_PP_UNREF( lpData );
		QOR_PP_UNREF( cbData );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegSetKeyValueW" ), _T( "Windows Vista" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegSetValueA( HKEY hKey, LPCSTR lpSubKey, DWORD dwType, LPCSTR lpData, DWORD cbData )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegSetValue" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegSetValueA );
		lResult = Call< LONG, HKEY, LPCSTR, DWORD, LPCSTR, DWORD >( pFunc, hKey, lpSubKey, dwType, lpData, cbData );
#	else
		__QCMP_UNREF4( hKey, lpSubKey, dwType, lpData );
		QOR_PP_UNREF( cbData );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegSetValueA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegSetValueW( HKEY hKey, LPCWSTR lpSubKey, DWORD dwType, LPCWSTR lpData, DWORD cbData )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegSetValue" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegSetValueW );
		lResult = Call< LONG, HKEY, LPCWSTR, DWORD, LPCWSTR, DWORD >( pFunc, hKey, lpSubKey, dwType, lpData, cbData );
#	else
		__QCMP_UNREF4( hKey, lpSubKey, dwType, lpData );
		QOR_PP_UNREF( cbData );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegSetValueW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegSetValueExA( HKEY hKey, LPCSTR lpValueName, DWORD Reserved, DWORD dwType, const BYTE* lpData, 
						DWORD cbData )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegSetValueEx" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegSetValueExA );
		lResult = Call< LONG, HKEY, LPCSTR, DWORD, DWORD, const BYTE*, DWORD >( pFunc, hKey, lpValueName, Reserved, dwType, lpData, cbData );
#	else
		QOR_PP_UNREF( hKey );
		QOR_PP_UNREF( lpValueName );
		__QCMP_UNREF4( Reserved, dwType, lpData, cbData );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegSetValueExA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegSetValueExW( HKEY hKey, LPCWSTR lpValueName, DWORD Reserved, DWORD dwType, const BYTE* lpData, 
						DWORD cbData )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegSetValueEx" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegSetValueExW );
		lResult = Call< LONG, HKEY, LPCWSTR, DWORD, DWORD, const BYTE*, DWORD >( pFunc, hKey, lpValueName, Reserved, dwType, lpData, cbData );
#	else
		QOR_PP_UNREF( hKey );
		QOR_PP_UNREF( lpValueName );
		__QCMP_UNREF4( Reserved, dwType, lpData, cbData );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegSetValueExW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegUnLoadKeyA( HKEY hKey, LPCSTR lpSubKey )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegUnLoadKey" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegUnLoadKeyA );
		lResult = Call< LONG, HKEY, LPCSTR >( pFunc, hKey, lpSubKey );
#	else
		QOR_PP_UNREF( hKey );
		QOR_PP_UNREF( lpSubKey );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegUnLoadKeyA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

	//------------------------------------------------------------------------------
	LONG CAdvAPI32::RegUnLoadKeyW( HKEY hKey, LPCWSTR lpSubKey )
	{
		_WINQ_FCONTEXT( "CAdvAPI32::RegUnLoadKey" );
		CCheckReturn< LONG, CSuccessCheck< > >::TType lResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( RegUnLoadKeyW );
		lResult = Call< LONG, HKEY, LPCWSTR >( pFunc, hKey, lpSubKey );
#	else
		QOR_PP_UNREF( hKey );
		QOR_PP_UNREF( lpSubKey );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RegUnLoadKeyW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif
		return lResult;
	}

}//nsWinQAPI
