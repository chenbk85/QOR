//kConsole.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQAPI/Kernel32.h"
#include "../Source/SystemQOR/MSWindows/WinQAPI/include/ReturnCheck.h"
#include "../Source/SystemQOR/MSWindows/WinQAPI/include/DynamicLibrary.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
    //------------------------------------------------------------------------------
    CKernel32::CKernel32()
    {
        m_hModule = CKernel32::GetModuleHandle( _TXT( "Kernel32" ) );
    }

    //------------------------------------------------------------------------------
    CKernel32::~CKernel32()
    {

    }

	//------------------------------------------------------------------------------
	CKernel32& CKernel32::Instance( void )
	{
		static CKernel32 _instance;
		return _instance;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::AddConsoleAlias( LPTSTR Source, LPTSTR Target, LPTSTR ExeName )
	{
		_WINQ_SFCONTEXT( "CKernel32::AddConsoleAlias" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( AddConsoleAlias );
		bResult = Call< BOOL, LPTSTR, LPTSTR, LPTSTR >( pFunc, Source, Target, ExeName );
#	else
		QOR_PP_UNREF( ExeName );
		QOR_PP_UNREF( Target );
		QOR_PP_UNREF( Source );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "AddConsoleAlias" ), _T( "Windows XP" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::AllocConsole(void)
	{
		_WINQ_SFCONTEXT( "CKernel32::AllocConsole" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::AllocConsole();
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::AttachConsole( DWORD dwProcessId )
	{
		_WINQ_SFCONTEXT( "CKernel32::AttachConsole" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0501 )
		bResult = ::AttachConsole( dwProcessId );
#	else
		QOR_PP_UNREF( dwProcessId );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "AttachConsole" ), _T( "Windows XP" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	HANDLE CKernel32::CreateConsoleScreenBuffer( DWORD dwDesiredAccess, DWORD dwShareMode, const ::SECURITY_ATTRIBUTES* lpSecurityAttributes, DWORD dwFlags, void* lpScreenBufferData )
	{
		_WINQ_SFCONTEXT( "CKernel32::CreateConsoleScreenBuffer" );
		CCheckReturn< HANDLE, CHandleCheck< > >::TType h = ::CreateConsoleScreenBuffer( dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwFlags, lpScreenBufferData );
		return h;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::FillConsoleOutputAttribute( HANDLE hConsoleOutput, WORD wAttribute, DWORD nLength, ::COORD dwWriteCoord, LPDWORD lpNumberOfAttrsWritten )
	{
		_WINQ_SFCONTEXT( "CKernel32::FillConsoleOutputAttribute" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::FillConsoleOutputAttribute( hConsoleOutput, wAttribute, nLength, dwWriteCoord, lpNumberOfAttrsWritten );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::FillConsoleOutputCharacter( HANDLE hConsoleOutput, TCHAR cCharacter, DWORD nLength, ::COORD dwWriteCoord, LPDWORD lpNumberOfCharsWritten )
	{
		_WINQ_SFCONTEXT( "CKernel32::FillConsoleOutputCharacter" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::FillConsoleOutputCharacter( hConsoleOutput, cCharacter, nLength, dwWriteCoord, lpNumberOfCharsWritten );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::FlushConsoleInputBuffer( HANDLE hConsoleInput )
	{
		_WINQ_SFCONTEXT( "CKernel32::FlushConsoleInputBuffer" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::FlushConsoleInputBuffer( hConsoleInput );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::FreeConsole(void)
	{
		_WINQ_SFCONTEXT( "CKernel32::FreeConsole" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::FreeConsole();
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GenerateConsoleCtrlEvent( DWORD dwCtrlEvent, DWORD dwProcessGroupId )
	{
		_WINQ_SFCONTEXT( "CKernel32::GenerateConsoleCtrlEvent" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::GenerateConsoleCtrlEvent( dwCtrlEvent, dwProcessGroupId );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CKernel32::GetConsoleAlias( LPTSTR lpSource, LPTSTR lpTargetBuffer, DWORD TargetBufferLength, LPTSTR lpExeName )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetConsoleAlias" );
		CCheckReturn< DWORD, CCheckNonZero< DWORD > >::TType dwResult;
#	if( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( GetConsoleAlias );
		dwResult = Call< DWORD, LPTSTR, LPTSTR, DWORD, LPTSTR >( pFunc, lpSource, lpTargetBuffer, TargetBufferLength, lpExeName );

		//dwResult = ::GetConsoleAlias( lpSource, lpTargetBuffer, TargetBufferLength, lpExeName );
#	else
		QOR_PP_UNREF( lpExeName );
		QOR_PP_UNREF( TargetBufferLength );
		QOR_PP_UNREF( lpTargetBuffer );
		QOR_PP_UNREF( lpSource );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetConsoleAlias" ), _T( "Windows XP" ) ));
#	endif
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CKernel32::GetConsoleAliases( LPTSTR lpAliasBuffer, DWORD AliasBufferLength, LPTSTR lpExeName )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetConsoleAliases" );
		CCheckReturn< DWORD, CCheckNonZero< DWORD > >::TType dwResult;
#	if( _WIN32_WINNT >= 0x0501 )
        _WINQ_USESAPI( GetConsoleAliases );
		dwResult = Call< DWORD, LPTSTR, DWORD, LPTSTR >( pFunc, lpAliasBuffer, AliasBufferLength, lpExeName );
#	else
		QOR_PP_UNREF( lpExeName );
		QOR_PP_UNREF( AliasBufferLength );
		QOR_PP_UNREF( lpAliasBuffer );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetConsoleAliases" ), _T( "Windows XP" ) ));
#	endif
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CKernel32::GetConsoleAliasesLength( LPTSTR lpExeName )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetConsoleAliasesLength" );
		DWORD dwResult = 0;
#	if( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( GetConsoleAliasesLength );
		dwResult = Call< DWORD, LPTSTR >( pFunc, lpExeName );
		//dwResult = ::GetConsoleAliasesLength( lpExeName );
#	else
		QOR_PP_UNREF( lpExeName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetConsoleAliasesLength" ), _T( "Windows XP" ), 0 ));
#	endif
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CKernel32::GetConsoleAliasExes( LPTSTR lpExeNameBuffer, DWORD ExeNameBufferLength )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetConsoleAliasExes" );
		CCheckReturn< DWORD, CCheckNonZero< DWORD > >::TType dwResult;
#	if ( _WIN32_WINNT >= 0x0501 )
        _WINQ_USESAPI( GetConsoleAliasExes );
		dwResult = Call< DWORD, LPTSTR, DWORD >( pFunc, lpExeNameBuffer, ExeNameBufferLength );
#	else
		QOR_PP_UNREF( ExeNameBufferLength );
		QOR_PP_UNREF( lpExeNameBuffer );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetConsoleAliasExes" ), _T( "Windows XP" ), 0 ));
#	endif
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CKernel32::GetConsoleAliasExesLength( VOID )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetConsoleAliasExesLength" );
		DWORD dwResult = 0;
#	if ( _WIN32_WINNT >= 0x0501 )
        _WINQ_USESAPI( GetConsoleAliasExesLength );
		dwResult = Call< DWORD >( pFunc );
#	else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetConsoleAliasExesLength" ), _T("Windows XP" ), 0 ));
#	endif
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	UINT CKernel32::GetConsoleCP(void)
	{
		_WINQ_SFCONTEXT( "CKernel32::GetConsoleCP" );
		return ::GetConsoleCP();
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetConsoleCursorInfo( HANDLE hConsoleOutput, ::PCONSOLE_CURSOR_INFO lpConsoleCursorInfo )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetConsoleCursorInfo" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::GetConsoleCursorInfo( hConsoleOutput, lpConsoleCursorInfo );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetConsoleDisplayMode( LPDWORD lpModeFlags )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetConsoleDisplayMode" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		__QOR_CODESTRING( APIName, "GetConsoleDisplayMode" );
#	if ( _WIN32_WINNT >= 0x0501 )
		bResult = ::GetConsoleDisplayMode( lpModeFlags );
#	else
		QOR_PP_UNREF( lpModeFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, APIName.c_str(), _T( "Windows XP" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	::COORD CKernel32::GetConsoleFontSize( HANDLE hConsoleOutput, DWORD nFont )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetConsoleFontSize" );
		::COORD Result = {0};
		__QOR_CODESTRING( APIName, "GetConsoleFontSize" );
#	if ( _WIN32_WINNT >= 0x0501 )
        _WINQ_USESAPI( GetConsoleFontSize );
		Result = Call< COORD, HANDLE, DWORD >( pFunc, hConsoleOutput, nFont );
		if( Result.X == 0 && Result.Y == 0 )
		{
			__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, APIName.c_str(), 0 ));
		}
#	else
		QOR_PP_UNREF( nFont );
		QOR_PP_UNREF( hConsoleOutput );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, APIName.c_str(), _T( "Windows XP" ), 0 ));
#	endif
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetConsoleHistoryInfo( ::PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetConsoleHistoryInfo" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		__QOR_CODESTRING( APIName, "GetConsoleHistoryInfo" );
#	if ( _WIN32_WINNT >= 0x0600 )
        _WINQ_USESAPI( GetConsoleHistoryInfo );
		bResult = Call< BOOL, ::PCONSOLE_HISTORY_INFO >( pFunc, lpConsoleHistoryInfo );
#	else
		QOR_PP_UNREF( lpConsoleHistoryInfo );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, APIName.c_str(), _T( "Windows Vista" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetConsoleMode( HANDLE hConsoleHandle, LPDWORD lpMode )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetConsoleMode" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		bResult = ::GetConsoleMode( hConsoleHandle, lpMode );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CKernel32::GetConsoleOriginalTitle( LPTSTR lpConsoleTitle, DWORD nSize )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetConsoleOriginalTitle" );
		DWORD dwResult = 0;
		__QOR_CODESTRING( APIName, "GetConsoleOriginalTitle" );
#	if ( _WIN32_WINNT >= 0x0600 )
        _WINQ_USESAPI( GetConsoleOriginalTitle );
		dwResult = Call< DWORD, LPTSTR, DWORD >( pFunc, lpConsoleTitle, nSize );
		if( dwResult == 0 )
		{
			DWORD dwError = CKernel32::GetLastError();
			if( dwError == ERROR_SUCCESS )
			{
				__WINQAPI_WARNING(( BUFFER_INADEQUATE, APIName.c_str(), nSize, 0 ));
			}
			else
			{
				__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, APIName.c_str(), 0 ));
			}
		}
#	else
		QOR_PP_UNREF( nSize );
		QOR_PP_UNREF( lpConsoleTitle );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, APIName.c_str(), _T( "Windows Vista" ), 0 ));
#	endif
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	UINT CKernel32::GetConsoleOutputCP(void)
	{
		_WINQ_SFCONTEXT( "CKernel32::GetConsoleOutputCP" );
		return ::GetConsoleOutputCP();
	}

	//--------------------------------------------------------------------------------
	DWORD CKernel32::GetConsoleProcessList( LPDWORD lpdwProcessList, DWORD dwProcessCount )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetConsoleProcessList" );
		CCheckReturn< DWORD, CCheckNonZero< DWORD > >::TType dwResult;
		__QOR_CODESTRING( APIName, "GetConsoleProcessList" );
#	if ( _WIN32_WINNT >= 0x0501 )
		dwResult = ::GetConsoleProcessList( lpdwProcessList, dwProcessCount );
#	else
		QOR_PP_UNREF( dwProcessCount );
		QOR_PP_UNREF( lpdwProcessList );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, APIName.c_str(), _T( "Windows XP" ), 0 ));
#	endif
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetConsoleScreenBufferInfo( HANDLE hConsoleOutput, ::PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetConsoleScreenBufferInfo" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::GetConsoleScreenBufferInfo( hConsoleOutput, lpConsoleScreenBufferInfo );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetConsoleScreenBufferInfoEx( HANDLE hConsoleOutput, ::PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetConsoleScreenBufferInfoEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetConsoleScreenBufferInfoEx );
		 bResult = Call< BOOL, HANDLE, ::PCONSOLE_SCREEN_BUFFER_INFOEX >( pFunc, hConsoleOutput, lpConsoleScreenBufferInfoEx );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetConsoleSelectionInfo( ::PCONSOLE_SELECTION_INFO lpConsoleSelectionInfo )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetConsoleSelectionInfo" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		__QOR_CODESTRING( APIName, "GetConsoleSelectionInfo" );
#	if ( _WIN32_WINNT >= 0x0500 )
        _WINQ_USESAPI( GetConsoleSelectionInfo );
		bResult = Call< BOOL, ::PCONSOLE_SELECTION_INFO >( pFunc, lpConsoleSelectionInfo );
#	else
		QOR_PP_UNREF( lpConsoleSelectionInfo );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, APIName.c_str(), _T( "Windows 2000" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CKernel32::GetConsoleTitle( LPTSTR lpConsoleTitle, DWORD nSize )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetConsoleTitle" );
		DWORD dwResult = ::GetConsoleTitle( lpConsoleTitle, nSize );
		if( dwResult == 0 )
		{
			DWORD dwError = CKernel32::GetLastError();
			__QOR_CODESTRING( APIName, "GetConsoleTitle" );
			if( dwError == ERROR_SUCCESS )
			{
				__WINQAPI_WARNING(( BUFFER_INADEQUATE, APIName.c_str(), nSize, 0 ));
			}
			else
			{
				__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, APIName.c_str(), 0 ));
			}
		}
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	HWND CKernel32::GetConsoleWindow(void)
	{
		_WINQ_SFCONTEXT( "CKernel32::GetConsoleWindow" );
		CCheckReturn< HWND, CCheckNonZero< HWND > >::TType hWnd;
		__QOR_CODESTRING( APIName, "GetConsoleWindow" );
#	if ( _WIN32_WINNT >= 0x0500 )
		hWnd = ::GetConsoleWindow();
#	else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, APIName.c_str(), _T( "Windows 2000" ) ));
#	endif
		return hWnd;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetCurrentConsoleFont( HANDLE hConsoleOutput, BOOL bMaximumWindow, ::PCONSOLE_FONT_INFO lpConsoleCurrentFont )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetCurrentConsoleFont" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		__QOR_CODESTRING( APIName, "GetCurrentConsoleFont" );
#	if ( _WIN32_WINNT >= 0x0500 )
        _WINQ_USESAPI( GetCurrentConsoleFont );
		bResult = Call< BOOL, HANDLE, BOOL, ::PCONSOLE_FONT_INFO >( pFunc, hConsoleOutput, bMaximumWindow, lpConsoleCurrentFont );
#	else
		QOR_PP_UNREF( lpConsoleCurrentFont );
		QOR_PP_UNREF( bMaximumWindow );
		QOR_PP_UNREF( hConsoleOutput );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, APIName.c_str(), _T( "Windows 2000" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetCurrentConsoleFontEx( HANDLE hConsoleOutput, BOOL bMaximumWindow, ::PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetCurrentConsoleFontEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		__QOR_CODESTRING( APIName, "GetCurrentConsoleFontEx" );
#	if ( _WIN32_WINNT >= 0x0600 )
        _WINQ_USESAPI( GetCurrentConsoleFontEx );
		bResult = Call< BOOL, HANDLE, BOOL, ::PCONSOLE_FONT_INFOEX >( pFunc, hConsoleOutput, bMaximumWindow, lpConsoleCurrentFontEx );
#	else
		QOR_PP_UNREF( lpConsoleCurrentFontEx );
		QOR_PP_UNREF( bMaximumWindow );
		QOR_PP_UNREF( hConsoleOutput );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, APIName.c_str(), _T( "Windows Vista" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	::COORD CKernel32::GetLargestConsoleWindowSize( HANDLE hConsoleOutput )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetLargestConsoleWindowSize" );
		::COORD Result = {0};
		Result = ::GetLargestConsoleWindowSize( hConsoleOutput );
		if( Result.X == 0 && Result.Y == 0 )
		{
			__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "GetLargetConsoleWindowSize" ), 0 ));
		}
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetNumberOfConsoleInputEvents( HANDLE hConsoleInput, LPDWORD lpcNumberOfEvents )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetNumberOfConsoleInputEvents" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::GetNumberOfConsoleInputEvents( hConsoleInput, lpcNumberOfEvents );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetNumberOfConsoleMouseButtons( LPDWORD lpNumberOfMouseButtons )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetNumberOfConsoleMouseButtons" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::GetNumberOfConsoleMouseButtons( lpNumberOfMouseButtons );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	HANDLE CKernel32::GetStdHandle( DWORD nStdHandle )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetStdHandle" );
		HANDLE h = ::GetStdHandle( nStdHandle );
		if( h == INVALID_HANDLE_VALUE )
		{
			__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "GetStdHandle" ), 0 ));
		}
#ifndef _WINDOWS	//It's normal for this to fail if there is no Console
		else if( h == 0 && ( nStdHandle != (unsigned long) -11 ) )
		{
			__WINQAPI_CONT_ERROR(( NO_STANDARD_HANDLE, 0 ));
		}
#endif
		return h;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::PeekConsoleInput( HANDLE hConsoleInput, ::PINPUT_RECORD lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsRead )
	{
		_WINQ_SFCONTEXT( "CKernel32::PeekConsoleInput" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::PeekConsoleInput( hConsoleInput, lpBuffer, nLength, lpNumberOfEventsRead );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::ReadConsole( HANDLE hConsoleInput, void* lpBuffer, DWORD nNumberOfCharsToRead, LPDWORD lpNumberOfCharsRead, ::PCONSOLE_READCONSOLE_CONTROL pReadcontrol )
	{
		_WINQ_SFCONTEXT( "CKernel32::ReadConsole" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::ReadConsole( hConsoleInput, lpBuffer, nNumberOfCharsToRead, lpNumberOfCharsRead, pReadcontrol );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::ReadConsoleInput( HANDLE hConsoleInput, ::PINPUT_RECORD lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsRead )
	{
		_WINQ_SFCONTEXT( "CKernel32::ReadConsoleInput" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::ReadConsoleInput( hConsoleInput, lpBuffer, nLength, lpNumberOfEventsRead );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::ReadConsoleOutput( HANDLE hConsoleOutput, ::PCHAR_INFO lpBuffer, ::COORD dwBufferSize, ::COORD dwBufferCoord, ::PSMALL_RECT lpReadRegion )
	{
		_WINQ_SFCONTEXT( "CKernel32::ReadConsoleOutput" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::ReadConsoleOutput( hConsoleOutput, lpBuffer, dwBufferSize, dwBufferCoord, lpReadRegion );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::ReadConsoleOutputAttribute( HANDLE hConsoleOutput, LPWORD lpAttribute, DWORD nLength, ::COORD dwReadCoord, LPDWORD lpNumberOfAttrsRead )
	{
		_WINQ_SFCONTEXT( "CKernel32::ReadConsoleOutputAttribute" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::ReadConsoleOutputAttribute( hConsoleOutput, lpAttribute, nLength, dwReadCoord, lpNumberOfAttrsRead );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::ReadConsoleOutputCharacter( HANDLE hConsoleOutput, LPTSTR lpCharacter, DWORD nLength, ::COORD dwReadCoord, LPDWORD lpNumberOfCharsRead )
	{
		_WINQ_SFCONTEXT( "CKernel32::ReadConsoleOutputCharacter" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::ReadConsoleOutputCharacter( hConsoleOutput, lpCharacter, nLength, dwReadCoord, lpNumberOfCharsRead );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::ScrollConsoleScreenBuffer( HANDLE hConsoleOutput, const ::SMALL_RECT* lpScrollRectangle, const ::SMALL_RECT* lpClipRectangle, ::COORD dwDestinationOrigin, const ::CHAR_INFO* lpFill )
	{
		_WINQ_SFCONTEXT( "CKernel32::ScrollConsoleScreenBuffer" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::ScrollConsoleScreenBuffer( hConsoleOutput, lpScrollRectangle, lpClipRectangle, dwDestinationOrigin, lpFill );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::SetConsoleActiveScreenBuffer( HANDLE hConsoleOutput )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetConsoleActiveScreenBuffer" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::SetConsoleActiveScreenBuffer( hConsoleOutput );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::SetConsoleCP( UINT wCodePageID )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetConsoleCP" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::SetConsoleCP( wCodePageID );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::SetConsoleCtrlHandler( PHANDLER_ROUTINE HandlerRoutine, BOOL Add )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetConsoleCtrlHandler" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::SetConsoleCtrlHandler( HandlerRoutine, Add );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::SetConsoleCursorInfo( HANDLE hConsoleOutput, const ::CONSOLE_CURSOR_INFO* lpConsoleCursorInfo )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetConsoleCursorInfo" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::SetConsoleCursorInfo( hConsoleOutput, lpConsoleCursorInfo );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::SetConsoleCursorPosition( HANDLE hConsoleOutput, ::COORD dwCursorPosition )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetConsoleCursorPosition" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::SetConsoleCursorPosition( hConsoleOutput, dwCursorPosition );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::SetConsoleMode( HANDLE hConsoleHandle, DWORD dwMode )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetConsoleMode" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::SetConsoleMode( hConsoleHandle, dwMode );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::SetConsoleDisplayMode( HANDLE hConsoleOutput, DWORD dwFlags, ::PCOORD lpNewScreenBufferDimensions )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetConsoleDisplayMode" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		__QOR_CODESTRING( APIName, "SetConsoleDisplayMode" );
#	if( _WIN32_WINNT >= 0x0502 )
		bResult = ::SetConsoleDisplayMode( hConsoleOutput, dwFlags, lpNewScreenBufferDimensions );
#	else
		QOR_PP_UNREF( lpNewScreenBufferDimensions );
		QOR_PP_UNREF( dwFlags );
		QOR_PP_UNREF( hConsoleOutput );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, APIName.c_str(), _T( "Windows XP" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::SetConsoleHistoryInfo( ::PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetConsoleHistoryInfo" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		__QOR_CODESTRING( APIName, "SetConsoleHistoryInfo" );
#	if ( _WIN32_WINNT >= 0x0600 )
        _WINQ_USESAPI( SetConsoleHistoryInfo );
		bResult = Call< BOOL, ::PCONSOLE_HISTORY_INFO >( pFunc, lpConsoleHistoryInfo );
#	else
		QOR_PP_UNREF( lpConsoleHistoryInfo );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, APIName.c_str(), _T( "Windows Vista" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::SetConsoleOutputCP( UINT wCodePageID )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetConsoleOutputCP" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::SetConsoleOutputCP( wCodePageID );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::SetConsoleScreenBufferInfoEx( HANDLE hConsoleOutput, ::PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetConsoleScreenBufferInfoEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		__QOR_CODESTRING( APIName, "SetConsoleScreenBufferInfoEx" );
#	if ( _WIN32_WINNT >= 0x0600 )
        _WINQ_USESAPI( SetConsoleScreenBufferInfoEx );
		bResult = Call< BOOL, HANDLE, ::PCONSOLE_SCREEN_BUFFER_INFOEX >( pFunc, hConsoleOutput, lpConsoleScreenBufferInfoEx );
#	else
		QOR_PP_UNREF( lpConsoleScreenBufferInfoEx );
		QOR_PP_UNREF( hConsoleOutput );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, APIName.c_str(), _T( "Windows Vista" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::SetConsoleScreenBufferSize( HANDLE hConsoleOutput, ::COORD dwSize )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetConsoleScreenBufferSize" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::SetConsoleScreenBufferSize( hConsoleOutput, dwSize );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::SetConsoleTextAttribute( HANDLE hConsoleOutput, WORD wAttributes )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetConsoleTextAttribute" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::SetConsoleTextAttribute( hConsoleOutput, wAttributes );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::SetConsoleTitle( LPCTSTR lpConsoleTitle )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetConsoleTitle" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::SetConsoleTitle( lpConsoleTitle );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::SetConsoleWindowInfo( HANDLE hConsoleOutput, BOOL bAbsolute, const ::SMALL_RECT* lpConsoleWindow )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetConsoleWindowInfo" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::SetConsoleWindowInfo( hConsoleOutput, bAbsolute, lpConsoleWindow );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::SetCurrentConsoleFontEx( HANDLE hConsoleOutput, BOOL bMaximumWindow, ::PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetCurrentConsoleFontEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		__QOR_CODESTRING( APIName, "SetCurrentConsoleFontEx" );
#	if ( _WIN32_WINNT >= 0x0600 )
        _WINQ_USESAPI( SetCurrentConsoleFontEx );
		bResult = Call< BOOL, HANDLE, BOOL, ::PCONSOLE_FONT_INFOEX >( pFunc, hConsoleOutput, bMaximumWindow, lpConsoleCurrentFontEx );
#	else
		QOR_PP_UNREF( lpConsoleCurrentFontEx );
		QOR_PP_UNREF( bMaximumWindow );
		QOR_PP_UNREF( hConsoleOutput );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, APIName.c_str(), _T( "Windows Vista" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::SetStdHandle( DWORD nStdHandle, HANDLE hHandle )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetStdHandle" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::SetStdHandle( nStdHandle, hHandle );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::WriteConsoleA( HANDLE hConsoleOutput, const VOID* lpBuffer, DWORD nNumberOfCharsToWrite, LPDWORD lpNumberOfCharsWritten, void* lpReserved )
	{
		_WINQ_SFCONTEXT( "CKernel32::WriteConsole" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::WriteConsoleA( hConsoleOutput, lpBuffer, nNumberOfCharsToWrite, lpNumberOfCharsWritten, lpReserved );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::WriteConsoleW( HANDLE hConsoleOutput, const VOID* lpBuffer, DWORD nNumberOfCharsToWrite, LPDWORD lpNumberOfCharsWritten, void* lpReserved )
	{
		_WINQ_SFCONTEXT( "CKernel32::WriteConsole" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::WriteConsoleW( hConsoleOutput, lpBuffer, nNumberOfCharsToWrite, lpNumberOfCharsWritten, lpReserved );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::WriteConsoleInput( HANDLE hConsoleInput, const ::INPUT_RECORD* lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsWritten )
	{
		_WINQ_SFCONTEXT( "CKernel32::WriteConsoleInput" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::WriteConsoleInput( hConsoleInput, lpBuffer, nLength, lpNumberOfEventsWritten );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::WriteConsoleOutput( HANDLE hConsoleOutput, const ::CHAR_INFO* lpBuffer, ::COORD dwBufferSize, ::COORD dwBufferCoord, ::PSMALL_RECT lpWriteRegion )
	{
		_WINQ_SFCONTEXT( "CKernel32::WriteConsoleOutput" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::WriteConsoleOutput( hConsoleOutput, lpBuffer, dwBufferSize, dwBufferCoord, lpWriteRegion );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::WriteConsoleOutputAttribute( HANDLE hConsoleOutput, const WORD* lpAttribute, DWORD nLength, ::COORD dwWriteCoord, LPDWORD lpNumberOfAttrsWritten )
	{
		_WINQ_SFCONTEXT( "CKernel32::WriteConsoleOutputAttribute" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::WriteConsoleOutputAttribute( hConsoleOutput, lpAttribute, nLength, dwWriteCoord, lpNumberOfAttrsWritten );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::WriteConsoleOutputCharacter( HANDLE hConsoleOutput, LPCTSTR lpCharacter, DWORD nLength, ::COORD dwWriteCoord, LPDWORD lpNumberOfCharsWritten )
	{
		_WINQ_SFCONTEXT( "CKernel32::WriteConsoleOutputCharacter" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::WriteConsoleOutputCharacter( hConsoleOutput, lpCharacter, nLength, dwWriteCoord, lpNumberOfCharsWritten );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetConsoleFontInfo( HANDLE h, BOOL b, DWORD dw, PCONSOLE_FONT pConsoleFont )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetConsoleFontInfo" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		__QOR_CODESTRING( APIName, "GetConsoleFontInfo" );
#	if ( _WIN32_WINNT >= 0x0600 && NTDDI_VERSION >= NTDDI_VISTASP2 )
		QOR_PP_UNREF4( pConsoleFont, dw, b, h );
		bResult = FALSE;//::GetConsoleFontInfo( h, b, dw, pConsoleFont );//Seems to require something else, maybe 64bit Compiler, maybe 7.1 SDK
#	else
		QOR_PP_UNREF4( pConsoleFont, dw, b, h );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, APIName.c_str(), _T( "Windows Vista Service Pack 2" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CKernel32::CtrlRoutine( LPVOID lpParameter )
	{
		_WINQ_SFCONTEXT( "CKernel32::CtrlRoutine" );
		DWORD dwResult = 0;
#if ( _WIN32_WINNT >= 0x0600 )
		QOR_PP_UNREF( lpParameter );
		dwResult = 0;//::CtrlRoutine( lpParameter );
#	else
		QOR_PP_UNREF( lpParameter );
#	endif
		return dwResult;
	}

}//nsWinQAPI
