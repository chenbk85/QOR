//kMUI.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQAPI/Kernel32.h"
#include "ReturnCheck.h"

//------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//--------------------------------------------------------------------------------
	BOOL CKernel32::EnumUILanguages( ::UILANGUAGE_ENUMPROC pUILangEnumProc, DWORD dwFlags, LONG_PTR lParam )
	{
		_WINQ_SFCONTEXT( "CKernel32::EnumUILanguages" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		bResult = ::EnumUILanguages( pUILangEnumProc, dwFlags, lParam );
#	else
		QOR_PP_UNREF( lParam );
		QOR_PP_UNREF( dwFlags );
		QOR_PP_UNREF( pUILangEnumProc );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "EnumUILanguages" ), _T( "Windows 2000" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetFileMUInfo( DWORD dwFlags, PCWSTR pcwszFilePath, PFILEMUIINFO pFileMUIInfo, DWORD* pcbFileMUIInfo )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetFileMUInfo" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0600 && NTDDI_VERSION >= NTDDI_VISTASP2 )
		QOR_PP_UNREF( pcbFileMUIInfo );
		QOR_PP_UNREF( pFileMUIInfo );
		QOR_PP_UNREF( pcwszFilePath );
		QOR_PP_UNREF( dwFlags );
		bResult = FALSE;//::GetFileMUInfo( dwFlags, pcwszFilePath, pFileMUIInfo, pcbFileMUIInfo ); //Seems to require something else, maybe 64bit Compiler
#	else
		QOR_PP_UNREF( pcbFileMUIInfo );
		QOR_PP_UNREF( pFileMUIInfo );
		QOR_PP_UNREF( pcwszFilePath );
		QOR_PP_UNREF( dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetFileMUInfo" ), _T( "Windows Vista Service Pack 2" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetFileMUIPath( DWORD dwFlags, PCWSTR pcwszFilePath, PWSTR pwszLanguage, PULONG pcchLanguage, PWSTR pwszFileMUIPath, PULONG pcchFileMUIPath, PULONGLONG pululEnumerator )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetFileMUIPath" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		bResult = ::GetFileMUIPath( dwFlags, pcwszFilePath, pwszLanguage, pcchLanguage, pwszFileMUIPath, pcchFileMUIPath, pululEnumerator );
#	else
		QOR_PP_UNREF( pululEnumerator );
		QOR_PP_UNREF( pcchFileMUIPath );
		QOR_PP_UNREF( pwszFileMUIPath );
		QOR_PP_UNREF( pcchLanguage );
		QOR_PP_UNREF( pwszLanguage );
		QOR_PP_UNREF( pcwszFilePath );
		QOR_PP_UNREF( dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetFileMUIPath" ), _T( "Windows Vista" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	LANGID CKernel32::GetSystemDefaultUILanguage(void)
	{
		_WINQ_SFCONTEXT( "CKernel32::GetSystemDefaultUILanguage" );
		LANGID Result = 0;
#	if( _WIN32_WINDOWS >= 0x0500 || _WIN32_WINNT >= 0x0500 )
		Result = ::GetSystemDefaultUILanguage();
#	else		
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetSystemDefaultUILanguage" ), _T( "Windows 2000" ), 0 ));
#	endif
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetSystemPreferredUILanguages( DWORD dwFlags, PULONG pulNumLanguages, PWSTR pwszLanguagesBuffer, PULONG pcchLanguagesBuffer )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetSystemPreferredUILanguages" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		bResult = ::GetSystemPreferredUILanguages( dwFlags, pulNumLanguages, pwszLanguagesBuffer, pcchLanguagesBuffer );
#	else
		QOR_PP_UNREF( pcchLanguagesBuffer );
		QOR_PP_UNREF( pwszLanguagesBuffer );
		QOR_PP_UNREF( pulNumLanguages );
		QOR_PP_UNREF( dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetSystemPreferredUILanguages" ), _T( "Windows Vista" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetThreadPreferredUILanguages( DWORD dwFlags, PULONG pulNumLanguages, PWSTR pwszLanguagesBuffer, PULONG pcchLanguagesBuffer )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetThreadPreferredUILanguages" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		bResult = ::GetThreadPreferredUILanguages( dwFlags, pulNumLanguages, pwszLanguagesBuffer, pcchLanguagesBuffer );
#	else
		QOR_PP_UNREF( pcchLanguagesBuffer );
		QOR_PP_UNREF( pwszLanguagesBuffer );
		QOR_PP_UNREF( pulNumLanguages );
		QOR_PP_UNREF( dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetThreadPreferredUILanguages" ), _T( "Windows Vista" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	LANGID CKernel32::GetThreadUILanguage(void)
	{
		_WINQ_SFCONTEXT( "CKernel32::GetThreadUILanguage" );
		LANGID Result = 0;
#	if ( _WIN32_WINNT >= 0x0600 )
		Result = ::GetThreadUILanguage();
#	else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetThreadUILanguage" ), _T( "Windows Vista" ), 0 ));		
#	endif
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetUILanguageInfo( DWORD dwFlags, PCWSTR pwmszLanguage, PWSTR pwszFallbackLanguages, PDWORD pcchFallbackLanguages, PDWORD pdwAttributes )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetUILanguageInfo" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		bResult = ::GetUILanguageInfo( dwFlags, pwmszLanguage, pwszFallbackLanguages, pcchFallbackLanguages, pdwAttributes );
#	else
		QOR_PP_UNREF( pdwAttributes );
		QOR_PP_UNREF( pcchFallbackLanguages );
		QOR_PP_UNREF( pwszFallbackLanguages );
		QOR_PP_UNREF( pwmszLanguage );
		QOR_PP_UNREF( dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetUILanguageInfo" ), _T( "Windows Vista" ), 0 ));		
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	LANGID CKernel32::GetUserDefaultUILanguage(void)
	{
		_WINQ_SFCONTEXT( "CKernel32::GetUserDefaultUILanguage" );
		LANGID Result = 0;
#	if ( _WIN32_WINDOWS >= 0x0500 || _WIN32_WINNT >= 0x0500 )
		Result = ::GetUserDefaultUILanguage();
#	else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetUserDefaultUILanguage" ), _T( "Windows 2000" ), 0 ));
#	endif
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetUserPreferredUILanguages ( DWORD dwFlags, PULONG pulNumLanguages, PWSTR pwszLanguagesBuffer, PULONG pcchLanguagesBuffer )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetUserPreferredUILanguages" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		bResult = ::GetUserPreferredUILanguages ( dwFlags, pulNumLanguages, pwszLanguagesBuffer, pcchLanguagesBuffer );
#	else
		QOR_PP_UNREF( pcchLanguagesBuffer );
		QOR_PP_UNREF( pwszLanguagesBuffer );
		QOR_PP_UNREF( pulNumLanguages );
		QOR_PP_UNREF( dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetUserPreferredUILanguages" ), _T( "Windows Vista" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::SetThreadPreferredUILanguages( DWORD dwFlags, PCWSTR pwszLanguagesBuffer, PULONG pulNumLanguages )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetThreadPreferredUILanguages" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		bResult = ::SetThreadPreferredUILanguages( dwFlags, pwszLanguagesBuffer, pulNumLanguages );
#	else
		QOR_PP_UNREF( pulNumLanguages );
		QOR_PP_UNREF( pwszLanguagesBuffer );
		QOR_PP_UNREF( dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "SetThreadPreferredUILanguages" ), _T( "Windows Vista" ), 0 ));
#endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	LANGID CKernel32::SetThreadUILanguage( LANGID LangId )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetThreadUILanguage" );
		LANGID Result = 0;
#	if ( _WIN32_WINNT >= 0x0600 )
		Result = ::SetThreadUILanguage( LangId );
		if( LangId != 0 && Result != LangId )
		{
			__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "SetThreadUILanguage" ), 0 ));
		}
#	else
		QOR_PP_UNREF( LangId );
		Result = ::SetThreadUILanguage( 0 );
#	endif
		return Result;
	}

}//nsWinQAPI

