//kTime.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQAPI/Kernel32.h"
#include "ReturnCheck.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//--------------------------------------------------------------------------------
	LONG CKernel32::CompareFileTime( const ::FILETIME* lpFileTime1, const ::FILETIME* lpFileTime2 )
	{
		_WINQ_SFCONTEXT( "CKernel32::CompareFileTime" );
		LONG lResult = ::CompareFileTime( lpFileTime1, lpFileTime2 );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::DosDateTimeToFileTime( WORD wFatDate, WORD wFatTime, ::LPFILETIME lpFileTime )
	{
		_WINQ_SFCONTEXT( "CKernel32::DosDateTimeToFileTime" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		bResult = ::DosDateTimeToFileTime( wFatDate, wFatTime, lpFileTime );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::FileTimeToDosDateTime( const ::FILETIME* lpFileTime, LPWORD lpFatDate, LPWORD lpFatTime )
	{
		_WINQ_SFCONTEXT( "CKernel32::FileTimeToDosDateTime" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		bResult = ::FileTimeToDosDateTime( lpFileTime, lpFatDate, lpFatTime );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::FileTimeToLocalFileTime( const ::FILETIME* lpFileTime, ::LPFILETIME lpLocalFileTime )
	{
		_WINQ_SFCONTEXT( "CKernel32::FileTimeToLocalFileTime" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		bResult = ::FileTimeToLocalFileTime( lpFileTime, lpLocalFileTime );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::FileTimeToSystemTime( const ::FILETIME* lpFileTime, ::LPSYSTEMTIME lpSystemTime )
	{
		_WINQ_SFCONTEXT( "CKernel32::FileTimeToSystemTime" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		bResult = ::FileTimeToSystemTime( lpFileTime, lpSystemTime );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CKernel32::GetDynamicTimeZoneInformation( ::PDYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetDynamicTimeZoneInformation" );
		CCheckReturn< DWORD, CTCheckFailureValue< DWORD, TIME_ZONE_ID_INVALID > >::TType dwResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		dwResult = ::GetDynamicTimeZoneInformation( pTimeZoneInformation );
#	else
		QOR_PP_UNREF( pTimeZoneInformation );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetDynamicTimeZoneInformation" ), _T( "Windows Vista" ), 0 ));
#	endif
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetFileTime( HANDLE hFile, ::LPFILETIME lpCreationTime, ::LPFILETIME lpLastAccessTime, ::LPFILETIME lpLastWriteTime )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetFileTime" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		bResult = ::GetFileTime( hFile, lpCreationTime, lpLastAccessTime, lpLastWriteTime );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CKernel32::GetLocalTime( ::LPSYSTEMTIME lpSystemTime )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetLocalTime" );
		::GetLocalTime( lpSystemTime );
	}

	//--------------------------------------------------------------------------------
	void CKernel32::GetSystemTime( ::LPSYSTEMTIME lpSystemTime )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetSystemTime" );
		::GetSystemTime( lpSystemTime );
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetSystemTimeAdjustment( PDWORD lpTimeAdjustment, PDWORD lpTimeIncrement, PBOOL lpTimeAdjustmentDisabled )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetSystemTimeAdjustment" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		bResult = ::GetSystemTimeAdjustment( lpTimeAdjustment, lpTimeIncrement, lpTimeAdjustmentDisabled );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CKernel32::GetSystemTimeAsFileTime( CCheckParam< ::LPFILETIME, CTRWPointerCheck< sizeof( ::FILETIME ) > >::TType pSystemTimeAsFileTime )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetSystemTimeAsFileTime" );
		::GetSystemTimeAsFileTime( pSystemTimeAsFileTime );
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetSystemTimes( ::LPFILETIME lpIdleTime, ::LPFILETIME lpKernelTime, ::LPFILETIME lpUserTime )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetSystemTimes" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
#	if( _WIN32_WINNT >= 0x0501 )
		bResult = ::GetSystemTimes( lpIdleTime, lpKernelTime, lpUserTime );
#	else
		QOR_PP_UNREF( lpUserTime );
		QOR_PP_UNREF( lpKernelTime );
		QOR_PP_UNREF( lpIdleTime );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetSystemTimes" ), _T( "Windows XP" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CKernel32::GetTickCount(void)
	{
		_WINQ_SFCONTEXT( "CKernel32::GetTickCount" );
		return ::GetTickCount();
	}

	//--------------------------------------------------------------------------------
	ULONGLONG CKernel32::GetTickCount64(void)
	{
		_WINQ_SFCONTEXT( "CKernel32::GetTickCount64" );
		ULONGLONG ullResult = 0;
#	if ( _WIN32_WINNT >= 0x0600 )
		ullResult = ::GetTickCount64();
#	else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetTickCount64" ), _T( "Windows Vista" ), 0 ));
#	endif
		return ullResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CKernel32::GetTimeZoneInformation( ::LPTIME_ZONE_INFORMATION lpTimeZoneInformation )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetTimeZoneInformation" );
		CCheckReturn< DWORD, CTCheckFailureValue< DWORD, TIME_ZONE_ID_INVALID > >::TType dwResult;
		dwResult = ::GetTimeZoneInformation( lpTimeZoneInformation );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetTimeZoneInformationForYear( USHORT wYear, ::PDYNAMIC_TIME_ZONE_INFORMATION pdtzi, ::LPTIME_ZONE_INFORMATION ptzi )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetTimeZoneInformationForYear" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0600 && NTDDI_VERSION >= NTDDI_VISTASP1 )
		bResult = ::GetTimeZoneInformationForYear( wYear, pdtzi, ptzi );
#	else
		QOR_PP_UNREF( ptzi );
		QOR_PP_UNREF( pdtzi );
		QOR_PP_UNREF( wYear );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetTimeZoneInformationForYear" ), _T( "Windows Vista Serivce Pack 1" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::LocalFileTimeToFileTime( const ::FILETIME* lpLocalFileTime, ::LPFILETIME lpFileTime )
	{
		_WINQ_SFCONTEXT( "CKernel32::LocalFileTimeToFileTime" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		bResult = ::LocalFileTimeToFileTime( lpLocalFileTime, lpFileTime );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::SetDynamicTimeZoneInformation( const ::DYNAMIC_TIME_ZONE_INFORMATION* lpTimeZoneInformation )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetDynamicTimeZoneInformation" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		bResult = ::SetDynamicTimeZoneInformation( lpTimeZoneInformation );
#	else
		QOR_PP_UNREF( lpTimeZoneInformation );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "SetDynamicTimeZoneInformation" ), _T( "Windows Vista" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::SetFileTime( HANDLE hFile, const ::FILETIME* lpCreationTime, const ::FILETIME* lpLastAccessTime, const ::FILETIME* lpLastWriteTime )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetFileTime" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		bResult = ::SetFileTime( hFile, lpCreationTime, lpLastAccessTime, lpLastWriteTime );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::SetLocalTime( const ::SYSTEMTIME* lpSystemTime )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetLocalTime" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		bResult = ::SetLocalTime( lpSystemTime );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::SetSystemTime( const ::SYSTEMTIME* lpSystemTime )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetSystemTime" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		bResult = ::SetSystemTime( lpSystemTime );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::SetSystemTimeAdjustment( DWORD dwTimeAdjustment, BOOL bTimeAdjustmentDisabled )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetSystemTimeAdjustment" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		bResult = ::SetSystemTimeAdjustment( dwTimeAdjustment, bTimeAdjustmentDisabled );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::SetTimeZoneInformation( const ::TIME_ZONE_INFORMATION* lpTimeZoneInformation )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetTimeZoneInformation" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		bResult = ::SetTimeZoneInformation( lpTimeZoneInformation );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::SystemTimeToFileTime( const ::SYSTEMTIME* lpSystemTime, ::LPFILETIME lpFileTime )
	{
		_WINQ_SFCONTEXT( "CKernel32::SystemTimeToFileTime" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		bResult = ::SystemTimeToFileTime( lpSystemTime, lpFileTime );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::SystemTimeToTzSpecificLocalTime( ::LPTIME_ZONE_INFORMATION lpTimeZone, ::LPSYSTEMTIME lpUniversalTime, ::LPSYSTEMTIME lpLocalTime )
	{
		_WINQ_SFCONTEXT( "CKernel32::SystemTimeToTzSpecificLocalTime" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		bResult = ::SystemTimeToTzSpecificLocalTime( lpTimeZone, lpUniversalTime, lpLocalTime );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::TzSpecificLocalTimeToSystemTime( ::LPTIME_ZONE_INFORMATION lpTimeZoneInformation, ::LPSYSTEMTIME lpLocalTime, ::LPSYSTEMTIME lpUniversalTime )
	{
		_WINQ_SFCONTEXT( "CKernel32::TzSpecificLocalTimeToSystemTime" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		bResult = ::TzSpecificLocalTimeToSystemTime( lpTimeZoneInformation, lpLocalTime, lpUniversalTime );
		return bResult;
	}

}//nsWinQAPI


