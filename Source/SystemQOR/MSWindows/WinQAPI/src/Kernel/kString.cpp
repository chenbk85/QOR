//kString.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQAPI/Kernel32.h"
#include "../SystemQOR/MSWindows/WinQAPI/include/ReturnCheck.h"

//------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//--------------------------------------------------------------------------------
	int CKernel32::CompareStringEx( LPCWSTR lpLocaleName, DWORD dwCmpFlags, LPCWSTR lpString1, int cchCount1, LPCWSTR lpString2, int cchCount2, ::LPNLSVERSIONINFO lpVersionInformation, LPVOID lpReserved, LPARAM lParam )
	{
		_WINQ_SFCONTEXT( "CKernel32::CompareStringEx" );
		CCheckReturn< int, CTCheckFailureValue< int, 0 > >::TType iResult;
#	if ( _WIN32_WINNT >= 0x0600 )
        _WINQ_USESAPI( CompareStringEx );
		iResult = Call< int, LPCWSTR, DWORD, LPCWSTR, int, LPCWSTR, int, ::LPNLSVERSIONINFO, LPVOID, LPARAM >( pFunc, lpLocaleName, dwCmpFlags, lpString1, cchCount1, lpString2, cchCount2, lpVersionInformation, lpReserved, lParam );
#	else
		QOR_PP_UNREF9( lParam, lpReserved, lpVersionInformation, cchCount2, lpString2, cchCount1, lpString1, dwCmpFlags, lpLocaleName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CompareStringEx" ), _T( "Windows Vista" ), 0 ));
#endif
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CKernel32::CompareStringA( LCID Locale, DWORD dwCmpFlags, LPCSTR lpString1, int cchCount1, LPCSTR lpString2, int cchCount2 )
	{
		_WINQ_SFCONTEXT( "CKernel32::CompareStringA" );
		CCheckReturn< int, CTCheckFailureValue< int, 0 > >::TType iResult;
		iResult = ::CompareStringA( Locale, dwCmpFlags, lpString1, cchCount1, lpString2, cchCount2 );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CKernel32::CompareStringW( LCID Locale, DWORD dwCmpFlags, LPCWSTR lpString1, int cchCount1, LPCWSTR lpString2, int cchCount2 )
	{
		_WINQ_SFCONTEXT( "CKernel32::CompareStringW" );
		CCheckReturn< int, CTCheckFailureValue< int, 0 > >::TType iResult = 0;
		iResult = ::CompareStringW( Locale, dwCmpFlags, lpString1, cchCount1, lpString2, cchCount2 );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CKernel32::FoldString( DWORD dwMapFlags, LPCTSTR lpSrcStr, int cchSrc, LPTSTR lpDestStr, int cchDest )
	{
		_WINQ_SFCONTEXT( "CKernel32::FoldString" );
		CCheckReturn< int, CTCheckFailureValue< int, 0 > >::TType iResult = 0;
		iResult = ::FoldString( dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetStringTypeA( LCID Locale, DWORD dwInfoType, LPCSTR lpSrcStr, int cchSrc, LPWORD lpCharType )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetStringTypeA" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		bResult = ::GetStringTypeA( Locale, dwInfoType, lpSrcStr, cchSrc, lpCharType );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetStringTypeEx( LCID Locale, DWORD dwInfoType, LPCTSTR lpSrcStr, int cchSrc, LPWORD lpCharType )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetStringTypeEx" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		bResult = ::GetStringTypeEx( Locale, dwInfoType, lpSrcStr, cchSrc, lpCharType );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetStringTypeW( DWORD dwInfoType, LPCWSTR lpSrcStr, int cchSrc, LPWORD lpCharType )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetStringTypeW" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		bResult = ::GetStringTypeW( dwInfoType, lpSrcStr, cchSrc, lpCharType );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::IsDBCSLeadByte( BYTE TestChar )
	{
		_WINQ_SFCONTEXT( "CKernel32::IsDBCSLeadByte" );
		return ::IsDBCSLeadByte( TestChar );
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::IsDBCSLeadByteEx( UINT CodePage, BYTE TestChar )
	{
		_WINQ_SFCONTEXT( "CKernel32::IsDBCSLeadByteEx" );
		return ::IsDBCSLeadByteEx( CodePage, TestChar );
	}

	//------------------------------------------------------------------------------
	int CKernel32::MultiByteToWideChar( UINT CodePage, DWORD dwFlags, LPCSTR lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar )
	{
		_WINQ_SFCONTEXT( "CKernel32::MultiByteToWideChar" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		iResult = ::MultiByteToWideChar( CodePage, dwFlags, lpMultiByteStr, cbMultiByte, lpWideCharStr, cchWideChar );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CKernel32::WideCharToMultiByte( unsigned int uiCodePage, DWORD dwFlags, LPCWSTR lpWideCharStr, int cchWideChar, LPSTR lpMultiByteStr, int cbMultiByte, LPCSTR lpDefaultChar, LPBOOL lpUsedDefaultChar )
	{
		_WINQ_SFCONTEXT( "CKernel32::WideCharToMultiByte" );
		/*CCheckReturn< int, CCheckNonZero< int > >::TType*/ int iResult;//TODO:
		iResult = ::WideCharToMultiByte( uiCodePage, dwFlags, lpWideCharStr, cchWideChar, lpMultiByteStr, cbMultiByte, lpDefaultChar, lpUsedDefaultChar );
		return iResult;
	}

}//nsWinQAPI

