//kDirectoryManagement.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQAPI/Kernel32.h"
#include "../SystemQOR/MSWindows/WinQAPI/include/ReturnCheck.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{

	//--------------------------------------------------------------------------------
	BOOL CKernel32::CreateDirectory( LPCTSTR lpPathName, ::LPSECURITY_ATTRIBUTES lpSecurityAttributes )
	{
		_WINQ_SFCONTEXT( "CKernel32::CreateDirectory" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::CreateDirectory( lpPathName, lpSecurityAttributes );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::CreateDirectoryEx( LPCTSTR lpTemplateDirectory, LPCTSTR lpNewDirectory, ::LPSECURITY_ATTRIBUTES lpSecurityAttributes )
	{
		_WINQ_SFCONTEXT( "CKernel32::CreateDirectoryEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::CreateDirectoryEx( lpTemplateDirectory, lpNewDirectory, lpSecurityAttributes );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::CreateDirectoryTransacted( LPCTSTR lpTemplateDirectory, LPCTSTR lpNewDirectory, ::LPSECURITY_ATTRIBUTES lpSecurityAttributes, HANDLE hTransaction )
	{
		_WINQ_SFCONTEXT( "CKernel32::CreateDirectoryTransacted" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0600 )
        _WINQ_USESAPI( CreateDirectoryTransacted );
		bResult = Call< BOOL, LPCTSTR, LPCTSTR, ::LPSECURITY_ATTRIBUTES, HANDLE >( pFunc, lpTemplateDirectory, lpNewDirectory, lpSecurityAttributes, hTransaction );
#	else
		QOR_PP_UNREF( hTransaction );
		QOR_PP_UNREF( lpSecurityAttributes );
		QOR_PP_UNREF( lpNewDirectory );
		QOR_PP_UNREF( lpTemplateDirectory );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CreateDirectoryTransacted" ), _T( "Windows Vista" ), 0 ));
#endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::FindCloseChangeNotification( HANDLE hChangeHandle )
	{
		_WINQ_SFCONTEXT( "CKernel32::FindCloseChangeNotification" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::FindCloseChangeNotification( hChangeHandle );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	HANDLE CKernel32::FindFirstChangeNotification( LPCTSTR lpPathName, BOOL bWatchSubtree, DWORD dwNotifyFilter )
	{
		_WINQ_SFCONTEXT( "CKernel32::FindFirstChangeNotification" );
		CCheckReturn< HANDLE, CHandleCheck< > >::TType h = ::FindFirstChangeNotification( lpPathName, bWatchSubtree, dwNotifyFilter );
		return h;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::FindNextChangeNotification( HANDLE hChangeHandle )
	{
		_WINQ_SFCONTEXT( "CKernel32::FindNextChangeNotification" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::FindNextChangeNotification( hChangeHandle );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CKernel32::GetCurrentDirectory( DWORD nBufferLength, LPTSTR lpBuffer )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetCurrentDirectory" );
		CCheckReturn< DWORD, CCheckNonZero< DWORD > >::TType dwResult = ::GetCurrentDirectory( nBufferLength, lpBuffer );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::ReadDirectoryChangesW( HANDLE hDirectory, void* lpBuffer, DWORD nBufferLength, BOOL bWatchSubtree, DWORD dwNotifyFilter, LPDWORD lpBytesReturned, ::LPOVERLAPPED lpOverlapped, ::LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine )
	{
		_WINQ_SFCONTEXT( "CKernel32::ReadDirectoryChangesW" );
		BOOL bResult = FALSE;
		__QOR_CODESTRING( APIName, "ReadDirectoryChangesW" );
#	if( _WIN32_WINNT >= 0x0400 )
		bResult = ::ReadDirectoryChangesW( hDirectory, lpBuffer, nBufferLength, bWatchSubtree, dwNotifyFilter, lpBytesReturned, lpOverlapped, lpCompletionRoutine );
		if( bResult == FALSE )
		{
			DWORD dwError = CKernel32::GetLastError();
			if( dwError == ERROR_INVALID_FUNCTION )
			{
				__WINQAPI_CONT_ERROR(( DIRECTORY_API_ERROR, APIName.c_str(), _T( "The network redirector or the target file system does not support this operation." ), 0 ));
			}
			else
			{
				__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, APIName.c_str(), 0 ));
			}
		}
#	else
		QOR_PP_UNREF( lpCompletionRoutine );
		QOR_PP_UNREF( lpOverlapped );
		QOR_PP_UNREF( lpBytesReturned );
		QOR_PP_UNREF( dwNotifyFilter );
		QOR_PP_UNREF( bWatchSubtree );
		QOR_PP_UNREF( nBufferLength );
		QOR_PP_UNREF( lpBuffer );
		QOR_PP_UNREF( hDirectory );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, APIName.c_str(), _T( "Windows NT 4.0" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::RemoveDirectory( LPCTSTR lpPathName )
	{
		_WINQ_SFCONTEXT( "CKernel32::RemoveDirectory" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::RemoveDirectory( lpPathName );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::RemoveDirectoryTransacted( LPCTSTR lpPathName, HANDLE hTransaction )
	{
		_WINQ_SFCONTEXT( "CKernel32::RemoveDirectoryTransacted" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0600 )
        _WINQ_USESAPI( RemoveDirectoryTransacted );
		bResult = Call< BOOL, LPCTSTR, HANDLE >( pFunc, lpPathName, hTransaction );
#	else
		QOR_PP_UNREF( hTransaction );
		QOR_PP_UNREF( lpPathName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RemoveDirectoryTransacted" ), _T( "Windows Vista" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::SetCurrentDirectory( LPCTSTR lpPathName )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetCurrentDirectory" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::SetCurrentDirectory( lpPathName );
		return bResult;
	}

}//nsWinQAPI

