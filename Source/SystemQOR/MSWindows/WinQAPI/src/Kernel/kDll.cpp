//kDll.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQAPI/Kernel32.h"
#include "../Source/SystemQOR/MSWindows/WinQAPI/include/ReturnCheck.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//------------------------------------------------------------------------------
	BOOL CKernel32::DisableThreadLibraryCalls( HMODULE hModule )
	{
		_WINQ_SFCONTEXT( "CKernel32::DisableThreadLibraryCalls" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::DisableThreadLibraryCalls( hModule );
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CKernel32::FreeLibrary( HMODULE hModule )
	{
		_WINQ_SFCONTEXT( "CKernel32::FreeLibrary" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::FreeLibrary( hModule );
		return bResult;
	}

	//------------------------------------------------------------------------------
	VOID CKernel32::FreeLibraryAndExitThread( HMODULE hModule, DWORD dwExitCode )
	{
		_WINQ_SFCONTEXT( "CKernel32::FreeLibraryAndExitThread" );
		::FreeLibraryAndExitThread( hModule, dwExitCode );
	}

	//------------------------------------------------------------------------------
	DWORD CKernel32::GetModuleFileName( HMODULE hModule, LPTSTR lpFilename, DWORD nSize )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetModuleFileName" );
		DWORD dwResult = ::GetModuleFileName( hModule, lpFilename, nSize );
		if( dwResult == 0 )
		{
			__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "GetModuleFileName" ), 0 ));
		}
		else if( dwResult == nSize )
		{
			__WINQAPI_WARNING(( BUFFER_INADEQUATE, _T( "GetModuleFileName" ), nSize, 0 ));
		}
		return dwResult;
	}

	//------------------------------------------------------------------------------
	HMODULE CKernel32::GetModuleHandle( LPCTSTR lpModuleName )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetModuleHandle" );
		CCheckReturn< HMODULE, CCheckNonZero< HMODULE > >::TType h = ::GetModuleHandle( lpModuleName );
		return h;
	}

	//------------------------------------------------------------------------------
	FARPROC CKernel32::GetProcAddress( HMODULE hModule, LPCSTR lpProcName )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetProcAddress" );
		CCheckReturn< FARPROC, CCheckNonZero< FARPROC > >::TType pResult = ::GetProcAddress( hModule, lpProcName );
		return pResult;
	}

	//------------------------------------------------------------------------------
	HMODULE CKernel32::LoadLibrary( LPCTSTR lpFileName )
	{
		_WINQ_SFCONTEXT( "CKernel32::LoadLibrary" );
		CCheckReturn< HMODULE, CCheckNonZero< HMODULE > >::TType h = ::LoadLibrary( lpFileName );
		return h;
	}

	//------------------------------------------------------------------------------
	HMODULE CKernel32::LoadLibraryEx( LPCTSTR lpFileName, HANDLE hFile, DWORD dwFlags )
	{
		_WINQ_SFCONTEXT( "CKernel32::LoadLibraryEx" );
		CCheckReturn< HMODULE, CCheckNonZero< HMODULE > >::TType h = ::LoadLibraryEx( lpFileName, hFile, dwFlags );
		return h;
	}

	//------------------------------------------------------------------------------
	BOOL CKernel32::GetModuleHandleEx( DWORD dwFlags, LPCTSTR lpModuleName, HMODULE* phModule )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetModuleHandleEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0501 )
		bResult = ::GetModuleHandleEx( dwFlags, lpModuleName, phModule );
#	else
	QOR_PP_UNREF3( dwFlags, lpModuleName, phModule );
	__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetModuleHandleEx" ), _T( "Windows XP" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	DWORD CKernel32::GetDllDirectory( DWORD nBufferLength, LPTSTR lpBuffer )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetDllDirectory" );
		CCheckReturn< DWORD, CCheckNonZero< DWORD > >::TType dwResult;
#	if ( _WIN32_WINNT >= 0x0502 )
		dwResult = ::GetDllDirectory( nBufferLength, lpBuffer );
#	else
		QOR_PP_UNREF2( nBufferLength, lpBuffer );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetDllDirectory" ), _T( "Windows Server 2003" ), 0 ));
#	endif
		return dwResult;
	}

	//------------------------------------------------------------------------------
	BOOL CKernel32::SetDllDirectory( LPCTSTR lpPathName )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetDllDirectory" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0502 )
		bResult = ::SetDllDirectory( lpPathName );
#	else
		QOR_PP_UNREF( lpPathName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "SetDllDirectory" ), _T( "Windows Server 2003" ), 0 ));
#	endif
		return bResult;
	}

}//nsWinQAPI


