//kNLS.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQAPI/Kernel32.h"
#include "ReturnCheck.h"

//------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//--------------------------------------------------------------------------------
	BOOL CKernel32::AdjustCalendarDate( LPCALDATETIME lpCalDateTime, /*CALDATETIME_DATEUNIT*/int calUnit, INT amount )
	{
		_WINQ_SFCONTEXT( "CKernel32::AdjustCalendarDate" );
		BOOL bResult = FALSE;
#	if ( _WIN32_WINNT == 0x0600 )
	//This function does not have an associated header or library file. Call LoadLibrary with the DLL name (Kernel32.dll) to obtain a module handle. Then call GetProcAddress with that module handle and this function name to get the address of this function.
	return FALSE;//::AdjustCalendarDate( lpCalDateTime, calUnit, amount );
#	else
		QOR_PP_UNREF( amount );
		QOR_PP_UNREF( calUnit );
		QOR_PP_UNREF( lpCalDateTime );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "AdjustCalendarDate" ), _T( "Windows Vista" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CKernel32::CompareStringOrdinal ( LPCWSTR lpString1, int cchCount1, LPCWSTR lpString2, int cchCount2, BOOL bIgnoreCase )
	{
		_WINQ_SFCONTEXT( "CKernel32::CompareStringOrdinal" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		iResult = ::CompareStringOrdinal ( lpString1, cchCount1, lpString2, cchCount2, bIgnoreCase );
#	else
		QOR_PP_UNREF( bIgnoreCase );
		QOR_PP_UNREF( cchCount2 );
		QOR_PP_UNREF( lpString2 );
		QOR_PP_UNREF( cchCount1 );
		QOR_PP_UNREF( lpString1 );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "CompareStringOrdinal" ), _T( "Windows Vista" ), 0 ));
#	endif
		return iResult;
	}

	//--------------------------------------------------------------------------------
	LCID CKernel32::ConvertDefaultLocale( LCID Locale )// default locale 
	{
		_WINQ_SFCONTEXT( "CKernel32::ConvertDefaultLocale" );
		LCID Result = 0;
		Result = ::ConvertDefaultLocale( Locale );
		if( Result == Locale )
		{
			__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "ConvertDefaultLocale" ), 0 ));
		}
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::ConvertCalDateTimeToSystemTime( const LPCALDATETIME lpCalDateTime, ::SYSTEMTIME* lpSysTime )
	{
		_WINQ_SFCONTEXT( "CKernel32::ConvertCalDateTimeToSystemTime" );
		BOOL bResult = FALSE;
#	if ( _WIN32_WINNT >= 0x0600 )
		QOR_PP_UNREF( lpSysTime );
		QOR_PP_UNREF( lpCalDateTime );
		//This function does not have an associated header or library file. Call LoadLibrary with the DLL name (Kernel32.dll) to obtain a module handle. Then call GetProcAddress with that module handle and this function name to get the address of this function.
		//return FALSE;//::ConvertCalDateTimeToSystemTime( lpCalDateTime, lpSysTime );
#	else
		QOR_PP_UNREF( lpSysTime );
		QOR_PP_UNREF( lpCalDateTime );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "ConvertCalDateTimeToSystemTime" ), _T( "Windows Vista" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::ConvertSystemTimeToCalDateTime( const ::SYSTEMTIME* lpSysTime, ::CALID calId, LPCALDATETIME lpCalDateTime )
	{
		_WINQ_SFCONTEXT( "CKernel32::ConvertSystemTimeToCalDateTime" );
		BOOL bResult = FALSE;
#	if ( _WIN32_WINNT == 0x0600 )
		//This function does not have an associated header or library file. Call LoadLibrary with the DLL name (Kernel32.dll) to obtain a module handle. Then call GetProcAddress with that module handle and this function name to get the address of this function.
		return FALSE;//::ConvertSystemTimeToCalDateTime( lpSysTime, calId, lpCalDateTime );
#	else
		QOR_PP_UNREF( lpCalDateTime );
		QOR_PP_UNREF( calId );
		QOR_PP_UNREF( lpSysTime );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "ConvertSystemTimeToCalDateTime" ), _T( "Windows Vista" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::EnumCalendarInfo( ::CALINFO_ENUMPROC pCalInfoEnumProc, LCID Locale, CALID Calendar, CALTYPE CalType )
	{
		_WINQ_SFCONTEXT( "CKernel32::EnumCalendarInfo" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		bResult = ::EnumCalendarInfo( pCalInfoEnumProc, Locale, Calendar, CalType );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::EnumCalendarInfoEx( ::CALINFO_ENUMPROCEX pCalInfoEnumProcEx, LCID Locale, CALID Calendar, CALTYPE CalType )
	{
		_WINQ_SFCONTEXT( "CKernel32::EnumCalendarInfoEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINDOWS >= 0x0500 || _WIN32_WINNT >= 0x0500 )
		bResult = ::EnumCalendarInfoEx( pCalInfoEnumProcEx, Locale, Calendar, CalType );
#	else
		QOR_PP_UNREF( CalType );
		QOR_PP_UNREF( Calendar );
		QOR_PP_UNREF( Locale );
		QOR_PP_UNREF( pCalInfoEnumProcEx );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "EnumCalendarInfoEx" ), _T( "Windows 2000" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::EnumCalendarInfoExEx( CALINFO_ENUMPROCEXEX pCalInfoEnumProcExEx, LPCWSTR lpLocaleName, CALID Calendar, LPCWSTR lpReserved, CALTYPE CalType, LPARAM lParam )
	{
		_WINQ_SFCONTEXT( "CKernel32::EnumCalendarInfoExEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		bResult = ::EnumCalendarInfoExEx( pCalInfoEnumProcExEx, lpLocaleName, Calendar, lpReserved, CalType, lParam );
#	else
		QOR_PP_UNREF( lParam );
		QOR_PP_UNREF( CalType );
		QOR_PP_UNREF( lpReserved );
		QOR_PP_UNREF( Calendar );
		QOR_PP_UNREF( lpLocaleName );
		QOR_PP_UNREF( pCalInfoEnumProcExEx );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "EnumCalendarInfoExEx" ), _T( "Windows Vista" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::EnumDateFormats( ::DATEFMT_ENUMPROC lpDateFmtEnumProc, LCID Locale, DWORD dwFlags )
	{
		_WINQ_SFCONTEXT( "CKernel32::EnumDateFormats" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		bResult = ::EnumDateFormats( lpDateFmtEnumProc, Locale, dwFlags );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::EnumDateFormatsEx ( ::DATEFMT_ENUMPROCEX lpDateFmtEnumProcEx, LCID Locale, DWORD dwFlags )
	{
		_WINQ_SFCONTEXT( "CKernel32::EnumDateFormatsEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINDOWS >= 0x0500 || _WIN32_WINNT >= 0x0500 )
		bResult = ::EnumDateFormatsEx ( lpDateFmtEnumProcEx, Locale, dwFlags );
#	else
		QOR_PP_UNREF( dwFlags );
		QOR_PP_UNREF( Locale );
		QOR_PP_UNREF( lpDateFmtEnumProcEx );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "EnumDateFormatsEx" ), _T( "Windows 2000" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::EnumDateFormatsExEx ( DATEFMT_ENUMPROCEXEX lpDateFmtEnumProcExEx, LPCWSTR lpLocaleName, DWORD dwFlags, LPARAM lParam )
	{
		_WINQ_SFCONTEXT( "CKernel32::EnumDateFormatsExEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		bResult = ::EnumDateFormatsExEx ( lpDateFmtEnumProcExEx, lpLocaleName, dwFlags, lParam );
#	else
		QOR_PP_UNREF( lParam );
		QOR_PP_UNREF( dwFlags );
		QOR_PP_UNREF( lpLocaleName );
		QOR_PP_UNREF( lpDateFmtEnumProcExEx );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "EnumDateFormatsExEx" ), _T( "Windows Vista" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::EnumLanguageGroupLocales ( ::LANGGROUPLOCALE_ENUMPROC pLangGroupLocaleEnumProc, LGRPID LanguageGroup, DWORD dwFlags, LONG_PTR lParam )
	{
		_WINQ_SFCONTEXT( "CKernel32::EnumLanguageGroupLocales" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		bResult = ::EnumLanguageGroupLocales ( pLangGroupLocaleEnumProc, LanguageGroup, dwFlags, lParam );
#	else
		QOR_PP_UNREF( lParam );
		QOR_PP_UNREF( dwFlags );
		QOR_PP_UNREF( LanguageGroup );
		QOR_PP_UNREF( pLangGroupLocaleEnumProc );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "EnumLanguageGroupLocales" ), _T( "Windows 2000" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::EnumSystemCodePages( ::CODEPAGE_ENUMPROC lpCodePageEnumProc, DWORD dwFlags )
	{
		_WINQ_SFCONTEXT( "CKernel32::EnumSystemCodePages" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		bResult = ::EnumSystemCodePages( lpCodePageEnumProc, dwFlags );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::EnumSystemGeoID( GEOCLASS GeoClass, GEOID ParentGeoId, ::GEO_ENUMPROC lpGeoEnumProc )
	{
		_WINQ_SFCONTEXT( "CKernel32::EnumSystemGeoID" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		bResult = ::EnumSystemGeoID( GeoClass, ParentGeoId, lpGeoEnumProc );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::EnumSystemLanguageGroups( ::LANGUAGEGROUP_ENUMPROC pLangGroupEnumProc, DWORD dwFlags, LONG_PTR lParam )
	{
		_WINQ_SFCONTEXT( "CKernel32::EnumSystemLanguageGroups" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		bResult = ::EnumSystemLanguageGroups( pLangGroupEnumProc, dwFlags, lParam );
#	else
		QOR_PP_UNREF( lParam );
		QOR_PP_UNREF( dwFlags );
		QOR_PP_UNREF( pLangGroupEnumProc );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "EnumSystemLanguageGroups" ), _T( "Windows 2000" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::EnumSystemLocalesA( ::LOCALE_ENUMPROCA lpLocaleEnumProc, DWORD dwFlags )
	{
		_WINQ_SFCONTEXT( "CKernel32::EnumSystemLocalesA" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		bResult = ::EnumSystemLocalesA( lpLocaleEnumProc, dwFlags );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::EnumSystemLocalesW( ::LOCALE_ENUMPROCW lpLocaleEnumProc, DWORD dwFlags )
	{
		_WINQ_SFCONTEXT( "CKernel32::EnumSystemLocalesW" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		bResult = ::EnumSystemLocalesW( lpLocaleEnumProc, dwFlags );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::EnumSystemLocalesEx( LOCALE_ENUMPROCEX lpLocaleEnumProcEx, DWORD dwFlags, LPARAM lParam, LPVOID lpReserved )
	{
		_WINQ_SFCONTEXT( "CKernel32::EnumSystemLocalesEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		bResult = ::EnumSystemLocalesEx( lpLocaleEnumProcEx, dwFlags, lParam, lpReserved );
#	else
		QOR_PP_UNREF( lpReserved );
		QOR_PP_UNREF( lParam );
		QOR_PP_UNREF( dwFlags );
		QOR_PP_UNREF( lpLocaleEnumProcEx );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "EnumSystemLocalesEx" ), _T( "Windows Vista" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::EnumTimeFormats( ::TIMEFMT_ENUMPROC lpTimeFmtEnumProc, LCID Locale, DWORD dwFlags )
	{
		_WINQ_SFCONTEXT( "CKernel32::EnumTimeFormats" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		bResult = ::EnumTimeFormats( lpTimeFmtEnumProc, Locale, dwFlags );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::EnumTimeFormatsEx( TIMEFMT_ENUMPROCEX lpTimeFmtEnumProcEx, LPCWSTR lpLocaleName, DWORD dwFlags, LPARAM lParam )
	{
		_WINQ_SFCONTEXT( "CKernel32::EnumTimeFormatsEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		bResult = ::EnumTimeFormatsEx( lpTimeFmtEnumProcEx, lpLocaleName, dwFlags, lParam );
#	else
		QOR_PP_UNREF( lParam );
		QOR_PP_UNREF( dwFlags );
		QOR_PP_UNREF( lpLocaleName );
		QOR_PP_UNREF( lpTimeFmtEnumProcEx );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "EnumTimeFormatsEx" ), _T( "Windows Vista" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CKernel32::FindNLSString ( LCID Locale, DWORD dwFindNLSStringFlags, LPCWSTR lpStringSource, int cchSource, LPCWSTR lpStringValue, int cchValue, LPINT pcchFound )
	{
		_WINQ_SFCONTEXT( "CKernel32::FindNLSString" );
		int iResult = 0;
#	if ( _WIN32_WINNT >= 0x0600 )
		iResult = ::FindNLSString ( Locale, dwFindNLSStringFlags, lpStringSource, cchSource, lpStringValue, cchValue, pcchFound );
		if( iResult == - 1)
		{
			DWORD dwError = CKernel32::GetLastError();
			if( dwError != ERROR_SUCCESS )
			{
				__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "FindNLSString" ), 0 ));
			}
		}
#	else
		QOR_PP_UNREF( pcchFound );
		QOR_PP_UNREF( cchValue );
		QOR_PP_UNREF( lpStringValue );
		QOR_PP_UNREF( cchSource );
		QOR_PP_UNREF( lpStringSource );
		QOR_PP_UNREF( dwFindNLSStringFlags );
		QOR_PP_UNREF( Locale );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "FindNLSString" ), _T( "Windows Vista" ), 0 ));
#	endif
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CKernel32::FindNLSStringEx ( LPCWSTR lpLocaleName, DWORD dwFindNLSStringFlags, LPCWSTR lpStringSource, int cchSource, LPCWSTR lpStringValue, int cchValue, LPINT pcchFound, ::LPNLSVERSIONINFO lpVersionInformation, LPVOID lpReserved, LPARAM lParam )
	{
		_WINQ_SFCONTEXT( "CKernel32::FindNLSStringEx" );
		int iResult = 0;
#	if ( _WIN32_WINNT >= 0x0600 )
		iResult = ::FindNLSStringEx ( lpLocaleName, dwFindNLSStringFlags, lpStringSource, cchSource, lpStringValue, cchValue, pcchFound, lpVersionInformation, lpReserved, lParam );
		if( iResult == - 1)
		{
			DWORD dwError = CKernel32::GetLastError();
			if( dwError != ERROR_SUCCESS )
			{
				__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "FindNLSStringEx" ), 0 ));
			}
		}
#	else
		QOR_PP_UNREF( lParam );
		QOR_PP_UNREF( lpReserved );
		QOR_PP_UNREF( lpVersionInformation );
		QOR_PP_UNREF( pcchFound );
		QOR_PP_UNREF( cchValue );
		QOR_PP_UNREF( lpStringValue );
		QOR_PP_UNREF( cchSource );
		QOR_PP_UNREF( lpStringSource );
		QOR_PP_UNREF( dwFindNLSStringFlags );
		QOR_PP_UNREF( lpLocaleName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "FindNLSStringEx" ), _T( "Windows Vista" ), 0 ));
#	endif
		return iResult;
	}

	//--------------------------------------------------------------------------------
	UINT CKernel32::GetACP( VOID )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetACP" );
		return ::GetACP();
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetCalendarDateFormatEx( LPCWSTR lpszLocale, DWORD dwFlags, const LPCALDATETIME lpCalDateTime, LPCWSTR lpFormat, LPWSTR lpDateStr, int cchDate )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetCalendarDateFormatEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		//This function does not have an associated header or library file. Call LoadLibrary with the DLL name (Kernel32.dll) to obtain a module handle. Then call GetProcAddress with that module handle and this function name to get the address of this function.
#	if ( _WIN32_WINNT == 0x0600 )	
		return FALSE;//::GetCalendarDateFormatEx( lpszLocale, dwFlags, lpCalDateTime, lpFormat, lpDateStr, cchDate );
#	else
		QOR_PP_UNREF( cchDate );
		QOR_PP_UNREF( lpDateStr );
		QOR_PP_UNREF( lpFormat );
		QOR_PP_UNREF( lpCalDateTime );
		QOR_PP_UNREF( dwFlags );
		QOR_PP_UNREF( lpszLocale );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetCalendarDateFormatEx" ), _T( "Windows Vista" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CKernel32::GetCalendarInfo( LCID Locale, CALID Calendar, CALTYPE CalType, LPTSTR lpCalData, int cchData, LPDWORD lpValue )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetCalendarInfo" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
#	if ( _WIN32_WINDOWS >= 0x0401 || _WIN32_WINNT >= 0x0500 )
		iResult = ::GetCalendarInfo( Locale, Calendar, CalType, lpCalData, cchData, lpValue );
#	else
		QOR_PP_UNREF( lpValue );
		QOR_PP_UNREF( cchData );
		QOR_PP_UNREF( lpCalData );
		QOR_PP_UNREF( CalType );
		QOR_PP_UNREF( Calendar );
		QOR_PP_UNREF( Locale );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetCalendarInfo" ), _T( "Windows 98 or Windows 2000" ), 0 ));
#	endif
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CKernel32::GetCalendarInfoEx( LPCWSTR lpLocaleName, CALID Calendar, LPCWSTR lpReserved, CALTYPE CalType, LPWSTR lpCalData, int cchData, LPDWORD lpValue )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetCalendarInfoEx" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		iResult = ::GetCalendarInfoEx( lpLocaleName, Calendar, lpReserved, CalType, lpCalData, cchData, lpValue );
#	else
		QOR_PP_UNREF( lpValue );
		QOR_PP_UNREF( cchData );
		QOR_PP_UNREF( lpCalData );
		QOR_PP_UNREF( CalType );
		QOR_PP_UNREF( lpReserved );
		QOR_PP_UNREF( Calendar );
		QOR_PP_UNREF( lpLocaleName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetCalendarInfoEx" ), _T( "Windows Vista" ), 0 ));
#	endif
		return iResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetCalendarSupportedDateRange( CALID Calendar, LPCALDATETIME lpCalMinDateTime, LPCALDATETIME lpCalMaxDateTime )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetCalendarSupportedDateRange" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT == 0x0600 )
		//This function does not have an associated header or library file. Call LoadLibrary with the DLL name (Kernel32.dll) to obtain a module handle. Then call GetProcAddress with that module handle and this function name to get the address of this function.
		return FALSE;//::GetCalendarSupportedDateRange( Calendar, lpCalMinDateTime, lpCalMaxDateTime );
#	else
		QOR_PP_UNREF( lpCalMaxDateTime );
		QOR_PP_UNREF( lpCalMinDateTime );
		QOR_PP_UNREF( Calendar );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetCalendarSupportedDateRange" ), _T( "Windows Vista" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CKernel32::GetCPInfo( UINT CodePage, ::LPCPINFO lpCPInfo )
	{	
		_WINQ_SFCONTEXT( "CKernel32::GetCPInfo" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		bResult = ::GetCPInfo( CodePage, lpCPInfo );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetCPInfoEx ( UINT CodePage, DWORD dwFlags, ::LPCPINFOEX lpCPInfoEx )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetCPInfoEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		bResult = ::GetCPInfoEx ( CodePage, dwFlags, lpCPInfoEx );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CKernel32::GetCurrencyFormat( LCID Locale, DWORD dwFlags, LPCTSTR lpValue, CONST ::CURRENCYFMT* lpFormat, LPTSTR lpCurrencyStr, int cchCurrency )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetCurrencyFormat" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		iResult = ::GetCurrencyFormat( Locale, dwFlags, lpValue, lpFormat, lpCurrencyStr, cchCurrency );
		return iResult;
	}

	//Docs say Win95 supports this but headers say no
	//--------------------------------------------------------------------------------
	int CKernel32::GetCurrencyFormatEx ( LPCWSTR lpLocaleName, DWORD dwFlags, LPCWSTR lpValue, CONST ::CURRENCYFMTW* lpFormat, LPWSTR lpCurrencyStr, int cchCurrency )
	{	
		_WINQ_SFCONTEXT( "CKernel32::GetCurrencyFormatEx" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		iResult = ::GetCurrencyFormatEx ( lpLocaleName, dwFlags, lpValue, lpFormat, lpCurrencyStr, cchCurrency );
#	else
		QOR_PP_UNREF( cchCurrency );
		QOR_PP_UNREF( lpCurrencyStr );
		QOR_PP_UNREF( lpFormat );
		QOR_PP_UNREF( lpValue );
		QOR_PP_UNREF( dwFlags );
		QOR_PP_UNREF( lpLocaleName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetCurrencyFormatEx" ), _T( "Windows Vista" ), 0 ));
#	endif
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CKernel32::GetDateFormat( LCID Locale, DWORD dwFlags, CONST ::SYSTEMTIME* lpDate, LPCTSTR lpFormat, LPTSTR lpDateStr, int cchDate )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetDateFormat" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		iResult = ::GetDateFormat( Locale, dwFlags, lpDate, lpFormat, lpDateStr, cchDate );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CKernel32::GetDateFormatEx( LPCWSTR lpLocaleName, DWORD dwFlags, CONST ::SYSTEMTIME* lpDate, LPCWSTR lpFormat, LPWSTR lpDateStr, int cchDate, LPCWSTR lpCalendar )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetDateFormatEx" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		iResult = ::GetDateFormatEx( lpLocaleName, dwFlags, lpDate, lpFormat, lpDateStr, cchDate, lpCalendar );
#	else
		QOR_PP_UNREF( lpCalendar );
		QOR_PP_UNREF( cchDate );
		QOR_PP_UNREF( lpDateStr );
		QOR_PP_UNREF( lpFormat );
		QOR_PP_UNREF( lpDate );
		QOR_PP_UNREF( dwFlags );
		QOR_PP_UNREF( lpLocaleName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetDateFormatEx" ), _T( "Windows Vista" ), 0 ));
#	endif
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CKernel32::GetDurationFormat( LCID Locale, DWORD dwFlags, CONST ::SYSTEMTIME* lpDuration, ULONGLONG ullDuration, LPCWSTR lpFormat, LPWSTR lpDurationStr, int cchDuration )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetDurationFormat" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		iResult = ::GetDurationFormat( Locale, dwFlags, lpDuration, ullDuration, lpFormat, lpDurationStr, cchDuration );
#	else
		QOR_PP_UNREF( cchDuration );
		QOR_PP_UNREF( lpDurationStr );
		QOR_PP_UNREF( lpFormat );
		QOR_PP_UNREF( ullDuration );
		QOR_PP_UNREF( lpDuration );
		QOR_PP_UNREF( dwFlags );
		QOR_PP_UNREF( Locale );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetDurationFormat" ), _T( "Windows Vista" ), 0 ));
#	endif
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CKernel32::GetDurationFormatEx( LPCWSTR lpLocaleName, DWORD dwFlags, CONST ::SYSTEMTIME* lpDuration, ULONGLONG ullDuration, LPCWSTR lpFormat, LPWSTR lpDurationStr, int cchDuration )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetDurationFormatEx" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		iResult = ::GetDurationFormatEx( lpLocaleName, dwFlags, lpDuration, ullDuration, lpFormat, lpDurationStr, cchDuration );
#	else
		QOR_PP_UNREF( cchDuration );
		QOR_PP_UNREF( lpDurationStr );
		QOR_PP_UNREF( lpFormat );
		QOR_PP_UNREF( ullDuration );
		QOR_PP_UNREF( lpDuration );
		QOR_PP_UNREF( dwFlags );
		QOR_PP_UNREF( lpLocaleName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetDurationFormatEx" ), _T( "Windows Vista" ), 0 ));
#	endif
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CKernel32::GetGeoInfo( GEOID GeoId, GEOTYPE GeoType, LPTSTR lpGeoData, int cchData, LANGID language )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetGeoInfo" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		iResult = ::GetGeoInfo( GeoId, GeoType, lpGeoData, cchData, language );
		return iResult;
	}

	//------------------------------------------------------------------------------
	int CKernel32::GetLocaleInfoA( LCID Locale, LCTYPE LCType, LPSTR lpLCData, int cchData )
	{	
		_WINQ_SFCONTEXT( "CKernel32::GetLocaleInfoA" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		iResult = ::GetLocaleInfoA( Locale, LCType, lpLCData, cchData );
		return iResult;
	}

	//------------------------------------------------------------------------------
	int CKernel32::GetLocaleInfoW( LCID Locale, LCTYPE LCType, LPWSTR lpLCData, int cchData )
	{	
		_WINQ_SFCONTEXT( "CKernel32::GetLocaleInfoW" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		iResult = ::GetLocaleInfoW( Locale, LCType, lpLCData, cchData );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CKernel32::GetLocaleInfoEx ( LPCWSTR lpLocaleName, LCTYPE LCType, LPWSTR lpLCData, int cchData )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetLocaleInfoEx" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		iResult = ::GetLocaleInfoEx ( lpLocaleName, LCType, lpLCData, cchData );
#	else
		QOR_PP_UNREF( cchData );
		QOR_PP_UNREF( lpLCData );
		QOR_PP_UNREF( LCType );
		QOR_PP_UNREF( lpLocaleName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetLocaleInfoEx" ), _T( "Windows Vista" ), 0 ));
#	endif
		return iResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetNLSVersion( NLS_FUNCTION Function, LCID Locale, ::LPNLSVERSIONINFO lpVersionInformation )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetNLSVersion" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		bResult = ::GetNLSVersion( Function, Locale, lpVersionInformation ); 
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetNLSVersionEx( NLS_FUNCTION function, LPCWSTR lpLocaleName, ::LPNLSVERSIONINFOEX lpVersionInformation )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetNLSVersionEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		bResult = ::GetNLSVersionEx( function, lpLocaleName, lpVersionInformation ); 
#	else
		QOR_PP_UNREF( lpVersionInformation );
		QOR_PP_UNREF( lpLocaleName );
		QOR_PP_UNREF( function );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetNLSVersionEx" ), _T( "Windows Vista" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CKernel32::GetNumberFormat( LCID Locale, DWORD dwFlags, LPCTSTR lpValue, CONST ::NUMBERFMT* lpFormat, LPTSTR lpNumberStr, int cchNumber )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetNumberFormat" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		iResult = ::GetNumberFormat( Locale, dwFlags, lpValue, lpFormat, lpNumberStr, cchNumber );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CKernel32::GetNumberFormatEx( LPCWSTR lpLocaleName, DWORD dwFlags, LPCWSTR lpValue, const ::NUMBERFMTW* lpFormat, LPWSTR lpNumberStr, int cchNumber )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetNumberFormatEx" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		iResult = ::GetNumberFormatEx( lpLocaleName, dwFlags, lpValue, lpFormat, lpNumberStr, cchNumber );
#	else
		QOR_PP_UNREF( cchNumber );
		QOR_PP_UNREF( lpNumberStr );
		QOR_PP_UNREF( lpFormat );
		QOR_PP_UNREF( lpValue );
		QOR_PP_UNREF( dwFlags );
		QOR_PP_UNREF( lpLocaleName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetNumberFormatEx" ), _T( "Windows Vista" ), 0 ));
#	endif
		return iResult;
	}

	//--------------------------------------------------------------------------------
	UINT CKernel32::GetOEMCP(void)
	{
		_WINQ_SFCONTEXT( "CKernel32::GetOEMCP" );
		return ::GetOEMCP();
	}

	//--------------------------------------------------------------------------------
	int CKernel32::GetStringScripts( DWORD dwFlags, LPCWSTR lpString, int cchString, LPWSTR lpScripts, int cchScripts )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetStringScripts" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		iResult = ::GetStringScripts( dwFlags, lpString, cchString, lpScripts, cchScripts );
#	else
		QOR_PP_UNREF( cchScripts );
		QOR_PP_UNREF( lpScripts );
		QOR_PP_UNREF( cchString );
		QOR_PP_UNREF( lpString );
		QOR_PP_UNREF( dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetStringScripts" ), _T( "Windows Vista" ), 0 ));
#	endif
		return iResult;
	}

	//--------------------------------------------------------------------------------
	LANGID CKernel32::GetSystemDefaultLangID(void)
	{
		_WINQ_SFCONTEXT( "CKernel32::GetSystemDefaultLangID" );
		return ::GetSystemDefaultLangID();
	}

	//--------------------------------------------------------------------------------
	LCID CKernel32::GetSystemDefaultLCID(void)
	{
		_WINQ_SFCONTEXT( "CKernel32::GetSystemDefaultLCID" );
		return ::GetSystemDefaultLCID();
	}

	//--------------------------------------------------------------------------------
	int CKernel32::GetSystemDefaultLocaleName( LPWSTR lpLocaleName, int cchLocaleName )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetSystemDefaultLocaleName" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		iResult = ::GetSystemDefaultLocaleName( lpLocaleName, cchLocaleName );
#	else
		QOR_PP_UNREF( cchLocaleName );
		QOR_PP_UNREF( lpLocaleName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetSystemDefaultLocaleName" ), _T( "Windows Vista" ), 0 ));
#	endif
		return iResult;
	}

	//--------------------------------------------------------------------------------
	LCID CKernel32::GetThreadLocale(void)
	{
		_WINQ_SFCONTEXT( "CKernel32::GetThreadLocale" );
		return ::GetThreadLocale();
	}

	//--------------------------------------------------------------------------------
	int CKernel32::GetTimeFormat( LCID Locale, DWORD dwFlags, CONST ::SYSTEMTIME* lpTime, LPCTSTR lpFormat, LPTSTR lpTimeStr, int cchTime )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetTimeFormat" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		iResult = ::GetTimeFormat( Locale, dwFlags, lpTime, lpFormat, lpTimeStr, cchTime );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CKernel32::GetTimeFormatEx( LPCWSTR lpLocaleName, DWORD dwFlags, CONST ::SYSTEMTIME* lpTime, LPCWSTR lpFormat, LPWSTR lpTimeStr, int cchTime )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetTimeFormatEx" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		iResult = ::GetTimeFormatEx( lpLocaleName, dwFlags, lpTime, lpFormat, lpTimeStr, cchTime );
#	else
		QOR_PP_UNREF( cchTime );
		QOR_PP_UNREF( lpTimeStr );
		QOR_PP_UNREF( lpFormat );
		QOR_PP_UNREF( lpTime );
		QOR_PP_UNREF( dwFlags );
		QOR_PP_UNREF( lpLocaleName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetTimeFormatEx" ), _T( "Windows Vista" ), 0 ));
#	endif
		return iResult;
	}

	//--------------------------------------------------------------------------------
	LANGID CKernel32::GetUserDefaultLangID(void)
	{
		_WINQ_SFCONTEXT( "CKernel32::GetUserDefaultLangID" );
		return ::GetUserDefaultLangID();
	}

	//--------------------------------------------------------------------------------
	LCID CKernel32::GetUserDefaultLCID(void)
	{
		_WINQ_SFCONTEXT( "CKernel32::GetUserDefaultLCID" );
		return ::GetUserDefaultLCID();
	}

	//--------------------------------------------------------------------------------
	int CKernel32::GetUserDefaultLocaleName( LPWSTR lpLocaleName, int cchLocaleName )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetUserDefaultLocaleName" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		iResult = ::GetUserDefaultLocaleName( lpLocaleName, cchLocaleName );
#	else
		QOR_PP_UNREF( cchLocaleName );
		QOR_PP_UNREF( lpLocaleName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetUserDefaultLocaleName" ), _T( "Windows Vista" ), 0 ));
#	endif
		return iResult;
	}

	//--------------------------------------------------------------------------------
	GEOID CKernel32::GetUserGeoID( GEOCLASS GeoClass )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetUserGeoID" );
		CCheckReturn< GEOID, CTCheckFailureValue< GEOID, GEOID_NOT_AVAILABLE > >::TType Result;
		Result = ::GetUserGeoID( GeoClass );
		return Result;
	}

	//--------------------------------------------------------------------------------
	int CKernel32::IdnToAscii( DWORD dwFlags, LPCWSTR lpUnicodeCharStr, int cchUnicodeChar, LPWSTR lpASCIICharStr, int cchASCIIChar )
	{
		_WINQ_SFCONTEXT( "CKernel32::IdnToAscii" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
#	if ( 0 )
	/*
		iResult = ::IdnToAscii( dwFlags, lpUnicodeCharStr, cchUnicodeChar, lpASCIICharStr, cchASCIIChar );
		if( iResult == 0 )
		{
			__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "IdnToAscii" ), 0 ));
		}
		*/
#	else
		//May be available in Normaliz.dll on earlier versions
		QOR_PP_UNREF( cchASCIIChar );
		QOR_PP_UNREF( lpASCIICharStr );
		QOR_PP_UNREF( cchUnicodeChar );		
		QOR_PP_UNREF( lpUnicodeCharStr );
		QOR_PP_UNREF( dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "IdnToAscii" ), _T( "Windows Vista" ), 0 ));
#	endif
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CKernel32::IdnToNameprepUnicode( DWORD dwFlags, LPCWSTR lpUnicodeCharStr, int cchUnicodeChar, LPWSTR lpNameprepCharStr, int cchNameprepChar )
	{
		_WINQ_SFCONTEXT( "CKernel32::IdnToNameprepUnicode" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
#	if ( 0 )
		iResult = ::IdnToNameprepUnicode( dwFlags, lpUnicodeCharStr, cchUnicodeChar, lpNameprepCharStr, cchNameprepChar );
#	else
		//May be available in Normaliz.dll on earlier versions
		QOR_PP_UNREF( cchNameprepChar );
		QOR_PP_UNREF( lpNameprepCharStr );
		QOR_PP_UNREF( cchUnicodeChar );
		QOR_PP_UNREF( lpUnicodeCharStr );
		QOR_PP_UNREF( dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "IdnToNameprepUnicode" ), _T( "Windows Vista" ), 0 ));
#	endif
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CKernel32::IdnToUnicode( DWORD dwFlags, LPCWSTR lpASCIICharStr, int cchASCIIChar, LPWSTR lpUnicodeCharStr, int cchUnicodeChar )
	{
		_WINQ_SFCONTEXT( "CKernel32::IdnToUnicode" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
#	if ( 0 )
		iResult = ::IdnToUnicode( dwFlags, lpASCIICharStr, cchASCIIChar, lpUnicodeCharStr, cchUnicodeChar );
#	else
		//May be available in Normaliz.dll on earlier versions
		QOR_PP_UNREF( cchUnicodeChar );
		QOR_PP_UNREF( lpUnicodeCharStr );
		QOR_PP_UNREF( cchASCIIChar );
		QOR_PP_UNREF( lpASCIICharStr );
		QOR_PP_UNREF( dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "IdnToUnicode" ), _T( "Windows Vista" ), 0 ));
#	endif
		return iResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::IsCalendarLeapYear( CALID calId, UINT year, UINT era )
	{
		_WINQ_SFCONTEXT( "CKernel32::IsCalendarLeapYear" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT == 0x0600 && NTDDI_VERSION >= NTDDI_VISTASP2 )
		bResult = ::IsCalendarLeapYear( calId, year, era );
#	else
		QOR_PP_UNREF( era );
		QOR_PP_UNREF( year );
		QOR_PP_UNREF( calId );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "IsCalendarLeapYear" ), _T( "Windows Vista Service Pack 2" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::IsNLSDefinedString( NLS_FUNCTION Function, DWORD dwFlags, ::LPNLSVERSIONINFO lpVersionInfo, LPCWSTR lpString, int cchStr )
	{
		_WINQ_SFCONTEXT( "CKernel32::IsNLSDefinedString" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT == 0x0502 )
		bResult = ::IsNLSDefinedString( Function, dwFlags, lpVersionInfo, lpString, cchStr );
#	else
		QOR_PP_UNREF( cchStr );
		QOR_PP_UNREF( lpString );
		QOR_PP_UNREF( lpVersionInfo );
		QOR_PP_UNREF( dwFlags );
		QOR_PP_UNREF( Function );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "IsNLSDefinedString" ), _T( "Windows Server 2003" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::IsNormalizedString( ::NORM_FORM NormForm, LPCWSTR lpString, int cwLength )
	{
		_WINQ_SFCONTEXT( "CKernel32::IsNormalizedString" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		bResult = ::IsNormalizedString( NormForm, lpString, cwLength );
#	else
		//May be available in Normaliz.dll on earlier versions
		QOR_PP_UNREF( cwLength );
		QOR_PP_UNREF( lpString );
		QOR_PP_UNREF( NormForm );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "IsNormalizedString" ), _T( "Windows Vista" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::IsValidCodePage( UINT CodePage )
	{
		_WINQ_SFCONTEXT( "CKernel32::IsValidCodePage" );
		return ::IsValidCodePage( CodePage );
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::IsValidLanguageGroup( LGRPID LanguageGroup, DWORD dwFlags )
	{
		_WINQ_SFCONTEXT( "CKernel32::IsValidLanguageGroup" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if( _WIN32_WINDOWS >= 0x0500 || _WIN32_WINNT >= 0x0500 )
		bResult = ::IsValidLanguageGroup( LanguageGroup, dwFlags );
#	else
		QOR_PP_UNREF( dwFlags );
		QOR_PP_UNREF( LanguageGroup );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "IsValidLanguageGroup" ), _T( "Windows 2000" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::IsValidLocale( LCID Locale, DWORD dwFlags )
	{
		_WINQ_SFCONTEXT( "CKernel32::IsValidLocale" );
		return ::IsValidLocale( Locale, dwFlags );
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::IsValidLocaleName( LPCWSTR lpLocaleName )
	{
		_WINQ_SFCONTEXT( "CKernel32::IsValidLocaleName" );
		BOOL bResult = FALSE;
#	if ( _WIN32_WINNT >= 0x0600 )
		bResult = ::IsValidLocaleName( lpLocaleName );
#	else
		QOR_PP_UNREF( lpLocaleName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "IsValidLocaleName" ), _T( "Windows Vista" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CKernel32::LCIDToLocaleName( LCID Locale, LPWSTR lpName, int cchName, DWORD dwFlags )
	{
		_WINQ_SFCONTEXT( "CKernel32::LCIDToLocaleName" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		iResult = ::LCIDToLocaleName( Locale, lpName, cchName, dwFlags );
#	else
		QOR_PP_UNREF( dwFlags );
		QOR_PP_UNREF( cchName );
		QOR_PP_UNREF( lpName );
		QOR_PP_UNREF( Locale );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "LCIDToLocaleName" ), _T( "Windows Vista" ), 0 ));
#	endif
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CKernel32::LCMapStringA( LCID Locale, DWORD dwMapFlags, LPCSTR lpSrcStr, int cchSrc, LPSTR lpDestStr, int cchDest )
	{
		_WINQ_SFCONTEXT( "CKernel32::LCMapStringA" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		iResult = ::LCMapStringA( Locale, dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CKernel32::LCMapStringW( LCID Locale, DWORD dwMapFlags, LPCWSTR lpSrcStr, int cchSrc, LPWSTR lpDestStr, int cchDest )
	{
		_WINQ_SFCONTEXT( "CKernel32::LCMapStringW" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		iResult = ::LCMapStringW( Locale, dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CKernel32::LCMapStringEx( LPCWSTR lpLocaleName, DWORD dwMapFlags, LPCWSTR lpSrcStr, int cchSrc, LPWSTR lpDestStr, int cchDest, ::LPNLSVERSIONINFO lpVersionInformation, LPVOID lpReserved, LPARAM lParam )
	{
		_WINQ_SFCONTEXT( "CKernel32::LCMapStringEx" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		iResult = ::LCMapStringEx( lpLocaleName, dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest, lpVersionInformation, lpReserved, lParam );
#	else
		QOR_PP_UNREF( lParam );
		QOR_PP_UNREF( lpReserved );
		QOR_PP_UNREF( lpVersionInformation );
		QOR_PP_UNREF( cchDest );
		QOR_PP_UNREF( lpDestStr );
		QOR_PP_UNREF( cchSrc );
		QOR_PP_UNREF( lpSrcStr );
		QOR_PP_UNREF( dwMapFlags );
		QOR_PP_UNREF( lpLocaleName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "LCMapStringEx" ), _T( "Windows Vista" ), 0 ));
#	endif
		return iResult;
	}

	//--------------------------------------------------------------------------------
	LCID CKernel32::LocaleNameToLCID( LPWSTR lpName, DWORD dwFlags )
	{
		_WINQ_SFCONTEXT( "CKernel32::LocaleNameToLCID" );
		CCheckReturn< LCID, CCheckNonZero< LCID > >::TType Result;
#	if ( _WIN32_WINNT >= 0x0600 )
		Result = ::LocaleNameToLCID( lpName, dwFlags );
#	else
		QOR_PP_UNREF( dwFlags );
		QOR_PP_UNREF( lpName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "LocaleNameToLCID" ), _T( "Windows Vista" ), 0 ));
#	endif
		return Result;
	}

	//--------------------------------------------------------------------------------
	int CKernel32::NormalizeString( ::NORM_FORM NormForm, LPCWSTR lpSrcString, int cwSrcLength, LPWSTR lpDstString, int cwDstLength )
	{
		_WINQ_SFCONTEXT( "CKernel32::NormalizeString" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		iResult = ::NormalizeString( NormForm, lpSrcString, cwSrcLength, lpDstString, cwDstLength );
#	else
		QOR_PP_UNREF( cwDstLength );
		QOR_PP_UNREF( lpDstString );
		QOR_PP_UNREF( cwSrcLength );
		QOR_PP_UNREF( lpSrcString );
		QOR_PP_UNREF( NormForm );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "NormalizeString" ), _T( "Windows Vista" ), 0 ));
#	endif
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CKernel32::SetCalendarInfo( LCID Locale, CALID Calendar, CALTYPE CalType, LPCTSTR lpCalData )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetCalendarInfo" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
#	if( _WIN32_WINDOWS >= 0x0401 || _WIN32_WINNT >= 0x0500 )
		iResult = ::SetCalendarInfo( Locale, Calendar, CalType, lpCalData );
#	else
		QOR_PP_UNREF( lpCalData );
		QOR_PP_UNREF( CalType );
		QOR_PP_UNREF( Calendar );
		QOR_PP_UNREF( Locale );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "SetCalendarInfo" ), _T( "Windows 98 or Windows 2000" ), 0 ));
#	endif
		return iResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::SetLocaleInfo( LCID Locale, LCTYPE LCType, LPCTSTR lpLCData )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetLocaleInfo" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		bResult = ::SetLocaleInfo( Locale, LCType, lpLCData );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::SetThreadLocale ( LCID Locale )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetThreadLocale" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		bResult = ::SetThreadLocale ( Locale );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::SetUserGeoID( GEOID GeoID )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetUserGeoID" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		bResult = ::SetUserGeoID( GeoID );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::UpdateCalendarDayOfWeek( LPCALDATETIME lpCalDateTime )
	{
		_WINQ_SFCONTEXT( "CKernel32::UpdateCalendarDayOfWeek" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#	if ( _WIN32_WINNT == 0x0600 && NTDDI_VERSION >= NTDDI_VISTASP1 )
		//This function does not have an associated header or library file. Call LoadLibrary with the DLL name (Kernel32.dll) to obtain a module handle. Then call GetProcAddress with that module handle and this function name to get the address of this function.
		return E_FAIL;//::UpdateCalendarDayOfWeek( lpCalDateTime );
#	else
		QOR_PP_UNREF( lpCalDateTime );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "UpdateCalendarDayOfWeek" ), _T( "Windows Vista Service Pack 1" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::VerifyScripts( DWORD dwFlags, LPCWSTR lpLocaleScripts, int cchLocaleScripts, LPCWSTR lpTestScripts, int cchTestScripts )
	{
		_WINQ_SFCONTEXT( "CKernel32::VerifyScripts" );
		BOOL bResult = FALSE;
#	if ( _WIN32_WINNT >= 0x0600 )
		bResult = ::VerifyScripts( dwFlags, lpLocaleScripts, cchLocaleScripts, lpTestScripts, cchTestScripts );
		if( bResult == FALSE )
		{
			DWORD dwError = CKernel32::GetLastError();
			if( dwError != ERROR_SUCCESS )
			{
				__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "VerifyScripts" ), 0 ));
			}
		}
#	else
		QOR_PP_UNREF( cchTestScripts );
		QOR_PP_UNREF( lpTestScripts );
		QOR_PP_UNREF( cchLocaleScripts );
		QOR_PP_UNREF( lpLocaleScripts );
		QOR_PP_UNREF( dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "VerifyScripts" ), _T( "Windows Vista" ), 0 ));
#	endif
		return bResult;
	}

}//nsWinQAPI

