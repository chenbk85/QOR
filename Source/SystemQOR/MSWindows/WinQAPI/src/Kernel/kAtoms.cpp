//kAtoms.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQAPI/Kernel32.h"
#include "ReturnCheck.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//--------------------------------------------------------------------------------
	ATOM CKernel32::AddAtom( LPCTSTR lpString )
	{
		_WINQ_SFCONTEXT( "CKernel32::AddAtom" );
		CCheckReturn< ATOM, CCheckNonZero< ATOM > >::TType Result = ::AddAtom( lpString );
		return Result;
	}

	//------------------------------------------------------------------------------
	ATOM CKernel32::DeleteAtom( ATOM nAtom )
	{
		_WINQ_SFCONTEXT( "CKernel32::DeleteAtom" );
		CCheckReturn< ATOM, CCheckNonZero< ATOM > >::TType Result = ::DeleteAtom( nAtom );
		return Result;
	}

	//------------------------------------------------------------------------------
	ATOM CKernel32::FindAtom( LPCTSTR lpString )
	{
		_WINQ_SFCONTEXT( "CKernel32::FindAtom" );
		CCheckReturn< ATOM, CCheckNonZero< ATOM > >::TType Result = ::FindAtom( lpString );
		return Result;
	}

	//------------------------------------------------------------------------------
	UINT CKernel32::GetAtomName( ATOM nAtom, LPTSTR lpBuffer, int nSize )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetAtomName" );
		CCheckReturn< UINT, CCheckNonZero< UINT > >::TType uiResult = ::GetAtomName( nAtom, lpBuffer, nSize );
		return uiResult;
	}

	//------------------------------------------------------------------------------
	ATOM CKernel32::GlobalAddAtom( LPCTSTR lpString )
	{
		_WINQ_SFCONTEXT( "CKernel32::GlobalAddAtom" );
		CCheckReturn< ATOM, CCheckNonZero< ATOM > >::TType Result = ::GlobalAddAtom( lpString );
		return Result;
	}

	//------------------------------------------------------------------------------
	ATOM CKernel32::GlobalDeleteAtom( ATOM nAtom )
	{
		_WINQ_SFCONTEXT( "CKernel32::GlobalDeleteAtom" );
		ATOM Result = 0;
		CKernel32::SetLastError( ERROR_SUCCESS );
		Result = ::GlobalDeleteAtom( nAtom );
		DWORD dwResult = CKernel32::GetLastError();
		if( dwResult != ERROR_SUCCESS )
		{
			__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "GlobalDeleteAtom" ), 0 ));
		}
		return Result;
	}

	//------------------------------------------------------------------------------
	ATOM CKernel32::GlobalFindAtom( LPCTSTR lpString )
	{
		_WINQ_SFCONTEXT( "CKernel32::GlobalFindAtom" );
		CCheckReturn< ATOM, CCheckNonZero< ATOM > >::TType Result = ::GlobalFindAtom( lpString );
		return Result;
	}

	//------------------------------------------------------------------------------
	UINT CKernel32::GlobalGetAtomName( ATOM nAtom, LPTSTR lpBuffer, int nSize )
	{
		_WINQ_SFCONTEXT( "CKernel32::GlobalGetAtomName" );
		CCheckReturn< UINT, CCheckNonZero< UINT > >::TType uiResult = ::GlobalGetAtomName( nAtom, lpBuffer, nSize );
		return uiResult;
	}

	//------------------------------------------------------------------------------
	BOOL CKernel32::InitAtomTable( DWORD nSize )
	{
		_WINQ_SFCONTEXT( "CKernel32::InitAtomTable" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::InitAtomTable( nSize );
		return bResult;
	}

}//nsWinQAPI

