//kPipe.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQAPI/Kernel32.h"
#include "ReturnCheck.h"

//------------------------------------------------------------------------------
namespace nsWinQAPI
{
	typedef CCheckReturn< BOOL, CBoolCheck< > >::TType CCheckedBool;
	//------------------------------------------------------------------------------
	BOOL CKernel32::CallNamedPipe( LPCTSTR lpNamedPipeName, void* lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesRead, DWORD nTimeOut )
	{
		_WINQ_SFCONTEXT( "CKernel32::CallNamedPipe" );
		CCheckedBool bResult;
		bResult = ::CallNamedPipe( lpNamedPipeName, lpInBuffer, nInBufferSize, lpOutBuffer, nOutBufferSize, lpBytesRead, nTimeOut );
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CKernel32::ConnectNamedPipe( HANDLE hNamedPipe, ::LPOVERLAPPED lpOverlapped )
	{
		_WINQ_SFCONTEXT( "CKernel32::ConnectNamedPipe" );
		SetLastError( 0 );
		BOOL bResult = ::ConnectNamedPipe( hNamedPipe, lpOverlapped );
		return bResult;
	}

	//------------------------------------------------------------------------------
	HANDLE CKernel32::CreateNamedPipe( LPCTSTR lpName, DWORD dwOpenMode, DWORD dwPipeMode, DWORD nMaxInstances, DWORD nOutBufferSize, DWORD nInBufferSize, DWORD nDefaultTimeOut, ::LPSECURITY_ATTRIBUTES lpSecurityAttributes )
	{
		_WINQ_SFCONTEXT( "CKernel32::CreateNamedPipe" );
		CCheckReturn< HANDLE, CHandleNullCheck< > >::TType handle;
		handle = ::CreateNamedPipe( lpName, dwOpenMode, dwPipeMode, nMaxInstances, nOutBufferSize, nInBufferSize, nDefaultTimeOut, lpSecurityAttributes );
		return handle;
	}

	//------------------------------------------------------------------------------
	BOOL CKernel32::CreatePipe( PHANDLE hReadPipe, PHANDLE hWritePipe, ::LPSECURITY_ATTRIBUTES lpPipeAttributes, DWORD nSize )
	{
		_WINQ_SFCONTEXT( "CKernel32::CreatePipe" );
		CCheckedBool bResult;
		bResult = ::CreatePipe( hReadPipe, hWritePipe, lpPipeAttributes, nSize );
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CKernel32::DisconnectNamedPipe( HANDLE hNamedPipe )
	{
		_WINQ_SFCONTEXT( "CKernel32::DisconnectNamedPipe" );
		CCheckedBool bResult;
		bResult = ::DisconnectNamedPipe( hNamedPipe );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetNamedPipeClientComputerName( HANDLE Pipe, LPTSTR ClientComputerName, ULONG ClientComputerNameLength )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetNamedPipeClientComputerName" );
		CCheckedBool bResult;
		bResult = ::GetNamedPipeClientComputerName( Pipe, ClientComputerName, ClientComputerNameLength );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetNamedPipeClientProcessId( HANDLE Pipe, PULONG ClientProcessId )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetNamedPipeClientProcessId" );
		CCheckedBool bResult;
		bResult = ::GetNamedPipeClientProcessId( Pipe, ClientProcessId );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetNamedPipeClientSessionId( HANDLE Pipe, PULONG ClientSessionId )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetNamedPipeClientSessionId" );
		CCheckedBool bResult;
		bResult = ::GetNamedPipeClientSessionId( Pipe, ClientSessionId );
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CKernel32::GetNamedPipeHandleState( HANDLE hNamedPipe, LPDWORD lpState, LPDWORD lpCurInstances, LPDWORD lpMaxCollectionCount, LPDWORD lpCollectDataTimeout, LPTSTR lpUserName, DWORD nMaxUserNameSize )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetNamedPipeHandleState" );
		CCheckedBool bResult;
		bResult = ::GetNamedPipeHandleState( hNamedPipe, lpState, lpCurInstances, lpMaxCollectionCount, lpCollectDataTimeout, lpUserName, nMaxUserNameSize );
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CKernel32::GetNamedPipeInfo( HANDLE hNamedPipe, LPDWORD lpFlags, LPDWORD lpOutBufferSize, LPDWORD lpInBufferSize, LPDWORD lpMaxInstances )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetNamedPipeInfo" );
		CCheckedBool bResult;
		bResult = ::GetNamedPipeInfo( hNamedPipe, lpFlags, lpOutBufferSize, lpInBufferSize, lpMaxInstances );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetNamedPipeServerProcessId( HANDLE Pipe, PULONG ServerProcessId )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetNamedPipeServerProcessId" );
		CCheckedBool bResult;
		bResult = ::GetNamedPipeServerProcessId( Pipe, ServerProcessId );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetNamedPipeServerSessionId( HANDLE Pipe, PULONG ServerSessionId )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetNamedPipeServerSessionId" );
		CCheckedBool bResult;
		bResult = ::GetNamedPipeServerSessionId( Pipe, ServerSessionId );
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CKernel32::PeekNamedPipe( HANDLE hNamedPipe, void* lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage )
	{
		_WINQ_SFCONTEXT( "CKernel32::PeekNamedPipe" );
		CCheckedBool bResult;
		bResult = ::PeekNamedPipe( hNamedPipe, lpBuffer, nBufferSize, lpBytesRead, lpTotalBytesAvail, lpBytesLeftThisMessage );
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CKernel32::SetNamedPipeHandleState( HANDLE hNamedPipe, LPDWORD lpMode, LPDWORD lpMaxCollectionCount, LPDWORD lpCollectDataTimeout )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetNamedPipeHandleState" );
		CCheckedBool bResult;
		bResult = ::SetNamedPipeHandleState( hNamedPipe, lpMode, lpMaxCollectionCount, lpCollectDataTimeout );
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CKernel32::TransactNamedPipe( HANDLE hNamedPipe, void* lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesRead, ::LPOVERLAPPED lpOverlapped )
	{
		_WINQ_SFCONTEXT( "CKernel32::TransactNamedPipe" );
		CCheckedBool bResult;
		bResult = ::TransactNamedPipe( hNamedPipe, lpInBuffer, nInBufferSize, lpOutBuffer, nOutBufferSize, lpBytesRead, lpOverlapped );
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CKernel32::WaitNamedPipe( LPCTSTR lpNamedPipeName, DWORD nTimeOut )
	{
		_WINQ_SFCONTEXT( "CKernel32::WaitNamedPipe" );
		CCheckedBool bResult;
		bResult = ::WaitNamedPipe( lpNamedPipeName, nTimeOut );
		return bResult;
	}

}//nsWinQAPI

