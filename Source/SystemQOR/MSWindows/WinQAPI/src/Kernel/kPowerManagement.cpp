//kPowerManagement.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQAPI/Kernel32.h"
#include "ReturnCheck.h"

//------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetDevicePowerState( HANDLE hDevice, BOOL* pfOn )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetDevicePowerState" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		bResult = ::GetDevicePowerState( hDevice, pfOn );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::CancelDeviceWakeupRequest( HANDLE hDevice )
	{
		_WINQ_SFCONTEXT( "CKernel32::CancelDeviceWakeupRequest" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		bResult = ::CancelDeviceWakeupRequest( hDevice );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetSystemPowerStatus( ::LPSYSTEM_POWER_STATUS lpSystemPowerStatus )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetSystemPowerStatus" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		bResult = ::GetSystemPowerStatus( lpSystemPowerStatus );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::IsSystemResumeAutomatic(void)
	{
		_WINQ_SFCONTEXT( "CKernel32::IsSystemResumeAutomatic" );
		BOOL bResult = ::IsSystemResumeAutomatic();
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::RequestWakeupLatency( ::LATENCY_TIME latency )
	{
		_WINQ_SFCONTEXT( "CKernel32::RequestWakeupLatency" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		bResult = ::RequestWakeupLatency( latency );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	EXECUTION_STATE CKernel32::SetThreadExecutionState( EXECUTION_STATE esFlags )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetThreadExecutionState" );
		CCheckReturn< EXECUTION_STATE, CCheckNonZero< EXECUTION_STATE > >::TType Result;
		Result = ::SetThreadExecutionState( esFlags );
		return Result;
	}

	//--------------------------------------------------------------------------------
	//NOTE: If we have Vista use SetSuspendState instead
	BOOL CKernel32::SetSystemPowerState( BOOL fSuspend, BOOL fForce )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetSystemPowerState" );
		BOOL bResult = ::SetSystemPowerState( fSuspend, fForce );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::SetMessageWaitingIndicator( HANDLE hIndicator, ULONG cmsg )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetMessageWaitingIndicator" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		bResult = ::SetMessageWaitingIndicator( hIndicator, cmsg );
		return bResult;
	}

}//nsWinQAPI

