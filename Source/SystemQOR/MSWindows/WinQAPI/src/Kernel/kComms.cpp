//kComms.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQAPI/Kernel32.h"
#include "ReturnCheck.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//--------------------------------------------------------------------------------
	BOOL CKernel32::BuildCommDCB( LPCTSTR lpDef, ::LPDCB lpDCB )
	{
		_WINQ_SFCONTEXT( "CKernel32::BuildCommDCB" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::BuildCommDCB( lpDef, lpDCB );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::BuildCommDCBAndTimeouts( LPCTSTR lpDef, ::LPDCB lpDCB, ::LPCOMMTIMEOUTS lpCommTimeouts )
	{
		_WINQ_SFCONTEXT( "CKernel32::BuildCommDCBAndTimeouts" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::BuildCommDCBAndTimeouts( lpDef, lpDCB, lpCommTimeouts );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::ClearCommBreak( HANDLE hFile )
	{
		_WINQ_SFCONTEXT( "CKernel32::ClearCommBreak" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::ClearCommBreak( hFile );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::ClearCommError( HANDLE hFile, LPDWORD lpErrors, ::LPCOMSTAT lpStat )
	{
		_WINQ_SFCONTEXT( "CKernel32::ClearCommError" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::ClearCommError( hFile, lpErrors, lpStat );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::CommConfigDialog( LPCTSTR lpszName, HWND hWnd, ::LPCOMMCONFIG lpCC )
	{
		_WINQ_SFCONTEXT( "CKernel32::CommConfigDialog" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::CommConfigDialog( lpszName, hWnd, lpCC );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::EscapeCommFunction( HANDLE hFile, DWORD dwFunc )
	{
		_WINQ_SFCONTEXT( "CKernel32::EscapeCommFunction" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::EscapeCommFunction( hFile, dwFunc );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetCommConfig( HANDLE hCommDev, ::LPCOMMCONFIG lpCC, LPDWORD lpdwSize )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetCommConfig" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::GetCommConfig( hCommDev, lpCC, lpdwSize );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetCommMask( HANDLE hFile, LPDWORD lpEvtMask )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetCommMask" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::GetCommMask( hFile, lpEvtMask );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetCommModemStatus( HANDLE hFile, LPDWORD lpModemStat )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetCommModemStatus" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::GetCommModemStatus( hFile, lpModemStat );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetCommProperties( HANDLE hFile, ::LPCOMMPROP lpCommProp )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetCommProperties" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::GetCommProperties( hFile, lpCommProp );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetCommState( HANDLE hFile, ::LPDCB lpDCB )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetCommState" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::GetCommState( hFile, lpDCB );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetCommTimeouts( HANDLE hFile, ::LPCOMMTIMEOUTS lpCommTimeouts )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetCommTimeouts" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::GetCommTimeouts( hFile, lpCommTimeouts );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetDefaultCommConfig( LPCTSTR lpszName, ::LPCOMMCONFIG lpCC, LPDWORD lpdwSize )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetDefaultCommConfig" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::GetDefaultCommConfig( lpszName, lpCC, lpdwSize );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::PurgeComm( HANDLE hFile, DWORD dwFlags )
	{
		_WINQ_SFCONTEXT( "CKernel32::PurgeComm" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::PurgeComm( hFile, dwFlags );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::SetCommBreak( HANDLE hFile )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetCommBreak" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::SetCommBreak( hFile );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::SetCommConfig( HANDLE hCommDev, ::LPCOMMCONFIG lpCC, DWORD dwSize )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetCommConfig" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::SetCommConfig( hCommDev, lpCC, dwSize );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::SetCommMask( HANDLE hFile, DWORD dwEvtMask )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetCommMask" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::SetCommMask( hFile, dwEvtMask );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::SetCommState( HANDLE hFile, ::LPDCB lpDCB )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetCommState" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::SetCommState( hFile, lpDCB );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::SetCommTimeouts( HANDLE hFile, ::LPCOMMTIMEOUTS lpCommTimeouts )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetCommTimeouts" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::SetCommTimeouts( hFile, lpCommTimeouts );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::SetDefaultCommConfig( LPCTSTR lpszName, ::LPCOMMCONFIG lpCC, DWORD dwSize )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetDefaultCommConfig" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::SetDefaultCommConfig( lpszName, lpCC, dwSize );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::SetupComm( HANDLE hFile, DWORD dwInQueue, DWORD dwOutQueue )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetupComm" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::SetupComm( hFile, dwInQueue, dwOutQueue );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::TransmitCommChar( HANDLE hFile, char cChar )
	{
		_WINQ_SFCONTEXT( "CKernel32::TransmitCommChar" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::TransmitCommChar( hFile, cChar );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::WaitCommEvent( HANDLE hFile, LPDWORD lpEvtMask, ::LPOVERLAPPED lpOverlapped )
	{
		_WINQ_SFCONTEXT( "CKernel32::WaitCommEvent" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult = ::WaitCommEvent( hFile, lpEvtMask, lpOverlapped );
		return bResult;
	}

}//nsWinQAPI

