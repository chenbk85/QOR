//kSystem.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQAPI/Kernel32.h"
#include "FunctionContext.h"

//------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//--------------------------------------------------------------------------------
	DWORD CKernel32::AddLocalAlternateComputerName( LPCTSTR lpDnsFQHostname, ULONG ulFlags )
	{
		_WINQ_SFCONTEXT( "CKernel32::AddLocalAlternateComputerName" );
		DWORD dwResult = 0;
#	if ( _WIN32_WINNT >= 0x0600 && NTDDI_VERSION >= NTDDI_VISTASP2 )
		QOR_PP_UNREF( ulFlags );
		QOR_PP_UNREF( lpDnsFQHostname );
		dwResult = 0xFFFFFFFF;//::AddLocalAlternateComputerName( lpDnsFQHostname, ulFlags );//Seems to require something else, 64bit Compiler?
		if( dwResult != ERROR_SUCCESS )
		{
			__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "AddLocalAlternateComputerName" ), 0 ));
		}
#	else
		QOR_PP_UNREF( ulFlags );
		QOR_PP_UNREF( lpDnsFQHostname );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "AddLocalAlternateComputerName" ), _T( "Windows Vista Service Pack 2" ), 0 ));
#	endif
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	//Unsupported, may get removed
	FARPROC CKernel32::DelayLoadFailureHook( LPCSTR pszDllName, LPCSTR pszProcName )
	{
		_WINQ_SFCONTEXT( "CKernel32::DelayLoadFailureHook" );
		FARPROC pResult = 0;
#	if ( _WIN32_WINNT >= 0x0502 )
		QOR_PP_UNREF( pszProcName );
		QOR_PP_UNREF( pszDllName );
		//::DelayLoadFailureHook( pszDllName, pszProcName );
#	else
		QOR_PP_UNREF( pszProcName );
		QOR_PP_UNREF( pszDllName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "DelayLoadFailureHook" ), _T( "Windows Server 2003" ), 0 ));
#	endif
		return pResult;
	}

	//--------------------------------------------------------------------------------
	void* CKernel32::DecodePointer( void* Ptr )
	{
		_WINQ_SFCONTEXT( "CKernel32::DecodePointer" );
		void* pResult = 0;
		pResult = ::DecodePointer( Ptr );
		return pResult;
	}

	//--------------------------------------------------------------------------------
	void* CKernel32::DecodeSystemPointer( void* Ptr )
	{
		_WINQ_SFCONTEXT( "CKernel32::DecodeSystemPointer" );
		void* pResult = 0;
		pResult = ::DecodeSystemPointer( Ptr );
		return pResult;
	}

	//--------------------------------------------------------------------------------
	void* CKernel32::EncodePointer( void* Ptr )
	{
		_WINQ_SFCONTEXT( "CKernel32::EncodePointer" );
		void* pResult = 0;
		pResult = ::EncodePointer( Ptr );
		return pResult;
	}

	//--------------------------------------------------------------------------------
	void* CKernel32::EncodeSystemPointer( void* Ptr )
	{
		_WINQ_SFCONTEXT( "CKernel32::EncodeSystemPointer" );
		void* pResult = 0;
		pResult = ::EncodeSystemPointer( Ptr );
		return pResult;
	}

}//nsWinQAPI
