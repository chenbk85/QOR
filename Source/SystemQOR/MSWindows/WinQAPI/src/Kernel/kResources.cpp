//kResources.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQAPI/Kernel32.h"
#include "ReturnCheck.h"

//------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//------------------------------------------------------------------------------
	HANDLE CKernel32::BeginUpdateResource( LPCTSTR pFileName, BOOL bDeleteExistingResources )
	{
		_WINQ_SFCONTEXT( "CKernel32::BeginUpdateResource" );
		CCheckReturn< HANDLE, CHandleNullCheck<> >::TType h;
		h = ::BeginUpdateResource( pFileName, bDeleteExistingResources );
		return h;
	}

	//------------------------------------------------------------------------------
	BOOL CKernel32::EndUpdateResource( HANDLE hUpdate, BOOL fDiscard )
	{
		_WINQ_SFCONTEXT( "CKernel32::EndUpdateResource" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		bResult = ::EndUpdateResource( hUpdate, fDiscard );
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CKernel32::EnumResourceLanguages( HMODULE hModule, LPCTSTR lpType, LPCTSTR lpName, ::ENUMRESLANGPROC lpEnumFunc, LONG_PTR lParam )
	{
		_WINQ_SFCONTEXT( "CKernel32::EnumResourceLanguages" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		bResult = ::EnumResourceLanguages( hModule, lpType, lpName, lpEnumFunc, lParam );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::EnumResourceLanguagesEx( HMODULE hModule, LPCTSTR lpType, LPCTSTR lpName, ::ENUMRESLANGPROC lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId )
	{
		_WINQ_SFCONTEXT( "CKernel32::EnumResourceLanguagesEx" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		bResult = ::EnumResourceLanguagesEx( hModule, lpType, lpName, lpEnumFunc, lParam, dwFlags, LangId );
#	else
		__QCMP_UNREF( LangId );
		__QCMP_UNREF( dwFlags );
		__QCMP_UNREF( lParam );
		__QCMP_UNREF( lpEnumFunc );
		__QCMP_UNREF( lpName );
		__QCMP_UNREF( lpType );
		__QCMP_UNREF( hModule );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "EnumResourceLanguagesEx" ), _T( "Windows Vista" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CKernel32::EnumResourceNames( HMODULE hModule, LPCTSTR lpszType, ::ENUMRESNAMEPROC lpEnumFunc, LONG_PTR lParam )
	{
		_WINQ_SFCONTEXT( "CKernel32::EnumResourceNames" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		bResult = ::EnumResourceNames( hModule, lpszType, lpEnumFunc, lParam );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::EnumResourceNamesEx( HMODULE hModule, LPCTSTR lpszType, ::ENUMRESNAMEPROC lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId )
	{
		_WINQ_SFCONTEXT( "CKernel32::EnumResourceNamesEx" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		bResult = ::EnumResourceNamesEx( hModule, lpszType, lpEnumFunc, lParam, dwFlags, LangId );
#	else
		__QCMP_UNREF( LangId );
		__QCMP_UNREF( dwFlags );
		__QCMP_UNREF( lParam );
		__QCMP_UNREF( lpEnumFunc );
		__QCMP_UNREF( lpszType );
		__QCMP_UNREF( hModule );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "EnumResourceNamesEx" ), _T( "Windows Vista" ), 0 ));
#	endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	BOOL CKernel32::EnumResourceTypes( HMODULE hModule, ::ENUMRESTYPEPROC lpEnumFunc, LONG_PTR lParam )
	{
		_WINQ_SFCONTEXT( "CKernel32::EnumResourceTypes" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		bResult = ::EnumResourceTypes( hModule, lpEnumFunc, lParam );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::EnumResourceTypesEx( HMODULE hModule, ::ENUMRESTYPEPROC lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId )
	{
		_WINQ_SFCONTEXT( "CKernel32::EnumResourceTypesEx" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
#if( _MSC_VER >= 1700 )
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "EnumResourceNamesEx" ), _T( "Windows 7" ), 0 ));
#else
		bResult = ::EnumResourceTypesEx( hModule, lpEnumFunc, lParam, dwFlags, LangId );
#endif
		return bResult;
	}

	//------------------------------------------------------------------------------
	HRSRC CKernel32::FindResource( HMODULE hModule, LPCTSTR lpName, LPCTSTR lpType )
	{
		_WINQ_SFCONTEXT( "CKernel32::FindResource" );
		CCheckReturn< HRSRC, CCheckNonZero< HRSRC > >::TType h;
		h = ::FindResource( hModule, lpName, lpType );
		return h;
	}

	//------------------------------------------------------------------------------
	HRSRC CKernel32::FindResourceEx( HMODULE hModule, LPCTSTR lpType, LPCTSTR lpName, WORD wLanguage )
	{
		_WINQ_SFCONTEXT( "CKernel32::FindResourceEx" );
		CCheckReturn< HRSRC, CCheckNonZero< HRSRC > >::TType h;
		h = ::FindResourceEx( hModule, lpType, lpName, wLanguage );
		return h;
	}

	//------------------------------------------------------------------------------
	BOOL CKernel32::FreeResource( HGLOBAL hglbResource )
	{
		_WINQ_SFCONTEXT( "CKernel32::FreeResource" );
		CCheckReturn< BOOL, CTSuccessCheck< BOOL > >::TType bResult;
		bResult = ::FreeResource( hglbResource );
		return bResult;
	}

	//------------------------------------------------------------------------------
	HGLOBAL CKernel32::LoadResource( HMODULE hModule, HRSRC hResInfo )
	{
		_WINQ_SFCONTEXT( "CKernel32::LoadResource" );
		CCheckReturn< HGLOBAL, CCheckNonZero< HGLOBAL > >::TType h;
		h = ::LoadResource( hModule, hResInfo );
		return h;
	}

	//------------------------------------------------------------------------------
	void* CKernel32::LockResource( HGLOBAL hResData )
	{
		_WINQ_SFCONTEXT( "CKernel32::LockResource" );
		CCheckReturn< void*, CCheckNonZero< void* > >::TType pResult;
		pResult = ::LockResource( hResData );
		return pResult;
	}

	//------------------------------------------------------------------------------
	DWORD CKernel32::SizeofResource( HMODULE hModule, HRSRC hResInfo )
	{
		_WINQ_SFCONTEXT( "CKernel32::SizeofResource" );
		CCheckReturn< DWORD, CCheckNonZero< DWORD > >::TType dwResult;
		dwResult = ::SizeofResource( hModule, hResInfo );
		return dwResult;
	}

	//------------------------------------------------------------------------------
	BOOL CKernel32::UpdateResource( HANDLE hUpdate, LPCTSTR lpType, LPCTSTR lpName, WORD wLanguage, void* lpData, DWORD cbData )
	{
		_WINQ_SFCONTEXT( "CKernel32::UpdateResource" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		bResult = ::UpdateResource( hUpdate, lpType, lpName, wLanguage, lpData, cbData );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CKernel32::VerLanguageName( DWORD wLang, LPTSTR szLang, DWORD nSize )
	{
		_WINQ_SFCONTEXT( "CKernel32::VerLanguageName" );
		CCheckReturn< DWORD, CCheckNonZero< DWORD > >::TType dwResult;
		dwResult = ::VerLanguageName( wLang, szLang, nSize );
		return dwResult;
	}

}//nsWinQAPI

