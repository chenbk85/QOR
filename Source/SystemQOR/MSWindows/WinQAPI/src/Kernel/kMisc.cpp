//kMisc.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQAPI/Kernel32.h"
#include "../SystemQOR/MSWindows/WinQAPI/include/ReturnCheck.h"

//------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//--------------------------------------------------------------------------------
	int CKernel32::MulDiv( int nNumber, int nNumerator, int nDenominator )
	{
		return ::MulDiv( nNumber, nNumerator, nDenominator );
	}

	//--------------------------------------------------------------------------------
	ULONGLONG CKernel32::RtlVirtualUnwind( ULONGLONG ImageBase, ULONGLONG ControlPC, PRUNTIME_FUNCTION FunctionEntry, PCONTEXT ContextRecord, PBOOLEAN InFunction, PFRAME_POINTERS EstablisherFrame, PKNONVOLATILE_CONTEXT_POINTERS ContextPointers )
	{
		//_WINQ_FCONTEXT( "CKernel32::RtlVirtualUnwind" );

		typedef void( *RtlVirtualUnwind_FPtr )( ULONGLONG, ULONGLONG, PRUNTIME_FUNCTION, PCONTEXT, PBOOLEAN, PFRAME_POINTERS, PKNONVOLATILE_CONTEXT_POINTERS );

		ULONGLONG ullResult = 0;
#	if ( _WIN32_WINNT >= 0x0501 )

		//This function has no associated import library. You must use the LoadLibrary and GetProcAddress functions to dynamically link to Ntdll.dll.
		HMODULE hNtDll = ::LoadLibrary( TEXT("Ntdll") );
		if( hNtDll != 0 && hNtDll != INVALID_HANDLE_VALUE )
		{
			RtlVirtualUnwind_FPtr pProc = reinterpret_cast< RtlVirtualUnwind_FPtr >( ::GetProcAddress( hNtDll, "RtlVirtualUnwind" ) );

			if( pProc != 0 )
			{
				(pProc)( ImageBase, ControlPC, FunctionEntry, ContextRecord, InFunction, EstablisherFrame, ContextPointers );
			}
		}

#	else
		QOR_PP_UNREF7( ContextPointers, EstablisherFrame, InFunction, ContextRecord, FunctionEntry, ControlPC, ImageBase );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RtlVirtualUnwind" ), _T( "Windows XP" ), 0 ));
#endif
		return ullResult;
	}

	//--------------------------------------------------------------------------------
	void CKernel32::RtlUnwindEx( FRAME_POINTERS TargetFrame, void* TargetIp, PEXCEPTION_RECORD ExceptionRecord, void* ReturnValue, PCONTEXT OriginalContext, PUNWIND_HISTORY_TABLE HistoryTable )
	{
		//_WINQ_FCONTEXT( "CKernel32::RtlUnwindEx" );

		typedef void( *RtlUnwindEx_FPtr )( FRAME_POINTERS, void*, PEXCEPTION_RECORD, void*, PCONTEXT, PUNWIND_HISTORY_TABLE );

#	if ( _WIN32_WINNT >= 0x0500 )

		//This function has no associated import library. You must use the LoadLibrary and GetProcAddress functions to dynamically link to Ntdll.dll.
		HMODULE hNtDll = ::LoadLibrary( TEXT("Ntdll") );
		if( hNtDll != 0 && hNtDll != INVALID_HANDLE_VALUE )
		{
			RtlUnwindEx_FPtr pProc = reinterpret_cast< RtlUnwindEx_FPtr >( ::GetProcAddress( hNtDll, "RtlUnwindEx" ) );

			if( pProc != 0 )
			{
				(pProc)( TargetFrame, TargetIp, ExceptionRecord, ReturnValue, OriginalContext, HistoryTable );
			}
		}

#	else
		QOR_PP_UNREF6( HistoryTable, OriginalContext, ReturnValue, ExceptionRecord, TargetIp, TargetFrame );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RtlUnwindEx" ), _T( "Windows 2000" ), 0 ));
#	endif

	}

}//nsWinQAPI

