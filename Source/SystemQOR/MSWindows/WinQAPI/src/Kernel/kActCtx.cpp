//kActCtx.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQAPI/Kernel32.h"
#include "ReturnCheck.h"

using namespace nsWinQAPI;

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//--------------------------------------------------------------------------------
	BOOL CKernel32::ActivateActCtx( 
		CCheckParam< HANDLE, CHandleParamCheck >::TType hActCtx, 
		CCheckParam< ULONG_PTR*, CTWritablePointerCheck< sizeof( ULONG_PTR ) > >::TType pCookie )
	{
		_WINQ_SFCONTEXT( "CKernel32::ActivateActCtx" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		__QOR_CODESTRING( APIName, "ActivateActCtx" );
#	if ( _WIN32_WINNT >= 0x0501 )//XP
		bResult = ::ActivateActCtx( hActCtx, pCookie );
#	else
		__QCMP_UNREF( pCookie );
		__QCMP_UNREF( hActCtx );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, APIName.c_str(), _T( "Windows XP" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CKernel32::AddRefActCtx( CCheckParam< HANDLE, CHandleParamCheck >::TType hActCtx )
	{
		_WINQ_SFCONTEXT( "CKernel32::AddRefActCtx" );
#	if ( _WIN32_WINNT >= 0x0501 )
		::AddRefActCtx( hActCtx );
#	else
		__QCMP_UNREF( hActCtx );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "AddRefActCtx" ), _T( "Windows XP" ), 0 ));
#	endif
	}

	//--------------------------------------------------------------------------------
	HANDLE CKernel32::CreateActCtx( CCheckParam< ::PACTCTX, CTRWPointerCheck< sizeof( ::ACTCTX ) > >::TType pActCtx )
	{
		_WINQ_SFCONTEXT( "CKernel32::CreateActCtx" );
		CCheckReturn< HANDLE, CHandleCheck< > >::TType h;
		
		__QOR_CODESTRING( APIName, "CreateActCtx" );
#	if ( _WIN32_WINNT >= 0x0501 )
		h = ::CreateActCtx( pActCtx );
#	else
		__QCMP_UNREF( pActCtx );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, APIName.c_str(), _T( "Windows XP" ), 0 ));
#	endif

		return h;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::DeactivateActCtx( DWORD dwFlags, ULONG_PTR ulCookie )
	{
		_WINQ_SFCONTEXT( "CKernel32::DeactivateActCtx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		__QOR_CODESTRING( APIName, "DeactivateActCtx" );
#	if ( _WIN32_WINNT >= 0x0501 )
		bResult = ::DeactivateActCtx( dwFlags, ulCookie );
#	else
		__QCMP_UNREF( ulCookie );
		__QCMP_UNREF( dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, APIName.c_str(), _T( "Windows XP" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::FindActCtxSectionGuid( DWORD dwFlags, const GUID* lpExtensionGuid, ULONG ulSectionId, const GUID* lpGuidToFind, ::PACTCTX_SECTION_KEYED_DATA ReturnedData )
	{
		_WINQ_SFCONTEXT( "CKernel32::FindActCtxSectionGuid" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		__QOR_CODESTRING( APIName, "FindActCtxSectionGuid" );
#	if ( _WIN32_WINNT >= 0x0501 )
		bResult = ::FindActCtxSectionGuid( dwFlags, reinterpret_cast< const ::GUID* >( lpExtensionGuid ), ulSectionId, reinterpret_cast< const ::GUID* >( lpGuidToFind ), ReturnedData );
#	else
		__QCMP_UNREF( ReturnedData );
		__QCMP_UNREF( lpGuidToFind );
		__QCMP_UNREF( ulSectionId );
		__QCMP_UNREF( lpExtensionGuid );
		__QCMP_UNREF( dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, APIName.c_str(), _T( "Windows XP" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::FindActCtxSectionString( DWORD dwFlags, const GUID* lpExtensionGuid, ULONG ulSectionId, LPCTSTR lpStringToFind, ::PACTCTX_SECTION_KEYED_DATA ReturnedData )
	{
		_WINQ_SFCONTEXT( "CKernel32::FindActCtxSectionString" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		__QOR_CODESTRING( APIName, "FindActCtxSectionString" );
#	if ( _WIN32_WINNT >= 0x0501 )
		bResult = ::FindActCtxSectionString( dwFlags, reinterpret_cast< const ::GUID* >( lpExtensionGuid ), ulSectionId, lpStringToFind, ReturnedData );
#	else
		__QCMP_UNREF( ReturnedData );
		__QCMP_UNREF( lpStringToFind );
		__QCMP_UNREF( ulSectionId );
		__QCMP_UNREF( lpExtensionGuid );
		__QCMP_UNREF( dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, APIName.c_str(), _T( "Windows XP" ), 0 ));
#	endif
		return bResult;
	}	

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetCurrentActCtx( HANDLE* lphActCtx )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetCurrentActCtx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		__QOR_CODESTRING( APIName, "GetCurrentActCtx" );
#	if ( _WIN32_WINNT >= 0x0501 )
		bResult = ::GetCurrentActCtx( lphActCtx );
#	else
		__QCMP_UNREF( lphActCtx );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, APIName.c_str(), _T( "Windows XP" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	#if defined(ISOLATION_AWARE_ENABLED) && (ISOLATION_AWARE_ENABLED != 0)
	static void CKernel32::IsolationAwareCleanup(void) const
	{
		_WINQ_SFCONTEXT( "CKernel32::IsolationAwareCleanup" );
		::IsolationAwareCleanup();
	}
	#endif

	//--------------------------------------------------------------------------------
	BOOL CKernel32::QueryActCtxW( DWORD dwFlags, HANDLE hActCtx, PVOID pvSubInstance, ULONG ulInfoClass, PVOID pvBuffer, SIZE_T cbBuffer, SIZE_T* pcbWrittenOrRequired )
	{
		_WINQ_SFCONTEXT( "CKernel32::QueryActCtxW" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		__QOR_CODESTRING( APIName, "QueryActCtxW" );
#	if( _WIN32_WINNT >= 0x0501 )
		bResult = ::QueryActCtxW( dwFlags, hActCtx, pvSubInstance, ulInfoClass, pvBuffer, cbBuffer, pcbWrittenOrRequired );
#	else
		__QCMP_UNREF( pcbWrittenOrRequired );
		__QCMP_UNREF( cbBuffer );
		__QCMP_UNREF( pvBuffer );
		__QCMP_UNREF( ulInfoClass );
		__QCMP_UNREF( pvSubInstance );
		__QCMP_UNREF( hActCtx );
		__QCMP_UNREF( dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, APIName.c_str(), _T( "Windows XP" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::QueryActCtxSettingsW( DWORD dwFlags, HANDLE hActCtx, PCWSTR settingsNameSpace, PCWSTR settingName, PWSTR pvBuffer, SIZE_T dwBuffer, SIZE_T* pdwWrittenOrRequired )
	{
		_WINQ_SFCONTEXT( "CKernel32::QueryActCtxSettingsW" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		__QOR_CODESTRING( APIName, "QueryActCtxSettingsW" );
#	if( _WIN32_WINNT >= 0x0600 )
		bResult = ::QueryActCtxSettingsW( dwFlags, hActCtx, settingsNameSpace, settingName, pvBuffer, dwBuffer, pdwWrittenOrRequired );
#	else
		__QCMP_UNREF( pdwWrittenOrRequired );
		__QCMP_UNREF( dwBuffer );
		__QCMP_UNREF( pvBuffer );
		__QCMP_UNREF( settingName );
		__QCMP_UNREF( settingsNameSpace );
		__QCMP_UNREF( hActCtx );
		__QCMP_UNREF( dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, APIName.c_str(), _T( "Windows Vista" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CKernel32::ReleaseActCtx( HANDLE hActCtx )
	{
		_WINQ_SFCONTEXT( "CKernel32::ReleaseActCtx" );
#	if( _WIN32_WINNT >= 0x0501 )
		::ReleaseActCtx( hActCtx );
#	else
		__QCMP_UNREF( hActCtx );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "ReleaseActCtx" ), _T( "Windows XP" ), 0 ));
#	endif
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::ZombifyActCtx( HANDLE hActCtx )
	{
		_WINQ_SFCONTEXT( "CKernel32::ZombifyActCtx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		__QOR_CODESTRING( APIName, "ZombifyActCtx" );
#	if( _WIN32_WINNT >= 0x0501 )
		bResult = ::ZombifyActCtx( hActCtx );
#	else
		__QCMP_UNREF( hActCtx );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, APIName.c_str(), _T( "Windows XP" ), 0 ));
#	endif
		return bResult;
	}

}//nsWinQAPI
