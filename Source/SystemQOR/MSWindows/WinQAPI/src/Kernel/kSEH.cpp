//kSEH.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQAPI/Kernel32.h"
#include "ReturnCheck.h"

//------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//--------------------------------------------------------------------------------
	PVOID CKernel32::AddVectoredContinueHandler( ULONG FirstHandler, ::PVECTORED_EXCEPTION_HANDLER VectoredHandler )
	{
		_WINQ_SFCONTEXT( "CKernel32::AddVectoredContinueHandler" );
		CCheckReturn< PVOID, CCheckNonZero< PVOID > >::TType pResult;		
#	if ( _WIN32_WINNT >= 0x0500 )
		pResult = ::AddVectoredContinueHandler( FirstHandler, VectoredHandler );
#	else
		QOR_PP_UNREF( VectoredHandler );
		QOR_PP_UNREF( FirstHandler );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "AddVectoredContinueHandler" ), _T( "Windows 2000" ), 0 ));
#	endif
		return pResult;
	}

	//--------------------------------------------------------------------------------
	PVOID CKernel32::AddVectoredExceptionHandler( ULONG FirstHandler, ::PVECTORED_EXCEPTION_HANDLER VectoredHandler )
	{
		_WINQ_SFCONTEXT( "CKernel32::AddVectoredExceptionHandler" );
		CCheckReturn< PVOID, CCheckNonZero< PVOID > >::TType pResult;
#	if ( _WIN32_WINNT >= 0x0501 )
		pResult = ::AddVectoredExceptionHandler( FirstHandler, VectoredHandler );
#	else
		QOR_PP_UNREF( VectoredHandler );
		QOR_PP_UNREF( FirstHandler );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "AddVectoredExceptionHandler" ), _T( "Windows XP" ), 0 ));
#	endif
		return pResult;
	}

	//--------------------------------------------------------------------------------
	//Client Requires Windows Vista or Windows XP Professional x64 Edition. 
	//Server Requires Windows Server 2008 or Windows Server 2003 SP1. 
	ULONG CKernel32::RemoveVectoredContinueHandler( PVOID Handler )
	{
		_WINQ_SFCONTEXT( "CKernel32::RemoveVectoredContinueHandler" );
		CCheckReturn< ULONG, CCheckNonZero< ULONG > >::TType ulResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		ulResult = ::RemoveVectoredContinueHandler( Handler );
#	else
		QOR_PP_UNREF( Handler );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RemoveVectoredContinueHandler" ), _T( "Windows Vista" ), 0 ));
#	endif
		return ulResult;
	}

	//--------------------------------------------------------------------------------
	ULONG CKernel32::RemoveVectoredExceptionHandler( PVOID VectoredHandlerHandle )
	{
		_WINQ_SFCONTEXT( "CKernel32::RemoveVectoredExceptionHandler" );
		CCheckReturn< ULONG, CCheckNonZero< ULONG > >::TType ulResult;
#	if( _WIN32_WINNT >= 0x0501 )
		ulResult = ::RemoveVectoredExceptionHandler( VectoredHandlerHandle );
#	else
		QOR_PP_UNREF( VectoredHandlerHandle );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RemoveVectoredExceptionHandler" ), _T( "Windows XP" ), 0 ));
#	endif
		return ulResult;
	}

	//--------------------------------------------------------------------------------
	//Client Requires Windows XP 64-Bit Edition Version 2003. 
	//Server Requires 64-bit edition of Windows Server 2003. 
	BOOLEAN CKernel32::RtlAddFunctionTable( PRUNTIME_FUNCTION FunctionTable, DWORD EntryCount, DWORD64 BaseAddress, ULONGLONG TargetGp )
	{
		_WINQ_SFCONTEXT( "CKernel32::RtlAddFunctionTable" );
		CCheckReturn< BOOLEAN, CTCheckFailureValue< BOOLEAN, FALSE > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0502 )
		QOR_PP_UNREF( TargetGp );
		QOR_PP_UNREF( BaseAddress );
		QOR_PP_UNREF( EntryCount );
		QOR_PP_UNREF( FunctionTable );
		bResult = FALSE;//::RtlAddFunctionTable( FunctionTable, EntryCount, BaseAddress, TargetGp );
#	else
		QOR_PP_UNREF( TargetGp );
		QOR_PP_UNREF( BaseAddress );
		QOR_PP_UNREF( EntryCount );
		QOR_PP_UNREF( FunctionTable );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RtlAddFunctionTable" ), _T( "Windows Server 2003" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	//Client Requires Windows XP 64-Bit Edition Version 2003. 
	//Server Requires 64-bit edition of Windows Server 2003. 
	VOID CKernel32::RtlCaptureContext( ::PCONTEXT ContextRecord )
	{
		_WINQ_SFCONTEXT( "CKernel32::RtlCaptureContext" );
#	if ( _WIN32_WINNT >= 0x0501 )
		::RtlCaptureContext( ContextRecord );
#	else
		QOR_PP_UNREF( ContextRecord );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RtlAddFunctionTable" ), _T( "Windows Server 2003" ), 0 ));
#	endif
	}

	//--------------------------------------------------------------------------------
	//Client Requires Windows XP 64-Bit Edition Version 2003. 
	//Server Requires 64-bit edition of Windows Server 2003. 
	BOOLEAN CKernel32::RtlDeleteFunctionTable( PRUNTIME_FUNCTION FunctionTable )
	{
		_WINQ_SFCONTEXT( "CKernel32::RtlDeleteFunctionTable" );
		BOOLEAN bResult = FALSE;
#	if defined( _WIN64 )
#		if ( _WIN32_WINNT >= 0x0501 )
		QOR_PP_UNREF( FunctionTable );
		bResult = ::RtlDeleteFunctionTable( FunctionTable );
#		else
		QOR_PP_UNREF( FunctionTable );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RtlDeleteFunctionTable" ), _T( "Windows XP 64 bit edition" ), 0 ));

#		endif
#	else
		QOR_PP_UNREF( FunctionTable );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RtlDeleteFunctionTable" ), _T( "Windows XP 64 bit edition" ), 0 ));

#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	//Client Requires Windows XP 64-Bit Edition Version 2003. 
	//Server Requires 64-bit edition of Windows Server 2003. 
	BOOLEAN CKernel32::RtlInstallFunctionTableCallback( DWORD64 TableIdentifier, DWORD64 BaseAddress, DWORD Length, PGET_RUNTIME_FUNCTION_CALLBACK Callback, PVOID Context, PCWSTR OutOfProcessCallbackDll )
	{
		_WINQ_SFCONTEXT( "CKernel32::RtlInstallFunctionTableCallback" );
		BOOLEAN bResult = FALSE;
#	if ( _WIN32_WINNT >= 0x0501 )
#		if defined( _WIN64 )
		QOR_PP_UNREF( TableIdentifier );
		QOR_PP_UNREF( BaseAddress );
		QOR_PP_UNREF( Length );
		QOR_PP_UNREF( Callback );
		QOR_PP_UNREF( Context );
		QOR_PP_UNREF( OutOfProcessCallbackDll );
		bResult = ::RtlInstallFunctionTableCallback( TableIdentifier, BaseAddress, Length, Callback, Context, OutOfProcessCallbackDll );
#		else
		QOR_PP_UNREF( OutOfProcessCallbackDll );
		QOR_PP_UNREF( Context );
		QOR_PP_UNREF( Callback );
		QOR_PP_UNREF( Length );
		QOR_PP_UNREF( BaseAddress );
		QOR_PP_UNREF( TableIdentifier );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RtlInstallFunctionTableCallback" ), _T( "Windows XP 64 bit edition" ), 0 ));
#		endif
#	else
		QOR_PP_UNREF( OutOfProcessCallbackDll );
		QOR_PP_UNREF( Context );
		QOR_PP_UNREF( Callback );
		QOR_PP_UNREF( Length );
		QOR_PP_UNREF( BaseAddress );
		QOR_PP_UNREF( TableIdentifier );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RtlInstallFunctionTableCallback" ), _T( "Windows XP 64 bit edition" ), 0 ));
#endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	VOID CKernel32::RtlRestoreContext( PCONTEXT ContextRecord, PEXCEPTION_RECORD ExceptionRecord )
	{
		_WINQ_SFCONTEXT( "CKernel32::RtlRestoreContext" );
		//Client Requires Windows XP 64-Bit Edition Version 2003. 
		//Server Requires 64-bit edition of Windows Server 2003. 
	#if ( _WIN32_WINNT >= 0x0502 )
		QOR_PP_UNREF( ExceptionRecord );
		QOR_PP_UNREF( ContextRecord );
		//::RtlRestoreContext( ContextRecord, ExceptionRecord );
	#else
		QOR_PP_UNREF( ExceptionRecord );
		QOR_PP_UNREF( ContextRecord );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "RtlRestoreContext" ), _T( "Windows Server 2003" ), 0 ));
	#endif
	}

	//--------------------------------------------------------------------------------
	::LPTOP_LEVEL_EXCEPTION_FILTER CKernel32::SetUnhandledExceptionFilter( ::LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetUnhandledExceptionFilter" );
		return ::SetUnhandledExceptionFilter( lpTopLevelExceptionFilter );
	}

}//nsWinQAPI

