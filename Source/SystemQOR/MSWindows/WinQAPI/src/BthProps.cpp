//BthProps.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQAPI/WinQAPI.h"
#include "SystemQOR.h"
#include "WinQAPI/Kernel32.h"
#include "WinQAPI/BthProps.h"
#include "../Source/SystemQOR/MSWindows/WinQAPI/include/ReturnCheck.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{

	//--------------------------------------------------------------------------------
	DWORD CBthProps::BluetoothAuthenticateDevice( HWND hwndParent, HANDLE hRadio, BLUETOOTH_DEVICE_INFO* pbtdi, PWCHAR pszPasskey, ULONG ulPasskeyLength )
	{
		_WINQ_FCONTEXT( "CBthProps::BluetoothAuthenticateDevice" );
		DWORD dwResult;
		_WINQ_USESAPI( BluetoothAuthenticateDevice );
		dwResult = Call< DWORD, HWND, HANDLE, BLUETOOTH_DEVICE_INFO*, PWCHAR, ULONG >( pFunc, hwndParent, hRadio, pbtdi, pszPasskey, ulPasskeyLength );
		return dwResult;
	}
	
	//--------------------------------------------------------------------------------
	DWORD CBthProps::BluetoothAuthenticateDeviceEx( HWND hwndParentIn, HANDLE hRadioIn, BLUETOOTH_DEVICE_INFO* pbtdiInout, PBLUETOOTH_OOB_DATA_INFO pbtOobData, AUTHENTICATION_REQUIREMENTS authenticationRequirement )
	{
		_WINQ_FCONTEXT( "CBthProps::BluetoothAuthenticateDeviceEx" );
		DWORD dwResult = 0;
		_WINQ_USESAPI( BluetoothAuthenticateDeviceEx );
		dwResult = Call< DWORD, HWND, HANDLE, BLUETOOTH_DEVICE_INFO*, PBLUETOOTH_OOB_DATA_INFO, AUTHENTICATION_REQUIREMENTS >( pFunc, hwndParentIn, hRadioIn, pbtdiInout, pbtOobData, authenticationRequirement );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CBthProps::BluetoothDisplayDeviceProperties( HWND hwndParent, BLUETOOTH_DEVICE_INFO* pbtdi )
	{
		_WINQ_FCONTEXT( "CBthProps::BluetoothDisplayDeviceProperties" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( BluetoothDisplayDeviceProperties );
		bResult = Call< BOOL, HWND, BLUETOOTH_DEVICE_INFO* >( pFunc, hwndParent, pbtdi );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CBthProps::BluetoothEnableDiscovery( HANDLE hRadio, BOOL fEnabled )
	{
		_WINQ_FCONTEXT( "CBthProps::BluetoothEnableDiscovery" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( BluetoothEnableDiscovery );
		bResult = Call< BOOL, HANDLE, BOOL >( pFunc, hRadio, fEnabled );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CBthProps::BluetoothEnableIncomingConnections( HANDLE hRadio, BOOL fEnabled )
	{
		_WINQ_FCONTEXT( "CBthProps::BluetoothEnableIncomingConnections" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( BluetoothEnableIncomingConnections );
		bResult = Call< BOOL, HANDLE, BOOL >( pFunc, hRadio, fEnabled );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CBthProps::BluetoothEnumerateInstalledServices( HANDLE hRadio, BLUETOOTH_DEVICE_INFO* pbtdi, DWORD* pcServices, GUID* pGuidServices )
	{
		_WINQ_FCONTEXT( "CBthProps::BluetoothEnumerateInstalledServices" );
		DWORD dwResult = 0;
		_WINQ_USESAPI( BluetoothEnumerateInstalledServices );
		dwResult = Call< DWORD, HANDLE, BLUETOOTH_DEVICE_INFO*, DWORD*, GUID* >( pFunc, hRadio, pbtdi, pcServices, pGuidServices );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CBthProps::BluetoothFindDeviceClose( HBLUETOOTH_DEVICE_FIND hFind )
	{
		_WINQ_FCONTEXT( "CBthProps::BluetoothFindDeviceClose" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( BluetoothFindDeviceClose );
		bResult = Call< BOOL, HBLUETOOTH_DEVICE_FIND >( pFunc, hFind );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	HBLUETOOTH_DEVICE_FIND CBthProps::BluetoothFindFirstDevice( BLUETOOTH_DEVICE_SEARCH_PARAMS* pbtsp, BLUETOOTH_DEVICE_INFO* pbtdi )
	{
		_WINQ_FCONTEXT( "CBthProps::BluetoothFindFirstDevice" );
		HBLUETOOTH_DEVICE_FIND Result = 0;
		_WINQ_USESAPI( BluetoothFindFirstDevice );
		Result = Call< HBLUETOOTH_DEVICE_FIND, BLUETOOTH_DEVICE_SEARCH_PARAMS*, BLUETOOTH_DEVICE_INFO* >( pFunc, pbtsp, pbtdi );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HBLUETOOTH_RADIO_FIND CBthProps::BluetoothFindFirstRadio( BLUETOOTH_FIND_RADIO_PARAMS* pbtfrp, HANDLE* phRadio )
	{
		_WINQ_FCONTEXT( "CBthProps::BluetoothFindFirstRadio" );
		HBLUETOOTH_RADIO_FIND Result = 0;
		_WINQ_USESAPI( BluetoothFindFirstRadio );
		Result = Call< HBLUETOOTH_RADIO_FIND, BLUETOOTH_FIND_RADIO_PARAMS*, HANDLE* >( pFunc, pbtfrp, phRadio );
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CBthProps::BluetoothFindNextDevice( HBLUETOOTH_DEVICE_FIND hFind, BLUETOOTH_DEVICE_INFO* pbtdi )
	{
		_WINQ_FCONTEXT( "CBthProps::BluetoothFindNextDevice" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( BluetoothFindNextDevice );
		bResult = Call< BOOL, HBLUETOOTH_DEVICE_FIND, BLUETOOTH_DEVICE_INFO* >( pFunc, hFind, pbtdi );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CBthProps::BluetoothFindNextRadio( HBLUETOOTH_RADIO_FIND hFind, HANDLE* phRadio )
	{
		_WINQ_FCONTEXT( "CBthProps::BluetoothFindNextRadio" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( BluetoothFindNextRadio );
		bResult = Call< BOOL, HBLUETOOTH_RADIO_FIND, HANDLE* >( pFunc, hFind, phRadio );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CBthProps::BluetoothFindRadioClose( HBLUETOOTH_RADIO_FIND hFind )
	{
		_WINQ_FCONTEXT( "CBthProps::BluetoothFindRadioClose" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( BluetoothFindRadioClose );
		bResult = Call< BOOL, HBLUETOOTH_RADIO_FIND >( pFunc, hFind );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CBthProps::BluetoothGetDeviceInfo( HANDLE hRadio, BLUETOOTH_DEVICE_INFO* pbtdi )
	{
		_WINQ_FCONTEXT( "CBthProps::BluetoothGetDeviceInfo" );
		DWORD dwResult = 0;
		_WINQ_USESAPI( BluetoothGetDeviceInfo );
		dwResult = Call< DWORD, HANDLE, BLUETOOTH_DEVICE_INFO* >( pFunc, hRadio, pbtdi );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CBthProps::BluetoothGetRadioInfo( HANDLE hRadio, PBLUETOOTH_RADIO_INFO pRadioInfo )
	{
		_WINQ_FCONTEXT( "CBthProps::BluetoothGetRadioInfo" );
		DWORD dwResult = 0;
		_WINQ_USESAPI( BluetoothGetRadioInfo );
		dwResult = Call< DWORD, HANDLE, PBLUETOOTH_RADIO_INFO >( pFunc, hRadio, pRadioInfo );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CBthProps::BluetoothIsConnectable( HANDLE hRadio )
	{
		_WINQ_FCONTEXT( "CBthProps::BluetoothIsConnectable" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( BluetoothIsConnectable );
		bResult = Call< BOOL, HANDLE >( pFunc, hRadio );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CBthProps::BluetoothIsDiscoverable( HANDLE hRadio )
	{
		_WINQ_FCONTEXT( "CBthProps::BluetoothIsDiscoverable" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( BluetoothIsDiscoverable );
		bResult = Call< BOOL, HANDLE >( pFunc, hRadio );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CBthProps::BluetoothIsVersionAvailable( UCHAR MajorVersion, UCHAR MinorVersion )
	{
		_WINQ_FCONTEXT( "CBthProps::BluetoothIsVersionAvailable" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( BluetoothIsVersionAvailable );
		bResult = Call< BOOL, UCHAR, UCHAR >( pFunc, MajorVersion, MinorVersion );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CBthProps::BluetoothRegisterForAuthentication( BLUETOOTH_DEVICE_INFO* pbtdi, HBLUETOOTH_AUTHENTICATION_REGISTRATION* phRegHandle, PFN_AUTHENTICATION_CALLBACK pfnCallback, PVOID pvParam )
	{
		_WINQ_FCONTEXT( "CBthProps::BluetoothRegisterForAuthentication" );
		DWORD dwResult = 0;
		_WINQ_USESAPI( BluetoothRegisterForAuthentication );
		dwResult = Call< DWORD, BLUETOOTH_DEVICE_INFO*, HBLUETOOTH_AUTHENTICATION_REGISTRATION*, PFN_AUTHENTICATION_CALLBACK, PVOID>( pFunc, pbtdi, phRegHandle, pfnCallback, pvParam );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CBthProps::BluetoothRegisterForAuthenticationEx( const BLUETOOTH_DEVICE_INFO* pbtdiln, HBLUETOOTH_AUTHENTICATION_REGISTRATION* phRegHandleOut, PFN_AUTHENTICATION_CALLBACK_EX pfnCallbackIn, PVOID pvParam )
	{
		_WINQ_FCONTEXT( "CBthProps::BluetoothRegisterForAuthenticationEx" );
		DWORD dwResult = 0;
		_WINQ_USESAPI( BluetoothRegisterForAuthenticationEx );
		dwResult = Call< DWORD, const BLUETOOTH_DEVICE_INFO*, HBLUETOOTH_AUTHENTICATION_REGISTRATION*, PFN_AUTHENTICATION_CALLBACK_EX, PVOID >( pFunc, pbtdiln, phRegHandleOut, pfnCallbackIn, pvParam );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CBthProps::BluetoothRemoveDevice( BLUETOOTH_ADDRESS* pAddress )
	{
		_WINQ_FCONTEXT( "CBthProps::BluetoothRemoveDevice" );
		DWORD dwResult = 0;
		_WINQ_USESAPI( BluetoothRemoveDevice );
		dwResult = Call< DWORD, BLUETOOTH_ADDRESS* >( pFunc, pAddress );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CBthProps::BluetoothSdpEnumAttributes( LPBYTE pSDPStream, ULONG cbStreamSize, PFN_BLUETOOTH_ENUM_ATTRIBUTES_CALLBACK pfnCallback, LPVOID pvParam )
	{
		_WINQ_FCONTEXT( "CBthProps::BluetoothSdpEnumAttributes" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( BluetoothSdpEnumAttributes );
		bResult = Call< BOOL, LPBYTE, ULONG, PFN_BLUETOOTH_ENUM_ATTRIBUTES_CALLBACK, LPVOID >( pFunc, pSDPStream, cbStreamSize, pfnCallback, pvParam );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CBthProps::BluetoothSdpGetAttributeValue( LPBYTE pRecordStream, ULONG cbRecordLength, USHORT usAttributeId, PSDP_ELEMENT_DATA pAttributeData )
	{
		_WINQ_FCONTEXT( "CBthProps::BluetoothSdpGetAttributeValue" );
		DWORD dwResult = 0;
		_WINQ_USESAPI( BluetoothSdpGetAttributeValue );
		dwResult = Call< DWORD, LPBYTE, ULONG, USHORT, PSDP_ELEMENT_DATA >( pFunc, pRecordStream, cbRecordLength, usAttributeId, pAttributeData );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CBthProps::BluetoothSdpGetContainerElementData( LPBYTE pContainerStream, ULONG cbContainerLength, HBLUETOOTH_CONTAINER_ELEMENT* pElement, PSDP_ELEMENT_DATA pData )
	{
		_WINQ_FCONTEXT( "CBthProps::BluetoothSdpGetContainerElementData" );
		DWORD dwResult = 0;
		_WINQ_USESAPI( BluetoothSdpGetContainerElementData );
		dwResult = Call< DWORD, LPBYTE, ULONG, HBLUETOOTH_CONTAINER_ELEMENT*, PSDP_ELEMENT_DATA >( pFunc, pContainerStream, cbContainerLength, pElement, pData );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CBthProps::BluetoothSdpGetElementData( LPBYTE pSdpStream, ULONG cbSpdStreamLength, PSDP_ELEMENT_DATA pData )
	{
		_WINQ_FCONTEXT( "CBthProps::BluetoothSdpGetElementData" );
		DWORD dwResult = 0;
		_WINQ_USESAPI( BluetoothSdpGetElementData );
		dwResult = Call< DWORD, LPBYTE, ULONG, PSDP_ELEMENT_DATA >( pFunc, pSdpStream, cbSpdStreamLength, pData );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CBthProps::BluetoothSdpGetString( LPBYTE pRecordStream, ULONG cbRecordLength, PSDP_STRING_TYPE_DATA pStringData, USHORT usStringOffset, PWCHAR pszString, PULONG pcchStringLength )
	{
		_WINQ_FCONTEXT( "CBthProps::BluetoothSdpGetString" );
		DWORD dwResult = 0;
		_WINQ_USESAPI( BluetoothSdpGetString );
		dwResult = Call< DWORD, LPBYTE, ULONG, PSDP_STRING_TYPE_DATA, USHORT, PWCHAR, PULONG >( pFunc, pRecordStream, cbRecordLength, pStringData, usStringOffset, pszString, pcchStringLength );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CBthProps::BluetoothSelectDevices( BLUETOOTH_SELECT_DEVICE_PARAMS* pbtsdp )
	{
		_WINQ_FCONTEXT( "CBthProps::BluetoothSelectDevices" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( BluetoothSelectDevices );
		bResult = Call< BOOL, BLUETOOTH_SELECT_DEVICE_PARAMS* >( pFunc, pbtsdp );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CBthProps::BluetoothSelectDevicesFree( BLUETOOTH_SELECT_DEVICE_PARAMS* pbtsdp )
	{
		_WINQ_FCONTEXT( "CBthProps::BluetoothSelectDevicesFree" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( BluetoothSelectDevicesFree );
		bResult = Call< BOOL, BLUETOOTH_SELECT_DEVICE_PARAMS* >( pFunc, pbtsdp );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CBthProps::BluetoothSendAuthenticationResponse( HANDLE hRadio, BLUETOOTH_DEVICE_INFO* pbtdi, LPWSTR pszPasskey )
	{
		_WINQ_FCONTEXT( "CBthProps::BluetoothSendAuthenticationResponse" );
		DWORD dwResult = 0;
		_WINQ_USESAPI( BluetoothSendAuthenticationResponse );
		dwResult = Call< DWORD, HANDLE, BLUETOOTH_DEVICE_INFO*, LPWSTR >( pFunc, hRadio, pbtdi, pszPasskey );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CBthProps::BluetoothSendAuthenticationResponseEx( HANDLE hRadioIn, PBLUETOOTH_AUTHENTICATE_RESPONSE pauthResponse )
	{
		_WINQ_FCONTEXT( "CBthProps::BluetoothSendAuthenticationResponseEx" );
		HRESULT hResult = S_OK;
		_WINQ_USESAPI( BluetoothSendAuthenticationResponseEx );
		hResult = Call< HRESULT, HANDLE, PBLUETOOTH_AUTHENTICATE_RESPONSE >( pFunc, hRadioIn, pauthResponse );
		return hResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CBthProps::BluetoothSetLocalServiceInfo( HANDLE hRadioIn, const GUID *pClassGuid, ULONG ulInstance, const BLUETOOTH_LOCAL_SERVICE_INFO* pServiceInfoIn )
	{
		_WINQ_FCONTEXT( "CBthProps::BluetoothSetLocalServiceInfo" );
		DWORD dwResult = 0;
		_WINQ_USESAPI( BluetoothSetLocalServiceInfo );
		dwResult = Call< DWORD, HANDLE, const GUID*, ULONG, const BLUETOOTH_LOCAL_SERVICE_INFO* >( pFunc, hRadioIn, pClassGuid, ulInstance, pServiceInfoIn );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CBthProps::BluetoothSetServiceState( HANDLE hRadio, BLUETOOTH_DEVICE_INFO* pbtdi, GUID* pGuidService, DWORD dwServiceFlags )
	{
		_WINQ_FCONTEXT( "CBthProps::BluetoothSetServiceState" );
		DWORD dwResult = 0;
		_WINQ_USESAPI( BluetoothSetServiceState );
		dwResult = Call< DWORD, HANDLE, BLUETOOTH_DEVICE_INFO*, GUID*, DWORD >( pFunc, hRadio, pbtdi, pGuidService, dwServiceFlags );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CBthProps::BluetoothUnregisterAuthentication( HBLUETOOTH_AUTHENTICATION_REGISTRATION hRegHandle )
	{
		_WINQ_FCONTEXT( "CBthProps::BluetoothUnregisterAuthentication" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( BluetoothUnregisterAuthentication );
		bResult = Call< BOOL, HBLUETOOTH_AUTHENTICATION_REGISTRATION >( pFunc, hRegHandle );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CBthProps::BluetoothUpdateDeviceRecord( BLUETOOTH_DEVICE_INFO* pbtdi )
	{
		_WINQ_FCONTEXT( "CBthProps::BluetoothUpdateDeviceRecord" );
		DWORD dwResult = 0;
		_WINQ_USESAPI( BluetoothUpdateDeviceRecord );
		dwResult = Call< DWORD, BLUETOOTH_DEVICE_INFO* >( pFunc, pbtdi );
		return dwResult;
	}

}//nsWinQAPI

