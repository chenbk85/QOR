//SetupAPI.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQAPI/WinQAPI.h"
#include "SystemQOR.h"
#include "WinQAPI/Kernel32.h"
#include "WinQAPI/SetupAPI.h"
#include "../SystemQOR/MSWindows/WinQAPI/include/ReturnCheck.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//--------------------------------------------------------------------------------
	unsigned long CSetupAPI::CM_Add_Empty_Log_Conf( PLOG_CONF plcLogConf, DEVINST dnDevInst, PRIORITY Priority, ULONG ulFlags )
	{
		_WINQ_FCONTEXT( "CSetupAPI::CM_Add_Empty_Log_Conf" );
		unsigned long ulResult = 0;
		_WINQ_USESAPI( CM_Add_Empty_Log_Conf );
		ulResult = Call< unsigned long, PLOG_CONF, DEVINST, PRIORITY, ULONG >( pFunc, plcLogConf, dnDevInst, Priority, ulFlags );
		return ulResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CSetupAPI::CM_Add_Empty_Log_Conf_Ex( PLOG_CONF plcLogConf, DEVINST dnDevInst, PRIORITY Priority, ULONG ulFlags, HMACHINE hMachine )
	{
		_WINQ_FCONTEXT( "CSetupAPI::CM_Add_Empty_Log_Conf_Ex" );
		unsigned long ulResult = 0;
		_WINQ_USESAPI( CM_Add_Empty_Log_Conf_Ex );
		ulResult = Call< unsigned long, PLOG_CONF, DEVINST, PRIORITY, ULONG, HMACHINE >( pFunc, plcLogConf, dnDevInst, Priority, ulFlags, hMachine );
		return ulResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CSetupAPI::CM_Connect_Machine( PCTSTR UNCServerName, PHMACHINE phMachine )
	{
		_WINQ_FCONTEXT( "CSetupAPI::CM_Connect_Machine" );
		unsigned long ulResult = 0;
		_WINQ_USESAPI( CM_Connect_Machine );
		ulResult = Call< unsigned long, PCTSTR, PHMACHINE >( pFunc, UNCServerName, phMachine );
		return ulResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CSetupAPI::CM_Disconnect_Machine( HMACHINE hMachine )
	{
		_WINQ_FCONTEXT( "CSetupAPI::CM_Disconnect_Machine" );
		unsigned long ulResult = 0;
		_WINQ_USESAPI( CM_Disconnect_Machine );
		ulResult = Call< unsigned long, HMACHINE >( pFunc, hMachine );
		return ulResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CSetupAPI::CM_Enumerate_Enumerators( ULONG ulEnumIndex, PTSTR Buffer, PULONG pulLength, ULONG ulFlags )
	{
		_WINQ_FCONTEXT( "CSetupAPI::CM_Enumerate_Enumerators" );
		unsigned long ulResult = 0;
		_WINQ_USESAPI( CM_Enumerate_Enumerators );
		ulResult = Call< unsigned long, ULONG, PTSTR, PULONG, ULONG >( pFunc, ulEnumIndex, Buffer, pulLength, ulFlags );
		return ulResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CSetupAPI::CM_Get_Child( PDEVINST pdnDevInst, DEVINST dnDevInst, ULONG ulFlags )
	{
		_WINQ_FCONTEXT( "CSetupAPI::CM_Get_Child" );
		unsigned long ulResult = 0;
		_WINQ_USESAPI( CM_Get_Child );
		ulResult = Call< unsigned long, PDEVINST, DEVINST, ULONG >( pFunc, pdnDevInst, dnDevInst, ulFlags );
		return ulResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CSetupAPI::CM_Get_Child_Ex( PDEVINST pdnDevInst, DEVINST dnDevInst, ULONG ulFlags, HMACHINE hMachine )
	{
		_WINQ_FCONTEXT( "CSetupAPI::CM_Get_Child_Ex" );
		unsigned long ulResult = 0;
		_WINQ_USESAPI( CM_Get_Child_Ex );
		ulResult = Call< unsigned long, PDEVINST, DEVINST, ULONG, HMACHINE >( pFunc, pdnDevInst, dnDevInst, ulFlags, hMachine );
		return ulResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CSetupAPI::CM_Get_Device_ID_Ex( DEVINST dnDevInst, PTSTR Buffer, ULONG BufferLen, ULONG ulFlags, HMACHINE hMachine )
	{
		_WINQ_FCONTEXT( "CSetupAPI::CM_Get_Device_ID_Ex" );
		unsigned long ulResult = 0;
		_WINQ_USESAPI( CM_Get_Device_ID_Ex );
		ulResult = Call< unsigned long, DEVINST, PTSTR, unsigned long, unsigned long, HMACHINE >( pFunc, dnDevInst, Buffer, BufferLen, ulFlags, hMachine );
		return ulResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CSetupAPI::CM_Get_Device_ID_Size( PULONG pulLen, DEVINST dnDevInst, ULONG ulFlags )
	{
		_WINQ_FCONTEXT( "CSetupAPI::CM_Get_Device_ID_Size" );
		unsigned long ulResult = 0;
		_WINQ_USESAPI( CM_Get_Device_ID_Size );
		ulResult = Call< unsigned long, PULONG, DEVINST, ULONG >( pFunc, pulLen, dnDevInst, ulFlags );
		return ulResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CSetupAPI::CM_Get_Device_ID_Size_Ex( PULONG pulLen, DEVINST dnDevInst, ULONG ulFlags, HMACHINE hMachine )
	{
		_WINQ_FCONTEXT( "CSetupAPI::CM_Get_Device_ID_Size_Ex" );
		unsigned long ulResult = 0;
		_WINQ_USESAPI( CM_Get_Device_ID_Size_Ex );
		ulResult = Call< unsigned long, PULONG, DEVINST, ULONG, HMACHINE >( pFunc, pulLen, dnDevInst, ulFlags, hMachine );
		return ulResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CSetupAPI::CM_Get_DevNode_Property_Ex( DEVINST hDevInst, const DEVPROPKEY* PropertyKey, DEVPROPTYPE* PropertyType, PBYTE PropertyBuffer, PULONG PropertyBufferSize, ULONG ulFlags, HMACHINE hMachine )
	{
		_WINQ_FCONTEXT( "CSetupAPI::CM_Get_DevNode_Property_Ex" );
		unsigned long ulResult = 0;
		_WINQ_USESAPI( CM_Get_DevNode_Property_Ex );
		ulResult = Call< unsigned long, DEVINST, const DEVPROPKEY*, DEVPROPTYPE*, PBYTE, PULONG, ULONG, HMACHINE >( pFunc, hDevInst, PropertyKey, PropertyType, PropertyBuffer, PropertyBufferSize, ulFlags, hMachine );
		return ulResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CSetupAPI::CM_Get_DevNode_Registry_Property_Ex( DEVINST DevInst, unsigned long ulProperty, unsigned long* pulRegDataType, byte* pBuffer, unsigned long* pulLength, unsigned long ulFlags, HMACHINE hMachine )
	{
		_WINQ_FCONTEXT( "CSetupAPI::CM_Get_DevNode_Registry_Property_Ex" );
		unsigned long ulResult = 0;
		_WINQ_USESAPI( CM_Get_DevNode_Registry_Property_Ex );
		ulResult = Call< unsigned long, DEVINST, unsigned long, unsigned long*, void*, unsigned long*, unsigned long, HMACHINE >( pFunc, DevInst, ulProperty, pulRegDataType, pBuffer, pulLength, ulFlags, hMachine );
		return ulResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CSetupAPI::CM_Get_Sibling( PDEVINST pdnDevInst, DEVINST DevInst, ULONG ulFlags )
	{
		_WINQ_FCONTEXT( "CSetupAPI::CM_Get_Sibling" );
		unsigned long ulResult = 0;
		_WINQ_USESAPI( CM_Get_Sibling );
		ulResult = Call< unsigned long, PDEVINST, DEVINST, ULONG >( pFunc, pdnDevInst, DevInst, ulFlags );
		return ulResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CSetupAPI::CM_Get_Sibling_Ex( PDEVINST pdnDevInst, DEVINST DevInst, ULONG ulFlags, HMACHINE hMachine )
	{
		_WINQ_FCONTEXT( "CSetupAPI::CM_Get_Sibling_Ex" );
		unsigned long ulResult = 0;
		_WINQ_USESAPI( CM_Get_Sibling_Ex );
		ulResult = Call< unsigned long, PDEVINST, DEVINST, ULONG, HMACHINE >( pFunc, pdnDevInst, DevInst, ulFlags, hMachine );
		return ulResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CSetupAPI::CM_Locate_DevNode( PDEVINST pdnDevInst, DEVINSTID_W pDeviceID, unsigned long ulFlags )
	{
		_WINQ_FCONTEXT( "CSetupAPI::CM_Locate_DevNode" );
		unsigned long ulResult = 0;
		_WINQ_USESAPI( CM_Locate_DevNode );
		ulResult = Call< unsigned long, PDEVINST, DEVINSTID_W, unsigned long >( pFunc, pdnDevInst, pDeviceID, ulFlags );
		return ulResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CSetupAPI::CM_Locate_DevNode_Ex( PDEVINST pdnDevInst, DEVINSTID_W pDeviceID, unsigned long ulFlags, HMACHINE hMachine )
	{
		_WINQ_FCONTEXT( "CSetupAPI::CM_Locate_DevNode_Ex" );
		unsigned long ulResult = 0;
		_WINQ_USESAPI( CM_Locate_DevNode_Ex );
		ulResult = Call< unsigned long, PDEVINST, DEVINSTID_W, unsigned long, HMACHINE >( pFunc, pdnDevInst, pDeviceID, ulFlags, hMachine );
		return ulResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CSetupAPI::SetupDiBuildClassInfoList( DWORD Flags, LPGUID ClassGuidList, DWORD ClassGuidListSize, PDWORD RequiredSize )
	{
		_WINQ_FCONTEXT( "CSetupAPI::SetupDiBuildClassInfoList" );
		BOOL bResult;
		_WINQ_USESAPI( SetupDiBuildClassInfoList );
		bResult = Call< BOOL, DWORD, LPGUID, DWORD, PDWORD >( pFunc, Flags, ClassGuidList, ClassGuidListSize, RequiredSize );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CSetupAPI::SetupDiBuildClassInfoListEx( DWORD Flags, LPGUID ClassGuidList, DWORD ClassGuidListSize, PDWORD RequiredSize, PCTSTR MachineName, PVOID Reserved )
	{
		_WINQ_FCONTEXT( "CSetupAPI::SetupDiBuildClassInfoListEx" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( SetupDiBuildClassInfoListEx );
		bResult = Call< BOOL, DWORD, LPGUID, DWORD, PDWORD, PCTSTR, PVOID >( pFunc, Flags, ClassGuidList, ClassGuidListSize, RequiredSize, MachineName, Reserved );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CSetupAPI::SetupDiBuildDriverInfoList( HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, DWORD DriverType )
	{
		_WINQ_FCONTEXT( "CSetupAPI::SetupDiBuildDriverInfoList" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		_WINQ_USESAPI( SetupDiBuildDriverInfoList );
		bResult = Call< BOOL, HDEVINFO, PSP_DEVINFO_DATA, DWORD >( pFunc, DeviceInfoSet, DeviceInfoData, DriverType );
		return bResult;
	}

	//...

	//--------------------------------------------------------------------------------
	BOOL CSetupAPI::SetupDiClassGuidsFromName( PCTSTR ClassName, LPGUID ClassGuidList, DWORD ClassGuidListSize, PDWORD RequiredSize )
	{
		_WINQ_FCONTEXT( "CSetupAPI::SetDiClassGuidsFromName" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		_WINQ_USESAPI( SetupDiClassGuidsFromName );
		bResult = Call< BOOL, PCTSTR, LPGUID, DWORD, PDWORD >( pFunc, ClassName, ClassGuidList, ClassGuidListSize, RequiredSize );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CSetupAPI::SetupDiClassGuidsFromNameEx( PCTSTR ClassName, LPGUID ClassGuidList, DWORD ClassGuidListSize, PDWORD RequiredSize, PCTSTR MachineName, PVOID Reserved )
	{
		_WINQ_FCONTEXT( "CSetupAPI::SetDiClassGuidsFromNameEx" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		_WINQ_USESAPI( SetupDiClassGuidsFromNameEx );
		bResult = Call< BOOL, PCTSTR, LPGUID, DWORD, PDWORD, PCTSTR, PVOID >( pFunc, ClassName, ClassGuidList, ClassGuidListSize, RequiredSize, MachineName, Reserved );
		return bResult;
	}

	//...

	//--------------------------------------------------------------------------------
	BOOL CSetupAPI::SetupDiClassNameFromGuidEx( const GUID* ClassGuid, PTSTR ClassName, DWORD ClassNameSize, PDWORD RequiredSize, PCTSTR MachineName, PVOID Reserved )
	{
		_WINQ_FCONTEXT( "CSetupAPI::SetupDiClassNameFromGuidEx" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		_WINQ_USESAPI( SetupDiClassNameFromGuidEx );
		bResult = Call< BOOL, const GUID*, PTSTR, DWORD, PDWORD, PCTSTR, PVOID >( pFunc, ClassGuid, ClassName, ClassNameSize, RequiredSize, MachineName, Reserved );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CSetupAPI::SetupDiCreateDeviceInfo( HDEVINFO DeviceInfoSet, PCTSTR DeviceName, const GUID* ClassGuid, PCTSTR DeviceDescription, HWND hwndParent, DWORD CreationFlags, PSP_DEVINFO_DATA DeviceInfoData )
	{
		_WINQ_FCONTEXT( "CSetupAPI::SetupDiCreateDeviceInfo" );
		/*CCheckReturn< BOOL, CBoolCheck<> >::TType*/ BOOL bResult;
		_WINQ_USESAPI( SetupDiCreateDeviceInfo );
		bResult = Call< BOOL, HDEVINFO, PCTSTR, const GUID*, PCTSTR, HWND, DWORD, PSP_DEVINFO_DATA >( pFunc, DeviceInfoSet, DeviceName, ClassGuid, DeviceDescription, hwndParent, CreationFlags, DeviceInfoData );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	HDEVINFO CSetupAPI::SetupDiCreateDeviceInfoList( const GUID *ClassGuid, HWND hwndParent )
	{
		_WINQ_FCONTEXT( "CSetupAPI::SetupDiCreateDeviceInfoList" );
		CCheckReturn< HDEVINFO, CHandleNullCheck< > >::TType Result;
		_WINQ_USESAPI( SetupDiCreateDeviceInfoList );
		Result = Call< HDEVINFO, const GUID*, HWND >( pFunc, ClassGuid, hwndParent );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HDEVINFO CSetupAPI::SetupDiCreateDeviceInfoListEx( const GUID* ClassGuid, HWND hwndParent, PCTSTR MachineName, PVOID Reserved )
	{
		_WINQ_FCONTEXT( "CSetupAPI::SetupDiCreateDeviceInfoListEx" );
		CCheckReturn< HDEVINFO, CHandleNullCheck< > >::TType Result;
		_WINQ_USESAPI( SetupDiCreateDeviceInfoListEx );
		Result = Call< HDEVINFO, const GUID*, HWND, PCTSTR, PVOID >( pFunc, ClassGuid, hwndParent, MachineName, Reserved );
		return Result;
	}

	//...

	//--------------------------------------------------------------------------------
	BOOL CSetupAPI::SetupDiDestroyDeviceInfoList( HDEVINFO DeviceInfoSet )
	{
		_WINQ_FCONTEXT( "CSetupAPI::SetupDiDestrpyDeviceInfoList" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		_WINQ_USESAPI( SetupDiDestroyDeviceInfoList );
		bResult = Call< BOOL, HDEVINFO >( pFunc, DeviceInfoSet );
		return bResult;
	}

	//...

	//--------------------------------------------------------------------------------
	BOOL CSetupAPI::SetupDiEnumDeviceInfo( HDEVINFO DeviceInfoSet, DWORD MemberIndex, PSP_DEVINFO_DATA DeviceInfoData )
	{
		_WINQ_FCONTEXT( "CSetupAPI::SetupDiEnumDeviceInfo" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( SetupDiEnumDeviceInfo );
		bResult = Call< BOOL, HDEVINFO, DWORD, PSP_DEVINFO_DATA >( pFunc, DeviceInfoSet, MemberIndex, DeviceInfoData );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CSetupAPI::SetupDiEnumDeviceInterfaces( HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, const GUID* InterfaceClassGuid, DWORD MemberIndex, PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData )
	{
		_WINQ_FCONTEXT( "CSetupAPI::SetupDiEnumDeviceInterfaces" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( SetupDiEnumDeviceInterfaces );
		bResult = Call< BOOL, HDEVINFO, PSP_DEVINFO_DATA, const GUID*, DWORD, PSP_DEVICE_INTERFACE_DATA >( pFunc, DeviceInfoSet, DeviceInfoData, InterfaceClassGuid, MemberIndex, DeviceInterfaceData );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CSetupAPI::SetupDiEnumDriverInfo( HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, DWORD DriverType, DWORD MemberIndex, PSP_DRVINFO_DATA_W DriverInfoData )
	{
		_WINQ_FCONTEXT( "CSetupAPI::SetupDiEnumDriverInfo" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( SetupDiEnumDriverInfo );
		bResult = Call< BOOL, HDEVINFO, PSP_DEVINFO_DATA, DWORD, DWORD, PSP_DRVINFO_DATA_W >( pFunc, DeviceInfoSet, DeviceInfoData, DriverType, MemberIndex, DriverInfoData );
		return bResult;
	}

	//...

	//--------------------------------------------------------------------------------
	BOOL CSetupAPI::SetupDiGetClassBitmapIndex( const GUID* ClassGuid, PINT MiniIconIndex )
	{
		_WINQ_FCONTEXT( "CSetupAPI::SetupDiGetClassBitmapIndex" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( SetupDiGetClassBitmapIndex );
		bResult = Call< BOOL, const GUID*, PINT >( pFunc, ClassGuid, MiniIconIndex );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CSetupAPI::SetupDiGetClassDescription( const GUID* ClassGuid, PTSTR ClassDescription, DWORD ClassDescriptionSize, PDWORD RequiredSize )
	{
		_WINQ_FCONTEXT( "CSetupAPI::SetupDiGetClassDescription" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( SetupDiGetClassDescription );
		bResult = Call< BOOL, const GUID*, PTSTR, DWORD, PDWORD >( pFunc, ClassGuid, ClassDescription, ClassDescriptionSize, RequiredSize );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CSetupAPI::SetupDiGetClassDescriptionEx( const GUID* ClassGuid, PTSTR ClassDescription, DWORD ClassDescriptionSize, PDWORD RequiredSize, PCTSTR MachineName, PVOID Reserved )
	{
		_WINQ_FCONTEXT( "CSetupAPI::SetupDiGetClassDescriptionEx" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( SetupDiGetClassDescriptionEx );
		bResult = Call< BOOL, const GUID*, PTSTR, DWORD, PDWORD, PCTSTR, PVOID >( pFunc, ClassGuid, ClassDescription, ClassDescriptionSize, RequiredSize, MachineName, Reserved );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CSetupAPI::SetupDiGetClassDevPropertySheets( HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, LPPROPSHEETHEADER PropertySheetHeader, DWORD PropertySheetHeaderPageListSize, PDWORD RequiredSize, DWORD PropertySheetType )
	{
		_WINQ_FCONTEXT( "CSetupAPI::SetupDiGetClassDevPropertySheets" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( SetupDiGetClassDevPropertySheets );
		bResult = Call< BOOL, HDEVINFO, PSP_DEVINFO_DATA, LPPROPSHEETHEADER, DWORD, PDWORD, DWORD >( pFunc, DeviceInfoSet, DeviceInfoData, PropertySheetHeader, PropertySheetHeaderPageListSize, RequiredSize, PropertySheetType );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	HDEVINFO CSetupAPI::SetupDiGetClassDevs( const GUID* ClassGuid, PCTSTR Enumerator, HWND hwndParent, DWORD Flags )
	{
		_WINQ_FCONTEXT( "CSetupAPI::SetupDiGetClassDevs" );
		HDEVINFO Result = 0;
		_WINQ_USESAPI( SetupDiGetClassDevs );
		Result = Call< HDEVINFO, const GUID*, PCTSTR, HWND, DWORD >( pFunc, ClassGuid, Enumerator, hwndParent, Flags );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HDEVINFO CSetupAPI::SetupDiGetClassDevsEx( const GUID* ClassGuid, PCTSTR Enumerator, HWND hwndParent, DWORD Flags, HDEVINFO DeviceInfoSet, PCTSTR MachineName )
	{
		_WINQ_FCONTEXT( "CSetupAPI::SetupDiGetClassDevsEx" );
		HDEVINFO Result = 0;
		_WINQ_USESAPI( SetupDiGetClassDevsEx );
		Result = Call< HDEVINFO, const GUID*, PCTSTR, HWND, DWORD, HDEVINFO, PCTSTR, PVOID >( pFunc, ClassGuid, Enumerator, hwndParent, Flags, DeviceInfoSet, MachineName, 0 );
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CSetupAPI::SetupDiGetClassImageIndex( PSP_CLASSIMAGELIST_DATA ClassImageListData, const GUID* ClassGuid, PINT ImageIndex )
	{
		_WINQ_FCONTEXT( "CSetupAPI::SetupDiGetClassImageIndex" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( SetupDiGetClassImageIndex );
		bResult = Call< BOOL, PSP_CLASSIMAGELIST_DATA, const GUID*, PINT >( pFunc, ClassImageListData, ClassGuid, ImageIndex );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CSetupAPI::SetupDiGetClassImageList( PSP_CLASSIMAGELIST_DATA ClassImageListData )
	{
		_WINQ_FCONTEXT( "CSetupAPI::SetupDiGetClassImageList" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( SetupDiGetClassImageList );
		bResult = Call< BOOL, PSP_CLASSIMAGELIST_DATA >( pFunc, ClassImageListData );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CSetupAPI::SetupDiGetClassImageListEx( PSP_CLASSIMAGELIST_DATA ClassImageListData, PCTSTR MachineName, PVOID Reserved )
	{
		_WINQ_FCONTEXT( "CSetupAPI::SetupDiGetClassImageListEx" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( SetupDiGetClassImageListEx );
		bResult = Call< BOOL, PSP_CLASSIMAGELIST_DATA, PCTSTR, PVOID >( pFunc, ClassImageListData, MachineName, Reserved );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CSetupAPI::SetupDiGetClassInstallParams( HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, PSP_CLASSINSTALL_HEADER ClassInstallParams, DWORD ClassInstallParamsSize, PDWORD RequiredSize )
	{
		_WINQ_FCONTEXT( "CSetupAPI::SetupDiGetClassInstallParams" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( SetupDiGetClassInstallParams );
		bResult = Call< BOOL, HDEVINFO, PSP_DEVINFO_DATA, PSP_CLASSINSTALL_HEADER, DWORD, PDWORD >( pFunc, DeviceInfoSet, DeviceInfoData, ClassInstallParams, ClassInstallParamsSize, RequiredSize );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CSetupAPI::SetupDiGetClassProperty( const GUID* ClassGuid, const DEVPROPKEY* PropertyKey, DEVPROPTYPE* PropertyType, PBYTE PropertyBuffer, DWORD PropertyBufferSize, PDWORD RequiredSize, DWORD Flags )
	{
		_WINQ_FCONTEXT( "CSetupAPI::SetupDiGetClassProperty" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( SetupDiGetClassProperty );
		bResult = Call< BOOL, const GUID*, const DEVPROPKEY*, DEVPROPTYPE*, PBYTE, DWORD, PDWORD, DWORD >( pFunc, ClassGuid, PropertyKey, PropertyType, PropertyBuffer, PropertyBufferSize, RequiredSize, Flags );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CSetupAPI::SetupDiGetClassPropertyEx( const GUID* ClassGuid, const DEVPROPKEY* PropertyKey, DEVPROPTYPE* PropertyType, PBYTE PropertyBuffer, DWORD PropertyBufferSize, PDWORD RequiredSize, DWORD Flags, PCTSTR MachineName )
	{
		_WINQ_FCONTEXT( "CSetupAPI::SetupDiGetClassPropertyEx" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( SetupDiGetClassPropertyEx );
		bResult = Call< BOOL, const GUID*, const DEVPROPKEY*, DEVPROPTYPE*, PBYTE, DWORD, PDWORD, DWORD, PCTSTR >( pFunc, ClassGuid, PropertyKey, PropertyType, PropertyBuffer, PropertyBufferSize, RequiredSize, Flags, MachineName );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CSetupAPI::SetupDiGetClassPropertyKeys( const GUID* ClassGuid, DEVPROPKEY* PropertyKeyArray, DWORD PropertyKeyCount, PDWORD RequiredPropertyKeyCount, DWORD Flags )
	{
		_WINQ_FCONTEXT( "CSetupAPI::SetupDiGetClassPropertyKeys" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( SetupDiGetClassPropertyKeys );
		bResult = Call< BOOL, const GUID*, DEVPROPKEY*, DWORD, PDWORD, DWORD >( pFunc, ClassGuid, PropertyKeyArray, PropertyKeyCount, RequiredPropertyKeyCount, Flags );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CSetupAPI::SetupDiGetClassPropertyKeysEx( const GUID* ClassGuid, DEVPROPKEY* PropertyKeyArray, DWORD PropertyKeyCount, PDWORD RequiredPropertyKeyCount, DWORD Flags, PCTSTR MachineName )
	{
		_WINQ_FCONTEXT( "CSetupAPI::SetupDiGetClassPropertyKeysEx" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( SetupDiGetClassPropertyKeysEx );
		bResult = Call< BOOL, const GUID*, DEVPROPKEY*, DWORD, PDWORD, DWORD, PCTSTR, PVOID >( pFunc, ClassGuid, PropertyKeyArray, PropertyKeyCount, RequiredPropertyKeyCount, Flags, MachineName, 0 );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CSetupAPI::SetupDiGetClassRegistryProperty( const GUID* ClassGuid, DWORD Property, PDWORD PropertyRegDataType, PBYTE PropertyBuffer, DWORD PropertyBufferSize, PDWORD RequiredSize, PCTSTR MachineName )
	{
		_WINQ_FCONTEXT( "CSetupAPI::SetupDiGetClassRegistryProperty" );
		BOOL bResult = FALSE;
		_WINQ_USESAPIAW( SetupDiGetClassRegistryProperty );
		bResult = Call< BOOL, const GUID*, DWORD, PDWORD, PBYTE, DWORD, PDWORD, PCTSTR, PVOID >( pFunc, ClassGuid, Property, PropertyRegDataType, PropertyBuffer, PropertyBufferSize, RequiredSize, MachineName, 0 );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CSetupAPI::SetupDiGetCustomDeviceProperty( HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, PCTSTR CustomPropertyName, DWORD Flags, PDWORD PropertyRegDataType, PBYTE PropertyBuffer, DWORD PropertyBufferSize, PDWORD RequiredSize )
	{
		_WINQ_FCONTEXT( "CSetupAPI::SetupDiGetCustomDeviceProperty" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( SetupDiGetCustomDeviceProperty );
		bResult = Call< BOOL, HDEVINFO, PSP_DEVINFO_DATA, PCTSTR, DWORD, PDWORD, PBYTE, DWORD, PDWORD >( pFunc, DeviceInfoSet, DeviceInfoData, CustomPropertyName, Flags, PropertyRegDataType, PropertyBuffer, PropertyBufferSize, RequiredSize );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CSetupAPI::SetupDiGetDeviceInfoListClass( HDEVINFO DeviceInfoSet, LPGUID ClassGuid )
	{
		_WINQ_FCONTEXT( "CSetupAPI::SetupDiGetDeviceInfoListClass" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( SetupDiGetDeviceInfoListClass );
		bResult = Call< BOOL, HDEVINFO, LPGUID >( pFunc, DeviceInfoSet, ClassGuid );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CSetupAPI::SetupDiGetDeviceInfoListDetail( HDEVINFO DeviceInfoSet, PSP_DEVINFO_LIST_DETAIL_DATA DeviceInfoSetDetailData )
	{
		_WINQ_FCONTEXT( "CSetupAPI::SetupDiGetDeviceInfoListDetail" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( SetupDiGetDeviceInfoListDetail );
		bResult = Call< BOOL, HDEVINFO, PSP_DEVINFO_LIST_DETAIL_DATA >( pFunc, DeviceInfoSet, DeviceInfoSetDetailData );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CSetupAPI::SetupDiGetDeviceInstallParams( HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, PSP_DEVINSTALL_PARAMS DeviceInstallParams )
	{
		_WINQ_FCONTEXT( "CSetupAPI::SetupDiGetDeviceInstallParams" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( SetupDiGetDeviceInstallParams );
		bResult = Call< BOOL, HDEVINFO, PSP_DEVINFO_DATA, PSP_DEVINSTALL_PARAMS >( pFunc, DeviceInfoSet, DeviceInfoData, DeviceInstallParams );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CSetupAPI::SetupDiGetDeviceInstanceId( HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, PTSTR DeviceInstanceId, DWORD DeviceInstanceIdSize, PDWORD RequiredSize )
	{
		_WINQ_FCONTEXT( "CSetupAPI::SetupDiGetDeviceInstanceId" );
		BOOL bResult = 0;
		_WINQ_USESAPI( SetupDiGetDeviceInstanceId );
		bResult = Call< BOOL, HDEVINFO, PSP_DEVINFO_DATA, PTSTR, DWORD, PDWORD >( pFunc, DeviceInfoSet, DeviceInfoData, DeviceInstanceId, DeviceInstanceIdSize, RequiredSize );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CSetupAPI::SetupDiGetDeviceInterfaceDetail( HDEVINFO DeviceInfoSet, PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData, PSP_DEVICE_INTERFACE_DETAIL_DATA DeviceInterfaceDetailData, DWORD DeviceInterfaceDetailDataSize, PDWORD RequiredSize, PSP_DEVINFO_DATA DeviceInfoData )
	{
		_WINQ_FCONTEXT( "CSetupAPI::SetupDiGetDeviceInterfaceDetail" );
		BOOL bResult = 0;
		_WINQ_USESAPI( SetupDiGetDeviceInterfaceDetail );
		bResult = Call< BOOL, HDEVINFO, PSP_DEVICE_INTERFACE_DATA, PSP_DEVICE_INTERFACE_DETAIL_DATA, DWORD, PDWORD, PSP_DEVINFO_DATA >( pFunc, DeviceInfoSet, DeviceInterfaceData, DeviceInterfaceDetailData, DeviceInterfaceDetailDataSize, RequiredSize, DeviceInfoData );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CSetupAPI::SetupDiGetDeviceProperty( HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, const DEVPROPKEY *PropertyKey, DEVPROPTYPE *PropertyType, PBYTE PropertyBuffer, DWORD PropertyBufferSize, PDWORD RequiredSize, DWORD Flags )
	{
		_WINQ_FCONTEXT( "CSetupAPI::SetupDiGetDeviceProperty" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( SetupDiGetDevicePropertyW );
		bResult = Call< BOOL, HDEVINFO, PSP_DEVINFO_DATA, const DEVPROPKEY*, DEVPROPTYPE*, PBYTE, DWORD, PDWORD, DWORD >( pFunc, DeviceInfoSet, DeviceInfoData, PropertyKey, PropertyType, PropertyBuffer, PropertyBufferSize, RequiredSize, Flags );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CSetupAPI::SetupDiGetDevicePropertyKeys( HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, DEVPROPKEY* PropertyKeyArray, DWORD PropertyKeyCount, PDWORD RequiredPropertyKeyCount, DWORD Flags )
	{
		_WINQ_FCONTEXT( "CSetupAPI::SetupDiGetDevicePropertyKeys" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( SetupDiGetDevicePropertyKeys );
		bResult = Call< BOOL, HDEVINFO, PSP_DEVINFO_DATA, DEVPROPKEY*, DWORD, PDWORD, DWORD >( pFunc, DeviceInfoSet, DeviceInfoData, PropertyKeyArray, PropertyKeyCount, RequiredPropertyKeyCount, Flags );
		return bResult;
	}

	//...

	//--------------------------------------------------------------------------------
	BOOL CSetupAPI::SetupDiGetDeviceRegistryProperty( HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, DWORD Property, PDWORD PropertyRegDataType, PBYTE PropertyBuffer, DWORD PropertyBufferSize, PDWORD RequiredSize )
	{
		_WINQ_FCONTEXT( "CSetupAPI::SetupDiGetDeviceRegistryProperty" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( SetupDiGetDeviceRegistryProperty );
		bResult = Call<BOOL, HDEVINFO, PSP_DEVINFO_DATA, DWORD, PDWORD, PBYTE, DWORD, PDWORD>( pFunc, DeviceInfoSet, DeviceInfoData, Property, PropertyRegDataType, PropertyBuffer, PropertyBufferSize, RequiredSize );
		return bResult;
	}

}//nsWinQAPI

