//WinQActiveAccessibility.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQAPI/User32.h"
#include "../SystemQOR/MSWindows/WinQAPI/include/ReturnCheck.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//--------------------------------------------------------------------------------
	HWINEVENTHOOK CUser32::SetWinEventHook( UINT eventMin, UINT eventMax, HMODULE hmodWinEventProc, WINEVENTPROC lpfnWinEventProc, DWORD idProcess, DWORD idThread, UINT dwflags )
	{
		_WINQ_FCONTEXT( "CUser32::SetWinEventHook" );
		CCheckReturn< HWINEVENTHOOK, CCheckNonZero< HWINEVENTHOOK > >::TType Result;
		_WINQ_USESAPI( SetWinEventHook );
		Result = Call< HWINEVENTHOOK, UINT, UINT, HMODULE, WINEVENTPROC >( pFunc, eventMin, eventMax, hmodWinEventProc, lpfnWinEventProc, idProcess, idThread, dwflags );
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::UnhookWinEvent( HWINEVENTHOOK hWinEventHook )
	{
		_WINQ_FCONTEXT( "CUser32::UnhookWinEvent" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( UnhookWinEvent );
		bResult = Call< BOOL, HWINEVENTHOOK >( pFunc, hWinEventHook );
		return bResult;
	}

	//Server

	//--------------------------------------------------------------------------------
	BOOL CUser32::IsWinEventHookInstalled( DWORD dwEvent )
	{
		_WINQ_FCONTEXT( "CUser32::IsWinEventHookInstalled" );	
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( IsWinEventHookInstalled );
		bResult = Call< BOOL, DWORD >( pFunc, dwEvent );
		return bResult;
	}
	
	//--------------------------------------------------------------------------------
	void CUser32::NotifyWinEvent( DWORD dwEvent, HWND hwnd, LONG idObject, LONG idChild )
	{
		_WINQ_FCONTEXT( "CUser32::NotifyWinEvent" );
		_WINQ_USESAPI( NotifyWinEvent );
		voidCall< DWORD, HWND, LONG, LONG >( pFunc, dwEvent, hwnd, idObject, idChild );
	}

}//nsWinQAPI

