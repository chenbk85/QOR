//WinQPainting.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Painting functions

#include "WinQAPI/User32.h"
#include "../SystemQOR/MSWindows/WinQAPI/include/ReturnCheck.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//--------------------------------------------------------------------------------
	HDC CUser32::BeginPaint( HWND hwnd, ::LPPAINTSTRUCT lpPaint )
	{
		_WINQ_FCONTEXT( "CUser32::BeginPaint" );
		CCheckReturn< HDC, CCheckNonZero< HDC > >::TType Result;
		_WINQ_USESAPI( BeginPaint );
		Result = Call< HDC, HWND, ::LPPAINTSTRUCT >( pFunc, hwnd, lpPaint );
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::DrawAnimatedRects( HWND hwnd, int idAni, CONST ::RECT* lprcFrom, CONST ::RECT* lprcTo )
	{
		_WINQ_FCONTEXT( "CUser32::DrawAnimatedRects" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( DrawAnimatedRects );
		bResult = Call< BOOL, HWND, int, CONST ::RECT*, CONST ::RECT* >( pFunc, hwnd, idAni, lprcFrom, lprcTo );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::DrawCaption( HWND hwnd, HDC hdc, ::LPCRECT lprc, UINT uFlags )
	{
		_WINQ_FCONTEXT( "CUser32::DrawCaption" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( DrawCaption );
		bResult = Call< BOOL, HWND, HDC, ::LPCRECT, UINT >( pFunc, hwnd, hdc, lprc, uFlags );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::DrawEdge( HDC hdc, ::LPRECT qrc, UINT edge, UINT grfFlags )
	{
		_WINQ_FCONTEXT( "CUser32::DrawEdge" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( DrawEdge );
		bResult = Call< BOOL, HDC, ::LPRECT, UINT, UINT >( pFunc, hdc, qrc, edge, grfFlags );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::DrawFocusRect( HDC hDC, CONST ::RECT* lprc )
	{
		_WINQ_FCONTEXT( "CUser32::DrawFocusRect" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( DrawFocusRect );
		bResult = Call< BOOL, HDC, CONST ::RECT* >( pFunc, hDC, lprc );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::DrawFrameControl( HDC hdc, ::LPRECT lprc, UINT uType, UINT uState )
	{
		_WINQ_FCONTEXT( "CUser32::DrawFrameControl" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( DrawFrameControl );
		bResult = Call< BOOL, HDC, ::LPRECT, UINT, UINT >( pFunc, hdc, lprc, uType, uState );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::DrawState( HDC hdc, HBRUSH hbr, ::DRAWSTATEPROC lpOutputFunc, LPARAM lData, WPARAM wData, int x, int y, int cx, int cy, UINT fuFlags )
	{
		_WINQ_FCONTEXT( "CUser32::DrawState" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( DrawState );
		bResult = Call< BOOL, HDC, HBRUSH, ::DRAWSTATEPROC, LPARAM, WPARAM, int, int, int, int, UINT >( pFunc, hdc, hbr, lpOutputFunc, lData, wData, x, y, cx, cy, fuFlags );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::EndPaint( HWND hWnd, CONST ::PAINTSTRUCT* lpPaint )
	{
		_WINQ_FCONTEXT( "CUser32::EndPaint" );
		_WINQ_USESAPI( EndPaint );
		return Call< BOOL, HWND, CONST ::PAINTSTRUCT* >( pFunc, hWnd, lpPaint );
	}

	//--------------------------------------------------------------------------------
	int CUser32::ExcludeUpdateRgn( HDC hDC, HWND hWnd )
	{
		_WINQ_FCONTEXT( "CUser32::ExcludeUpdateRgn" );
		CCheckReturn< int, CTCheckFailureValue< int, ERROR > >::TType iResult;
		_WINQ_USESAPI( ExcludeUpdateRgn );
		iResult = Call< int, HDC, HWND >( pFunc, hDC, hWnd );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::GetUpdateRect( HWND hWnd, ::LPRECT lpRect, BOOL bErase )
	{
		_WINQ_FCONTEXT( "CUser32::GetUpdateRect" );
		_WINQ_USESAPI( GetUpdateRect );
		return Call< BOOL, HWND, ::LPRECT, BOOL >( pFunc, hWnd, lpRect, bErase );
	}

	//--------------------------------------------------------------------------------
	int CUser32::GetUpdateRgn( HWND hWnd, HRGN hRgn, BOOL bErase )
	{
		_WINQ_FCONTEXT( "CUser32::GetUpdateRgn" );
		CCheckReturn< int, CTCheckFailureValue< int, ERROR > >::TType iResult;
		_WINQ_USESAPI( GetUpdateRgn );
		iResult = Call< int, HWND, HRGN, BOOL >( pFunc, hWnd, hRgn, bErase );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	HDC CUser32::GetWindowDC( HWND hWnd )
	{
		_WINQ_FCONTEXT( "CUser32::GetWindowDC" );
		CCheckReturn< HDC, CCheckNonZero< HDC > >::TType Result;
		_WINQ_USESAPI( GetWindowDC );
		Result = Call< HDC, HWND >( pFunc, hWnd );
		return Result;
	}

	//--------------------------------------------------------------------------------
	int CUser32::GetWindowRgn( HWND hWnd, HRGN hRgn )
	{
		_WINQ_FCONTEXT( "CUser32::GetWindowRgn" );
		CCheckReturn< int, CTCheckFailureValue< int, ERROR > >::TType iResult;
		_WINQ_USESAPI( GetWindowRgn );
		iResult = Call< int, HWND, HRGN >( pFunc, hWnd, hRgn );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CUser32::GetWindowRgnBox( HWND hWnd, ::LPRECT lprc )
	{
		_WINQ_FCONTEXT( "CUser32::GetWindowRgnBox" );
		CCheckReturn< int, CTCheckFailureValue< int, ERROR > >::TType iResult;
		_WINQ_USESAPI( GetWindowRgnBox );
		iResult = Call< int, HWND, ::LPRECT >( pFunc, hWnd, lprc );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::GrayString( HDC hDC, HBRUSH hBrush, ::GRAYSTRINGPROC lpOutputFunc, LPARAM lpData, int nCount, int X, int Y, int nWidth, int nHeight )
	{
		_WINQ_FCONTEXT( "CUser32::GrayString" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GrayString );
		bResult = Call< BOOL, HDC, HBRUSH, ::GRAYSTRINGPROC, LPARAM, int, int, int, int >( pFunc, hDC, hBrush, lpOutputFunc, lpData, nCount, X, Y, nWidth, nHeight );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::InvalidateRect( HWND hWnd, CONST ::RECT* lpRect, BOOL bErase )
	{
		_WINQ_FCONTEXT( "CUser32::InvalidateRect" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( InvalidateRect );
		bResult = Call< BOOL, HWND, CONST ::RECT*, BOOL >( pFunc, hWnd, lpRect, bErase );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::InvalidateRgn( HWND hWnd, HRGN hRgn, BOOL bErase )
	{
		_WINQ_FCONTEXT( "CUser32::InvalidateRgn" );
		_WINQ_USESAPI( InvalidateRgn );
		return Call< BOOL, HWND, HRGN, BOOL >( pFunc, hWnd, hRgn, bErase );
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::LockWindowUpdate( HWND hWndLock )
	{
		_WINQ_FCONTEXT( "CUser32::LockWindowUpdate" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( LockWindowUpdate );
		bResult = Call< BOOL, HWND >( pFunc, hWndLock );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::PaintDesktop( HDC hdc )
	{
		_WINQ_FCONTEXT( "CUser32::PaintDesktop" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( PaintDesktop );
		bResult = Call< BOOL, HDC >( pFunc, hdc );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::RedrawWindow( HWND hWnd, CONST ::RECT* lprcUpdate, HRGN hrgnUpdate, UINT flags )
	{
		_WINQ_FCONTEXT( "CUser32::RedrawWindow" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( RedrawWindow );
		bResult = Call< BOOL, HWND, CONST ::RECT*, HRGN, UINT >( pFunc, hWnd, lprcUpdate, hrgnUpdate, flags );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CUser32::SetWindowRgn( HWND hWnd, HRGN hRgn, BOOL bRedraw )
	{
		_WINQ_FCONTEXT( "CUser32::SetWindowRgn" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		_WINQ_USESAPI( SetWindowRgn );
		iResult = Call< int, HWND, HRGN, BOOL >( pFunc, hWnd, hRgn, bRedraw );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::UpdateWindow( HWND hWnd )
	{
		_WINQ_FCONTEXT( "CUser32::UpdateWindow" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( UpdateWindow );
		bResult = Call< BOOL, HWND >( pFunc, hWnd );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::ValidateRect( HWND hWnd, CONST ::RECT* lpRect )
	{
		_WINQ_FCONTEXT( "CUser32::ValidateRect" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( ValidateRect );
		bResult = Call< BOOL, HWND, CONST ::RECT* >( pFunc, hWnd, lpRect );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::ValidateRgn( HWND hWnd, HRGN hRgn )
	{
		_WINQ_FCONTEXT( "CUser32::ValidateRgn" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( ValidateRgn );
		bResult = Call< BOOL, HWND, HRGN >( pFunc, hWnd, hRgn );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	HWND CUser32::WindowFromDC( HDC hDC )
	{
		_WINQ_FCONTEXT( "CUser32::WindowFromDC" );
		CCheckReturn< HWND, CCheckNonZero< HWND > >::TType Result;
		_WINQ_USESAPI( WindowFromDC );
		Result = Call< HWND, HDC >( pFunc, hDC );
		return Result;
	}

}//nsWinQAPI
