//WinQRectangle.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Rectangle functions

#include "WinQAPI/User32.h"
#include "../Source/SystemQOR/MSWindows/WinQAPI/include/ReturnCheck.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//NOTE: Many of these should not be used but rather replaced in the Rectangle class
	//as the implementations are trivial and not worth the cost of a DLL call
	//Performance warning should then be put on the ones to be avoided.

	//--------------------------------------------------------------------------------
	BOOL CUser32::CopyRect( ::LPRECT lprcDst, CONST ::RECT* lprcSrc )
	{
		_WINQ_FCONTEXT( "CUser32::CopyRect" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( CopyRect );
		bResult = Call< BOOL, ::LPRECT, CONST ::RECT* >( pFunc, lprcDst, lprcSrc );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::EqualRect( CONST ::RECT* lprc1, CONST ::RECT* lprc2 )
	{
		_WINQ_FCONTEXT( "CUser32::EqualRect" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( EqualRect );
		CKernel32::SetLastError( ERROR_SUCCESS );
		bResult = Call< BOOL, CONST ::RECT*, CONST ::RECT* >( pFunc, lprc1, lprc2 );
		DWORD dwError = CKernel32::GetLastError();
		if( dwError != ERROR_SUCCESS )
		{
			__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "EqualRect" ), 0 ));
		}
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::InflateRect( ::LPRECT lprc, int dx, int dy )
	{
		_WINQ_FCONTEXT( "CUser32::InflateRect" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( InflateRect );
		bResult = Call< BOOL, ::LPRECT, int, int >( pFunc, lprc, dx, dy );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::IntersectRect( ::LPRECT lprcDst, CONST ::RECT* lprcSrc1, CONST ::RECT* lprcSrc2 )
	{
		_WINQ_FCONTEXT( "CUser32::IntersectRect" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( IntersectRect );
		CKernel32::SetLastError( ERROR_SUCCESS );
		bResult = Call< BOOL, ::LPRECT, CONST ::RECT*, CONST ::RECT* >( pFunc, lprcDst, lprcSrc1, lprcSrc2 );
		DWORD dwError = CKernel32::GetLastError();
		if( dwError != ERROR_SUCCESS )
		{
			__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "IntersectRect" ), 0 ));
		}
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::IsRectEmpty( CONST ::RECT* lprc )
	{
		_WINQ_FCONTEXT( "CUser32::IsRectEmpty" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( IsRectEmpty );
		CKernel32::SetLastError( ERROR_SUCCESS );
		bResult = Call< BOOL, CONST ::RECT* >( pFunc, lprc );
		DWORD dwError = CKernel32::GetLastError();
		if( dwError != ERROR_SUCCESS )
		{
			__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "IsRectEmpty" ), 0 ));
		}
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::OffsetRect( ::LPRECT lprc, int dx, int dy )
	{
		_WINQ_FCONTEXT( "CUser32::OffsetRect" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( OffsetRect );
		bResult = Call< BOOL, ::LPRECT, int, int >( pFunc, lprc, dx, dy );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::PtInRect( CONST ::RECT* lprc, POINT pt )
	{
		_WINQ_FCONTEXT( "CUser32::PtInRect" );
		_WINQ_USESAPI( PtInRect );
		return Call< BOOL, CONST ::RECT*, POINT >( pFunc, lprc, pt );
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::SetRect( ::LPRECT lprc, int xLeft, int yTop, int xRight, int yBottom )
	{
		_WINQ_FCONTEXT( "CUser32::SetRect" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( SetRect );
		bResult = Call< BOOL, ::LPRECT, int, int, int, int >( pFunc, lprc, xLeft, yTop, xRight, yBottom );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::SetRectEmpty( ::LPRECT lprc )
	{
		_WINQ_FCONTEXT( "CUser32::SetRectEmpty" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( SetRectEmpty );
		bResult = Call< BOOL, ::LPRECT >( pFunc, lprc );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::SubtractRect( ::LPRECT lprcDst, CONST ::RECT* lprcSrc1, CONST ::RECT* lprcSrc2 )
	{
		_WINQ_FCONTEXT( "CUser32::SubtractRect" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( SubtractRect );
		CKernel32::SetLastError( ERROR_SUCCESS );
		bResult = Call< BOOL, ::LPRECT, CONST ::RECT*, CONST ::RECT* >( pFunc, lprcDst, lprcSrc1, lprcSrc2 );
		DWORD dwError = CKernel32::GetLastError();
		if( dwError != ERROR_SUCCESS )
		{
			__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "SubtractRect" ), 0 ));
		}
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::UnionRect( ::LPRECT lprcDst, CONST ::RECT* lprcSrc1, CONST ::RECT* lprcSrc2 )
	{
		_WINQ_FCONTEXT( "CUser32::UnionRect" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( UnionRect );
		CKernel32::SetLastError( ERROR_SUCCESS );
		bResult = Call< BOOL, ::LPRECT, CONST ::RECT*, CONST ::RECT* >( pFunc, lprcDst, lprcSrc1, lprcSrc2 );
		DWORD dwError = CKernel32::GetLastError();
		if( dwError != ERROR_SUCCESS )
		{
			__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "UnionRect" ), 0 ));
		}
		return bResult;
	}

}//nsWinQAPI

