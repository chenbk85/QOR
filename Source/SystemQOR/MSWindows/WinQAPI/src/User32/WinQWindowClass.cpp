//WinQWindowClass.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Window-Class functions

#include "WinQAPI/User32.h"
#include "../SystemQOR/MSWindows/WinQAPI/include/ReturnCheck.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//--------------------------------------------------------------------------------
	BOOL CUser32::GetClassInfo( HINSTANCE hInstance, LPCTSTR lpClassName, LPWNDCLASS lpWndClass )
	{
		_WINQ_FCONTEXT( "CUser32::GetClassInfo" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetClassInfo );
		bResult = Call< BOOL, HINSTANCE, LPCTSTR, LPWNDCLASS >( pFunc, hInstance, lpClassName, lpWndClass );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::GetClassInfoExA( HINSTANCE hinst, LPCSTR lpszClass, LPWNDCLASSEXA lpwcx )
	{
		_WINQ_FCONTEXT( "CUser32::GetClassInfoExA" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetClassInfoExA );
		bResult = Call< BOOL, HINSTANCE, LPCSTR, LPWNDCLASSEXA >( pFunc, hinst, lpszClass, lpwcx );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::GetClassInfoExW( HINSTANCE hinst, LPCWSTR lpszClass, LPWNDCLASSEXW lpwcx )
	{
		_WINQ_FCONTEXT( "CUser32::GetClassInfoExW" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetClassInfoExW );
		bResult = Call< BOOL, HINSTANCE, LPCWSTR, LPWNDCLASSEXW >( pFunc, hinst, lpszClass, lpwcx );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	ULONG_PTR CUser32::GetClassLongPtr( HWND hWnd, int nIndex )
	{
		_WINQ_FCONTEXT( "CUser32::GetClassLongPtr" );
		ULONG_PTR ulResult = 0;
		_WINQ_USESAPI( GetClassLongPtr );
		ulResult = Call< ULONG_PTR, HWND, int >( pFunc, hWnd, nIndex );
		if( ulResult == 0 )
		{
			DWORD dwError = CKernel32::GetLastError();
			if( dwError != ERROR_SUCCESS )
			{
				__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "GetClassLongPtr" ), 0 ));
			}
		}
		return ulResult;
	}

	//--------------------------------------------------------------------------------
	int CUser32::GetClassName( HWND hWnd, LPTSTR lpClassName, int nMaxCount )
	{
		_WINQ_FCONTEXT( "CUser32::GetClassName" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		_WINQ_USESAPIAW( GetClassName );
		iResult = Call< int, HWND, LPTSTR, int >( pFunc, hWnd, lpClassName, nMaxCount );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	WORD CUser32::GetClassWord( HWND hWnd, int nIndex )
	{
		_WINQ_FCONTEXT( "CUser32::GetClassWord" );
		WORD wResult = 0;
		_WINQ_USESAPI( GetClassWord );
		wResult = Call< WORD, HWND, int >( pFunc, hWnd, nIndex );
		if( wResult == 0 )
		{
			DWORD dwError = CKernel32::GetLastError();
			if( dwError != ERROR_SUCCESS )
			{
				__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "GetClassWord" ), 0 ));
			}
		}
		return wResult;
	}

	//--------------------------------------------------------------------------------
	LONG CUser32::GetWindowLong( HWND hWnd, int nIndex )
	{
		_WINQ_FCONTEXT( "CUser32::GetWindowLong" );
		LONG lResult = 0;
		_WINQ_USESAPI( GetWindowLong );
		lResult = Call< LONG, HWND, int >( pFunc, hWnd, nIndex );
		if( lResult == 0 )
		{
			DWORD dwError = CKernel32::GetLastError();
			if( dwError != ERROR_SUCCESS )
			{
				__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "GetWindowLong" ), 0 ));
			}
		}
		return lResult;
	}

	//--------------------------------------------------------------------------------
	ATOM CUser32::RegisterClass( CONST WNDCLASS* lpWndClass )
	{
		_WINQ_FCONTEXT( "CUser32::RegisterClass" );
		CCheckReturn< ATOM, CCheckNonZero< ATOM > >::TType Result;
		_WINQ_USESAPIAW( RegisterClass );
		Result = Call< ATOM, CONST WNDCLASS* >( pFunc, lpWndClass );
		return Result;
	}

	//--------------------------------------------------------------------------------
	ATOM CUser32::RegisterClassExA( CONST WNDCLASSEXA* lpwcx )
	{
		_WINQ_FCONTEXT( "CUser32::RegisterClassExA" );
		CCheckReturn< ATOM, CCheckNonZero< ATOM > >::TType Result;
		_WINQ_USESAPI( RegisterClassExA );
		Result = Call< ATOM, CONST WNDCLASSEXA* >( pFunc, lpwcx );
		return Result;
	}

	//--------------------------------------------------------------------------------
	ATOM CUser32::RegisterClassExW( CONST WNDCLASSEXW* lpwcx )
	{
		_WINQ_FCONTEXT( "CUser32::RegisterClassExW" );
		CCheckReturn< ATOM, CCheckNonZero< ATOM > >::TType Result;
		_WINQ_USESAPI( RegisterClassExW );
		Result = Call< ATOM, CONST WNDCLASSEXW* >( pFunc, lpwcx );
		return Result;
	}

	//--------------------------------------------------------------------------------
	ULONG_PTR CUser32::SetClassLongPtr( HWND hWnd, int nIndex, LONG_PTR dwNewLong )
	{
		_WINQ_FCONTEXT( "CUser32::SetClassLongPtr" );
		ULONG_PTR Result = 0;
		_WINQ_USESAPI( SetClassLongPtr );
		Result = Call< ULONG_PTR, HWND, int, LONG_PTR >( pFunc, hWnd, nIndex, dwNewLong );
		if( Result == 0 )
		{
			DWORD dwError = CKernel32::GetLastError();
			if( dwError != ERROR_SUCCESS )
			{
				__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "SetClassLongPtr" ), 0 ));
			}
		}
		return Result;
	}

	//--------------------------------------------------------------------------------
	WORD CUser32::SetClassWord( HWND hWnd, int nIndex, WORD wNewWord )
	{
		_WINQ_FCONTEXT( "CUser32::SetClassWord" );
		WORD wResult = 0;
		_WINQ_USESAPI( SetClassWord );
		wResult = Call< WORD, HWND, int, WORD >( pFunc, hWnd, nIndex, wNewWord );
		if( wResult == 0 )
		{
			DWORD dwError = CKernel32::GetLastError();
			if( dwError != ERROR_SUCCESS )
			{
				__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "SetClassWord" ), 0 ));
			}
		}	
		return wResult;
	}

	//--------------------------------------------------------------------------------
	LONG CUser32::SetWindowLong( HWND hWnd, int nIndex, LONG dwNewLong )
	{
		_WINQ_FCONTEXT( "CUser32::SetWindowLong" );
		LONG lResult = 0;
		_WINQ_USESAPIAW( SetWindowLong );
		CKernel32::SetLastError( ERROR_SUCCESS );
		lResult = Call< LONG, HWND, int, LONG >( pFunc, hWnd, nIndex, dwNewLong );
		if( lResult == 0 )
		{
			DWORD dwError = CKernel32::GetLastError();
			if( dwError != ERROR_SUCCESS )
			{
				__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "SetWindowLong" ), 0 ));
			}
		}
		return lResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::UnregisterClass( LPCTSTR lpClassName, HINSTANCE hInstance )
	{
		_WINQ_FCONTEXT( "CUser32::UnregisterClass" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( UnregisterClass );
		bResult = Call< BOOL, LPCTSTR, HINSTANCE >( pFunc, lpClassName, hInstance );
		return bResult;
	}

}//nsWinQAPI

