//WinQWndStationDesktop.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Window Station and Desktop functions

#include "WinQAPI/User32.h"
#include "../SystemQOR/MSWindows/WinQAPI/include/ReturnCheck.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//--------------------------------------------------------------------------------
	HDESK CUser32::OpenDesktop( LPCTSTR lpszDesktop, DWORD dwFlags, BOOL fInherit, ACCESS_MASK dwDesiredAccess )
	{
		_WINQ_FCONTEXT( "CUser32::OpenDesktop" );
		CCheckReturn< HDESK, CCheckNonZero< HDESK > >::TType Result;
		_WINQ_USESAPI( OpenDesktop );
		Result = Call< HDESK, LPCTSTR, DWORD, BOOL, ACCESS_MASK >( pFunc, lpszDesktop, dwFlags, fInherit, dwDesiredAccess );
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::CloseDesktop( HDESK hDesktop )
	{
		_WINQ_FCONTEXT( "CUser32::CloseDesktop" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( CloseDesktop );
		bResult = Call< BOOL, HDESK >( pFunc, hDesktop );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	HDESK CUser32::CreateDesktop( LPCTSTR lpszDesktop, LPCTSTR lpszDevice, ::LPDEVMODE pDevmode, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, ::LPSECURITY_ATTRIBUTES lpsa )
	{
		_WINQ_FCONTEXT( "CUser32::CreateDesktop" );
		CCheckReturn< HDESK, CCheckNonZero< HDESK > >::TType Result;
		_WINQ_USESAPI( CreateDesktop );
		Result = Call< HDESK, LPCTSTR, LPCTSTR, ::LPDEVMODE, DWORD, ACCESS_MASK, ::LPSECURITY_ATTRIBUTES >( pFunc, lpszDesktop, lpszDevice, pDevmode, dwFlags, dwDesiredAccess, lpsa );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HDESK CUser32::CreateDesktopEx( LPCTSTR lpszDesktop, LPCTSTR lpszDevice, ::LPDEVMODE pDevmode, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, ::LPSECURITY_ATTRIBUTES lpsa, ULONG ulHeapSize, PVOID pvoid )
	{
		_WINQ_FCONTEXT( "CUser32::CreateDesktopEx" );
		CCheckReturn< HDESK, CCheckNonZero< HDESK > >::TType Result;
		_WINQ_USESAPI( CreateDesktopEx );
		Result = Call< HDESK, LPCTSTR, LPCTSTR, ::LPDEVMODE, DWORD, ACCESS_MASK, ::LPSECURITY_ATTRIBUTES, ULONG, PVOID >( pFunc, lpszDesktop, lpszDevice, pDevmode, dwFlags, dwDesiredAccess, lpsa, ulHeapSize, pvoid );
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::EnumDesktops( HWINSTA hwinsta, DESKTOPENUMPROC lpEnumFunc, LPARAM lParam )
	{
		_WINQ_FCONTEXT( "CUser32::EnumDesktops" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( EnumDesktops );
		bResult = Call< BOOL, HWINSTA, DESKTOPENUMPROC, LPARAM >( pFunc, hwinsta, lpEnumFunc, lParam );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	HWINSTA CUser32::CreateWindowStation( LPCTSTR lpwinsta, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, ::LPSECURITY_ATTRIBUTES lpsa )
	{
		_WINQ_FCONTEXT( "CUser32::CreateWindowStation" );
		CCheckReturn< HWINSTA, CCheckNonZero< HWINSTA > >::TType Result;
		_WINQ_USESAPI( CreateWindowStation );
		Result = Call< HWINSTA, LPCTSTR, DWORD, ACCESS_MASK, ::LPSECURITY_ATTRIBUTES >( pFunc, lpwinsta, dwFlags, dwDesiredAccess, lpsa );
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::CloseWindowStation( HWINSTA hWinSta )
	{
		_WINQ_FCONTEXT( "CUser32::CloseWindowStation" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( CloseWindowStation );
		bResult = Call< BOOL, HWINSTA >( pFunc, hWinSta );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::EnumWindowStations( WINSTAENUMPROC lpEnumFunc, LPARAM lParam )
	{
		_WINQ_FCONTEXT( "CUser32::EnumWindowStations" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( EnumWindowStations );
		bResult = Call< BOOL, WINSTAENUMPROC, LPARAM >( pFunc, lpEnumFunc, lParam );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	HWINSTA CUser32::GetProcessWindowStation(void)
	{
		_WINQ_FCONTEXT( "CUser32::GetProcessWindowStation" );
		CCheckReturn< HWINSTA, CCheckNonZero< HWINSTA > >::TType Result;
		_WINQ_USESAPI( GetProcessWindowStation );
		Result = Call< HWINSTA >( pFunc );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HDESK CUser32::GetThreadDesktop( DWORD dwThreadId )
	{
		_WINQ_FCONTEXT( "CUser32::GetThreadDesktop" );
		CCheckReturn< HDESK, CCheckNonZero< HDESK > >::TType Result;
		_WINQ_USESAPI( GetThreadDesktop );
		Result = Call< HDESK, DWORD >( pFunc, dwThreadId );
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::GetUserObjectInformation( HANDLE hObj, int nIndex, PVOID pvInfo, DWORD nLength, LPDWORD lpnLengthNeeded )
	{
		_WINQ_FCONTEXT( "CUser32::GetUserObjectInformation" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( GetUserObjectInformation );
		bResult = Call< BOOL, HANDLE, int, PVOID, DWORD, LPDWORD >( pFunc, hObj, nIndex, pvInfo, nLength, lpnLengthNeeded );
		if( bResult == FALSE && ( lpnLengthNeeded == 0 || *lpnLengthNeeded == 0 ) )
		{			
			__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "GetUserObjectInformation" ), 0 ));
		}
		return bResult;
	}

	//--------------------------------------------------------------------------------
	HDESK CUser32::OpenInputDesktop( DWORD dwFlags, BOOL fInherit, ACCESS_MASK dwDesiredAccess )
	{
		_WINQ_FCONTEXT( "CUser32::OpenInputDesktop" );
		CCheckReturn< HDESK, CCheckNonZero< HDESK > >::TType Result;
		_WINQ_USESAPI( OpenInputDesktop );
		Result = Call< HDESK, DWORD, BOOL, ACCESS_MASK >( pFunc, dwFlags, fInherit, dwDesiredAccess );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HWINSTA CUser32::OpenWindowStation( LPTSTR lpszWinSta, BOOL fInherit, ACCESS_MASK dwDesiredAccess )
	{
		_WINQ_FCONTEXT( "CUser32::OpenWindowStation" );
		CCheckReturn< HWINSTA, CCheckNonZero< HWINSTA > >::TType Result;
		_WINQ_USESAPI( OpenWindowStation );
		Result = Call< HWINSTA, LPTSTR, BOOL, ACCESS_MASK >( pFunc, lpszWinSta, fInherit, dwDesiredAccess );
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::SetProcessWindowStation( HWINSTA hWinSta )
	{
		_WINQ_FCONTEXT( "CUser32::SetProcessWindowStation" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( SetProcessWindowStation );
		bResult = Call< BOOL, HWINSTA >( pFunc, hWinSta );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::SetThreadDesktop( HDESK hDesktop )
	{
		_WINQ_FCONTEXT( "CUser32::SetThreadDesktop" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( SetThreadDesktop );
		bResult = Call< BOOL, HDESK >( pFunc, hDesktop );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::SetUserObjectInformation( HANDLE hObj, int nIndex, PVOID pvInfo, DWORD nLength )
	{
		_WINQ_FCONTEXT( "CUser32::SetUserObjectInformation" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( SetUserObjectInformation );
		bResult = Call< BOOL, HANDLE, int, PVOID, DWORD >( pFunc, hObj, nIndex, pvInfo, nLength );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::SwitchDesktop( HDESK hDesktop )
	{
		_WINQ_FCONTEXT( "CUser32::SwitchDesktop" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( SwitchDesktop );
		bResult = Call< BOOL, HDESK >( pFunc, hDesktop );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::EnumDesktopWindows( HDESK hDesktop, ::WNDENUMPROC lpfn, LPARAM lParam )
	{
		_WINQ_FCONTEXT( "CUser32::EnumDesktopWindows" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( EnumDesktopWindows );
		bResult = Call< BOOL, HDESK, ::WNDENUMPROC, LPARAM >( pFunc, hDesktop, lpfn, lParam );
		return bResult;
	}

}//nsWinQAPI

