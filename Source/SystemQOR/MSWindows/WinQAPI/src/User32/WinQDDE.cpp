//WinQDDE.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Dynamic Data Exchange functions

#include "WinQAPI/User32.h"
#include "../Source/SystemQOR/MSWindows/WinQAPI/include/ReturnCheck.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//--------------------------------------------------------------------------------
	BOOL CUser32::DdeAbandonTransaction( DWORD idInst, HCONV hConv, DWORD idTransaction ) const
	{
		_WINQ_FCONTEXT( "CUser32::DdeAbandonTransaction" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( DdeAbandonTransaction );
		bResult = Call< BOOL, DWORD, HCONV, DWORD >( pFunc, idInst, hConv, idTransaction );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	LPBYTE CUser32::DdeAccessData( HDDEDATA hData, LPDWORD pcbDataSize, DWORD __WINQAPI_ERR_ONLY( idInst ) ) const
	{
		_WINQ_FCONTEXT( "CUser32::DdeAccessData" );
		CCheckReturn< LPBYTE, CCheckNonZero< LPBYTE > >::TType pResult;
		_WINQ_USESAPI( DdeAccessData );
		pResult = Call< LPBYTE, HDDEDATA, LPDWORD >( pFunc, hData, pcbDataSize );
		return pResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::DdeUnaccessData( HDDEDATA hData, DWORD __WINQAPI_ERR_ONLY( idInst ) ) const
	{
		_WINQ_FCONTEXT( "CUser32::DdeUnaccessData" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( DdeUnaccessData );
		bResult = Call< BOOL, HDDEDATA >( pFunc, hData );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	HDDEDATA CUser32::DdeAddData( HDDEDATA hData, LPBYTE pSrc, DWORD cb, DWORD cbOff, DWORD __WINQAPI_ERR_ONLY( idInst ) ) const
	{
		_WINQ_FCONTEXT( "CUser32::DdeAddData" );
		CCheckReturn< HDDEDATA, CCheckNonZero< HDDEDATA > >::TType Result;
		_WINQ_USESAPI( DdeAddData );
		Result = Call< HDDEDATA, HDDEDATA, LPBYTE, DWORD, DWORD >( pFunc, hData, pSrc, cb, cbOff );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HDDEDATA CUser32::DdeClientTransaction( LPBYTE pData, DWORD cbData, HCONV hConv, HSZ hszItem, UINT wFmt, UINT wType, DWORD dwTimeout, LPDWORD pdwResult, DWORD __WINQAPI_ERR_ONLY( idInst ) ) const
	{
		_WINQ_FCONTEXT( "CUser32::DdeClientTransaction" );
		CCheckReturn< HDDEDATA, CCheckNonZero< HDDEDATA > >::TType Result;
		_WINQ_USESAPI( DdeClientTransaction );
		Result = Call< HDDEDATA, LPBYTE, DWORD, HCONV, HSZ, UINT, UINT, DWORD, LPDWORD >( pFunc, pData, cbData, hConv, hszItem, wFmt, wType, dwTimeout, pdwResult );
		return Result;
	}

	//--------------------------------------------------------------------------------
	int CUser32::DdeCmpStringHandles( HSZ hsz1, HSZ hsz2 ) const
	{
		_WINQ_FCONTEXT( "CUser32::DdeCmpStringHandles" );
		_WINQ_USESAPI( DdeCmpStringHandles );	
		return Call< int, HSZ, HSZ >( pFunc, hsz1, hsz2 );
	}

	//--------------------------------------------------------------------------------
	HCONV CUser32::DdeConnect( DWORD idInst, HSZ hszService, HSZ hszTopic, PCONVCONTEXT pCC ) const
	{	
		_WINQ_FCONTEXT( "CUser32::DdeConnect" );
		CCheckReturn< HCONV, CCheckNonZero< HCONV > >::TType Result;
		_WINQ_USESAPI( DdeConnect );
		Result = Call< HCONV, DWORD, HSZ, HSZ, PCONVCONTEXT >( pFunc, idInst, hszService, hszTopic, pCC );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HCONVLIST CUser32::DdeConnectList( DWORD idInst, HSZ hszService, HSZ hszTopic, HCONVLIST hConvList, PCONVCONTEXT pCC ) const
	{
		_WINQ_FCONTEXT( "CUser32::DdeConnectList" );
		CCheckReturn< HCONVLIST, CCheckNonZero< HCONVLIST > >::TType Result;
		_WINQ_USESAPI( DdeConnectList );
		Result = Call< HCONVLIST, DWORD, HSZ, HSZ, HCONVLIST, PCONVCONTEXT >( pFunc, idInst, hszService, hszTopic, hConvList, pCC );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HDDEDATA CUser32::DdeCreateDataHandle( DWORD idInst, LPBYTE pSrc, DWORD cb, DWORD cbOff, HSZ hszItem, UINT wFmt, UINT afCmd ) const
	{
		_WINQ_FCONTEXT( "CUser32::DdeCreateDataHandle" );
		CCheckReturn< HDDEDATA, CCheckNonZero< HDDEDATA > >::TType Result;
		_WINQ_USESAPI( DdeCreateDataHandle );
		Result = Call< HDDEDATA, DWORD, LPBYTE, DWORD, DWORD, HSZ, UINT, UINT >( pFunc, idInst, pSrc, cb, cbOff, hszItem, wFmt, afCmd );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HSZ CUser32::mxDdeCreateStringHandle( DWORD idInst, LPTSTR psz, int iCodePage ) const
	{
		_WINQ_FCONTEXT( "CUser32::mxDdeCreateStringHandle" );
		CCheckReturn< HSZ, CCheckNonZero< HSZ > >::TType Result;
		_WINQ_USESAPIAW( DdeCreateStringHandle );
		Result = Call< HSZ, DWORD, LPTSTR, int >( pFunc, idInst, psz, iCodePage );
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::DdeDisconnect( HCONV hConv, DWORD __WINQAPI_ERR_ONLY( idInst ) ) const
	{
		_WINQ_FCONTEXT( "CUser32::DdeDisconnect" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( DdeDisconnect );
		bResult = Call< BOOL, HCONV >( pFunc, hConv );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::DdeDisconnectList( HCONVLIST hConvList, DWORD __WINQAPI_ERR_ONLY( idInst ) ) const
	{
		_WINQ_FCONTEXT( "CUser32::DdeDisconnectList" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( DdeDisconnectList );
		bResult = Call< BOOL, HCONVLIST >( pFunc, hConvList );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::DdeEnableCallback( DWORD idInst, HCONV hConv, UINT wCmd ) const
	{
		_WINQ_FCONTEXT( "CUser32::DdeEnableCallback" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( DdeEnableCallback );
		bResult = Call< BOOL, DWORD, HCONV, UINT >( pFunc, idInst, hConv, wCmd );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::DdeFreeDataHandle( HDDEDATA hData, DWORD __WINQAPI_ERR_ONLY( idInst ) ) const
	{
		_WINQ_FCONTEXT( "CUser32::DdeFreeDataHandle" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( DdeFreeDataHandle );
		bResult = Call< BOOL, HDDEDATA >( pFunc, hData );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::DdeFreeStringHandle( DWORD idInst, HSZ hsz ) const
	{
		_WINQ_FCONTEXT( "CUser32::DdeFreeStringHandle" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( DdeFreeStringHandle );
		bResult = Call< BOOL, DWORD, HSZ >( pFunc, idInst, hsz );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CUser32::DdeGetData( HDDEDATA hData, LPBYTE pDst, DWORD cbMax, DWORD cbOff, DWORD __WINQAPI_ERR_ONLY( idInst ) ) const
	{
		_WINQ_FCONTEXT( "CUser32::DdeGetData" );
		CCheckReturn< DWORD, CCheckNonZero< DWORD > >::TType dwResult;
		_WINQ_USESAPI( DdeGetData );
		dwResult = Call< DWORD, HDDEDATA, LPBYTE, DWORD, DWORD >( pFunc, hData, pDst, cbMax, cbOff );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	UINT CUser32::DdeGetLastError( DWORD idInst ) const
	{
		_WINQ_FCONTEXT( "CUser32::DdeGetLastError" );
		_WINQ_USESAPI( DdeGetLastError );
		return Call< UINT, DWORD >( pFunc, idInst );
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::DdeImpersonateClient( HCONV hConv, DWORD __WINQAPI_ERR_ONLY( idInst ) ) const
	{
		_WINQ_FCONTEXT( "CUser32::DdeImpersonateClient" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( DdeImpersonateClient );
		bResult = Call< BOOL, HCONV >( pFunc, hConv );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	UINT CUser32::DdeInitialize( LPDWORD pidInst, PFNCALLBACK pfnCallback, DWORD afCmd, DWORD ulRes ) const
	{
		_WINQ_FCONTEXT( "CUser32::DdeInitialize" );
		UINT uiResult = 0;
		_WINQ_USESAPIAW( DdeInitialize );
		uiResult = Call< UINT, LPDWORD, PFNCALLBACK, DWORD, DWORD >( pFunc, pidInst, pfnCallback, afCmd, ulRes );
		if( uiResult != DMLERR_NO_ERROR )
		{
			switch ( uiResult )
			{
			case DMLERR_DLL_USAGE:
				__WINQAPI_CONT_ERROR(( DDEML_API_ERROR, _T( "DdeInitialize" ), _T( "An application initialized as APPCLASS_MONITOR has attempted to perform a Dynamic Data Exchange (DDE) transaction, or an application initialized as APPCMD_CLIENTONLY has attempted to perform server transactions." ), 0 ));
				break;
			case DMLERR_INVALIDPARAMETER:
				__WINQAPI_CONT_ERROR(( DDEML_API_ERROR, _T( "DdeInitialize" ), _T( "A parameter failed to be validated by the DDEML. Some of the possible causes follow: \nThe application used a data handle initialized with a different item name handle than was required by the transaction.\nThe application used a data handle that was initialized with a different clipboard data format than was required by the transaction.\nThe application used a client-side conversation handle with a server-side function or vice versa.\nThe application used a freed data handle or string handle.\nMore than one instance of the application used the same object." ), 0 ));
				break;
			case DMLERR_SYS_ERROR:
				__WINQAPI_CONT_ERROR(( DDEML_API_ERROR, _T( "DdeInitialize" ), _T( "An internal error has occurred in the DDEML." ), 0 ));
				break;
			default:
				__WINQAPI_CONT_ERROR(( DDEML_API_ERROR, _T( "DdeInitialize" ), _T( "Unknown error." ), 0 ));
				break;
			}			
		}
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::DdeKeepStringHandle( DWORD idInst, HSZ hsz ) const
	{
		_WINQ_FCONTEXT( "CUser32::DdeKeepStringHandle" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( DdeKeepStringHandle );
		bResult = Call< BOOL, DWORD, HSZ >( pFunc, idInst, hsz );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	HDDEDATA CUser32::DdeNameService( DWORD idInst, UINT hsz1, UINT hsz2, UINT afCmd ) const
	{
		_WINQ_FCONTEXT( "CUser32::DdeNameService" );
		CCheckReturn< HDDEDATA,  CCheckNonZero< HDDEDATA > >::TType Result;
		_WINQ_USESAPI( DdeNameService );
		Result = Call< HDDEDATA, DWORD, UINT, UINT, UINT >( pFunc, idInst, hsz1, hsz2, afCmd );
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::DdePostAdvise( DWORD idInst, HSZ hszTopic, HSZ hszItem ) const
	{
		_WINQ_FCONTEXT( "CUser32::DdePostAdvise" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( DdePostAdvise );
		bResult = Call< BOOL, DWORD, HSZ, HSZ >( pFunc, idInst, hszTopic, hszItem );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	UINT CUser32::DdeQueryConvInfo( HCONV hConv, DWORD idTransaction, PCONVINFO pConvInfo, DWORD __WINQAPI_ERR_ONLY( idInst ) ) const
	{
		_WINQ_FCONTEXT( "CUser32::DdeQueryConvInfo" );
		CCheckReturn< UINT, CCheckNonZero< UINT > >::TType uiResult;
		_WINQ_USESAPIAW( DdeQueryConvInfo );
		uiResult = Call< UINT, HCONV, DWORD, PCONVINFO >( pFunc, hConv, idTransaction, pConvInfo );
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	HCONV CUser32::DdeQueryNextServer( HCONVLIST hConvList, HCONV hConvPrev ) const
	{
		_WINQ_FCONTEXT( "CUser32::DdeQueryNextServer" );
		_WINQ_USESAPI( DdeQueryNextServer );
		return Call< HCONV, HCONVLIST, HCONV >( pFunc, hConvList, hConvPrev );
	}

	//--------------------------------------------------------------------------------
	DWORD CUser32::DdeQueryString( DWORD idInst, HSZ hsz, LPTSTR psz, DWORD cchMax, int iCodePage ) const
	{
		_WINQ_FCONTEXT( "CUser32::DdeQueryString" );
		CCheckReturn< DWORD, CCheckNonZero< DWORD > >::TType dwResult;
		_WINQ_USESAPI( DdeQueryString );
		dwResult = Call< DWORD, DWORD, HSZ, LPTSTR, DWORD, int >( pFunc, idInst, hsz, psz, cchMax, iCodePage );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	HCONV CUser32::DdeReconnect( HCONV hConv, DWORD __WINQAPI_ERR_ONLY( idInst ) ) const
	{
		_WINQ_FCONTEXT( "CUser32::DdeReconnect" );
		CCheckReturn< HCONV, CCheckNonZero< HCONV > >::TType Result;
		_WINQ_USESAPI( DdeReconnect );
		Result = Call< HCONV, HCONV >( pFunc, hConv );
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::DdeSetQualityOfService( HWND hwndClient, const SECURITY_QUALITY_OF_SERVICE* pqosNew, PSECURITY_QUALITY_OF_SERVICE pqosPrev ) const
	{
		_WINQ_FCONTEXT( "CUser32::DdeSetQualityOfService" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( DdeSetQualityOfService );
		bResult = Call< BOOL, HWND, const SECURITY_QUALITY_OF_SERVICE*, PSECURITY_QUALITY_OF_SERVICE >( pFunc, hwndClient, pqosNew, pqosPrev );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::DdeSetUserHandle( HCONV hConv, DWORD id, DWORD_PTR hUser, DWORD __WINQAPI_ERR_ONLY( idInst ) ) const
	{
		_WINQ_FCONTEXT( "CUser32::DdeSetUserHandle" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( DdeSetUserHandle );
		bResult = Call< BOOL, HCONV, DWORD, DWORD_PTR >( pFunc, hConv, id, hUser );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::DdeUninitialize( DWORD idInst ) const
	{
		_WINQ_FCONTEXT( "CUser32::DdeUninitialize" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( DdeUninitialize );
		bResult = Call< BOOL, DWORD >( pFunc, idInst );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::FreeDDElParam( UINT msg, LPARAM lParam ) const
	{
		_WINQ_FCONTEXT( "CUser32::FreeDDElParam" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( FreeDDElParam );
		bResult = Call< BOOL, UINT, LPARAM >( pFunc, msg, lParam );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	LPARAM CUser32::PackDDElParam( UINT msg, UINT_PTR uiLo, UINT_PTR uiHi ) const
	{
		_WINQ_FCONTEXT( "CUser32::PackDDElParam" );
		_WINQ_USESAPI( PackDDElParam );
		return Call< LPARAM, UINT, UINT_PTR, UINT_PTR >( pFunc, msg, uiLo, uiHi );
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::ImpersonateDdeClientWindow( HWND hWndClient, HWND hWndServer ) const
	{
		_WINQ_FCONTEXT( "CUser32::ImpersonateDdeClientWindow" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( ImpersonateDdeClientWindow );
		bResult = Call< BOOL, HWND, HWND >( pFunc, hWndClient, hWndServer );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	LPARAM CUser32::ReuseDDElParam( LPARAM lParam, UINT msgIn, UINT msgOut, UINT_PTR uiLo, UINT_PTR uiHi ) const
	{
		_WINQ_FCONTEXT( "CUser32::ReuseDDElParam" );
		_WINQ_USESAPI( ReuseDDElParam );
		return Call< LPARAM, LPARAM, UINT, UINT, UINT_PTR, UINT_PTR >( pFunc, lParam, msgIn, msgOut, uiLo, uiHi );
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::UnpackDDElParam( UINT msg, LPARAM lParam, PUINT_PTR puiLo, PUINT_PTR puiHi ) const
	{
		_WINQ_FCONTEXT( "CUser32::UnpackDDElParam" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( UnpackDDElParam );
		bResult = Call< BOOL, UINT, LPARAM, PUINT_PTR, PUINT_PTR >( pFunc, msg, lParam, puiLo, puiHi );
		return bResult;
	}

}//nsWinQAPI
