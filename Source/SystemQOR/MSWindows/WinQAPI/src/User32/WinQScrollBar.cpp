//WinQScrollBar.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//ScrollBar functions

#include "WinQAPI/User32.h"
#include "../Source/SystemQOR/MSWindows/WinQAPI/include/ReturnCheck.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//--------------------------------------------------------------------------------
	BOOL CUser32::EnableScrollBar( HWND hWnd, UINT wSBFlags, UINT wArrows )
	{
		_WINQ_FCONTEXT( "CUser32::EnableScrollBar" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( EnableScrollBar );
		bResult = Call< BOOL, HWND, UINT, UINT >( pFunc, hWnd, wSBFlags, wArrows );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::GetScrollBarInfo( HWND hwnd, LONG idObject, ::PSCROLLBARINFO psbi )
	{
		_WINQ_FCONTEXT( "CUser32::GetScrollBarInfo" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetScrollBarInfo );
		bResult = Call< BOOL, HWND, LONG, ::PSCROLLBARINFO >( pFunc, hwnd, idObject, psbi );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::GetScrollInfo( HWND hwnd, int fnBar, ::LPSCROLLINFO lpsi )
	{
		_WINQ_FCONTEXT( "CUser32::GetScrollInfo" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetScrollInfo );
		bResult = Call< BOOL, HWND, int, ::LPSCROLLINFO >( pFunc, hwnd, fnBar, lpsi );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CUser32::GetScrollPos( HWND hWnd, int nBar )
	{
		_WINQ_FCONTEXT( "CUser32::GetScrollPos" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		_WINQ_USESAPI( GetScrollPos );
		iResult = Call< int, HWND, int >( pFunc, hWnd, nBar );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::GetScrollRange( HWND hWnd, int nBar, LPINT lpMinPos, LPINT lpMaxPos )
	{
		_WINQ_FCONTEXT( "CUser32::GetScrollRange" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetScrollRange );
		bResult = Call< BOOL, HWND, int, LPINT, LPINT >( pFunc, hWnd, nBar, lpMinPos, lpMaxPos );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::ScrollDC( HDC hDC, int dx, int dy, const ::RECT *lprcScroll, const ::RECT *lprcClip, HRGN hrgnUpdate, ::LPRECT lprcUpdate )
	{
		_WINQ_FCONTEXT( "CUser32::ScrollDC" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( ScrollDC );
		bResult = Call< BOOL, HDC, int, int, const ::RECT*, const ::RECT*, HRGN, ::LPRECT >( pFunc, hDC, dx, dy, lprcScroll, lprcClip, hrgnUpdate, lprcUpdate );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::ScrollWindow( HWND hWnd, int XAmount, int YAmount, const ::RECT* lpRect, const ::RECT* lpClipRect )
	{
		_WINQ_FCONTEXT( "CUser32::ScrollWindow" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( ScrollWindow );
		bResult = Call< BOOL, HWND, int, int, const ::RECT*, const ::RECT* >( pFunc, hWnd, XAmount, YAmount, lpRect, lpClipRect );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CUser32::ScrollWindowEx( HWND hWnd, int dx, int dy, const ::RECT* prcScroll, const ::RECT* prcClip, HRGN hrgnUpdate, ::LPRECT prcUpdate, UINT flags )
	{
		_WINQ_FCONTEXT( "CUser32::ScrollWindowEx" );
		CCheckReturn< int, CTCheckFailureValue< int, ERROR > >::TType iResult;
		_WINQ_USESAPI( ScrollWindowEx );
		iResult = Call< int, HWND, int, int, const ::RECT*, const ::RECT*, HRGN, ::LPRECT, UINT >( pFunc, hWnd, dx, dy, prcScroll, prcClip, hrgnUpdate, prcUpdate, flags );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CUser32::SetScrollInfo( HWND hwnd, int fnBar, ::LPCSCROLLINFO lpsi, BOOL fRedraw )
	{
		_WINQ_FCONTEXT( "CUser32::SetScrollInfo" );
		_WINQ_USESAPI( SetScrollInfo );
		return Call< int, HWND, int, ::LPCSCROLLINFO, BOOL >( pFunc, hwnd, fnBar, lpsi, fRedraw );
	}

	//--------------------------------------------------------------------------------
	int CUser32::SetScrollPos( HWND hWnd, int nBar, int nPos, BOOL bRedraw )
	{
		_WINQ_FCONTEXT( "CUser32::SetScrollPos" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		_WINQ_USESAPI( SetScrollPos );
		iResult = Call< int, HWND, int, int, BOOL >( pFunc, hWnd, nBar, nPos, bRedraw );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::SetScrollRange( HWND hWnd, int nBar, int nMinPos, int nMaxPos, BOOL bRedraw )
	{
		_WINQ_FCONTEXT( "CUser32::SetScrollRange" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( SetScrollRange );
		bResult = Call< BOOL, HWND, int, int, int, BOOL >( pFunc, hWnd, nBar, nMinPos, nMaxPos, bRedraw );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::ShowScrollBar( HWND hWnd, int wBar, BOOL bShow )
	{
		_WINQ_FCONTEXT( "CUser32::ShowScrollBar" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( ShowScrollBar );
		bResult = Call< BOOL, HWND, int, BOOL >( pFunc, hWnd, wBar, bShow );
		return bResult;
	}

}//nsWinQAPI
