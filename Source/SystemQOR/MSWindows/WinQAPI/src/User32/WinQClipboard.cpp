//WinQClipboard.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Clipboard functions

#include "WinQAPI/User32.h"
#include "../Source/SystemQOR/MSWindows/WinQAPI/include/ReturnCheck.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//--------------------------------------------------------------------------------
	BOOL CUser32::AddClipboardFormatListener( HWND hwnd )
	{
		_WINQ_FCONTEXT( "CUser32::AddClipboardFormatListener" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( AddClipboardFormatListener );
		bResult = Call< BOOL, HWND >( pFunc, hwnd );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::ChangeClipboardChain( HWND hWndRemove, HWND hWndNewNext )
	{
		_WINQ_FCONTEXT( "CUser32::ChangeClipboardChain" );
		BOOL bResult = FALSE;	
		_WINQ_USESAPI( ChangeClipboardChain );
		bResult = Call< BOOL, HWND, HWND >( pFunc, hWndRemove, hWndNewNext );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::CloseClipboard()
	{
		_WINQ_FCONTEXT( "CUser32::CloseClipboard" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( CloseClipboard );
		bResult = Call< BOOL >( pFunc );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CUser32::CountClipboardFormats()
	{
		_WINQ_FCONTEXT( "CUser32::CountClipboardFormats" );	
		int iResult = 0;
		_WINQ_USESAPI( CountClipboardFormats );
		iResult = Call< int >( pFunc );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::EmptyClipboard(void)
	{
		_WINQ_FCONTEXT( "CUser32::EmptyClipboard" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( EmptyClipboard );
		bResult = Call< BOOL >( pFunc );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	UINT CUser32::EnumClipboardFormats( UINT format )
	{
		_WINQ_FCONTEXT( "CUser32::EnumClipboardFormats" );	
		UINT uiResult = 0;
		_WINQ_USESAPI( EnumClipboardFormats );
		uiResult = Call< UINT, UINT >( pFunc, format );
		if( uiResult == 0 )
		{			
			DWORD dwError = CKernel32::GetLastError();
			if( dwError != ERROR_SUCCESS )
			{
				__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "EnumClipboardFormats" ), 0 ));
			}
		}
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	HANDLE CUser32::GetClipboardData( UINT uFormat )
	{
		_WINQ_FCONTEXT( "CUser32::GetClipboardData" );	
		CCheckReturn< HANDLE, CHandleNullCheck< > >::TType Result;
		_WINQ_USESAPI( GetClipboardData );
		Result = Call< HANDLE, UINT >( pFunc, uFormat );
		return Result;
	}

	//--------------------------------------------------------------------------------
	int CUser32::GetClipboardFormatName( UINT format, LPTSTR lpszFormatName, int cchMaxCount )
	{
		_WINQ_FCONTEXT( "CUser32::GetClipboardFormatName" );	
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		_WINQ_USESAPI( GetClipboardFormatName );
		iResult = Call< int, UINT, LPTSTR, int >( pFunc, format, lpszFormatName, cchMaxCount );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	HWND CUser32::GetClipboardOwner(void)
	{
		_WINQ_FCONTEXT( "CUser32::GetClipboardOwner" );	
		HWND Result = 0;
		_WINQ_USESAPI( GetClipboardOwner );
		Result = Call< HWND >( pFunc );
		if( Result == 0 )
		{
			DWORD dwError = CKernel32::GetLastError();
			if( dwError != ERROR_SUCCESS )
			{
				__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "GetClipboardOwner" ), 0 ));
			}
			else
			{
				__WINQAPI_WARNING(( API_RETURNED_NO_DATA, _T( "GetClipboardOwner" ), 0 ));
			}
		}
		return Result;
	}

	//--------------------------------------------------------------------------------
	DWORD CUser32::GetClipboardSequenceNumber(void)
	{
		_WINQ_FCONTEXT( "CUser32::GetClipboardSequenceNumber" );	
		CCheckReturn< DWORD, CCheckNonZero< DWORD, nsCodeQOR::CError::ERR_LVL_WARNING, API_RETURNED_NO_DATA > >::TType dwResult;
		_WINQ_USESAPI( GetClipboardSequenceNumber );
		dwResult = Call< DWORD >( pFunc );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	HWND CUser32::GetClipboardViewer(void)
	{
		_WINQ_FCONTEXT( "CUser32::GetClipboardViewer" );
		CCheckReturn< HWND, CCheckNonZero< HWND, nsCodeQOR::CError::ERR_LVL_WARNING, API_RETURNED_NO_DATA > >::TType Result;
		_WINQ_USESAPI( GetClipboardViewer );
		Result = Call< HWND >( pFunc );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HWND CUser32::GetOpenClipboardWindow()
	{
		_WINQ_FCONTEXT( "CUser32::GetOpenClipboardWindow" );
		CCheckReturn< HWND, CCheckNonZero< HWND, nsCodeQOR::CError::ERR_LVL_WARNING, API_RETURNED_NO_DATA > >::TType Result;
		_WINQ_USESAPI( GetOpenClipboardWindow );
		Result = Call< HWND >( pFunc );
		return Result;
	}

	//--------------------------------------------------------------------------------
	int CUser32::GetPriorityClipboardFormat( UINT* paFormatPriorityList, int cFormats )
	{
		_WINQ_FCONTEXT( "CUser32::GetPriorityClipboardFormat" );
		CCheckReturn< int, CTCheckFailureValue< int, -1 > >::TType iResult;
		_WINQ_USESAPI( GetPriorityClipboardFormat );
		iResult = Call< int, UINT*, int >( pFunc, paFormatPriorityList, cFormats );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::GetUpdatedClipboardFormats( PUINT lpuiFormats, UINT cFormats, PUINT pcFormatsOut )
	{
		_WINQ_FCONTEXT( "CUser32::GetUpdatedClipboardFormats" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetUpdatedClipboardFormats );
		bResult = Call< BOOL, PUINT, UINT, PUINT >( pFunc, lpuiFormats, cFormats, pcFormatsOut );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::IsClipboardFormatAvailable( UINT format )
	{
		_WINQ_FCONTEXT( "CUser32::IsClipboardFormatAvailable" );	
		BOOL bResult = FALSE;
		_WINQ_USESAPI( IsClipboardFormatAvailable );
		bResult = Call< BOOL, UINT >( pFunc, format );
		if( bResult == FALSE )
		{
			DWORD dwError = CKernel32::GetLastError();
			if( dwError != ERROR_SUCCESS )
			{
				__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "IsClipboardFormatAvailable" ), 0 ));
			}
		}
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::OpenClipboard( HWND hWndNewOwner )
	{
		_WINQ_FCONTEXT( "CUser32::OpenClipboard" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( OpenClipboard );
		bResult = Call< BOOL, HWND >( pFunc, hWndNewOwner );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	UINT CUser32::RegisterClipboardFormat( LPCTSTR lpszFormat )
	{
		_WINQ_FCONTEXT( "CUser32::RegisterClipboardFormat" );	
		CCheckReturn< UINT, CCheckNonZero< UINT > >::TType uiResult;
		_WINQ_USESAPI( RegisterClipboardFormat );
		uiResult = Call< UINT, LPCTSTR >( pFunc, lpszFormat );
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::RemoveClipboardFormatListener( HWND hwnd )
	{
		_WINQ_FCONTEXT( "CUser32::RemoveClipboardFormatListener" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( RemoveClipboardFormatListener );
		bResult = Call< BOOL, HWND >( pFunc, hwnd );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	HANDLE CUser32::SetClipboardData( UINT uFormat, HANDLE hMem )
	{
		_WINQ_FCONTEXT( "CUser32::SetClipboardData" );	
		CCheckReturn< HANDLE, CHandleNullCheck< > >::TType Result;
		_WINQ_USESAPI( SetClipboardData );
		Result = Call< HANDLE, UINT, HANDLE >( pFunc, uFormat, hMem );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HWND CUser32::SetClipboardViewer( HWND hWndNewViewer )
	{
		_WINQ_FCONTEXT( "CUser32::SetClipboardViewer" );	
		HWND Result = 0;
		_WINQ_USESAPI( SetClipboardViewer );
		Result = Call< HWND, HWND >( pFunc, hWndNewViewer );
		if( Result == 0 )
		{
			DWORD dwError = CKernel32::GetLastError();
			if( dwError != ERROR_SUCCESS )
			{
				__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "SetClipboardViewer" ), 0 ));
			}
		}
		return Result;
	}

}//nsWinQAPI
