//WinQIcon.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Icon functions

#include "WinQAPI/User32.h"
#include "../Source/SystemQOR/MSWindows/WinQAPI/include/ReturnCheck.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//--------------------------------------------------------------------------------
	HICON CUser32::CopyIcon( HICON hIcon )
	{
		_WINQ_FCONTEXT( "CUser32::CopyIcon" );
		CCheckReturn< HICON, CCheckNonZero< HICON > >::TType Result;
		_WINQ_USESAPI( CopyIcon );
		Result = Call< HICON, HICON >( pFunc, hIcon );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HICON CUser32::CreateIcon( HINSTANCE hInstance, int nWidth, int nHeight, BYTE cPlanes, BYTE cBitsPixel, const BYTE* lpbANDbits, const BYTE* lpbXORbits )
	{
		_WINQ_FCONTEXT( "CUser32::CreateIcon" );
		CCheckReturn< HICON, CCheckNonZero< HICON > >::TType Result;
		_WINQ_USESAPI( CreateIcon );
		Result = Call< HICON, HINSTANCE, int, int, BYTE, BYTE, const BYTE*, const BYTE* >( pFunc, hInstance, nWidth, nHeight, cPlanes, cBitsPixel, lpbANDbits, lpbXORbits );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HICON CUser32::CreateIconFromResource( PBYTE presbits, DWORD dwResSize, BOOL fIcon, DWORD dwVer )
	{
		_WINQ_FCONTEXT( "CUser32::CreateIconFromResource" );
		CCheckReturn< HICON, CCheckNonZero< HICON > >::TType Result;
		_WINQ_USESAPI( CreateIconFromResource );
		Result = Call< HICON, PBYTE, DWORD, BOOL, DWORD >( pFunc, presbits, dwResSize, fIcon, dwVer );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HICON CUser32::CreateIconFromResourceEx( PBYTE pbIconBits, DWORD cbIconBits, BOOL fIcon, DWORD dwVersion, int cxDesired, int cyDesired, UINT uFlags )
	{
		_WINQ_FCONTEXT( "CUser32::CreateIconFromResourceEx" );
		CCheckReturn< HICON, CCheckNonZero< HICON > >::TType Result;
		_WINQ_USESAPI( CreateIconFromResourceEx );
		Result = Call< HICON, PBYTE, DWORD, BOOL, DWORD, int, int, UINT >( pFunc, pbIconBits, cbIconBits, fIcon, dwVersion, cxDesired, cyDesired, uFlags );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HICON CUser32::CreateIconIndirect( ::PICONINFO piconinfo )
	{
		_WINQ_FCONTEXT( "CUser32::CreateIconIndirect" );
		CCheckReturn< HICON, CCheckNonZero< HICON > >::TType Result;
		_WINQ_USESAPI( CreateIconIndirect );
		Result = Call< HICON, ::PICONINFO >( pFunc, piconinfo );
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::DestroyIcon( HICON hIcon )
	{
		_WINQ_FCONTEXT( "CUser32::DestroyIcon" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( DestroyIcon );
		bResult = Call< BOOL, HICON >( pFunc, hIcon );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::DrawIcon( HDC hDC, int X, int Y, HICON hIcon )
	{
		_WINQ_FCONTEXT( "CUser32::DrawIcon" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( DrawIcon );
		bResult = Call< BOOL, HDC, int, int, HICON >( pFunc, hDC, X, Y, hIcon );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::DrawIconEx( HDC hdc, int xLeft, int yTop, HICON hIcon, int cxWidth, int cyWidth, UINT istepIfAniCur, HBRUSH hbrFlickerFreeDraw, UINT diFlags )
	{
		_WINQ_FCONTEXT( "CUser32::DrawIconEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( DrawIconEx );
		bResult = Call< BOOL, HDC, int, int, HICON, int, int, UINT, HBRUSH, UINT >( pFunc, hdc, xLeft, yTop, hIcon, cxWidth, cyWidth, istepIfAniCur, hbrFlickerFreeDraw, diFlags );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::GetIconInfo( HICON hIcon, ::PICONINFO piconinfo )
	{
		_WINQ_FCONTEXT( "CUser32::GetIconInfo" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetIconInfo );
		bResult = Call< BOOL, HICON, ::PICONINFO >( pFunc, hIcon, piconinfo );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::GetIconInfoEx( HICON hIcon, ::PICONINFOEX piconinfoex )
	{
		_WINQ_FCONTEXT( "CUser32::GetIconInfoEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetIconInfoEx );
		bResult = Call< BOOL, HICON, ::PICONINFOEX >( pFunc, hIcon, piconinfoex );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	HICON CUser32::LoadIcon( HINSTANCE hInstance, LPCTSTR lpIconName )
	{
		_WINQ_FCONTEXT( "CUser32::LoadIcon" );
		CCheckReturn< HICON, CCheckNonZeroHandle< HICON > >::TType Result;
		_WINQ_USESAPI( LoadIcon );
		Result = Call< HICON, HINSTANCE, LPCTSTR >( pFunc, hInstance, lpIconName );
		return Result;
	}

	//--------------------------------------------------------------------------------
	int CUser32::LookupIconIdFromDirectory( PBYTE presbits, BOOL fIcon )
	{
		_WINQ_FCONTEXT( "CUser32::LookupIconIdFromDirectory" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		_WINQ_USESAPI( LookupIconIdFromDirectory );
		iResult = Call< int, PBYTE, BOOL >( pFunc, presbits, fIcon );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CUser32::LookupIconIdFromDirectoryEx( PBYTE presbits, BOOL fIcon, int cxDesired, int cyDesired, UINT Flags )
	{
		_WINQ_FCONTEXT( "CUser32::LookupIconIdFromDirectoryEx" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		_WINQ_USESAPI( LookupIconIdFromDirectoryEx );
		iResult = Call< int, PBYTE, BOOL, int, int, UINT >( pFunc, presbits, fIcon, cxDesired, cyDesired, Flags );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	UINT CUser32::PrivateExtractIcons( LPCTSTR lpszFile, int nIconIndex, int cxIcon, int cyIcon, HICON* phicon, UINT* piconid, UINT nIcons, UINT flags )
	{
		_WINQ_FCONTEXT( "CUser32::PrivateExtractIcons" );
		UINT uiResult = 0;
		_WINQ_USESAPI( PrivateExtractIcons );
		uiResult = Call< UINT, LPCTSTR, int, int, int, HICON*, UINT*, UINT, UINT >( pFunc, lpszFile, nIconIndex, cxIcon, cyIcon, phicon, piconid, nIcons, flags );
		if( ( phicon == 0 && uiResult == 0 ) || ( phicon != 0 && uiResult == 0xFFFFFFFF ) )
		{
			__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "PrivateExtractIcons" ), 0 ));
		}
		return uiResult;
	}

}//nsWinQAPI

