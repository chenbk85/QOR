//WinQMessages.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Message and Message Queue functions

#include "WinQAPI/User32.h"
#include "../Source/SystemQOR/MSWindows/WinQAPI/include/ReturnCheck.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//--------------------------------------------------------------------------------
	long CUser32::BroadcastSystemMessage( DWORD dwFlags, LPDWORD lpdwRecipients, UINT uiMessage, WPARAM wParam, LPARAM lParam )
	{
		_WINQ_FCONTEXT( "CUser32::BroadcastSystemMessage" );
		CCheckReturn< long, CTCheckNotLess< long, 1 > >::TType lResult;
		_WINQ_USESAPI( BroadcastSystemMessage );
		lResult = Call< long, DWORD, LPDWORD, UINT, WPARAM, LPARAM >( pFunc, dwFlags, lpdwRecipients, uiMessage, wParam, lParam );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CUser32::BroadcastSystemMessageExA( DWORD dwFlags, LPDWORD lpdwRecipients, UINT uiMessage, WPARAM wParam, LPARAM lParam, ::PBSMINFO pBSMInfo )
	{
		_WINQ_FCONTEXT( "CUser32::BroadcastSystemMessageExA" );
		CCheckReturn< long, CTCheckNotLess< long, 1 > >::TType lResult;
		_WINQ_USESAPI( BroadcastSystemMessageExA );
		lResult = Call< long, DWORD, LPDWORD, UINT, WPARAM, LPARAM, PBSMINFO >( pFunc, dwFlags, lpdwRecipients, uiMessage, wParam, lParam, pBSMInfo );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CUser32::BroadcastSystemMessageExW( DWORD dwFlags, LPDWORD lpdwRecipients, UINT uiMessage, WPARAM wParam, LPARAM lParam, ::PBSMINFO pBSMInfo )
	{
		_WINQ_FCONTEXT( "CUser32::BroadcastSystemMessageExW" );
		CCheckReturn< long, CTCheckNotLess< long, 1 > >::TType lResult;
		_WINQ_USESAPI( BroadcastSystemMessageExW );
		lResult = Call< long, DWORD, LPDWORD, UINT, WPARAM, LPARAM, PBSMINFO >( pFunc, dwFlags, lpdwRecipients, uiMessage, wParam, lParam, pBSMInfo );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	LRESULT CUser32::DispatchMessage( const MSG* lpmsg )
	{
		_WINQ_FCONTEXT( "CUser32::DispatchMessage" );
		_WINQ_USESAPI( DispatchMessage );
		return Call< LRESULT, const MSG* >( pFunc, lpmsg );
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::GetInputState(void)
	{
		_WINQ_FCONTEXT( "CUser32::GetInputState" );
		_WINQ_USESAPI( GetInputState );
		return Call< BOOL >( pFunc );
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::GetMessage( LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax )
	{
		_WINQ_FCONTEXT( "CUser32::GetMessage" );
		CCheckReturn< BOOL, CTCheckFailureValue< BOOL, -1 > >::TType bResult;
		_WINQ_USESAPI( GetMessage );
		bResult = Call< BOOL, LPMSG, HWND, UINT, UINT >( pFunc, lpMsg, hWnd, wMsgFilterMin, wMsgFilterMax );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	LPARAM CUser32::GetMessageExtraInfo(void)
	{
		_WINQ_FCONTEXT( "CUser32::GetMessageExtraInfo" );
		_WINQ_USESAPI( GetMessageExtraInfo );
		return Call< LPARAM >( pFunc );
	}

	//--------------------------------------------------------------------------------
	DWORD CUser32::GetMessagePos(void)
	{
		_WINQ_FCONTEXT( "CUser32::GetMessagePos" );
		_WINQ_USESAPI( GetMessagePos );
		return Call< DWORD >( pFunc );
	}

	//--------------------------------------------------------------------------------
	LONG CUser32::GetMessageTime(void)
	{
		_WINQ_FCONTEXT( "CUser32::GetMessageTime" );
		_WINQ_USESAPI( GetMessageTime );
		return Call< LONG >( pFunc );
	}

	//--------------------------------------------------------------------------------
	DWORD CUser32::GetQueueStatus( UINT flags )
	{
		_WINQ_FCONTEXT( "CUser32::GetQueueStatus" );
		_WINQ_USESAPI( GetQueueStatus );
		return Call< DWORD, UINT >( pFunc, flags );
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::InSendMessage(void)
	{
		_WINQ_FCONTEXT( "CUser32::InSendMessage" );
		_WINQ_USESAPI( InSendMessage );
		return Call< BOOL >( pFunc );
	}

	//--------------------------------------------------------------------------------
	DWORD CUser32::InSendMessageEx( LPVOID lpReserved )
	{
		_WINQ_FCONTEXT( "CUser32::InSendMessageEx" );
		_WINQ_USESAPI( InSendMessageEx );
		return Call< DWORD, LPVOID >( pFunc, lpReserved );
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::PeekMessage( LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax, UINT wRemoveMsg )
	{
		_WINQ_FCONTEXT( "CUser32::PeekMessage" );
		_WINQ_USESAPI( PeekMessage );
		return Call< BOOL, LPMSG, HWND, UINT, UINT, UINT >( pFunc, lpMsg, hWnd, wMsgFilterMin, wMsgFilterMax, wRemoveMsg );
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::PostMessage( HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam )
	{
		_WINQ_FCONTEXT( "CUser32::PostMessage" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( PostMessage );
		bResult = Call< BOOL, HWND, UINT, WPARAM, LPARAM >( pFunc, hWnd, Msg, wParam, lParam );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CUser32::PostQuitMessage( int nExitCode )
	{
		_WINQ_FCONTEXT( "CUser32::PostQuitMessage" );
		_WINQ_USESAPI( PostQuitMessage );
		voidCall< int >( pFunc, nExitCode );
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::PostThreadMessage( DWORD idThread, UINT Msg, WPARAM wParam, LPARAM lParam )
	{
		_WINQ_FCONTEXT( "CUser32::PostThreadMessage" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( PostThreadMessage );
		bResult = Call< BOOL, DWORD, UINT, WPARAM, LPARAM >( pFunc, idThread, Msg, wParam, lParam );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	UINT CUser32::RegisterWindowMessage( LPCTSTR lpString )
	{
		_WINQ_FCONTEXT( "CUser32::RegisterWindowMessage" );
		CCheckReturn< UINT, CCheckNonZero< UINT > >::TType uiResult;
		_WINQ_USESAPI( RegisterWindowMessage );
		uiResult = Call< UINT, LPCTSTR >( pFunc, lpString );
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::ReplyMessage( LRESULT lResult )
	{
		_WINQ_FCONTEXT( "CUser32::ReplyMessage" );
		_WINQ_USESAPI( ReplyMessage );
		return Call< BOOL, LRESULT >( pFunc, lResult );
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::SendMessageCallbackA( HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, ::SENDASYNCPROC lpCallBack, ULONG_PTR dwData )
	{
		_WINQ_FCONTEXT( "CUser32::SendMessageCallbackA" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( SendMessageCallbackA );
		bResult = Call< BOOL, HWND, UINT, WPARAM, LPARAM, ::SENDASYNCPROC, ULONG_PTR >( pFunc, hWnd, Msg, wParam, lParam, lpCallBack, dwData );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::SendMessageCallbackW( HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, ::SENDASYNCPROC lpCallBack, ULONG_PTR dwData )
	{
		_WINQ_FCONTEXT( "CUser32::SendMessageCallbackW" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( SendMessageCallbackW );
		bResult = Call< BOOL, HWND, UINT, WPARAM, LPARAM, ::SENDASYNCPROC, ULONG_PTR >( pFunc, hWnd, Msg, wParam, lParam, lpCallBack, dwData );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	LRESULT CUser32::SendMessageTimeout( HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, UINT fuFlags, UINT uTimeout, PDWORD_PTR lpdwResult )
	{
		_WINQ_FCONTEXT( "CUser32::SendMessageTimeout" );
		LRESULT Result = 0;
		_WINQ_USESAPI( SendMessageTimeout );
		Result = Call< LRESULT, HWND, UINT, WPARAM, LPARAM, UINT, UINT, PDWORD_PTR >( pFunc, hWnd, Msg, wParam, lParam, fuFlags, uTimeout, lpdwResult );
		if( Result == 0 )
		{
			DWORD dwError = CKernel32::GetLastError();
			if( dwError == ERROR_TIMEOUT )
			{
				__WINQAPI_WARNING(( RESULT_INDICATES_FAILURE_OR_PENDING, _T( "SendMessageTimeout" ), 0 ));
			}
			else
			{
				__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "SendMessageTimeout" ), 0 ));
			}
		}
		return Result;
	}

	//--------------------------------------------------------------------------------
	LRESULT CUser32::SendMessage( HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam )
	{
		_WINQ_FCONTEXT( "CUser32::SendMessage" );
		_WINQ_USESAPI( SendMessage );
		return Call< LRESULT, HWND, UINT, WPARAM, LPARAM >( pFunc, hWnd, Msg, wParam, lParam );
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::SendNotifyMessage( HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam )
	{
		_WINQ_FCONTEXT( "CUser32::SendNotifyMessage" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( SendNotifyMessage );
		bResult = Call< BOOL, HWND, UINT, WPARAM, LPARAM >( pFunc, hWnd, Msg, wParam, lParam );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	LPARAM CUser32::SetMessageExtraInfo( LPARAM lParam )
	{
		_WINQ_FCONTEXT( "CUser32::SetMessageExtraInfo" );
		_WINQ_USESAPI( SetMessageExtraInfo );
		return Call< LPARAM, LPARAM >( pFunc, lParam );
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::TranslateMessage( const MSG* lpMsg )
	{
		_WINQ_FCONTEXT( "CUser32::TranslateMessage" );
		BOOL bResult = 0;
		_WINQ_USESAPI( TranslateMessage );
		bResult = Call< BOOL, const MSG* >( pFunc, lpMsg );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::WaitMessage(void)
	{
		_WINQ_FCONTEXT( "CUser32::WaitMessage" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( WaitMessage );
		bResult = Call< BOOL >( pFunc );
		return bResult;
	}

}//nsWinQAPI

