//WinQMenu.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Menu functions

#include "WinQAPI/User32.h"
#include "../SystemQOR/MSWindows/WinQAPI/include/ReturnCheck.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//--------------------------------------------------------------------------------
	BOOL CUser32::AppendMenu( HMENU hMenu, UINT uFlags, UINT_PTR uIDNewItem, LPCTSTR lpNewItem )
	{
		_WINQ_FCONTEXT( "CUser32::AppendMenu" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( AppendMenu );
		bResult = Call< BOOL, HMENU, UINT, UINT_PTR, LPCTSTR >( pFunc, hMenu, uFlags, uIDNewItem, lpNewItem );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CUser32::CheckMenuItem( HMENU hmenu, UINT uIDCheckItem, UINT uCheck )
	{
		_WINQ_FCONTEXT( "CUser32::CheckMenuItem" );
		CCheckReturn< DWORD, CTCheckFailureValue< DWORD, (DWORD)-1 > >::TType dwResult;
		_WINQ_USESAPI( CheckMenuItem );
		dwResult = Call< DWORD, HMENU, UINT, UINT >( pFunc, hmenu, uIDCheckItem, uCheck );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::CheckMenuRadioItem( HMENU hmenu, UINT idFirst, UINT idLast, UINT idCheck, UINT uFlags )
	{
		_WINQ_FCONTEXT( "CUser32::CheckMenuRadioItem" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( CheckMenuRadioItem );
		bResult = Call< BOOL, HMENU, UINT, UINT, UINT, UINT >( pFunc, hmenu, idFirst, idLast, idCheck, uFlags );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	HMENU CUser32::CreateMenu(void)
	{
		_WINQ_FCONTEXT( "CUser32::CreateMenu" );
		CCheckReturn< HMENU, CCheckNonZero< HMENU > >::TType Result;
		_WINQ_USESAPI( CreateMenu );
		Result = Call< HMENU >( pFunc );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HMENU CUser32::CreatePopupMenu(void)
	{
		_WINQ_FCONTEXT( "CUser32::CreatePopupMenu" );
		CCheckReturn< HMENU, CCheckNonZero< HMENU > >::TType Result;
		_WINQ_USESAPI( CreatePopupMenu );
		Result = Call< HMENU >( pFunc );
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::DeleteMenu( HMENU hMenu, UINT uPosition, UINT uFlags )
	{
		_WINQ_FCONTEXT( "CUser32::DeleteMenu" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( DeleteMenu );
		bResult = Call< BOOL, HMENU, UINT, UINT >( pFunc, hMenu, uPosition, uFlags );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::DestroyMenu( HMENU hMenu )
	{
		_WINQ_FCONTEXT( "CUser32::DestroyMenu" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( DestroyMenu );
		bResult = Call< BOOL, HMENU >( pFunc, hMenu );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::DrawMenuBar( HWND hWnd )
	{
		_WINQ_FCONTEXT( "CUser32::DrawMenuBar" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( DrawMenuBar );
		bResult = Call< BOOL, HWND >( pFunc, hWnd );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::EnableMenuItem( HMENU hMenu, UINT uIDEnableItem, UINT uEnable )
	{
		_WINQ_FCONTEXT( "CUser32::EnableMenuItem" );
		CCheckReturn< BOOL, CTCheckFailureValue< BOOL, -1 > >::TType bResult;
		_WINQ_USESAPI( EnableMenuItem );
		bResult = Call< BOOL, HMENU, UINT, UINT >( pFunc, hMenu, uIDEnableItem, uEnable );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::EndMenu(void)
	{
		_WINQ_FCONTEXT( "CUser32::EndMenu" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( EndMenu );
		bResult = Call< BOOL >( pFunc );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	HMENU CUser32::GetMenu( HWND hWnd )
	{
		_WINQ_FCONTEXT( "CUser32::GetMenu" );
		_WINQ_USESAPI( GetMenu );
		return Call< HMENU, HWND >( pFunc, hWnd );
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::GetMenuBarInfo( HWND hwnd, LONG idObject, LONG idItem, PMENUBARINFO pmbi )
	{
		_WINQ_FCONTEXT( "CUser32::GetMenuBarInfo" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetMenuBarInfo );
		bResult = Call< BOOL, HWND, LONG, LONG, PMENUBARINFO >( pFunc, hwnd, idObject, idItem, pmbi );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	LONG CUser32::GetMenuCheckMarkDimensions(void)
	{
		_WINQ_FCONTEXT( "CUser32::GetMenuCheckMarkDimensions" );
		_WINQ_USESAPI( GetMenuCheckMarkDimensions );
		return Call< LONG >( pFunc );
	}

	//--------------------------------------------------------------------------------
	UINT CUser32::GetMenuDefaultItem( HMENU hMenu, UINT fByPos, UINT gmdiFlags )
	{
		_WINQ_FCONTEXT( "CUser32::GetMenuDefaultItem" );
		CCheckReturn< UINT, CTCheckFailureValue< UINT, (UINT)-1 > >::TType uiResult;
		_WINQ_USESAPI( GetMenuDefaultItem );
		uiResult = Call< UINT, HMENU, UINT, UINT >( pFunc, hMenu, fByPos, gmdiFlags );
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::GetMenuInfo( HMENU hmenu, ::LPCMENUINFO lpcmi )
	{
		_WINQ_FCONTEXT( "CUser32::GetMenuInfo" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetMenuInfo );
		bResult = Call< BOOL, HMENU, ::LPCMENUINFO >( pFunc, hmenu, lpcmi );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CUser32::GetMenuItemCount( HMENU hMenu )
	{
		_WINQ_FCONTEXT( "CUser32::GetMenuItemCount" );
		CCheckReturn< int, CTCheckFailureValue< int, -1 > >::TType iResult;
		_WINQ_USESAPI( GetMenuItemCount );
		iResult = Call< int, HMENU >( pFunc, hMenu );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	UINT CUser32::GetMenuItemID( HMENU hMenu, int nPos )
	{
		_WINQ_FCONTEXT( "CUser32::GetMenuItemID" );
		CCheckReturn< UINT, CTCheckFailureValue< UINT, (UINT)-1 > >::TType uiResult;
		_WINQ_USESAPI( GetMenuItemID );
		uiResult = Call< UINT, HMENU, int >( pFunc, hMenu, nPos );
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::GetMenuItemInfo( HMENU hMenu, UINT uItem, BOOL fByPosition, LPMENUITEMINFO lpmii )
	{
		_WINQ_FCONTEXT( "CUser32::GetMenuItemInfo" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetMenuItemInfo );
		bResult = Call< BOOL, HMENU, UINT, BOOL, LPMENUITEMINFO >( pFunc, hMenu, uItem, fByPosition, lpmii );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::GetMenuItemRect( HWND hWnd, HMENU hMenu, UINT uItem, ::LPRECT lprcItem )
	{
		_WINQ_FCONTEXT( "CUser32::GetMenuItemRect" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( GetMenuItemRect );
		bResult = Call< BOOL, HWND, HMENU, UINT, ::LPRECT >( pFunc, hWnd, hMenu, uItem, lprcItem );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	UINT CUser32::GetMenuState( HMENU hMenu, UINT uId, UINT uFlags )
	{
		_WINQ_FCONTEXT( "CUser32::GetMenuState" );
		CCheckReturn< UINT, CTCheckFailureValue< UINT, (UINT)-1 > >::TType uiResult;
		_WINQ_USESAPI( GetMenuState );
		uiResult = Call< UINT, HMENU, UINT, UINT >( pFunc, hMenu, uId, uFlags );
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	int CUser32::GetMenuString( HMENU hMenu, UINT uIDItem, LPTSTR lpString, int nMaxCount, UINT uFlag )
	{
		_WINQ_FCONTEXT( "CUser32::GetMenuString" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		_WINQ_USESAPI( GetMenuString );
		iResult = Call< int, HMENU, UINT, LPTSTR, int, UINT >( pFunc, hMenu, uIDItem, lpString, nMaxCount, uFlag );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	HMENU CUser32::GetSubMenu( HMENU hMenu, int nPos )
	{
		_WINQ_FCONTEXT( "CUser32::GetSubMenu" );
		CCheckReturn< HMENU, CCheckNonZero< HMENU > >::TType Result;
		_WINQ_USESAPI( GetSubMenu );
		Result = Call< HMENU, HMENU, int >( pFunc, hMenu, nPos );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HMENU CUser32::GetSystemMenu( HWND hWnd, BOOL bRevert )
	{
		_WINQ_FCONTEXT( "CUser32::GetSystemMenu" );
		_WINQ_USESAPI( GetSystemMenu );
		return Call< HMENU, HWND, BOOL >( pFunc, hWnd, bRevert );
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::HiliteMenuItem( HWND hwnd, HMENU hmenu, UINT uItemHilite, UINT uHilite )
	{
		_WINQ_FCONTEXT( "CUser32::HiliteMenuItem" );
		_WINQ_USESAPI( HiliteMenuItem );
		return Call< BOOL, HWND, HMENU, UINT, UINT >( pFunc, hwnd, hmenu, uItemHilite, uHilite );
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::InsertMenu( HMENU hMenu, UINT uPosition, UINT uFlags, void* uIDNewItem, LPCTSTR lpNewItem )
	{
		_WINQ_FCONTEXT( "CUser32::InsertMenu" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( InsertMenu );
		bResult = Call< BOOL, HMENU, UINT, UINT, void*, LPCTSTR >( pFunc, hMenu, uPosition, uFlags, uIDNewItem, lpNewItem );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::InsertMenuItem( HMENU hMenu, UINT uItem, BOOL fByPosition, LPCMENUITEMINFO lpmii )
	{
		_WINQ_FCONTEXT( "CUser32::InsertMenuItem" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( InsertMenuItem );
		bResult = Call< BOOL, HMENU, UINT, BOOL, LPCMENUITEMINFO >( pFunc, hMenu, uItem, fByPosition, lpmii );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::IsMenu( HMENU hMenu )
	{
		_WINQ_FCONTEXT( "CUser32::IsMenu" );
		_WINQ_USESAPI( IsMenu );
		return Call< BOOL, HMENU >( pFunc, hMenu );
	}

	//--------------------------------------------------------------------------------
	HMENU CUser32::LoadMenu( HINSTANCE hInstance, LPCTSTR lpMenuName )
	{
		_WINQ_FCONTEXT( "CUser32::LoadMenu" );
		CCheckReturn< HMENU, CCheckNonZero< HMENU > >::TType Result;
		_WINQ_USESAPI( LoadMenu );
		Result = Call< HMENU, HINSTANCE, LPCTSTR >( pFunc, hInstance, lpMenuName );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HMENU CUser32::LoadMenuIndirect( CONST MENUTEMPLATE* lpMenuTemplate )
	{
		_WINQ_FCONTEXT( "CUser32::LoadMenuIndirect" );
		CCheckReturn< HMENU, CCheckNonZero< HMENU > >::TType Result;
		_WINQ_USESAPI( LoadMenuIndirect );
		Result = Call< HMENU, CONST MENUTEMPLATE* >( pFunc, lpMenuTemplate );
		return Result;
	}

	//--------------------------------------------------------------------------------
	int CUser32::MenuItemFromPoint( HWND hWnd, HMENU hMenu, POINT ptScreen )
	{
		_WINQ_FCONTEXT( "CUser32::MenuItemFromPoint" );
		_WINQ_USESAPI( MenuItemFromPoint );
		return Call< int, HWND, HMENU, POINT >( pFunc, hWnd, hMenu, ptScreen );
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::ModifyMenu( HMENU hMenu, UINT uPosition, UINT uFlags, void* uIDNewItem, LPCTSTR lpNewItem )
	{
		_WINQ_FCONTEXT( "CUser32::ModifyMenu" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( ModifyMenu );
		bResult = Call< BOOL, HMENU, UINT, UINT, void*, LPCTSTR >( pFunc, hMenu, uPosition, uFlags, uIDNewItem, lpNewItem );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::RemoveMenu( HMENU hMenu, UINT uPosition, UINT uFlags )
	{
		_WINQ_FCONTEXT( "CUser32::RemoveMenu" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( RemoveMenu );
		bResult = Call< BOOL, HMENU, UINT, UINT >( pFunc, hMenu, uPosition, uFlags );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::SetMenu( HWND hWnd, HMENU hMenu )
	{
		_WINQ_FCONTEXT( "CUser32::SetMenu" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( SetMenu );
		bResult = Call< BOOL, HWND, HMENU >( pFunc, hWnd, hMenu );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::SetMenuDefaultItem( HMENU hMenu, UINT uItem, UINT fByPos )
	{
		_WINQ_FCONTEXT( "CUser32::SetMenuDefaultItem" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( SetMenuDefaultItem );
		bResult = Call< BOOL, HMENU, UINT, UINT >( pFunc, hMenu, uItem, fByPos );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::SetMenuInfo( HMENU hmenu, ::LPCMENUINFO lpcmi )
	{
		_WINQ_FCONTEXT( "CUser32::SetMenuInfo" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( SetMenuInfo );
		bResult = Call< BOOL, HMENU, ::LPCMENUINFO >( pFunc, hmenu, lpcmi );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::SetMenuItemBitmaps( HMENU hMenu, UINT uPosition, UINT uFlags, HBITMAP hBitmapUnchecked, HBITMAP hBitmapChecked )
	{
		_WINQ_FCONTEXT( "CUser32::SetMenuItemBitmaps" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( SetMenuItemBitmaps );
		bResult = Call< BOOL, HMENU, UINT, UINT, HBITMAP, HBITMAP >( pFunc, hMenu, uPosition, uFlags, hBitmapUnchecked, hBitmapChecked );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::SetMenuItemInfo( HMENU hMenu, UINT uItem, BOOL fByPosition, LPMENUITEMINFO lpmii )
	{
		_WINQ_FCONTEXT( "CUser32::SetMenuItemInfo" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( SetMenuItemInfo );
		bResult = Call< BOOL, HMENU, UINT, BOOL, LPMENUITEMINFO >( pFunc, hMenu, uItem, fByPosition, lpmii );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::TrackPopupMenu( HMENU hMenu, UINT uFlags, int x, int y, int nReserved, HWND hWnd, HWND prcRect )
	{
		_WINQ_FCONTEXT( "CUser32::TrackPopupMenu" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( TrackPopupMenu );
		bResult = Call< BOOL, HMENU, UINT, int, int, int, HWND, HWND >( pFunc, hMenu, uFlags, x, y, nReserved, hWnd, prcRect );
		if( bResult == FALSE && ( ( uFlags & TPM_RETURNCMD ) == 0 ) )
		{
			__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "TrackPopupMenu" ), 0 ));
		}
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::TrackPopupMenuEx( HMENU hmenu, UINT fuFlags, int x, int y, HWND hwnd, ::LPTPMPARAMS lptpm )
	{
		_WINQ_FCONTEXT( "CUser32::TrackPopupMenuEx" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( TrackPopupMenuEx );
		bResult = Call< BOOL, HMENU, UINT, int, int, HWND, ::LPTPMPARAMS >( pFunc, hmenu, fuFlags, x, y, hwnd, lptpm );
		if( bResult == FALSE && ( ( fuFlags & TPM_RETURNCMD ) == 0 ) )
		{
			__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "TrackPopupMenu" ), 0 ));
		}
		return bResult;
	}

}//nsWinQAPI
