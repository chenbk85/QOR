//WinQHooks.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Hook functions

#include "WinQAPI/User32.h"
#include "../SystemQOR/MSWindows/WinQAPI/include/ReturnCheck.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//--------------------------------------------------------------------------------
	BOOL CUser32::CallMsgFilter( LPMSG lpMsg, int nCode )
	{
		_WINQ_FCONTEXT( "CUser32::CallMsgFilter" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPIAW( CallMsgFilter );
		bResult = Call< BOOL, LPMSG, int >( pFunc, lpMsg, nCode );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	LRESULT CUser32::CallNextHookEx( HHOOK hhk, int nCode, WPARAM wParam, LPARAM lParam )
	{
		_WINQ_FCONTEXT( "CUser32::CallNextHookEx" );
		_WINQ_USESAPI( CallNextHookEx );
		return Call< LRESULT, HHOOK, int, WPARAM, LPARAM >( pFunc, hhk, nCode, wParam, lParam );
	}

	//--------------------------------------------------------------------------------
	HHOOK CUser32::SetWindowsHookEx( int idHook, HOOKPROC lpfn, HINSTANCE hMod, DWORD dwThreadId )
	{
		_WINQ_FCONTEXT( "CUser32::SetWindowsHookEx" );
		CCheckReturn< HHOOK, CCheckNonZero< HHOOK > >::TType Result;
		_WINQ_USESAPI( SetWindowsHookEx );
		Result = Call< HHOOK, int, HOOKPROC, HINSTANCE, DWORD >( pFunc, idHook, lpfn, hMod, dwThreadId );
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CUser32::UnhookWindowsHookEx( HHOOK hhk )
	{
		_WINQ_FCONTEXT( "CUser32::UnhookWindowsHookEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( UnhookWindowsHookEx );
		bResult = Call< BOOL, HHOOK >( pFunc, hhk );
		return bResult;
	}

}//nsWinQAPI

