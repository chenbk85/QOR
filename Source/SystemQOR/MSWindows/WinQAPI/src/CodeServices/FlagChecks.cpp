//FlagChecks.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQAPI/Kernel32.h"
#include "../Source/SystemQOR/MSWindows/WinQAPI/include/FlagChecks.h"
#include "../Source/SystemQOR/MSWindows/WinQAPI/include/Error.h"
#include "../Source/SystemQOR/MSWindows/WinQAPI/include/FunctionContext.h"
#include "CodeQOR/ErrorSystem/ParamErrorDomain.h"
#include "CodeQOR/Modules/ProcessBase.h"

//--------------------------------------------------------------------------------
namespace nsParamChecking
{
	//--------------------------------------------------------------------------------
	void CRangeCheck::Check( unsigned long dwVal, unsigned long dwMin, unsigned long dwMax )
	{
	}
}//nsParamChecking

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//--------------------------------------------------------------------------------
	void CEventFlagsCheck::Check( unsigned long dwFlags )
	{
#		if ( _WIN32_WINNT >= 0x0600 )
		unsigned long dwMask1 = CREATE_EVENT_INITIAL_SET | CREATE_EVENT_MANUAL_RESET;
		if( ( dwMask1 | dwFlags ) != dwMask1 )
		{
			//Error Flags outside mask
		}
#		endif
	}

	//--------------------------------------------------------------------------------
	void CEventSyncAccessFlagsCheck::Check( unsigned long dwFlags )
	{
		unsigned long dwMask1 = DELETE | READ_CONTROL | SYNCHRONIZE | WRITE_DAC | WRITE_OWNER | EVENT_ALL_ACCESS | EVENT_MODIFY_STATE;
		if( ( dwMask1 | dwFlags ) != dwMask1 )
		{
			//Error Flags outside mask
		}
	}

	//--------------------------------------------------------------------------------
	//TODO:
	void CMutexAccessFlagsCheck::Check( unsigned long dwFlags )
	{

	}

	//--------------------------------------------------------------------------------
	void CSemaphoreAccessFlagsCheck::Check( unsigned long dwFlags )
	{
		unsigned long dwMask1 = STANDARD_RIGHTS_ALL | SEMAPHORE_ALL_ACCESS;
		if( ( dwMask1 | dwFlags ) != dwMask1 )
		{
			//Error Flags outside mask
		}
	}

	//--------------------------------------------------------------------------------
	void CTQTCreateFlagsCheck::Check( unsigned long ulFlags )
	{
		unsigned long ulMask = WT_EXECUTEINTIMERTHREAD | WT_EXECUTEINIOTHREAD | WT_EXECUTEINPERSISTENTTHREAD | WT_EXECUTELONGFUNCTION | WT_EXECUTEONLYONCE
#if		( _WIN32_WINNT > 0x0501 || ( _WIN32_WINNT ==  0x0501 && NTDDI_VERSION >= 0x05010200 ) )
			| WT_TRANSFER_IMPERSONATION
#endif
			;
		if( ( ulMask | ulFlags ) != ulMask )
		{
			//Error Flags outside mask
		}
	}

	//--------------------------------------------------------------------------------
	void CWaitTmrCreateFlagsCheck::Check( unsigned long dwFlags )
	{
		if( dwFlags != 0 && dwFlags != CREATE_WAITABLE_TIMER_MANUAL_RESET )
		{
			//Error Flags outside mask
		}
	}

	//--------------------------------------------------------------------------------
	void CSybcObjAccessFlagsCheck::Check( unsigned long dwFlags )
	{
		unsigned long dwMask = STANDARD_RIGHTS_ALL;
		if( ( dwMask | dwFlags ) != dwMask )
		{
			//Error Flags outside mask
		}
	}

	//--------------------------------------------------------------------------------
	void CCritSecCreateFlagsCheck::Check( unsigned long dwFlags )
	{
		if( dwFlags != 0 && dwFlags != CRITICAL_SECTION_NO_DEBUG_INFO )
		{
			//TODO: Error flags outside mask
		}
	}

	//--------------------------------------------------------------------------------
	void CInitOnceBeginFlagsCheck::Check( unsigned long dwFlags )
	{
		unsigned long dwMask = INIT_ONCE_ASYNC | INIT_ONCE_CHECK_ONLY;
		if( ( dwFlags | dwMask ) != dwMask )
		{
			//Error flags outside mask
		}
	}

	//--------------------------------------------------------------------------------
	void CInitOnceCompleteFlagsCheck::Check( unsigned long dwFlags )
	{
		unsigned long dwMask = INIT_ONCE_ASYNC | INIT_ONCE_INIT_FAILED;
		if( ( dwFlags | dwMask ) != dwMask )
		{
			//Error flags outside mask
		}
	}

	//--------------------------------------------------------------------------------
	void CRgstrWaitFlagsCheck::Check( unsigned long ulFlags )
	{
		unsigned long ulMask = WT_EXECUTEINIOTHREAD | WT_EXECUTEINPERSISTENTTHREAD | WT_EXECUTELONGFUNCTION
#if		( _WIN32_WINNT > 0x0501 || ( _WIN32_WINNT ==  0x0501 && NTDDI_VERSION >= 0x05010200 ) )
			| WT_TRANSFER_IMPERSONATION;
#else
			;
#endif
		if( ( ulFlags | ulMask ) != ulMask )
		{
			//Error flags outside mask
		}
	}

}//nsWinQAPI
