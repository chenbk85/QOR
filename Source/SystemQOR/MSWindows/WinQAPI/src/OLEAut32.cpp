//OLEAut32.cpp

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQAPI/WinQAPI.h"
#include "SystemQOR.h"
#include "WinQAPI/Kernel32.h"
#include "WinQAPI/OLEAut32.h"
#include "ReturnCheck.h"
#include <OleAuto.h>

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//--------------------------------------------------------------------------------
	SAFEARRAY* COLEAut32::SafeArrayCreate( VARTYPE vt, UINT cDims, SAFEARRAYBOUND* rgsabound )
	{
		_WINQ_FCONTEXT( "COLEAut32::SafeArrayCreate" );
		CCheckReturn< SAFEARRAY*, CCheckNonZero< SAFEARRAY* > >::TType pResult;
		_WINQ_USESAPI( SafeArrayCreate );
		pResult = Call< SAFEARRAY*, VARTYPE, UINT, SAFEARRAYBOUND* >( pFunc, vt, cDims, rgsabound );
		return pResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT COLEAut32::SafeArrayDestroy( SAFEARRAY* psa )
	{
		_WINQ_FCONTEXT( "COLEAut32::SafeArrayDestroy" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
		_WINQ_USESAPI( SafeArrayDestroy );
		hResult = Call< HRESULT, SAFEARRAY* >( pFunc, psa );
		return hResult;
	}

	//--------------------------------------------------------------------------------
	UINT COLEAut32::SafeArrayGetDim( SAFEARRAY* psa )
	{
		_WINQ_FCONTEXT( "COLEAut32::SafeArrayGetDim" );
		CCheckReturn< UINT, CCheckNonZero< UINT > >::TType uiResult;
		_WINQ_USESAPI( SafeArrayGetDim );
		uiResult = Call< UINT, SAFEARRAY* >( pFunc, psa );
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	UINT COLEAut32::SafeArrayGetElemsize( SAFEARRAY* psa )
	{
		_WINQ_FCONTEXT( "COLEAut32::SafeArrayGetElemsize" );
		CCheckReturn< UINT, CCheckNonZero< UINT > >::TType uiResult;
		_WINQ_USESAPI( SafeArrayGetElemsize );
		uiResult = Call< UINT, SAFEARRAY* >( pFunc, psa );
		return uiResult;

	}

	//--------------------------------------------------------------------------------
	HRESULT COLEAut32::SafeArrayGetUBound( SAFEARRAY* psa, UINT nDim, LONG* plUbound )
	{
		_WINQ_FCONTEXT( "COLEAut32::SafeArrayGetUBound" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
		_WINQ_USESAPI( SafeArrayGetUBound );
		hResult = Call< HRESULT, SAFEARRAY*, UINT, LONG* >( pFunc, psa, nDim, plUbound );
		return hResult;

	}

	//--------------------------------------------------------------------------------
	HRESULT COLEAut32::SafeArrayGetLBound( SAFEARRAY* psa, UINT nDim, LONG* plLbound )
	{
		_WINQ_FCONTEXT( "COLEAut32::SafeArrayGetLBound" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
		_WINQ_USESAPI( SafeArrayGetLBound );
		hResult = Call< HRESULT, SAFEARRAY*, UINT, LONG* >( pFunc, psa, nDim, plLbound );
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT COLEAut32::SafeArrayLock( SAFEARRAY* psa )
	{
		_WINQ_FCONTEXT( "COLEAut32::SafeArrayLock" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
		_WINQ_USESAPI( SafeArrayLock );
		hResult = Call< HRESULT, SAFEARRAY* >( pFunc, psa );
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT COLEAut32::SafeArrayUnlock( SAFEARRAY* psa )
	{
		_WINQ_FCONTEXT( "COLEAut32::SafeArrayUnlock" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
		_WINQ_USESAPI( SafeArrayUnlock );
		hResult = Call< HRESULT, SAFEARRAY* >( pFunc, psa );
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT COLEAut32::SafeArrayAccessData( SAFEARRAY* psa, void** ppvData )
	{
		_WINQ_FCONTEXT( "COLEAut32::SafeArrayAccessData" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
		_WINQ_USESAPI( SafeArrayAccessData );
		hResult = Call< HRESULT, SAFEARRAY*, void** >( pFunc, psa, ppvData );
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT COLEAut32::SafeArrayUnaccessData( SAFEARRAY* psa )
	{
		_WINQ_FCONTEXT( "COLEAut32::SafeArrayUnaccessData" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
		_WINQ_USESAPI( SafeArrayUnaccessData );
		hResult = Call< HRESULT, SAFEARRAY* >( pFunc, psa );
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT COLEAut32::SafeArrayGetElement( SAFEARRAY* psa, LONG* rgIndices, void* pv )
	{
		_WINQ_FCONTEXT( "COLEAut32::SafeArrayGetElement" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
		_WINQ_USESAPI( SafeArrayGetElement );
		hResult = Call< HRESULT, SAFEARRAY*, LONG*, void* >( pFunc, psa, rgIndices, pv );
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT COLEAut32::SafeArrayPutElement( SAFEARRAY* psa, LONG* rgIndices, void* pv )
	{
		_WINQ_FCONTEXT( "COLEAut32::SafeArrayPutElement" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
		_WINQ_USESAPI( SafeArrayPutElement );
		hResult = Call< HRESULT, SAFEARRAY*, LONG*, void* >( pFunc, psa, rgIndices, pv );
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT COLEAut32::SafeArrayCopy( SAFEARRAY* psa, SAFEARRAY** ppsaOut )
	{
		_WINQ_FCONTEXT( "COLEAut32::SafeArrayCopy" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
		_WINQ_USESAPI( SafeArrayCopy );
		hResult = Call< HRESULT, SAFEARRAY*, SAFEARRAY** >( pFunc, psa, ppsaOut );
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT COLEAut32::SafeArrayAllocDescriptor( UINT cDims, SAFEARRAY** ppsaOut )
	{
		_WINQ_FCONTEXT( "COLEAut32::SafeArrayAllocDescriptor" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
		_WINQ_USESAPI( SafeArrayAllocDescriptor );
		hResult = Call< HRESULT, UINT, SAFEARRAY** >( pFunc, cDims, ppsaOut );
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT COLEAut32::SafeArrayAllocData( SAFEARRAY* psa )
	{
		_WINQ_FCONTEXT( "COLEAut32::SafeArrayAllocData" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
		_WINQ_USESAPI( SafeArrayAllocData );
		hResult = Call< HRESULT, SAFEARRAY* >( pFunc, psa );
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT COLEAut32::SafeArrayDestroyDescriptor( SAFEARRAY* psa )
	{
		_WINQ_FCONTEXT( "COLEAut32::SafeArrayDestroyDescriptor" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
		_WINQ_USESAPI( SafeArrayDestroyDescriptor );
		hResult = Call< HRESULT, SAFEARRAY* >( pFunc, psa );
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT COLEAut32::SafeArrayDestroyData( SAFEARRAY* psa )
	{
		_WINQ_FCONTEXT( "COLEAut32::SafeArrayDestroyData" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
		_WINQ_USESAPI( SafeArrayDestroyData );
		hResult = Call< HRESULT, SAFEARRAY* >( pFunc, psa );
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT COLEAut32::SafeArrayRedim( SAFEARRAY* psa, SAFEARRAYBOUND* psaboundNew )
	{
		_WINQ_FCONTEXT( "COLEAut32::SafeArrayRedim" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
		_WINQ_USESAPI( SafeArrayRedim );
		hResult = Call< HRESULT, SAFEARRAY*, SAFEARRAYBOUND* >( pFunc, psa, psaboundNew );
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT COLEAut32::SafeArrayAllocDescriptorEx( VARTYPE vt, UINT cDims, SAFEARRAY** ppsaOut )
	{
		_WINQ_FCONTEXT( "COLEAut32::SafeArrayAllocDescriptorEx" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
		_WINQ_USESAPI( SafeArrayAllocDescriptorEx );
		hResult = Call< HRESULT, VARTYPE, UINT, SAFEARRAY** >( pFunc, vt, cDims, ppsaOut );
		return hResult;
	}

	//--------------------------------------------------------------------------------
	SAFEARRAY* COLEAut32::SafeArrayCreateEx( VARTYPE vt, UINT cDims, SAFEARRAYBOUND* rgsabound, PVOID pvExtra )
	{
		_WINQ_FCONTEXT( "COLEAut32::SafeArrayCreateEx" );
		CCheckReturn< SAFEARRAY*, CCheckNonZero< SAFEARRAY* > >::TType pResult;
		_WINQ_USESAPI( SafeArrayCreateEx );
		pResult = Call< SAFEARRAY*, VARTYPE, UINT, SAFEARRAYBOUND*, PVOID >( pFunc, vt, cDims, rgsabound, pvExtra );
		return pResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT COLEAut32::SafeArrayGetVartype( SAFEARRAY* psa, VARTYPE* pvt )
	{
		_WINQ_FCONTEXT( "COLEAut32::SafeArrayGetVartype" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
		_WINQ_USESAPI( SafeArrayGetVartype );
		hResult = Call< HRESULT, SAFEARRAY*, VARTYPE* >( pFunc, psa, pvt );
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT COLEAut32::SafeArrayPtrOfIndex( SAFEARRAY* psa, LONG* rgIndices, void** ppvData )
	{
		_WINQ_FCONTEXT( "COLEAut32::SafeArrayPtrOfIndex" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
		_WINQ_USESAPI( SafeArrayPtrOfIndex );
		hResult = Call< HRESULT, SAFEARRAY*, LONG*, void** >( pFunc, psa, rgIndices, ppvData );
		return hResult;
	}

	//--------------------------------------------------------------------------------
	SAFEARRAY* COLEAut32::SafeArrayCreateVector( VARTYPE vt, LONG lLbound, ULONG cElements )
	{
		_WINQ_FCONTEXT( "COLEAut32::SafeArrayCreateVector" );
		CCheckReturn< SAFEARRAY*, CCheckNonZero< SAFEARRAY* > >::TType pResult;
		_WINQ_USESAPI( SafeArrayCreateVector );
		pResult = Call< SAFEARRAY*, VARTYPE, LONG, ULONG >( pFunc, vt, lLbound, cElements );
		return pResult;
	}

	//--------------------------------------------------------------------------------
	SAFEARRAY* COLEAut32::SafeArrayCreateVectorEx( VARTYPE vt, LONG lLbound, ULONG cElements, PVOID pvExtra )
	{
		_WINQ_FCONTEXT( "COLEAut32::SafeArrayCreateVectorEx" );
		CCheckReturn< SAFEARRAY*, CCheckNonZero< SAFEARRAY* > >::TType pResult;
		_WINQ_USESAPI( SafeArrayCreateVectorEx );
		pResult = Call< SAFEARRAY*, VARTYPE, LONG, ULONG, PVOID >( pFunc, vt, lLbound, cElements, pvExtra );
		return pResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT COLEAut32::SafeArraySetRecordInfo( SAFEARRAY* psa, IRecordInfo* prinfo )
	{
		_WINQ_FCONTEXT( "COLEAut32::SafeArraySetRecordInfo" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
		_WINQ_USESAPI( SafeArraySetRecordInfo );
		hResult = Call< HRESULT, SAFEARRAY*, IRecordInfo* >( pFunc, psa, prinfo );
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT COLEAut32::SafeArrayGetRecordInfo( SAFEARRAY* psa, IRecordInfo** prinfo )
	{
		_WINQ_FCONTEXT( "COLEAut32::SafeArrayGetRecordInfo" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
		_WINQ_USESAPI( SafeArrayGetRecordInfo );
		hResult = Call< HRESULT, SAFEARRAY*, IRecordInfo** >( pFunc, psa, prinfo );
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT COLEAut32::SafeArraySetIID( SAFEARRAY* psa, REFGUID guid )
	{
		_WINQ_FCONTEXT( "COLEAut32::SafeArraySetIID" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
		_WINQ_USESAPI( SafeArraySetIID );
		hResult = Call< HRESULT, SAFEARRAY*, REFGUID >( pFunc, psa, guid );
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT COLEAut32::SafeArrayGetIID( SAFEARRAY* psa, GUID* pguid )
	{
		_WINQ_FCONTEXT( "COLEAut32::SafeArrayGetIID" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
		_WINQ_USESAPI( SafeArrayGetIID );
		hResult = Call< HRESULT, SAFEARRAY*, GUID* >( pFunc, psa, pguid );
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT COLEAut32::SafeArrayCopyData( SAFEARRAY* psaSource, SAFEARRAY* psaTarget )
	{
		_WINQ_FCONTEXT( "COLEAut32::SafeArrayCopyData" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
		_WINQ_USESAPI( SafeArrayCopyData );
		hResult = Call< HRESULT, SAFEARRAY*, SAFEARRAY* >( pFunc, psaSource, psaTarget );
		return hResult;
	}

}//nsWinQAPI

