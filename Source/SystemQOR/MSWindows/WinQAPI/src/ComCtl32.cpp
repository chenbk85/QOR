//ComCtl32.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQAPI/WinQAPI.h"
#include "WinQAPI/ComCtl32.h"
#include "ReturnCheck.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//--------------------------------------------------------------------------------
	HPROPSHEETPAGE CComCtl32::CreatePropertySheetPage( LPCPROPSHEETPAGE lppsp )
	{
		_WINQ_FCONTEXT( "CComCtl32::CreatePropertySheetPage" );
		CCheckReturn< HPROPSHEETPAGE, CCheckNonZero< HPROPSHEETPAGE > >::TType Result;
		_WINQ_USESAPI( CreatePropertySheetPage );
		Result = Call< HPROPSHEETPAGE, LPCPROPSHEETPAGE >( pFunc, lppsp );
		return Result;
	}

	//--------------------------------------------------------------------------------
	void CComCtl32::DrawInsert( HWND hWndParent, HWND hLB, int nItem )
	{
		_WINQ_FCONTEXT( "CComCtl32::DrawInsert" );			
		_WINQ_USESAPI( DrawInsert );
		voidCall< HWND, HWND, int >( pFunc, hWndParent, hLB, nItem );
	}

	//--------------------------------------------------------------------------------
	HRESULT CComCtl32::HIMAGELIST_QueryInterface( HIMAGELIST himl, REFIID riid, void** ppv )
	{
		_WINQ_FCONTEXT( "CComCtl32::HIMAGELIST_QueryInterface" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hr;
		_WINQ_USESAPI( HIMAGELIST_QueryInterface );
		hr = Call< HRESULT, HIMAGELIST, REFIID, void** >( pFunc, himl, riid, ppv );
		return hr;
	}

	//--------------------------------------------------------------------------------
	int CComCtl32::ImageList_Add( HIMAGELIST himl, HBITMAP hbmImage, HBITMAP hbmMask )
	{
		_WINQ_FCONTEXT( "CComCtl32::ImageList_Add" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
		_WINQ_USESAPI( ImageList_Add );
		iResult = Call< int, HIMAGELIST, HBITMAP, HBITMAP >( pFunc, himl, hbmImage, hbmMask );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CComCtl32::ImageList_mxAddIcon( HIMAGELIST himl, HICON hicon )
	{
		_WINQ_FCONTEXT( "CComCtl32::ImageList_AddIcon" );
		CCheckReturn< int, CCheckFailureInt< -1 > >::TType iResult;
		_WINQ_USESAPI( ImageList_ReplaceIcon );
		iResult = Call< int, HIMAGELIST, int, HICON >( pFunc, himl, -1, hicon );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CComCtl32::ImageList_AddMasked( HIMAGELIST himl, HBITMAP hbmImage, COLORREF crMask )
	{
		_WINQ_FCONTEXT( "CComCtl32::ImageList_AddMasked" );
		CCheckReturn< int, CCheckFailureInt< -1 > >::TType iResult;
		_WINQ_USESAPI( ImageList_AddMasked );
		iResult = Call< int, HIMAGELIST, HBITMAP, COLORREF >( pFunc, himl, hbmImage, crMask );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CComCtl32::ImageList_BeginDrag( HIMAGELIST himlTrack, int iTrack, int dxHotspot, int dyHotspot )
	{
		_WINQ_FCONTEXT( "CComCtl32::ImageList_BeginDrag" );
		CCheckReturn< BOOL, nsWinQAPI::CBoolCheck<> >::TType bResult;
		_WINQ_USESAPI( ImageList_BeginDrag );
		bResult = Call< BOOL, HIMAGELIST, int, int, int >( pFunc, himlTrack, iTrack, dxHotspot, dyHotspot );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CComCtl32::ImageList_Copy( HIMAGELIST himlDst, HIMAGELIST himlSrc, int iDst, int iSrc, UINT uFlags )
	{
		_WINQ_FCONTEXT( "CComCtl32::ImageList_Copy" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		_WINQ_USESAPI( ImageList_Copy );
		bResult = Call< BOOL, HIMAGELIST, HIMAGELIST, int, int, UINT >( pFunc, himlDst, himlSrc, iDst, iSrc, uFlags );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	HIMAGELIST CComCtl32::ImageList_Create( int cx, int cy, UINT flags, int cInitial, int cGrow )
	{
		_WINQ_FCONTEXT( "CComCtl32::ImageList_Create" );
		CCheckReturn< HIMAGELIST, CCheckNonZero< HIMAGELIST > >::TType Result;
		_WINQ_USESAPI( ImageList_Create );
		Result = Call< HIMAGELIST, int, int, UINT, int, int >( pFunc, cx, cy, flags, cInitial, cGrow );
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CComCtl32::ImageList_Destroy( HIMAGELIST himl )
	{
		_WINQ_FCONTEXT( "CComCtl32::ImageList_Destroy" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		_WINQ_USESAPI( ImageList_Destroy );
		bResult = Call< BOOL, HIMAGELIST >( pFunc, himl );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CComCtl32::ImageList_DragEnter( HWND hwndLock, int x, int y )
	{
		_WINQ_FCONTEXT( "CComCtl32::ImageList_DragEnter" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		_WINQ_USESAPI( ImageList_DragEnter );
		bResult = Call< BOOL, HWND, int, int >( pFunc, hwndLock, x, y );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CComCtl32::ImageList_DragLeave( HWND hwndLock )
	{
		_WINQ_FCONTEXT( "CComCtl32::ImageList_DragLeave" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		_WINQ_USESAPI( ImageList_DragLeave );
		bResult = Call< BOOL, HWND >( pFunc, hwndLock );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CComCtl32::ImageList_DragMove( int x, int y )
	{
		_WINQ_FCONTEXT( "CComCtl32::ImageList_DragMove" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		_WINQ_USESAPI( ImageList_DragMove );
		bResult = Call< BOOL, int, int >( pFunc, x, y );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CComCtl32::ImageList_DragShowNolock( BOOL fShow )
	{
		_WINQ_FCONTEXT( "CComCtl32::ImageList_DragShowNolock" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		_WINQ_USESAPI( ImageList_DragShowNolock );
		bResult = Call< BOOL, BOOL >( pFunc, fShow );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CComCtl32::ImageList_Draw( HIMAGELIST himl, int i, HDC hdcDst, int x, int y, UINT fStyle )
	{
		_WINQ_FCONTEXT( "CComCtl32::ImageList_Draw" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		_WINQ_USESAPI( ImageList_Draw );
		bResult = Call< BOOL, HIMAGELIST, int, HDC, int, int, UINT >( pFunc, himl, i, hdcDst, x, y, fStyle );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CComCtl32::ImageList_DrawEx( HIMAGELIST himl, int i, HDC hdcDst, int x, int y, int dx, int dy, COLORREF rgbBk, COLORREF rgbFg, UINT fStyle )
	{
		_WINQ_FCONTEXT( "CComCtl32::ImageList_DrawEx" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		_WINQ_USESAPI( ImageList_DrawEx );
		bResult = Call< BOOL, HIMAGELIST, int, HDC, int, int, int, int, COLORREF, COLORREF, UINT >( pFunc, himl, i, hdcDst, x, y, dx, dy, rgbBk, rgbFg, fStyle );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CComCtl32::ImageList_DrawIndirect( IMAGELISTDRAWPARAMS* pimldp )
	{
		_WINQ_FCONTEXT( "CComCtl32::ImageList_DrawIndirect" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		_WINQ_USESAPI( ImageList_DrawIndirect );
		bResult = Call< BOOL, IMAGELISTDRAWPARAMS* >( pFunc, pimldp );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	HIMAGELIST CComCtl32::ImageList_Duplicate( HIMAGELIST himl )
	{
		_WINQ_FCONTEXT( "CComCtl32::ImageList_Duplicate" );
		CCheckReturn< HIMAGELIST, CCheckNonZero< HIMAGELIST > >::TType Result;
		_WINQ_USESAPI( ImageList_Duplicate );
		Result = Call< HIMAGELIST, HIMAGELIST >( pFunc, himl );
		return Result;
	}

	//--------------------------------------------------------------------------------
	void CComCtl32::ImageList_EndDrag()
	{
		_WINQ_FCONTEXT( "CComCtl32::ImageList_EndDrag" );
		_WINQ_USESAPI( ImageList_EndDrag );
		(pFunc)();
	}

	//--------------------------------------------------------------------------------
	COLORREF CComCtl32::ImageList_GetBkColor( HIMAGELIST himl )
	{
		_WINQ_FCONTEXT( "CComCtl32::ImageList_GetBkColor" );
		COLORREF Result = CLR_NONE;
		_WINQ_USESAPI( ImageList_GetBkColor );
		Result = Call< COLORREF, HIMAGELIST >( pFunc, himl );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HIMAGELIST CComCtl32::ImageList_GetDragImage( ::POINT* ppt, ::POINT* pptHotspot )
	{
		_WINQ_FCONTEXT( "CComCtl32::ImageList_GetDragImage" );
		CCheckReturn< HIMAGELIST, CCheckNonZero< HIMAGELIST > >::TType Result;
		_WINQ_USESAPI( ImageList_GetDragImage );
		Result = Call< HIMAGELIST, ::POINT*, ::POINT* >( pFunc, ppt, pptHotspot );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HICON CComCtl32::ImageList_GetIcon( HIMAGELIST himl, int i, UINT flags )
	{
		_WINQ_FCONTEXT( "CComCtl32::ImageList_GetIcon" );
		CCheckReturn< HICON, CCheckNonZero< HICON > >::TType Result;
		_WINQ_USESAPI( ImageList_GetIcon );
		Result = Call< HICON, HIMAGELIST, int, UINT >( pFunc, himl, i, flags );
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CComCtl32::ImageList_GetIconSize( HIMAGELIST himl, int* cx, int* cy )
	{
		_WINQ_FCONTEXT( "CComCtl32::ImageList_GetIconSize" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		_WINQ_USESAPI( ImageList_GetIconSize );
		bResult = Call< BOOL, HIMAGELIST, int*, int* >( pFunc, himl, cx, cy );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CComCtl32::ImageList_GetImageCount( HIMAGELIST himl )
	{
		_WINQ_FCONTEXT( "CComCtl32::ImageList_GetImageCount" );
		int iResult = 0;
		_WINQ_USESAPI( ImageList_GetImageCount );
		iResult = Call< int, HIMAGELIST >( pFunc, himl );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CComCtl32::ImageList_GetImageInfo( HIMAGELIST himl, int i, IMAGEINFO* pImageInfo )
	{
		_WINQ_FCONTEXT( "CComCtl32::ImageList_GetImageInfo" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( ImageList_GetImageInfo );
		bResult = Call< BOOL, HIMAGELIST, int, IMAGEINFO* >( pFunc, himl, i, pImageInfo );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	HIMAGELIST CComCtl32::ImageList_LoadImage( HINSTANCE hi, LPCTSTR lpbmp, int cx, int cGrow, COLORREF crMask, UINT uType, UINT uFlags )
	{
		_WINQ_FCONTEXT( "CComCtl32::ImageList_LoadImage" );
		CCheckReturn< HIMAGELIST, CCheckNonZero< HIMAGELIST > >::TType Result;
		_WINQ_USESAPI( ImageList_LoadImage );
		Result = Call< HIMAGELIST, HINSTANCE, LPCTSTR, int, int, COLORREF, UINT, UINT >( pFunc, hi, lpbmp, cx, cGrow, crMask, uType, uFlags );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HIMAGELIST CComCtl32::ImageList_Merge( HIMAGELIST himl1, int i1, HIMAGELIST himl2, int i2, int dx, int dy )
	{
		_WINQ_FCONTEXT( "CComCtl32::ImageList_Merge" );
		CCheckReturn< HIMAGELIST, CCheckNonZero< HIMAGELIST > >::TType Result;
		_WINQ_USESAPI( ImageList_Merge );
		Result = Call< HIMAGELIST, HIMAGELIST, int, HIMAGELIST, int, int, int >( pFunc, himl1, i1, himl2, i2, dx, dy );
		return Result;
	}

	//--------------------------------------------------------------------------------
	HIMAGELIST CComCtl32::ImageList_Read( LPSTREAM pstm )
	{
		_WINQ_FCONTEXT( "CComCtl32::ImageList_Read" );
		CCheckReturn< HIMAGELIST, CCheckNonZero< HIMAGELIST > >::TType himl;
		_WINQ_USESAPI( ImageList_Read );
		himl = Call< HIMAGELIST, LPSTREAM >( pFunc, pstm );
		return himl;
	}

	//--------------------------------------------------------------------------------
	HRESULT CComCtl32::ImageList_ReadEx( DWORD dwFlags, LPSTREAM pstm, REFIID riid, void** ppv )
	{
		_WINQ_FCONTEXT( "CComCtl32::ImageList_ReadEx" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hr;
		_WINQ_USESAPI( ImageList_ReadEx );
		hr = Call< HRESULT, DWORD, LPSTREAM, REFIID, void** >( pFunc, dwFlags, pstm, riid, ppv );
		return hr;
	}

	//--------------------------------------------------------------------------------
	BOOL CComCtl32::ImageList_Remove( HIMAGELIST himl, int i )
	{
		_WINQ_FCONTEXT( "CComCtl32::ImageList_Remove" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( ImageList_Remove );
		bResult = Call< BOOL, HIMAGELIST, int >( pFunc, himl, i );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CComCtl32::ImageList_Replace( HIMAGELIST himl, int i, HBITMAP hbmImage, HBITMAP hbmMask )
	{
		_WINQ_FCONTEXT( "CComCtl32::ImageList_Replace" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( ImageList_Replace );
		bResult = Call< BOOL, HIMAGELIST, int, HBITMAP, HBITMAP >( pFunc, himl, i, hbmImage, hbmMask );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CComCtl32::ImageList_ReplaceIcon( HIMAGELIST himl, int i, HICON hicon )
	{
		_WINQ_FCONTEXT( "CComCtl32::ImageList_ReplaceIcon" );
		CCheckReturn< int, CCheckFailureInt< -1 > >::TType iResult;
		_WINQ_USESAPI( ImageList_ReplaceIcon );
		iResult = Call< int, HIMAGELIST, int, HICON >( pFunc, himl, i, hicon );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	COLORREF CComCtl32::ImageList_SetBkColor( HIMAGELIST himl, COLORREF clrBk )
	{
		_WINQ_FCONTEXT( "CComCtl32::ImageList_SetBkColor" );
		COLORREF Result = CLR_NONE;
		_WINQ_USESAPI( ImageList_SetBkColor );
		Result = Call< COLORREF, HIMAGELIST, COLORREF >( pFunc, himl, clrBk );
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CComCtl32::ImageList_SetDragCursorImage( HIMAGELIST himlDrag, int iDrag, int dxHotspot, int dyHotspot )
	{
		_WINQ_FCONTEXT( "CComCtl32::ImageList_SetDragCursorImage" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( ImageList_SetDragCursorImage );
		bResult = Call< BOOL, HIMAGELIST, int, int , int >( pFunc, himlDrag, iDrag, dxHotspot, dyHotspot );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CComCtl32::ImageList_SetIconSize( HIMAGELIST himl, int cx, int cy )
	{
		_WINQ_FCONTEXT( "CComCtl32::ImageList_SetIconSize" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( ImageList_SetIconSize );
		bResult = Call< BOOL, HIMAGELIST, int, int >( pFunc, himl, cx, cy );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CComCtl32::ImageList_SetImageCount( HIMAGELIST himl, UINT uNewCount )
	{
		_WINQ_FCONTEXT( "CComCtl32::ImageList_SetImageCount" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( ImageList_SetImageCount );
		bResult = Call< BOOL, HIMAGELIST, UINT >( pFunc, himl, uNewCount );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CComCtl32::ImageList_SetOverlayImage( HIMAGELIST himl, int iImage, int iOverlay )
	{
		_WINQ_FCONTEXT( "CComCtl32::ImageList_SetOverlayImage" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( ImageList_SetOverlayImage );
		bResult = Call< BOOL, HIMAGELIST, int, int >( pFunc, himl, iImage, iOverlay );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CComCtl32::ImageList_Write( HIMAGELIST himl, LPSTREAM pstm )
	{
		_WINQ_FCONTEXT( "CComCtl32::ImageList_Write" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( ImageList_Write );
		bResult = Call< BOOL, HIMAGELIST, LPSTREAM >( pFunc, himl, pstm );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CComCtl32::ImageList_WriteEx( HIMAGELIST himl, DWORD dwFlags, LPSTREAM pstm )
	{
		_WINQ_FCONTEXT( "CComCtl32::ImageList_WriteEx" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hr;
		_WINQ_USESAPI( ImageList_WriteEx );
		hr = Call< HRESULT, HIMAGELIST, DWORD, LPSTREAM >( pFunc, himl, dwFlags, pstm );
		return hr;
	}

	//--------------------------------------------------------------------------------
	void CComCtl32::InitCommonControls()
	{
		_WINQ_FCONTEXT( "CComCtl32::InitCommonControls" );				
		_WINQ_USESAPI( InitCommonControls );	
		(pFunc)();
	}

	//--------------------------------------------------------------------------------
	BOOL CComCtl32::InitCommonControlsEx( const LPINITCOMMONCONTROLSEX lpInitCtrls )
	{
		_WINQ_FCONTEXT( "CComCtl32::InitCommonControlsEx" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( InitCommonControlsEx );
		bResult = Call< BOOL, const LPINITCOMMONCONTROLSEX >( pFunc, lpInitCtrls );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CComCtl32::InitializeFlatSB( HWND hwnd )
	{
		_WINQ_FCONTEXT( "CComCtl32::InitializeFlatSB" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( InitializeFlatSB );
		bResult = Call< BOOL, HWND >( pFunc, hwnd );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	VOID CComCtl32::InitMUILanguage( LANGID uiLang )
	{
		_WINQ_FCONTEXT( "CComCtl32::InitMUILanguage" );
		_WINQ_USESAPI( InitMUILanguage );
		voidCall< LANGID >( pFunc, uiLang );
	}

	//--------------------------------------------------------------------------------
	int CComCtl32::LBItemFromPt( HWND hLB, ::POINT pt, BOOL bAutoScroll )
	{
		_WINQ_FCONTEXT( "CComCtl32::LBItemFromPt" );
		CCheckReturn< int, CCheckFailureInt< -1 > >::TType iResult;
		_WINQ_USESAPI( LBItemFromPt );
		iResult = Call< int, HWND, ::POINT, BOOL >( pFunc, hLB, pt, bAutoScroll );
		return iResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CComCtl32::MakeDragList( HWND hLB )
	{
		_WINQ_FCONTEXT( "CComCtl32::MakeDragList" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( MakeDragList );
		bResult = Call< BOOL, HWND >( pFunc, hLB );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CComCtl32::MenuHelp( UINT uMsg, WPARAM wParam, LPARAM lParam, HMENU hMainMenu, HINSTANCE hInst, HWND hwndStatus, LPUINT lpwIDs )
	{
		_WINQ_FCONTEXT( "CComCtl32::MenuHelp" );
		_WINQ_USESAPI( MenuHelp );
		voidCall< UINT, WPARAM, LPARAM, HMENU, HINSTANCE, HWND, LPUINT >( pFunc, uMsg, wParam, lParam, hMainMenu, hInst, hwndStatus, lpwIDs );
	}

	//--------------------------------------------------------------------------------
	INT_PTR CComCtl32::PropertySheet( LPCPROPSHEETHEADER lppsph )
	{
		_WINQ_FCONTEXT( "CComCtl32::PropertySheet" );
		CCheckReturn< INT_PTR, CTCheckFailureValue< INT_PTR, -1 > >::TType Result;
		_WINQ_USESAPI( PropertySheet );
		Result = Call< INT_PTR, LPCPROPSHEETHEADER >( pFunc, lppsph );
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CComCtl32::RemoveWindowSubclass( HWND hWnd, SUBCLASSPROC pfnSubclass, UINT_PTR uIdSubclass )
	{
		_WINQ_FCONTEXT( "CComCtl32::RemoveWindowSubclass" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( RemoveWindowSubclass );
		bResult = Call< BOOL, HWND, SUBCLASSPROC, UINT_PTR >( pFunc, hWnd, pfnSubclass, uIdSubclass );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CComCtl32::SetWindowSubclass( HWND hWnd, SUBCLASSPROC pfnSubclass, UINT_PTR uIdSubclass, DWORD_PTR dwRefData )
	{
		_WINQ_FCONTEXT( "CComCtl32::SetWindowSubclass" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( SetWindowSubclass );
		bResult = Call< BOOL, HWND, SUBCLASSPROC, UINT_PTR, DWORD_PTR >( pFunc, hWnd, pfnSubclass, uIdSubclass, dwRefData );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	//NOTE: Deprecated
	BOOL CComCtl32::ShowHideMenuCtl( HWND hWnd, UINT_PTR uFlags, LPINT lpInfo )
	{
		_WINQ_FCONTEXT( "CComCtl32::ShowHideMenuCtl" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( ShowHideMenuCtl );
		bResult = Call< BOOL, HWND, UINT_PTR, LPINT >( pFunc, hWnd, uFlags, lpInfo );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL __QCMP_STDCALLCONVENTION CComCtl32::Str_SetPtrW( LPWSTR* ppszCurrent, LPCWSTR pszNew )
	{
		_WINQ_FCONTEXT( "CComCtl32::Str_SetPtrW" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( Str_SetPtrW );
		bResult = Call< BOOL, LPWSTR*, LPCWSTR >( pFunc, ppszCurrent, pszNew );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CComCtl32::_TrackMouseEvent( LPTRACKMOUSEEVENT lpEventTrack )
	{
		_WINQ_FCONTEXT( "CComCtl32::_TrackMouseEvent" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
		_WINQ_USESAPI( _TrackMouseEvent );
		bResult = Call< BOOL, LPTRACKMOUSEEVENT >( pFunc, lpEventTrack );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CComCtl32::UninitializeFlatSB( HWND hwnd )
	{
		_WINQ_FCONTEXT( "CComCtl32::UninitializeFlatSB" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hr;
		_WINQ_USESAPI( UninitializeFlatSB );
		hr = Call< HRESULT, HWND >( pFunc, hwnd );
		return hr;
	}

}//nsWinQAPI
