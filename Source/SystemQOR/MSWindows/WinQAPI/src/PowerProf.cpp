//PowerProf.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQAPI/WinQAPI.h"
#include "SystemQOR.h"
#include "WinQAPI/Kernel32.h"
#include "WinQAPI/PowerProf.h"
#include "../Source/SystemQOR/MSWindows/WinQAPI/include/ReturnCheck.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//--------------------------------------------------------------------------------
	NTSTATUS CPowerProf::CallNtPowerInformation( POWER_INFORMATION_LEVEL InformationLevel, PVOID lpInputBuffer, ULONG nInputBufferSize, PVOID lpOutputBuffer, ULONG nOutputBufferSize )
	{
		_WINQ_FCONTEXT( "CPowerProf::CallNtPowerInformation" );
		CCheckReturn< NTSTATUS, CTSuccessCheck< NTSTATUS > >::TType Status;
		_WINQ_USESAPI( CallNtPowerInformation );
		Status = Call< long, POWER_INFORMATION_LEVEL, PVOID, ULONG, PVOID, ULONG >( pFunc, InformationLevel, lpInputBuffer, nInputBufferSize, lpOutputBuffer, nOutputBufferSize );
		return Status;
	}

	//--------------------------------------------------------------------------------
	BOOLEAN CPowerProf::CanUserWritePwrScheme()
	{
		_WINQ_FCONTEXT( "CPowerProf::CanUserWritePwrScheme" );
		BOOLEAN bResult = 0;
		_WINQ_USESAPI( CanUserWritePwrScheme );
		bResult = Call< BOOLEAN >( pFunc );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOLEAN CPowerProf::DeletePwrScheme( UINT uiIndex )
	{
		_WINQ_FCONTEXT( "CPowerProf::DeletePwrScheme" );
		BOOLEAN bResult = 0;
		_WINQ_USESAPI( DeletePwrScheme );
		bResult = Call< BOOLEAN, UINT >( pFunc, uiIndex );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOLEAN CPowerProf::DevicePowerClose()
	{
		_WINQ_FCONTEXT( "CPowerProf::DevicePowerClose" );
		BOOLEAN bResult = 0;
		_WINQ_USESAPI( DevicePowerClose );
		bResult = Call< BOOLEAN >( pFunc );
		return bResult;
	}
	
	//--------------------------------------------------------------------------------
	BOOLEAN CPowerProf::DevicePowerEnumDevices( ULONG QueryIndex, ULONG QueryInterpretationFlags, ULONG QueryFlags, PBYTE pReturnBuffer, PULONG pBufferSize )
	{
		_WINQ_FCONTEXT( "CPowerProf::DevicePowerEnumDevices" );
		BOOLEAN bResult = 0;
		_WINQ_USESAPI( DevicePowerEnumDevices );
		bResult = Call< BOOLEAN, ULONG, ULONG, ULONG, PBYTE, PULONG >( pFunc, QueryIndex, QueryInterpretationFlags, QueryFlags, pReturnBuffer, pBufferSize );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOLEAN CPowerProf::DevicePowerOpen( ULONG Flags )
	{
		_WINQ_FCONTEXT( "CPowerProf::DevicePowerOpen" );
		BOOLEAN bResult = 0;
		_WINQ_USESAPI( DevicePowerOpen );
		bResult = Call< BOOLEAN, ULONG >( pFunc, Flags );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CPowerProf::DevicePowerSetDeviceState( LPCWSTR DeviceDescription, ULONG SetFlags, const void* SetData )
	{
		_WINQ_FCONTEXT( "CPowerProf::DevicePowerSetDeviceState" );
		DWORD dwResult = 0;
		_WINQ_USESAPI( DevicePowerSetDeviceState );
		dwResult = Call< DWORD, LPCWSTR, ULONG, const void* >( pFunc, DeviceDescription, SetFlags, SetData );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	BOOLEAN CPowerProf::EnumPwrSchemes( PWRSCHEMESENUMPROC lpfnPwrSchemesEnumProc, LPARAM lParam )
	{
		_WINQ_FCONTEXT( "CPowerProf::EnumPwrSchemes" );
		BOOLEAN bResult = 0;
		_WINQ_USESAPI( EnumPwrSchemes );
		bResult = Call< BOOLEAN, PWRSCHEMESENUMPROC, LPARAM >( pFunc, lpfnPwrSchemesEnumProc, lParam );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOLEAN CPowerProf::GetActivePwrScheme( PUINT puiID )
	{
		_WINQ_FCONTEXT( "CPowerProf::GetActivePwrScheme" );
		BOOLEAN bResult = 0;
		_WINQ_USESAPI( GetActivePwrScheme );
		bResult = Call< BOOLEAN, PUINT >( pFunc, puiID );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOLEAN CPowerProf::GetCurrentPowerPolicies( PGLOBAL_POWER_POLICY pGlobalPowerPolicy, PPOWER_POLICY pPowerPolicy )
	{
		_WINQ_FCONTEXT( "CPowerProf::GetCurrentPowerPolicies" );
		BOOLEAN bResult = 0;
		_WINQ_USESAPI( GetCurrentPowerPolicies );
		bResult = Call< BOOLEAN, PGLOBAL_POWER_POLICY, PPOWER_POLICY >( pFunc, pGlobalPowerPolicy, pPowerPolicy );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOLEAN CPowerProf::GetPwrCapabilities( PSYSTEM_POWER_CAPABILITIES lpSystemPowerCapabilities )
	{
		_WINQ_FCONTEXT( "CPowerProf::GetPwrCapabilities" );
		BOOLEAN bResult = 0;
		_WINQ_USESAPI( GetPwrCapabilities );
		bResult = Call< BOOLEAN, PSYSTEM_POWER_CAPABILITIES >( pFunc, lpSystemPowerCapabilities );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOLEAN CPowerProf::GetPwrDiskSpindownRange( PUINT RangeMax, PUINT RangeMin )
	{
		_WINQ_FCONTEXT( "CPowerProf::GetPwrDiskSpindownRange" );
		BOOLEAN bResult = 0;
		_WINQ_USESAPI( GetPwrDiskSpindownRange );
		bResult = Call< BOOLEAN, PUINT, PUINT >( pFunc, RangeMax, RangeMin );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOLEAN CPowerProf::IsPwrHibernateAllowed()
	{
		_WINQ_FCONTEXT( "CPowerProf::IsPwrHibernateAllowed" );
		BOOLEAN bResult = 0;
		_WINQ_USESAPI( IsPwrHibernateAllowed );
		bResult = Call< BOOLEAN >( pFunc );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOLEAN CPowerProf::IsPwrShutdownAllowed()
	{
		_WINQ_FCONTEXT( "CPowerProf::IsPwrShutdownAllowed" );
		BOOLEAN bResult = 0;
		_WINQ_USESAPI( IsPwrShutdownAllowed );
		bResult = Call< BOOLEAN >( pFunc );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOLEAN CPowerProf::IsPwrSuspendAllowed()
	{
		_WINQ_FCONTEXT( "CPowerProf::IsPwrSuspendAllowed" );
		BOOLEAN bResult = 0;
		_WINQ_USESAPI( IsPwrSuspendAllowed );
		bResult = Call< BOOLEAN >( pFunc );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CPowerProf::IsSystemResumeAutomatic()
	{
		_WINQ_FCONTEXT( "CPowerProf::IsSystemResumeAutomatic" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( IsSystemResumeAutomatic );
		bResult = Call< BOOL >( pFunc );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CPowerProf::PowerCanRestoreIndividualDefaultPowerScheme( const GUID* SchemeGuid )
	{
		_WINQ_FCONTEXT( "CPowerProf::PowerCanRestoreIndividualDefaultPowerScheme" );
		DWORD dwResult = 0;
		_WINQ_USESAPI( PowerCanRestoreIndividualDefaultPowerScheme );
		dwResult = Call< DWORD, const GUID* >( pFunc, SchemeGuid );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CPowerProf::PowerClearRequest( HANDLE PowerRequest, POWER_REQUEST_TYPE RequestType )
	{
		_WINQ_FCONTEXT( "CPowerProf::PowerClearRequest" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( PowerClearRequest );
		bResult = Call< BOOL, HANDLE, POWER_REQUEST_TYPE >( pFunc, PowerRequest, RequestType );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CPowerProf::PowerCreatePossibleSetting( HKEY RootSystemPowerKey, const GUID* SubGroupOfPowerSettingsGuid, const GUID* PowerSettingGuid, ULONG PossibleSettingIndex )
	{
		_WINQ_FCONTEXT( "CPowerProf::PowerCreatePossibleSetting" );
		DWORD dwResult = 0;
		_WINQ_USESAPI( PowerCreatePossibleSetting );
		dwResult = Call< DWORD, HKEY, const GUID*, const GUID*, ULONG >( pFunc, RootSystemPowerKey, SubGroupOfPowerSettingsGuid, PowerSettingGuid, PossibleSettingIndex );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	HANDLE CPowerProf::PowerCreateRequest( PREASON_CONTEXT Context )
	{
		_WINQ_FCONTEXT( "CPowerProf::PowerCreateRequest" );
		HANDLE hResult = INVALID_HANDLE_VALUE;
		_WINQ_USESAPI( PowerCreateRequest );
		hResult = Call< HANDLE, PREASON_CONTEXT >( pFunc, Context );
		return hResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CPowerProf::PowerCreateSetting( HKEY RootSystemPowerKey, const GUID *SubGroupOfPowerSettingsGuid, const GUID *PowerSettingGuid )
	{
		_WINQ_FCONTEXT( "CPowerProf::PowerCreateSetting" );
		DWORD dwResult = 0;
		_WINQ_USESAPI( PowerCreateSetting );
		dwResult = Call< DWORD, HKEY, const GUID*, const GUID* >( pFunc, RootSystemPowerKey, SubGroupOfPowerSettingsGuid, PowerSettingGuid );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CPowerProf::PowerDeleteScheme( HKEY RootPowerKey, const GUID* SchemeGuid )
	{
		_WINQ_FCONTEXT( "CPowerProf::PowerDeleteScheme" );
		DWORD dwResult = 0;
		_WINQ_USESAPI( PowerDeleteScheme );
		dwResult = Call< DWORD, HKEY, const GUID* >( pFunc, RootPowerKey, SchemeGuid );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	POWER_PLATFORM_ROLE CPowerProf::PowerDeterminePlatformRole( void )
	{
		_WINQ_FCONTEXT( "CPowerProf::PowerDeterminePlatformRole" );
		POWER_PLATFORM_ROLE Result = PlatformRoleUnspecified;
		_WINQ_USESAPI( PowerDeterminePlatformRole );
		Result = Call< POWER_PLATFORM_ROLE >( pFunc );
		return Result;
	}

	//--------------------------------------------------------------------------------
	DWORD CPowerProf::PowerDuplicateScheme( HKEY RootPowerKey, const GUID* SourceSchemeGuid, GUID** DestinationSchemeGuid )
	{
		_WINQ_FCONTEXT( "CPowerProf::PowerDuplicateScheme" );
		DWORD dwResult = 0;
		_WINQ_USESAPI( PowerDuplicateScheme );
		dwResult = Call< DWORD, HKEY, const GUID*, GUID** >( pFunc, RootPowerKey, SourceSchemeGuid, DestinationSchemeGuid );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CPowerProf::PowerEnumerate( HKEY RootPowerKey, const GUID* SchemeGuid, const GUID* SubGroupOfPowerSettingsGuid, POWER_DATA_ACCESSOR AccessFlags, ULONG Index, UCHAR* Buffer, DWORD* BufferSize )
	{
		_WINQ_FCONTEXT( "CPowerProf::PowerEnumerate" );
		DWORD dwResult = 0;
		_WINQ_USESAPI( PowerEnumerate );
		dwResult = Call< DWORD, HKEY, const GUID*, const GUID*, POWER_DATA_ACCESSOR, ULONG, UCHAR*, DWORD* >( pFunc, RootPowerKey, SchemeGuid, SubGroupOfPowerSettingsGuid, AccessFlags, Index, Buffer, BufferSize );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CPowerProf::PowerGetActiveScheme( HKEY UserRootPowerKey, GUID** ActivePolicyGuid )
	{
		_WINQ_FCONTEXT( "CPowerProf::PowerGetActiveScheme" );
		DWORD dwResult = 0;
		_WINQ_USESAPI( PowerGetActiveScheme );
		dwResult = Call< DWORD, HKEY, GUID** >( pFunc, UserRootPowerKey, ActivePolicyGuid );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CPowerProf::PowerImportPowerScheme( HKEY RootPowerKey, LPCWSTR ImportFileNamePath, GUID** DestinationSchemeGuid )
	{
		_WINQ_FCONTEXT( "CPowerProf::PowerImportPowerScheme" );
		DWORD dwResult = 0;
		_WINQ_USESAPI( PowerImportPowerScheme );
		dwResult = Call< DWORD, HKEY, LPCWSTR, GUID** >( pFunc, RootPowerKey, ImportFileNamePath, DestinationSchemeGuid );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CPowerProf::PowerReadACDefaultIndex( HKEY RootPowerKey, const GUID* SchemePersonalityGuid, const GUID* SubGroupOfPowerSettingsGuid, const GUID* PowerSettingGuid, LPDWORD AcDefaultIndex )
	{
		_WINQ_FCONTEXT( "CPowerProf::PowerReadACDefaultIndex" );
		DWORD dwResult = 0;
		_WINQ_USESAPI( PowerReadACDefaultIndex );
		dwResult = Call< DWORD, HKEY, const GUID*, const GUID*, const GUID*, LPDWORD >( pFunc, RootPowerKey, SchemePersonalityGuid, SubGroupOfPowerSettingsGuid, PowerSettingGuid, AcDefaultIndex );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CPowerProf::PowerReadACValue( HKEY RootPowerKey, const GUID* SchemeGuid, const GUID* SubGroupOfPowerSettingsGuid, const GUID* PowerSettingGuid, PULONG Type, LPBYTE Buffer, LPDWORD BufferSize )
	{
		_WINQ_FCONTEXT( "CPowerProf::PowerReadACValue" );
		DWORD dwResult = 0;
		_WINQ_USESAPI( PowerReadACValue );
		dwResult = Call< DWORD, HKEY, const GUID*, const GUID*, const GUID*, PULONG, LPBYTE, LPDWORD >( pFunc, RootPowerKey, SchemeGuid, SubGroupOfPowerSettingsGuid, PowerSettingGuid, Type, Buffer, BufferSize );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CPowerProf::PowerReadACValueIndex( HKEY RootPowerKey, const GUID* SchemeGuid, const GUID* SubGroupOfPowerSettingsGuid, const GUID* PowerSettingGuid, LPDWORD AcValueIndex )
	{
		_WINQ_FCONTEXT( "CPowerProf::PowerReadACValueIndex" );
		DWORD dwResult = 0;
		_WINQ_USESAPI( PowerReadACValueIndex );
		dwResult = Call< DWORD, HKEY, const GUID*, const GUID*, const GUID*, LPDWORD >( pFunc, RootPowerKey, SchemeGuid, SubGroupOfPowerSettingsGuid, PowerSettingGuid, AcValueIndex );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CPowerProf::PowerReadDCDefaultIndex( HKEY RootPowerKey, const GUID* SchemePersonalityGuid, const GUID* SubGroupOfPowerSettingsGuid, const GUID* PowerSettingGuid, LPDWORD DcDefaultIndex )
	{
		_WINQ_FCONTEXT( "CPowerProf::PowerReadDCDEfaultIndex" );
		DWORD dwResult = 0;
		_WINQ_USESAPI( PowerReadDCDefaultIndex );
		dwResult = Call< DWORD, HKEY, const GUID*, const GUID*, const GUID*, LPDWORD >( pFunc, RootPowerKey, SchemePersonalityGuid, SubGroupOfPowerSettingsGuid, PowerSettingGuid, DcDefaultIndex );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CPowerProf::PowerReadDCValue( HKEY RootPowerKey, const GUID* SchemeGuid, const GUID* SubGroupOfPowerSettingsGuid, const GUID* PowerSettingGuid, PULONG Type, PUCHAR Buffer, LPDWORD BufferSize )
	{
		_WINQ_FCONTEXT( "CPowerProf::PowerReadDCValue" );
		DWORD dwResult = 0;
		_WINQ_USESAPI( PowerReadDCValue );
		dwResult = Call< DWORD, HKEY, const GUID*, const GUID*, const GUID*, PULONG, PUCHAR, LPDWORD >( pFunc, RootPowerKey, SchemeGuid, SubGroupOfPowerSettingsGuid, PowerSettingGuid, Type, Buffer, BufferSize );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CPowerProf::PowerReadDCValueIndex( HKEY RootPowerKey, const GUID* SchemeGuid, const GUID* SubGroupOfPowerSettingsGuid, const GUID* PowerSettingGuid, LPDWORD DcValueIndex )
	{
		_WINQ_FCONTEXT( "CPowerProf::PowerReadDCValueIndex" );
		DWORD dwResult = 0;
		_WINQ_USESAPI( PowerReadDCValueIndex );
		dwResult = Call< DWORD, HKEY, const GUID*, const GUID*, const GUID*, LPDWORD >( pFunc, RootPowerKey, SchemeGuid, SubGroupOfPowerSettingsGuid, PowerSettingGuid, DcValueIndex );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CPowerProf::PowerReadDescription( HKEY RootPowerKey, const GUID* SchemeGuid, const GUID* SubGroupOfPowerSettingsGuid, const GUID* PowerSettingGuid, PUCHAR Buffer, LPDWORD BufferSize )
	{
		_WINQ_FCONTEXT( "CPowerProf::PowerReadDescription" );
		DWORD dwResult = 0;
		_WINQ_USESAPI( PowerReadDescription );
		dwResult = Call< DWORD, HKEY, const GUID*, const GUID*, const GUID*, PUCHAR, LPDWORD >( pFunc, RootPowerKey, SchemeGuid, SubGroupOfPowerSettingsGuid, PowerSettingGuid, Buffer, BufferSize );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CPowerProf::PowerReadFriendlyName( HKEY RootPowerKey, const GUID* SchemeGuid, const GUID* SubGroupOfPowerSettingsGuid, const GUID* PowerSettingGuid, PUCHAR Buffer, LPDWORD BufferSize )
	{
		_WINQ_FCONTEXT( "CPowerProf::PowerReadFriendlyName" );
		DWORD dwResult = 0;
		_WINQ_USESAPI( PowerReadFriendlyName );
		dwResult = Call< DWORD, HKEY, const GUID*, const GUID*, const GUID*, PUCHAR, LPDWORD >( pFunc, RootPowerKey, SchemeGuid, SubGroupOfPowerSettingsGuid, PowerSettingGuid, Buffer, BufferSize );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CPowerProf::PowerReadIconResourceSpecifier( HKEY RootPowerKey, const GUID *SchemeGuid, const GUID *SubGroupOfPowerSettingsGuid, const GUID *PowerSettingGuid, PUCHAR Buffer, LPDWORD BufferSize )
	{
		_WINQ_FCONTEXT( "CPowerProf::PowerReadIconREsourceSpecifier" );
		DWORD dwResult = 0;
		_WINQ_USESAPI( PowerReadIconResourceSpecifier );
		dwResult = Call< DWORD, HKEY, const GUID*, const GUID*, const GUID*, PUCHAR, LPDWORD >( pFunc, RootPowerKey, SchemeGuid, SubGroupOfPowerSettingsGuid, PowerSettingGuid, Buffer, BufferSize );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CPowerProf::PowerReadPossibleDescription( HKEY RootPowerKey, const GUID* SubGroupOfPowerSettingsGuid, const GUID* PowerSettingGuid, ULONG PossibleSettingIndex, PUCHAR Buffer, LPDWORD BufferSize )
	{
		_WINQ_FCONTEXT( "CPowerProf::PowerReadPossibleDescription" );
		DWORD dwResult = 0;
		_WINQ_USESAPI( PowerReadPossibleDescription );
		dwResult = Call< DWORD, HKEY, const GUID*, const GUID*, ULONG, PUCHAR, LPDWORD >( pFunc, RootPowerKey, SubGroupOfPowerSettingsGuid, PowerSettingGuid, PossibleSettingIndex, Buffer, BufferSize );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CPowerProf::PowerReadPossibleFriendlyName( HKEY RootPowerKey, const GUID* SubGroupOfPowerSettingsGuid, const GUID* PowerSettingGuid, ULONG PossibleSettingIndex, PUCHAR Buffer, LPDWORD BufferSize )
	{
		_WINQ_FCONTEXT( "CPowerProf::PowerReadPossibleFriendlyName" );
		DWORD dwResult = 0;
		_WINQ_USESAPI( PowerReadPossibleFriendlyName );
		dwResult = Call< DWORD, HKEY, const GUID*, const GUID*, ULONG, PUCHAR, LPDWORD >( pFunc, RootPowerKey, SubGroupOfPowerSettingsGuid, PowerSettingGuid, PossibleSettingIndex, Buffer, BufferSize );
		return dwResult;
	}

	//...TODO...

	//--------------------------------------------------------------------------------
	DWORD CPowerProf::PowerSetActiveScheme( HKEY UserRootPowerKey, const GUID* SchemeGuid )
	{
		_WINQ_FCONTEXT( "CPowerProf::PowerSetActiveScheme" );
		DWORD dwResult = 0;
		_WINQ_USESAPI( PowerSetActiveScheme );
		dwResult = Call< DWORD, HKEY, const GUID* >( pFunc, UserRootPowerKey, SchemeGuid );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CPowerProf::PowerSetRequest( HANDLE PowerRequest, POWER_REQUEST_TYPE RequestType )
	{
		_WINQ_FCONTEXT( "CPowerProf::PowerSetRequest" );
		BOOL bResult = FALSE;
		_WINQ_USESAPI( PowerSetRequest );
		bResult = Call< BOOL, HANDLE, POWER_REQUEST_TYPE >( pFunc, PowerRequest, RequestType );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CPowerProf::PowerSettingAccessCheck( POWER_DATA_ACCESSOR AccessFlags, const GUID* PowerGuid )
	{
		_WINQ_FCONTEXT( "CPowerProf::PowerSettingAccessCheck" );
		DWORD dwResult = 0;
		_WINQ_USESAPI( PowerSettingAccessCheck );
		dwResult = Call< DWORD, POWER_DATA_ACCESSOR, const GUID* >( pFunc, AccessFlags, PowerGuid );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	BOOLEAN CPowerProf::ReadGlobalPwrPolicy( PGLOBAL_POWER_POLICY pGlobalPowerPolicy )
	{
		_WINQ_FCONTEXT( "CPowerProf::ReadGlobalPwrPolicy" );
		BOOLEAN bResult = 0;
		_WINQ_USESAPI( ReadGlobalPwrPolicy );
		bResult = Call< BOOLEAN, PGLOBAL_POWER_POLICY >( pFunc, pGlobalPowerPolicy );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOLEAN CPowerProf::ReadProcessorPwrScheme( UINT uiID, PMACHINE_PROCESSOR_POWER_POLICY pMachineProcessorPowerPolicy )
	{
		_WINQ_FCONTEXT( "CPowerProf::ReadProcesorPwrScheme" );
		BOOLEAN bResult = 0;
		_WINQ_USESAPI( ReadProcessorPwrScheme );
		bResult = Call< BOOLEAN, UINT, PMACHINE_PROCESSOR_POWER_POLICY >( pFunc, uiID, pMachineProcessorPowerPolicy );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOLEAN CPowerProf::ReadPwrScheme( UINT uiID, PPOWER_POLICY pPowerPolicy )
	{
		_WINQ_FCONTEXT( "CPowerProf::ReadPwrScheme" );
		BOOLEAN bResult = 0;
		_WINQ_USESAPI( ReadPwrScheme );
		bResult = Call< BOOLEAN, UINT, PPOWER_POLICY >( pFunc, uiID, pPowerPolicy );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOLEAN CPowerProf::SetActivePwrScheme( UINT uiID, PGLOBAL_POWER_POLICY lpGlobalPowerPolicy, PPOWER_POLICY lpPowerPolicy )
	{
		_WINQ_FCONTEXT( "CPowerProf::SetActivePwrScheme" );
		BOOLEAN bResult = 0;
		_WINQ_USESAPI( SetActivePwrScheme );
		bResult = Call< BOOLEAN, UINT, PGLOBAL_POWER_POLICY, PPOWER_POLICY >( pFunc, uiID, lpGlobalPowerPolicy, lpPowerPolicy );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOLEAN CPowerProf::SetSuspendState( BOOLEAN Hibernate, BOOLEAN ForceCritical, BOOLEAN DisableWakeEvent )
	{
		_WINQ_FCONTEXT( "CPowerProf::SetSuspendState" );
		BOOLEAN bResult = 0;
		_WINQ_USESAPI( SetSuspendState );
		bResult = Call< BOOLEAN, BOOLEAN, BOOLEAN, BOOLEAN >( pFunc, Hibernate, ForceCritical, DisableWakeEvent );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CPowerProf::SetSystemPowerState( BOOL fSuspend, BOOL fForce )
	{
		_WINQ_FCONTEXT( "CPowerProf::SetSystemPowerState" );
		BOOL bResult = 0;
		_WINQ_USESAPI( SetSystemPowerState );
		bResult = Call< BOOL, BOOL, BOOL >( pFunc, fSuspend, fForce );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	EXECUTION_STATE CPowerProf::SetThreadExecutionState( EXECUTION_STATE esFlags )
	{
		_WINQ_FCONTEXT( "CPowerProf::SetThreadExecutionState" );
		EXECUTION_STATE Result = 0;
		_WINQ_USESAPI( SetThreadExecutionState );
		Result = Call< EXECUTION_STATE, EXECUTION_STATE >( pFunc, esFlags );
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOLEAN CPowerProf::WriteGlobalPwrPolicy( PGLOBAL_POWER_POLICY pGlobalPowerPolicy )
	{
		_WINQ_FCONTEXT( "CPowerProf::WriteGlobalPwrPolicy" );
		BOOLEAN bResult = 0;
		_WINQ_USESAPI( WriteGlobalPwrPolicy );
		bResult = Call< BOOLEAN, PGLOBAL_POWER_POLICY >( pFunc, pGlobalPowerPolicy );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOLEAN CPowerProf::WriteProcessorPwrScheme( UINT ID, PMACHINE_PROCESSOR_POWER_POLICY pMachineProcessorPowerPolicy )
	{
		_WINQ_FCONTEXT( "CPowerProf::WriteProcessorPwrScheme" );
		BOOLEAN bResult = 0;
		_WINQ_USESAPI( WriteProcessorPwrScheme );
		bResult = Call< BOOLEAN, UINT, PMACHINE_PROCESSOR_POWER_POLICY >( pFunc, ID, pMachineProcessorPowerPolicy );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOLEAN CPowerProf::WritePwrScheme( PUINT puiID, LPWSTR lpszName, LPWSTR lpszDescription, PPOWER_POLICY pPowerPolicy )
	{
		_WINQ_FCONTEXT( "CPowerProf::WritePwrScheme" );
		BOOLEAN bResult = 0;
		_WINQ_USESAPI( WritePwrScheme );
		bResult = Call< BOOLEAN, PUINT, LPWSTR, LPWSTR, PPOWER_POLICY >( pFunc, puiID, lpszName, lpszDescription, pPowerPolicy );
		return bResult;
	}

}//nsWinQAPI

