//MedFoundAPI.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQAPI/WinQAPI.h"
#include "SystemQOR.h"
#include "WinQAPI/MedFoundAPI.h"
#include "ReturnCheck.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//--------------------------------------------------------------------------------
	HRESULT CMFPlay::MFPCreateMediaPlayer( LPCWSTR pwszURL, BOOL fStartPlayback, MFP_CREATION_OPTIONS creationOptions, IMFPMediaPlayerCallback* pCallback, HWND hWnd, IMFPMediaPlayer** ppMediaPlayer )
	{
		_WINQ_FCONTEXT( "CEVRAPI::MFPCreateMediaPlayer" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0601 )
		_WINQ_USESAPI( MFPCreateMediaPlayer );
		hResult = Call< HRESULT, LPCWSTR, BOOL, MFP_CREATION_OPTIONS, IMFPMediaPlayerCallback*, HWND, IMFPMediaPlayer** >( pFunc, pwszURL, fStartPlayback, creationOptions, pCallback, hWnd, ppMediaPlayer );
#else
		__QCMP_UNREF4( pwszURL, fStartPlayback, creationOptions, pCallback );
		__QCMP_UNREF( hWnd );
		__QCMP_UNREF( ppMediaPlayer );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFPCreateMediaPlayer" ), _T( "Windows 7" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0601 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CEVRAPI::MFCreateVideoMixer( IUnknown* pOwner, REFIID riidDevice, REFIID riid, void** ppVideoMixer )
	{
		_WINQ_FCONTEXT( "CEVRAPI::MFCreateVideoMixer" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateVideoMixer );
		hResult = Call< HRESULT, IUnknown*, REFIID, REFIID, void** >( pFunc, pOwner, riidDevice, riid, ppVideoMixer );
#else
		__QCMP_UNREF4( pOwner, riidDevice, riid, ppVideoMixer );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateVideoMixer" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CEVRAPI::MFCreateVideoMixerAndPresenter( IUnknown* pMixerOwner, IUnknown* pPresenterOwner, REFIID riidMixer, void** ppvVideoMixer, REFIID riidPresenter, void** ppvVideoPresenter )
	{
		_WINQ_FCONTEXT( "CEVRAPI::MFCreateVideoMixerAndPresenter" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateVideoMixerAndPresenter );
		hResult = Call< HRESULT, IUnknown*, IUnknown*, REFIID, void**, REFIID, void** >( pFunc, pMixerOwner, pPresenterOwner, riidMixer, ppvVideoMixer, riidPresenter, ppvVideoPresenter );
#else
		__QCMP_UNREF4( pMixerOwner, pPresenterOwner, riidMixer, ppvVideoMixer );
		__QCMP_UNREF( riidPresenter );
		__QCMP_UNREF( ppvVideoPresenter );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateVideoMixerAndPresenter" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CEVRAPI::MFCreateVideoPresenter( IUnknown* pOwner, REFIID riidDevice, REFIID riid, void** ppvVideoPresenter )
	{
		_WINQ_FCONTEXT( "CEVRAPI::MFCreateVideoPresenter" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateVideoPresenter );
		hResult = Call< HRESULT, IUnknown*, REFIID, REFIID, void** >( pFunc, pOwner, riidDevice, riid, ppvVideoPresenter );
#else
		__QCMP_UNREF4( pOwner, riidDevice, riid, ppvVideoPresenter );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateVideoPresenter" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CEVRAPI::MFCreateVideoSampleAllocator( REFIID riid, void** ppSampleAllocator )
	{
		_WINQ_FCONTEXT( "CEVRAPI::MFCreateVideoSampleAllocator" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateVideoSampleAllocator );
		hResult = Call< HRESULT, REFIID, void** >( pFunc, riid, ppSampleAllocator );
#else
		__QCMP_UNREF( riid );
		__QCMP_UNREF( ppSampleAllocator );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateVideoSampleAllocator" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CEVRAPI::MFCreateVideoSampleFromSurface( IUnknown* pUnkSurface, IMFSample** ppSample )
	{
		_WINQ_FCONTEXT( "CEVRAPI::MFCreateVideoSampleFromSurface" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateVideoSampleFromSurface );
		hResult = Call< HRESULT, IUnknown*, IMFSample** >( pFunc, pUnkSurface, ppSample );
#else
		__QCMP_UNREF( pUnkSurface );
		__QCMP_UNREF( ppSample );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateVideoSampleFromSurface" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CEVRAPI::MFIsFormatYUV( DWORD Format )
	{
		_WINQ_FCONTEXT( "CEVRAPI::MFIsFormatYUV" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFIsFormatYUV );
		hResult = Call< BOOL, DWORD >( pFunc, Format );
#else
		__QCMP_UNREF( Format );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFIsFormatYUV" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------

	//--------------------------------------------------------------------------------
	HRESULT CMFReadWrite::MFCreateSinkWriterFromMediaSink( IMFMediaSink* pMediaSink, IMFAttributes* pAttributes, IMFSinkWriter** ppSinkWriter )
	{
		_WINQ_FCONTEXT( "CMFReadWrite::MFCreateSinkWriterFromMediaSink" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0601 )
		_WINQ_USESAPI( MFCreateSinkWriterFromMediaSink );
		hResult = Call< HRESULT, IMFMediaSink*, IMFAttributes*, IMFSinkWriter** >( pFunc, pMediaSink, pAttributes, ppSinkWriter );
#else
		__QCMP_UNREF( pMediaSink );
		__QCMP_UNREF( pAttributes );
		__QCMP_UNREF( ppSinkWriter );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateSinkWriterFromMediaSink" ), _T( "Windows 7" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0601 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFReadWrite::MFCreateSinkWriterFromURL( LPCWSTR pwszOutputURL, IMFByteStream* pByteStream, IMFAttributes* pAttributes, IMFSinkWriter** ppSinkWriter )
	{
		_WINQ_FCONTEXT( "CMFReadWrite::MFCreateSinkWriterFromURL" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0601 )
		_WINQ_USESAPI( MFCreateSinkWriterFromURL );
		hResult = Call< HRESULT, LPCWSTR, IMFByteStream*, IMFAttributes*, IMFSinkWriter** >( pFunc, pwszOutputURL, pByteStream, pAttributes, ppSinkWriter );
#else
		__QCMP_UNREF4( pwszOutputURL, pByteStream, pAttributes, ppSinkWriter );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateSinkWriterFromURL" ), _T( "Windows 7" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0601 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFReadWrite::MFCreateSourceReaderFromByteStream( IMFByteStream* pByteStream, IMFAttributes* pAttributes, IMFSourceReader** ppSourceReader )
	{
		_WINQ_FCONTEXT( "CMFReadWrite::MFCreateSourceReaderFromByteStream" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0601 )
		_WINQ_USESAPI( MFCreateSourceReaderFromByteStream );
		hResult = Call< HRESULT, IMFByteStream*, IMFAttributes*, IMFSourceReader** >( pFunc, pByteStream, pAttributes, ppSourceReader );
#else
		__QCMP_UNREF( pByteStream );
		__QCMP_UNREF( pAttributes );
		__QCMP_UNREF( ppSourceReader );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateSourceReaderFromByteStream" ), _T( "Windows 7" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0601 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFReadWrite::MFCreateSourceReaderFromMediaSource( IMFMediaSource* pMediaSource, IMFAttributes* pAttributes, IMFSourceReader** ppSourceReader )
	{
		_WINQ_FCONTEXT( "CMFReadWrite::MFCreateSourceReaderFromMediaSource" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0601 )
		_WINQ_USESAPI( MFCreateSourceReaderFromMediaSource );
		hResult = Call< HRESULT, IMFMediaSource*, IMFAttributes*, IMFSourceReader** >( pFunc, pMediaSource, pAttributes, ppSourceReader );
#else
		__QCMP_UNREF( pMediaSource );
		__QCMP_UNREF( pAttributes );
		__QCMP_UNREF( ppSourceReader );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateSourceReaderFromMediaSource" ), _T( "Windows 7" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0601 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFReadWrite::MFCreateSourceReaderFromURL( LPCWSTR pwszURL, IMFAttributes* pAttributes, IMFSourceReader** ppSourceReader )
	{
		_WINQ_FCONTEXT( "CMFReadWrite::MFCreateSourceReaderFromURL" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0601 )
		_WINQ_USESAPI( MFCreateSourceReaderFromURL );
		hResult = Call< HRESULT, LPCWSTR, IMFAttributes*, IMFSourceReader** >( pFunc, pwszURL, pAttributes, ppSourceReader );
#else
		__QCMP_UNREF( pwszURL );
		__QCMP_UNREF( pAttributes );
		__QCMP_UNREF( ppSourceReader );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateSourceReaderFromURL" ), _T( "Windows 7" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0601 )
		return hResult;
	}


	//--------------------------------------------------------------------------------

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreate3GPMediaSink( IMFByteStream* pIByteStream, IMFMediaType* pVideoMediaType, IMFMediaType* pAudioMediaType, IMFMediaSink** ppIMediaSink )
	{
		_WINQ_FCONTEXT( "CMF::MFCreate3GPMediaSink" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0601 )
		_WINQ_USESAPI( MFCreate3GPMediaSink );
		hResult = Call< HRESULT, IMFByteStream*, IMFMediaType*, IMFMediaType*, IMFMediaSink** >( pFunc, pIByteStream, pVideoMediaType, pAudioMediaType, ppIMediaSink );
#else
		__QCMP_UNREF4( pIByteStream, pVideoMediaType, pAudioMediaType, ppIMediaSink );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreate3GPMediaSink" ), _T( "Windows 7" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0601 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreateAggregateSource( IMFCollection* pSourceCollection, IMFMediaSource** ppAggSource )
	{
		_WINQ_FCONTEXT( "CMF::MFCreateAggregateSource" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0601 )
		_WINQ_USESAPI( MFCreateAggregateSource );
		hResult = Call< HRESULT, IMFCollection*, IMFMediaSource** >( pFunc, pSourceCollection, ppAggSource );
#else
		__QCMP_UNREF( pSourceCollection );
		__QCMP_UNREF( ppAggSource );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateAggregateSource" ), _T( "Windows 7" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0601 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreateASFContentInfo( IMFASFContentInfo** ppIContentInfo )
	{
		_WINQ_FCONTEXT( "CMF::MFCreateASFContentInfo" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateASFContentInfo );
		hResult = Call< HRESULT, IMFASFContentInfo** >( pFunc, ppIContentInfo );
#else
		__QCMP_UNREF( ppIContentInfo );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateASFContentInfo" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreateASFIndexer( IMFASFIndexer** ppIIndexer )
	{
		_WINQ_FCONTEXT( "CMF::MFCreateASFIndexer" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateASFIndexer );
		hResult = Call< HRESULT, IMFASFIndexer** >( pFunc, ppIIndexer );
#else
		__QCMP_UNREF( ppIIndexer );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateASFIndexer" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreateASFIndexerByteStream( IMFByteStream* pIContentByteStream, QWORD cbIndexStartOffset, IMFByteStream** pIIndexByteStream )
	{
		_WINQ_FCONTEXT( "CMF::MFCreateASFIndexerByteStream" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateASFIndexerByteStream );
		hResult = Call< HRESULT, IMFByteStream*, QWORD, IMFByteStream** >( pFunc, pIContentByteStream, cbIndexStartOffset, pIIndexByteStream );
#else
		__QCMP_UNREF( pIContentByteStream );
		__QCMP_UNREF( cbIndexStartOffset );
		__QCMP_UNREF( pIIndexByteStream );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateASFIndexerByteStream" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreateASFMediaSink( IMFByteStream* pIByteStream, IMFMediaSink** ppIMediaSink )
	{
		_WINQ_FCONTEXT( "CMF::MFCreateASFMediaSink" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateASFMediaSink );
		hResult = Call< HRESULT, IMFByteStream*, IMFMediaSink** >( pFunc, pIByteStream, ppIMediaSink );
#else
		__QCMP_UNREF( pIByteStream )
		__QCMP_UNREF( ppIMediaSink );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateASFMediaSink" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreateASFMediaSinkActivate( LPCWSTR pwszFileName, IMFASFContentInfo* pContentInfo, IMFActivate** ppIActivate )
	{
		_WINQ_FCONTEXT( "CMF::MFCreateASFMediaSinkActivate" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateASFMediaSinkActivate );
		hResult = Call< HRESULT, LPCWSTR, IMFASFContentInfo*, IMFActivate** >( pFunc, pwszFileName, pContentInfo, ppIActivate );
#else
		__QCMP_UNREF( pwszFileName )
		__QCMP_UNREF( pContentInfo );
		__QCMP_UNREF( ppIActivate );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateASFMediaSinkActivate" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreateASFMultiplexer( IMFASFMultiplexer** ppIMultiplexer )
	{
		_WINQ_FCONTEXT( "CMF::MFCreateASFMultiplexer" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateASFMultiplexer );
		hResult = Call< HRESULT, IMFASFMultiplexer** >( pFunc, ppIMultiplexer );
#else
		__QCMP_UNREF( ppIMultiplexer )
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateASFMultiplexer" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreateASFProfile( IMFASFProfile** ppIProfile )
	{
		_WINQ_FCONTEXT( "CMF::MFCreateASFProfile" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateASFProfile );
		hResult = Call< HRESULT, IMFASFProfile** >( pFunc, ppIProfile );
#else
		__QCMP_UNREF( ppIProfile )
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateASFProfile" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreateASFProfileFromPresentationDescriptor( IMFPresentationDescriptor* pIPD, IMFASFProfile** ppIProfile )
	{
		_WINQ_FCONTEXT( "CMF::MFCreateASFProfileFromPresentationDescriptor" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateASFProfileFromPresentationDescriptor );
		hResult = Call< HRESULT, IMFPresentationDescriptor*, IMFASFProfile** >( pFunc, pIPD, ppIProfile );
#else
		__QCMP_UNREF( pIPD );
		__QCMP_UNREF( ppIProfile )
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateASFProfileFromPresentationDescriptor" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreateASFSplitter( IMFASFSplitter** ppISplitter )
	{
		_WINQ_FCONTEXT( "CMF::MFCreateASFSplitter" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateASFSplitter );
		hResult = Call< HRESULT, IMFASFSplitter** >( pFunc, ppISplitter );
#else
		__QCMP_UNREF( ppISplitter );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateASFSplitter" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreateASFStreamingMediaSink( IMFByteStream* pIByteStream, IMFMediaSink** ppIMediaSink )
	{
		_WINQ_FCONTEXT( "CMF::MFCreateASFStreamingMediaSink" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0601 )
		_WINQ_USESAPI( MFCreateASFStreamingMediaSink );
		hResult = Call< HRESULT, IMFByteStream*, IMFMediaSink** >( pFunc, pIByteStream, ppIMediaSink );
#else
		__QCMP_UNREF( pIByteStream );
		__QCMP_UNREF( ppIMediaSink );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateASFStreamingMediaSink" ), _T( "Windows 7" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0601 )
		return hResult;
	}
	
	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreateASFStreamingMediaSinkActivate( IMFActivate* pByteStreamActivate, IMFASFContentInfo* pContentInfo, IMFActivate** ppIActivate )
	{
		_WINQ_FCONTEXT( "CMF::MFCreateASFStreamingMediaSinkActivate" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0601 )
		_WINQ_USESAPI( MFCreateASFStreamingMediaSinkActivate );
		hResult = Call< HRESULT, IMFActivate*, IMFASFContentInfo*, IMFActivate** >( pFunc, pByteStreamActivate, pContentInfo, ppIActivate );
#else
		__QCMP_UNREF( pByteStreamActivate );
		__QCMP_UNREF( pContentInfo );
		__QCMP_UNREF( ppIActivate );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateASFStreamingMediaSinkActivate" ), _T( "Windows 7" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0601 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreateAudioRenderer( IMFAttributes* pAudioAttributes, IMFMediaSink** ppSink )
	{
		_WINQ_FCONTEXT( "CMF::MFCreateAudioRenderer" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateAudioRenderer );
		hResult = Call< HRESULT, IMFAttributes*, IMFMediaSink** >( pFunc, pAudioAttributes, ppSink );
#else
		__QCMP_UNREF( pAudioAttributes );
		__QCMP_UNREF( ppSink );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateAudioRenderer" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreateAudioRendererActivate( IMFActivate** ppActivate )
	{
		_WINQ_FCONTEXT( "CMF::MFCreateAudioRendererActivate" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateAudioRendererActivate );
		hResult = Call< HRESULT, IMFActivate** >( pFunc, ppActivate );
#else
		__QCMP_UNREF( ppActivate );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateAudioRendererActivate" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreateCredentialCache( IMFNetCredentialCache** ppCache )
	{
		_WINQ_FCONTEXT( "CMF::MFCreateCredentialCache" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateCredentialCache );
		hResult = Call< HRESULT, IMFNetCredentialCache** >( pFunc, ppCache );
#else
		__QCMP_UNREF( ppCache );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateCredentialCache" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreateDeviceSource( IMFAttributes* pAttributes, IMFMediaSource** ppSource )
	{
		_WINQ_FCONTEXT( "CMF::MFCreateDeviceSource" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0601 )
		_WINQ_USESAPI( MFCreateDeviceSource );
		hResult = Call< HRESULT, IMFAttributes*, IMFMediaSource** >( pFunc, pAttributes, ppSource );
#else
		__QCMP_UNREF( pAttributes );
		__QCMP_UNREF( ppSource );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateDeviceSource" ), _T( "Windows 7" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0601 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreateDeviceSourceActivate( IMFAttributes* pAttributes, IMFActivate** ppActivate )
	{
		_WINQ_FCONTEXT( "CMF::MFCreateDeviceSourceActivate" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0601 )
		_WINQ_USESAPI( MFCreateDeviceSourceActivate );
		hResult = Call< HRESULT, IMFAttributes*, IMFActivate** >( pFunc, pAttributes, ppActivate );
#else
		__QCMP_UNREF( pAttributes );
		__QCMP_UNREF( ppActivate );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateDeviceSourceActivate" ), _T( "Windows 7" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0601 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreatePMPMediaSession( DWORD dwCreationFlags, IMFAttributes* pConfiguration, IMFMediaSession** ppMediaSession, IMFActivate** ppEnablerActivate )
	{
		_WINQ_FCONTEXT( "CMF::MFCreatePMPMediaSession" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreatePMPMediaSession );
		hResult = Call< HRESULT, DWORD, IMFAttributes*, IMFMediaSession**, IMFActivate** >( pFunc, dwCreationFlags, pConfiguration, ppMediaSession, ppEnablerActivate );
#else
		__QCMP_UNREF4( dwCreationFlags, pConfiguration, ppMediaSession, ppEnablerActivate );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreatePMPMediaSession" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreateMP3MediaSink( IMFByteStream* pTargetByteStream, IMFMediaSink** ppMediaSink )
	{
		_WINQ_FCONTEXT( "CMF::MFCreateMP3MediaSink" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0601 )
		_WINQ_USESAPI( MFCreateMP3MediaSink );
		hResult = Call< HRESULT, IMFByteStream*, IMFMediaSink** >( pFunc, pTargetByteStream, ppMediaSink );
#else
		__QCMP_UNREF( pTargetByteStream );
		__QCMP_UNREF( ppMediaSink );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateMP3MediaSink" ), _T( "Windows 7" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0601 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreateMPEG4MediaSink( IMFByteStream* pIByteStream, IMFMediaType* pVideoMediaType, IMFMediaType* pAudioMediaType, IMFMediaSink** ppIMediaSink )
	{
		_WINQ_FCONTEXT( "CMF::MFCreateMPEG4MediaSink" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0601 )
		_WINQ_USESAPI( MFCreateMPEG4MediaSink );
		hResult = Call< HRESULT, IMFByteStream*, IMFMediaType*, IMFMediaType*, IMFMediaSink** >( pFunc, pIByteStream, pVideoMediaType, pAudioMediaType, ppIMediaSink );
#else
		__QCMP_UNREF4( pIByteStream, pVideoMediaType, pAudioMediaType, ppIMediaSink );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateMPEG4MediaSink" ), _T( "Windows 7" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0601 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreateNetSchemePlugin( REFIID riid, LPVOID* ppvHandler )
	{
		_WINQ_FCONTEXT( "CMF::MFCreateNetSchemePlugin" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateNetSchemePlugin );
		hResult = Call< HRESULT, REFIID, LPVOID* >( pFunc, riid, ppvHandler );
#else
		__QCMP_UNREF( riid );
		__QCMP_UNREF( ppvHandler );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateNetSchemePugin" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreatePMPServer( DWORD dwCreationFlags, IMFPMPServer** ppPMPServer )
	{
		_WINQ_FCONTEXT( "CMF::MFCreatePMPServer" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreatePMPServer );
		hResult = Call< HRESULT, DWORD, IMFPMPServer** >( pFunc, dwCreationFlags, ppPMPServer );
#else
		__QCMP_UNREF( dwCreationFlags );
		__QCMP_UNREF( ppPMPServer );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreatePMPServer" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreatePresentationClock( IMFPresentationClock** ppPresentationClock )
	{
		_WINQ_FCONTEXT( "CMF::MFCreatePresentationClock" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreatePresentationClock );
		hResult = Call< HRESULT, IMFPresentationClock** >( pFunc, ppPresentationClock );
#else
		__QCMP_UNREF( ppPresentationClock );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreatePresentationClock" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreatePresentationDescriptorFromASFProfile( IMFASFProfile* pIProfile, IMFPresentationDescriptor** ppIPD )
	{
		_WINQ_FCONTEXT( "CMF::MFCreatePresentationDescriptorFromASFProfile" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreatePresentationDescriptorFromASFProfile );
		hResult = Call< HRESULT, IMFASFProfile*, IMFPresentationDescriptor** >( pFunc, pIProfile, ppIPD );
#else
		__QCMP_UNREF( pIProfile );
		__QCMP_UNREF( ppIPD );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreatePresentationDescriptorFromASFProfile" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreateProxyLocator( LPCWSTR pszProtocol, IPropertyStore* pProxyConfig, IMFNetProxyLocator** ppProxyLocator )
	{
		_WINQ_FCONTEXT( "CMF::MFCreateProxyLocator" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateProxyLocator );
		hResult = Call< HRESULT, LPCWSTR, IPropertyStore*, IMFNetProxyLocator** >( pFunc, pszProtocol, pProxyConfig, ppProxyLocator );
#else
		__QCMP_UNREF( pszProtocol );
		__QCMP_UNREF( pProxyConfig );
		__QCMP_UNREF( ppProxyLocator );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateProxyLocator" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreateRemoteDesktopPlugin( IMFRemoteDesktopPlugin** ppPlugin )
	{
		_WINQ_FCONTEXT( "CMF::MFCreateRemoteDesktopPlugin" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateRemoteDesktopPlugin );
		hResult = Call< HRESULT, IMFRemoteDesktopPlugin** >( pFunc, ppPlugin );
#else
		__QCMP_UNREF( ppPlugin );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateRemoteDesktopPlugin" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreateSampleCopierMFT( IMFTransform** ppCopierMFT )
	{
		_WINQ_FCONTEXT( "CMF::MFCreateSampleCopierMFT" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0601 )
		_WINQ_USESAPI( MFCreateSampleCopierMFT );
		hResult = Call< HRESULT, IMFTransform** >( pFunc, ppCopierMFT );
#else
		__QCMP_UNREF( ppCopierMFT );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateSampleCopierMFT" ), _T( "Windows 7" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0601 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreateSampleGrabberSinkActivate( IMFMediaType* pIMFMediaType, IMFSampleGrabberSinkCallback* pIMFSampleGrabberSinkCallback, IMFActivate** ppIActivate )
	{
		_WINQ_FCONTEXT( "CMF::MFCreateSampleGrabberSinkActivate" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateSampleGrabberSinkActivate );
		hResult = Call< HRESULT, IMFMediaType*, IMFSampleGrabberSinkCallback*, IMFActivate** >( pFunc, pIMFMediaType, pIMFSampleGrabberSinkCallback, ppIActivate );
#else
		__QCMP_UNREF( pIMFMediaType );
		__QCMP_UNREF( pIMFSampleGrabberSinkCallback );
		__QCMP_UNREF( ppIActivate );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateSampleGrabberSinkActivate" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreateSequencerSegmentOffset( MFSequencerElementId dwId, MFTIME hnsOffset, PROPVARIANT* pvarSegmentOffset )
	{
		_WINQ_FCONTEXT( "CMF::MFCreateSequencerSegmentOffset" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateSequencerSegmentOffset );
		hResult = Call< HRESULT, MFSequencerElementId, MFTIME, PROPVARIANT* >( pFunc, dwId, hnsOffset, pvarSegmentOffset );
#else
		__QCMP_UNREF( dwId );
		__QCMP_UNREF( hnsOffset );
		__QCMP_UNREF( pvarSegmentOffset );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateSequencerSegmentOffset" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreateSequencerSource( IUnknown* pReserved, IMFSequencerSource** ppSequencerSource )
	{
		_WINQ_FCONTEXT( "CMF::MFCreateSequencerSource" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateSequencerSource );
		hResult = Call< HRESULT, IUnknown*, IMFSequencerSource** >( pFunc, pReserved, ppSequencerSource );
#else
		__QCMP_UNREF( pReserved );
		__QCMP_UNREF( ppSequencerSource );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateSequencerSource" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreateSimpleTypeHandler( IMFMediaTypeHandler** ppHandler )
	{
		_WINQ_FCONTEXT( "CMF::MFCreateSimpleTypeHandler" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateSimpleTypeHandler );
		hResult = Call< HRESULT, IMFMediaTypeHandler** >( pFunc, ppHandler );
#else
		__QCMP_UNREF( ppHandler );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateSimpleTypeHandler" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreateStandardQualityManager( IMFQualityManager** ppQualityManager )
	{
		_WINQ_FCONTEXT( "CMF::MFCreateStandardQualityManager" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateStandardQualityManager );
		hResult = Call< HRESULT, IMFQualityManager** >( pFunc, ppQualityManager );
#else
		__QCMP_UNREF( ppQualityManager );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateStandardQualityManager" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreateTopoLoader( IMFTopoLoader** ppObj )
	{
		_WINQ_FCONTEXT( "CMF::MFCreateTopoLoader" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateTopoLoader );
		hResult = Call< HRESULT, IMFTopoLoader** >( pFunc, ppObj );
#else
		__QCMP_UNREF( ppObj );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateTopoLoader" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreateTopology( IMFTopology** ppTopo )
	{
		_WINQ_FCONTEXT( "CMF::MFCreateTopology" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateTopology );
		hResult = Call< HRESULT, IMFTopology** >( pFunc, ppTopo );
#else
		__QCMP_UNREF( ppTopo );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateTopology" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreateTopologyNode( MF_TOPOLOGY_TYPE NodeType, IMFTopologyNode** ppNode )
	{
		_WINQ_FCONTEXT( "CMF::MFCreateTopologyNode" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateTopologyNode );
		hResult = Call< HRESULT, MF_TOPOLOGY_TYPE, IMFTopologyNode** >( pFunc, NodeType, ppNode );
#else
		__QCMP_UNREF( NodeType );
		__QCMP_UNREF( ppNode );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateTopologyNode" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreateTranscodeProfile( IMFTranscodeProfile** ppTranscodeProfile )
	{
		_WINQ_FCONTEXT( "CMF::MFCreateTranscodeProfile" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0601 )
		_WINQ_USESAPI( MFCreateTranscodeProfile );
		hResult = Call< HRESULT, IMFTranscodeProfile** >( pFunc, ppTranscodeProfile );
#else
		__QCMP_UNREF( ppTranscodeProfile );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateTranscodeProfile" ), _T( "Windows 7" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0601 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreateTranscodeSinkActivate( IMFActivate** ppActivate )
	{
		_WINQ_FCONTEXT( "CMF::MFCreateTranscodeSinkActivate" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0601 )
		_WINQ_USESAPI( MFCreateTranscodeSinkActivate );
		hResult = Call< HRESULT, IMFActivate** >( pFunc, ppActivate );
#else
		__QCMP_UNREF( ppActivate );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateTranscodeSinkActivate" ), _T( "Windows 7" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0601 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreateTranscodeTopology( IMFMediaSource* pSrc, LPCWSTR pwszOutputFilePath, IMFTranscodeProfile* pProfile, IMFTopology** ppTranscodeTopo )
	{
		_WINQ_FCONTEXT( "CMF::MFCreateTranscodeTopology" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0601 )
		_WINQ_USESAPI( MFCreateTranscodeTopology );
		hResult = Call< HRESULT, IMFMediaSource*, LPCWSTR, IMFTranscodeProfile*, IMFTopology** >( pFunc, pSrc, pwszOutputFilePath, pProfile, ppTranscodeTopo );
#else
		__QCMP_UNREF4( pSrc, pwszOutputFilePath, pProfile, ppTranscodeTopo );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateTranscodeTopology" ), _T( "Windows 7" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0601 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreateVideoRenderer( REFIID riidRenderer, void** ppVideoRenderer )
	{
		_WINQ_FCONTEXT( "CMF::MFCreateVideoRenderer" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateVideoRenderer );
		hResult = Call< HRESULT, REFIID, void** >( pFunc, riidRenderer, ppVideoRenderer );
#else
		__QCMP_UNREF( riidRenderer );
		__QCMP_UNREF( ppVideoRenderer );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateVideoRenderer" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreateVideoRendererActivate( HWND hwndVideo, IMFActivate** ppActivate )
	{
		_WINQ_FCONTEXT( "CMF::MFCreateVideoRendererActivate" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateVideoRendererActivate );
		hResult = Call< HRESULT, HWND, IMFActivate** >( pFunc, hwndVideo, ppActivate );
#else
		__QCMP_UNREF( hwndVideo );
		__QCMP_UNREF( ppActivate );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateVideoRendererActivate" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreateWMAEncoderActivate( IMFMediaType* pMediaType, IPropertyStore* pEncodingConfigurationProperties, IMFActivate** ppActivate )
	{
		_WINQ_FCONTEXT( "CMF::MFCreateWMAEncoderActivate" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateWMAEncoderActivate );
		hResult = Call< HRESULT, IMFMediaType*, IPropertyStore*, IMFActivate** >( pFunc, pMediaType, pEncodingConfigurationProperties, ppActivate );
#else
		__QCMP_UNREF( pMediaType );
		__QCMP_UNREF( pEncodingConfigurationProperties );
		__QCMP_UNREF( ppActivate );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateWMAEncoderActivate" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFCreateWMVEncoderActivate( IMFMediaType* pMediaType, IPropertyStore* pEncodingConfigurationProperties, IMFActivate** ppActivate )
	{
		_WINQ_FCONTEXT( "CMF::MFCreateWMVEncoderActivate" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateWMVEncoderActivate );
		hResult = Call< HRESULT, IMFMediaType*, IPropertyStore*, IMFActivate** >( pFunc, pMediaType, pEncodingConfigurationProperties, ppActivate );
#else
		__QCMP_UNREF( pMediaType );
		__QCMP_UNREF( pEncodingConfigurationProperties );
		__QCMP_UNREF( ppActivate );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateWMVEncoderActivate" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFGetSupportedMimeTypes( PROPVARIANT* pPropVarMimeTypeArray )
	{
		_WINQ_FCONTEXT( "CMF::MFGetSupportedMimeTypes" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFGetSupportedMimeTypes );
		hResult = Call< HRESULT, PROPVARIANT* >( pFunc, pPropVarMimeTypeArray );
#else
		__QCMP_UNREF( pPropVarMimeTypeArray );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFGetSupportedMimeTypes" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFGetSupportedSchemes( PROPVARIANT* pPropVarSchemeArray )
	{
		_WINQ_FCONTEXT( "CMF::MFGetSupportedSchemes" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFGetSupportedSchemes );
		hResult = Call< HRESULT, PROPVARIANT* >( pFunc, pPropVarSchemeArray );
#else
		__QCMP_UNREF( pPropVarSchemeArray );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFGetSupportedSchemes" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFGetTopoNodeCurrentType( IMFTopologyNode* pNode, DWORD dwStreamIndex, BOOL fOutput, IMFMediaType** ppType )
	{
		_WINQ_FCONTEXT( "CMF::MFGetTopoNodeCurrentType" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0601 )
		_WINQ_USESAPI( MFGetTopoNodeCurrentType );
		hResult = Call< HRESULT, IMFTopologyNode*, DWORD, BOOL, IMFMediaType** >( pFunc, pNode, dwStreamIndex, fOutput, ppType );
#else
		__QCMP_UNREF4( pNode, dwStreamIndex, fOutput, ppType );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFGetTopoNodeCurrentType" ), _T( "Windows 7" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0601 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMF::MFRequireProtectedEnvironment( IMFPresentationDescriptor* pPresentationDescriptor )
	{
		_WINQ_FCONTEXT( "CMF::MFRequireProtectedEnvironment" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFRequireProtectedEnvironment );
		hResult = Call< HRESULT, IMFPresentationDescriptor* >( pFunc, pPresentationDescriptor );
#else
		__QCMP_UNREF( pPresentationDescriptor );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFRequireProtectedEnvironment" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------


	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFAllocateWorkQueue( DWORD* pdwWorkQueue )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFAllocateWorkQueue" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFAllocateWorkQueue );
		hResult = Call< HRESULT, DWORD* >( pFunc, pdwWorkQueue );
#else
		__QCMP_UNREF( pdwWorkQueue );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFAllocateWorkQueue" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFAllocateWorkQueueEx( MFASYNC_WORKQUEUE_TYPE WorkQueueType, DWORD* pdwWorkQueue )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFAllocateWorkQueueEx" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFAllocateWorkQueueEx );
		hResult = Call< HRESULT, MFASYNC_WORKQUEUE_TYPE, DWORD* >( pFunc, WorkQueueType, pdwWorkQueue );
#else
		__QCMP_UNREF( WorkQueueType );
		__QCMP_UNREF( pdwWorkQueue );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFAllocateWorkQueueEx" ), _T( "Windows Vista and Platform Update Supplement for Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFAverageTimePerFrameToFrameRate( UINT64 unAverageTimePerFrame, UINT32* punNumerator, UINT32* punDenominator )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFAverageTimePerFrameToFrameRate" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFAverageTimePerFrameToFrameRate );
		hResult = Call< HRESULT, UINT64, UINT32*, UINT32* >( pFunc, unAverageTimePerFrame, punNumerator, punDenominator );
#else
		__QCMP_UNREF( unAverageTimePerFrame );
		__QCMP_UNREF( punNumerator );
		__QCMP_UNREF( punDenominator );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFAverageTimePerFrameToFrameRate" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFBeginCreateFile( MF_FILE_ACCESSMODE AccessMode, MF_FILE_OPENMODE OpenMode, MF_FILE_FLAGS fFlags, LPCWSTR pwszFilePath, IMFAsyncCallback* pCallback, IUnknown* pState, IUnknown** ppCancelCookie )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFBeginCreateFile" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFBeginCreateFile );
		hResult = Call< HRESULT, MF_FILE_ACCESSMODE, MF_FILE_OPENMODE, MF_FILE_FLAGS, LPCWSTR, IMFAsyncCallback*, IUnknown*, IUnknown** >( pFunc, AccessMode, OpenMode, fFlags, pwszFilePath, pCallback, pState, ppCancelCookie );
#else
		__QCMP_UNREF4( AccessMode, OpenMode, fFlags, pwszFilePath );
		__QCMP_UNREF( pCallback );
		__QCMP_UNREF( pState );
		__QCMP_UNREF( ppCancelCookie );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFBeginCreateFile" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFBeginRegisterWorkQueueWithMMCSS( DWORD dwWorkQueueId, LPCWSTR wszClass, DWORD dwTaskId, IMFAsyncCallback* pDoneCallback, IUnknown* pDoneState )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFBeginRegisterWorkQueueWithMMCSS" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFBeginRegisterWorkQueueWithMMCSS );
		hResult = Call< HRESULT, DWORD, LPCWSTR, DWORD, IMFAsyncCallback*, IUnknown* >( pFunc, dwWorkQueueId, wszClass, dwTaskId, pDoneCallback, pDoneState );
#else
		__QCMP_UNREF4( dwWorkQueueId, wszClass, dwTaskId, pDoneCallback );
		__QCMP_UNREF( pDoneState );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFBeginRegisterWorkQueueWithMMCSS" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFCalculateBitmapImageSize( const BITMAPINFOHEADER* pBMIH, UINT32 cbBufSize, UINT32* pcbImageSize, BOOL* pbKnown )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFCalculateBitmapImageSize" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCalculateBitmapImageSize );
		hResult = Call< HRESULT, const BITMAPINFOHEADER*, UINT32, UINT32*, BOOL* >( pFunc, pBMIH, cbBufSize, pcbImageSize, pbKnown );
#else
		__QCMP_UNREF4( pBMIH, cbBufSize, pcbImageSize, pbKnown );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCalculateBitmapImageSize" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFCalculateImageSize( REFGUID guidSubtype, UINT32 unWidth, UINT32 unHeight, UINT32* pcbImageSize )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFCalculateImageSize" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCalculateImageSize );
		hResult = Call< HRESULT, REFGUID, UINT32, UINT32, UINT32* >( pFunc, guidSubtype, unWidth, unHeight, pcbImageSize );
#else
		__QCMP_UNREF4( guidSubtype, unWidth, unHeight, pcbImageSize );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCalculateImageSize" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFCancelCreateFile( IUnknown* pCancelCookie )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFCancelCreateFile" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCancelCreateFile );
		hResult = Call< HRESULT, IUnknown* >( pFunc, pCancelCookie );
#else
		__QCMP_UNREF( pCancelCookie );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCancelCreateFile" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT __QCMP_STDCALLCONVENTION CMFAPI::MFStartup( ULONG Version, DWORD dwFlags/* = MFSTARTUP_FULL*/ )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFStartup" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFStartup );
		hResult = Call< HRESULT, ULONG, DWORD >( pFunc, Version, dwFlags );
#else
		__QCMP_UNREF( Version );
		__QCMP_UNREF( dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFStartup" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;

	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFShutdown()
	{
		_WINQ_FCONTEXT( "CMFAPI::MFShutdown" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFShutdown );
		hResult = Call< HRESULT >( pFunc );
#else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFShutdown" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFCancelWorkItem( MFWORKITEM_KEY Key )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFCancelWorkItem" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCancelWorkItem );
		hResult = Call< HRESULT, MFWORKITEM_KEY >( pFunc, Key );
#else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCancelWorkItem" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CMFAPI::MFCompareFullToPartialMediaType( IMFMediaType* pMFTypeFull, IMFMediaType* pMFTypePartial )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFCompareFullToPartialMediaType" );
		BOOL bResult = FALSE;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCompareFullToPartialMediaType );
		bResult = Call< BOOL, IMFMediaType*, IMFMediaType* >( pFunc, pMFTypeFull, pMFTypePartial );
#else
		__QCMP_UNREF( pMFTypeFull );
		__QCMP_UNREF( pMFTypePartial );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCompareFullToPartialMediaType" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFConvertFromFP16Array( float* pDest, const WORD* pSrc, DWORD dwCount )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFConvertFromFP16Array" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFConvertFromFP16Array );
		hResult = Call< HRESULT, float*, const WORD*, DWORD >( pFunc, pDest, pSrc, dwCount );
#else
		__QCMP_UNREF( pDest );
		__QCMP_UNREF( pSrc );
		__QCMP_UNREF( dwCount );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFConvertFromFP16Array" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFConvertToFP16Array( WORD* pDest, const float* pSrc, DWORD dwCount )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFConvertToFP16Array" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFConvertToFP16Array );
		hResult = Call< HRESULT, WORD*, const float*, DWORD >( pFunc, pDest, pSrc, dwCount );
#else
		__QCMP_UNREF( pDest );
		__QCMP_UNREF( pSrc );
		__QCMP_UNREF( dwCount );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFConvertToFP16Array" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFCopyImage( BYTE* pDest, LONG lDestStride, const BYTE* pSrc, LONG lSrcStride, DWORD dwWidthInBytes, DWORD dwLines )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFCopyImage" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCopyImage );
		hResult = Call< HRESULT, BYTE*, LONG, const BYTE*, LONG, DWORD, DWORD >( pFunc, pDest, lDestStride, pSrc, lSrcStride, dwWidthInBytes, dwLines );
#else
		__QCMP_UNREF4( pDest, lDestStride, pSrc, lSrcStride );
		__QCMP_UNREF( dwWidthInBytes );
		__QCMP_UNREF( dwLines );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCopyImage" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFCreateAlignedMemoryBuffer( DWORD cbMaxLength, DWORD fAlignmentFlags, IMFMediaBuffer** ppBuffer )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFCreateAlignedMemoryBuffer" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateAlignedMemoryBuffer );
		hResult = Call< HRESULT, DWORD, DWORD, IMFMediaBuffer** >( pFunc, cbMaxLength, fAlignmentFlags, ppBuffer );
#else
		__QCMP_UNREF( cbMaxLength );
		__QCMP_UNREF( fAlignmentFlags );
		__QCMP_UNREF( ppBuffer );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateAlignedMemoryBuffer" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFCreateAMMediaTypeFromMFMediaType( IMFMediaType* pMFType, GUID guidFormatBlockType, AM_MEDIA_TYPE** ppAMType )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFCreateAMMediaTypeFromMFMediaType" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateAMMediaTypeFromMFMediaType );
		hResult = Call< HRESULT, IMFMediaType*, GUID, AM_MEDIA_TYPE** >( pFunc, pMFType, guidFormatBlockType, ppAMType );
#else
		__QCMP_UNREF( pMFType );
		__QCMP_UNREF( guidFormatBlockType );
		__QCMP_UNREF( ppAMType );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateAMMediaTypeFromMFMediaType" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFCreateAsyncResult( IUnknown* punkObject, IMFAsyncCallback* pCallback, IUnknown* punkState, IMFAsyncResult** ppAsyncResult )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFCreateAsyncResult" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateAsyncResult );
		hResult = Call< HRESULT, IUnknown*, IMFAsyncCallback*, IUnknown*, IMFAsyncResult** >( pFunc, punkObject, pCallback, punkState, ppAsyncResult );
#else
		__QCMP_UNREF4( punkObject, pCallback, punkState, ppAsyncResult );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateAsyncResult" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFCreateAttributes( IMFAttributes** ppMFAttributes, UINT32 cInitialSize )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFCreateAttributes" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateAttributes );
		hResult = Call< HRESULT, IMFAttributes**, UINT32 >( pFunc, ppMFAttributes, cInitialSize );
#else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateAttributes" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFCreateCollection( IMFCollection** ppIMFCollection )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFCreateCollection" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateCollection );
		hResult = Call< HRESULT, IMFCollection** >( pFunc, ppIMFCollection );
#else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateCollection" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFCreateEventQueue( IMFMediaEventQueue** ppMediaEventQueue )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFCreateEventQueue" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateEventQueue );
		hResult = Call< HRESULT, IMFMediaEventQueue** >( pFunc, ppMediaEventQueue );
#else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateEventQueue" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFCreateFile( MF_FILE_ACCESSMODE AccessMode, MF_FILE_OPENMODE OpenMode, MF_FILE_FLAGS fFlags, LPCWSTR pwszFileURL, IMFByteStream** ppIByteStream )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFCreateFile" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateFile );
		hResult = Call< HRESULT, MF_FILE_ACCESSMODE, MF_FILE_OPENMODE, MF_FILE_FLAGS, LPCWSTR, IMFByteStream** >( pFunc, AccessMode, OpenMode, fFlags, pwszFileURL, ppIByteStream );
#else
		__QCMP_UNREF4( AccessMode, OpenMode, fFlags, pwszFileURL );
		__QCMP_UNREF( ppIByteStream );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateFile" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFCreateLegacyMediaBufferOnMFMediaBuffer( IMFSample* pIMFSample, IMFMediaBuffer* pIMFMediaBuffer, DWORD cbOffset, IMediaBuffer** ppIMediaBuffer )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFCreateLegacyMediaBufferOnMFMediaBuffer" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateLegacyMediaBufferOnMFMediaBuffer );
		hResult = Call< HRESULT,  IMFSample*, IMFMediaBuffer*, DWORD, IMediaBuffer** >( pFunc, pIMFSample, pIMFMediaBuffer, cbOffset, ppIMediaBuffer );
#else
		__QCMP_UNREF4( pIMFSample, pIMFMediaBuffer, cbOffset, ppIMediaBuffer );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateLegacyMediaBufferOnMFMediaBuffer" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFCreateMediaBufferWrapper( IMFMediaBuffer* pBuffer, DWORD cbOffset, DWORD dwLength, IMFMediaBuffer** ppBuffer )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFCreateMediaBufferWrapper" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateMediaBufferWrapper );
		hResult = Call< HRESULT, IMFMediaBuffer*, DWORD, DWORD, IMFMediaBuffer** >( pFunc, pBuffer, cbOffset, dwLength, ppBuffer );
#else
		__QCMP_UNREF4( pBuffer, cbOffset, dwLength, ppBuffer );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateMediaBufferWrapper" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFCreateMediaEvent( MediaEventType met, REFGUID guidExtendedType, HRESULT hrStatus, const PROPVARIANT* pvValue, IMFMediaEvent** ppEvent )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFCreateMediaEvent" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateMediaEvent );
		hResult = Call< HRESULT, MediaEventType, REFGUID, HRESULT, const PROPVARIANT*, IMFMediaEvent** >( pFunc, met, guidExtendedType, hrStatus, pvValue, ppEvent );
#else
		__QCMP_UNREF4( met, guidExtendedType, hrStatus, pvValue );
		__QCMP_UNREF( ppEvent );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateMediaEvent" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFCreateMediaSession( IMFAttributes* pConfiguration, IMFMediaSession** ppMS )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFCreateMediaSession" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateMediaSession );
		hResult = Call< HRESULT, IMFAttributes*, IMFMediaSession** >( pFunc, pConfiguration, ppMS );
#else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateMediaSession" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFCreateMediaType( IMFMediaType** ppMFType )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFCreateMediaType" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateMediaType );
		hResult = Call< HRESULT, IMFMediaType** >( pFunc, ppMFType );
#else
		__QCMP_UNREF( ppMFType );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateMediaType" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFCreateMediaTypeFromRepresentation( GUID guidRepresentation, LPVOID pvRepresentation, IMFMediaType** ppIMediaType )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFCreateMediaTypeFromRepresentation" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateMediaTypeFromRepresentation );
		hResult = Call< HRESULT, GUID, LPVOID, IMFMediaType** >( pFunc, guidRepresentation, pvRepresentation, ppIMediaType );
#else
		__QCMP_UNREF( guidRepresentation );
		__QCMP_UNREF( pvRepresentation );
		__QCMP_UNREF( ppIMediaType );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateMediaTypeFromRepresentation" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFCreateMemoryBuffer( DWORD cbMaxLength, IMFMediaBuffer** ppBuffer )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFCreateMemoryBuffer" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateMemoryBuffer );
		hResult = Call< HRESULT, DWORD, IMFMediaBuffer** >( pFunc, cbMaxLength, ppBuffer );
#else
		__QCMP_UNREF( cbMaxLength );
		__QCMP_UNREF( ppBuffer );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateMemoryBuffer" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFCreateMFByteStreamOnStream( IStream* pStream, IMFByteStream** ppByteStream )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFCreateMFByteStreamOnStream" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0601 )
		_WINQ_USESAPI( MFCreateMFByteStreamOnStream );
		hResult = Call< HRESULT, IStream*, IMFByteStream** >( pFunc, pStream, ppByteStream );
#else
		__QCMP_UNREF( pStream );
		__QCMP_UNREF( ppByteStream );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateMFByteStreamOnStream" ), _T( "Windows 7" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0601 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFCreatePresentationDescriptor( DWORD cStreamDescriptors, IMFStreamDescriptor** apStreamDescriptors, IMFPresentationDescriptor** ppPresentationDescriptor )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFCreatePresentationDescriptor" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreatePresentationDescriptor );
		hResult = Call< HRESULT, DWORD, IMFStreamDescriptor**, IMFPresentationDescriptor** >( pFunc, cStreamDescriptors, apStreamDescriptors, ppPresentationDescriptor );
#else
		__QCMP_UNREF( cStreamDescriptors );
		__QCMP_UNREF( apStreamDescriptors );
		__QCMP_UNREF( ppPresentationDescriptor );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreatePresentationDescriptor" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFCreateSample( IMFSample** ppIMFSample )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFCreateSample" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateSample );
		hResult = Call< HRESULT, IMFSample** >( pFunc, ppIMFSample );
#else
		__QCMP_UNREF( ppIMFSample );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateSample" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFCreateSourceResolver( IMFSourceResolver** ppISourceResolver )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFCreateSourceResolver" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateSourceResolver );
		hResult = Call< HRESULT, IMFSourceResolver** >( pFunc, ppISourceResolver );
#else
		__QCMP_UNREF( ppISourceResolver );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateSourceResolver" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFCreateStreamDescriptor( DWORD dwStreamIdentifier, DWORD cMediaTypes, IMFMediaType** apMediaTypes, IMFStreamDescriptor** ppDescriptor )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFCreateStreamDescriptor" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateStreamDescriptor );
		hResult = Call< HRESULT, DWORD, DWORD, IMFMediaType**, IMFStreamDescriptor** >( pFunc, dwStreamIdentifier, cMediaTypes, apMediaTypes, ppDescriptor );
#else
		__QCMP_UNREF4( dwStreamIdentifier, cMediaTypes, apMediaTypes, ppDescriptor );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateStreamDescriptor" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFCreateSystemTimeSource( IMFPresentationTimeSource** ppSystemTimeSource )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFCreateSystemTimeSource" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateSystemTimeSource );
		hResult = Call< HRESULT, IMFPresentationTimeSource** >( pFunc, ppSystemTimeSource );
#else
		__QCMP_UNREF( ppSystemTimeSource );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateSystemTimeSource" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFCreateTempFile( MF_FILE_ACCESSMODE AccessMode, MF_FILE_OPENMODE OpenMode, MF_FILE_FLAGS fFlags, IMFByteStream** ppIByteStream )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFCreateTempFile" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateTempFile );
		hResult = Call< HRESULT, MF_FILE_ACCESSMODE, MF_FILE_OPENMODE, MF_FILE_FLAGS, IMFByteStream** >( pFunc, AccessMode, OpenMode, fFlags, ppIByteStream );
#else
		__QCMP_UNREF4( AccessMode, OpenMode, fFlags, ppIByteStream );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateTempFile" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFCreateTransformActivate( IMFActivate** ppActivate )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFCreateTransformActivate" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0601 )
		_WINQ_USESAPI( MFCreateTransformActivate );
		hResult = Call< HRESULT, IMFActivate** >( pFunc, ppActivate );
#else
		__QCMP_UNREF( ppActivate );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateTransformActivate" ), _T( "Windows 7" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0601 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFCreateVideoMediaTypeFromBitMapInfoHeaderEx( const BITMAPINFOHEADER* pbmihBitMapInfoHeader, UINT32 cbBitMapInfoHeader, DWORD dwPixelAspectRatioX, DWORD dwPixelAspectRatioY, MFVideoInterlaceMode InterlaceMode, QWORD VideoFlags, DWORD dwFramesPerSecondNumerator, DWORD dwFramesPerSecondDenominator, DWORD dwMaxBitRate, IMFVideoMediaType** ppIVideoMediaType )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFCreateVideoMediaTypeFromBitMapInfoHeaderEx" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0601 )
		_WINQ_USESAPI( MFCreateVideoMediaTypeFromBitMapInfoHeaderEx );
		hResult = Call< HRESULT, const BITMAPINFOHEADER*, UINT32, DWORD, DWORD, MFVideoInterlaceMode, QWORD, DWORD, DWORD, DWORD, IMFVideoMediaType** >( pFunc, pbmihBitMapInfoHeader, cbBitMapInfoHeader, dwPixelAspectRatioX, dwPixelAspectRatioY, InterlaceMode, VideoFlags, dwFramesPerSecondNumerator, dwFramesPerSecondDenominator, dwMaxBitRate, ppIVideoMediaType );
#else
		__QCMP_UNREF4( pbmihBitMapInfoHeader, cbBitMapInfoHeader, dwPixelAspectRatioX, dwPixelAspectRatioY );
		__QCMP_UNREF4( InterlaceMode, VideoFlags, dwFramesPerSecondNumerator, dwFramesPerSecondDenominator );
		__QCMP_UNREF( dwMaxBitRate );
		__QCMP_UNREF( ppIVideoMediaType );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateVideoMediaTypeFromBitMapInfoHeaderEx" ), _T( "Windows 7" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0601 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFCreateVideoMediaTypeFromSubtype( const GUID* pAMSubtype, IMFVideoMediaType** ppIVideoMediaType )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFCreateVideoMediaTypeFromSubtype" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateVideoMediaTypeFromSubtype );
		hResult = Call< HRESULT, const GUID*, IMFVideoMediaType** >( pFunc, pAMSubtype, ppIVideoMediaType );
#else
		__QCMP_UNREF( pAMSubtype );
		__QCMP_UNREF( ppIVideoMediaType );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateVideoMediaTypeFromBitMapInfoHeaderEx" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFCreateVideoMediaTypeFromVideoInfoHeader( const KS_VIDEOINFOHEADER* pVideoInfoHeader, DWORD cbVideoInfoHeader, DWORD dwPixelAspectRatioX, DWORD dwPixelAspectRatioY, MFVideoInterlaceMode InterlaceMode, QWORD VideoFlags, const GUID* pSubtype, IMFVideoMediaType** ppIVideoMediaType )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFCreateVideoMediaTypeFromVideoInfoHeader" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateVideoMediaTypeFromVideoInfoHeader );
		hResult = Call< HRESULT, const KS_VIDEOINFOHEADER*, DWORD, DWORD, DWORD, MFVideoInterlaceMode, QWORD, const GUID*, IMFVideoMediaType** >( pFunc, pVideoInfoHeader, cbVideoInfoHeader, dwPixelAspectRatioX, dwPixelAspectRatioY, InterlaceMode, VideoFlags, pSubtype, ppIVideoMediaType );
#else
		__QCMP_UNREF4( pVideoInfoHeader, cbVideoInfoHeader, dwPixelAspectRatioX, dwPixelAspectRatioY );
		__QCMP_UNREF4( InterlaceMode, VideoFlags, pSubtype, ppIVideoMediaType );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateVideoMediaTypeFromVideoInfoHeader" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFCreateVideoMediaTypeFromVideoInfoHeader2( const KS_VIDEOINFOHEADER2* pVideoInfoHeader, DWORD cbVideoInfoHeader, QWORD AdditionalVideoFlags, const GUID* pSubtype, IMFVideoMediaType** ppIVideoMediaType )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFCreateVideoMediaTypeFromVideoInfoHeader2" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateVideoMediaTypeFromVideoInfoHeader2 );
		hResult = Call< HRESULT, const KS_VIDEOINFOHEADER2*, DWORD, QWORD, const GUID*, IMFVideoMediaType** >( pFunc, pVideoInfoHeader, cbVideoInfoHeader, AdditionalVideoFlags, pSubtype, ppIVideoMediaType );
#else
		__QCMP_UNREF4( pVideoInfoHeader, cbVideoInfoHeader, AdditionalVideoFlags );
		__QCMP_UNREF( pSubtype );
		__QCMP_UNREF( ppIVideoMediaType );		
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateVideoMediaTypeFromVideoInfoHeader2" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFCreateWaveFormatExFromMFMediaType( IMFMediaType* pMFType, WAVEFORMATEX** ppWF, UINT32* pcbSize, UINT32 Flags )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFCreateWaveFormatExFromMFMediaType" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFCreateWaveFormatExFromMFMediaType );
		hResult = Call< HRESULT, IMFMediaType*, WAVEFORMATEX**, UINT32*, UINT32 >( pFunc, pMFType, ppWF, pcbSize, Flags );
#else
		__QCMP_UNREF4( pMFType, ppWF, pcbSize, Flags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFCreateWaveFormatExFromMFMediaType" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFDeserializeAttributesFromStream( IMFAttributes* pAttr, DWORD dwOptions, IStream* pStm )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFDeserializeAttributesFromStream" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFDeserializeAttributesFromStream );
		hResult = Call< HRESULT, IMFAttributes*, DWORD, IStream* >( pFunc, pAttr, dwOptions, pStm );
#else
		__QCMP_UNREF( pAttr );
		__QCMP_UNREF( dwOptions );
		__QCMP_UNREF( pStm );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFDeserializeAttributesFromStream" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFDeserializePresentationDescriptor( DWORD cbData, BYTE* pbData, IMFPresentationDescriptor** ppPD )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFDeserializePresentationDescriptor" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFDeserializePresentationDescriptor );
		hResult = Call< HRESULT, DWORD, BYTE*, IMFPresentationDescriptor** >( pFunc, cbData, pbData, ppPD );
#else
		__QCMP_UNREF( cbData );
		__QCMP_UNREF( pbData );
		__QCMP_UNREF( ppPD );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFDeserializePresentationDescriptor" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFEndCreateFile( IMFAsyncResult* pResult, IMFByteStream** ppFile )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFEndCreateFile" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFEndCreateFile );
		hResult = Call< HRESULT, IMFAsyncResult*, IMFByteStream** >( pFunc, pResult, ppFile );
#else
		__QCMP_UNREF( pResult );
		__QCMP_UNREF( ppFile );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFEndCreateFile" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFEndRegisterWorkQueueWithMMCSS( IMFAsyncResult* pResult, DWORD* pdwTaskId )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFEndRegisterWorkQueueWithMMCSS" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFEndRegisterWorkQueueWithMMCSS );
		hResult = Call< HRESULT, IMFAsyncResult*, DWORD* >( pFunc, pResult, pdwTaskId );
#else
		__QCMP_UNREF( pResult );
		__QCMP_UNREF( pdwTaskId );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFEndRegisterWorkQueueWithMMCSS" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFEndUnregisterWorkQueueWithMMCSS( IMFAsyncResult* pResult )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFEndUnregisterWorkQueueWithMMCSS" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFEndUnregisterWorkQueueWithMMCSS );
		hResult = Call< HRESULT, IMFAsyncResult* >( pFunc, pResult );
#else
		__QCMP_UNREF( pResult );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFEndUnregisterWorkQueueWithMMCSS" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFBeginUnregisterWorkQueueWithMMCSS( DWORD dwWorkQueueId, IMFAsyncCallback* pDoneCallback, IUnknown* pDoneState )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFBeginUnregisterWorkQueueWithMMCSS" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFBeginUnregisterWorkQueueWithMMCSS );
		hResult = Call< HRESULT, DWORD, IMFAsyncCallback*, IUnknown* >( pFunc, dwWorkQueueId, pDoneCallback, pDoneState );
#else
		__QCMP_UNREF( dwWorkQueueId );
		__QCMP_UNREF( pDoneCallback );
		__QCMP_UNREF( pDoneState );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFBeginUnregisterWorkQueueWithMMCSS" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFEnumDeviceSources( IMFAttributes* pAttributes, IMFActivate*** pppSourceActivate, UINT32* pcSourceActivate )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFEnumDeviceSources" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFEnumDeviceSources );
		hResult = Call< HRESULT, IMFAttributes*, IMFActivate***, UINT32* >( pFunc, pAttributes, pppSourceActivate, pcSourceActivate );
#else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFEnumDeviceSources" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFFrameRateToAverageTimePerFrame( UINT32 unNumerator, UINT32 unDenominator, UINT64* punAverageTimePerFrame )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFFrameRateToAverageTimePerFrame" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFFrameRateToAverageTimePerFrame );
		hResult = Call< HRESULT, UINT32, UINT32, UINT64* >( pFunc, unNumerator, unDenominator, punAverageTimePerFrame );
#else
		__QCMP_UNREF( unNumerator );
		__QCMP_UNREF( unDenominator );
		__QCMP_UNREF( punAverageTimePerFrame );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFFrameRateToAverageTimePerFrame" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	double CMFAPI::MFGetAttributeDouble( IMFAttributes* pAttributes, REFGUID guidKey, double fDefault )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFGetAttributeDouble" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFGetAttributeDouble );
		hResult = Call< HRESULT, IMFAttributes*, REFGUID, double >( pFunc, pAttributes, guidKey, fDefault );
#else
		__QCMP_UNREF( pAttributes );
		__QCMP_UNREF( guidKey );
		__QCMP_UNREF( fDefault );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFGetAttributeDouble" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFGetAttributeRatio( IMFAttributes* pAttributes, REFGUID guidKey, UINT32* pnNumerator, UINT32* punDenominator )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFGetAttributeRatio" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFGetAttributeRatio );
		hResult = Call< HRESULT, IMFAttributes*, REFGUID, UINT32*, UINT32* >( pFunc, pAttributes, guidKey, pnNumerator, punDenominator );
#else
		__QCMP_UNREF( pAttributes );
		__QCMP_UNREF( guidKey );
		__QCMP_UNREF( pnNumerator );
		__QCMP_UNREF( punDenominator );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFGetAttributeRatio" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFGetAttributesAsBlob( IMFAttributes* pAttributes, UINT8* pBuf, UINT cbBufSize )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFGetAttributesAsBlob" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFGetAttributesAsBlob );
		hResult = Call< HRESULT, IMFAttributes*, UINT8*, UINT >( pFunc, pAttributes, pBuf, cbBufSize );
#else
		__QCMP_UNREF( pAttributes );
		__QCMP_UNREF( pBuf );
		__QCMP_UNREF( cbBufSize );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFGetAttributesAsBlob" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFGetAttributesAsBlobSize( IMFAttributes* pAttributes, UINT32* pcbBufSize )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFGetAttributesAsBlobSize" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFGetAttributesAsBlobSize );
		hResult = Call< HRESULT, IMFAttributes*, UINT32* >( pFunc, pAttributes, pcbBufSize );
#else
		__QCMP_UNREF( pAttributes );
		__QCMP_UNREF( pcbBufSize );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFGetAttributesAsBlobSize" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFGetAttributeSize( IMFAttributes* pAttributes, REFGUID guidKey, UINT32* punWidth, UINT32* punHeight )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFGetAttributeSize" );
		CCheckReturn< HRESULT, CSuccessCheck< > >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFGetAttributeSize );
		hResult = Call< HRESULT, IMFAttributes*, REFGUID, UINT32*, UINT32* >( pFunc, pAttributes, guidKey, punWidth, punHeight );
#else
		__QCMP_UNREF4( pAttributes, guidKey, punWidth, punHeight );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFGetAttributeSize" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFGetTimerPeriodicity( DWORD* Periodicity )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFGetTimerPeriodicity" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFGetTimerPeriodicity );
		hResult = Call< HRESULT, DWORD* >( pFunc, Periodicity );
#else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFGetTimerPeriodicity" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFLockWorkQueue( DWORD dwWorkQueue )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFLockWorkQueue" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFLockWorkQueue );
		hResult = Call< HRESULT, DWORD >( pFunc, dwWorkQueue );
#else
		__QCMP_UNREF( dwWorkQueue );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFLockWorkQueue" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFGetMFTMerit( IUnknown* pMFT, UINT32 cbVerifier, const BYTE* verifier, DWORD* merit )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFPutWorkItem" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFPutWorkItem );
		hResult = Call< HRESULT, IUnknown*, UINT32, const BYTE*, DWORD* >( pFunc, pMFT, cbVerifier, verifier, merit );
#else
		__QCMP_UNREF4( pMFT, cbVerifier, verifier, merit );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFPutWorkItem" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFGetPluginControl( IMFPluginControl** ppPluginControl )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFGetPluginControl" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0601 )
		_WINQ_USESAPI( MFGetPluginControl );
		hResult = Call< HRESULT, IMFPluginControl** >( pFunc, ppPluginControl );
#else
		__QCMP_UNREF( ppPluginControl );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFGetPluginControl" ), _T( "Windows 7" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0601 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	MFTIME CMFAPI::MFGetSystemTime( void )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFGetSystemTime" );
		MFTIME Result = 0;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFGetSystemTime );
		Result = Call< MFTIME >( pFunc );
#else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFGetSystemTime" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return Result;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFGetWorkQueueMMCSSClass( DWORD dwWorkQueueId, LPWSTR pwszClass, DWORD* pcchClass )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFGetWorkQueueMMCSSClass" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFGetWorkQueueMMCSSClass );
		hResult = Call< HRESULT, DWORD, LPWSTR, DWORD* >( pFunc, dwWorkQueueId, pwszClass, pcchClass );
#else
		__QCMP_UNREF( dwWorkQueueId );
		__QCMP_UNREF( pwszClass );
		__QCMP_UNREF( pcchClass );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFGetWorkQueueMMCSSClass" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFGetWorkQueueMMCSSTaskId( DWORD dwWorkQueueId, LPDWORD pdwTaskId )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFGetWorkQueueMMCSSTaskId" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFGetWorkQueueMMCSSTaskId );
		hResult = Call< HRESULT, DWORD, LPDWORD >( pFunc, dwWorkQueueId, pdwTaskId );
#else
		__QCMP_UNREF( dwWorkQueueId );
		__QCMP_UNREF( pdwTaskId );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFGetWorkQueueMMCSSTaskId" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFInitAttributesFromBlob( IMFAttributes* pAttributes, const UINT8* pBuf, UINT cbBufSize )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFInitAttributesFromBlob" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFInitAttributesFromBlob );
		hResult = Call< HRESULT, IMFAttributes*, const UINT8*, UINT >( pFunc, pAttributes, pBuf, cbBufSize );
#else
		__QCMP_UNREF( pAttributes );
		__QCMP_UNREF( pBuf );
		__QCMP_UNREF( cbBufSize );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFInitAttributesFromBlob" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFInitMediaTypeFromAMMediaType( IMFMediaType* pMFType, const AM_MEDIA_TYPE* pAMType )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFInitMediaTypeFromAMMediaType" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFInitMediaTypeFromAMMediaType );
		hResult = Call< HRESULT, IMFMediaType*, const AM_MEDIA_TYPE* >( pFunc, pMFType, pAMType );
#else
		__QCMP_UNREF( pMFType );
		__QCMP_UNREF( pAMType );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFInitMediaTypeFromAMMediaType" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFInitMediaTypeFromMPEG1VideoInfo( IMFMediaType* pMFType, const MPEG1VIDEOINFO* pMP1VI, UINT32 cbBufSize, const GUID* pSubtype )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFInitMediaTypeFromMPEG1VideoInfo" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFInitMediaTypeFromMPEG1VideoInfo );
		hResult = Call< HRESULT, IMFMediaType*, const MPEG1VIDEOINFO*, UINT32, const GUID* >( pFunc, pMFType, pMP1VI,  cbBufSize, pSubtype );
#else
		__QCMP_UNREF4( pMFType, pMP1VI, cbBufSize, pSubType );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFInitMediaTypeFromMPEG1VideoInfo" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFInitMediaTypeFromMPEG2VideoInfo( IMFMediaType* pMFType, const MPEG2VIDEOINFO* pMP2VI, UINT32 cbBufSize, const GUID *pSubtype )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFInitMediaTypeFromMPEG2VideoInfo" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFInitMediaTypeFromMPEG2VideoInfo );
		hResult = Call< HRESULT, IMFMediaType*, const MPEG2VIDEOINFO*, UINT32, const GUID* >( pFunc, pMFType, pMP2VI, cbBufSize, pSubtype );
#else
		__QCMP_UNREF4( pMFType, pMP2VI, cbBufSize, pSubType );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFInitMediaTypeFromMPEG2VideoInfo" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFInitMediaTypeFromVideoInfoHeader( IMFMediaType* pMFType, const VIDEOINFOHEADER* pVIH, UINT32 cbBufSize, const GUID* pSubtype )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFInitMediaTypeFromVideoInfoHeader" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFInitMediaTypeFromVideoInfoHeader );
		hResult = Call< HRESULT, IMFMediaType*, const VIDEOINFOHEADER*, UINT32, const GUID* >( pFunc, pMFType, pVIH, cbBufSize, pSubtype );
#else
		__QCMP_UNREF4( pMFType, pVIH, cbBufSize, pSubType );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFInitMediaTypeFromVideoInfoHeader" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFInitMediaTypeFromVideoInfoHeader2( IMFMediaType* pMFType, const VIDEOINFOHEADER2* pVIH2, Cmp_unsigned__int32 cbBufSize, const GUID* pSubtype )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFInitMediaTypeFromVideoInfoHeader2" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFInitMediaTypeFromVideoInfoHeader2 );
		hResult = Call< HRESULT, IMFMediaType*, const VIDEOINFOHEADER2*, Cmp_unsigned__int32, const GUID* >( pFunc, pMFType, pVIH2, cbBufSize, pSubtype );
#else
		__QCMP_UNREF4( pMFType, pVIH2, cbBufSize, pSubType );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFInitMediaTypeFromVideoInfoHeader2" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFInitMediaTypeFromWaveFormatEx( IMFMediaType* pMFType, const WAVEFORMATEX* pWaveFormat, UINT32 cbBufSize )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFInitMediaTypeFromWaveFormatEx" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFInitMediaTypeFromWaveFormatEx );
		hResult = Call< HRESULT, IMFMediaType*, const WAVEFORMATEX*, UINT32 >( pFunc, pMFType, pWaveFormat, cbBufSize );
#else
		__QCMP_UNREF( pMFType );
		__QCMP_UNREF( pWaveFormat );
		__QCMP_UNREF( cbBufSize );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFInitMediaTypeFromWaveFormatEx" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFLockPlatform()
	{
		_WINQ_FCONTEXT( "CMFAPI::MFLockPlatform" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFLockPlatform );
		hResult = Call< HRESULT >( pFunc );
#else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFLockPlatform" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFPutWorkItem( DWORD dwQueue, IMFAsyncCallback* pCallback, IUnknown* pState )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFPutWorkItem" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFPutWorkItem );
		hResult = Call< HRESULT, DWORD, IMFAsyncCallback*, IUnknown* >( pFunc, dwQueue, pCallback, pState );
#else
		__QCMP_UNREF( dwQueue );
		__QCMP_UNREF( pCallback );
		__QCMP_UNREF( pState );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFPutWorkItem" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFPutWorkItemEx( DWORD dwQueue, IMFAsyncResult* pResult )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFPutWorkItemEx" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFPutWorkItemEx );
		hResult = Call< HRESULT, DWORD, IMFAsyncResult* >( pFunc, dwQueue, pResult );
#else
		__QCMP_UNREF( dwQueue );
		__QCMP_UNREF( pResult );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFPutWorkItemEx" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFAddPeriodicCallback( MFPERIODICCALLBACK Callback, IUnknown* pContext, DWORD* pdwKey )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFAddPeriodicCallback" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFAddPeriodicCallback );
		hResult = Call< HRESULT, ::MFPERIODICCALLBACK, ::IUnknown*, DWORD* >( pFunc, Callback, pContext, pdwKey );
#else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFAddPeriodicCallback" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFRemovePeriodicCallback( DWORD dwKey )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFRemovePeriodicCallback" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFRemovePeriodicCallback );
		hResult = Call< HRESULT, DWORD >( pFunc, dwKey );
#else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFRemovePeriodicCallback" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFScheduleWorkItem( IMFAsyncCallback* pCallback, IUnknown* pState, INT64 Timeout, MFWORKITEM_KEY* pKey )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFScheduleWorkItem" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFScheduleWorkItem );
		hResult = Call< HRESULT, IMFAsyncCallback*, IUnknown*, INT64, MFWORKITEM_KEY* >( pFunc, pCallback, pState, Timeout, pKey );
#else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFScheduleWorkItem" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFScheduleWorkItemEx( IMFAsyncResult* pResult, INT64 Timeout, MFWORKITEM_KEY* pKey )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFScheduleWorkItemEx" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFScheduleWorkItemEx );
		hResult = Call< HRESULT, IMFAsyncResult*, INT64, MFWORKITEM_KEY* >( pFunc, pResult, Timeout, pKey );
#else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFScheduleWorkItemEx" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFSerializeAttributesToStream( IMFAttributes* pAttr, DWORD dwOptions, IStream* pStm )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFSerializeAttributesToStream" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFSerializeAttributesToStream );
		hResult = Call< HRESULT, IMFAttributes*, DWORD, IStream* >( pFunc, pAttr, dwOptions, pStm );
#else
		__QCMP_UNREF( pAttr );
		__QCMP_UNREF( dwOptions );
		__QCMP_UNREF( pStm );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFSerializeAttributesToStream" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFSerializePresentationDescriptor( IMFPresentationDescriptor* pPD, DWORD* pcbData, BYTE** ppbData )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFSerializePresentationDescriptor" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFSerializePresentationDescriptor );
		hResult = Call< HRESULT, IMFPresentationDescriptor*, DWORD*, BYTE** >( pFunc, pPD, pcbData, ppbData );
#else
		__QCMP_UNREF( pPD );
		__QCMP_UNREF( pcbData );
		__QCMP_UNREF( ppbData );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFSerializePresentationDescriptor" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFUnlockPlatform()
	{
		_WINQ_FCONTEXT( "CMFAPI::MFUnlockPlatform" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFUnlockPlatform );
		hResult = Call< HRESULT >( pFunc );
#else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFUnlockPlatform" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CMFAPI::MFUnlockWorkQueue( DWORD dwWorkQueue )
	{
		_WINQ_FCONTEXT( "CMFAPI::MFUnlockWorkQueue" );
		CCheckReturn< HRESULT, CSuccessCheck<> >::TType hResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( MFUnlockWorkQueue );
		hResult = Call< HRESULT, DWORD >( pFunc, dwWorkQueue );
#else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "MFUnlockWorkQueue" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return hResult;
	}

}//nsWinQAPI
