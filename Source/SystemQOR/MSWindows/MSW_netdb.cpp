//MSW_netdb.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "SystemQOR.h"

#if		(QOR_SYS_OS == QOR_SYS_MSW)

#include "SystemQOR/MSWindows/MSW_netdb.h"
#include "CodeQOR/Tracing/FunctionContextBase.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	Cnetdb::Cnetdb()
	{
		__QCS_MEMBER_FCONTEXT( "Cnetdb::Cnetdb" );
	}

	//--------------------------------------------------------------------------------
	Cnetdb::~Cnetdb()
	{
		__QCS_MEMBER_FCONTEXT( "Cnetdb::~Cnetdb" );
	}

	//--------------------------------------------------------------------------------
	void Cnetdb::endhostent( void )
	{
		//TODO:
	}

	//--------------------------------------------------------------------------------
	void Cnetdb::endnetent( void )
	{
		//TODO:
	}

	//--------------------------------------------------------------------------------
	void Cnetdb::endprotoent( void )
	{
		//TODO:
	}

	//--------------------------------------------------------------------------------
	void Cnetdb::endservent( void )
	{
		//TODO:
	}

	//--------------------------------------------------------------------------------
	void Cnetdb::freeaddrinfo( addrinfo* paddrinfo )
	{
		//TODO:
	}

	//--------------------------------------------------------------------------------
	const char* Cnetdb::gai_strerror( int )
	{
		//TODO:
		const char* szResult = 0;
		return szResult;
	}

	//--------------------------------------------------------------------------------
	int Cnetdb::getaddrinfo( const char*, const char*, const addrinfo*, addrinfo** )
	{
		//TODO:
		int iResult = 0;
		return iResult;
	}

	//--------------------------------------------------------------------------------
	hostent* Cnetdb::gethostbyaddr( const void*, socklen_t, int )
	{
		//TODO:
		hostent* pHostEnt = 0;
		return pHostEnt;
	}

	//--------------------------------------------------------------------------------
	hostent* Cnetdb::gethostbyname( const char* )
	{
		//TODO:
		hostent* pHostEnt = 0;
		return pHostEnt;
	}

	//--------------------------------------------------------------------------------
	hostent* Cnetdb::gethostent( void )
	{
		//TODO:
		hostent* pHostEnt = 0;
		return pHostEnt;
	}

	//--------------------------------------------------------------------------------
	int Cnetdb::getnameinfo( const sockaddr*, socklen_t, char*, socklen_t, char*, socklen_t, int )
	{
		//TODO:
		int iResult = -1;
		return iResult;
	}

	//--------------------------------------------------------------------------------
	netent* Cnetdb::getnetbyaddr( uint32_t, int )
	{
		//TODO:
		netent* pNetEnt = 0;
		return pNetEnt;
	}

	//--------------------------------------------------------------------------------
	netent* Cnetdb::getnetbyname( const char* )
	{
		//TODO:
		netent* pNetEnt = 0;
		return pNetEnt;
	}

	//--------------------------------------------------------------------------------
	netent* Cnetdb::getnetent( void )
	{
		//TODO:
		netent* pNetEnt = 0;
		return pNetEnt;
	}

	//--------------------------------------------------------------------------------
	protoent* Cnetdb::getprotobyname( const char* )
	{
		//TODO:
		protoent* pProtoEnt = 0;
		return pProtoEnt;
	}

	//--------------------------------------------------------------------------------
	protoent* Cnetdb::getprotobynumber( int )
	{
		//TODO:
		protoent* pProtoEnt = 0;
		return pProtoEnt;
	}

	//--------------------------------------------------------------------------------
	protoent* Cnetdb::getprotoent( void )
	{
		//TODO:
		protoent* pProtoEnt = 0;
		return pProtoEnt;
	}

	//--------------------------------------------------------------------------------
	servent* Cnetdb::getservbyname( const char*, const char* )
	{
		//TODO:
		servent* pServEnt = 0;
		return pServEnt;
	}

	//--------------------------------------------------------------------------------
	servent* Cnetdb::getservbyport( int, const char* )
	{
		//TODO:
		servent* pServEnt = 0;
		return pServEnt;
	}

	//--------------------------------------------------------------------------------
	servent* Cnetdb::getservent( void )
	{
		//TODO:
		servent* pServEnt = 0;
		return pServEnt;
	}

	//--------------------------------------------------------------------------------
	void Cnetdb::sethostent( int )
	{
		//TODO:
	}

	//--------------------------------------------------------------------------------
	void Cnetdb::setnetent( int )
	{
		//TODO:
	}

	//--------------------------------------------------------------------------------
	void Cnetdb::setprotoent( int )
	{
		//TODO:
	}

	//--------------------------------------------------------------------------------
	void Cnetdb::setservent( int )
	{
		//TODO:
	}

}//nsWin32

#endif	//(QOR_SYS_OS == QOR_SYS_MSW)
