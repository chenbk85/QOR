//MSW_dirent.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Implementation of dirent for Windows

#include "SystemQOR.h"

#if		(QOR_SYS_OS == QOR_SYS_MSW)

#include <errno.h>
#include "SystemQOR/MSWindows/MSW_dirent.h"
#include "PosumQOR/Descriptor.h"
#include "PosumQOR/Directory.h"
#include "CodeQOR/Tracing/FunctionContextBase.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	Cdirent::Cdirent()
	{
		__QCS_MEMBER_FCONTEXT( "Cdirent::Cdirent" );
	}

	//--------------------------------------------------------------------------------
	Cdirent::~Cdirent()
	{
		__QCS_MEMBER_FCONTEXT( "Cdirent::~Cdirent" );
	}

	//--------------------------------------------------------------------------------
    int Cdirent::closedir( DIR* pDIR )
    {
		__QCS_MEMBER_FCONTEXT( "Cdirent::closedir" );
		::nsPosum::CDescriptor Descriptor( pDIR->__dd_fd );
        return -1;//Descriptor.Close();
    }

	//--------------------------------------------------------------------------------
	int Cdirent::dirfd( DIR* pDIR )
	{
		__QCS_MEMBER_FCONTEXT( "Cdirent::dirfd" );
		::nsPosum::CDescriptor Descriptor( pDIR->__dd_fd );
		return Descriptor;
	}

	//--------------------------------------------------------------------------------
	DIR* Cdirent::fdopendir( int nFD )
	{
		__QCS_MEMBER_FCONTEXT( "Cdirent::fdopendir" );
		::nsPosum::CDirectory Directory( nFD );
		return Directory.GetDIR();
	}

    //--------------------------------------------------------------------------------
    DIR* Cdirent::opendir( const char* dirname )
    {
		__QCS_MEMBER_FCONTEXT( "Cdirent::opendir" );
		::nsPosum::CDirectory Directory( dirname );
        return Directory.GetDIR();
    }

    //--------------------------------------------------------------------------------
    dirent* Cdirent::readdir( DIR* pDIR )
    {
		__QCS_MEMBER_FCONTEXT( "Cdirent::readdir" );
		::nsPosum::CDirectory Directory( pDIR->__dd_fd );
        return Directory.ReadDIR();
    }

    //--------------------------------------------------------------------------------
    int Cdirent::readdir_r( DIR* __QCMP_RESTRICT pDIR, dirent* __QCMP_RESTRICT pdirent, dirent** __QCMP_RESTRICT ppdirent )
    {
		__QCS_MEMBER_FCONTEXT( "Cdirent::readdir_r" );
		::nsPosum::CDirectory Directory( pDIR->__dd_fd );
		return Directory.ReadDIR_r( pdirent, ppdirent );
    }

    //--------------------------------------------------------------------------------
    void Cdirent::rewinddir( DIR* pDIR )
    {
		__QCS_MEMBER_FCONTEXT( "Cdirent::rewinddir" );
		::nsPosum::CDirectory Directory( pDIR->__dd_fd );
		Directory.RewindDIR();
    }

	//--------------------------------------------------------------------------------
	int Cdirent::scandir( const char* szDir, dirent*** namelist, int (*sel)( const dirent* ), int (*compar)( const dirent**, const dirent** ) )
	{
		__QCS_MEMBER_FCONTEXT( "Cdirent::scandir" );
		//TODO: Forward to Posum FileSystem Object
		return -1;
	}

    //--------------------------------------------------------------------------------
    void Cdirent::seekdir( DIR* pDIR, long loc )
    {
		__QCS_MEMBER_FCONTEXT( "Cdirent::seekdir" );
		::nsPosum::CDirectory Directory( pDIR->__dd_fd );
		Directory.SeekDIR( loc );
    }

    //--------------------------------------------------------------------------------
    long Cdirent::telldir( DIR* pDIR )
    {
		__QCS_MEMBER_FCONTEXT( "Cdirent::telldir" );
		::nsPosum::CDirectory Directory( pDIR->__dd_fd );
        return Directory.TellDIR();
    }

}//nsWin32

#endif//(QOR_SYS_OS == QOR_SYS_MSW)
