//CallInterceptor.cpp

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CodeQOR.h"
#include "CodeQOR/Interception/CallInterceptor.h"
#include "CodeQOR/Traits/Policy.h"
#include "CodeQOR/Interception/FlyStrap.h"

#if     ( __QCMP_COMPILER == __QCMP_CLANG || __QCMP_COMPILER == __QCMP_INTEL )
template<> nsCodeQOR::CCallInterceptorRegEntry  nsCodeQOR::CCallInterceptorBase::RegEntry( (void*)(0));
#endif//( __QCMP_COMPILER == __QCMP_CLANG )

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{

	__QOR_IMPLEMENT_OCLASS_GUID( CCallInterceptor, 0x100e0ce0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 )

	//--------------------------------------------------------------------------------
	CCallInterceptor::CCallInterceptor() : CTFlyer< CCallInterceptor, CFlyStrapBase >()
	{
		if( m_pPrevious )
		{
			CFlyStrapBase* pFlyStrapBase = dynamic_cast< CFlyStrapBase* >( m_pPrevious );
			if( pFlyStrapBase )
			{
				pFlyStrapBase->OnDeactivate();
			}
		}
		OnActivate();
	}

	//--------------------------------------------------------------------------------
	CCallInterceptor::~CCallInterceptor()
	{
		CFlyStrap* pNext = Next( (CFlyStrap*)(0) );

		if( pNext )
		{
			pNext->UnStrap();
		}

		if( m_pPrevious )
		{
			CFlyStrapBase* pFlyStrapBase = dynamic_cast< CFlyStrapBase* >( m_pPrevious );
			if( pFlyStrapBase )
			{
				pFlyStrapBase->OnReactivate();
			}
		}
	}

	//--------------------------------------------------------------------------------
	void CCallInterceptor::CallMade( CCallContextBase* pCall, CFunctionContextBase* pFunction)
	{
		CFlyStrap* pNext = Next( (CFlyStrap*)(0) );
		if( pNext )
		{
			pNext->CallPre( pCall, pFunction );
		}
	}

	//--------------------------------------------------------------------------------
	void CCallInterceptor::OnReturnAssignment( CCallContextBase* pCall )
	{
		CFlyStrap* pNext = Next( (CFlyStrap*)(0) );
		if( pNext )
		{
			pNext->CallOnReturnAssignment( pCall );
		}
	}

	//--------------------------------------------------------------------------------
	void CCallInterceptor::CallCompleted( CCallContextBase* pCall )
	{
		CFlyStrap* pNext = Next( (CFlyStrap*)(0) );
		if( pNext )
		{
			pNext->CallPost( pCall );
		}
	}

}//nsCodeQOR
