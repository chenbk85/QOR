//SmallObjectPage.cpp

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "SystemQOR.h"
#include <string.h>
#include "CodeQOR/MemoryManagement/SmallObjectPage.h"
#include "CodeQOR/MemoryManagement/ManagedAllocator.h"

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
	//--------------------------------------------------------------------------------
	CSmallObjectPage::CSmallObjectPage( Cmp_uint_ptr uiUnitBytes, Cmp_uint_ptr uiMapWordCount /*=1*/ ) :
	  m_pMap( 0 )
	, m_uiMapWords( uiMapWordCount )
	, m_uiUnitSize( uiUnitBytes )
	{
		Cmp_uint_ptr uiMapBytes = ( sizeof( Cmp_uint_ptr ) * m_uiMapWords );
		Cmp_uint_ptr uiMapBits = uiMapBytes * 8;
		m_pMap = reinterpret_cast< Cmp_uint_ptr* >( FastNew< void >( uiMapBytes + ( uiMapBits * uiUnitBytes ), __LINE__, __FILE__ ) );
		m_pMemory = reinterpret_cast< unsigned char* >( m_pMap + m_uiMapWords );
		memset( m_pMap, 0x0, uiMapBytes );
		memset( m_pMemory, 0xFA, ( uiMapBits * uiUnitBytes ) );
	}

	//--------------------------------------------------------------------------------
	CSmallObjectPage::CSmallObjectPage( const CSmallObjectPage& src )
	{
		m_pMap = src.m_pMap;
		m_pMemory = src.m_pMemory;
		m_uiMapWords = src.m_uiMapWords;
		m_uiUnitSize = src.m_uiUnitSize;
	}

	//--------------------------------------------------------------------------------
	CSmallObjectPage::~CSmallObjectPage()
	{
		FastHeap().Free/*< void >*/( m_pMap );
		m_pMap = 0;
		m_pMemory = 0;
	}

	//--------------------------------------------------------------------------------
	void* CSmallObjectPage::Allocate( Cmp_uint_ptr uiUnitSize )
	{
		unsigned char* pMem = 0;
		if( !IsFull() )
		{
			for( Cmp_uint_ptr uiMapWord = 0; uiMapWord < m_uiMapWords; uiMapWord++ )
			{
				Cmp_uint_ptr Map = m_pMap[ uiMapWord ];
				Cmp_uint_ptr uiBitMask = 1;
				Cmp_uint_ptr uiBitIndex = 0;
				while( ( Map & uiBitMask ) != 0 && uiBitIndex < siWordBits )
				{
					uiBitMask *= 2;
					uiBitIndex++;
				}

				if( uiBitIndex < siWordBits )
				{
					Use( uiMapWord, uiBitIndex );
					pMem = m_pMemory + ( uiMapWord * siWordBits * m_uiUnitSize ) + ( uiBitIndex * m_uiUnitSize );
					break;
				}
			}
		}

		return pMem;
	}

	//--------------------------------------------------------------------------------
	bool CSmallObjectPage::IsFull( void )
	{
		for( Cmp_uint_ptr uiMapWord = 0; uiMapWord < m_uiMapWords; uiMapWord++ )
		{
			if( ( ~m_pMap[ uiMapWord ] & ( (Cmp_uint_ptr)-1 ) ) != 0 )
			{
				return false;
			}
		}
		return true;
	}

	//--------------------------------------------------------------------------------
	bool CSmallObjectPage::IsEmpty( void )
	{
		for( Cmp_uint_ptr uiMapWord = 0; uiMapWord < m_uiMapWords; uiMapWord++ )
		{
			if( m_pMap[ uiMapWord ] != 0 )
			{
				return false;
			}
		}
		return true;
	}

	//--------------------------------------------------------------------------------
	bool CSmallObjectPage::Free( void* pElement, Cmp_uint_ptr uiUnitBytes )
	{
		bool bResult = false;
		Cmp_uint_ptr uiMapBytes = ( sizeof( Cmp_uint_ptr ) * m_uiMapWords );
		Cmp_uint_ptr uiMapBits = uiMapBytes * 8;
		if( ( pElement >= m_pMemory ) && ( pElement < ( m_pMemory + ( uiMapBits * m_uiUnitSize ) ) ) )
		{
			unsigned char* pMem = reinterpret_cast< unsigned char* >( pElement );
			Cmp_uint_ptr uiIndex = ( pMem - m_pMemory ) / m_uiUnitSize;
			Cmp_uint_ptr uiWordIndex = uiIndex / siWordBits;
			Cmp_uint_ptr uiBitIndex = uiIndex - ( uiWordIndex * siWordBits );
			Deallocate( uiWordIndex, uiBitIndex );
			bResult = true;
		}
		else
		{
			bResult = false;
		}
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CSmallObjectPage::Use( Cmp_uint_ptr uiWordIndex, Cmp_uint_ptr uiBitIndex )
	{
		Cmp_uint_ptr uiBitMask = ( 1 << uiBitIndex );
		if( ( m_pMap[ uiWordIndex ] & uiBitMask ) != 0 )
		{
			//throw( "Small Object Page allocation error, double alloc!" );
		}
		m_pMap[ uiWordIndex ] |= uiBitMask;
	}

	//--------------------------------------------------------------------------------
	void CSmallObjectPage::Deallocate( Cmp_uint_ptr uiWordIndex, Cmp_uint_ptr uiBitIndex )
	{
		Cmp_uint_ptr uiBitMask = ( 1 << uiBitIndex );
		if( ( m_pMap[ uiWordIndex ] & uiBitMask ) == 0 )
		{
			//throw( "Small Object Page allocation error, double dealloc!" );
		}
		m_pMap[ uiWordIndex] &= ~uiBitMask;
	}

	//--------------------------------------------------------------------------------
	bool CSmallObjectPage::InUse( Cmp_uint_ptr uiWordIndex, Cmp_uint_ptr uiBitIndex )
	{
		bool bInUse = true;
		Cmp_uint_ptr uiBitMask = ( 1 << uiBitIndex );
		bInUse = ( m_pMap[ uiWordIndex ] & uiBitMask ) != 0 ? true : false;
		return bInUse;
	}

	//--------------------------------------------------------------------------------
	void CSmallObjectPage::Analyse( void(*pTrace)( char* ) )
	{
	}

}//nsCodeQOR

