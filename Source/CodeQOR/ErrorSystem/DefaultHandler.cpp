//DefaultHandler.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CodeQOR/ErrorSystem/Error.h"
#include "CodeQOR/ErrorSystem/What.h"
#include "CodeQOR/ErrorSystem/Where.h"
#include "CodeQOR/ErrorSystem/When.h"
#include "CodeQOR/ErrorSystem/DefaultHandler.h"
#include "CodeQOR/ErrorSystem/BaseErrorDomain.h"
#include "CodeQOR/Traits/Policy.h"
#include "CodeQOR/Instancing/TInstancePtr.h"

#if     ( __QCMP_COMPILER == __QCMP_CLANG )
template<> nsCodeQOR::CDefaultFatalHandlerRegEntry  nsCodeQOR::CDefaultFatalHandlerBase::RegEntry( (void*)(0));
template<> nsCodeQOR::CDefaultSeriousHandlerRegEntry  nsCodeQOR::CDefaultSeriousHandlerBase::RegEntry( (void*)(0));
template<> nsCodeQOR::CDefaultContinuableHandlerRegEntry  nsCodeQOR::CDefaultContinuableHandlerBase::RegEntry( (void*)(0));
template<> nsCodeQOR::CDefaultWarningHandlerRegEntry  nsCodeQOR::CDefaultWarningHandlerBase::RegEntry( (void*)(0));
template<> nsCodeQOR::CDefaultNoteHandlerRegEntry  nsCodeQOR::CDefaultNoteHandlerBase::RegEntry( (void*)(0));
#endif//( __QCMP_COMPILER == __QCMP_CLANG )

#if     ( __QCMP_COMPILER == __QCMP_GCC || __QCMP_COMPILER == __QCMP_INTEL )
template<> __QOR_INTERFACE( __CODEQOR ) nsCodeQOR::CDefaultFatalHandlerRegEntry  nsCodeQOR::CDefaultFatalHandlerBase::RegEntry( (void*)(0));
template<> __QOR_INTERFACE( __CODEQOR ) nsCodeQOR::CDefaultSeriousHandlerRegEntry  nsCodeQOR::CDefaultSeriousHandlerBase::RegEntry( (void*)(0));
template<> __QOR_INTERFACE( __CODEQOR ) nsCodeQOR::CDefaultContinuableHandlerRegEntry  nsCodeQOR::CDefaultContinuableHandlerBase::RegEntry( (void*)(0));
template<> __QOR_INTERFACE( __CODEQOR ) nsCodeQOR::CDefaultWarningHandlerRegEntry  nsCodeQOR::CDefaultWarningHandlerBase::RegEntry( (void*)(0));
template<> __QOR_INTERFACE( __CODEQOR ) nsCodeQOR::CDefaultNoteHandlerRegEntry  nsCodeQOR::CDefaultNoteHandlerBase::RegEntry( (void*)(0));
#endif
//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
	//--------------------------------------------------------------------------------
	CDefaultHandler::CDefaultHandler()
	{
	}

	//--------------------------------------------------------------------------------
	CDefaultHandler::~CDefaultHandler()
	{
	}

	//--------------------------------------------------------------------------------
	bool CDefaultHandler::Handle( CError& Error )
	{
		bool bResolved = false;

		//Get the Error Domain in which the Error occurred from pError->Where
		//CBaseErrorDomain* pDomain = Error.Where().GetDomain();

		/*
		CTInstancePtr< CLogInterceptor, CPolicy > ptrInterceptor;
		if( ptrInterceptor.operator->() )
		{
			CTString strDesc;
			if( pDomain != 0 )
			{
				if( pDomain->GetDescription( strDesc, &Error ) )
				{
					//Log the Error
					unsigned int uiCustomLevel = 0;
					unsigned long ulLevel = Error.What().GetLevel( &uiCustomLevel );
					ptrInterceptor->Log( strDesc, ulLevel, uiCustomLevel );
				}
				else
				{
					strDesc = _TXT("Failed to get the details of an error!");
					ptrInterceptor->Log( strDesc, CError::ERR_LVL_SERIOUS );
				}
			}
			else
			{
				strDesc = _TXT("Failed to get the domain for an error!");
				ptrInterceptor->Log( strDesc, CError::ERR_LVL_SERIOUS );
			}
		}
		*/
		return bResolved;
	}

	//--------------------------------------------------------------------------------
	__QCMP_TEMPLATE_INST const mxGUID* CDefaultFatalHandler::ClassID()
	{
		static const nsCodeQOR::mxGUID classID = {0xdef00005, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0} };
		return &classID;
	}

	//--------------------------------------------------------------------------------
	__QCMP_TEMPLATE_INST const char* CDefaultFatalHandler::TypeName(void)
	{
		return "CDefaultFatalHandler";
	}

	//--------------------------------------------------------------------------------
	__QCMP_TEMPLATE_INST const mxGUID* CDefaultSeriousHandler::ClassID()
	{
		static const nsCodeQOR::mxGUID classID = {0xdef00004, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0} };
		return &classID;
	}

	//--------------------------------------------------------------------------------
	__QCMP_TEMPLATE_INST const char* CDefaultSeriousHandler::TypeName(void)
	{
		return "CDefaultSeriousHandler";
	}

	//--------------------------------------------------------------------------------
	__QCMP_TEMPLATE_INST const mxGUID* CDefaultContinuableHandler::ClassID()
	{
		static const nsCodeQOR::mxGUID classID = {0xdef00003, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0} };
		return &classID;
	}

	//--------------------------------------------------------------------------------
	__QCMP_TEMPLATE_INST const char* CDefaultContinuableHandler::TypeName(void)
	{
		return "CDefaultContinuableHandler";
	}

	//--------------------------------------------------------------------------------
	__QCMP_TEMPLATE_INST const mxGUID* CDefaultWarningHandler::ClassID()
	{
		static const nsCodeQOR::mxGUID classID = {0xdef00002, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0} };
		return &classID;
	}

	//--------------------------------------------------------------------------------
	__QCMP_TEMPLATE_INST const char* CDefaultWarningHandler::TypeName(void)
	{
		return "CDefaultWarningHandler";
	}

	//--------------------------------------------------------------------------------
	__QCMP_TEMPLATE_INST const mxGUID* CDefaultNoteHandler::ClassID()
	{
		static const nsCodeQOR::mxGUID classID = {0xdef00001, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0} };
		return &classID;
	}

	//--------------------------------------------------------------------------------
	__QCMP_TEMPLATE_INST const char* CDefaultNoteHandler::TypeName(void)
	{
		return "CDefaultNoteHandler";
	}

#if( __QCMP_COMPILER == __QCMP_CODEGEAR )

	//CodeGear as of RAD Studio XE3 seems to be unable
	//to generate these for itself so we have to supply them

	//--------------------------------------------------------------------------------
	template<> CDefaultHandlerImpl<0>::CDefaultHandlerImpl()
	{

	}

	//--------------------------------------------------------------------------------
	template<> CDefaultHandlerImpl<1>::CDefaultHandlerImpl()
	{

	}

	//--------------------------------------------------------------------------------
	template<> CDefaultHandlerImpl<2>::CDefaultHandlerImpl()
	{

	}

	//--------------------------------------------------------------------------------
	template<> CDefaultHandlerImpl<3>::CDefaultHandlerImpl()
	{

	}

	//--------------------------------------------------------------------------------
	template<> CDefaultHandlerImpl<4>::CDefaultHandlerImpl()
	{

	}

	//--------------------------------------------------------------------------------
	template<> CDefaultHandlerImpl<0>::~CDefaultHandlerImpl()
	{

	}

	//--------------------------------------------------------------------------------
	template<> CDefaultHandlerImpl<1>::~CDefaultHandlerImpl()
	{

	}

	//--------------------------------------------------------------------------------
	template<> CDefaultHandlerImpl<2>::~CDefaultHandlerImpl()
	{

	}

	//--------------------------------------------------------------------------------
	template<> CDefaultHandlerImpl<3>::~CDefaultHandlerImpl()
	{

	}

	//--------------------------------------------------------------------------------
	template<> CDefaultHandlerImpl<4>::~CDefaultHandlerImpl()
	{

	}
#endif//CodeGear

}//nsCodeQOR
