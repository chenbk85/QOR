//OTypes.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CodeQOR/DataTypes/OTypes.h"

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
	//--------------------------------------------------------------------------------
	Void::Void()
	{
	}

	//--------------------------------------------------------------------------------
	//Bool

	//--------------------------------------------------------------------------------
	Bool::Bool() : m_Data(false) 
	{
	}

	//--------------------------------------------------------------------------------
	Bool::Bool( const bool& x ) : m_Data(x) 
	{
	}

	//--------------------------------------------------------------------------------
	Bool::Bool( const Bool& x ) : m_Data(x.m_Data) 
	{
	}

	//--------------------------------------------------------------------------------
	void Bool::operator=( const Bool& x ) 
	{ 
		m_Data = x.m_Data; 
	}

	//--------------------------------------------------------------------------------
	void Bool::operator=( const bool& x ) 
	{ 
		m_Data = x; 
	}
		
	//--------------------------------------------------------------------------------
	Bool::operator bool() 
	{ 
		return ToPrimitive(); 
	} 

	//--------------------------------------------------------------------------------
	Bool operator || ( const Bool& x0, const Bool& x1) 
	{ 
		return x0.opOr( x1 ); 
	}

	//--------------------------------------------------------------------------------
	Bool operator && ( const Bool& x0, const Bool& x1 ) 
	{ 
		return x0.opAnd( x1 ); 
	}

	//--------------------------------------------------------------------------------
	Bool operator == ( const Bool& x0, const Bool& x1 ) 
	{ 
		return x0.opEquals( x1 ); 
	}

	//--------------------------------------------------------------------------------
	Bool operator != (const Bool& x0, const Bool& x1 ) 
	{ 
		return x0.opNotEquals( x1 ); 
	}

	//--------------------------------------------------------------------------------
	Bool Bool::operator!() 
	{ 
		return opNot(); 
	}

	//--------------------------------------------------------------------------------
	Bool Bool::opOr( const Bool& x ) const 
	{ 
		return Bool( m_Data || x.m_Data ); 
	}

	//--------------------------------------------------------------------------------
	Bool Bool::opAnd( const Bool& x ) const 
	{ 
		return Bool( m_Data && x.m_Data ); 
	}

	//--------------------------------------------------------------------------------
	Bool Bool::opEquals( const Bool& x ) const 
	{ 
		return Bool( m_Data == x.m_Data ); 
	}

	//--------------------------------------------------------------------------------
	Bool Bool::opNotEquals( const Bool& x ) const 
	{ 
		return Bool( m_Data != x.m_Data ); 
	}

	//--------------------------------------------------------------------------------
	Bool Bool::opNot() const 
	{ 
		return Bool( !m_Data ); 
	} 

	//--------------------------------------------------------------------------------
	Cmp_bool Bool::ToPrimitive() const 
	{ 
		return m_Data; 
	}


	//--------------------------------------------------------------------------------
	//PrimitiveChar

	//--------------------------------------------------------------------------------
    PrimitiveChar::PrimitiveChar() 
	{ 
		m = 0; 
	}

	//--------------------------------------------------------------------------------
	PrimitiveChar::PrimitiveChar( const PrimitiveChar& x ) 
	{ 
		m = x.m; 
	}

	//--------------------------------------------------------------------------------
    PrimitiveChar::PrimitiveChar( Cmp_C_char& x ) 
	{
		m = x; 
	} 

	//--------------------------------------------------------------------------------
	PrimitiveChar& PrimitiveChar::operator = ( const PrimitiveChar& src )
	{
		m = src.m;
		return *this;
	}

	//--------------------------------------------------------------------------------
	//PrimitiveWideChar

	//--------------------------------------------------------------------------------
    PrimitiveWideChar::PrimitiveWideChar() 
	{ 
		m = 0; 
	}

	//--------------------------------------------------------------------------------
    PrimitiveWideChar::PrimitiveWideChar( const PrimitiveWideChar& x ) 
	{ 
		m = x.m; 
	}

	//--------------------------------------------------------------------------------
    PrimitiveWideChar::PrimitiveWideChar( Cmp_C_wchar_t& x ) 
	{ 
		m = x; 
	}  

	//--------------------------------------------------------------------------------
	PrimitiveWideChar& PrimitiveWideChar::operator = ( const PrimitiveWideChar& src )
	{
		m = src.m;
		return *this;
	}

	//--------------------------------------------------------------------------------
	//SPrimitiveChar

	//--------------------------------------------------------------------------------
    SPrimitiveChar::SPrimitiveChar() 
	{ 
		m = 0; 
	}

	//--------------------------------------------------------------------------------
    SPrimitiveChar::SPrimitiveChar( const SPrimitiveChar& x ) 
	{ 
		m = x.m; 
	}

	//--------------------------------------------------------------------------------
    SPrimitiveChar::SPrimitiveChar( Cmp_C_signed_char& x ) 
	{ 
		m = x; 
	} 

	//--------------------------------------------------------------------------------
	SPrimitiveChar& SPrimitiveChar::operator = ( const SPrimitiveChar& src )
	{
		m = src.m;
		return *this;
	}

	//--------------------------------------------------------------------------------
	//UPrimitiveChar

	//--------------------------------------------------------------------------------
    UPrimitiveChar::UPrimitiveChar() 
	{ 
		m = 0; 
	}

	//--------------------------------------------------------------------------------
    UPrimitiveChar::UPrimitiveChar( const UPrimitiveChar& x ) 
	{ 
		m = x.m; 
	}

	//--------------------------------------------------------------------------------
    UPrimitiveChar::UPrimitiveChar( Cmp_C_unsigned_char& x ) 
	{ 
		m = x; 
	}       

	//--------------------------------------------------------------------------------
	UPrimitiveChar& UPrimitiveChar::operator = ( const UPrimitiveChar& src )
	{
		m = src.m;
		return *this;
	}

	//--------------------------------------------------------------------------------
	//Int3264

	//--------------------------------------------------------------------------------
    Int3264::Int3264() 
	{ 
		m = 0; 
	}

	//--------------------------------------------------------------------------------
    Int3264::Int3264( const Int3264& x ) 
	{ 
		m = x.m; 
	}

	//--------------------------------------------------------------------------------
    Int3264::Int3264( const Cmp__int3264& x ) 
	{ 
		m = x; 
	}

	//--------------------------------------------------------------------------------
	Int3264& Int3264::operator = ( const Int3264& src )
	{
		m = src.m;
		return *this;
	}

	//--------------------------------------------------------------------------------
	//IntPtr

	//--------------------------------------------------------------------------------
    IntPtr::IntPtr() 
	{ 
		m = 0; 
	}
    
	//--------------------------------------------------------------------------------
	IntPtr::IntPtr( const IntPtr& x ) 
	{ 
		m = x.m; 
	}

	//--------------------------------------------------------------------------------
    IntPtr::IntPtr( const Cmp_int_ptr& x ) 
	{ 
		m = x; 
	} 

	//--------------------------------------------------------------------------------
	IntPtr& IntPtr::operator = ( const IntPtr& src )
	{
		m = src.m;
		return *this;
	}

	//--------------------------------------------------------------------------------
	//UIntPtr

	//--------------------------------------------------------------------------------
    UIntPtr::UIntPtr() 
	{
		m = 0; 
	}

	//--------------------------------------------------------------------------------
	UIntPtr::UIntPtr( const UIntPtr& x )
	{
		m = x.m; 
	}

	//--------------------------------------------------------------------------------
    UIntPtr::UIntPtr( const Cmp_uint_ptr& x ) 
	{ 
		m = x; 
	}

	//--------------------------------------------------------------------------------
	UIntPtr& UIntPtr::operator = ( const UIntPtr& src )
	{
		m = src.m;
		return *this;
	}

	//--------------------------------------------------------------------------------
	//LongPtr

	//--------------------------------------------------------------------------------
    LongPtr::LongPtr() 
	{ 
		m = 0; 
	}

	//--------------------------------------------------------------------------------
    LongPtr::LongPtr(const LongPtr& x) 
	{ 
		m = x.m; 
	}

	//--------------------------------------------------------------------------------
    LongPtr::LongPtr(const Cmp_long_ptr& x) 
	{ 
		m = x; 
	}

	//--------------------------------------------------------------------------------
	LongPtr& LongPtr::operator = ( const LongPtr& src )
	{
		m = src.m;
		return *this;
	}

	//--------------------------------------------------------------------------------
	//ULongPtr

	//--------------------------------------------------------------------------------
    ULongPtr::ULongPtr() 
	{ 
		m = 0; 
	}

	//--------------------------------------------------------------------------------
    ULongPtr::ULongPtr( const ULongPtr& x ) 
	{ 
		m = x.m; 
	}

	//--------------------------------------------------------------------------------
    ULongPtr::ULongPtr( const Cmp_ulong_ptr& x ) 
	{ 
		m = x; 
	}

	//--------------------------------------------------------------------------------
	ULongPtr& ULongPtr::operator = ( const ULongPtr& src )
	{
		m = src.m;
		return *this;
	}

	//--------------------------------------------------------------------------------
	//UShort

	//--------------------------------------------------------------------------------
    UShort::UShort() 
	{ 
		m = 0; 
	}

	//--------------------------------------------------------------------------------
	UShort::UShort( const PrimitiveInt< UShort, Cmp_unsigned_short >& x )
	{
		m = x.m;
	}

	//--------------------------------------------------------------------------------
    UShort::UShort( const UShort& x ) 
	{ 
		m = x.m; 
	}

	//--------------------------------------------------------------------------------
    UShort::UShort( Cmp_C_unsigned_short& x ) 
	{ 
		m = x; 
	}     

	//--------------------------------------------------------------------------------
	UShort& UShort::operator = ( const UShort& src )
	{
		m = src.m;
		return *this;
	}

	//--------------------------------------------------------------------------------
	__QOR_INTERFACE( __CODEQOR ) PrimitiveInt< UShort,unsigned short > __cdecl operator / ( PrimitiveInt< UShort,unsigned short > const & x0, PrimitiveInt< UShort,unsigned short > const & x1 )
	{
		PrimitiveInt< UShort,unsigned short > ret(x0);
		ret /= x1;
		return ret; 
	}

	//--------------------------------------------------------------------------------
	//SShort

	//--------------------------------------------------------------------------------
    SShort::SShort() 
	{ 
		m = 0; 
	}

	//--------------------------------------------------------------------------------
    SShort::SShort( const SShort& x) 
	{ 
		m = x.m; 
	}

	//--------------------------------------------------------------------------------
    SShort::SShort( Cmp_C_signed_short& x ) 
	{ 
		m = x; 
	}

	//--------------------------------------------------------------------------------
	SShort& SShort::operator = ( const SShort& src )
	{
		m = src.m;
		return *this;
	}

	//--------------------------------------------------------------------------------
	//Short

	//--------------------------------------------------------------------------------
    Short::Short() 
	{ 
		m = 0; 
	}

	//--------------------------------------------------------------------------------
    Short::Short( const Short& x ) 
	{ 
		m = x.m; 
	}

	//--------------------------------------------------------------------------------
    Short::Short( Cmp_C_short& x ) 
	{ 
		m = x; 
	}

	//--------------------------------------------------------------------------------
	Short& Short::operator = ( const Short& src )
	{
		m = src.m;
		return *this;
	}

	//--------------------------------------------------------------------------------
	//ULong

	//--------------------------------------------------------------------------------
    ULong::ULong() 
	{ 
		m = 0; 
	}

	//--------------------------------------------------------------------------------
    ULong::ULong( const ULong& x ) 
	{ 
		m = x.m; 
	}

	//--------------------------------------------------------------------------------
    ULong::ULong( Cmp_C_unsigned_long& x ) 
	{ 
		m = x; 
	}

	//--------------------------------------------------------------------------------
	ULong& ULong::operator = ( const ULong& src )
	{
		m = src.m;
		return *this;
	}

	//--------------------------------------------------------------------------------
	//Int

	//--------------------------------------------------------------------------------
    Int::Int() 
	{ 
		m = 0; 
	}

	//--------------------------------------------------------------------------------
    Int::Int( const Int& x ) 
	{ 
		m = x.m; 
	}

	//--------------------------------------------------------------------------------
    Int::Int( const Cmp_int& x ) 
	{ 
		m = x; 
	}

	//--------------------------------------------------------------------------------
	Int& Int::operator = ( const Int& src )
	{
		m = src.m;
		return *this;
	}

	//--------------------------------------------------------------------------------
	//Int8

	//--------------------------------------------------------------------------------
    Int8::Int8() 
	{ 
		m = 0; 
	}

	//--------------------------------------------------------------------------------
    Int8::Int8( const Int8& x ) 
	{ 
		m = x.m; 
	}

	//--------------------------------------------------------------------------------
    Int8::Int8( const Cmp__int8& x ) 
	{ 
		m = x; 
	}   

	//--------------------------------------------------------------------------------
	Int8& Int8::operator = ( const Int8& src)
	{
		m = src.m;
		return *this;
	}

	//--------------------------------------------------------------------------------
	//Int16

	//--------------------------------------------------------------------------------
    Int16::Int16() 
	{ 
		m = 0; 
	}

	//--------------------------------------------------------------------------------
    Int16::Int16( const Int16& x ) 
	{ 
		m = x.m; 
	}

	//--------------------------------------------------------------------------------
    Int16::Int16( const Cmp__int16& x ) 
	{ 
		m = x; 
	} 

	//--------------------------------------------------------------------------------
	Int16& Int16::operator = ( const Int16& src )
	{
		m = src.m;
		return *this;
	}

	//--------------------------------------------------------------------------------
	//Int32

	//--------------------------------------------------------------------------------
    Int32::Int32() 
	{ 
		m = 0; 
	}

	//--------------------------------------------------------------------------------
    Int32::Int32( const Int32& x ) 
	{ 
		m = x.m; 
	}

	//--------------------------------------------------------------------------------
    Int32::Int32( const Cmp__int32& x ) 
	{ 
		m = x; 
	} 

	//--------------------------------------------------------------------------------
	Int32& Int32::operator = ( const Int32& src )
	{
		m = src.m;
		return *this;
	}

	//--------------------------------------------------------------------------------
	//Int64

	//--------------------------------------------------------------------------------
    Int64::Int64() 
	{ 
		m = 0; 
	}

	//--------------------------------------------------------------------------------
    Int64::Int64( const Int64& x ) 
	{ 
		m = x.m; 
	}

	//--------------------------------------------------------------------------------
    Int64::Int64( const Cmp__int64& x ) 
	{ 
		m = x; 
	} 

	//--------------------------------------------------------------------------------
	Int64& Int64::operator = ( const Int64& src )
	{
		m = src.m;
		return *this;
	}

	//--------------------------------------------------------------------------------
	//SInt

	//--------------------------------------------------------------------------------
    SInt::SInt() 
	{ 
		m = 0; 
	}

	//--------------------------------------------------------------------------------
    SInt::SInt( const SInt& x ) 
	{ 
		m = x.m; 
	}

	//--------------------------------------------------------------------------------
    SInt::SInt( Cmp_C_signed_int& x ) 
	{ 
		m = x; 
	}

	//--------------------------------------------------------------------------------
	SInt& SInt::operator = ( const SInt& src )
	{
		m = src.m;
		return *this;
	}

	//--------------------------------------------------------------------------------
	//SInt8

	//--------------------------------------------------------------------------------
    SInt8::SInt8() 
	{ 
		m = 0; 
	}

	//--------------------------------------------------------------------------------
    SInt8::SInt8( const SInt8& x ) 
	{ 
		m = x.m; 
	}

	//--------------------------------------------------------------------------------
    SInt8::SInt8( Cmp_C_signed__int8& x ) 
	{ 
		m = x; 
	}

	//--------------------------------------------------------------------------------
	SInt8& SInt8::operator = ( const SInt8& src )
	{
		m = src.m;
		return *this;
	}

	//--------------------------------------------------------------------------------
	//SInt16

	//--------------------------------------------------------------------------------
    SInt16::SInt16() 
	{ 
		m = 0; 
	}

	//--------------------------------------------------------------------------------
    SInt16::SInt16( const SInt16& x ) 
	{ 
		m = x.m; 
	}

	//--------------------------------------------------------------------------------
    SInt16::SInt16( Cmp_C_signed__int16& x ) 
	{ 
		m = x; 
	}

	//--------------------------------------------------------------------------------
	SInt16& SInt16::operator = ( const SInt16& src )
	{
		m = src.m;
		return *this;
	}


	//--------------------------------------------------------------------------------
	//SInt32

	//--------------------------------------------------------------------------------
    SInt32::SInt32() 
	{ 
		m = 0; 
	}

	//--------------------------------------------------------------------------------
    SInt32::SInt32( const SInt32& x ) 
	{ 
		m = x.m; 
	}
	
	//--------------------------------------------------------------------------------
    SInt32::SInt32( Cmp_C_signed__int32& x ) 
	{ 
		m = x; 
	}

	//--------------------------------------------------------------------------------
	SInt32& SInt32::operator = ( const SInt32& src )
	{
		m = src.m;
		return *this;
	}

	//--------------------------------------------------------------------------------
	//SInt64

	//--------------------------------------------------------------------------------
    SInt64::SInt64() 
	{ 
		m = 0; 
	}

	//--------------------------------------------------------------------------------
    SInt64::SInt64( const SInt64& x ) 
	{ 
		m = x.m; 
	}

	//--------------------------------------------------------------------------------
    SInt64::SInt64( Cmp_C_signed__int64& x ) 
	{ 
		m = x; 
	}

	//--------------------------------------------------------------------------------
	SInt64& SInt64::operator = ( const SInt64& src )
	{
		m = src.m;
		return *this;
	}

	//--------------------------------------------------------------------------------
	//UInt

	//--------------------------------------------------------------------------------
    UInt::UInt() 
	{ 
		m = 0; 
	}

	//--------------------------------------------------------------------------------
    UInt::UInt( const UInt& x ) 
	{ 
		m = x.m; 
	}

	//--------------------------------------------------------------------------------
    UInt::UInt( Cmp_C_unsigned_int& x ) 
	{ 
		m = x; 
	}

	//--------------------------------------------------------------------------------
	UInt& UInt::operator = ( const UInt& src )
	{
		m = src.m;
		return *this;
	}

	//--------------------------------------------------------------------------------
	//UInt8

	//--------------------------------------------------------------------------------
    UInt8::UInt8() 
	{ 
		m = 0; 
	}

	//--------------------------------------------------------------------------------
    UInt8::UInt8( const UInt8& x ) 
	{ 
		m = x.m; 
	}

	//--------------------------------------------------------------------------------
    UInt8::UInt8( Cmp_C_unsigned__int8& x ) 
	{ 
		m = x; 
	}

	//--------------------------------------------------------------------------------
	UInt8& UInt8::operator = ( const UInt8& src )
	{
		m = src.m;
		return *this;
	}

	//--------------------------------------------------------------------------------
	//UInt16

	//--------------------------------------------------------------------------------
    UInt16::UInt16() 
	{ 
		m = 0; 
	}

	//--------------------------------------------------------------------------------
    UInt16::UInt16( const UInt16& x ) 
	{ 
		m = x.m; 
	}
    
	//--------------------------------------------------------------------------------
	UInt16::UInt16( Cmp_C_unsigned__int16& x ) 
	{ 
		m = x; 
	}

	//--------------------------------------------------------------------------------
	UInt16& UInt16::operator = ( const UInt16& src )
	{
		m = src.m;
		return *this;
	}

	//--------------------------------------------------------------------------------
	//UInt32

	//--------------------------------------------------------------------------------
    UInt32::UInt32() 
	{ 
		m = 0; 
	}

	//--------------------------------------------------------------------------------
    UInt32::UInt32( const UInt32& x ) 
	{ 
		m = x.m; 
	}

	//--------------------------------------------------------------------------------
    UInt32::UInt32( Cmp_C_unsigned__int32& x ) 
	{ 
		m = x; 
	}

	//--------------------------------------------------------------------------------
	UInt32& UInt32::operator = ( const UInt32& src )
	{
		m = src.m;
		return *this;
	}

	//--------------------------------------------------------------------------------
	//UInt64

	//--------------------------------------------------------------------------------
    UInt64::UInt64() 
	{ 
		m = 0; 
	}

	//--------------------------------------------------------------------------------
    UInt64::UInt64( const UInt64& x ) 
	{ 
		m = x.m; 
	}

	//--------------------------------------------------------------------------------
    UInt64::UInt64( Cmp_C_unsigned__int64& x ) 
	{ 
		m = x; 
	}

	//--------------------------------------------------------------------------------
	UInt64& UInt64::operator = ( const UInt64& src)
	{
		m = src.m;
		return *this;
	}

	//--------------------------------------------------------------------------------
	//Long

	//--------------------------------------------------------------------------------
    Long::Long() 
	{ 
		m = 0; 
	}

	//--------------------------------------------------------------------------------
    Long::Long( const Long& x ) 
	{ 
		m = x.m; 
	}

	//--------------------------------------------------------------------------------
    Long::Long( Cmp_C_long& x ) 
	{ 
		m = x; 
	}        

	//--------------------------------------------------------------------------------
	Long& Long::operator = ( const Long& src )
	{
		m = src.m;
		return *this;
	}

	//--------------------------------------------------------------------------------
	//SLong

	//--------------------------------------------------------------------------------
    SLong::SLong() 
	{ 
		m = 0; 
	}

	//--------------------------------------------------------------------------------
    SLong::SLong( const SLong& x ) 
	{ 
		m = x.m; 
	}

	//--------------------------------------------------------------------------------
    SLong::SLong( Cmp_C_signed_long& x ) 
	{ 
		m = x; 
	}        

	//--------------------------------------------------------------------------------
	SLong& SLong::operator = ( const SLong& src )
	{
		m = src.m;
		return *this;
	}

	//--------------------------------------------------------------------------------
	//ULongLong

	//--------------------------------------------------------------------------------
    ULongLong::ULongLong() 
	{ 
		m = 0; 
	}

	//--------------------------------------------------------------------------------
    ULongLong::ULongLong( const ULongLong& x ) 
	{ 
		m = x.m; 
	}

	//--------------------------------------------------------------------------------
    ULongLong::ULongLong( Cmp_C_unsigned_long_long& x ) 
	{ 
		m = x; 
	}

	//--------------------------------------------------------------------------------
	ULongLong& ULongLong::operator = ( const ULongLong& src )
	{
		m = src.m;
		return *this;
	}

	//--------------------------------------------------------------------------------
	//LongLong

	//--------------------------------------------------------------------------------
    LongLong::LongLong() 
	{ 
		m = 0; 
	}

	//--------------------------------------------------------------------------------
    LongLong::LongLong( const LongLong& x ) 
	{ 
		m = x.m; 
	}

	//--------------------------------------------------------------------------------
    LongLong::LongLong( Cmp_C_long_long& x ) 
	{ 
		m = x; 
	}       

	//--------------------------------------------------------------------------------
	LongLong& LongLong::operator = ( const LongLong& src)
	{
		m = src.m;
		return *this;
	}

	//--------------------------------------------------------------------------------
	//Float

	//--------------------------------------------------------------------------------
    Float::Float() 
	{ 
		m = 0; 
	}

	//--------------------------------------------------------------------------------
    Float::Float( const Float& x ) 
	{ 
		m = x.m; 
	}

	//--------------------------------------------------------------------------------
	Float::Float( Cmp_C_float& x ) 
	{ 
		m = x; 
	}      

	//--------------------------------------------------------------------------------
	Float& Float::operator = ( const Float& src )
	{
		m = src.m;
		return *this;
	}

	//--------------------------------------------------------------------------------
	//Double

	//--------------------------------------------------------------------------------
    Double::Double() 
	{ 
		m = 0; 
	}

	//--------------------------------------------------------------------------------
    Double::Double( const Double& x ) 
	{ 
		m = x.m; 
	}

	//--------------------------------------------------------------------------------
    Double::Double( Cmp_C_double& x ) 
	{ 
		m = x; 
	}    

	//--------------------------------------------------------------------------------
	Double& Double::operator = ( const Double& src )
	{
		m = src.m;
		return *this;
	}

	
	//--------------------------------------------------------------------------------
	//LongDouble

	//--------------------------------------------------------------------------------
    LongDouble::LongDouble() 
	{ 
		m = 0; 
	}

	//--------------------------------------------------------------------------------
    LongDouble::LongDouble( const LongDouble& x ) 
	{ 
		m = x.m; 
	}

	//--------------------------------------------------------------------------------
    LongDouble::LongDouble( Cmp_C_long_double& x ) 
	{ 
		m = x; 
	}   

	//--------------------------------------------------------------------------------
	LongDouble& LongDouble::operator = ( const LongDouble& src )
	{
		m = src.m;
		return *this;
	}

}//nsCodeQOR

