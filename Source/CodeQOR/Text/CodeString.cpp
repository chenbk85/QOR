//CodeString.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "SystemQOR.h"
#include <stdlib.h>
#include <wchar.h>
#include <string.h>
#include <new>
#include "CodeQOR/Text/CodeString.h"
#include "CodeQOR/DataStructures/TLRef.h"
#include "CodeQOR/Tracing/FunctionContextBase.h"

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
	/*
	__QOR_IMPLEMENT_OCLASS_LUID( CCodeString );

    //--------------------------------------------------------------------------------
    CCodeString::CCodeString( const char* cpString ) : m_pOrg( cpString ), m_pTrans( 0 ), m_pwTrans( 0 )
    {
		__QCS_MEMBER_FCONTEXT( "CCodeString::CCodeString" );
		Translate();
    }
        
    //--------------------------------------------------------------------------------
    CCodeString::CCodeString( const CCodeString& Src ) : m_pOrg( Src.m_pOrg )
    {
		__QCS_MEMBER_FCONTEXT( "CCodeString::CCodeString" );
		Translate();
    }

    //--------------------------------------------------------------------------------
    CCodeString::~CCodeString()
    {
		__QCS_MEMBER_FCONTEXT( "CCodeString::~CCodeString" );
    }

    //--------------------------------------------------------------------------------
    CCodeString& CCodeString::operator = ( const CCodeString& Src )
    {
		__QCS_MEMBER_FCONTEXT( "CCodeString::operator =" );
        m_pOrg = Src.m_pOrg;
		Translate();
        return *this;
    }

    //--------------------------------------------------------------------------------
    CCodeString::operator const char*() const
    {
		__QCS_MEMBER_FCONTEXT( "CCodeString::operator const char*" );
        return const_cast< const char* >( m_pTrans );
    }

	//--------------------------------------------------------------------------------
	CCodeString::operator const wchar_t*() const
	{
		__QCS_MEMBER_FCONTEXT( "CCodeString::operator const wchar_t*" );
		if( m_pTrans && !m_pwTrans )
		{
			int iLen = strlen( m_pTrans );
			m_pwTrans = new wchar_t[ iLen + 1 ];
			mbstowcs( m_pwTrans, m_pTrans, iLen );
			m_pwTrans[ iLen ] = 0;
		}
		return const_cast< const wchar_t* >( m_pwTrans );
	}

    //--------------------------------------------------------------------------------
    const char* CCodeString::c_str()
    {
        return const_cast< const char* >( m_pTrans );
    }

    //--------------------------------------------------------------------------------
    CTLRef< char > CCodeString::astr()
    {
        CTLRef< char > ref( m_pTrans, false );
        return ref;
    }

    //--------------------------------------------------------------------------------
    CTLRef< mxTCHAR > CCodeString::tstr()
    {
#	if ( __QOR_UNICODE )
        return wstr();
#   else
        return astr();
#endif
    }

    //--------------------------------------------------------------------------------
    CTLRef< wchar_t > CCodeString::wstr()
    {
		if( m_pTrans )
		{
			int iLen = strlen( m_pTrans );
			m_pwTrans = new wchar_t[ iLen + 1 ];
			mbstowcs( m_pwTrans, m_pTrans, iLen );
			m_pwTrans[ iLen ] = 0;
		}
		CTLRef< wchar_t > ref( m_pwTrans, true );
        return ref;
    }

	//--------------------------------------------------------------------------------
	void CCodeString::Translate( void )
	{
		__QCS_MEMBER_FCONTEXT( "CCodeString::Translate" );

		//Get the Locale from the ThreadContext
		const char* szLanguage = CThreadContextBase::GetCurrent()->GetLocale()->GetASCIILanguageID();
		//Get the Module Context
		CDictionary::refType refDictionary = ThisModule().GetDictionary( szLanguage );
		//Get the ASCII-xyz Dictionary from the Module
		//Lookup the translated string
		m_pTrans = refDictionary->Lookup( m_pOrg );

		//If it's not there fall back to the ASCII
		if( m_pTrans == 0 )
		{
			m_pTrans = const_cast< char* >( m_pOrg );
		}
	}
	
*/	
//	//--------------------------------------------------------------------------------
//    CWCodeString::CWCodeString( const wchar_t* cpString ) : m_pOrg( cpString )
//    {
//    }
//
//	//--------------------------------------------------------------------------------
//	CWCodeString::~CWCodeString()
//    {
//    }
//
//    //--------------------------------------------------------------------------------
//    CWCodeString& CWCodeString::operator = ( const CWCodeString& Src )
//    {
//        m_pOrg = Src.m_pOrg;
//        return *this;
//    }
//
//    //--------------------------------------------------------------------------------
//    CWCodeString::operator const wchar_t*() const
//    {
//        return const_cast< const wchar_t* >( m_pTrans );
//    }
//
//	//--------------------------------------------------------------------------------
//	CWCodeString::operator const char*() const
//	{
//		return const_cast< const char* >( m_paTrans );
//	}
//
//    //--------------------------------------------------------------------------------
//    const wchar_t* CWCodeString::c_str() const
//    {
//        return const_cast< const wchar_t* >( m_pTrans );
//    }
//
//    //--------------------------------------------------------------------------------
//    CTLRef< mxTCHAR > CWCodeString::tstr()
//    {
//#	if ( __QOR_UNICODE )
//        return wstr();
//#   else
//        return astr();
//#endif
//    }
//
//    //--------------------------------------------------------------------------------
//    CTLRef< char > CWCodeString::astr()
//    {
//		/*
//        int iLen = 1;//wcslen( m_p );
//        char* pc = new char[ (iLen * 3 ) + 1 ];
//		memset( pc, 0, ( iLen * 3 ) + 1 );
//        //wcstombs( pc, m_p, iLen * 3 );*/
//        CTLRef< char > ref( m_paTrans );
//        return ref;
//    }
//
//    //--------------------------------------------------------------------------------
//    CTLRef< wchar_t > CWCodeString::wstr()
//    {
//        CTLRef< wchar_t > ref( m_pOrg, false );
//        return ref;
//    }

}//nsCodeQOR

