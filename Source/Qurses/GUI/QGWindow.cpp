//QGWindow.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "Qurses/GUI/QGWindow.h"
#include "CodeQOR/Tracing/FunctionContextBase.h"
#include "Qurses/GUI/QGChildWindow.h"
#include "Qurses/curses.h"

//--------------------------------------------------------------------------------
namespace nsQurses
{
	__QOR_IMPLEMENT_OCLASS_LUID( CQGWindow );

	//--------------------------------------------------------------------------------
	CQGWindow::CQGWindow( _win* pWindowStruct, int iLines, int iCols, int iXPos, int iYPos ) : m_pWindowStruct( 0 )
	{
		__QCS_MEMBER_FCONTEXT( "CQGWindow::CQGWindow" );

		if( pWindowStruct == 0 )
		{
			m_pWindowStruct = newwin( iLines, iCols, iYPos, iXPos );
		}
		else
		{
			m_pWindowStruct = pWindowStruct;
		}
		SyncOK( true );
	}

	//--------------------------------------------------------------------------------
	CQGWindow::CQGWindow( FILE* pFile )
	{
		__QCS_MEMBER_FCONTEXT( "CQGWindow::CQGWindow" );
		LoadFromFile( pFile );
		SyncOK( true );
	}

	//--------------------------------------------------------------------------------
	CQGWindow::CQGWindow( const CQGWindow& src )
	{
		__QCS_MEMBER_FCONTEXT( "CQGWindow::CQGWindow" );
		m_pWindowStruct = dupwin( const_cast< _win* >( src.PrivateData() ) );
		SyncOK( true );
	}

	//--------------------------------------------------------------------------------
	CQGWindow::CQGWindow( CQGWindow* )	//derived class will do initialization
	{
		__QCS_MEMBER_FCONTEXT( "CQGWindow::CQGWindow" );
	}

	//--------------------------------------------------------------------------------
	CQGWindow::~CQGWindow()
	{
		__QCS_MEMBER_FCONTEXT( "CQGWindow::~CQGWindow" );

		if( m_pWindowStruct != 0 )
		{
			delwin( m_pWindowStruct );
			m_pWindowStruct = 0;
		}
	}

	//--------------------------------------------------------------------------------
	//Detach from the underlying Qurses structure, only used for stdscr/desktop
	void CQGWindow::Detach( void )
	{
		m_pWindowStruct = 0;
	}

	//--------------------------------------------------------------------------------
	int CQGWindow::MoveTo( int XPos, int YPos )
	{
		__QCS_MEMBER_FCONTEXT( "CQGWindow::MoveTo" );

		return mvwin( m_pWindowStruct, YPos, XPos );
	}

	//--------------------------------------------------------------------------------
	void CQGWindow::Resize( int XSize, int YSize )
	{
		__QCS_MEMBER_FCONTEXT( "CQGWindow::Resize" );

		m_pWindowStruct = resize_window( m_pWindowStruct, YSize, XSize );
	}

	//--------------------------------------------------------------------------------
	CQGWindow* CQGWindow::CreateChild( int iLines, int iCols, int XPos, int YPos )
	{
		return new CQGChildWindow( this, iLines, iCols, XPos, YPos );
	}

	//--------------------------------------------------------------------------------
	void CQGWindow::SyncDown()
	{
		wsyncdown( m_pWindowStruct );
	}

	//--------------------------------------------------------------------------------
	void CQGWindow::CursSyncUp()
	{
		wcursyncup( m_pWindowStruct );
	}

	//--------------------------------------------------------------------------------
	int CQGWindow::SyncOK( bool bf )
	{
		return syncok( m_pWindowStruct, bf );
	}

	//--------------------------------------------------------------------------------
	void CQGWindow::SyncUp()
	{
		wsyncup( m_pWindowStruct );
	}

	//--------------------------------------------------------------------------------
	const _win* CQGWindow::PrivateData( void ) const
	{
		return m_pWindowStruct;
	}

	//--------------------------------------------------------------------------------
	int CQGWindow::Touch()
	{
        return touchwin( m_pWindowStruct );
	}

	//--------------------------------------------------------------------------------
	int CQGWindow::TouchLine( int iStart, int iCount )
	{
        return touchline( m_pWindowStruct, iStart, iCount );
	}

	//--------------------------------------------------------------------------------
	int CQGWindow::UnTouch()
	{
        return untouchwin( m_pWindowStruct );
	}

	//--------------------------------------------------------------------------------
	int CQGWindow::TouchedLines( int y, int n, bool bTouched )
	{
        return wtouchln( m_pWindowStruct, y, n, bTouched ? 1 : 0 );
	}

	//--------------------------------------------------------------------------------
	bool CQGWindow::IsLineTouched( int iLine )
	{
        return is_linetouched( m_pWindowStruct, iLine );
	}

	//--------------------------------------------------------------------------------
	bool CQGWindow::IsTouched()
	{
        return is_wintouched( m_pWindowStruct );
	}

	//--------------------------------------------------------------------------------
	int CQGWindow::Scroll( int iLines )
	{
		return wscrl( m_pWindowStruct, iLines );
	}

	//--------------------------------------------------------------------------------
	int CQGWindow::SaveToFile( FILE* pFile )
	{
		return putwin( m_pWindowStruct, pFile );
	}

	//--------------------------------------------------------------------------------
	void CQGWindow::LoadFromFile( FILE* pFile )
	{
		m_pWindowStruct = getwin( pFile );
	}

	//--------------------------------------------------------------------------------
	int CQGWindow::Scan( const char* fmt, ... )
	{
		va_list args;
		int retval;

		va_start( args, fmt );
		retval = vwscanw( m_pWindowStruct, fmt, args );
		va_end( args );

		return retval;
	}

	//--------------------------------------------------------------------------------
	int CQGWindow::MoveScan( int y, int x, const char *fmt, ... )
	{
		va_list args;
		int retval;

		if( MoveTo( x, y ) == ERR )
		{
			return ERR;
		}

		va_start( args, fmt );
		retval = vwscanw( m_pWindowStruct, fmt, args );
		va_end( args );

		return retval;
	}

	//--------------------------------------------------------------------------------
	int CQGWindow::Refresh()
	{
		if( !m_Layout.IsNull() )
		{
			if( m_Layout->NeedsPainting() )
			{
				m_Layout->Paint();
			}
		}
		int iResult = wrefresh( m_pWindowStruct );

		for( std::vector< CQGWindow* >::iterator it = m_VecChildWindows.begin(); it != m_VecChildWindows.end(); it++ )
		{
			(*it)->Refresh();
		}

		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CQGWindow::OutRefesh()
	{
		return wnoutrefresh( m_pWindowStruct );
	}

	//--------------------------------------------------------------------------------
	int CQGWindow::Redraw()
	{
		return redrawwin( m_pWindowStruct );
	}

	//--------------------------------------------------------------------------------
	int CQGWindow::RedrawLines( int iStartLine, int iNumLines )
	{
		return wredrawln( m_pWindowStruct, iStartLine, iNumLines );
	}       

	//------------------------------------------------------------------------------
	int CQGWindow::Print( const char* fmt, ... )
	{
		va_list args;
		int retval;

		va_start( args, fmt );
		retval = vwprintw( m_pWindowStruct, fmt, args );
		va_end( args );

		return retval;
	}

	//------------------------------------------------------------------------------
	int CQGWindow::MovePrint( int x, int y, const char* fmt, ... )
	{
		va_list args;
		int retval;

		if( MoveTo( x, y ) == ERR )
		{
			return ERR;
		}
		va_start( args, fmt );
		retval = vwprintw( stdscr, fmt, args );
		va_end( args );

		return retval;
	}

	//------------------------------------------------------------------------------
	int CQGWindow::ClearOK( bool bf )
	{
		return clearok( m_pWindowStruct, bf );
	}

	//------------------------------------------------------------------------------
	int CQGWindow::idlOK( bool bf )
	{
		return idlok( m_pWindowStruct, bf );
	}

	//------------------------------------------------------------------------------
	void CQGWindow::idcOK( bool bf )
	{
		idcok( m_pWindowStruct, bf );
	}

	//------------------------------------------------------------------------------
	void CQGWindow::immedOK( bool bf )
	{
		immedok( m_pWindowStruct, bf );
	}

	//------------------------------------------------------------------------------
	int CQGWindow::leaveOK( bool bf )
	{
		return leaveok( m_pWindowStruct, bf );
	}

	//------------------------------------------------------------------------------
	int CQGWindow::SetScrReg( int iTop, int iBot )
	{
		return wsetscrreg( m_pWindowStruct, iTop, iBot );
	}

	//------------------------------------------------------------------------------
	int CQGWindow::ScrollOK( bool bf )
	{
		return scrollok( m_pWindowStruct, bf );
	}

	//------------------------------------------------------------------------------
	void CQGWindow::MousePosition( int& XPos, int& YPos )
	{
		wmouse_position( m_pWindowStruct, &YPos, &XPos );
	}

	//------------------------------------------------------------------------------
	int CQGWindow::InStr( char* str )
	{
		return winstr( m_pWindowStruct, str );
	}

	//------------------------------------------------------------------------------
	int CQGWindow::InNStr( char* str, int n )
	{
		return winnstr( m_pWindowStruct, str, n );
	}

	//------------------------------------------------------------------------------
	int CQGWindow::MoveInStr( int XPos, int YPos, char* str )
	{
		return mvwinstr( m_pWindowStruct, YPos, XPos, str );
	}

	//------------------------------------------------------------------------------
	int CQGWindow::MoveInNStr( int XPos, int YPos, char* str, int n )
	{
		return mvwinnstr( m_pWindowStruct, YPos, XPos, str, n );
	}

	/*
	//------------------------------------------------------------------------------
	int CQGWindow::InWStr( wchar_t* wstr )
	{
		return winwstr( m_pWindowStruct, wstr );
	}

	//------------------------------------------------------------------------------
	int CQGWindow::InNWStr( wchar_t* wstr, int n )
	{
		return winnwstr( m_pWindowStruct, wstr, int n );
	}

	//------------------------------------------------------------------------------
	int CQGWindow::MoveInWStr( int XPos, int YPos, wchar_t* wstr )
	{
		return mvwinwstr( m_pWindowStruct, YPos, XPos, wstr );
	}

	//------------------------------------------------------------------------------
	int CQGWindow::MoveInNWStr( int XPos, int YPos, wchar_t* wstr, int n )
	{
		return mvwinnwstr( m_pWindowStruct, YPos, XPos, wstr, n );
	}
	*/

	//------------------------------------------------------------------------------
	int CQGWindow::InsertStr( const char* str )
	{
		return winsstr( m_pWindowStruct, str );
	}

	//------------------------------------------------------------------------------
	int CQGWindow::InsertNStr( const char* str, int n )
	{
		return winsnstr( m_pWindowStruct, str, n );
	}

	//------------------------------------------------------------------------------
	int CQGWindow::MoveInsertStr( int XPos, int YPos, const char* str )
	{
		return mvwinsstr( m_pWindowStruct, YPos, XPos, str );
	}

	//------------------------------------------------------------------------------
	int CQGWindow::MoveInsertNStr( int XPos, int YPos, const char* str, int n )
	{
		return mvwinsnstr( m_pWindowStruct, YPos, XPos, str, n );
	}

	//------------------------------------------------------------------------------
	int CQGWindow::InsertChType( chtype ch )
	{
		return winsch( m_pWindowStruct, ch);
	}
	
	//------------------------------------------------------------------------------
	int CQGWindow::MoveInsertChType( int XPos, int YPos, chtype ch )
	{
		return mvwinsch( m_pWindowStruct, YPos, XPos, ch );
	}

	//------------------------------------------------------------------------------
	chtype CQGWindow::GetBackground()
	{
        return getbkgd( m_pWindowStruct );
	}

	//------------------------------------------------------------------------------
	void CQGWindow::SetBackgroundColour( unsigned int uiPaletteColour )
	{
		SetBackground( ( (chtype)(uiPaletteColour) << PDC_COLOR_SHIFT) & A_COLOR );
	}

	//------------------------------------------------------------------------------
	void CQGWindow::SetBackground( chtype ch )
	{
		wbkgdset( m_pWindowStruct, ch );
	}

	//------------------------------------------------------------------------------
	int CQGWindow::PaintBackground( chtype ch )
	{
        return wbkgd( m_pWindowStruct, ch );
	}

	//------------------------------------------------------------------------------
	int CQGWindow::Erase()
	{
		return werase( m_pWindowStruct );
	}

	//------------------------------------------------------------------------------
	int CQGWindow::SetAttributes( chtype attrs )
	{
		return wattrset( m_pWindowStruct, attrs );
	}

	//------------------------------------------------------------------------------
	chtype CQGWindow::GetAttributes( void )
	{
		return m_pWindowStruct->_attrs;
	}

	//------------------------------------------------------------------------------
	int CQGWindow::SetNoDelay( bool bNoDelay )
	{
		return nodelay( m_pWindowStruct, bNoDelay );
	}

	//------------------------------------------------------------------------------
	void CQGWindow::SetLayout( CQGLayout::refType Layout )
	{
		m_Layout = Layout;
		if( !m_Layout.IsNull() )
		{
			m_Layout->SetWindow( this );
			m_Layout->SetXPos( 0 );
			m_Layout->SetYPos( 0 );
			m_Layout->SetWidth( GetWidth() );
			m_Layout->SetHeight( GetHeight() );
			m_Layout->Layout();
		}
	}

	//------------------------------------------------------------------------------
	unsigned int CQGWindow::GetWidth( void )
	{
		return m_pWindowStruct->_maxx;
	}

	//------------------------------------------------------------------------------
	unsigned int CQGWindow::GetHeight( void )
	{
		return m_pWindowStruct->_maxy;
	}

	//------------------------------------------------------------------------------
	unsigned int CQGWindow::Left( void )
	{
		return m_pWindowStruct->_begx;
	}

	//------------------------------------------------------------------------------
	unsigned int CQGWindow::Top( void )
	{
		return m_pWindowStruct->_begy;
	}

	//------------------------------------------------------------------------------
	std::string CQGWindow::GetWindowTitle( void )
	{
		return m_strWindowTitle;
	}

	//------------------------------------------------------------------------------
	void CQGWindow::SetWindowTitle( std::string& strWindowTitle )
	{
		m_strWindowTitle = strWindowTitle;
	}

	//------------------------------------------------------------------------------
	int CQGWindow::MoveAddChArray( int XPos, int YPos, const chtype* pch, int n)
	{
		return mvwaddchnstr( m_pWindowStruct, YPos, XPos, pch, n );
	}

	//------------------------------------------------------------------------------
	void CQGWindow::AddChild( CQGWindow* pChild )
	{
		m_VecChildWindows.push_back( pChild );
	}

}//nsQurses
