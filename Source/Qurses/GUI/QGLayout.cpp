//QGLayout.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "Qurses/GUI/QGLayout.h"
#include "CodeQOR/Tracing/FunctionContextBase.h"
#include "Qurses/GUI/QGWindow.h"
#include "Qurses/curses.h"

//--------------------------------------------------------------------------------
namespace nsQurses
{
	__QOR_IMPLEMENT_OCLASS_LUID( CQGLayoutItem );

	//--------------------------------------------------------------------------------
	CQGLayoutItem::CQGLayoutItem() :
		m_uiMinWidth( 1 )
	,	m_uiMaxWidth( 1 )
	,	m_uiWidth( 1 )
	,	m_uiMinHeight( 1 )
	,	m_uiMaxHeight( 1 )
	,	m_uiHeight( 1 )
	,	m_uiXPos( 0 )
	,	m_uiYPos( 0 )
	,	m_pWindow( 0 )
	,	m_bNeedsPainting( false )
	,	m_uiLeftMargin( 0 )
	,	m_uiRightMargin( 0 )
	,	m_uiTopMargin( 0 )
	,	m_uiBottomMargin( 0 )
	,	m_HAlign( eLeft )
	,	m_VAlign( eTop )
	{
		__QCS_MEMBER_FCONTEXT( "CQGLayoutItem::CQGLayoutItem" );
	}

	//--------------------------------------------------------------------------------
	CQGLayoutItem::CQGLayoutItem( const CQGLayoutItem& src )
	{
		__QCS_MEMBER_FCONTEXT( "CQGLayoutItem::CQGLayoutItem" );
		*this = src;
	}

	//--------------------------------------------------------------------------------
	CQGLayoutItem& CQGLayoutItem::operator = ( const CQGLayoutItem& src )
	{
		__QCS_MEMBER_FCONTEXT( "CQGLayoutItem::operator =" );
		if( &src != this )
		{
			m_uiMinWidth = src.m_uiMinWidth;
			m_uiMaxWidth = src.m_uiMaxWidth;
			m_uiWidth = src.m_uiWidth;
			m_uiMinHeight = src.m_uiMinHeight;
			m_uiMaxHeight = src.m_uiMaxHeight;
			m_uiHeight = src.m_uiHeight;
			m_uiXPos = src.m_uiXPos;
			m_uiYPos = src.m_uiYPos;
			m_pWindow = src.m_pWindow;
			m_bNeedsPainting = src.m_bNeedsPainting;
			m_uiLeftMargin = src.m_uiLeftMargin;
			m_uiRightMargin = src.m_uiRightMargin;
			m_uiTopMargin = src.m_uiTopMargin;
			m_uiBottomMargin = src.m_uiBottomMargin;
			m_HAlign = src.m_HAlign;
			m_VAlign = src.m_VAlign;
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	CQGLayoutItem::~CQGLayoutItem()
	{
		__QCS_MEMBER_FCONTEXT( "CQGLayoutItem::~CQGLayoutItem" );
	}

	//--------------------------------------------------------------------------------
	unsigned int CQGLayoutItem::GetMaxWidth( void )
	{
		return m_uiMaxWidth;
	}

	//--------------------------------------------------------------------------------
	unsigned int CQGLayoutItem::GetMinWidth( void )
	{
		return m_uiMinWidth;
	}

	//--------------------------------------------------------------------------------
	unsigned int CQGLayoutItem::GetPreferedWidth( void )
	{
		return GetMinWidth();
	}

	//--------------------------------------------------------------------------------
	unsigned int CQGLayoutItem::GetMaxHeight( void )
	{
		return m_uiMaxHeight;
	}

	//--------------------------------------------------------------------------------
	unsigned int CQGLayoutItem::GetMinHeight( void )
	{
		return m_uiMinHeight;
	}

	//--------------------------------------------------------------------------------
	unsigned int CQGLayoutItem::GetPreferedHeight( void )
	{
		return GetMinHeight();
	}
		
	//--------------------------------------------------------------------------------
	unsigned int CQGLayoutItem::GetWidth( void )
	{
		return m_uiWidth;
	}

	//--------------------------------------------------------------------------------
	unsigned int CQGLayoutItem::GetHeight( void )
	{
		return m_uiHeight;
	}

	//--------------------------------------------------------------------------------
	void CQGLayoutItem::SetMaxWidth( unsigned int uiMaxWidth )
	{
		m_uiMaxWidth = uiMaxWidth;
		if( m_uiWidth > m_uiMaxWidth )
		{
			m_uiWidth = m_uiMaxWidth;
		}
	}

	//--------------------------------------------------------------------------------
	void CQGLayoutItem::SetMinWidth( unsigned int uiMinWidth )
	{
		m_uiMinWidth = uiMinWidth;
		if( m_uiWidth < uiMinWidth )
		{
			m_uiWidth = m_uiMinWidth;
		}
	}

	//--------------------------------------------------------------------------------
	void CQGLayoutItem::SetMaxHeight( unsigned int uiMaxHeight )
	{
		m_uiMaxHeight = uiMaxHeight;
		if( m_uiHeight > m_uiMaxHeight )
		{
			m_uiHeight = m_uiMaxHeight;
		}
	}

	//--------------------------------------------------------------------------------
	void CQGLayoutItem::SetMinHeight( unsigned int uiMinHeight )
	{
		m_uiMinHeight = uiMinHeight;
		if( m_uiHeight < m_uiMinHeight )
		{
			m_uiHeight = m_uiMinHeight;
		}
	}

	//--------------------------------------------------------------------------------
	bool CQGLayoutItem::SetWidth( unsigned int uiWidth )
	{
		if( uiWidth >= m_uiMinWidth && uiWidth <= m_uiMaxWidth )
		{
			m_uiWidth = uiWidth;
			return true;
		}
		return false;
	}

	//--------------------------------------------------------------------------------
	bool CQGLayoutItem::SetHeight( unsigned int uiHeight )
	{
		if( uiHeight >= m_uiMinHeight && uiHeight <= m_uiMaxHeight )
		{
			m_uiHeight = uiHeight;
			return true;
		}
		return false;
	}

	//--------------------------------------------------------------------------------
	unsigned int CQGLayoutItem::GetXPos( void )
	{
		return m_uiXPos;
	}

	//--------------------------------------------------------------------------------
	unsigned int CQGLayoutItem::GetYPos( void )
	{
		return m_uiYPos;
	}

	//--------------------------------------------------------------------------------
	void CQGLayoutItem::SetXPos( unsigned int uiXPos )
	{
		m_uiXPos = uiXPos;
	}

	//--------------------------------------------------------------------------------
	void CQGLayoutItem::SetYPos( unsigned int uiYPos )
	{
		m_uiYPos = uiYPos;
	}

	//--------------------------------------------------------------------------------
	bool CQGLayoutItem::Layout( void )
	{
		m_bNeedsPainting = true;
		return true;
	}

	//--------------------------------------------------------------------------------
	void CQGLayoutItem::Paint( void )
	{
		m_bNeedsPainting = false;
	}
		
	//--------------------------------------------------------------------------------
	void CQGLayoutItem::SetWindow( CQGWindow* pWindow )
	{
		m_pWindow = pWindow;
	}

	//--------------------------------------------------------------------------------
	CQGWindow* CQGLayoutItem::GetWindow()
	{
		return m_pWindow;
	}

	//--------------------------------------------------------------------------------
	bool CQGLayoutItem::NeedsPainting( void )
	{
		return m_bNeedsPainting;
	}

	//--------------------------------------------------------------------------------
	void CQGLayoutItem::SetMargins( unsigned int uiLeft, unsigned int uiTop, unsigned int uiRight, unsigned int uiBottom )
	{
		m_uiLeftMargin = uiLeft;
		m_uiRightMargin = uiRight;
		m_uiTopMargin = uiTop;
		m_uiBottomMargin = uiBottom;
	}

	//--------------------------------------------------------------------------------
	void CQGLayoutItem::GetMargins( unsigned int& uiLeft, unsigned int& uiTop, unsigned int& uiRight, unsigned int& uiBottom )
	{
		uiLeft = m_uiLeftMargin;
		uiRight = m_uiRightMargin;
		uiTop = m_uiTopMargin;
		uiBottom = m_uiBottomMargin;
	}

	//--------------------------------------------------------------------------------
	void CQGLayoutItem::SetHAlign( CQGLayoutItem::eHAlign HAlign )
	{
		m_HAlign = HAlign;
	}

	//--------------------------------------------------------------------------------
	void CQGLayoutItem::SetVAlign( CQGLayoutItem::eVAlign VAlign )
	{
		m_VAlign = VAlign;
	}

	//--------------------------------------------------------------------------------
	CQGLayoutItem::eHAlign CQGLayoutItem::GetHAlign( void )
	{
		return m_HAlign;
	}

	//--------------------------------------------------------------------------------
	CQGLayoutItem::eVAlign CQGLayoutItem::GetVAlign( void )
	{
		return m_VAlign;
	}

	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CQGLayout );

	//--------------------------------------------------------------------------------
	CQGLayout::CQGLayout() : CQGLayoutItem()
	{
	}

	//--------------------------------------------------------------------------------
	CQGLayout::CQGLayout( const CQGLayout& src ) : CQGLayoutItem( src )
	{
		m_VecItems = src.m_VecItems;
	}

	//--------------------------------------------------------------------------------
	CQGLayout& CQGLayout::operator = ( const CQGLayout& src )
	{
		if( &src != this )
		{
			CQGLayoutItem::operator=( src );
			m_VecItems = src.m_VecItems;
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	CQGLayout::~CQGLayout()
	{
	}

	//--------------------------------------------------------------------------------
	void CQGLayout::SetWindow( CQGWindow* pWindow )
	{
		if( m_pWindow == 0 )
		{
			m_pWindow = pWindow;
		}
		for( std::vector< CQGLayoutItem* >::iterator it = m_VecItems.begin(); it != m_VecItems.end(); it++ )
		{
			(*it)->SetWindow( m_pWindow );
		}
	}

	//--------------------------------------------------------------------------------
	void CQGLayout::Paint( void )
	{
		for( std::vector< CQGLayoutItem* >::iterator it = m_VecItems.begin(); it != m_VecItems.end(); it++ )
		{
			(*it)->Paint();
		}
		m_bNeedsPainting = false;
	}

	//--------------------------------------------------------------------------------
	void CQGLayout::AddItem( CQGLayoutItem* pItem )
	{
		if( !pItem->GetWindow() )
		{
			pItem->SetWindow( GetWindow() );
		}
		m_VecItems.push_back( pItem );
	}

	//--------------------------------------------------------------------------------
	unsigned int CQGLayout::GetInternalWidth( void )
	{
		return GetWidth() - ( m_uiLeftMargin + m_uiRightMargin );
	}

	//--------------------------------------------------------------------------------
	unsigned int CQGLayout::GetInternalHeight( void )
	{
		return GetHeight() - ( m_uiTopMargin + m_uiBottomMargin );
	}

}//nsQurses
