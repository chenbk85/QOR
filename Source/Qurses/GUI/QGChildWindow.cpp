//QGChildWindow.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "Qurses/GUI/QGChildWindow.h"
#include "CodeQOR/Tracing/FunctionContextBase.h"
#include "Qurses/curses.h"

//--------------------------------------------------------------------------------
namespace nsQurses
{
	__QOR_IMPLEMENT_OCLASS_LUID( CQGChildWindow );

	//--------------------------------------------------------------------------------
	CQGChildWindow::CQGChildWindow( CQGWindow* pParent, int iLines, int iCols, int iXPos, int iYPos ) : CQGWindow( this )
	,	m_pParent( pParent )
	{
		__QCS_MEMBER_FCONTEXT( "CQGChildWindow::CQGChildWindow" );

		m_pWindowStruct = subwin( const_cast< _win* >( pParent->PrivateData() ), iLines, iCols, iYPos, iXPos );
		m_pParent->AddChild( this );
	}

	//--------------------------------------------------------------------------------
	CQGChildWindow::~CQGChildWindow()
	{
		__QCS_MEMBER_FCONTEXT( "CQGChildWindow::~CQGChildWindow" );
	}

	//--------------------------------------------------------------------------------
	int CQGChildWindow::MoveTo( int XPos, int YPos )
	{
		__QCS_MEMBER_FCONTEXT( "CQGWindow::MoveTo" );

		return mvderwin( m_pWindowStruct, YPos, XPos );
	}

	//--------------------------------------------------------------------------------
	unsigned int CQGChildWindow::GetMaxWidth( void )
	{
		if( !m_Layout.IsNull() )
		{
			return m_Layout->GetMaxWidth();
		}
		return m_uiMaxWidth;
	}

	//--------------------------------------------------------------------------------
	unsigned int CQGChildWindow::GetMinWidth( void )
	{
		if( !m_Layout.IsNull() )
		{
			return m_Layout->GetMinWidth();
		}
		return m_uiMinWidth;
	}

	//--------------------------------------------------------------------------------
	unsigned int CQGChildWindow::GetPreferedWidth( void )
	{
		if( !m_Layout.IsNull() )
		{
			return m_Layout->GetPreferedHeight();
		}
		return m_uiWidth;
	}

	//--------------------------------------------------------------------------------
	unsigned int CQGChildWindow::GetMaxHeight( void )
	{
		if( !m_Layout.IsNull() )
		{
			return m_Layout->GetMaxHeight();
		}
		return m_uiMaxHeight;
	}

	//--------------------------------------------------------------------------------
	unsigned int CQGChildWindow::GetMinHeight( void )
	{
		if( !m_Layout.IsNull() )
		{
			return m_Layout->GetMinHeight();
		}
		return m_uiMinHeight;
	}

	//--------------------------------------------------------------------------------
	unsigned int CQGChildWindow::GetPreferedHeight( void )
	{
		if( !m_Layout.IsNull() )
		{
			return m_Layout->GetPreferedHeight();
		}
		return m_uiHeight;
	}

	//--------------------------------------------------------------------------------
	
	unsigned int CQGChildWindow::GetWidth( void )
	{
		if( !m_Layout.IsNull() )
		{
			return m_Layout->GetWidth();
		}
		return m_uiWidth;
	}

	//--------------------------------------------------------------------------------
	unsigned int CQGChildWindow::GetHeight( void )
	{
		if( !m_Layout.IsNull() )
		{
			return m_Layout->GetHeight();
		}
		return m_uiHeight;
	}

	//--------------------------------------------------------------------------------
	void CQGChildWindow::SetMaxWidth( unsigned int uiMaxWidth )
	{
		if( !m_Layout.IsNull() )
		{
			m_Layout->SetMaxWidth( uiMaxWidth );
		}
		m_uiMaxWidth = uiMaxWidth;
	}

	//--------------------------------------------------------------------------------
	void CQGChildWindow::SetMinWidth( unsigned int uiMinWidth )
	{
		if( !m_Layout.IsNull() )
		{
			m_Layout->SetMinWidth( uiMinWidth );
		}
		m_uiMinWidth = uiMinWidth;
	}

	//--------------------------------------------------------------------------------
	void CQGChildWindow::SetMaxHeight( unsigned int uiMaxHeight )
	{
		if( !m_Layout.IsNull() )
		{
			m_Layout->SetMaxHeight( uiMaxHeight );
		}
		m_uiMaxHeight = uiMaxHeight;
	}

	//--------------------------------------------------------------------------------
	void CQGChildWindow::SetMinHeight( unsigned int uiMinHeight )
	{
		if( !m_Layout.IsNull() )
		{
			m_Layout->SetMinHeight( uiMinHeight );
		}
		m_uiMinHeight = uiMinHeight;
	}

	//--------------------------------------------------------------------------------
	bool CQGChildWindow::SetWidth( unsigned int uiWidth )
	{
		if( !m_Layout.IsNull() )
		{
			return m_Layout->SetWidth( uiWidth );
		}
		m_uiWidth = uiWidth;
		return true;
	}

	//--------------------------------------------------------------------------------
	bool CQGChildWindow::SetHeight( unsigned int uiHeight )
	{
		if( !m_Layout.IsNull() )
		{
			return m_Layout->SetHeight( uiHeight );
		}
		m_uiHeight = uiHeight;
		return true;
	}

	//--------------------------------------------------------------------------------
	void CQGChildWindow::SetMargins( unsigned int uiLeft, unsigned int uiTop, unsigned int uiRight, unsigned int uiBottom )
	{
		if( !m_Layout.IsNull() )
		{
			m_Layout->SetMargins( uiLeft, uiTop, uiRight, uiBottom );
		}
	}

	//--------------------------------------------------------------------------------
	void CQGChildWindow::GetMargins( unsigned int& uiLeft, unsigned int& uiTop, unsigned int& uiRight, unsigned int& uiBottom )
	{
		if( !m_Layout.IsNull() )
		{
			m_Layout->GetMargins( uiLeft, uiTop, uiRight, uiBottom );
		}
	}

	//--------------------------------------------------------------------------------	
	unsigned int CQGChildWindow::GetXPos( void )
	{
		if( !m_Layout.IsNull() )
		{
			return m_Layout->GetXPos();
		}
		return m_uiXPos;
	}

	//--------------------------------------------------------------------------------
	unsigned int CQGChildWindow::GetYPos( void )
	{
		if( !m_Layout.IsNull() )
		{
			return m_Layout->GetYPos();
		}
		return m_uiYPos;
	}

	//--------------------------------------------------------------------------------
	void CQGChildWindow::SetXPos( unsigned int uiXPos )
	{
		if( !m_Layout.IsNull() )
		{
			m_Layout->SetXPos( 0 );
		}
		MoveTo( uiXPos, GetYPos() );
	}

	//--------------------------------------------------------------------------------
	void CQGChildWindow::SetYPos( unsigned int uiYPos )
	{
		if( !m_Layout.IsNull() )
		{
			m_Layout->SetYPos( 0 );
		}
		MoveTo( GetXPos(), uiYPos );
	}

	//--------------------------------------------------------------------------------
	bool CQGChildWindow::Layout( void )
	{
		if( !m_Layout.IsNull() )
		{
			return m_Layout->Layout();
		}
		return true;
	}

	//--------------------------------------------------------------------------------
	void CQGChildWindow::Paint( void )
	{
		if( !m_Layout.IsNull() )
		{
			m_Layout->Paint();
		}
	}

}//nsQurses
