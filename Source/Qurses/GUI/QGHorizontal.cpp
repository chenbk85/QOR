//QGHorizontal.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "Qurses/GUI/QGHorizontal.h"
#include "CodeQOR/Tracing/FunctionContextBase.h"

//--------------------------------------------------------------------------------
namespace nsQurses
{
	__QOR_IMPLEMENT_OCLASS_LUID( CQGHorizontal );

	//--------------------------------------------------------------------------------
	CQGHorizontal::CQGHorizontal() : CQGLayout()
	{
		__QCS_MEMBER_FCONTEXT( "CQGHorizontal::CQGHorizontal" );
		m_uiMaxWidth = UINT_MAX;
		m_uiMaxHeight = UINT_MAX;
	}

	//--------------------------------------------------------------------------------
	CQGHorizontal::CQGHorizontal( const CQGHorizontal& src ) : CQGLayout( src )
	{
		__QCS_MEMBER_FCONTEXT( "CQGHorizontal::CQGHorizontal" );
	}

	//--------------------------------------------------------------------------------
	CQGHorizontal& CQGHorizontal::operator = ( const CQGHorizontal& src )
	{
		__QCS_MEMBER_FCONTEXT( "CQGHorizontal::operator =" );
		if( &src != this )
		{
			CQGLayout::operator = ( src );
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	CQGHorizontal::~CQGHorizontal()
	{
		__QCS_MEMBER_FCONTEXT( "CQGHorizontal::~CQGHorizontal" );
	}

	//--------------------------------------------------------------------------------
	//sum max widths of content
	unsigned int CQGHorizontal::GetMaxWidth( void )
	{
		unsigned int uiMaxWidth = 0;
		for( std::vector< CQGLayoutItem* >::iterator it = m_VecItems.begin(); it != m_VecItems.end(); it++ )
		{
			uiMaxWidth += (*it)->GetMaxWidth();
		}
		return uiMaxWidth;		
	}

	//--------------------------------------------------------------------------------
	//sum min widths of content
	unsigned int CQGHorizontal::GetMinWidth( void )
	{
		unsigned int uiMinWidth = 0;
		for( std::vector< CQGLayoutItem* >::iterator it = m_VecItems.begin(); it != m_VecItems.end(); it++ )
		{
			uiMinWidth += (*it)->GetMinWidth();
		}
		return uiMinWidth;		
	}

	//--------------------------------------------------------------------------------
	//sum prefered widths of content
	unsigned int CQGHorizontal::GetPreferedWidth( void )
	{
		unsigned int uiPreferedWidth = 0;
		for( std::vector< CQGLayoutItem* >::iterator it = m_VecItems.begin(); it != m_VecItems.end(); it++ )
		{
			uiPreferedWidth += (*it)->GetPreferedWidth();
		}
		return uiPreferedWidth;
	}

	//--------------------------------------------------------------------------------
	//minimum of content max heights
	unsigned int CQGHorizontal::GetMaxHeight( void )
	{
		unsigned int uiMaxHeight = m_uiMaxHeight;
		for( std::vector< CQGLayoutItem* >::iterator it = m_VecItems.begin(); it != m_VecItems.end(); it++ )
		{
			unsigned int uiChildMax = (*it)->GetMaxHeight();
			if( uiChildMax < uiMaxHeight )
			{
				uiMaxHeight = uiChildMax;
			}
		}
		return uiMaxHeight;		
	}

	//--------------------------------------------------------------------------------
	//maximum of content min heights
	unsigned int CQGHorizontal::GetMinHeight( void )
	{
		unsigned int uiMinHeight = 0;
		for( std::vector< CQGLayoutItem* >::iterator it = m_VecItems.begin(); it != m_VecItems.end(); it++ )
		{
			unsigned int uiChildMin = (*it)->GetMinHeight();
			if( uiChildMin > uiMinHeight )
			{
				uiMinHeight = uiChildMin;
			}
		}
		return uiMinHeight;
	}

	//--------------------------------------------------------------------------------
	//maximum of content prefered heights
	unsigned int CQGHorizontal::GetPreferedHeight( void )
	{		
		unsigned int uiPreferedHeight = 0;
		for( std::vector< CQGLayoutItem* >::iterator it = m_VecItems.begin(); it != m_VecItems.end(); it++ )
		{
			unsigned int uiChildPrefered = (*it)->GetPreferedHeight();
			if( uiChildPrefered > uiPreferedHeight )
			{
				uiPreferedHeight = uiChildPrefered;
			}
		}
		return uiPreferedHeight;
	}
		
	//--------------------------------------------------------------------------------
	//layout content on the assumption we've already been layed out
	bool CQGHorizontal::Layout( void )
	{
		double dPreferedWidth = GetPreferedWidth();
		bool bLayoutSucceeded = true;
		unsigned int uiXOffset = m_uiLeftMargin;
		for( std::vector< CQGLayoutItem* >::iterator it = m_VecItems.begin(); it != m_VecItems.end(); it++ )
		{
			bLayoutSucceeded &= (*it)->SetHeight( std::min( GetInternalHeight(), (*it)->GetMaxHeight() ) );

			if( (*it)->GetVAlign() == eTop )
			{
				(*it)->SetYPos( GetYPos() + m_uiTopMargin );
			}
			else if( (*it )->GetVAlign() == eBottom )
			{
				(*it)->SetYPos( GetYPos() + m_uiTopMargin + GetInternalHeight() - (*it)->GetHeight() );
			}
			else //Middle
			{
				(*it)->SetYPos( GetYPos() + m_uiTopMargin + ( GetInternalHeight() / 2 ) - ( (*it)->GetHeight() / 2 ) );
			}

			(*it)->SetXPos( GetXPos() + uiXOffset );
			
			unsigned int uiItemWidth = ( (float)(*it)->GetPreferedWidth() / ( dPreferedWidth / GetInternalWidth() ) );
			uiItemWidth = std::min( (*it)->GetMaxWidth(), std::max( (*it)->GetMinWidth(), uiItemWidth ) );
			bLayoutSucceeded &= (*it)->SetWidth( uiItemWidth );
			uiXOffset += uiItemWidth;
			bLayoutSucceeded &= (*it)->Layout();
		}
		m_bNeedsPainting = true;
		return bLayoutSucceeded;
	}


}//nsQurses
