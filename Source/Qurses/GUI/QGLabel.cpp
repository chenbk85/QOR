//QGLabel.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "Qurses/GUI/QGLabel.h"
#include "CodeQOR/Tracing/FunctionContextBase.h"
#include "Qurses/curses.h"

//--------------------------------------------------------------------------------
namespace nsQurses
{
	__QOR_IMPLEMENT_OCLASS_LUID( CQGLabel );

	//--------------------------------------------------------------------------------
	CQGLabel::CQGLabel() : m_pPresentationBuffer( 0 ), m_bModified( false ), m_TextAlignment( eLeft )
	{
		__QCS_MEMBER_FCONTEXT( "CQGLabel::CQGLabel" );
		SetMaxHeight( 1 );
		SetMaxWidth( UINT_MAX );
	}

	//--------------------------------------------------------------------------------
	CQGLabel::~CQGLabel()
	{
		delete [] m_pPresentationBuffer;
		__QCS_MEMBER_FCONTEXT( "CQGLabel::~CQGLabel" );
	}

	//--------------------------------------------------------------------------------
	std::string CQGLabel::GetText( void )
	{
		return m_strText;
	}

	//--------------------------------------------------------------------------------
	void CQGLabel::SetText( std::string& strText )
	{
		m_strText = strText;
		m_bModified = true;
	}

	//--------------------------------------------------------------------------------
	void CQGLabel::SetTextAlignment( CQGLabel::eTextAlign Align )
	{
		m_TextAlignment = Align;
	}

	//--------------------------------------------------------------------------------
	CQGLabel::eTextAlign CQGLabel::GetTextAlignment( void )
	{
		return m_TextAlignment;
	}

	//--------------------------------------------------------------------------------
	unsigned int CQGLabel::GetPreferedWidth( void )
	{
		return m_strText.size();
	}

	//--------------------------------------------------------------------------------
	chtype CQGLabel::Attribute( unsigned int uiIndex )
	{
		if( m_pWindow )
		{
			return m_pWindow->GetAttributes();
		}
		return 0;
	}

	//--------------------------------------------------------------------------------
	bool CQGLabel::IsModified()
	{
		return m_bModified;
	}

	//--------------------------------------------------------------------------------
	void CQGLabel::Render()
	{
		delete [] m_pPresentationBuffer;

		m_pPresentationBuffer = new chtype[ GetWidth() ];

		int iTextBegin = 0;//The poisition in the window at which text will start

		if( m_TextAlignment == eRight )
		{
			iTextBegin = GetWidth() - m_strText.size();
		}
		else if( m_TextAlignment == eCenter )
		{
			iTextBegin = ( GetWidth() / 2 ) - ( m_strText.size() / 2 );
		}

		if( iTextBegin < 0 )
		{
			//TODO:
			//Have to offset into text or setup marquee
			iTextBegin = 0;
		}

		unsigned int uiIndex = 0;
		chtype ch;
		for( ; uiIndex < iTextBegin; uiIndex++ )
		{
			ch = Attribute( uiIndex );
			ch |= ' ';
			m_pPresentationBuffer[ uiIndex ] = ch;
		}

		for( ; uiIndex < ( iTextBegin + m_strText.size() ) && uiIndex < GetWidth(); uiIndex++ )
		{
			ch = Attribute( uiIndex );
			ch |= m_strText.c_str()[ uiIndex - iTextBegin ];
			m_pPresentationBuffer[ uiIndex ] = ch;
		}

		for( ; uiIndex < GetWidth(); uiIndex++ )
		{
			ch = Attribute( uiIndex );
			ch |= ' ';
			m_pPresentationBuffer[ uiIndex ] = ch;
		}

		m_bModified = false;
	}

	//--------------------------------------------------------------------------------
	void CQGLabel::Paint()
	{
		if( IsModified() )
		{
			Render();
		}

		if( m_pWindow )
		{
			//Write out the text and attributes to the Window
			m_pWindow->MoveAddChArray( GetXPos(), GetYPos(), m_pPresentationBuffer, GetWidth() );
		}
		m_bNeedsPainting = false;
	}

}//nsQurses
