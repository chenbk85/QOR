//QGVertical.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "Qurses/GUI/QGVertical.h"
#include "CodeQOR/Tracing/FunctionContextBase.h"

//--------------------------------------------------------------------------------
namespace nsQurses
{
	__QOR_IMPLEMENT_OCLASS_LUID( CQGVertical );

	//--------------------------------------------------------------------------------
	CQGVertical::CQGVertical() : CQGLayout()
	{
		__QCS_MEMBER_FCONTEXT( "CQGVertical::CQGVertical" );
		m_uiMaxWidth = UINT_MAX;
		m_uiMaxHeight = UINT_MAX;
	}

	//--------------------------------------------------------------------------------
	CQGVertical::CQGVertical( const CQGVertical& src ) : CQGLayout( src )
	{
		__QCS_MEMBER_FCONTEXT( "CQGVertical::CQGVertical" );
	}

	//--------------------------------------------------------------------------------
	CQGVertical& CQGVertical::operator = ( const CQGVertical& src )
	{
		__QCS_MEMBER_FCONTEXT( "CQGVertical::operator =" );
		if( &src != this )
		{
			CQGLayout::operator = ( src );
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	CQGVertical::~CQGVertical()
	{
		__QCS_MEMBER_FCONTEXT( "CQGVertical::~CQGVertical" );
	}

	//--------------------------------------------------------------------------------
	//smallest maximum width of content
	unsigned int CQGVertical::GetMaxWidth( void )
	{
		unsigned int uiMaxWidth = m_uiMaxWidth;

		for( std::vector< CQGLayoutItem* >::iterator it = m_VecItems.begin(); it != m_VecItems.end(); it++ )
		{
			unsigned int uiChildMax = (*it)->GetMaxWidth();
			if( uiChildMax < uiMaxWidth )
			{
				uiMaxWidth = uiChildMax;
			}
		}
		
		return uiMaxWidth;
	}

	//--------------------------------------------------------------------------------
	//largest minimum width of content
	unsigned int CQGVertical::GetMinWidth( void )
	{
		unsigned int uiMinWidth = m_uiMinWidth;

		for( std::vector< CQGLayoutItem* >::iterator it = m_VecItems.begin(); it != m_VecItems.end(); it++ )
		{
			unsigned int uiChildMin = (*it)->GetMinWidth();
			if( uiChildMin > uiMinWidth )
			{
				uiMinWidth = uiChildMin;
			}
		}
		
		return uiMinWidth;
		
	}

	//--------------------------------------------------------------------------------
	//largest prefered width of content
	unsigned int CQGVertical::GetPreferedWidth( void )
	{
		unsigned int uiPreferedWidth = 0;

		for( std::vector< CQGLayoutItem* >::iterator it = m_VecItems.begin(); it != m_VecItems.end(); it++ )
		{
			unsigned int uiChildPrefered = (*it)->GetPreferedWidth();
			if( uiChildPrefered > uiPreferedWidth )
			{
				uiPreferedWidth = uiChildPrefered;
			}
		}
		
		return uiPreferedWidth;
	}

	//--------------------------------------------------------------------------------
	//sum of max heights of content
	unsigned int CQGVertical::GetMaxHeight( void )
	{
		unsigned int uiMaxHeight = 0;

		for( std::vector< CQGLayoutItem* >::iterator it = m_VecItems.begin(); it != m_VecItems.end(); it++ )
		{
			unsigned int uiChildMax = (*it)->GetMaxHeight();
			uiMaxHeight += uiChildMax;
		}
		
		return uiMaxHeight;		
	}

	//--------------------------------------------------------------------------------
	//sum of minimum heights of content
	unsigned int CQGVertical::GetMinHeight( void )
	{
		unsigned int uiMinHeight = 0;

		for( std::vector< CQGLayoutItem* >::iterator it = m_VecItems.begin(); it != m_VecItems.end(); it++ )
		{
			unsigned int uiChildMin = (*it)->GetMinHeight();
			uiMinHeight += uiChildMin;
		}
		
		return uiMinHeight;
	}

	//--------------------------------------------------------------------------------
	//sum of prefered heights of content
	unsigned int CQGVertical::GetPreferedHeight( void )
	{		
		unsigned int uiPreferedHeight = 0;

		for( std::vector< CQGLayoutItem* >::iterator it = m_VecItems.begin(); it != m_VecItems.end(); it++ )
		{
			unsigned int uiChildPrefered = (*it)->GetPreferedHeight();
			uiPreferedHeight += uiChildPrefered;
		}
		
		return uiPreferedHeight;
	}
		
	//--------------------------------------------------------------------------------
	//layout content on the assumption we've already been layed out
	bool CQGVertical::Layout( void )
	{
		unsigned int uiPreferedHeight = GetPreferedHeight();
		bool bLayoutSucceeded = true;
		unsigned int uiYOffset = m_uiTopMargin;
		for( std::vector< CQGLayoutItem* >::iterator it = m_VecItems.begin(); it != m_VecItems.end(); it++ )
		{
			bLayoutSucceeded &= (*it)->SetWidth( std::min( GetInternalWidth(), (*it)->GetMaxWidth() ) );

			if( (*it)->GetHAlign() == eLeft )
			{
				(*it)->SetXPos( GetXPos() + m_uiLeftMargin );
			}
			else if( (*it)->GetHAlign() == eRight )
			{
				(*it)->SetYPos( GetXPos() + m_uiLeftMargin + GetInternalWidth() - (*it)->GetWidth() );
			}
			else //centered
			{
				(*it)->SetYPos( GetXPos() + m_uiLeftMargin + ( GetInternalWidth() / 2 ) - ( (*it)->GetWidth() / 2 ) );
			}

			(*it)->SetYPos( GetYPos() + uiYOffset );
			
			unsigned int uiItemHeight = std::min( (*it)->GetMaxHeight(),
				std::max( (*it)->GetMinHeight(), 
				unsigned int ( (float)(*it)->GetPreferedHeight() / ( (float)uiPreferedHeight / (float)GetInternalHeight() ) ) ) );
			bLayoutSucceeded &= (*it)->SetHeight( uiItemHeight );
			uiYOffset += uiItemHeight;
			bLayoutSucceeded &= (*it)->Layout();
		}
		m_bNeedsPainting = true;
		return bLayoutSucceeded;
	}


}//nsQurses
